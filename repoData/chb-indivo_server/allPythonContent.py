__FILENAME__ = api-skeleton


CALLS=[{
    "method":"POST",
    "path":"/accounts/",
    "view_func_name":"account_create",
    "access_doc":"Any admin app.",
    "url_params":{
        },
    "query_opts":{
        },
    "data_fields":{
        'contact_email':'A valid email at which to reach the account holder.',
        'secondary_secret_p':'0 or 1: Does this account require a secondary secret?',
        'primary_secret_p':'0 or 1: Does this account require a primary secret?',
        'account_id':'An identifier for the new account. Must be a valid email address. **REQUIRED**',
        'full_name':'The full name to associate with the account.',
        },
    "description":"Create a new account, and send out initialization emails.",
    "return_desc":":http:statuscode:`200` with information about the new account on success, :http:statuscode:`400` if ``ACCOUNT_ID`` isn't passed or is already used.",
    "return_ex":'''
<Account id="joeuser@indivo.example.org">
  <fullName>Joe User</fullName>
  <contactEmail>joeuser@gmail.com</contactEmail>
  <lastLoginAt>2010-05-04T15:34:23Z</lastLoginAt>
  <totalLoginCount>43</totalLoginCount>
  <failedLoginCount>0</failedLoginCount>
  <state>active</state>
  <lastStateChange>2009-04-03T13:12:12Z</lastStateChange>

  <authSystem name="password" username="joeuser" />
  <authSystem name="hospital_sso" username="Joe_User" />
</Account>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/accounts/search",
    "view_func_name":"account_search",
    "access_doc":"Any admin app.",
    "url_params":{
        },
    "query_opts":{
        'fullname':'The full name of the account to search for',
        'contact_email':'The contact email of the account to search for',
        },
    "data_fields":{
        },
    "description":"Search for accounts by name or email.",
    "return_desc":":http:statuscode:`200` with information about matching accounts, or :http:statuscode:`400` if no search parameters are passed.",
    "return_ex":'''
<Accounts>
  <Account id="joeuser@indivo.example.org">
    <fullName>Joe User</fullName>
    <contactEmail>joeuser@gmail.com</contactEmail>
    <lastLoginAt>2010-05-04T15:34:23Z</lastLoginAt>
    <totalLoginCount>43</totalLoginCount>
    <failedLoginCount>0</failedLoginCount>
    <state>active</state>
    <lastStateChange>2009-04-03T13:12:12Z</lastStateChange>

    <authSystem name="password" username="joeuser" />
    <authSystem name="hospital_sso" username="Joe_User" />
  </Account>

  ...

</Accounts>

''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/accounts/{ACCOUNT_EMAIL}",
    "view_func_name":"account_info",
    "access_doc":"Any admin app, or the Account owner.",
    "url_params":{
        'ACCOUNT_EMAIL':'The email identifier of the Indivo account',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Display information about an account.",
    "return_desc":":http:statuscode:`200` with information about the account",
    "return_ex":'''
<Account id="joeuser@indivo.example.org">
  <fullName>Joe User</fullName>
  <contactEmail>joeuser@gmail.com</contactEmail>
  <lastLoginAt>2010-05-04T15:34:23Z</lastLoginAt>
  <totalLoginCount>43</totalLoginCount>
  <failedLoginCount>0</failedLoginCount>
  <state>active</state>
  <lastStateChange>2009-04-03T13:12:12Z</lastStateChange>

  <authSystem name="password" username="joeuser" />
  <authSystem name="hospital_sso" username="Joe_User" />
</Account>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/accounts/{ACCOUNT_EMAIL}/apps/{PHA_EMAIL}/connect_credentials",
    "view_func_name":"get_connect_credentials",
    "access_doc":"The Account owner.",
    "url_params":{
        'ACCOUNT_EMAIL':'The email identifier of the Indivo account to authorize the connect credentials',
        'PHA_EMAIL':'The email identifier of the Indivo user app to grant access via the connect credentials',
        },
    "query_opts":{
        },
    "data_fields":{
        'record_id':'The identifier of the Indivo Record to which to grant access via the connect credentials',
        },
    "description":"Get oAuth credentials for an app to run in Connect or SMART REST mode.",
    "return_desc":":http:statuscode:`200` with a set of credentials providing access for the app to the record, via :ref:`Connect-Style Authentication <connect-auth>` and via :ref:`Standard oAuth <traditional-oauth>` authentication. Additionally, the credentials include a precalculated oAuth Header that the app can use to access the record.",
    "return_ex":'''
<ConnectCredentials>
  <App id="problems@apps.indivo.org" />
  <ConnectToken>1QzyGdx13Da</ConnectToken>
  <ConnectSecret>re3Qg4dxaf9</ConnectSecret>
  <APIBase>http://your_indivo_instance.org:8000</APIBase>
  <RESTToken>7qGer7dx4gC</RESTToken>
  <RESTSecret>5JpXb0G2g4u</RESTSecret>
  <OAuthHeader>OAuth realm="", oauth_version="1.0", oauth_consumer_key="problems%40apps.indivo.org", oauth_signature_method="HMAC-SHA1", oauth_nonce="VNGQuyvdHbGLsFXm2oIL", oauth_timestamp="1334848404", oauth_signature="HHpwLSSCxgRhYfWDw3uLdmjsyMk%3D"</OAuthHeader>
  <ExpiresAt>2012-07-04T00:00:00Z</ExpiresAt>
</ConnectCredentials>
''',
    "deprecated": None,
    "added": ('2.0.0', ''),
    "changed": None,

},
{
    "method":"DELETE",
    "path":"/accounts/{ACCOUNT_EMAIL}/apps/{PHA_EMAIL}/preferences",
    "view_func_name":"delete_user_preferences",
    "access_doc":"The Account owner.",
    "url_params":{
        'ACCOUNT_EMAIL':'The email identifier of the Indivo account',
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Delete all app-specific User Preferences for an account.",
    "return_desc":":http:statuscode:`200 Success`",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": ('2.0.0', ''),
    "changed": None,

},
{
    "method":"GET",
    "path":"/accounts/{ACCOUNT_EMAIL}/apps/{PHA_EMAIL}/preferences",
    "view_func_name":"get_user_preferences",
    "access_doc":"The Account owner.",
    "url_params":{
        'ACCOUNT_EMAIL':'The email identifier of the Indivo account',
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Get app-specific User Preferences for an account.",
    "return_desc":":http:statuscode:`200`, with app-specific user preferences",
    "return_ex":'''
Preferences format is defined by the app setting the preferences, and will therefore vary.
''',
    "deprecated": None,
    "added": ('2.0.0', ''),
    "changed": None,

},
{
    "method":"PUT",
    "path":"/accounts/{ACCOUNT_EMAIL}/apps/{PHA_EMAIL}/preferences",
    "view_func_name":"set_user_preferences",
    "access_doc":"The Account owner.",
    "url_params":{
        'ACCOUNT_EMAIL':'The email identifier of the Indivo account',
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Set app-specific User Preferences for an account.",
    "return_desc":":http:statuscode:`200 Success`",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": ('2.0.0', ''),
    "changed": None,

},
{
    "method":"POST",
    "path":"/accounts/{ACCOUNT_EMAIL}/authsystems/",
    "view_func_name":"account_authsystem_add",
    "access_doc":"Any admin app.",
    "url_params":{
        'ACCOUNT_EMAIL':'The email identifier of the Indivo account',
        },
    "query_opts":{
        },
    "data_fields":{
        'username':'The username for this account',
        'password':'The password for this account',
        'system':'The identifier of the desired authsystem. ``password`` indicates the              internal password system.',
        },
    "description":"Add a new method of authentication to an account.",
    "return_desc":":http:statuscode:`200 Success`, :http:statuscode:`403` if the indicated auth system doesn't exist, and :http:statuscode:`400` if a system and a username weren't passed, or if the account is already registered with the passed system, or if the username is already taken for the passed authsystem.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/accounts/{ACCOUNT_EMAIL}/authsystems/password/change",
    "view_func_name":"account_password_change",
    "access_doc":"The Account owner.",
    "url_params":{
        'ACCOUNT_EMAIL':'The email identifier of the Indivo account',
        },
    "query_opts":{
        },
    "data_fields":{
        'new':'The desired new password.',
        'old':'The existing account password.',
        },
    "description":"Change a account's password.",
    "return_desc":":http:statuscode:`200 Success`, :http:statuscode:`403` if the old password didn't validate, or :http:statuscode:`400` if both a new and old password weren't passed.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/accounts/{ACCOUNT_EMAIL}/authsystems/password/set",
    "view_func_name":"account_password_set",
    "access_doc":"Any admin app.",
    "url_params":{
        'ACCOUNT_EMAIL':'The email identifier of the Indivo account',
        },
    "query_opts":{
        },
    "data_fields":{
        'password':'The new password to set.',
        },
    "description":"Force the password of an account to a given value.",
    "return_desc":":http:statuscode:`200 Success`, or :http:statuscode:`400` if a new password wasn't passed.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/accounts/{ACCOUNT_EMAIL}/authsystems/password/set-username",
    "view_func_name":"account_username_set",
    "access_doc":"Any admin app, or the Account owner.",
    "url_params":{
        'ACCOUNT_EMAIL':'The email identifier of the Indivo account',
        },
    "query_opts":{
        },
    "data_fields":{
        'username':'The new username to set.',
        },
    "description":"Force the username of an account to a given value.",
    "return_desc":":http:statuscode:`200 Success`, :http:statuscode:`400` if a username wasn't passed.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/accounts/{ACCOUNT_EMAIL}/check-secrets/{PRIMARY_SECRET}",
    "view_func_name":"account_check_secrets",
    "access_doc":"Any admin app.",
    "url_params":{
        'ACCOUNT_EMAIL':'The email identifier of the Indivo account',
        'PRIMARY_SECRET':'A confirmation string sent securely to the patient from Indivo',
        },
    "query_opts":{
        'secondary_secret':'The secondary secret of the account to check.',
        },
    "data_fields":{
        },
    "description":"Validate an account's primary and secondary secrets.",
    "return_desc":":http:statuscode:`200 Success`, or :http:statuscode:`403` if validation fails.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/accounts/{ACCOUNT_EMAIL}/forgot-password",
    "view_func_name":"account_forgot_password",
    "access_doc":"Any admin app.",
    "url_params":{
        'ACCOUNT_EMAIL':'The email identifier of the Indivo account',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Resets an account if the user has forgotten its password.",
    "return_desc":":http:statuscode`200` with the account's new secondary secret, or :http:statuscode:`400` if the account hasn't yet been initialized.",
    "return_ex":'''
<secret>123456</secret>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/accounts/{ACCOUNT_EMAIL}/inbox/",
    "view_func_name":"account_inbox",
    "access_doc":"The Account owner.",
    "url_params":{
        'ACCOUNT_EMAIL':'The email identifier of the Indivo account',
        },
    "query_opts":{
        'status':'The account or document status to filter by',
        'limit':'See :ref:`query-operators`',
        'order_by':'See :ref:`query-operators`',
        'include_archive':'0 or 1: whether or not to include archived messages in the result set.',
        'offset':'See :ref:`query-operators`',
        },
    "data_fields":{
        },
    "description":"List messages in an account's inbox.",
    "return_desc":":http:statuscode:`200`, with a list of inbox messages.",
    "return_ex":'''
<Messages>
  <Message id="879">
    <sender>doctor@example.indivo.org</sender>
    <received_at>2010-09-04T14:12:12Z</received_at>
    <read_at>2010-09-04T17:13:24Z</read_at>
    <subject>your test results are looking good</subject>
    <severity>normal</severity>
    <record id="123" />
    <attachment num="1" type="http://indivo.org/vocab/xml/documents#Models" size="12546" />
  </Message>

  ...

</Messages>

''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/accounts/{ACCOUNT_EMAIL}/inbox/",
    "view_func_name":"account_send_message",
    "access_doc":"Any admin app.",
    "url_params":{
        'ACCOUNT_EMAIL':'The email identifier of the Indivo account',
        },
    "query_opts":{
        },
    "data_fields":{
        'body':'The message body. Defaults to ``[no body]``.',
        'body_type':'The formatting of the message body. Options are ``plaintext``, ``markdown``. Defaults to ``plaintext``.',
        'subject':'The message subject. Defaults to ``[no subject]``.',
        'message_id':'An external identifier for the message, for idempotency.',
        'severity':'The importance of the message. Options are ``low``, ``medium``, ``high``. Defaults to ``low``.',
        },
    "description":"Send a message to an account.",
    "return_desc":":http:statuscode:`200 Success` with XML describing the message, or http:statuscode:`400` if the passed message_id is a duplicate. Also emails account to alert them that a new message has arrived.",
    "return_ex":'''
<Message id="63de173d-0dba-4cbd-92bd-5ef3b638ffd2">
    <sender>test@indivo.org</sender>
    <received_at>2012-07-13T15:59:25.102905Z</received_at>
    <read_at></read_at>
    <archived_at></archived_at>
    <subject>subj</subject>
    <severity>low</severity>
    <record id="03302536-a00d-425a-8b87-533d0d37478e" />
</Message>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/accounts/{ACCOUNT_EMAIL}/inbox/{MESSAGE_ID}",
    "view_func_name":"account_inbox_message",
    "access_doc":"The Account owner.",
    "url_params":{
        'ACCOUNT_EMAIL':'The email identifier of the Indivo account',
        'MESSAGE_ID':'The unique identifier of the Indivo Message',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Retrieve an individual message from an account's inbox.",
    "return_desc":":http:statuscode:`200`, with XML describing the message.",
    "return_ex":'''
<Message id="879">
  <sender>doctor@example.indivo.org</sender>
  <received_at>2010-09-04T14:12:12Z</received_at>
  <read_at>2010-09-04T17:13:24Z</read_at>
  <archived_at>2010-09-04T17:15:24Z</archived_at>
  <subject>your test results are looking good</subject>
  <body>Great results!
 It seems you'll live forever!</body>
  <severity>normal</severity>
  <record id="123" />
  <attachment num="1" type="http://indivo.org/vocab/xml/documents#Models" size="12546" />
</Message>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/accounts/{ACCOUNT_EMAIL}/inbox/{MESSAGE_ID}/archive",
    "view_func_name":"account_message_archive",
    "access_doc":"The Account owner.",
    "url_params":{
        'ACCOUNT_EMAIL':'The email identifier of the Indivo account',
        'MESSAGE_ID':'The unique identifier of the Indivo Message',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Archive a message.",
    "return_desc":":http:statuscode:`200 Success`.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/accounts/{ACCOUNT_EMAIL}/inbox/{MESSAGE_ID}/attachments/{ATTACHMENT_NUM}/accept",
    "view_func_name":"account_inbox_message_attachment_accept",
    "access_doc":"The Account owner.",
    "url_params":{
        'ATTACHMENT_NUM':'The 1-indexed number corresponding to the message attachment',
        'ACCOUNT_EMAIL':'The email identifier of the Indivo account',
        'MESSAGE_ID':'The unique external identifier of the Indivo Message',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Accept a message attachment into the record it corresponds to.",
    "return_desc":":http:statuscode:`200 Success`, or :http:statuscode:`410` if the attachment has already been saved.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/accounts/{ACCOUNT_EMAIL}/info-set",
    "view_func_name":"account_info_set",
    "access_doc":"Any admin app, or the Account owner.",
    "url_params":{
        'ACCOUNT_EMAIL':'The email identifier of the Indivo account',
        },
    "query_opts":{
        },
    "data_fields":{
        'contact_email':'A valid email at which to reach the account holder.',
        'full_name':'The full name of the account.',
        },
    "description":"Set basic information about an account.",
    "return_desc":":http:statuscode:`200`, or :http:statuscode:`400` if no parameters are passed in.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/accounts/{ACCOUNT_EMAIL}/initialize/{PRIMARY_SECRET}",
    "view_func_name":"account_initialize",
    "access_doc":"Any Indivo UI app.",
    "url_params":{
        'ACCOUNT_EMAIL':'The email identifier of the Indivo account',
        'PRIMARY_SECRET':'A confirmation string sent securely to the patient from Indivo',
        },
    "query_opts":{
        },
    "data_fields":{
        'secondary_secret':'',
        },
    "description":"Initialize an account, activating it.",
    "return_desc":":http:statuscode:`200 Success`, :http:statuscode:`403` if the account has already been initialized or if secrets didn't validate, and :http:statuscode:`400` if a secondary secret was required but missing.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/accounts/{ACCOUNT_EMAIL}/notifications/",
    "view_func_name":"account_notifications",
    "access_doc":"The Account owner.",
    "url_params":{
        'ACCOUNT_EMAIL':'The email identifier of the Indivo account',
        },
    "query_opts":{
        'status':'The account or document status to filter by',
        'order_by':'See :ref:`query-operators`',
        'limit':'See :ref:`query-operators`',
        'offset':'See :ref:`query-operators`',
        },
    "data_fields":{
        },
    "description":"List an account's notifications.",
    "return_desc":":http:statuscode:`200` with a list of the account's notifications.",
    "return_ex":'''
<Notifications>
  <Notification id="468">
    <sender>labs@apps.indivo.org</sender>
    <received_at>2010-09-03T15:12:12Z</received_at>
    <content>A new lab result has been delivered to your account</content>
    <record id="123" label="Joe User" />
    <document id="579" label="Lab Test 2" />
  </Notification>

  ...

</Notifications>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/accounts/{ACCOUNT_EMAIL}/permissions/",
    "view_func_name":"account_permissions",
    "access_doc":"The Account owner.",
    "url_params":{
        'ACCOUNT_EMAIL':'The email identifier of the Indivo account',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"List the carenets that an account has access to.",
    "return_desc":":http:statuscode:`200` with a list of carenets.",
    "return_ex":'''
<Carenets record_id="01234">
    <Carenet id="456" name="family" mode="explicit" />
    <Carenet id="567" name="school" mode="explicit" />
</Carenets>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/accounts/{ACCOUNT_EMAIL}/primary-secret",
    "view_func_name":"account_primary_secret",
    "access_doc":"Any admin app.",
    "url_params":{
        'ACCOUNT_EMAIL':'The email identifier of the Indivo account',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Display an account's primary secret.",
    "return_desc":":http:statuscode:`200`, with the primary secret.",
    "return_ex":'''
<secret>123absxzyasdg13b</secret>
''',
    "deprecated": ('1.0.0', 'Avoid sending primary secrets over the wire. Instead, use :http:get:`/accounts/{ACCOUNT_EMAIL}/check-secrets/{PRIMARY_SECRET}`.'),
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/accounts/{ACCOUNT_EMAIL}/records/",
    "view_func_name":"record_list",
    "access_doc":"Any admin app, or the Account owner.",
    "url_params":{
        'ACCOUNT_EMAIL':'The email identifier of the Indivo account',
        },
    "query_opts":{
        'status':'The account or document status to filter by',
        'limit':'See :ref:`query-operators`',
        'order_by':'See :ref:`query-operators`',
        'offset':'See :ref:`query-operators`',
        },
    "data_fields":{
        },
    "description":"List all available records for an account.",
    "return_desc":":http:statuscode:`200`, with a list of records owned or shared with the account.",
    "return_ex":'''
<Records>
  <Record id="123" label="John R. Smith" />
  <Record id="234" label="John R. Smith Jr. (shared)" shared="true" role_label="Guardian" />
  <Record id="345" label="Juanita R. Smith (carenet)" shared="true" carenet_id="678" carenet_name="family" />

  ...

</Records>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/accounts/{ACCOUNT_EMAIL}/reset",
    "view_func_name":"account_reset",
    "access_doc":"Any admin app.",
    "url_params":{
        'ACCOUNT_EMAIL':'The email identifier of the Indivo account',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Reset an account to an ``uninitialized`` state.",
    "return_desc":":http:statuscode:`200 Success`.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/accounts/{ACCOUNT_EMAIL}/secret",
    "view_func_name":"account_secret",
    "access_doc":"Any admin app.",
    "url_params":{
        'ACCOUNT_EMAIL':'The email identifier of the Indivo account',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Return the secondary secret of an account.",
    "return_desc":":http:statuscode:`200`, with the secondary secret.",
    "return_ex":'''
<secret>123456</secret>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/accounts/{ACCOUNT_EMAIL}/secret-resend",
    "view_func_name":"account_resend_secret",
    "access_doc":"Any admin app.",
    "url_params":{
        'ACCOUNT_EMAIL':'The email identifier of the Indivo account',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Sends an account user their primary secret in case they lost it.",
    "return_desc":":http:statuscode:`200 Success`. Also emails the account with their new secret.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/accounts/{ACCOUNT_EMAIL}/set-state",
    "view_func_name":"account_set_state",
    "access_doc":"Any admin app.",
    "url_params":{
        'ACCOUNT_EMAIL':'The email identifier of the Indivo account',
        },
    "query_opts":{
        },
    "data_fields":{
        'state':'The desired state of the account. Options are ``active``, ``disabled``, ``retired``.',
        },
    "description":"Set the state of an account.",
    "return_desc":":http:statuscode:`200 Success`, or :http:statuscode:`403` if the account has been retired and can no longer change state.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/apps/",
    "view_func_name":"all_phas",
    "access_doc":"Any principal in Indivo.",
    "url_params":{
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"List all available userapps.",
    "return_desc":":http:statuscode:`200`, with a list of app manifests as JSON on success.",
    "return_ex":'''
[
{
    "name" : "SMART Problems",
    "description" : "Display problems in a table view",
    "author" : "Josh Mandel, Children's Hospital Boston",
    "id" : "problem-list@apps.smartplatforms.org",
    "version" : ".1a",

    "mode" : "ui",
    "scope": "record",

    "index" : "http://fda.gping.org:8012/framework/problem_list/index.html",	
    "icon" : "http://fda.gping.org:8012/framework/problem_list/icon.png",
  
    "requires" : {
        "http://smartplatforms.org/terms#Problem": {
            "methods": ["GET"]
        }
    }
},

... other apps ...

]
''',
    "deprecated": None,
    "added": None,
    "changed": ('2.0.0', 'Apps are now returned as JSON manifests, not XML'),

},
{
    "method":"GET",
    "path":"/apps/manifests/",
    "view_func_name":"all_manifests",
    "access_doc":"Any principal in Indivo.",
    "url_params":{
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"List SMART manifests for all available userapps.",
    "return_desc":"SMART-style manifests for each app.",
    "return_ex":'''
[
{
    "name" : "SMART Problems",
    "description" : "Display problems in a table view",
    "author" : "Josh Mandel, Children's Hospital Boston",
    "id" : "problem-list@apps.smartplatforms.org",
    "version" : ".1a",

    "mode" : "ui",
    "scope": "record",

    "index" : "http://fda.gping.org:8012/framework/problem_list/index.html",	
    "icon" : "http://fda.gping.org:8012/framework/problem_list/icon.png",
  
    "requires" : {
        "http://smartplatforms.org/terms#Problem": {
            "methods": ["GET"]
        }
    }
},

... other apps ...

]
''',
    "deprecated": None,
    "added": ('2.0.0', ''),
    "changed": None,

},
{
    "method":"DELETE",
    "path":"/apps/{PHA_EMAIL}",
    "view_func_name":"pha_delete",
    "access_doc":"The user app itself.",
    "url_params":{
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Delete a userapp from Indivo.",
    "return_desc":":http:statuscode:`200 Success`.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/apps/{PHA_EMAIL}",
    "view_func_name":"pha",
    "access_doc":"Any principal in Indivo.",
    "url_params":{
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Return a description of a single userapp.",
    "return_desc":":http:statuscode:`200`, with the app's JSON manifest",
    "return_ex":'''
{
    "name" : "SMART Problems",
    "description" : "Display problems in a table view",
    "author" : "Josh Mandel, Children's Hospital Boston",
    "id" : "problem-list@apps.smartplatforms.org",
    "version" : ".1a",

    "mode" : "ui",
    "scope": "record",

    "index" : "http://fda.gping.org:8012/framework/problem_list/index.html",	
    "icon" : "http://fda.gping.org:8012/framework/problem_list/icon.png",
  
    "requires" : {
        "http://smartplatforms.org/terms#Problem": {
            "methods": ["GET"]
        }
    }
}
''',
    "deprecated": None,
    "added": None,
    "changed": ('2.0.0', 'Apps are now returned as JSON manifests, not XML'),

},
{
    "method":"GET",
    "path":"/apps/{PHA_EMAIL}/documents/",
    "view_func_name":"app_document_list",
    "access_doc":"A user app with an id matching the app email in the URL.",
    "url_params":{
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        },
    "query_opts":{
        'status':'The account or document status to filter by',
        'type':'The Indivo document type to filter by',
        'order_by':'See :ref:`query-operators`',
        'limit':'See :ref:`query-operators`',
        'offset':'See :ref:`query-operators`',
        },
    "data_fields":{
        },
    "description":"List app-specific documents.",
    "return_desc":":http:statuscode:`200` with A list of documents, or http:statuscode:`404` if an invalid type was passed in the querystring.",
    "return_ex":'''
<Documents record_id="" total_document_count="4" pha="problems@apps.indivo.org">
  <Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
    <createdAt>2009-05-04T17:05:33</createdAt>
    <creator id="steve@indivo.org" type="account">
      <fullname>Steve Zabak</fullname>
    </creator>
    <suppressedAt>2009-05-06T17:05:33</suppressedAt>
    <suppressor id="steve@indivo.org" type="account">
      <fullname>Steve Zabak</fullname>
    </suppressor>
    <original id="14c81023-c84f-496d-8b8e-9438280441d3" />
    <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
    <label>HBA1C reading</label>
    <status>active</status>
    <nevershare>false</nevershare>
    <relatesTo>
      <relation type="http://indivo.org/vocab/documentrels#attachment" count="1" />
      <relation type="http://indivo.org/vocab/documentrels#annotation" count="5" />
    </relatesTo>
    <isRelatedFrom>
      <relation type="http://indivo.org/vocab/documentrels#interpretation" count="1" />
    </isRelatedFrom>
  </Document>

  ...

</Documents>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/apps/{PHA_EMAIL}/documents/",
    "view_func_name":"app_document_create",
    "access_doc":"A user app with an id matching the app email in the URL.",
    "url_params":{
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        },
    "query_opts":{
        },
    "data_fields":{
        '':'The raw content of the document to create.',
        },
    "description":"Create an app-specific Indivo document.",
    "return_desc":":http:statuscode:`200` with the metadata of the created document, or :http:statuscode:`400` if the new document failed validation.",
    "return_ex":'''
<Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
  <createdAt>2009-05-04T17:05:33</createdAt>
  <creator id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </creator>
  <suppressedAt>2009-05-06T17:05:33</suppressedAt>
  <suppressor id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </suppressor>
  <original id="14c81023-c84f-496d-8b8e-9438280441d3" />
  <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
  <label>HBA1C reading</label>
  <status>active</status>
  <nevershare>false</nevershare>
  <relatesTo>
    <relation type="http://indivo.org/vocab/documentrels#attachment" count="1" />
    <relation type="http://indivo.org/vocab/documentrels#annotation" count="5" />
  </relatesTo>
  <isRelatedFrom>
    <relation type="http://indivo.org/vocab/documentrels#interpretation" count="1" />
  </isRelatedFrom>
</Document>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"PUT",
    "path":"/apps/{PHA_EMAIL}/documents/external/{EXTERNAL_ID}",
    "view_func_name":"app_document_create_or_update_ext",
    "access_doc":"A user app with an id matching the app email in the URL.",
    "url_params":{
        'EXTERNAL_ID':'The external identifier of the desired resource',
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        },
    "query_opts":{
        },
    "data_fields":{
        '':'The raw content of the document to create.',
        },
    "description":"Create an app-specific Indivo document with an associated external id.",
    "return_desc":":http:statuscode:`200` with the metadata of the created or updated document, or :http:statuscode:`400` if the passed content didn't validate.",
    "return_ex":'''
<Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
  <createdAt>2009-05-04T17:05:33</createdAt>
  <creator id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </creator>
  <suppressedAt>2009-05-06T17:05:33</suppressedAt>
  <suppressor id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </suppressor>
  <original id="14c81023-c84f-496d-8b8e-9438280441d3" />
  <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
  <label>HBA1C reading</label>
  <status>active</status>
  <nevershare>false</nevershare>
</Document>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/apps/{PHA_EMAIL}/documents/external/{EXTERNAL_ID}/meta",
    "view_func_name":"app_document_meta_ext",
    "access_doc":"A user app with an id matching the app email in the URL.",
    "url_params":{
        'EXTERNAL_ID':'The external identifier of the desired resource',
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Fetch the metadata of an app-specific document identified by external id.",
    "return_desc":":http:statuscode:`200` with metadata describing the specified document, or http:statuscode:`404` if the external_id is invalid.",
    "return_ex":'''
<Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
  <createdAt>2009-05-04T17:05:33</createdAt>
  <creator id="problems@apps.indivo.org" type="pha">
    <fullname>Steve Zabak</fullname>
  </creator>
  <suppressedAt>2009-05-06T17:05:33</suppressedAt>
  <suppressor id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </suppressor>
  <original id="14c81023-c84f-496d-8b8e-9438280441d3" />
  <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
  <label>HBA1C reading</label>
  <status>active</status>
  <nevershare>false</nevershare>
</Document>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"DELETE",
    "path":"/apps/{PHA_EMAIL}/documents/{DOCUMENT_ID}",
    "view_func_name":"app_document_delete",
    "access_doc":"A user app with an id matching the app email in the URL.",
    "url_params":{
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Delete an app-specific document.",
    "return_desc":":http:statuscode:`200 Success`, or :http:statuscode:`404` if ``DOCUMENT_ID`` is invalid.",
    "return_ex":'''
</ok>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/apps/{PHA_EMAIL}/documents/{DOCUMENT_ID}",
    "view_func_name":"app_specific_document",
    "access_doc":"A user app with an id matching the app email in the URL.",
    "url_params":{
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Retrive an app-specific document.",
    "return_desc":":http:statuscode:`200` with the raw content of the document, or :http:statuscode:`404` if the document could not be found.",
    "return_ex":'''
<DefaultProblemsPreferences record_id="123">
  <Preference name="hide_void" value="true" />
  <Preference name="show_rels" value="false" />
</DefaultProblemsPreferences>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"PUT",
    "path":"/apps/{PHA_EMAIL}/documents/{DOCUMENT_ID}",
    "view_func_name":"app_document_create_or_update",
    "access_doc":"A user app with an id matching the app email in the URL.",
    "url_params":{
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        },
    "query_opts":{
        },
    "data_fields":{
        '':'The raw content of the document to create.',
        },
    "description":"Create or Overwrite an app-specific Indivo document.",
    "return_desc":":http:statuscode:`200` with metadata describing the created or updated document, or :http:statuscode:`400` if the passed content didn't validate.",
    "return_ex":'''
<Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
  <createdAt>2009-05-04T17:05:33</createdAt>
  <creator id="problems@apps.indivo.org" type="pha">
  </creator>
  <original id="14c81023-c84f-496d-8b8e-9438280441d3" />
  <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
  <label>HBA1C reading preferences</label>
  <status>active</status>
  <nevershare>false</nevershare>
</Document>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"PUT",
    "path":"/apps/{PHA_EMAIL}/documents/{DOCUMENT_ID}/label",
    "view_func_name":"app_document_label",
    "access_doc":"A user app with an id matching the app email in the URL.",
    "url_params":{
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        },
    "query_opts":{
        },
    "data_fields":{
        '':'The new label for the document',
        },
    "description":"Set the label of an app-specific document.",
    "return_desc":":http:statuscode:`200` with metadata describing the re-labeled document, or :http:statuscode:`404` if ``DOCUMENT_ID`` is invalid.",
    "return_ex":'''
<Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
  <createdAt>2009-05-04T17:05:33</createdAt>
  <creator id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </creator>
  <suppressedAt>2009-05-06T17:05:33</suppressedAt>
  <suppressor id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </suppressor>
  <original id="14c81023-c84f-496d-8b8e-9438280441d3" />
  <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
  <label>RELABELED: New HBA1C reading</label>
  <status>active</status>
  <nevershare>false</nevershare>
  <relatesTo>
    <relation type="http://indivo.org/vocab/documentrels#attachment" count="1" />
    <relation type="http://indivo.org/vocab/documentrels#annotation" count="5" />
  </relatesTo>
  <isRelatedFrom>
    <relation type="http://indivo.org/vocab/documentrels#interpretation" count="1" />
  </isRelatedFrom>
</Document>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/apps/{PHA_EMAIL}/documents/{DOCUMENT_ID}/meta",
    "view_func_name":"app_document_meta",
    "access_doc":"A user app with an id matching the app email in the URL.",
    "url_params":{
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Fetch the metadata of an app-specific document.",
    "return_desc":":http:statuscode:`200` with the document metadata, or :http:statuscode:`404` if ``DOCUMENT_ID`` is invalid.",
    "return_ex":'''
<Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
  <createdAt>2009-05-04T17:05:33</createdAt>
  <creator id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </creator>
  <suppressedAt>2009-05-06T17:05:33</suppressedAt>
  <suppressor id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </suppressor>
  <original id="14c81023-c84f-496d-8b8e-9438280441d3" />
  <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
  <label>HBA1C reading</label>
  <status>active</status>
  <nevershare>false</nevershare>
  <relatesTo>
    <relation type="http://indivo.org/vocab/documentrels#attachment" count="1" />
    <relation type="http://indivo.org/vocab/documentrels#annotation" count="5" />
  </relatesTo>
  <isRelatedFrom>
    <relation type="http://indivo.org/vocab/documentrels#interpretation" count="1" />
  </isRelatedFrom>
</Document>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/apps/{PHA_EMAIL}/manifest",
    "view_func_name":"app_manifest",
    "access_doc":"Any principal in Indivo.",
    "url_params":{
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Return a SMART manifest for a single userapp.",
    "return_desc":"A SMART-style manifest for the app.",
    "return_ex":'''
{
    "name" : "SMART Problems",
    "description" : "Display problems in a table view",
    "author" : "Josh Mandel, Children's Hospital Boston",
    "id" : "problem-list@apps.smartplatforms.org",
    "version" : ".1a",

    "mode" : "ui",
    "scope": "record",

    "index" : "http://fda.gping.org:8012/framework/problem_list/index.html",	
    "icon" : "http://fda.gping.org:8012/framework/problem_list/icon.png",
  
    "requires" : {
        "http://smartplatforms.org/terms#Problem": {
            "methods": ["GET"]
        }
    }
}
''',
    "deprecated": None,
    "added": ('2.0.0', ''),
    "changed": None,

},
{
    "method":"GET",
    "path":"/apps/{PHA_EMAIL}/records/",
    "view_func_name":"app_record_list",
    "access_doc":"Any autonomous user app.",
    "url_params":{
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Return a list of all records that have this pha enabled.",
    "return_desc":":http:statuscode:`200` with a list of records on success.",
    "return_ex":'''
<Records>
  <Record id="123" label="John R. Smith" />
  <Record id = "234" label="Frank Frankson" />

  ...

</Records>
''',
    "deprecated": None,
    "added": ('1.0.0', ''),
    "changed": None,

},
{
    "method":"POST",
    "path":"/apps/{PHA_EMAIL}/records/{RECORD_ID}/access_token",
    "view_func_name":"autonomous_access_token",
    "access_doc":"An autonomous user app with a record on which the app is authorized to run.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Fetch an access token for an autonomous app to access a record.",
    "return_desc":":http:statuscode:`200` with a valid access token for the app bound to the record on success.",
    "return_ex":'''
oauth_token=abcd1fw3gasdgh3&oauth_token_secret=jgrlhre4291hfjas&xoauth_indivo_record_id=123
''',
    "deprecated": None,
    "added": ('1.0.0', ''),
    "changed": None,

},
{
    "method":"GET",
    "path":"/capabilities/",
    "view_func_name":"smart_capabilities",
    "access_doc":"Any principal in Indivo.",
    "url_params":{
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"SMART Capabilities",
    "return_desc":"JSON formatted SMART capabilities",
    "return_ex":'''
{
    "http://smartplatforms.org/terms#Demographics": {
        "methods": [
            "GET"
        ]
    }, 
    "http://smartplatforms.org/terms#Encounter": {
        "methods": [
            "GET"
        ]
    }, 
    "http://smartplatforms.org/terms#VitalSigns": {
        "methods": [
            "GET"
        ]
    }
}
''',
    "deprecated": None,
    "added": ('2.0.0', ''),
    "changed": None,

},
{
    "method":"DELETE",
    "path":"/carenets/{CARENET_ID}",
    "view_func_name":"carenet_delete",
    "access_doc":"A principal in full control of the carenet's record.",
    "url_params":{
        'CARENET_ID':'The id string associated with the Indivo carenet',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Delete a carenet.",
    "return_desc":":http:statuscode:`200 Success`.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/carenets/{CARENET_ID}/accounts/",
    "view_func_name":"carenet_account_list",
    "access_doc":"A principal in the carenet, in full control of the carenet's record, or any admin app.",
    "url_params":{
        'CARENET_ID':'The id string associated with the Indivo carenet',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"List the accounts in a carenet.",
    "return_desc":":http:statuscode:`200` with a list of accounts in the specified carenet.",
    "return_ex":'''
<CarenetAccounts>
  <CarenetAccount id="johndoe@indivo.org" fullName="John Doe" write="true" />

  ...

</CarenetAccounts>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/carenets/{CARENET_ID}/accounts/",
    "view_func_name":"carenet_account_create",
    "access_doc":"A principal in full control of the carenet's record.",
    "url_params":{
        'CARENET_ID':'The id string associated with the Indivo carenet',
        },
    "query_opts":{
        },
    "data_fields":{
        'write':'``true`` or ``false``. Whether this account can write to the carenet.',
        'account_id':'An identifier for the account. Must be a valid email address.',
        },
    "description":"Add an account to a carenet.",
    "return_desc":":http:statuscode:`200 Success`, :http:statuscode:`404` if the specified account or carenet don't exist, or :http:statuscode:`400` if an account_id isn't passed.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"DELETE",
    "path":"/carenets/{CARENET_ID}/accounts/{ACCOUNT_ID}",
    "view_func_name":"carenet_account_delete",
    "access_doc":"A principal in full control of the carenet's record.",
    "url_params":{
        'ACCOUNT_ID':'The email identifier of the Indivo account',
        'CARENET_ID':'The id string associated with the Indivo carenet',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Remove an account from a carenet.",
    "return_desc":":http:statuscode:`200 Success`, or :http:statuscode:`404` if either the passed account or the passed carenet doesn't exist.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/carenets/{CARENET_ID}/accounts/{ACCOUNT_ID}/permissions",
    "view_func_name":"carenet_account_permissions",
    "access_doc":"A user app with access to the carenet and proxying the account, a principal in full control of the carenet's record, or any admin app.",
    "url_params":{
        'ACCOUNT_ID':'The email identifier of the Indivo account',
        'CARENET_ID':'The id string associated with the Indivo carenet',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"List the permissions of an account within a carenet.",
    "return_desc":":http:statuscode:`200` with a list of document types that the account can access within a carenet. Currently always returns all document types.",
    "return_ex":'''
<Permissions>
  <DocumentType type="*" write="true" />
</Permissions>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/carenets/{CARENET_ID}/apps/",
    "view_func_name":"carenet_apps_list",
    "access_doc":"A principal in the carenet, in full control of the carenet's record, or any admin app.",
    "url_params":{
        'CARENET_ID':'The id string associated with the Indivo carenet',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"List Apps within a given carenet.",
    "return_desc":":http:statuscode:`200` with manifests for the apps on success.",
    "return_ex":'''
[
{
    "name" : "SMART Problems",
    "description" : "Display problems in a table view",
    "author" : "Josh Mandel, Children's Hospital Boston",
    "id" : "problem-list@apps.smartplatforms.org",
    "version" : ".1a",

    "mode" : "ui",
    "scope": "record",

    "index" : "http://fda.gping.org:8012/framework/problem_list/index.html",	
    "icon" : "http://fda.gping.org:8012/framework/problem_list/icon.png",
  
    "requires" : {
        "http://smartplatforms.org/terms#Problem": {
            "methods": ["GET"]
        }
    }
},

... other apps ...

]
''',
    "deprecated": None,
    "added": None,
    "changed": ('2.0.0', 'Apps are now returned as JSON manifests, not XML'),

},
{
    "method":"DELETE",
    "path":"/carenets/{CARENET_ID}/apps/{PHA_EMAIL}",
    "view_func_name":"carenet_apps_delete",
    "access_doc":"A principal in full control of the carenet's record.",
    "url_params":{
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        'CARENET_ID':'The id string associated with the Indivo carenet',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Remove an app from a given carenet.",
    "return_desc":":http:statuscode:`200 Success`.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"PUT",
    "path":"/carenets/{CARENET_ID}/apps/{PHA_EMAIL}",
    "view_func_name":"carenet_apps_create",
    "access_doc":"A principal in full control of the carenet's record.",
    "url_params":{
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        'CARENET_ID':'The id string associated with the Indivo carenet',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Add an app to a carenet",
    "return_desc":":http:statuscode:`200 Success`, or :http:statuscode:`400` if the passed PHA is autonomous (autonomous apps can't be scoped to carenets).",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/carenets/{CARENET_ID}/apps/{PHA_EMAIL}/permissions",
    "view_func_name":"carenet_app_permissions",
    "access_doc":"Nobody",
    "url_params":{
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        'CARENET_ID':'The id string associated with the Indivo carenet',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Retrieve the permissions for an app within a carenet. NOT IMPLEMENTED.",
    "return_desc":":http:statuscode:`200`. This call is unimplemented, and has no effect.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/carenets/{CARENET_ID}/demographics",
    "view_func_name":"read_demographics_carenet",
    "access_doc":"A user app with access to the carenet or the entire carenet's record, an account in the carenet or in control of the record, or any admin app.",
    "url_params":{
        'CARENET_ID':'The id string associated with the Indivo carenet',
        },
    "query_opts":{
        'response_format':'one of `application/rdf+xml` (SMART RDF/XML), `application/json` (:ref:`sdmj`), or `application/xml` (:ref:`sdmx`). Default is `application/rdf+xml`',
        },
    "data_fields":{
        },
    "description":"Read demographics from a carenet.",
    "return_desc":":http:statuscode:`200` with demographics formatted in the requested ``response_format`` (default `application/rdf+xml`) on success, :http:statuscode:`404` when no demographics found, and :http:statuscode:`400` if response_format is invalid",
    "return_ex":'''
application/rdf+xml:
    
    <?xml version="1.0" encoding="UTF-8"?>
    <rdf:RDF xmlns:dcterms="http://purl.org/dc/terms/"   
         xmlns:foaf="http://xmlns.com/foaf/0.1/"   
         xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"   
         xmlns:sp="http://smartplatforms.org/terms#"   xmlns:v="http://www.w3.org/2006/vcard/ns#">
    <rdf:Description rdf:nodeID="_6730841b-05df-445f-8695-ed64197f4e6a">
        <v:family-name>William</v:family-name>
        <rdf:type rdf:resource="http://www.w3.org/2006/vcard/ns#Name"/>
        <v:given-name>Robinson</v:given-name>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_bcf66b59-e438-49b2-b572-99af4319b297">
        <rdf:value>800-870-3011</rdf:value>
        <rdf:type rdf:resource="http://www.w3.org/2006/vcard/ns#Tel"/>
        <rdf:type rdf:resource="http://www.w3.org/2006/vcard/ns#Home"/>
        <rdf:type rdf:resource="http://www.w3.org/2006/vcard/ns#Pref"/>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_8cbe3da1-fb53-4d31-80b6-19e0d04220ad">
        <dcterms:identifier>http://indivo.org/records/96ff9eb2-3b18-4a0e-9df8-5a731b96d5d6</dcterms:identifier>
        <sp:system>Indivo Record</sp:system>
        <dcterms:title>Indivo Record 96ff9eb2-3b18-4a0e-9df8-5a731b96d5d6</dcterms:title>
        <rdf:type rdf:resource="http://smartplatforms.org/terms#Code"/>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_451ade87-b519-4c92-8d07-2bbfcb23999c">
        <rdf:value>800-870-3011</rdf:value>
        <rdf:type rdf:resource="http://www.w3.org/2006/vcard/ns#Tel"/>
        <rdf:type rdf:resource="http://www.w3.org/2006/vcard/ns#Home"/>
        <rdf:type rdf:resource="http://www.w3.org/2006/vcard/ns#Pref"/>
    </rdf:Description>
    <rdf:Description rdf:about="http://indivo.org/records/96ff9eb2-3b18-4a0e-9df8-5a731b96d5d6">
        <rdf:type rdf:resource="http://smartplatforms.org/terms#MedicalRecord"/>
    </rdf:Description>
    <rdf:Description rdf:about="http://indivo.org/records/96ff9eb2-3b18-4a0e-9df8-5a731b96d5d6/demographics">
        <v:tel rdf:nodeID="_bcf66b59-e438-49b2-b572-99af4319b297"/>
        <v:tel rdf:nodeID="_451ade87-b519-4c92-8d07-2bbfcb23999c"/>
        <sp:email>william.robinson@example.com</sp:email>
        <rdf:type rdf:resource="http://smartplatforms.org/terms#Demographics"/>
        <v:bday rdf:datatype="http://www.w3.org/2001/XMLSchema#date">1965-08-09</v:bday>
        <v:adr rdf:nodeID="_9f06ee63-3704-4b2a-9c2a-109cc9c99a57"/>
        <sp:belongsTo rdf:resource="http://indivo.org/records/96ff9eb2-3b18-4a0e-9df8-5a731b96d5d6"/>
        <foaf:gender>male</foaf:gender>
        <sp:preferredLanguage>EN</sp:preferredLanguage>
        <v:n rdf:nodeID="_6730841b-05df-445f-8695-ed64197f4e6a"/>
        <sp:medicalRecordNumber rdf:nodeID="_8cbe3da1-fb53-4d31-80b6-19e0d04220ad"/>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_9f06ee63-3704-4b2a-9c2a-109cc9c99a57">
        <v:street-address>23 Church Rd</v:street-address>
        <v:country>USA</v:country>
        <rdf:type rdf:resource="http://www.w3.org/2006/vcard/ns#Address"/>
        <v:region>OK</v:region>
        <v:locality>Bixby</v:locality>
        <v:postal-code>74008</v:postal-code>
    </rdf:Description>
</rdf:RDF>

application/xml:

    <Models>
        <Model name="Demographics" documentId="44190967-cbaa-43a7-a98c-9f97f094ef2b">
            <Field name="bday">1965-08-09</Field>
            <Field name="email">william.robinson@example.com</Field>
            <Field name="ethnicity"/>
            <Field name="gender">male</Field>
            <Field name="preferred_language">EN</Field>
            <Field name="race"/>
            <Field name="name_given">Robinson</Field>
            <Field name="name_suffix"/>
            <Field name="name_family">William</Field>
            <Field name="name_prefix"/>
            <Field name="tel_2_type">h</Field>
            <Field name="tel_2_preferred_p">True</Field>
            <Field name="tel_2_number">800-870-3011</Field>
            <Field name="adr_region">OK</Field>
            <Field name="adr_country">USA</Field>
            <Field name="adr_postalcode">74008</Field>
            <Field name="adr_city">Bixby</Field>
            <Field name="adr_street">23 Church Rd</Field>
            <Field name="tel_1_type">h</Field>
            <Field name="tel_1_preferred_p">True</Field>
            <Field name="tel_1_number">800-870-3011</Field>
        </Model>
    </Models>

application/json:

    [
        {
            "__modelname__": "Demographics",
            "__documentid__": "44190967-cbaa-43a7-a98c-9f97f094ef2b",
            "name_given": "Robinson",
            "name_family": "William",
            "name_prefix": null,
            "name_suffix": null,
            "gender": "male",
            "race": null,
            "ethnicity": null,
            "bday": "1965-08-09",
            "email": "william.robinson@example.com",
            "preferred_language": "EN",
            "tel_1_type": "h",
            "tel_1_number": "800-870-3011",
            "tel_1_preferred_p": true,
            "tel_2_type": "h",
            "tel_2_number": "800-870-3011",
            "tel_2_preferred_p": true,
            "adr_street": "23 Church Rd",
            "adr_city": "Bixby",
            "adr_postalcode": "74008",
            "adr_region": "OK",
            "adr_country": "USA"
        }
    ]


''',
    "deprecated": None,
    "added": ('2.0.0', ''),
    "changed": None,

},
{
    "method":"GET",
    "path":"/carenets/{CARENET_ID}/documents/",
    "view_func_name":"carenet_document_list",
    "access_doc":"A user app with access to the carenet or the entire carenet's record, or an account in the carenet or in control of the record.",
    "url_params":{
        'CARENET_ID':'The id string associated with the Indivo carenet',
        },
    "query_opts":{
        'type':'The Indivo document type to filter by',
        },
    "data_fields":{
        },
    "description":"List documents from a given carenet.",
    "return_desc":":http:statuscode:`200` with a document list on success, :http:statuscode:`404` if *type* doesn't exist.",
    "return_ex":'''
<Documents record_id="123" total_document_count="3" pha="" >
  <Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
    <createdAt>2009-05-04T17:05:33</createdAt>
    <creator id="steve@indivo.org" type="account">
      <fullname>Steve Zabak</fullname>
    </creator>
    <suppressedAt>2009-05-06T17:05:33</suppressedAt>
    <suppressor id="steve@indivo.org" type="account">
      <fullname>Steve Zabak</fullname>
    </suppressor>
    <original id="14c81023-c84f-496d-8b8e-9438280441d3" />
    <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
    <label>HBA1C reading</label>
    <status>active</status>
    <nevershare>false</nevershare>
    <relatesTo>
      <relation type="http://indivo.org/vocab/documentrels#attachment" count="1" />
      <relation type="http://indivo.org/vocab/documentrels#annotation" count="5" />
    </relatesTo>
    <isRelatedFrom>
      <relation type="http://indivo.org/vocab/documentrels#interpretation" count="1" />
    </isRelatedFrom>
  </Document>

  ...

</Documents>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/carenets/{CARENET_ID}/documents/{DOCUMENT_ID}",
    "view_func_name":"carenet_document",
    "access_doc":"A user app with access to the carenet or the entire carenet's record, or an account in the carenet or in control of the record.",
    "url_params":{
        'CARENET_ID':'The id string associated with the Indivo carenet',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Return a document from a carenet.",
    "return_desc":":http:statuscode:`200` with the document content on success, :http:statuscode:`404` if document_id is invalid or if the document is not shared in the carenet.",
    "return_ex":'''
<ExampleDocument>
  <content>That's my content</content>
  <otherField attr="val" />
</ExampleDocument>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/carenets/{CARENET_ID}/documents/{DOCUMENT_ID}/meta",
    "view_func_name":"carenet_document_meta",
    "access_doc":"A user app with access to the carenet or the entire carenet's record, or an account in the carenet or in control of the record.",
    "url_params":{
        'CARENET_ID':'The id string associated with the Indivo carenet',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Fetch the metadata of a record-specific document via a carenet.",
    "return_desc":":http:statuscode:`200` with the document's metadata, or :http:statuscode:`404` if ``document_id`` doesn't identify an existing document in the carenet.",
    "return_ex":'''
<Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
  <createdAt>2009-05-04T17:05:33</createdAt>
  <creator id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </creator>
  <suppressedAt>2009-05-06T17:05:33</suppressedAt>
  <suppressor id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </suppressor>
  <original id="14c81023-c84f-496d-8b8e-9438280441d3" />
  <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
  <label>HBA1C reading</label>
  <status>active</status>
  <nevershare>false</nevershare>
  <relatesTo>
    <relation type="http://indivo.org/vocab/documentrels#attachment" count="1" />
    <relation type="http://indivo.org/vocab/documentrels#annotation" count="5" />
  </relatesTo>
  <isRelatedFrom>
    <relation type="http://indivo.org/vocab/documentrels#interpretation" count="1" />
  </isRelatedFrom>
</Document>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/carenets/{CARENET_ID}/record",
    "view_func_name":"carenet_record",
    "access_doc":"A principal in the carenet, in full control of the carenet's record, or any admin app.",
    "url_params":{
        'CARENET_ID':'The id string associated with the Indivo carenet',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Get basic information about the record to which a carenet belongs.",
    "return_desc":":http:statuscode:`200` with XML describing the record.",
    "return_ex":'''
<Record id="123" label="Joe User">
  <demographics document_id="467" />
  <created at="2010-10-23T10:23:34Z" by="indivoconnector@apps.indivo.org" />
</Record>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/carenets/{CARENET_ID}/rename",
    "view_func_name":"carenet_rename",
    "access_doc":"A principal in full control of the carenet's record.",
    "url_params":{
        'CARENET_ID':'The id string associated with the Indivo carenet',
        },
    "query_opts":{
        },
    "data_fields":{
        'name':'The new name for the carenet.',
        },
    "description":"Change a carenet's name.",
    "return_desc":":http:statuscode:`200` with XML describing the renamed carenet on success, :http:statuscode:`400` if ``name`` wasn't passed or if a carenet named ``name`` already exists on this record.",
    "return_ex":'''
<Carenets record_id="123">
    <Carenet id="789" name="Work/School" mode="explicit" />
</Carenets>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/carenets/{CARENET_ID}/reports/minimal/equipment/",
    "view_func_name":"carenet_equipment_list",
    "access_doc":"A user app with access to the carenet or the entire carenet's record, or an account in the carenet or in control of the record.",
    "url_params":{
        'CARENET_ID':'The id string associated with the Indivo carenet',
        },
    "query_opts":{
        'status':'The account or document status to filter by',
        '{FIELD}':'See :ref:`query-operators`, :ref:`valid-query-fields`',
        'order_by':'See :ref:`query-operators`',
        'aggregate_by':'See :ref:`query-operators`',
        'date_range':'See :ref:`query-operators`',
        'date_group':'See :ref:`query-operators`',
        'group_by':'See :ref:`query-operators`',
        'limit':'See :ref:`query-operators`',
        'offset':'See :ref:`query-operators`',
        },
    "data_fields":{
        },
    "description":"List the equipment data for a given carenet.",
    "return_desc":":http:statuscode:`200` with a list of equipment, or :http:statuscode:`400` if any invalid query parameters were passed.",
    "return_ex":'''
<Reports xmlns="http://indivo.org/vocab/xml/documents#">
  <Summary total_document_count="2" limit="100" offset="0" order_by="date_measured" />
  <QueryParams>
    <DateRange value="date_measured*1995-03-10T00:00:00Z*" />
    <Filters>
      <Filter name="equipment_name" value="pacemaker"/>
    </Filters>
  </QueryParams>
  <Report>
    <Meta>
      <Document id="261ca370-927f-41af-b001-7b615c7a468e" type="http://indivo.org/vocab/xml/documents#Models" size="1653" digest="0799971784e5a2d199cd6585415a8cd57f7bf9e4f8c8f74ef67a1009a1481cd6" record_id="">
        <createdAt>2011-05-02T17:48:13Z</createdAt>
        <creator id="mymail@mail.ma" type="Account">
          <fullname>full name</fullname>
        </creator>
        <original id="261ca370-927f-41af-b001-7b615c7a468e"/>
        <label>testing</label>
        <status>active</status>
        <nevershare>false</nevershare>
      </Document>
    </Meta>
    <Item>
      <Equipment xmlns="http://indivo.org/vocab/xml/documents#">
        <dateStarted>2009-02-05</dateStarted>
        <dateStopped>2010-06-12</dateStopped>
        <type>cardiac</type>
        <name>Pacemaker</name>
        <vendor>Acme Medical Devices</vendor>
        <id>167-ABC-23</id>
        <description>it works</description>
        <specification>blah blah blah</specification>
      </Equipment>
    </Item>
  </Report>

  ...

</Reports>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/carenets/{CARENET_ID}/reports/minimal/measurements/{LAB_CODE}/",
    "view_func_name":"carenet_measurement_list",
    "access_doc":"A user app with access to the carenet or the entire carenet's record, or an account in the carenet or in control of the record.",
    "url_params":{
        'CARENET_ID':'The id string associated with the Indivo carenet',
        'LAB_CODE':'The identifier corresponding to the measurement being made.',
        },
    "query_opts":{
        'status':'The account or document status to filter by',
        '{FIELD}':'See :ref:`query-operators`, :ref:`valid-query-fields`',
        'order_by':'See :ref:`query-operators`',
        'aggregate_by':'See :ref:`query-operators`',
        'date_range':'See :ref:`query-operators`',
        'date_group':'See :ref:`query-operators`',
        'group_by':'See :ref:`query-operators`',
        'limit':'See :ref:`query-operators`',
        'offset':'See :ref:`query-operators`',
        },
    "data_fields":{
        },
    "description":"List the measurement data for a given carenet.",
    "return_desc":":http:statuscode:`200` with a list of measurements, or :http:statuscode:`400` if any invalid query parameters were passed.",
    "return_ex":'''
<Reports xmlns="http://indivo.org/vocab/xml/documents#">
  <Summary total_document_count="2" limit="100" offset="0" order_by="date_measured" />
  <QueryParams>
    <DateRange value="date_measured*1995-03-10T00:00:00Z*" />
    <Filters>
      <Filter name="lab_type" value="hematology"/>
    </Filters>
  </QueryParams>
  <Report>
    <Meta>
      <Document id="261ca370-927f-41af-b001-7b615c7a468e" type="http://indivo.org/vocab/xml/documents#Measurement" size="1653" digest="0799971784e5a2d199cd6585415a8cd57f7bf9e4f8c8f74ef67a1009a1481cd6" record_id="">
        <createdAt>2011-05-02T17:48:13Z</createdAt>
        <creator id="mymail@mail.ma" type="Account">
          <fullname>full name</fullname>
        </creator>
        <original id="261ca370-927f-41af-b001-7b615c7a468e"/>
        <label>testing</label>
        <status>active</status>
        <nevershare>false</nevershare>
      </Document>
    </Meta>
    <Item>
      <Measurement id="1234" value="120" type="blood pressure systolic" datetime="2011-03-02T00:00:00Z" unit="mmHg" source_doc="3456" />
    </Item>
  </Report>

  ...

</Reports>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/carenets/{CARENET_ID}/reports/minimal/procedures/",
    "view_func_name":"carenet_procedure_list",
    "access_doc":"A user app with access to the carenet or the entire carenet's record, or an account in the carenet or in control of the record.",
    "url_params":{
        'CARENET_ID':'The id string associated with the Indivo carenet',
        },
    "query_opts":{
        'status':'The account or document status to filter by',
        '{FIELD}':'See :ref:`query-operators`, :ref:`valid-query-fields`',
        'order_by':'See :ref:`query-operators`',
        'aggregate_by':'See :ref:`query-operators`',
        'date_range':'See :ref:`query-operators`',
        'date_group':'See :ref:`query-operators`',
        'group_by':'See :ref:`query-operators`',
        'limit':'See :ref:`query-operators`',
        'offset':'See :ref:`query-operators`',
        },
    "data_fields":{
        },
    "description":"List the procedure data for a given carenet.",
    "return_desc":":http:statuscode:`200` with a list of procedures, or :http:statuscode:`400` if any invalid query parameters were passed.",
    "return_ex":'''
<Reports xmlns="http://indivo.org/vocab/xml/documents#">
  <Summary total_document_count="2" limit="100" offset="0" order_by="date_measured" />
  <QueryParams>
    <DateRange value="date_measured*1995-03-10T00:00:00Z*" />
    <Filters>
    </Filters>
  </QueryParams>
  <Report>
    <Meta>
      <Document id="261ca370-927f-41af-b001-7b615c7a468e" type="http://indivo.org/vocab/xml/documents#Procedure" size="1653" digest="0799971784e5a2d199cd6585415a8cd57f7bf9e4f8c8f74ef67a1009a1481cd6" record_id="">
        <createdAt>2011-05-02T17:48:13Z</createdAt>
        <creator id="mymail@mail.ma" type="Account">
          <fullname>full name</fullname>
        </creator>
        <original id="261ca370-927f-41af-b001-7b615c7a468e"/>
        <label>testing</label>
        <status>active</status>
        <nevershare>false</nevershare>
      </Document>
    </Meta>
    <Item>
      <Procedure xmlns="http://indivo.org/vocab/xml/documents#">
        <datePerformed>2009-05-16T12:00:00</datePerformed>
        <name type="http://codes.indivo.org/procedures#" value="85" abbrev="append">Appendectomy</name>
        <provider>
          <name>Kenneth Mandl</name>
          <institution>Children's Hospital Boston</institution>
        </provider>
      </Procedure>
    </Item>
  </Report>

  ...

</Reports>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/carenets/{CARENET_ID}/reports/minimal/simple-clinical-notes/",
    "view_func_name":"carenet_simple_clinical_notes_list",
    "access_doc":"A user app with access to the carenet or the entire carenet's record, or an account in the carenet or in control of the record.",
    "url_params":{
        'CARENET_ID':'The id string associated with the Indivo carenet',
        },
    "query_opts":{
        'status':'The account or document status to filter by',
        '{FIELD}':'See :ref:`query-operators`, :ref:`valid-query-fields`',
        'order_by':'See :ref:`query-operators`',
        'aggregate_by':'See :ref:`query-operators`',
        'date_range':'See :ref:`query-operators`',
        'date_group':'See :ref:`query-operators`',
        'group_by':'See :ref:`query-operators`',
        'limit':'See :ref:`query-operators`',
        'offset':'See :ref:`query-operators`',
        },
    "data_fields":{
        },
    "description":"List the simple_clinical_notes data for a given carenet.",
    "return_desc":":http:statuscode:`200` with a list of notes, or :http:statuscode:`400` if any invalid query parameters were passed.",
    "return_ex":'''
<Reports xmlns="http://indivo.org/vocab/xml/documents#">
  <Summary total_document_count="2" limit="100" offset="0" order_by="date_measured" />
  <QueryParams>
    <DateRange value="date_measured*1995-03-10T00:00:00Z*" />
    <Filters>
    </Filters>
  </QueryParams>
  <Report>
    <Meta>
      <Document id="261ca370-927f-41af-b001-7b615c7a468e" type="http://indivo.org/vocab/xml/documents#SimpleClinicalNote" size="1653" digest="0799971784e5a2d199cd6585415a8cd57f7bf9e4f8c8f74ef67a1009a1481cd6" record_id="">
        <createdAt>2011-05-02T17:48:13Z</createdAt>
        <creator id="mymail@mail.ma" type="Account">
          <fullname>full name</fullname>
        </creator>
        <original id="261ca370-927f-41af-b001-7b615c7a468e"/>
        <label>testing</label>
        <status>active</status>
        <nevershare>false</nevershare>
      </Document>
    </Meta>
    <Item>
      <SimpleClinicalNote xmlns="http://indivo.org/vocab/xml/documents#">
        <dateOfVisit>2010-02-02T12:00:00Z</dateOfVisit>
        <finalizedAt>2010-02-03T13:12:00Z</finalizedAt>
        <visitType type="http://codes.indivo.org/visit-types#" value="acute">Acute Care</visitType>
        <visitLocation>Longfellow Medical</visitLocation>
        <specialty type="http://codes.indivo.org/specialties#" value="hem-onc">Hematology/Oncology</specialty>

        <signature>
          <at>2010-02-03T13:12:00Z</at>    
          <provider>
            <name>Kenneth Mandl</name>
            <institution>Children's Hospital Boston</institution>
          </provider>
        </signature>

        <signature>
          <provider>
            <name>Isaac Kohane</name>
            <institution>Children's Hospital Boston</institution>
          </provider>
        </signature>

        <chiefComplaint>stomach ache</chiefComplaint>
        <content>Patient presents with ... </content>
      </SimpleClinicalNote>
    </Item>
  </Report>

  ...

</Reports>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/carenets/{CARENET_ID}/reports/{DATA_MODEL}/",
    "view_func_name":"carenet_generic_list",
    "access_doc":"A user app with access to the carenet or the entire carenet's record, or an account in the carenet or in control of the record.",
    "url_params":{
        'DATA_MODEL':'The name of the data model to report on',
        'CARENET_ID':'The id string associated with the Indivo carenet',
        },
    "query_opts":{
        'status':'The account or document status to filter by',
        '{FIELD}':'See :ref:`query-operators`, :ref:`valid-query-fields`',
        'order_by':'See :ref:`query-operators`',
        'aggregate_by':'See :ref:`query-operators`',
        'response_format':'See :ref:`response_formats`',
        'date_range':'See :ref:`query-operators`',
        'date_group':'See :ref:`query-operators`',
        'group_by':'See :ref:`query-operators`',
        'limit':'See :ref:`query-operators`',
        'offset':'See :ref:`query-operators`',
        },
    "data_fields":{
        },
    "description":"List the Model data for a given carenet.",
    "return_desc":":http:statuscode:`200` with a list of DATA_MODELs, or :http:statuscode:`400` if any invalid query parameters were passed.",
    "return_ex":'''
SDMX Example:  
   {
    "__modelname__": "TestMedication",
    "__documentid__": "b1d83191-6edd-4aad-be4e-63117cd4c660",
    "name": "ibuprofen",
    "date_started": "2010-10-01T00:00:00Z",
    "date_stopped": "2010-10-31T00:00:00Z",
    "brand_name": "Advil",
    "prescription": {
        "__modelname__": "TestPrescription",
        "__documentid__": "b1d83191-6edd-4aad-be4e-63117cd4c660",
        "prescribed_by_name": "Kenneth D. Mandl",
        "prescribed_by_institution": "Children's Hospital Boston",
        "prescribed_on": "2010-09-30T00:00:00Z",
        "prescribed_stop_on": "2010-10-31T00:00:00Z"
    },
    "fills": [
        {
            "__modelname__": "TestFill",
            "__documentid__": "b1d83191-6edd-4aad-be4e-63117cd4c660",
            "date_filled": "2010-10-01T00:00:00Z",
            "supply_days": "15",
            "filled_at_name": "CVS"
        },
        {
            "__modelname__": "TestFill",
            "__documentid__": "b1d83191-6edd-4aad-be4e-63117cd4c660",
            "date_filled": "2010-10-16T00:00:00Z",
            "supply_days": "15",
            "filled_at_name": "CVS"
        }
    ]
}

SDMX Example:

<Models>
  <Model name="TestMedication" documentId="b1d83191-6edd-4aad-be4e-63117cd4c660">
    <Field name="date_started">2010-10-01T00:00:00Z</Field>
    <Field name="name">ibuprofen</Field>
    <Field name="brand_name">Advil</Field>
    <Field name="date_stopped">2010-10-31T00:00:00Z</Field>
    <Field name="prescription">
      <Model name="TestPrescription"  documentId="b1d83191-6edd-4aad-be4e-63117cd4c660">
        <Field name="prescribed_by_name">Kenneth D. Mandl</Field>
        <Field name="prescribed_by_institution">Children's Hospital Boston</Field>
        <Field name="prescribed_on">2010-09-30T00:00:00Z</Field>
        <Field name="prescribed_stop_on">2010-10-31T00:00:00Z</Field>
      </Model>
    </Field>
    <Field name="fills">
      <Models>
        <Model name="TestFill"  documentId="b1d83191-6edd-4aad-be4e-63117cd4c660">
          <Field name="date_filled">2010-10-01T00:00:00Z</Field>
          <Field name="supply_days">15</Field>
          <Field name="filled_at_name">CVS</Field>
        </Model>
        <Model name="TestFill"  documentId="b1d83191-6edd-4aad-be4e-63117cd4c660">
          <Field name="date_filled">2010-10-16T00:00:00Z</Field>
          <Field name="supply_days">15</Field>
          <Field name="filled_at_name">CVS</Field>
        </Model>
      </Models>
    </Field>
  </Model>
</Models>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/codes/systems/",
    "view_func_name":"coding_systems_list",
    "access_doc":"Anybody",
    "url_params":{
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"List available codingsystems. NOT IMPLEMENTED.",
    "return_desc":":http:statuscode:`500`, as the system cannot process the call.",
    "return_ex":'''
[{"short_name": "umls-snomed", "name": "UMLS SNOMED", "description" : "..."},
 {..},
 {..}]
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/codes/systems/{SYSTEM_SHORT_NAME}/query",
    "view_func_name":"coding_system_query",
    "access_doc":"Anybody",
    "url_params":{
        'SYSTEM_SHORT_NAME':'',
        },
    "query_opts":{
        'q':'The query string to search for',
        },
    "data_fields":{
        },
    "description":"Query a codingsystem for a value.",
    "return_desc":":http:statuscode:`200` with JSON describing codingsystems entries that matched *q*, or :http:statuscode:`404` if ``SYSTEM_SHORT_NAME`` is invalid.",
    "return_ex":'''
[{"abbreviation": null, "code": "38341003", "consumer_value": null,
  "umls_code": "C0020538",
  "full_value": "Hypertensive disorder, systemic arterial (disorder)"},
 {"abbreviation": null, "code": "55822004", "consumer_value": null,
  "umls_code": "C0020473", "full_value": "Hyperlipidemia (disorder)"}]
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/oauth/access_token",
    "view_func_name":"exchange_token",
    "access_doc":"A request signed by a RequestToken.",
    "url_params":{
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Exchange a request token for a valid access token.",
    "return_desc":":http:statuscode:`200` with an access token, or :http:statuscode:`403` if the request token didn't validate.",
    "return_ex":'''
oauth_token=abcd1fw3gasdgh3&oauth_token_secret=jgrlhre4291hfjas&xoauth_indivo_record_id=123
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/oauth/internal/request_tokens/{REQTOKEN_ID}/approve",
    "view_func_name":"request_token_approve",
    "access_doc":"A principal in the carenet to which the request token is restricted (if the token is restricted), or a principal with full control over the record (if the token is not restricted).",
    "url_params":{
        'REQTOKEN_ID':'',
        },
    "query_opts":{
        },
    "data_fields":{
        'record_id':'The record to bind to. Either *record_id* or *carenet_id* is required.',
        'carenet_id':'The carenet to bind to. Either *record_id* or *carenet_id* is required.',
        },
    "description":"Indicate a user's consent to bind an app to a record or carenet.",
    "return_desc":":http:statuscode:`200` with a redirect url to the app on success, :http:statuscode:`403` if *record_id*/*carenet_id* don't match *reqtoken*.",
    "return_ex":'''
location=http%3A%2F%2Fapps.indivo.org%2Fproblems%2Fafter_auth%3Foauth_token%3Dabc123%26oauth_verifier%3Dabc123

(which is the urlencoded form of:

http://apps.indivo.org/problems/after_auth?oauth_token=abc123&oauth_verifier=abc123 )
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/oauth/internal/request_tokens/{REQTOKEN_ID}/claim",
    "view_func_name":"request_token_claim",
    "access_doc":"Any Account.",
    "url_params":{
        'REQTOKEN_ID':'',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Claim a request token on behalf of an account.",
    "return_desc":":http:statuscode:`200` with the email of the claiming principal, or :http:statuscode:`403` if the token has already been claimed.",
    "return_ex":'''
joeuser@indivo.org
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/oauth/internal/request_tokens/{REQTOKEN_ID}/info",
    "view_func_name":"request_token_info",
    "access_doc":"Any Account.",
    "url_params":{
        'REQTOKEN_ID':'',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Get information about a request token.",
    "return_desc":":http:statuscode:`200` with information about the token.",
    "return_ex":'''
<RequestToken token="XYZ">
  <record id="123" />
  <carenet />
  <kind>new</kind>
  <App id="problems@apps.indivo.org">
    <name>Problem List</name>
    <description>Managing your list of problems</description>
    <autonomous>false</autonomous>
    <frameable>true</frameable>
    <ui>true</ui>
  </App>
</RequestToken>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/oauth/internal/session_create",
    "view_func_name":"session_create",
    "access_doc":"Any Indivo UI app.",
    "url_params":{
        },
    "query_opts":{
        },
    "data_fields":{
        'username':'The username of the user to authenticate.',
        'password':'The password to use with *username* against the internal password auth system. EITHER *password* or *system* is **Required**.',
        'system':'An external auth system to authenticate the user with. EITHER *password* or *system* is **Required**.',
        },
    "description":"Authenticate a user and register a web session for them.",
    "return_desc":":http:statuscode:`200` with a valid session token, or :http:statuscode:`403` if the passed credentials were invalid.",
    "return_ex":'''
oauth_token=XYZ&oauth_token_secret=ABC&account_id=joeuser%40indivo.org
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/oauth/internal/surl-verify",
    "view_func_name":"surl_verify",
    "access_doc":"Any Account.",
    "url_params":{
        },
    "query_opts":{
        'surl_sig':'The computed signature (base-64 encoded sha1) of the url.',
        'surl_timestamp':'when the url was generated. Must be within the past hour.',
        'surl_token':'The access token used to sign the url.',
        },
    "data_fields":{
        },
    "description":"Verify a signed URL.",
    "return_desc":":http:statuscode:`200` with XML describing whether the surl validated.",
    "return_ex":'''
If the surl validated:

<result>ok</result>

If the surl was too old:

<result>old</result>

If the surl's signature was invalid:

<result>mismatch</result>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/oauth/request_token",
    "view_func_name":"request_token",
    "access_doc":"Any user app.",
    "url_params":{
        },
    "query_opts":{
        },
    "data_fields":{
        'indivo_record_id':'The record to which to bind the request token. EITHER *indivo_record_id* or *indivo_carenet_id* is **REQUIRED**.',
        'indivo_carenet_id':'The carenet to which to bind the request token. EITHER *indivo_record_id* or *indivo_carenet_id* is **REQUIRED**.',
        },
    "description":"Get a new request token, bound to a record or carenet if desired.",
    "return_desc":":http:statuscode:`200` with the request token on success, :http:statuscode:`403` if the oauth signature on the request of missing or faulty.",
    "return_ex":'''
oauth_token=abcd1fw3gasdgh3&oauth_token_secret=jgrlhre4291hfjas&xoauth_indivo_record_id=123
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/ontology",
    "view_func_name":"smart_ontology",
    "access_doc":"Any principal in Indivo.",
    "url_params":{
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Fetch the SMART ontology as RDF/XML.",
    "return_desc":"An OWL file describing the SMART ontology.",
    "return_ex":'''
see http://sandbox-api.smartplatforms.org/ontology
''',
    "deprecated": None,
    "added": ('2.0.0', ''),
    "changed": None,

},
{
    "method":"POST",
    "path":"/records/",
    "view_func_name":"record_create",
    "access_doc":"Any admin app.",
    "url_params":{
        },
    "query_opts":{
        },
    "data_fields":{
        '':'A valid Indivo Demographics Document (see :doc:`/schemas/demographics-schema`).',
        },
    "description":"Create a new record.",
    "return_desc":":http:statuscode:`200` with information about the record on success, :http:statuscode:`400` if the demographics XML was empty or invalid.",
    "return_ex":'''
<Record id="123" label="Joe Smith">
  <demographics document_id="" />
</Record>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"PUT",
    "path":"/records/external/{PRINCIPAL_EMAIL}/{EXTERNAL_ID}",
    "view_func_name":"record_create_ext",
    "access_doc":"An admin app with an id matching the principal_email in the URL.",
    "url_params":{
        'PRINCIPAL_EMAIL':'The email with which to scope an external id.',
        'EXTERNAL_ID':'The external identifier of the desired resource',
        },
    "query_opts":{
        },
    "data_fields":{
        '':'A valid Indivo Demographics Document (see :doc:`/schemas/demographics-schema`).',
        },
    "description":"Create a new record with an associated external id.",
    "return_desc":":http:statuscode:`200` with information about the record on success, :http:statuscode:`400` if the demographics XML was empty or invalid.",
    "return_ex":'''
<Record id="123" label="Joe Smith">
  <demographics document_id="" />
</Record>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/search",
    "view_func_name":"record_search",
    "access_doc":"Any admin app.",
    "url_params":{
        },
    "query_opts":{
        'label':'A search string to match against record labels.',
        },
    "data_fields":{
        },
    "description":"Search for records by label (usually the same as full name).",
    "return_desc":":http:statuscode:`200` with a list of matching records on success, :http:statuscode:`400` if no query parameters were passed.",
    "return_ex":'''
<Records>
  <Record id="123" label="John R. Smith" />
  <Record id = "234" label="Frank Frankson" />

  ...

</Records>
''',
    "deprecated": None,
    "added": ('1.0.1', ''),
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}",
    "view_func_name":"record",
    "access_doc":"A principal in full control of the record, any admin app, or a user app with access to the record.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Get information about an individual record.",
    "return_desc":":http:statuscode:`200` with information about the record.",
    "return_ex":'''
<Record id="123" label="Joe Smith">
  <demographics document_id="346" />
</Record>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/allergies/",
    "view_func_name":"smart_allergies",
    "access_doc":"A user app with access to the record, or a principal in full control of the record",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"SMART allergy list, serialized as RDF/XML.",
    "return_desc":"SMART RDF describing the record's allergies and allergy exclusions",
    "return_ex":'''
<?xml version="1.0" encoding="UTF-8"?>
<rdf:RDF
   xmlns:dcterms="http://purl.org/dc/terms/"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:sp="http://smartplatforms.org/terms#"
>
  <rdf:Description rdf:about="http://purl.bioontology.org/ontology/SNOMEDCT/271807003">
    <dcterms:title>skin rash</dcterms:title>
    <dcterms:identifier>271807003</dcterms:identifier>
    <sp:system>http://purl.bioontology.org/ontology/SNOMEDCT/</sp:system>
    <rdf:type rdf:resource="http://smartplatforms.org/terms/codes/SNOMED"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#Code"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://indivo.org/records/03059111-af61-4834-8234-befe5f5a2532/allergies/f8efc96a-7677-4b4f-9879-7fc6d6488d0b">
    <sp:category rdf:nodeID="_865481f6-03ca-4707-8a89-ec468952efa5"/>
    <sp:severity rdf:nodeID="_9f6a6981-1173-4041-8fa3-4462238ab8ae"/>
    <sp:foodAllergen rdf:nodeID="_24be52e0-51a4-4d00-9654-25ae9e0ad2f4"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#Allergy"/>
    <sp:belongsTo rdf:nodeID="_f63e49ae-5071-4f99-a62d-329a2e23ce85"/>
    <sp:allergicReaction rdf:nodeID="_7912ae70-da78-443f-a0b6-3f955b9e140a"/>
  </rdf:Description>
  <rdf:Description rdf:nodeID="_865481f6-03ca-4707-8a89-ec468952efa5">
    <dcterms:title>food allergy</dcterms:title>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#CodedValue"/>
    <sp:code rdf:resource="http://purl.bioontology.org/ontology/SNOMEDCT/414285001"/>
  </rdf:Description>
  <rdf:Description rdf:nodeID="_e6301747-0618-4a74-9b52-d7b5f3745463">
    <dcterms:title>drug allergy</dcterms:title>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#CodedValue"/>
    <sp:code rdf:resource="http://purl.bioontology.org/ontology/SNOMEDCT/416098002"/>
  </rdf:Description>
  <rdf:Description rdf:nodeID="_b8361d90-8b1e-40cb-b892-80dcb4301d90">
    <dcterms:title>mild</dcterms:title>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#CodedValue"/>
    <sp:code rdf:resource="http://purl.bioontology.org/ontology/SNOMEDCT/255604002"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://purl.bioontology.org/ontology/SNOMEDCT/414285001">
    <dcterms:title>food allergy</dcterms:title>
    <dcterms:identifier>414285001</dcterms:identifier>
    <sp:system>http://purl.bioontology.org/ontology/SNOMEDCT/</sp:system>
    <rdf:type rdf:resource="http://smartplatforms.org/terms/codes/AllergyCategory"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#Code"/>
  </rdf:Description>
  <rdf:Description rdf:nodeID="_7912ae70-da78-443f-a0b6-3f955b9e140a">
    <dcterms:title>anaphylaxis</dcterms:title>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#CodedValue"/>
    <sp:code rdf:resource="http://purl.bioontology.org/ontology/SNOMEDCT/39579001"/>
  </rdf:Description>
  <rdf:Description rdf:nodeID="_9f6a6981-1173-4041-8fa3-4462238ab8ae">
    <dcterms:title>severe</dcterms:title>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#CodedValue"/>
    <sp:code rdf:resource="http://purl.bioontology.org/ontology/SNOMEDCT/24484000"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://purl.bioontology.org/ontology/SNOMEDCT/416098002">
    <dcterms:title>drug allergy</dcterms:title>
    <dcterms:identifier>416098002</dcterms:identifier>
    <sp:system>http://purl.bioontology.org/ontology/SNOMEDCT/</sp:system>
    <rdf:type rdf:resource="http://smartplatforms.org/terms/codes/AllergyCategory"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#Code"/>
  </rdf:Description>
  <rdf:Description rdf:nodeID="_2c0973ad-d7fd-4e7f-a6c2-5c625a54aea7">
    <dcterms:title>skin rash</dcterms:title>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#CodedValue"/>
    <sp:code rdf:resource="http://purl.bioontology.org/ontology/SNOMEDCT/271807003"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://indivo.org/records/03059111-af61-4834-8234-befe5f5a2532/allergies/a4abf13b-ec73-4ae4-b0a2-9d71ab2ea368">
    <sp:drugClassAllergen rdf:nodeID="_f06759ab-6668-4832-97da-0794d244d403"/>
    <sp:category rdf:nodeID="_e6301747-0618-4a74-9b52-d7b5f3745463"/>
    <sp:severity rdf:nodeID="_b8361d90-8b1e-40cb-b892-80dcb4301d90"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#Allergy"/>
    <sp:belongsTo rdf:nodeID="_f63e49ae-5071-4f99-a62d-329a2e23ce85"/>
    <sp:allergicReaction rdf:nodeID="_2c0973ad-d7fd-4e7f-a6c2-5c625a54aea7"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://purl.bioontology.org/ontology/SNOMEDCT/39579001">
    <dcterms:title>anaphylaxis</dcterms:title>
    <dcterms:identifier>39579001</dcterms:identifier>
    <sp:system>http://purl.bioontology.org/ontology/SNOMEDCT/</sp:system>
    <rdf:type rdf:resource="http://smartplatforms.org/terms/codes/SNOMED"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#Code"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://purl.bioontology.org/ontology/SNOMEDCT/255604002">
    <dcterms:title>mild</dcterms:title>
    <dcterms:identifier>255604002</dcterms:identifier>
    <sp:system>http://purl.bioontology.org/ontology/SNOMEDCT/</sp:system>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#Code"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms/codes/AllergySeverity"/>
  </rdf:Description>
  <rdf:Description rdf:nodeID="_24be52e0-51a4-4d00-9654-25ae9e0ad2f4">
    <dcterms:title>peanut</dcterms:title>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#CodedValue"/>
    <sp:code rdf:resource="http://fda.gov/UNII/QE1QX6B99R"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://purl.bioontology.org/ontology/NDFRT/N0000175503">
    <dcterms:title>sulfonamide antibacterial</dcterms:title>
    <dcterms:identifier>N0000175503</dcterms:identifier>
    <sp:system>http://purl.bioontology.org/ontology/NDFRT/</sp:system>
    <rdf:type rdf:resource="http://smartplatforms.org/terms/codes/NDFRT"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#Code"/>
  </rdf:Description>
  <rdf:Description rdf:nodeID="_f06759ab-6668-4832-97da-0794d244d403">
    <dcterms:title>sulfonamide antibacterial</dcterms:title>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#CodedValue"/>
    <sp:code rdf:resource="http://purl.bioontology.org/ontology/NDFRT/N0000175503"/>
  </rdf:Description>
  <rdf:Description rdf:nodeID="_f63e49ae-5071-4f99-a62d-329a2e23ce85">
    <rdf:type rdf:resource="http://smartplatforms.org/terms#MedicalRecord"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://fda.gov/UNII/QE1QX6B99R">
    <dcterms:title>peanut</dcterms:title>
    <dcterms:identifier>QE1QX6B99R</dcterms:identifier>
    <sp:system>http://fda.gov/UNII/</sp:system>
    <rdf:type rdf:resource="http://smartplatforms.org/terms/codes/UNII"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#Code"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://purl.bioontology.org/ontology/SNOMEDCT/24484000">
    <dcterms:title>severe</dcterms:title>
    <dcterms:identifier>24484000</dcterms:identifier>
    <sp:system>http://purl.bioontology.org/ontology/SNOMEDCT/</sp:system>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#Code"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms/codes/AllergySeverity"/>
  </rdf:Description>
</rdf:RDF>
''',
    "deprecated": None,
    "added": ('2.0.0', ''),
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/allergies/{MODEL_ID}",
    "view_func_name":"smart_allergies_instance",
    "access_doc":"A user app with access to the record, or a principal in full control of the record",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'MODEL_ID':'The id of the Allergy/AllergyExclusion',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Retrieve a specific instance of a SMART Allergy/AllergyExclusion.",
    "return_desc":"SMART RDF describing the AllergyAllergyExclusion",
    "return_ex":'''
<?xml version="1.0" encoding="UTF-8"?>
<rdf:RDF
xmlns:dcterms="http://purl.org/dc/terms/"
xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
xmlns:sp="http://smartplatforms.org/terms#"
>
    <rdf:Description rdf:nodeID="_9ea3b5f3-c0c4-40d7-a370-2ab475ea1d6e">
        <rdf:type rdf:resource="http://smartplatforms.org/terms#CodedValue"/>
        <sp:code rdf:resource="http://purl.bioontology.org/ontology/NDFRT/N0000175503"/>
        <dcterms:title>Sulfonamide Antibacterial</dcterms:title>
    </rdf:Description>
    <rdf:Description rdf:about="http://purl.bioontology.org/ontology/SNOMEDCT/416098002">
        <rdf:type rdf:resource="http://smartplatforms.org/terms/codes/AllergyCategory"/>
        <rdf:type rdf:resource="http://smartplatforms.org/terms#Code"/>
        <dcterms:identifier>416098002</dcterms:identifier>
        <dcterms:title>Drug allergy</dcterms:title>
        <sp:system>http://purl.bioontology.org/ontology/SNOMEDCT/</sp:system>
    </rdf:Description>
    <rdf:Description rdf:about="http://purl.bioontology.org/ontology/SNOMEDCT/24484000">
        <rdf:type rdf:resource="http://smartplatforms.org/terms#Code"/>
        <rdf:type rdf:resource="http://smartplatforms.org/terms/codes/AllergySeverity"/>
        <dcterms:identifier>24484000</dcterms:identifier>
        <dcterms:title>Severe</dcterms:title>
        <sp:system>http://purl.bioontology.org/ontology/SNOMEDCT/</sp:system>
    </rdf:Description>
    <rdf:Description rdf:about="http://purl.bioontology.org/ontology/SNOMEDCT/39579001">
        <rdf:type rdf:resource="http://smartplatforms.org/terms#Code"/>
        <rdf:type rdf:resource="http://smartplatforms.org/terms/codes/SNOMED"/>
        <dcterms:identifier>39579001</dcterms:identifier>
        <dcterms:title>Anaphylaxis</dcterms:title>
        <sp:system>http://purl.bioontology.org/ontology/SNOMEDCT/</sp:system>
    </rdf:Description>
    <rdf:Description rdf:about="http://indivo.org/records/b171cd33-00a6-4038-976d-b8380c276ba1/allergies/09eadb0d-9c58-4cac-aad5-c84c29caf5bd">
        <rdf:type rdf:resource="http://smartplatforms.org/terms#Allergy"/>
        <sp:allergicReaction rdf:nodeID="_6538190b-0659-4710-b083-fe3f0462242b"/>
        <sp:category rdf:nodeID="_3572cdcd-7787-4801-b6b3-e153794ace84"/>
        <sp:drugClassAllergen rdf:nodeID="_9ea3b5f3-c0c4-40d7-a370-2ab475ea1d6e"/>
        <sp:severity rdf:nodeID="_e62b76fe-e33b-4d9f-9a2b-dc1221e3eb17"/>
        <sp:belongsTo rdf:resource="http://indivo.org/records/b171cd33-00a6-4038-976d-b8380c276ba1"/>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_6538190b-0659-4710-b083-fe3f0462242b">
        <rdf:type rdf:resource="http://smartplatforms.org/terms#CodedValue"/>
        <sp:code rdf:resource="http://purl.bioontology.org/ontology/SNOMEDCT/39579001"/>
        <dcterms:title>Anaphylaxis</dcterms:title>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_e62b76fe-e33b-4d9f-9a2b-dc1221e3eb17">
        <rdf:type rdf:resource="http://smartplatforms.org/terms#CodedValue"/>
        <sp:code rdf:resource="http://purl.bioontology.org/ontology/SNOMEDCT/24484000"/>
        <dcterms:title>Severe</dcterms:title>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_3572cdcd-7787-4801-b6b3-e153794ace84">
        <rdf:type rdf:resource="http://smartplatforms.org/terms#CodedValue"/>
        <sp:code rdf:resource="http://purl.bioontology.org/ontology/SNOMEDCT/416098002"/>
        <dcterms:title>Drug allergy</dcterms:title>
    </rdf:Description>
    <rdf:Description rdf:about="http://purl.bioontology.org/ontology/NDFRT/N0000175503">
        <rdf:type rdf:resource="http://smartplatforms.org/terms#Code"/>
        <rdf:type rdf:resource="http://smartplatforms.org/terms/codes/NDFRT"/>
        <dcterms:identifier>N0000175503</dcterms:identifier>
        <dcterms:title>Sulfonamide Antibacterial</dcterms:title>
        <sp:system>http://purl.bioontology.org/ontology/NDFRT/</sp:system>
    </rdf:Description>
</rdf:RDF>
''',
    "deprecated": None,
    "added": ('2.1.0', ''),
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/apps/",
    "view_func_name":"record_phas",
    "access_doc":"A principal in full control of the record, or any admin app.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        },
    "query_opts":{
        'type':'A namespaced document type. If specified, only apps which explicitly declare themselves as supporting that document type will be returned.',
        },
    "data_fields":{
        },
    "description":"List userapps bound to a given record.",
    "return_desc":":http:statuscode:`200` with a list of JSON manifests for the userapps.",
    "return_ex":'''
[
{
    "name" : "SMART Problems",
    "description" : "Display problems in a table view",
    "author" : "Josh Mandel, Children's Hospital Boston",
    "id" : "problem-list@apps.smartplatforms.org",
    "version" : ".1a",

    "mode" : "ui",
    "scope": "record",

    "index" : "http://fda.gping.org:8012/framework/problem_list/index.html",	
    "icon" : "http://fda.gping.org:8012/framework/problem_list/icon.png",
  
    "requires" : {
        "http://smartplatforms.org/terms#Problem": {
            "methods": ["GET"]
        }
    }
},

... other apps ...

]
''',
    "deprecated": None,
    "added": None,
    "changed": ('2.0.0', 'Apps are now returned as JSON manifests, not XML'),

},
{
    "method":"DELETE",
    "path":"/records/{RECORD_ID}/apps/{PHA_EMAIL}",
    "view_func_name":"pha_record_delete",
    "access_doc":"Any admin app, or a principal in full control of the record.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Remove a userapp from a record.",
    "return_desc":":http:statuscode:`200 Success`.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/apps/{PHA_EMAIL}",
    "view_func_name":"record_pha",
    "access_doc":"A principal in full control of the record, or any admin app.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Get information about a given userapp bound to a record.",
    "return_desc":":http:statuscode:`200` with a JSON manifest for the app, or :http:statuscode:`404` if the app isn't bound to the record.",
    "return_ex":'''
{
    "name" : "SMART Problems",
    "description" : "Display problems in a table view",
    "author" : "Josh Mandel, Children's Hospital Boston",
    "id" : "problem-list@apps.smartplatforms.org",
    "version" : ".1a",

    "mode" : "ui",
    "scope": "record",

    "index" : "http://fda.gping.org:8012/framework/problem_list/index.html",	
    "icon" : "http://fda.gping.org:8012/framework/problem_list/icon.png",
  
    "requires" : {
        "http://smartplatforms.org/terms#Problem": {
            "methods": ["GET"]
        }
    }
}
''',
    "deprecated": None,
    "added": None,
    "changed": ('2.0.0', 'Apps are now returned as JSON manifests, not XML'),

},
{
    "method":"PUT",
    "path":"/records/{RECORD_ID}/apps/{PHA_EMAIL}",
    "view_func_name":"record_pha_enable",
    "access_doc":"Any admin app, or a principal in full control of the record.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Enable a userapp for a record.",
    "return_desc":":http:statuscode:`200` on success, :http:statuscode:`404` if either the specified record or the specified app doesn't exist.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": ('1.0.0', ''),
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/apps/{PHA_EMAIL}/documents/",
    "view_func_name":"record_app_document_list",
    "access_doc":"A user app with access to the record, with an id matching the app email in the URL.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        },
    "query_opts":{
        'status':'The account or document status to filter by',
        'type':'The Indivo document type to filter by',
        'order_by':'See :ref:`query-operators`',
        'limit':'See :ref:`query-operators`',
        'offset':'See :ref:`query-operators`',
        },
    "data_fields":{
        },
    "description":"List record-app-specific documents.",
    "return_desc":":http:statuscode:`200` with a list of documents, or :http:statuscode:`404` if an invalid type was passed in the querystring.",
    "return_ex":'''
<Documents record_id="123" total_document_count="4" pha="problems@apps.indivo.org">
  <Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
    <createdAt>2009-05-04T17:05:33</createdAt>
    <creator id="steve@indivo.org" type="account">
      <fullname>Steve Zabak</fullname>
    </creator>
    <suppressedAt>2009-05-06T17:05:33</suppressedAt>
    <suppressor id="steve@indivo.org" type="account">
      <fullname>Steve Zabak</fullname>
    </suppressor>
    <original id="14c81023-c84f-496d-8b8e-9438280441d3" />
    <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
    <label>HBA1C reading Preferences</label>
    <status>active</status>
    <nevershare>false</nevershare>
    <relatesTo>
      <relation type="http://indivo.org/vocab/documentrels#attachment" count="1" />
      <relation type="http://indivo.org/vocab/documentrels#annotation" count="5" />
    </relatesTo>
    <isRelatedFrom>
      <relation type="http://indivo.org/vocab/documentrels#interpretation" count="1" />
    </isRelatedFrom>
  </Document>

  ...

</Documents>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/records/{RECORD_ID}/apps/{PHA_EMAIL}/documents/",
    "view_func_name":"record_app_document_create",
    "access_doc":"A user app with access to the record, with an id matching the app email in the URL.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        },
    "query_opts":{
        },
    "data_fields":{
        '':'The raw content of the document to create.',
        },
    "description":"Create a record-app-specific Indivo document.",
    "return_desc":":http:statuscode:`200` with the metadata of the created document, or :http:statuscode:`400` if the new document failed validation.",
    "return_ex":'''
<Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
  <createdAt>2009-05-04T17:05:33</createdAt>
  <creator id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </creator>
  <suppressedAt>2009-05-06T17:05:33</suppressedAt>
  <suppressor id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </suppressor>
  <original id="14c81023-c84f-496d-8b8e-9438280441d3" />
  <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
  <label>HBA1C reading Preferences</label>
  <status>active</status>
  <nevershare>false</nevershare>
  <relatesTo>
    <relation type="http://indivo.org/vocab/documentrels#attachment" count="1" />
    <relation type="http://indivo.org/vocab/documentrels#annotation" count="5" />
  </relatesTo>
  <isRelatedFrom>
    <relation type="http://indivo.org/vocab/documentrels#interpretation" count="1" />
  </isRelatedFrom>
</Document>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/records/{RECORD_ID}/apps/{PHA_EMAIL}/documents/external/{EXTERNAL_ID}",
    "view_func_name":"record_app_document_create_or_update_ext",
    "access_doc":"A user app with access to the record, with an id matching the app email in the URL.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'EXTERNAL_ID':'The external identifier of the desired resource',
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        },
    "query_opts":{
        },
    "data_fields":{
        '':'The raw content of the document to create/update.',
        },
    "description":"Create or Overwrite a record-app-specific Indivo document with an associated external id.",
    "return_desc":":http:statuscode:`200` with metadata describing the created or updated document, or :http:statuscode:`400` if the passed content didn't validate.",
    "return_ex":'''
<Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
  <createdAt>2009-05-04T17:05:33</createdAt>
  <creator id="problems@apps.indivo.org" type="pha">
  </creator>
  <original id="14c81023-c84f-496d-8b8e-9438280441d3" />
  <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
  <label>HBA1C reading preferences</label>
  <status>active</status>
  <nevershare>false</nevershare>
</Document>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"PUT",
    "path":"/records/{RECORD_ID}/apps/{PHA_EMAIL}/documents/external/{EXTERNAL_ID}",
    "view_func_name":"record_app_document_create_or_update_ext",
    "access_doc":"A user app with access to the record, with an id matching the app email in the URL.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'EXTERNAL_ID':'The external identifier of the desired resource',
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        },
    "query_opts":{
        },
    "data_fields":{
        '':'The raw content of the document to create/update.',
        },
    "description":"Create or Overwrite a record-app-specific Indivo document with an associated external id.",
    "return_desc":":http:statuscode:`200` with metadata describing the created or updated document, or :http:statuscode:`400` if the passed content didn't validate.",
    "return_ex":'''
<Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
  <createdAt>2009-05-04T17:05:33</createdAt>
  <creator id="problems@apps.indivo.org" type="pha">
  </creator>
  <original id="14c81023-c84f-496d-8b8e-9438280441d3" />
  <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
  <label>HBA1C reading preferences</label>
  <status>active</status>
  <nevershare>false</nevershare>
</Document>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/apps/{PHA_EMAIL}/documents/external/{EXTERNAL_ID}/meta",
    "view_func_name":"record_app_document_meta_ext",
    "access_doc":"A user app with access to the record, with an id matching the app email in the URL.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'EXTERNAL_ID':'The external identifier of the desired resource',
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Fetch the metadata of a record-app-specific document identified by external id.",
    "return_desc":":http:statuscode:`200` with metadata describing the specified document, or http:statuscode:`404` if the external_id is invalid.",
    "return_ex":'''
<Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
  <createdAt>2009-05-04T17:05:33</createdAt>
  <creator id="problems@apps.indivo.org" type="pha">
    <fullname>Steve Zabak</fullname>
  </creator>
  <suppressedAt>2009-05-06T17:05:33</suppressedAt>
  <suppressor id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </suppressor>
  <original id="14c81023-c84f-496d-8b8e-9438280441d3" />
  <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
  <label>HBA1C reading Preferences</label>
  <status>active</status>
  <nevershare>false</nevershare>
</Document>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"DELETE",
    "path":"/records/{RECORD_ID}/apps/{PHA_EMAIL}/documents/{DOCUMENT_ID}",
    "view_func_name":"record_app_document_delete",
    "access_doc":"A user app with access to the record, with an id matching the app email in the URL.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Delete a record-app-specific document.",
    "return_desc":":http:statuscode:`200 Success`, or :http:statuscode:`404` if ``DOCUMENT_ID`` is invalid.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/apps/{PHA_EMAIL}/documents/{DOCUMENT_ID}",
    "view_func_name":"record_app_specific_document",
    "access_doc":"A user app with access to the record, with an id matching the app email in the URL.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Retrieve a record-app-specific document.",
    "return_desc":":http:statuscode:`200` with the raw content of the document, or :http:statuscode:`404` if the document could not be found.",
    "return_ex":'''
<ProblemsPreferences record_id="123">
  <Preference name="hide_void" value="true" />
  <Preference name="show_rels" value="false" />
</ProblemsPreferences>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"PUT",
    "path":"/records/{RECORD_ID}/apps/{PHA_EMAIL}/documents/{DOCUMENT_ID}/label",
    "view_func_name":"record_app_document_label",
    "access_doc":"A user app with access to the record, with an id matching the app email in the URL.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        },
    "query_opts":{
        },
    "data_fields":{
        '':'The new label for the document',
        },
    "description":"Set the label of a record-app-specific document.",
    "return_desc":":http:statuscode:`200` with metadata describing the re-labeled document, or :http:statuscode:`404` if ``DOCUMENT_ID`` is invalid.",
    "return_ex":'''
<Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
  <createdAt>2009-05-04T17:05:33</createdAt>
  <creator id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </creator>
  <suppressedAt>2009-05-06T17:05:33</suppressedAt>
  <suppressor id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </suppressor>
  <original id="14c81023-c84f-496d-8b8e-9438280441d3" />
  <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
  <label>RELABELED: New HBA1C reading Preferences</label>
  <status>active</status>
  <nevershare>false</nevershare>
  <relatesTo>
    <relation type="http://indivo.org/vocab/documentrels#attachment" count="1" />
    <relation type="http://indivo.org/vocab/documentrels#annotation" count="5" />
  </relatesTo>
  <isRelatedFrom>
    <relation type="http://indivo.org/vocab/documentrels#interpretation" count="1" />
  </isRelatedFrom>
</Document>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/apps/{PHA_EMAIL}/documents/{DOCUMENT_ID}/meta",
    "view_func_name":"record_app_document_meta",
    "access_doc":"A user app with access to the record, with an id matching the app email in the URL.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Fetch the metadata of a record-app-specific document.",
    "return_desc":":http:statuscode:`200` with the document metadata, or :http:statuscode:`404` if ``DOCUMENT_ID`` is invalid.",
    "return_ex":'''
<Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
  <createdAt>2009-05-04T17:05:33</createdAt>
  <creator id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </creator>
  <suppressedAt>2009-05-06T17:05:33</suppressedAt>
  <suppressor id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </suppressor>
  <original id="14c81023-c84f-496d-8b8e-9438280441d3" />
  <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
  <label>HBA1C reading Preferences</label>
  <status>active</status>
  <nevershare>false</nevershare>
  <relatesTo>
    <relation type="http://indivo.org/vocab/documentrels#attachment" count="1" />
    <relation type="http://indivo.org/vocab/documentrels#annotation" count="5" />
  </relatesTo>
  <isRelatedFrom>
    <relation type="http://indivo.org/vocab/documentrels#interpretation" count="1" />
  </isRelatedFrom>
</Document>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/records/{RECORD_ID}/apps/{PHA_EMAIL}/setup",
    "view_func_name":"record_pha_setup",
    "access_doc":"Any admin app.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        },
    "query_opts":{
        },
    "data_fields":{
        '':'Raw content that will be used as a setup document for the record. **OPTIONAL**.',
        },
    "description":"Bind an app to a record without user authorization.",
    "return_desc":":http:statuscode:`200` with a valid access token for the newly set up app.",
    "return_ex":'''
oauth_token=abcd1fw3gasdgh3&oauth_token_secret=jgrlhre4291hfjas&xoauth_indivo_record_id=123
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/audits/",
    "view_func_name":"audit_record_view",
    "access_doc":"A principal in full control of the record, or a user app with access to the record.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        },
    "query_opts":{
        'order_by':'See :ref:`query-operators`',
        'limit':'See :ref:`query-operators`',
        'offset':'See :ref:`query-operators`',
        },
    "data_fields":{
        },
    "description":"Return audits of calls touching *record*.",
    "return_desc":":http:statuscode:`200`, with a list of Audit Reports.",
    "return_ex":'''
<Reports xmlns="http://indivo.org/vocab/xml/documents#">
  <Summary total_document_count="2" limit="100" offset="0" order_by="date_measured" />
  <QueryParams>
    <Filters>
    </Filters>
  </QueryParams>
  <Report>
    <Meta>
    </Meta>
    <Item>
      <AuditEntry>
        <BasicInfo datetime="2011-04-27T17:32:23Z" view_func="get_document" request_successful="true" />
        <PrincipalInfo effective_principal="myapp@apps.indivoheatlh.org" proxied_principal="me@indivohealth.org" />
        <Resources carenet_id="" record_id="123" pha_id="" document_id="234" external_id="" message_id="" />
        <RequestInfo req_url="/records/123/documents/acd/" req_ip_address="127.0.0.1" req_domain="localhost"  req_method="GET" />
        <ResponseInfo resp_code="200" />
      </AuditEntry>
    </Item>
  </Report>

  ...

</Reports>
''',
    "deprecated": ('0.9.3', 'Use :http:get:`/records/{RECORD_ID}/audits/query/` instead.'),
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/audits/documents/{DOCUMENT_ID}/",
    "view_func_name":"audit_document_view",
    "access_doc":"A principal in full control of the record, or a user app with access to the record.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        },
    "query_opts":{
        'order_by':'See :ref:`query-operators`',
        'limit':'See :ref:`query-operators`',
        'offset':'See :ref:`query-operators`',
        },
    "data_fields":{
        },
    "description":"Return audits of calls touching *record* and *document_id*.",
    "return_desc":":http:statuscode:`200`, with a list of Audit Reports.",
    "return_ex":'''
<Reports xmlns="http://indivo.org/vocab/xml/documents#">
  <Summary total_document_count="2" limit="100" offset="0" order_by="date_measured" />
  <QueryParams>
    <Filters>
      <Filter name="document_id" value="234"/>
    </Filters>
  </QueryParams>
  <Report>
    <Meta>
    </Meta>
    <Item>
      <AuditEntry>
        <BasicInfo datetime="2011-04-27T17:32:23Z" view_func="get_document" request_successful="true" />
        <PrincipalInfo effective_principal="myapp@apps.indivoheatlh.org" proxied_principal="me@indivohealth.org" />
        <Resources carenet_id="" record_id="123" pha_id="" document_id="234" external_id="" message_id="" />
        <RequestInfo req_url="/records/123/documents/acd/" req_ip_address="127.0.0.1" req_domain="localhost"  req_method="GET" />
        <ResponseInfo resp_code="200" />
      </AuditEntry>
    </Item>
  </Report>

  ...

</Reports>
''',
    "deprecated": ('0.9.3', 'Use :http:get:`/records/{RECORD_ID}/audits/query/` instead.'),
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/audits/documents/{DOCUMENT_ID}/functions/{FUNCTION_NAME}/",
    "view_func_name":"audit_function_view",
    "access_doc":"A principal in full control of the record, or a user app with access to the record.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        'FUNCTION_NAME':'The internal Indivo function name called by the API request',
        },
    "query_opts":{
        'order_by':'See :ref:`query-operators`',
        'limit':'See :ref:`query-operators`',
        'offset':'See :ref:`query-operators`',
        },
    "data_fields":{
        },
    "description":"Return audits of calls to *function_name* touching *record* and *document_id*.",
    "return_desc":":http:statuscode:`200`, with a list of Audit Reports.",
    "return_ex":'''
<Reports xmlns="http://indivo.org/vocab/xml/documents#">
  <Summary total_document_count="2" limit="100" offset="0" order_by="date_measured" />
  <QueryParams>
    <Filters>
      <Filter name="document_id" value="234"/>
      <Filter name="req_view_func" value="record_specific_document"/>
    </Filters>
  </QueryParams>
  <Report>
    <Meta>
    </Meta>
    <Item>
      <AuditEntry>
        <BasicInfo datetime="2011-04-27T17:32:23Z" view_func="get_document" request_successful="true" />
        <PrincipalInfo effective_principal="myapp@apps.indivoheatlh.org" proxied_principal="me@indivohealth.org" />
        <Resources carenet_id="" record_id="123" pha_id="" document_id="234" external_id="" message_id="" />
        <RequestInfo req_url="/records/123/documents/acd/" req_ip_address="127.0.0.1" req_domain="localhost"  req_method="GET" />
        <ResponseInfo resp_code="200" />
      </AuditEntry>
    </Item>
  </Report>

  ...

</Reports>
''',
    "deprecated": ('0.9.3', 'Use :http:get:`/records/{RECORD_ID}/audits/query/` instead.'),
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/audits/query/",
    "view_func_name":"audit_query",
    "access_doc":"A principal in full control of the record, or a user app with access to the record.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        },
    "query_opts":{
        'status':'The account or document status to filter by',
        '{FIELD}':'See :ref:`query-operators`, :ref:`audit-query-fields`',
        'order_by':'See :ref:`query-operators`',
        'aggregate_by':'See :ref:`query-operators`',
        'date_range':'See :ref:`query-operators`',
        'date_group':'See :ref:`query-operators`',
        'group_by':'See :ref:`query-operators`',
        'limit':'See :ref:`query-operators`',
        'offset':'See :ref:`query-operators`',
        },
    "data_fields":{
        },
    "description":"Select Audit Objects via the Query API Interface.",
    "return_desc":":http:statuscode:`200` with a list of audit records, or :http:statuscode:`400` if any of the arguments to the query interface are invalid.",
    "return_ex":'''
<Reports xmlns="http://indivo.org/vocab/xml/documents#">
  <Summary total_document_count="2" limit="100" offset="0" order_by="date_measured" />
  <QueryParams>
    <DateRange value="created_at*1995-03-10T00:00:00Z*" />
    <Filters>
      <Filter name="document_id" value="234"/>
    </Filters>
  </QueryParams>
  <Report>
    <Meta>
    </Meta>
    <Item>
      <AuditEntry>
        <BasicInfo datetime="2011-04-27T17:32:23Z" view_func="get_document" request_successful="true" />
        <PrincipalInfo effective_principal="myapp@apps.indivoheatlh.org" proxied_principal="me@indivohealth.org" />
        <Resources carenet_id="" record_id="123" pha_id="" document_id="234" external_id="" message_id="" />
        <RequestInfo req_url="/records/123/documents/acd/" req_ip_address="127.0.0.1" req_domain="localhost"  req_method="GET" />
        <ResponseInfo resp_code="200" />
      </AuditEntry>
    </Item>
  </Report>

  ...

</Reports>
''',
    "deprecated": None,
    "added": ('0.9.3', ''),
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/autoshare/bytype/",
    "view_func_name":"autoshare_list",
    "access_doc":"A principal in full control of the record.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        },
    "query_opts":{
        'type':'The document schema type to check autoshares for. **REQUIRED**.',
        },
    "data_fields":{
        },
    "description":"For a single record, list all carenets that a given doctype is autoshared with.",
    "return_desc":":http:statuscode:`200` with a list of carenets, or :http:statuscode:`404` if the passed document type is invalid.",
    "return_ex":'''
<Carenets record_id="123">
  <Carenet id="789" name="Work/School" mode="explicit" />

  ...

</Carenets>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/autoshare/bytype/all",
    "view_func_name":"autoshare_list_bytype_all",
    "access_doc":"A principal in full control of the record.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"For a single record, list all doctypes autoshared into carenets.",
    "return_desc":":http:statuscode:`200` with a list of doctypes and their shared carenets.",
    "return_ex":'''
<DocumentSchemas>
  <DocumentSchema type="http://indivo.org/vocab/xml/documents#Medication">
    <Carenet id="123" name="Family" mode="explicit" />

    ...

  </DocumentSchema>

  ...

</DocumentSchemas>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/records/{RECORD_ID}/autoshare/carenets/{CARENET_ID}/bytype/set",
    "view_func_name":"autoshare_create",
    "access_doc":"A principal in full control of the record.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'CARENET_ID':'The id string associated with the Indivo carenet',
        },
    "query_opts":{
        },
    "data_fields":{
        'type':'the document schema type to create an autoshare for',
        },
    "description":"Automatically share all documents of a certain type into a carenet.",
    "return_desc":":http:statuscode:`200`, or :http:statuscode:`404` if the passed document type doesn't exist.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/records/{RECORD_ID}/autoshare/carenets/{CARENET_ID}/bytype/unset",
    "view_func_name":"autoshare_delete",
    "access_doc":"A principal in full control of the record.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'CARENET_ID':'The id string associated with the Indivo carenet',
        },
    "query_opts":{
        },
    "data_fields":{
        'type':'the document schema type to remove an autoshare for',
        },
    "description":"Remove an autoshare from a carenet.",
    "return_desc":":http:statuscode:`200`, or :http:statuscode:`404` if the passed document type doesn't exist.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/carenets/",
    "view_func_name":"carenet_list",
    "access_doc":"A principal in full control of the record, or any admin app.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"List all carenets for a record.",
    "return_desc":":http:statuscode:`200`, with a list of carenets.",
    "return_ex":'''
<Carenets record_id="123">
  <Carenet id="789" name="Work/School" mode="explicit" />

  ...

</Carenets>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/records/{RECORD_ID}/carenets/",
    "view_func_name":"carenet_create",
    "access_doc":"A principal in full control of the record, or any admin app.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        },
    "query_opts":{
        },
    "data_fields":{
        'name':'The label for the new carenet.',
        },
    "description":"Create a new carenet for a record.",
    "return_desc":":http:statuscode:`200` with a description of the new carenet, or :http:statuscode:`400` if the name of the carenet wasn't passed or already exists.",
    "return_ex":'''
<Carenets record_id="123">
  <Carenet id="789" name="Work/School" mode="explicit" />
</Carenets>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/demographics",
    "view_func_name":"read_demographics",
    "access_doc":"A user app with access to the record, a principal in full control of the record, or any admin app.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        },
    "query_opts":{
        'response_format':'one of `application/rdf+xml` (SMART RDF/XML), `application/json` (:ref:`sdmj`), or `application/xml` (:ref:`sdmx`). Default is `application/rdf+xml`',
        },
    "data_fields":{
        },
    "description":"Read demographics from a record.",
    "return_desc":":http:statuscode:`200` with demographics formatted in the requested ``response_format`` (default `application/rdf+xml`) on success, :http:statuscode:`404` when no demographics found, and :http:statuscode:`400` if response_format is invalid",
    "return_ex":'''
application/rdf+xml:
    
    <?xml version="1.0" encoding="UTF-8"?>
    <rdf:RDF xmlns:dcterms="http://purl.org/dc/terms/"   
         xmlns:foaf="http://xmlns.com/foaf/0.1/"   
         xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"   
         xmlns:sp="http://smartplatforms.org/terms#"   xmlns:v="http://www.w3.org/2006/vcard/ns#">
    <rdf:Description rdf:nodeID="_6730841b-05df-445f-8695-ed64197f4e6a">
        <v:family-name>William</v:family-name>
        <rdf:type rdf:resource="http://www.w3.org/2006/vcard/ns#Name"/>
        <v:given-name>Robinson</v:given-name>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_bcf66b59-e438-49b2-b572-99af4319b297">
        <rdf:value>800-870-3011</rdf:value>
        <rdf:type rdf:resource="http://www.w3.org/2006/vcard/ns#Tel"/>
        <rdf:type rdf:resource="http://www.w3.org/2006/vcard/ns#Home"/>
        <rdf:type rdf:resource="http://www.w3.org/2006/vcard/ns#Pref"/>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_8cbe3da1-fb53-4d31-80b6-19e0d04220ad">
        <dcterms:identifier>http://indivo.org/records/96ff9eb2-3b18-4a0e-9df8-5a731b96d5d6</dcterms:identifier>
        <sp:system>Indivo Record</sp:system>
        <dcterms:title>Indivo Record 96ff9eb2-3b18-4a0e-9df8-5a731b96d5d6</dcterms:title>
        <rdf:type rdf:resource="http://smartplatforms.org/terms#Code"/>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_451ade87-b519-4c92-8d07-2bbfcb23999c">
        <rdf:value>800-870-3011</rdf:value>
        <rdf:type rdf:resource="http://www.w3.org/2006/vcard/ns#Tel"/>
        <rdf:type rdf:resource="http://www.w3.org/2006/vcard/ns#Home"/>
        <rdf:type rdf:resource="http://www.w3.org/2006/vcard/ns#Pref"/>
    </rdf:Description>
    <rdf:Description rdf:about="http://indivo.org/records/96ff9eb2-3b18-4a0e-9df8-5a731b96d5d6">
        <rdf:type rdf:resource="http://smartplatforms.org/terms#MedicalRecord"/>
    </rdf:Description>
    <rdf:Description rdf:about="http://indivo.org/records/96ff9eb2-3b18-4a0e-9df8-5a731b96d5d6/demographics">
        <v:tel rdf:nodeID="_bcf66b59-e438-49b2-b572-99af4319b297"/>
        <v:tel rdf:nodeID="_451ade87-b519-4c92-8d07-2bbfcb23999c"/>
        <sp:email>william.robinson@example.com</sp:email>
        <rdf:type rdf:resource="http://smartplatforms.org/terms#Demographics"/>
        <v:bday rdf:datatype="http://www.w3.org/2001/XMLSchema#date">1965-08-09</v:bday>
        <v:adr rdf:nodeID="_9f06ee63-3704-4b2a-9c2a-109cc9c99a57"/>
        <sp:belongsTo rdf:resource="http://indivo.org/records/96ff9eb2-3b18-4a0e-9df8-5a731b96d5d6"/>
        <foaf:gender>male</foaf:gender>
        <sp:preferredLanguage>EN</sp:preferredLanguage>
        <v:n rdf:nodeID="_6730841b-05df-445f-8695-ed64197f4e6a"/>
        <sp:medicalRecordNumber rdf:nodeID="_8cbe3da1-fb53-4d31-80b6-19e0d04220ad"/>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_9f06ee63-3704-4b2a-9c2a-109cc9c99a57">
        <v:street-address>23 Church Rd</v:street-address>
        <v:country>USA</v:country>
        <rdf:type rdf:resource="http://www.w3.org/2006/vcard/ns#Address"/>
        <v:region>OK</v:region>
        <v:locality>Bixby</v:locality>
        <v:postal-code>74008</v:postal-code>
    </rdf:Description>
</rdf:RDF>

application/xml:

    <Models>
        <Model name="Demographics" documentId="44190967-cbaa-43a7-a98c-9f97f094ef2b">
            <Field name="bday">1965-08-09</Field>
            <Field name="email">william.robinson@example.com</Field>
            <Field name="ethnicity"/>
            <Field name="gender">male</Field>
            <Field name="preferred_language">EN</Field>
            <Field name="race"/>
            <Field name="name_given">Robinson</Field>
            <Field name="name_suffix"/>
            <Field name="name_family">William</Field>
            <Field name="name_prefix"/>
            <Field name="tel_2_type">h</Field>
            <Field name="tel_2_preferred_p">True</Field>
            <Field name="tel_2_number">800-870-3011</Field>
            <Field name="adr_region">OK</Field>
            <Field name="adr_country">USA</Field>
            <Field name="adr_postalcode">74008</Field>
            <Field name="adr_city">Bixby</Field>
            <Field name="adr_street">23 Church Rd</Field>
            <Field name="tel_1_type">h</Field>
            <Field name="tel_1_preferred_p">True</Field>
            <Field name="tel_1_number">800-870-3011</Field>
        </Model>
    </Models>

application/json:

    [
        {
            "__modelname__": "Demographics",
            "__documentid__": "44190967-cbaa-43a7-a98c-9f97f094ef2b",
            "name_given": "Robinson",
            "name_family": "William",
            "name_prefix": null,
            "name_suffix": null,
            "gender": "male",
            "race": null,
            "ethnicity": null,
            "bday": "1965-08-09",
            "email": "william.robinson@example.com",
            "preferred_language": "EN",
            "tel_1_type": "h",
            "tel_1_number": "800-870-3011",
            "tel_1_preferred_p": true,
            "tel_2_type": "h",
            "tel_2_number": "800-870-3011",
            "tel_2_preferred_p": true,
            "adr_street": "23 Church Rd",
            "adr_city": "Bixby",
            "adr_postalcode": "74008",
            "adr_region": "OK",
            "adr_country": "USA"
        }
    ]


''',
    "deprecated": None,
    "added": ('2.0.0', ''),
    "changed": None,

},
{
    "method":"PUT",
    "path":"/records/{RECORD_ID}/demographics",
    "view_func_name":"set_demographics",
    "access_doc":"A user app with access to the record, a principal in full control of the record, or any admin app.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Create or update demographics on a record.",
    "return_desc":":http:statuscode:`200` with metadata on the updated document, or :http:statuscode:`400` if the new content didn't validate",
    "return_ex":'''
<Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="http://indivo.org/vocab/xml/documents#Demographics" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
  <createdAt>2009-05-04T17:05:33</createdAt>
  <creator id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </creator>
  <original id="14c81023-c84f-496d-8b8e-9438280441d3" />
  <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
  <status>active</status>
  <nevershare>false</nevershare>
</Document>
''',
    "deprecated": None,
    "added": ('2.0.0', ''),
    "changed": None,

},
{
    "method":"DELETE",
    "path":"/records/{RECORD_ID}/documents/",
    "view_func_name":"documents_delete",
    "access_doc":"Nobody",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Delete all documents associated with a record.",
    "return_desc":":http:statuscode:`200 Success`",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/documents/",
    "view_func_name":"record_document_list",
    "access_doc":"A user app with access to the record, or a principal in full control of the record",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        },
    "query_opts":{
        'status':'The account or document status to filter by',
        'type':'The Indivo document type to filter by',
        'order_by':'See :ref:`query-operators`',
        'limit':'See :ref:`query-operators`',
        'offset':'See :ref:`query-operators`',
        },
    "data_fields":{
        },
    "description":"List record-specific documents.",
    "return_desc":":http:statuscode:`200` with a list of documents, or :http:statuscode:`404` if an invalid type was passed in the querystring.",
    "return_ex":'''
<Documents record_id="123" total_document_count="4">
  <Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
    <createdAt>2009-05-04T17:05:33</createdAt>
    <creator id="steve@indivo.org" type="account">
      <fullname>Steve Zabak</fullname>
    </creator>
    <suppressedAt>2009-05-06T17:05:33</suppressedAt>
    <suppressor id="steve@indivo.org" type="account">
      <fullname>Steve Zabak</fullname>
    </suppressor>
    <original id="14c81023-c84f-496d-8b8e-9438280441d3" />
    <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
    <label>HBA1C reading</label>
    <status>active</status>
    <nevershare>false</nevershare>
    <relatesTo>
      <relation type="http://indivo.org/vocab/documentrels#attachment" count="1" />
      <relation type="http://indivo.org/vocab/documentrels#annotation" count="5" />
    </relatesTo>
    <isRelatedFrom>
      <relation type="http://indivo.org/vocab/documentrels#interpretation" count="1" />
    </isRelatedFrom>
  </Document>

  ...

</Documents>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/records/{RECORD_ID}/documents/",
    "view_func_name":"document_create",
    "access_doc":"A user app with access to the record, a principal in full control of the record, or the admin app that created the record.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        },
    "query_opts":{
        },
    "data_fields":{
        '':'The raw content of the document to create.',
        },
    "description":"Create a record-specific Indivo Document.",
    "return_desc":":http:statuscode:`200` with the metadata of the created document, or :http:statuscode:`400` if the new document failed validation.",
    "return_ex":'''
<Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
  <createdAt>2009-05-04T17:05:33</createdAt>
  <creator id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </creator>
  <suppressedAt>2009-05-06T17:05:33</suppressedAt>
  <suppressor id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </suppressor>
  <original id="14c81023-c84f-496d-8b8e-9438280441d3" />
  <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
  <label>HBA1C reading</label>
  <status>active</status>
  <nevershare>false</nevershare>
  <relatesTo>
    <relation type="http://indivo.org/vocab/documentrels#attachment" count="1" />
    <relation type="http://indivo.org/vocab/documentrels#annotation" count="5" />
  </relatesTo>
  <isRelatedFrom>
    <relation type="http://indivo.org/vocab/documentrels#interpretation" count="1" />
  </isRelatedFrom>
</Document>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"PUT",
    "path":"/records/{RECORD_ID}/documents/external/{PHA_EMAIL}/{EXTERNAL_ID}",
    "view_func_name":"document_create_by_ext_id",
    "access_doc":"A user app with access to the record, with an id matching the app email in the URL.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'EXTERNAL_ID':'The external identifier of the desired resource',
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        },
    "query_opts":{
        },
    "data_fields":{
        '':'The raw content of the document to create.',
        },
    "description":"Create a record-specific Indivo Document with an associated external id.",
    "return_desc":":http:statuscode:`200` with the metadata of the created document, or :http:statuscode:`400` if the new document failed validation, or if the external id was taken.",
    "return_ex":'''
<Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
  <createdAt>2009-05-04T17:05:33</createdAt>
  <creator id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </creator>
  <suppressedAt>2009-05-06T17:05:33</suppressedAt>
  <suppressor id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </suppressor>
  <original id="14c81023-c84f-496d-8b8e-9438280441d3" />
  <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
  <label>HBA1C reading</label>
  <status>active</status>
  <nevershare>false</nevershare>
  <relatesTo>
    <relation type="http://indivo.org/vocab/documentrels#attachment" count="1" />
    <relation type="http://indivo.org/vocab/documentrels#annotation" count="5" />
  </relatesTo>
  <isRelatedFrom>
    <relation type="http://indivo.org/vocab/documentrels#interpretation" count="1" />
  </isRelatedFrom>
</Document>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"PUT",
    "path":"/records/{RECORD_ID}/documents/external/{PHA_EMAIL}/{EXTERNAL_ID}/label",
    "view_func_name":"record_document_label_ext",
    "access_doc":"A user app with access to the record, with an id matching the app email in the URL.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'EXTERNAL_ID':'The external identifier of the desired resource',
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        },
    "query_opts":{
        },
    "data_fields":{
        '':'The new label for the document',
        },
    "description":"Set the label of a record-specific document, specified by external id.",
    "return_desc":":http:statuscode:`200` with metadata describing the re-labeled document, or :http:statuscode:`404` if ``EXTERNAL_ID`` is invalid.",
    "return_ex":'''
<Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
  <createdAt>2009-05-04T17:05:33</createdAt>
  <creator id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </creator>
  <suppressedAt>2009-05-06T17:05:33</suppressedAt>
  <suppressor id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </suppressor>
  <original id="14c81023-c84f-496d-8b8e-9438280441d3" />
  <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
  <label>RELABELED: New HBA1C reading</label>
  <status>active</status>
  <nevershare>false</nevershare>
  <relatesTo>
    <relation type="http://indivo.org/vocab/documentrels#attachment" count="1" />
    <relation type="http://indivo.org/vocab/documentrels#annotation" count="5" />
  </relatesTo>
  <isRelatedFrom>
    <relation type="http://indivo.org/vocab/documentrels#interpretation" count="1" />
  </isRelatedFrom>
</Document>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/documents/external/{PHA_EMAIL}/{EXTERNAL_ID}/meta",
    "view_func_name":"record_document_meta_ext",
    "access_doc":"A user app with access to the record, with an id matching the app email in the URL.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'EXTERNAL_ID':'The external identifier of the desired resource',
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Fetch the metadata of a record-specific document identified by external id.",
    "return_desc":":http:statuscode:`200` with the document metadata, or :http:statuscode:`404` if ``EXTERNAL_ID`` is invalid.",
    "return_ex":'''
<Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
  <createdAt>2009-05-04T17:05:33</createdAt>
  <creator id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </creator>
  <suppressedAt>2009-05-06T17:05:33</suppressedAt>
  <suppressor id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </suppressor>
  <original id="14c81023-c84f-496d-8b8e-9438280441d3" />
  <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
  <label>HBA1C reading</label>
  <status>active</status>
  <nevershare>false</nevershare>
  <relatesTo>
    <relation type="http://indivo.org/vocab/documentrels#attachment" count="1" />
    <relation type="http://indivo.org/vocab/documentrels#annotation" count="5" />
  </relatesTo>
  <isRelatedFrom>
    <relation type="http://indivo.org/vocab/documentrels#interpretation" count="1" />
  </isRelatedFrom>
</Document>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"PUT",
    "path":"/records/{RECORD_ID}/documents/{DOCUMENT_ID_0}/rels/{REL}/{DOCUMENT_ID_1}",
    "view_func_name":"document_rels",
    "access_doc":"A user app with access to the record, or a principal in full control of the record",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'DOCUMENT_ID_1':'The id of the document that is the subject of the relationship, i.e. DOCUMENT_ID_1 *annotates* DOCUMENT_ID_0',
        'DOCUMENT_ID_0':'The id of the document that is the object of the relationship, i.e. DOCUMENT_ID_0 *is annotated by* DOCUMENT_ID_1',
        'REL':'The type of relationship between the documents, i.e. ``annotation``, ``interpretation``',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Create a new relationship between two existing documents.",
    "return_desc":":http:statuscode:`200 Success`, or :http:statuscode:`404` if ``DOCUMENT_ID_0``, ``DOCUMENT_ID_1``, or ``REL`` don't exist.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/documents/{DOCUMENT_ID}",
    "view_func_name":"record_specific_document",
    "access_doc":"A user app with access to the record, or a principal in full control of the record",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Retrieve a record-specific document.",
    "return_desc":":http:statuscode:`200` with the raw content of the document, or :http:statuscode:`404` if the document could not be found.",
    "return_ex":'''
<HBA1C xmlns="http://indivo.org/vocab#" value="5.3" unit="percent" datetime="2011-01-15T17:00:00.000Z" />
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/documents/{DOCUMENT_ID}/carenets/",
    "view_func_name":"document_carenets",
    "access_doc":"A user app with access to the record, or a principal in full control of the record",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"List all the carenets into which a document has been shared.",
    "return_desc":":http:statuscode:`200` with a list of carenets.",
    "return_ex":'''
<Carenets record_id="123">
  <Carenet id="789" name="Work/School" mode="explicit" />

  ...

</Carenets>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"DELETE",
    "path":"/records/{RECORD_ID}/documents/{DOCUMENT_ID}/carenets/{CARENET_ID}",
    "view_func_name":"carenet_document_delete",
    "access_doc":"A principal in full control of the carenet's record.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        'CARENET_ID':'The id string associated with the Indivo carenet',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Unshare a document from a given carenet.",
    "return_desc":":http:statuscode:`200 Success`, or :http:statuscode:`404` if ``DOCUMENT_ID`` is invalid or if either the passed carenet or document do not belong to the passed record.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"PUT",
    "path":"/records/{RECORD_ID}/documents/{DOCUMENT_ID}/carenets/{CARENET_ID}",
    "view_func_name":"carenet_document_placement",
    "access_doc":"A principal in full control of the carenet's record.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        'CARENET_ID':'The id string associated with the Indivo carenet',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Place a document into a given carenet.",
    "return_desc":":http:statuscode:`200 Success`, or :http:statuscode:`404` if ``DOCUMENT_ID`` is invalid or nevershared.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/records/{RECORD_ID}/documents/{DOCUMENT_ID}/carenets/{CARENET_ID}/autoshare-revert",
    "view_func_name":"autoshare_revert",
    "access_doc":"A principal in full control of the record.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        'CARENET_ID':'The id string associated with the Indivo carenet',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Revert the document-sharing of a document in a carent to whatever rules are specified by autoshares. NOT IMPLEMENTED.",
    "return_desc":":http:statuscode:`200 Success`.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"PUT",
    "path":"/records/{RECORD_ID}/documents/{DOCUMENT_ID}/label",
    "view_func_name":"record_document_label",
    "access_doc":"A user app with access to the record, or a principal in full control of the record",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        },
    "query_opts":{
        },
    "data_fields":{
        '':'The new label for the document',
        },
    "description":"Set the label of a record-specific document.",
    "return_desc":":http:statuscode:`200` with metadata describing the re-labeled document, or :http:statuscode:`404` if ``DOCUMENT_ID`` is invalid.",
    "return_ex":'''
<Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
  <createdAt>2009-05-04T17:05:33</createdAt>
  <creator id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </creator>
  <suppressedAt>2009-05-06T17:05:33</suppressedAt>
  <suppressor id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </suppressor>
  <original id="14c81023-c84f-496d-8b8e-9438280441d3" />
  <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
  <label>RELABELED: New HBA1C reading</label>
  <status>active</status>
  <nevershare>false</nevershare>
  <relatesTo>
    <relation type="http://indivo.org/vocab/documentrels#attachment" count="1" />
    <relation type="http://indivo.org/vocab/documentrels#annotation" count="5" />
  </relatesTo>
  <isRelatedFrom>
    <relation type="http://indivo.org/vocab/documentrels#interpretation" count="1" />
  </isRelatedFrom>
</Document>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/documents/{DOCUMENT_ID}/meta",
    "view_func_name":"record_document_meta",
    "access_doc":"A user app with access to the record, or a principal in full control of the record",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Fetch the metadata of a record-specific document.",
    "return_desc":":http:statuscode:`200` with the document metadata, or :http:statuscode:`404` if ``DOCUMENT_ID`` is invalid.",
    "return_ex":'''
<Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
  <createdAt>2009-05-04T17:05:33</createdAt>
  <creator id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </creator>
  <suppressedAt>2009-05-06T17:05:33</suppressedAt>
  <suppressor id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </suppressor>
  <original id="14c81023-c84f-496d-8b8e-9438280441d3" />
  <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
  <label>HBA1C reading</label>
  <status>active</status>
  <nevershare>false</nevershare>
  <relatesTo>
    <relation type="http://indivo.org/vocab/documentrels#attachment" count="1" />
    <relation type="http://indivo.org/vocab/documentrels#annotation" count="5" />
  </relatesTo>
  <isRelatedFrom>
    <relation type="http://indivo.org/vocab/documentrels#interpretation" count="1" />
  </isRelatedFrom>
</Document>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"PUT",
    "path":"/records/{RECORD_ID}/documents/{DOCUMENT_ID}/meta",
    "view_func_name":"update_document_meta",
    "access_doc":"Nobody",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Set metadata fields on a document. NOT IMPLEMENTED.",
    "return_desc":":http:statuscode:`200 Success`.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"DELETE",
    "path":"/records/{RECORD_ID}/documents/{DOCUMENT_ID}/nevershare",
    "view_func_name":"document_remove_nevershare",
    "access_doc":"A principal in full control of the record.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Remove the nevershare flag from a document.",
    "return_desc":":http:statuscode:`200 Success`, or :http:statuscode:`404` if ``DOCUMENT_ID`` is invalid.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"PUT",
    "path":"/records/{RECORD_ID}/documents/{DOCUMENT_ID}/nevershare",
    "view_func_name":"document_set_nevershare",
    "access_doc":"A principal in full control of the record.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Flag a document to never be shared, anywhere.",
    "return_desc":":http:statuscode:`200 Success`, or :http:statuscode:`404` if ``DOCUMENT_ID`` is invalid.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/documents/{DOCUMENT_ID}/rels/{REL}/",
    "view_func_name":"get_documents_by_rel",
    "access_doc":"A user app with access to the record, or a principal in full control of the record",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        'REL':'The type of relationship between the documents, i.e. ``annotation``, ``interpretation``',
        },
    "query_opts":{
        'status':'The account or document status to filter by.',
        'order_by':'See :ref:`query-operators`. **CURRENTLY UNIMPLEMENTED**.',
        'limit':'See :ref:`query-operators`. **CURRENTLY UNIMPLEMENTED**.',
        'offset':'See :ref:`query-operators`. **CURRENTLY UNIMPLEMENTED**',
        },
    "data_fields":{
        },
    "description":"Get all documents related to the passed document_id by a relation of the passed relation-type.",
    "return_desc":":http:statuscode:`200` with a list of related documents, or :http:statuscode:`400` if ``DOCUMENT_ID`` is invalid.",
    "return_ex":'''
<Documents record_id="123" total_document_count="4">
  <Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
    <createdAt>2009-05-04T17:05:33</createdAt>
    <creator id="steve@indivo.org" type="account">
      <fullname>Steve Zabak</fullname>
    </creator>
    <suppressedAt>2009-05-06T17:05:33</suppressedAt>
    <suppressor id="steve@indivo.org" type="account">
      <fullname>Steve Zabak</fullname>
    </suppressor>
    <original id="14c81023-c84f-496d-8b8e-9438280441d3" />
    <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
    <label>HBA1C reading</label>
    <status>active</status>
    <nevershare>false</nevershare>
    <relatesTo>
      <relation type="http://indivo.org/vocab/documentrels#attachment" count="1" />
      <relation type="http://indivo.org/vocab/documentrels#annotation" count="5" />
    </relatesTo>
    <isRelatedFrom>
      <relation type="http://indivo.org/vocab/documentrels#interpretation" count="1" />
    </isRelatedFrom>
  </Document>

  ...

</Documents>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/records/{RECORD_ID}/documents/{DOCUMENT_ID}/rels/{REL}/",
    "view_func_name":"document_create_by_rel",
    "access_doc":"A user app with access to the record, or a principal in full control of the record",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        'REL':'The type of relationship between the documents, i.e. ``annotation``, ``interpretation``',
        },
    "query_opts":{
        },
    "data_fields":{
        '':'The raw content of the document to create.',
        },
    "description":"Create a document and relate it to an existing document.",
    "return_desc":":http:statuscode:`200` with the metadata of the created document, or :http:statuscode:`400` if the new content was invalid, or :http:statuscode:`404` if ``DOCUMENT_ID`` or ``REL`` are invalid.",
    "return_ex":'''
    <Document id="238543a5-e516-4da2-8a70-8c764c65a5a7" type="" size="104" digest="6aaef7aa0fbc24eef18f6cde0bc17120cbea6f35" record_id="e32c3daf-33e3-443e-aa4a-fad22fe559cc">
        <createdAt>2012-07-10T14:58:36.805563Z</createdAt>
        <creator id="bob@indivo.org" type="account">
            <fullname>Bob Loblaw</fullname>
        </creator>
        <original id="238543a5-e516-4da2-8a70-8c764c65a5a7"/>
        <status>active</status>
        <nevershare>false</nevershare>
        <isRelatedFrom>
            <relation type="http://indivo.org/vocab/documentrels#annotation" count="1" />
        </isRelatedFrom>
    </Document>
    
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/records/{RECORD_ID}/documents/{DOCUMENT_ID}/rels/{REL}/external/{PHA_EMAIL}/{EXTERNAL_ID}",
    "view_func_name":"document_create_by_rel_with_ext_id",
    "access_doc":"A user app with access to the record, with an id matching the app email in the URL.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        'EXTERNAL_ID':'The external identifier of the desired resource',
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        'REL':'The type of relationship between the documents, i.e. ``annotation``, ``interpretation``',
        },
    "query_opts":{
        },
    "data_fields":{
        '':'The raw content of the document to create.',
        },
    "description":"Create a document, assign it an external id, and relate it to an existing document.",
    "return_desc":":http:statuscode:`200` with the metadata of the created document, or :http:statuscode:`400` if the new content was invalid, or :http:statuscode:`404` if ``DOCUMENT_ID`` or ``REL`` are invalid.",
    "return_ex":'''
    <Document id="238543a5-e516-4da2-8a70-8c764c65a5a7" type="" size="104" digest="6aaef7aa0fbc24eef18f6cde0bc17120cbea6f35" record_id="e32c3daf-33e3-443e-aa4a-fad22fe559cc">
        <createdAt>2012-07-10T14:58:36.805563Z</createdAt>
        <creator id="bob@indivo.org" type="account">
            <fullname>Bob Loblaw</fullname>
        </creator>
        <original id="238543a5-e516-4da2-8a70-8c764c65a5a7"/>
        <status>active</status>
        <nevershare>false</nevershare>
        <isRelatedFrom>
            <relation type="http://indivo.org/vocab/documentrels#annotation" count="1" />
        </isRelatedFrom>
    </Document>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"PUT",
    "path":"/records/{RECORD_ID}/documents/{DOCUMENT_ID}/rels/{REL}/external/{PHA_EMAIL}/{EXTERNAL_ID}",
    "view_func_name":"document_create_by_rel_with_ext_id",
    "access_doc":"A user app with access to the record, with an id matching the app email in the URL.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        'EXTERNAL_ID':'The external identifier of the desired resource',
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        'REL':'The type of relationship between the documents, i.e. ``annotation``, ``interpretation``',
        },
    "query_opts":{
        },
    "data_fields":{
        '':'The raw content of the document to create.',
        },
    "description":"Create a document, assign it an external id, and relate it to an existing document.",
    "return_desc":":http:statuscode:`200 Success`, :http:statuscode:`400` if the new content was invalid, or :http:statuscode:`404` if ``DOCUMENT_ID`` or ``REL`` are invalid.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/records/{RECORD_ID}/documents/{DOCUMENT_ID}/replace",
    "view_func_name":"document_version",
    "access_doc":"A user app with access to the record, a principal in full control of the record, or the admin app that created the record.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        },
    "query_opts":{
        },
    "data_fields":{
        '':'The raw content of the document to create.',
        },
    "description":"Create a new version of a record-specific document.",
    "return_desc":":http:statuscode:`200` with metadata on the new document, :http:statuscode:`400` if the old document has already been replaced by a newer version, or :http:statuscode:`404` if ``DOCUMENT_ID`` is invalid or if the new content is invalid.",
    "return_ex":'''
<Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
  <createdAt>2009-05-04T17:05:33</createdAt>
  <creator id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </creator>
  <suppressedAt>2009-05-06T17:05:33</suppressedAt>
  <suppressor id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </suppressor>
  <replaces id="abe8130e2-ba54-1234-eeef-45a3b6cd9a8e" />
  <original id="abe8130e2-ba54-1234-eeef-45a3b6cd9a8e" />
  <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
  <label>HBA1C reading</label>
  <status>active</status>
  <nevershare>false</nevershare>
  <relatesTo>
    <relation type="http://indivo.org/vocab/documentrels#attachment" count="1" />
    <relation type="http://indivo.org/vocab/documentrels#annotation" count="5" />
  </relatesTo>
  <isRelatedFrom>
    <relation type="http://indivo.org/vocab/documentrels#interpretation" count="1" />
  </isRelatedFrom>
</Document>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"PUT",
    "path":"/records/{RECORD_ID}/documents/{DOCUMENT_ID}/replace/external/{PHA_EMAIL}/{EXTERNAL_ID}",
    "view_func_name":"document_version_by_ext_id",
    "access_doc":"A user app with access to the record, with an id matching the app email in the URL.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'EXTERNAL_ID':'The external identifier of the desired resource',
        'PHA_EMAIL':'The email identifier of the Indivo user app',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        },
    "query_opts":{
        },
    "data_fields":{
        '':'The raw content of the document to create.',
        },
    "description":"Create a new version of a record-specific document and assign it an external id.",
    "return_desc":":http:statuscode:`200` with metadata on the new document, :http:statuscode:`400` if the old document has already been replaced by a newer version, or :http:statuscode:`404` if ``DOCUMENT_ID`` is invalid or if the new content is invalid.",
    "return_ex":'''
<Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
  <createdAt>2009-05-04T17:05:33</createdAt>
  <creator id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </creator>
  <suppressedAt>2009-05-06T17:05:33</suppressedAt>
  <suppressor id="steve@indivo.org" type="account">
    <fullname>Steve Zabak</fullname>
  </suppressor>
  <replaces id="abe8130e2-ba54-1234-eeef-45a3b6cd9a8e" />
  <original id="abe8130e2-ba54-1234-eeef-45a3b6cd9a8e" />
  <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
  <label>HBA1C reading</label>
  <status>active</status>
  <nevershare>false</nevershare>
  <relatesTo>
    <relation type="http://indivo.org/vocab/documentrels#attachment" count="1" />
    <relation type="http://indivo.org/vocab/documentrels#annotation" count="5" />
  </relatesTo>
  <isRelatedFrom>
    <relation type="http://indivo.org/vocab/documentrels#interpretation" count="1" />
  </isRelatedFrom>
</Document>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/records/{RECORD_ID}/documents/{DOCUMENT_ID}/set-status",
    "view_func_name":"document_set_status",
    "access_doc":"A user app with access to the record, or a principal in full control of the record",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        },
    "query_opts":{
        },
    "data_fields":{
        'status':'The new status for the document. Options are ``active``, ``void``, ``archived``.',
        'reason':'The reason for the status change.',
        },
    "description":"Set the status of a record-specific document.",
    "return_desc":":http:statuscode:`200 Success`, :http:statuscode:`400` if *status* or *reason* are missing, or :http:statuscode:`404` if ``DOCUMENT_ID`` is invalid.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/documents/{DOCUMENT_ID}/status-history",
    "view_func_name":"document_status_history",
    "access_doc":"A user app with access to the record, or a principal in full control of the record",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"List all changes to a document's status over time.",
    "return_desc":":http:statuscode:`200` with a the document's status history, or :http:statuscode:`404` if ``DOCUMENT_ID`` is invalid.",
    "return_ex":'''
<DocumentStatusHistory document_id="456">
  <DocumentStatus by="joeuser@indivo.example.org" at="2010-09-03T12:45:12Z" status="archived">
    <reason>no longer relevant</reason>
  </DocumentStatus>

  ...

</DocumentStatusHistory>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/documents/{DOCUMENT_ID}/versions/",
    "view_func_name":"document_versions",
    "access_doc":"A user app with access to the record, or a principal in full control of the record",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'DOCUMENT_ID':'The unique identifier of the Indivo document',
        },
    "query_opts":{
        'status':'The account or document status to filter by.',
        'order_by':'See :ref:`query-operators`.',
        'limit':'See :ref:`query-operators`.',
        'offset':'See :ref:`query-operators`.',
        },
    "data_fields":{
        },
    "description":"Retrieve the versions of a document.",
    "return_desc":":http:statuscode:`200` with a list of document versions, or :http:statuscode:`404` if ``DOCUMENT_ID`` is invalid.",
    "return_ex":'''
<Documents record_id="123" total_document_count="4">
  <Document id="14c81023-c84f-496d-8b8e-9438280441d3" type="" digest="7e9bc09276e0829374fd810f96ed98d544649703db3a9bc231550a0b0e5bcb1c" size="77">
    <createdAt>2009-05-04T17:05:33</createdAt>
    <creator id="steve@indivo.org" type="account">
      <fullname>Steve Zabak</fullname>
    </creator>
    <suppressedAt>2009-05-06T17:05:33</suppressedAt>
    <suppressor id="steve@indivo.org" type="account">
      <fullname>Steve Zabak</fullname>
    </suppressor>
    <original id="14c81023-c84f-496d-8b8e-9438280441d3" />
    <latest id="14c81023-c84f-496d-8b8e-9438280441d3" createdAt="2009-05-05T17:05:33" createdBy="steve@indivo.org" />
    <label>HBA1C reading</label>
    <status>active</status>
    <nevershare>false</nevershare>
    <relatesTo>
      <relation type="http://indivo.org/vocab/documentrels#attachment" count="1" />
      <relation type="http://indivo.org/vocab/documentrels#annotation" count="5" />
    </relatesTo>
    <isRelatedFrom>
      <relation type="http://indivo.org/vocab/documentrels#interpretation" count="1" />
    </isRelatedFrom>
  </Document>

  ...

</Documents>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/records/{RECORD_ID}/inbox/{MESSAGE_ID}",
    "view_func_name":"record_send_message",
    "access_doc":"Any admin app, or a user app with access to the record.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'MESSAGE_ID':'The unique external identifier of the Indivo Message, for idempotency.',
        },
    "query_opts":{
        },
    "data_fields":{
        'body':'The message body. Defaults to ``[no body]``.',
        'body_type':'The formatting for the message body. Options are ``plaintext``, ``markdown``. Defaults to ``plaintext``.',
        'num_attachments':'The number of attachments this message requires. Attachments are uploaded with calls to :http:post:`/records/{RECORD_ID}/inbox/{MESSAGE_ID}/attachments/{ATTACHMENT_NUM}`. Defaults to 0.',
        'severity':'The importance of the message. Options are ``low``, ``medium``, ``high``. Defaults to ``low``.',
        'subject':'The message subject. Defaults to ``[no subject]``.',
        },
    "description":"Send a message to a record.",
    "return_desc":":http:statuscode:`200 Success`, or :http:statuscode:`400` if ``MESSAGE_ID`` was a duplicate. Also triggers notification emails to accounts authorized to view messages for the passed record.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/records/{RECORD_ID}/inbox/{MESSAGE_ID}/attachments/{ATTACHMENT_NUM}",
    "view_func_name":"record_message_attach",
    "access_doc":"Any admin app, or a user app with access to the record.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'ATTACHMENT_NUM':'The 1-indexed number corresponding to the message attachment',
        'MESSAGE_ID':'The unique identifier of the Indivo Message',
        },
    "query_opts":{
        },
    "data_fields":{
        '':'The raw XML attachment data.',
        },
    "description":"Attach a document to an Indivo message.",
    "return_desc":":http:statuscode:`200 Success`, or :http:statuscode:`400` if ``ATTACHMENT_NUM`` has already been uploaded.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/records/{RECORD_ID}/notifications/",
    "view_func_name":"record_notify",
    "access_doc":"Any admin app, or a user app with access to the record.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        },
    "query_opts":{
        },
    "data_fields":{
        'content':'The plaintext content of the notification.',
        'app_url':'A callback url to the app for more information. **OPTIONAL**.',
        'document_id':'The id of the document to which this notification pertains. **OPTIONAL**.',
        },
    "description":"Send a notification about a record to all accounts authorized to be notified.",
    "return_desc":":http:statuscode:`200 Success`, or :http:statuscode:`400` if *content* wasn't passed.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/records/{RECORD_ID}/notify",
    "view_func_name":"record_notify",
    "access_doc":"Any admin app, or a user app with access to the record.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        },
    "query_opts":{
        },
    "data_fields":{
        'content':'The plaintext content of the notification.',
        'app_url':'A callback url to the app for more information. **OPTIONAL**.',
        'document_id':'The id of the document to which this notification pertains. **OPTIONAL**.',
        },
    "description":"Send a notification about a record to all accounts authorized to be notified.",
    "return_desc":":http:statuscode:`200 Success`, or :http:statuscode:`400` if *content* wasn't passed.",
    "return_ex":'''
<ok/>
''',
    "deprecated": ('1.0', 'Use :http:post:`/records/{RECORD_ID}/notifications/` instead.'),
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/owner",
    "view_func_name":"record_get_owner",
    "access_doc":"A principal in full control of the record, or any admin app.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Get the owner of a record.",
    "return_desc":":http:statuscode:`200 Success.`",
    "return_ex":'''
<Account id='joeuser@example.com' />
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/records/{RECORD_ID}/owner",
    "view_func_name":"record_set_owner",
    "access_doc":"Any admin app.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        },
    "query_opts":{
        },
    "data_fields":{
        '':'The email address of the new account owner.',
        },
    "description":"Set the owner of a record.",
    "return_desc":":http:statuscode:`200` with information about the account, or :http:statuscode:`400` if the passed email address is invalid.",
    "return_ex":'''
<Account id="joeuser@indivo.example.org">
  <fullName>Joe User</fullName>
  <contactEmail>joeuser@gmail.com</contactEmail>
  <lastLoginAt>2010-05-04T15:34:23Z</lastLoginAt>
  <totalLoginCount>43</totalLoginCount>
  <failedLoginCount>0</failedLoginCount>
  <state>active</state>
  <lastStateChange>2009-04-03T13:12:12Z</lastStateChange>

  <authSystem name="password" username="joeuser" />
  <authSystem name="hospital_sso" username="Joe_User" />
</Account>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"PUT",
    "path":"/records/{RECORD_ID}/owner",
    "view_func_name":"record_set_owner",
    "access_doc":"Any admin app.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        },
    "query_opts":{
        },
    "data_fields":{
        '':'The email address of the new account owner.',
        },
    "description":"Set the owner of a record.",
    "return_desc":":http:statuscode:`200` with information about the account, or :http:statuscode:`400` if the passed email address is invalid.",
    "return_ex":'''
<Account id="joeuser@indivo.example.org">
  <fullName>Joe User</fullName>
  <contactEmail>joeuser@gmail.com</contactEmail>
  <lastLoginAt>2010-05-04T15:34:23Z</lastLoginAt>
  <totalLoginCount>43</totalLoginCount>
  <failedLoginCount>0</failedLoginCount>
  <state>active</state>
  <lastStateChange>2009-04-03T13:12:12Z</lastStateChange>

  <authSystem name="password" username="joeuser" />
  <authSystem name="hospital_sso" username="Joe_User" />
</Account>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/reports/experimental/ccr",
    "view_func_name":"report_ccr",
    "access_doc":"A user app with access to the record, or a principal in full control of the record",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Export patient data as a Continuity of Care Record (CCR) document.",
    "return_desc":":http:statuscode:`200` with an **EXPERIMENTAL** CCR document.",
    "return_ex":'''
<ContinuityOfCareRecord xmlns="urn:astm-org:CCR">
  <CCRDocumentObjectID>0</CCRDocumentObjectID>
  <Language>
    <Text>ENGLISH</Text>
  </Language>
  <Version>V1.0</Version>
  <DateTime>
    <Type>
      <Text>Create</Text>
      <ObjectAttribute>
        <Attribute>DisplayDate</Attribute>
        <AttributeValue>
          <Value>09/30/10</Value>
        </AttributeValue>
      </ObjectAttribute>
    </Type>
    <ExactDateTime>2010-05-04T15:34:23Z</ExactDateTime>
  </DateTime>
  <Patient>
    <ActorID>123</ActorID>
  </Patient>
  <From>
    <ActorLink/>
  </From>
  <Body>
    <Medications>
      <Medication>
	<CCRDataObjectID>789</CCRDataObjectID>
	<DateTime>
	  <Type>
	    <Text>Dispense date</Text>
	  </Type>
	  <ExactDateTime>2010-05-04T15:34:23Z</ExactDateTime>
	</DateTime>
	<Status>
	  <Text>Active</Text>
	</Status>
	<Product>
	  <ProductName>
	    <Text>Vioxx</Text>
	    <Code>
	      <Value>C1234</Value>
	      <CodingSystem>RxNorm</CodingSystem>
	    </Code>
	  </ProductName>
	  <Strength>
	    <Value>20</Value>
	    <Units>
	      <Unit>mg</Unit>
	    </Units>
	  </Strength>
	</Product>
	<Directions>
          <Direction>
            <Dose>
              <Value>1</Value>
              <Units>
		<Unit>Pills</Unit>
              </Units>
            </Dose>
            <Route>
              <Text>Oral</Text>
            </Route>
            <Frequency>
              <Value>1QR</Value>
            </Frequency>
          </Direction>
	</Directions>
      </Medication>

      ...

    </Medications>
    <Immunizations>
      <Immunization>
        <CCRDataObjectID>567</CCRDataObjectID>
	<DateTime>
          <Type>
            <Text>Start date</Text>
          </Type>
	  <ExactDateTime>2010-05-04T15:34:23Z</ExactDateTime>
	</DateTime>
      <Product>
        <ProductName>
          <Text>Rubella</Text>
          <Code>
            <Value>C1345</Value>
            <CodingSystem>HL7 Vaccines</CodingSystem>
          </Code>
        </ProductName>
      </Product>
      </Immunization>

      ...

    </Immunizations>
    <VitalSigns>

    ...

    </VitalSigns>

    ...

  </Body>
  <Actors>
  </Actors>
</ContinuityOfCareRecord>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/reports/minimal/equipment/",
    "view_func_name":"equipment_list",
    "access_doc":"A user app with access to the record, or a principal in full control of the record",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        },
    "query_opts":{
        'status':'The account or document status to filter by',
        '{FIELD}':'See :ref:`query-operators`, :ref:`valid-query-fields`',
        'order_by':'See :ref:`query-operators`',
        'aggregate_by':'See :ref:`query-operators`',
        'date_range':'See :ref:`query-operators`',
        'date_group':'See :ref:`query-operators`',
        'group_by':'See :ref:`query-operators`',
        'limit':'See :ref:`query-operators`',
        'offset':'See :ref:`query-operators`',
        },
    "data_fields":{
        },
    "description":"List the equipment data for a given record.",
    "return_desc":":http:statuscode:`200` with a list of equipment, or :http:statuscode:`400` if any invalid query parameters were passed.",
    "return_ex":'''
<Reports xmlns="http://indivo.org/vocab/xml/documents#">
  <Summary total_document_count="2" limit="100" offset="0" order_by="date_measured" />
  <QueryParams>
    <DateRange value="date_measured*1995-03-10T00:00:00Z*" />
    <Filters>
      <Filter name="equipment_name" value="pacemaker"/>
    </Filters>
  </QueryParams>
  <Report>
    <Meta>
      <Document id="261ca370-927f-41af-b001-7b615c7a468e" type="http://indivo.org/vocab/xml/documents#Models" size="1653" digest="0799971784e5a2d199cd6585415a8cd57f7bf9e4f8c8f74ef67a1009a1481cd6" record_id="">
        <createdAt>2011-05-02T17:48:13Z</createdAt>
        <creator id="mymail@mail.ma" type="Account">
          <fullname>full name</fullname>
        </creator>
        <original id="261ca370-927f-41af-b001-7b615c7a468e"/>
        <label>testing</label>
        <status>active</status>
        <nevershare>false</nevershare>
      </Document>
    </Meta>
    <Item>
      <Equipment xmlns="http://indivo.org/vocab/xml/documents#">
        <dateStarted>2009-02-05</dateStarted>
        <dateStopped>2010-06-12</dateStopped>
        <type>cardiac</type>
        <name>Pacemaker</name>
        <vendor>Acme Medical Devices</vendor>
        <id>167-ABC-23</id>
        <description>it works</description>
        <specification>blah blah blah</specification>
      </Equipment>
    </Item>
  </Report>

  ...

</Reports>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/reports/minimal/measurements/{LAB_CODE}/",
    "view_func_name":"measurement_list",
    "access_doc":"A user app with access to the record, or a principal in full control of the record",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'LAB_CODE':'The identifier corresponding to the measurement being made.',
        },
    "query_opts":{
        'status':'The account or document status to filter by',
        '{FIELD}':'See :ref:`query-operators`, :ref:`valid-query-fields`',
        'order_by':'See :ref:`query-operators`',
        'aggregate_by':'See :ref:`query-operators`',
        'date_range':'See :ref:`query-operators`',
        'date_group':'See :ref:`query-operators`',
        'group_by':'See :ref:`query-operators`',
        'limit':'See :ref:`query-operators`',
        'offset':'See :ref:`query-operators`',
        },
    "data_fields":{
        },
    "description":"List the measurement data for a given record.",
    "return_desc":":http:statuscode:`200` with a list of measurements, or :http:statuscode:`400` if any invalid query parameters were passed.",
    "return_ex":'''
<Reports xmlns="http://indivo.org/vocab/xml/documents#">
  <Summary total_document_count="2" limit="100" offset="0" order_by="date_measured" />
  <QueryParams>
    <DateRange value="date_measured*1995-03-10T00:00:00Z*" />
    <Filters>
      <Filter name="lab_type" value="hematology"/>
    </Filters>
  </QueryParams>
  <Report>
    <Meta>
      <Document id="261ca370-927f-41af-b001-7b615c7a468e" type="http://indivo.org/vocab/xml/documents#Measurement" size="1653" digest="0799971784e5a2d199cd6585415a8cd57f7bf9e4f8c8f74ef67a1009a1481cd6" record_id="">
        <createdAt>2011-05-02T17:48:13Z</createdAt>
        <creator id="mymail@mail.ma" type="Account">
          <fullname>full name</fullname>
        </creator>
        <original id="261ca370-927f-41af-b001-7b615c7a468e"/>
        <label>testing</label>
        <status>active</status>
        <nevershare>false</nevershare>
      </Document>
    </Meta>
    <Item>
      <Measurement id="1234" value="120" type="blood pressure systolic" datetime="2011-03-02T00:00:00Z" unit="mmHg" source_doc="3456" />
    </Item>
  </Report>

  ...

</Reports>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/reports/minimal/procedures/",
    "view_func_name":"procedure_list",
    "access_doc":"A user app with access to the record, or a principal in full control of the record",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        },
    "query_opts":{
        'status':'The account or document status to filter by',
        '{FIELD}':'See :ref:`query-operators`, :ref:`valid-query-fields`',
        'order_by':'See :ref:`query-operators`',
        'aggregate_by':'See :ref:`query-operators`',
        'date_range':'See :ref:`query-operators`',
        'date_group':'See :ref:`query-operators`',
        'group_by':'See :ref:`query-operators`',
        'limit':'See :ref:`query-operators`',
        'offset':'See :ref:`query-operators`',
        },
    "data_fields":{
        },
    "description":"List the procedure data for a given record.",
    "return_desc":":http:statuscode:`200` with a list of procedures, or :http:statuscode:`400` if any invalid query parameters were passed.",
    "return_ex":'''
<Reports xmlns="http://indivo.org/vocab/xml/documents#">
  <Summary total_document_count="2" limit="100" offset="0" order_by="date_measured" />
  <QueryParams>
    <DateRange value="date_measured*1995-03-10T00:00:00Z*" />
    <Filters>
    </Filters>
  </QueryParams>
  <Report>
    <Meta>
      <Document id="261ca370-927f-41af-b001-7b615c7a468e" type="http://indivo.org/vocab/xml/documents#Procedure" size="1653" digest="0799971784e5a2d199cd6585415a8cd57f7bf9e4f8c8f74ef67a1009a1481cd6" record_id="">
        <createdAt>2011-05-02T17:48:13Z</createdAt>
        <creator id="mymail@mail.ma" type="Account">
          <fullname>full name</fullname>
        </creator>
        <original id="261ca370-927f-41af-b001-7b615c7a468e"/>
        <label>testing</label>
        <status>active</status>
        <nevershare>false</nevershare>
      </Document>
    </Meta>
    <Item>
      <Procedure xmlns="http://indivo.org/vocab/xml/documents#">
        <datePerformed>2009-05-16T12:00:00</datePerformed>
        <name type="http://codes.indivo.org/procedures#" value="85" abbrev="append">Appendectomy</name>
        <provider>
          <name>Kenneth Mandl</name>
          <institution>Children's Hospital Boston</institution>
        </provider>
      </Procedure>
    </Item>
  </Report>

  ...

</Reports>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/reports/minimal/simple-clinical-notes/",
    "view_func_name":"simple_clinical_notes_list",
    "access_doc":"A user app with access to the record, or a principal in full control of the record",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        },
    "query_opts":{
        'status':'The account or document status to filter by',
        '{FIELD}':'See :ref:`query-operators`, :ref:`valid-query-fields`',
        'order_by':'See :ref:`query-operators`',
        'aggregate_by':'See :ref:`query-operators`',
        'date_range':'See :ref:`query-operators`',
        'date_group':'See :ref:`query-operators`',
        'group_by':'See :ref:`query-operators`',
        'limit':'See :ref:`query-operators`',
        'offset':'See :ref:`query-operators`',
        },
    "data_fields":{
        },
    "description":"List the simple_clinical_notes data for a given record.",
    "return_desc":":http:statuscode:`200` with a list of notes, or :http:statuscode:`400` if any invalid query parameters were passed.",
    "return_ex":'''
<Reports xmlns="http://indivo.org/vocab/xml/documents#">
  <Summary total_document_count="2" limit="100" offset="0" order_by="date_measured" />
  <QueryParams>
    <DateRange value="date_measured*1995-03-10T00:00:00Z*" />
    <Filters>
    </Filters>
  </QueryParams>
  <Report>
    <Meta>
      <Document id="261ca370-927f-41af-b001-7b615c7a468e" type="http://indivo.org/vocab/xml/documents#SimpleClinicalNote" size="1653" digest="0799971784e5a2d199cd6585415a8cd57f7bf9e4f8c8f74ef67a1009a1481cd6" record_id="">
        <createdAt>2011-05-02T17:48:13Z</createdAt>
        <creator id="mymail@mail.ma" type="Account">
          <fullname>full name</fullname>
        </creator>
        <original id="261ca370-927f-41af-b001-7b615c7a468e"/>
        <label>testing</label>
        <status>active</status>
        <nevershare>false</nevershare>
      </Document>
    </Meta>
    <Item>
      <SimpleClinicalNote xmlns="http://indivo.org/vocab/xml/documents#">
        <dateOfVisit>2010-02-02T12:00:00Z</dateOfVisit>
        <finalizedAt>2010-02-03T13:12:00Z</finalizedAt>
        <visitType type="http://codes.indivo.org/visit-types#" value="acute">Acute Care</visitType>
        <visitLocation>Longfellow Medical</visitLocation>
        <specialty type="http://codes.indivo.org/specialties#" value="hem-onc">Hematology/Oncology</specialty>

        <signature>
          <at>2010-02-03T13:12:00Z</at>    
          <provider>
            <name>Kenneth Mandl</name>
            <institution>Children's Hospital Boston</institution>
          </provider>
        </signature>

        <signature>
          <provider>
            <name>Isaac Kohane</name>
            <institution>Children's Hospital Boston</institution>
          </provider>
        </signature>

        <chiefComplaint>stomach ache</chiefComplaint>
        <content>Patient presents with ... </content>
      </SimpleClinicalNote>
    </Item>
  </Report>

  ...

</Reports>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/reports/{DATA_MODEL}/",
    "view_func_name":"generic_list",
    "access_doc":"A user app with access to the record, or a principal in full control of the record",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'DATA_MODEL':'The name of the data model to report on',
        },
    "query_opts":{
        'status':'The account or document status to filter by',
        '{FIELD}':'See :ref:`query-operators`, :ref:`valid-query-fields`',
        'order_by':'See :ref:`query-operators`',
        'aggregate_by':'See :ref:`query-operators`',
        'response_format':'See :ref:`response_formats`',
        'date_range':'See :ref:`query-operators`',
        'date_group':'See :ref:`query-operators`',
        'group_by':'See :ref:`query-operators`',
        'limit':'See :ref:`query-operators`',
        'offset':'See :ref:`query-operators`',
        },
    "data_fields":{
        },
    "description":"List the Model data for a given record.",
    "return_desc":":http:statuscode:`200` with a list of DATA_MODELs, or :http:statuscode:`400` if any invalid query parameters were passed.",
    "return_ex":'''
  
    
SDMJ Example:

   {
    "__modelname__": "TestMedication",
    "__documentid__": "b1d83191-6edd-4aad-be4e-63117cd4c660",
    "name": "ibuprofen",
    "date_started": "2010-10-01T00:00:00Z",
    "date_stopped": "2010-10-31T00:00:00Z",
    "brand_name": "Advil",
    "prescription": {
        "__modelname__": "TestPrescription",
        "__documentid__": "b1d83191-6edd-4aad-be4e-63117cd4c660",
        "prescribed_by_name": "Kenneth D. Mandl",
        "prescribed_by_institution": "Children's Hospital Boston",
        "prescribed_on": "2010-09-30T00:00:00Z",
        "prescribed_stop_on": "2010-10-31T00:00:00Z"
    },
    "fills": [
        {
            "__modelname__": "TestFill",
            "__documentid__": "b1d83191-6edd-4aad-be4e-63117cd4c660",
            "date_filled": "2010-10-01T00:00:00Z",
            "supply_days": "15",
            "filled_at_name": "CVS"
        },
        {
            "__modelname__": "TestFill",
            "__documentid__": "b1d83191-6edd-4aad-be4e-63117cd4c660",
            "date_filled": "2010-10-16T00:00:00Z",
            "supply_days": "15",
            "filled_at_name": "CVS"
        }
    ]
}

SDMX Example:

<Models>
  <Model name="TestMedication" documentId="b1d83191-6edd-4aad-be4e-63117cd4c660">
    <Field name="date_started">2010-10-01T00:00:00Z</Field>
    <Field name="name">ibuprofen</Field>
    <Field name="brand_name">Advil</Field>
    <Field name="date_stopped">2010-10-31T00:00:00Z</Field>
    <Field name="prescription">
      <Model name="TestPrescription"  documentId="b1d83191-6edd-4aad-be4e-63117cd4c660">
        <Field name="prescribed_by_name">Kenneth D. Mandl</Field>
        <Field name="prescribed_by_institution">Children's Hospital Boston</Field>
        <Field name="prescribed_on">2010-09-30T00:00:00Z</Field>
        <Field name="prescribed_stop_on">2010-10-31T00:00:00Z</Field>
      </Model>
    </Field>
    <Field name="fills">
      <Models>
        <Model name="TestFill"  documentId="b1d83191-6edd-4aad-be4e-63117cd4c660">
          <Field name="date_filled">2010-10-01T00:00:00Z</Field>
          <Field name="supply_days">15</Field>
          <Field name="filled_at_name">CVS</Field>
        </Model>
        <Model name="TestFill"  documentId="b1d83191-6edd-4aad-be4e-63117cd4c660">
          <Field name="date_filled">2010-10-16T00:00:00Z</Field>
          <Field name="supply_days">15</Field>
          <Field name="filled_at_name">CVS</Field>
        </Model>
      </Models>
    </Field>
  </Model>
</Models>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/shares/",
    "view_func_name":"record_shares",
    "access_doc":"The owner of the record, or any admin app.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"List the shares of a record.",
    "return_desc":":http:statuscode:`200` with a list of shares.",
    "return_ex":'''
<Shares record="123">
  <Share id="678" account="joeuser@example.com" />
  <Share id="789" pha="problems@apps.indivo.org" />

  ...

</Shares>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/records/{RECORD_ID}/shares/",
    "view_func_name":"record_share_add",
    "access_doc":"The owner of the record, or any admin app.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        },
    "query_opts":{
        },
    "data_fields":{
        'account_id':'The email address of the recipient account. **REQUIRED**.',
        'role_label':'A label for the share, usually the relationship between the owner and the recipient (i.e. ``Guardian``). **OPTIONAL**.',
        },
    "description":"Fully share a record with another account.",
    "return_desc":":http:statuscode:`200 Success`, :http:statuscode:`400` if *account_id* was not passed, or :http:statuscode:`404` if the passed *account_id* was invalid.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"DELETE",
    "path":"/records/{RECORD_ID}/shares/{OTHER_ACCOUNT_ID}",
    "view_func_name":"record_share_delete",
    "access_doc":"The owner of the record, or any admin app.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'OTHER_ACCOUNT_ID':'The email identifier of the Indivo account to share with',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Undo a full record share with an account.",
    "return_desc":":http:statuscode:`200 Success`, or :http:statuscode:`404` if ``OTHER_ACCOUNT_ID`` is invalid.",
    "return_ex":'''
<ok/>
''',
    "deprecated": None,
    "added": None,
    "changed": None,

},
{
    "method":"POST",
    "path":"/records/{RECORD_ID}/shares/{OTHER_ACCOUNT_ID}/delete",
    "view_func_name":"record_share_delete",
    "access_doc":"The owner of the record, or any admin app.",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'OTHER_ACCOUNT_ID':'The email identifier of the Indivo account to share with',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Undo a full record share with an account.",
    "return_desc":":http:statuscode:`200 Success`, or :http:statuscode:`404` if ``OTHER_ACCOUNT_ID`` is invalid.",
    "return_ex":'''
<ok/>
''',
    "deprecated": ('1.0', 'Use :http:delete:`/records/{RECORD_ID}/shares/{OTHER_ACCOUNT_ID}` instead.'),
    "added": None,
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/{MODEL_NAME}/",
    "view_func_name":"smart_generic",
    "access_doc":"A user app with access to the record, or a principal in full control of the record",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'MODEL_NAME':'The name of the SMART data_model to retrieve (i.e. ``problems``). Options are defined by the `SMART API <http://wiki.chip.org/smart-project/index.php/Developers_Documentation:_REST_API#Record_Calls>`_.',
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"SMART-compatible alias for the generic list view: returns data_models serialized as SMART RDF.",
    "return_desc":":http:statuscode:`200` with SMART RDF/XML for all items matching **MODEL_NAME** belonging to the record.",
    "return_ex":'''
<?xml version="1.0" encoding="UTF-8"?>
<rdf:RDF
   xmlns:dcterms="http://purl.org/dc/terms/"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:sp="http://smartplatforms.org/terms#"
>
  <rdf:Description rdf:about="http://indivo.org/records/8f5fb6c3-e065-41db-9be2-0c1fa4a97e2c/problems/03426213-a50b-4df8-8585-e951fad99898">
    <sp:endDate rdf:datatype="http://www.w3.org/2001/XMLSchema#dateTime">2010-09-13T00:00:00</sp:endDate>
    <sp:problemName rdf:nodeID="_93f4ebe0-e5dd-4b45-80c1-a1b118871457"/>
    <sp:startDate rdf:datatype="http://www.w3.org/2001/XMLSchema#dateTime">2007-06-02T00:00:00</sp:startDate>
    <sp:belongsTo rdf:resource="http://indivo.org/records/8f5fb6c3-e065-41db-9be2-0c1fa4a97e2c"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#Problem"/>
  </rdf:Description>
  <rdf:Description rdf:nodeID="_8e568a92-ab2c-4400-902f-5aa5685b0bdf">
    <dcterms:title>Hyperlipidemia</dcterms:title>
    <sp:code rdf:resource="http://purl.bioontology.org/ontology/SNOMEDCT/55822004"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#CodedValue"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://indivo.org/records/8f5fb6c3-e065-41db-9be2-0c1fa4a97e2c/problems/651c297e-364c-4df8-b22d-280fd805d1fa">
    <sp:endDate rdf:datatype="http://www.w3.org/2001/XMLSchema#dateTime">2010-09-13T00:00:00</sp:endDate>
    <sp:problemName rdf:nodeID="_ec4d16cf-1f3d-4463-9872-d4494cf44327"/>
    <sp:startDate rdf:datatype="http://www.w3.org/2001/XMLSchema#dateTime">2007-01-22T00:00:00</sp:startDate>
    <sp:belongsTo rdf:resource="http://indivo.org/records/8f5fb6c3-e065-41db-9be2-0c1fa4a97e2c"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#Problem"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://purl.bioontology.org/ontology/SNOMEDCT/165084003">
    <dcterms:title>Clinical finding</dcterms:title>
    <sp:system>http://purl.bioontology.org/ontology/SNOMEDCT/</sp:system>
    <dcterms:identifier>165084003</dcterms:identifier>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#Code"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms/codes/SNOMED"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://indivo.org/records/8f5fb6c3-e065-41db-9be2-0c1fa4a97e2c/problems/5fb3e8e1-e65f-42f3-bc52-cd4040dbeca8">
    <sp:endDate rdf:datatype="http://www.w3.org/2001/XMLSchema#dateTime">2010-09-13T00:00:00</sp:endDate>
    <sp:problemName rdf:nodeID="_46c3aa8e-bc89-4012-8aa2-f1aadee29aac"/>
    <sp:startDate rdf:datatype="http://www.w3.org/2001/XMLSchema#dateTime">2007-09-26T00:00:00</sp:startDate>
    <sp:belongsTo rdf:resource="http://indivo.org/records/8f5fb6c3-e065-41db-9be2-0c1fa4a97e2c"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#Problem"/>
  </rdf:Description>
  <rdf:Description rdf:nodeID="_93f4ebe0-e5dd-4b45-80c1-a1b118871457">
    <dcterms:title>Chronic non-suppurative otitis media</dcterms:title>
    <sp:code rdf:resource="http://purl.bioontology.org/ontology/SNOMEDCT/21186006"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#CodedValue"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://purl.bioontology.org/ontology/SNOMEDCT/82271004">
    <dcterms:title>Injury of head</dcterms:title>
    <sp:system>http://purl.bioontology.org/ontology/SNOMEDCT/</sp:system>
    <dcterms:identifier>82271004</dcterms:identifier>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#Code"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms/codes/SNOMED"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://indivo.org/records/8f5fb6c3-e065-41db-9be2-0c1fa4a97e2c/problems/8e474cad-c6b2-46d9-853d-10a02d84ed16">
    <sp:endDate rdf:datatype="http://www.w3.org/2001/XMLSchema#dateTime">2010-09-13T00:00:00</sp:endDate>
    <sp:problemName rdf:nodeID="_5602c2a0-875e-48ee-b6fb-350a32aeb39c"/>
    <sp:startDate rdf:datatype="http://www.w3.org/2001/XMLSchema#dateTime">2007-01-28T00:00:00</sp:startDate>
    <sp:belongsTo rdf:resource="http://indivo.org/records/8f5fb6c3-e065-41db-9be2-0c1fa4a97e2c"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#Problem"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://indivo.org/records/8f5fb6c3-e065-41db-9be2-0c1fa4a97e2c">
    <rdf:type rdf:resource="http://smartplatforms.org/terms#MedicalRecord"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://purl.bioontology.org/ontology/SNOMEDCT/399963005">
    <dcterms:title>Abrasion or friction burn of other, multiple, and unspecified sites, without mention of infection</dcterms:title>
    <sp:system>http://purl.bioontology.org/ontology/SNOMEDCT/</sp:system>
    <dcterms:identifier>399963005</dcterms:identifier>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#Code"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms/codes/SNOMED"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://purl.bioontology.org/ontology/SNOMEDCT/21186006">
    <dcterms:title>Chronic non-suppurative otitis media</dcterms:title>
    <sp:system>http://purl.bioontology.org/ontology/SNOMEDCT/</sp:system>
    <dcterms:identifier>21186006</dcterms:identifier>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#Code"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms/codes/SNOMED"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://indivo.org/records/8f5fb6c3-e065-41db-9be2-0c1fa4a97e2c/problems/7c885267-4a2b-49e8-bee3-c3aaef1512e3">
    <sp:endDate rdf:datatype="http://www.w3.org/2001/XMLSchema#dateTime">2010-09-13T00:00:00</sp:endDate>
    <sp:problemName rdf:nodeID="_8e568a92-ab2c-4400-902f-5aa5685b0bdf"/>
    <sp:startDate rdf:datatype="http://www.w3.org/2001/XMLSchema#dateTime">2004-09-20T00:00:00</sp:startDate>
    <sp:belongsTo rdf:resource="http://indivo.org/records/8f5fb6c3-e065-41db-9be2-0c1fa4a97e2c"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#Problem"/>
  </rdf:Description>
  <rdf:Description rdf:nodeID="_46c3aa8e-bc89-4012-8aa2-f1aadee29aac">
    <dcterms:title>Acute bronchitis</dcterms:title>
    <sp:code rdf:resource="http://purl.bioontology.org/ontology/SNOMEDCT/10509002"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#CodedValue"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://purl.bioontology.org/ontology/SNOMEDCT/34649000">
    <dcterms:title>Closed fracture of malar AND/OR maxillary bones</dcterms:title>
    <sp:system>http://purl.bioontology.org/ontology/SNOMEDCT/</sp:system>
    <dcterms:identifier>34649000</dcterms:identifier>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#Code"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms/codes/SNOMED"/>
  </rdf:Description>
  <rdf:Description rdf:nodeID="_5602c2a0-875e-48ee-b6fb-350a32aeb39c">
    <dcterms:title>Closed fracture of malar AND/OR maxillary bones</dcterms:title>
    <sp:code rdf:resource="http://purl.bioontology.org/ontology/SNOMEDCT/34649000"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#CodedValue"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://indivo.org/records/8f5fb6c3-e065-41db-9be2-0c1fa4a97e2c/problems/c9708111-36d1-4255-84bc-6c4819864e00">
    <sp:endDate rdf:datatype="http://www.w3.org/2001/XMLSchema#dateTime">2010-09-13T00:00:00</sp:endDate>
    <sp:problemName rdf:nodeID="_f60a3485-ba2c-4f11-9e73-2af6b0621904"/>
    <sp:startDate rdf:datatype="http://www.w3.org/2001/XMLSchema#dateTime">2007-01-22T00:00:00</sp:startDate>
    <sp:belongsTo rdf:resource="http://indivo.org/records/8f5fb6c3-e065-41db-9be2-0c1fa4a97e2c"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#Problem"/>
  </rdf:Description>
  <rdf:Description rdf:nodeID="_f0fde196-8295-4cd6-b2ee-b08e39832e63">
    <dcterms:title>Clinical finding</dcterms:title>
    <sp:code rdf:resource="http://purl.bioontology.org/ontology/SNOMEDCT/165084003"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#CodedValue"/>
  </rdf:Description>
  <rdf:Description rdf:nodeID="_f60a3485-ba2c-4f11-9e73-2af6b0621904">
    <dcterms:title>Injury of head</dcterms:title>
    <sp:code rdf:resource="http://purl.bioontology.org/ontology/SNOMEDCT/82271004"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#CodedValue"/>
  </rdf:Description>
  <rdf:Description rdf:nodeID="_ec4d16cf-1f3d-4463-9872-d4494cf44327">
    <dcterms:title>Abrasion or friction burn of other, multiple, and unspecified sites, without mention of infection</dcterms:title>
    <sp:code rdf:resource="http://purl.bioontology.org/ontology/SNOMEDCT/399963005"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#CodedValue"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://purl.bioontology.org/ontology/SNOMEDCT/10509002">
    <dcterms:title>Acute bronchitis</dcterms:title>
    <sp:system>http://purl.bioontology.org/ontology/SNOMEDCT/</sp:system>
    <dcterms:identifier>10509002</dcterms:identifier>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#Code"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms/codes/SNOMED"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://indivo.org/records/8f5fb6c3-e065-41db-9be2-0c1fa4a97e2c/problems/bbd612b9-3a47-4d62-b913-5cab6d8cc8cf">
    <sp:endDate rdf:datatype="http://www.w3.org/2001/XMLSchema#dateTime">2010-09-13T00:00:00</sp:endDate>
    <sp:problemName rdf:nodeID="_f0fde196-8295-4cd6-b2ee-b08e39832e63"/>
    <sp:startDate rdf:datatype="http://www.w3.org/2001/XMLSchema#dateTime">2004-09-20T00:00:00</sp:startDate>
    <sp:belongsTo rdf:resource="http://indivo.org/records/8f5fb6c3-e065-41db-9be2-0c1fa4a97e2c"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#Problem"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://purl.bioontology.org/ontology/SNOMEDCT/55822004">
    <dcterms:title>Hyperlipidemia</dcterms:title>
    <sp:system>http://purl.bioontology.org/ontology/SNOMEDCT/</sp:system>
    <dcterms:identifier>55822004</dcterms:identifier>
    <rdf:type rdf:resource="http://smartplatforms.org/terms#Code"/>
    <rdf:type rdf:resource="http://smartplatforms.org/terms/codes/SNOMED"/>
  </rdf:Description>
</rdf:RDF>
''',
    "deprecated": None,
    "added": ('2.0.0', ''),
    "changed": None,

},
{
    "method":"GET",
    "path":"/records/{RECORD_ID}/{MODEL_NAME}/{MODEL_ID}",
    "view_func_name":"smart_generic_instance",
    "access_doc":"A user app with access to the record, or a principal in full control of the record",
    "url_params":{
        'RECORD_ID':'The id string associated with the Indivo record',
        'MODEL_NAME':'The name of the SMART data model to retrieve (i.e. ``problems``). Options are defined by the `SMART API <http://wiki.chip.org/smart-project/index.php/Developers_Documentation:_REST_API#Record_Calls>`_.',
        'MODEL_ID':'The id of the SMART data_model to retrieve',        
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Retrieve a specific instance of a SMART model.",
    "return_desc":":http:statuscode:`200` with SMART RDF/XML for the item matching **MODEL_NAME** and **MODEL_ID** belonging to the record.",
    "return_ex":'''
<?xml version="1.0" encoding="UTF-8"?>
<rdf:RDF
xmlns:dcterms="http://purl.org/dc/terms/"
xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
xmlns:sp="http://smartplatforms.org/terms#"
xmlns:v="http://www.w3.org/2006/vcard/ns#"
>
    <rdf:Description rdf:about="http://smartplatforms.org/terms/codes/LabResultInterpretation#normal">
        <sp:system>http://smartplatforms.org/terms/codes/LabResultInterpretation#</sp:system>
        <rdf:type rdf:resource="http://smartplatforms.org/terms/codes/LabResultInterpretation"/>
        <rdf:type rdf:resource="http://smartplatforms.org/terms#Code"/>
        <dcterms:title>Normal</dcterms:title>
        <dcterms:identifier>normal</dcterms:identifier>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_16d04766-09ab-4a14-847b-c2cc2aa90544">
        <sp:unit>mEq/L</sp:unit>
        <rdf:type rdf:resource="http://smartplatforms.org/terms#ValueAndUnit"/>
        <sp:value>120</sp:value>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_dc97d85d-c1fd-4996-980a-f2b37195c00a">
        <rdf:type rdf:resource="http://smartplatforms.org/terms#CodedValue"/>
        <dcterms:title>Serum Sodium</dcterms:title>
        <sp:code rdf:resource="http://purl.bioontology.org/ontology/LNC/2951-2"/>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_83b7740f-b37b-40be-8d78-99e80de40790">
        <sp:person rdf:nodeID="_fb3f9793-c486-40af-8be1-54b8105355c9"/>
        <sp:role>Lab Specialist</sp:role>
        <sp:organization rdf:nodeID="_679ad47e-94ca-4dc6-96ed-168ca03610b8"/>
        <rdf:type rdf:resource="http://smartplatforms.org/terms#Participant"/>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_372b5eab-eb4d-4d1f-b131-f6f7a8d82d7f">
        <sp:maximum rdf:nodeID="_ce2e6286-ba4a-4c96-b686-3896189e468e"/>
        <sp:minimum rdf:nodeID="_ce2e6286-ba4a-4c96-b686-3896189e468e"/>
        <rdf:type rdf:resource="http://smartplatforms.org/terms#ValueRange"/>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_ce2e6286-ba4a-4c96-b686-3896189e468e">
        <sp:unit>mEq/L</sp:unit>
        <rdf:type rdf:resource="http://smartplatforms.org/terms#ValueAndUnit"/>
        <sp:value>135</sp:value>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_716ae160-84dd-4f9e-b035-bd3b26b625dd">
        <sp:unit>mEq/L</sp:unit>
        <rdf:type rdf:resource="http://smartplatforms.org/terms#ValueAndUnit"/>
        <sp:value>140</sp:value>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_6fa51a50-1bdc-43b9-8be3-cbe828fab220">
        <sp:normalRange rdf:nodeID="_372b5eab-eb4d-4d1f-b131-f6f7a8d82d7f"/>
        <sp:nonCriticalRange rdf:nodeID="_e60921df-5c19-4a7f-b0c3-acaf46ff81d2"/>
        <sp:valueAndUnit rdf:nodeID="_716ae160-84dd-4f9e-b035-bd3b26b625dd"/>
        <rdf:type rdf:resource="http://smartplatforms.org/terms#QuantitativeResult"/>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_7e185aa4-7394-4cce-b107-d3a2ef01318c">
        <rdf:type rdf:resource="http://smartplatforms.org/terms#CodedValue"/>
        <dcterms:title>Final results: complete and verified</dcterms:title>
        <sp:code rdf:resource="http://smartplatforms.org/terms/codes/LabStatus#final"/>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_c2141794-697e-4917-8cb2-eefc7d612f1a">
        <rdf:type rdf:resource="http://smartplatforms.org/terms#CodedValue"/>
        <dcterms:title>Normal</dcterms:title>
        <sp:code rdf:resource="http://smartplatforms.org/terms/codes/LabResultInterpretation#normal"/>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_679ad47e-94ca-4dc6-96ed-168ca03610b8">
        <v:organization-name>City Lab</v:organization-name>
        <rdf:type rdf:resource="http://smartplatforms.org/terms#Organization"/>
        <v:adr rdf:nodeID="_660a15ce-8650-4c91-ad1d-cdee3015ea97"/>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_fb3f9793-c486-40af-8be1-54b8105355c9">
        <rdf:type rdf:resource="http://smartplatforms.org/terms#Person"/>
        <v:n rdf:nodeID="_0ac2cdea-f2b3-44c6-b703-284a757111d8"/>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_660a15ce-8650-4c91-ad1d-cdee3015ea97">
        <v:postal-code>11111</v:postal-code>
        <v:street-address>20 Elm St</v:street-address>
        <v:region>MA</v:region>
        <rdf:type rdf:resource="http://www.w3.org/2006/vcard/ns#Address"/>
        <v:locality>Springfield</v:locality>
        <v:country>USA</v:country>
    </rdf:Description>
    <rdf:Description rdf:about="http://purl.bioontology.org/ontology/LNC/2951-2">
        <sp:system>http://purl.bioontology.org/ontology/LNC/</sp:system>
        <rdf:type rdf:resource="http://smartplatforms.org/terms/codes/LOINC"/>
        <rdf:type rdf:resource="http://smartplatforms.org/terms#Code"/>
        <dcterms:title>Serum Sodium</dcterms:title>
        <dcterms:identifier>2951-2</dcterms:identifier>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_d8aacfc9-e1f0-4702-8f8e-c1846c5c214a">
        <sp:unit>mEq/L</sp:unit>
        <rdf:type rdf:resource="http://smartplatforms.org/terms#ValueAndUnit"/>
        <sp:value>145</sp:value>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_0ac2cdea-f2b3-44c6-b703-284a757111d8">
        <v:family-name>Finnialispi</v:family-name>
        <rdf:type rdf:resource="http://www.w3.org/2006/vcard/ns#Name"/>
        <v:given-name>Tad</v:given-name>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_e60921df-5c19-4a7f-b0c3-acaf46ff81d2">
        <sp:maximum rdf:nodeID="_16d04766-09ab-4a14-847b-c2cc2aa90544"/>
        <sp:minimum rdf:nodeID="_16d04766-09ab-4a14-847b-c2cc2aa90544"/>
        <rdf:type rdf:resource="http://smartplatforms.org/terms#ValueRange"/>
    </rdf:Description>
    <rdf:Description rdf:about="http://indivo.org/records/f48030f2-5ed6-4fc0-97b2-a925d7d88d94/lab_results/d2ed9b5e-3eab-4cae-a35c-f5d8ce4c9fff">
        <sp:abnormalInterpretation rdf:nodeID="_c2141794-697e-4917-8cb2-eefc7d612f1a"/>
        <sp:notes>Blood sample appears to have hemolyzed</sp:notes>
        <sp:belongsTo rdf:resource="http://indivo.org/records/f48030f2-5ed6-4fc0-97b2-a925d7d88d94"/>
        <rdf:type rdf:resource="http://smartplatforms.org/terms#LabResult"/>
        <sp:quantitativeResult rdf:nodeID="_6fa51a50-1bdc-43b9-8be3-cbe828fab220"/>
        <sp:labName rdf:nodeID="_dc97d85d-c1fd-4996-980a-f2b37195c00a"/>
        <sp:accessionNumber>AC09205823577</sp:accessionNumber>
        <sp:labStatus rdf:nodeID="_7e185aa4-7394-4cce-b107-d3a2ef01318c"/>
        <sp:specimenCollected rdf:nodeID="_0e2687ff-7b32-430e-b04e-d21f334918e4"/>
    </rdf:Description>
    <rdf:Description rdf:about="http://smartplatforms.org/terms/codes/LabStatus#final">
        <sp:system>http://smartplatforms.org/terms/codes/LabStatus#</sp:system>
        <rdf:type rdf:resource="http://smartplatforms.org/terms#Code"/>
        <rdf:type rdf:resource="http://smartplatforms.org/terms/codes/LabResultStatus"/>
        <dcterms:title>Final results: complete and verified</dcterms:title>
        <dcterms:identifier>final</dcterms:identifier>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_0e2687ff-7b32-430e-b04e-d21f334918e4">
        <sp:startDate rdf:datatype="http://www.w3.org/2001/XMLSchema#dateTime">2010-12-27T17:00:00</sp:startDate>
        <sp:participant rdf:nodeID="_83b7740f-b37b-40be-8d78-99e80de40790"/>
        <rdf:type rdf:resource="http://smartplatforms.org/terms#Attribution"/>
    </rdf:Description>
    <rdf:Description rdf:nodeID="_b5de9335-f855-413c-8544-c80982421244">
        <sp:unit>mEq/L</sp:unit>
        <rdf:type rdf:resource="http://smartplatforms.org/terms#ValueAndUnit"/>
        <sp:value>155</sp:value>
    </rdf:Description>
</rdf:RDF>
''',
    "deprecated": None,
    "added": ('2.1.0', ''),
    "changed": None,

},
{
    "method":"GET",
    "path":"/version",
    "view_func_name":"get_version",
    "access_doc":"Any principal in Indivo.",
    "url_params":{
        },
    "query_opts":{
        },
    "data_fields":{
        },
    "description":"Return the current version of Indivo.",
    "return_desc":":http:statuscode:`200` with the current version of Indivo.",
    "return_ex":'''
1.0.0.0
''',
    "deprecated": None,
    "added": None,
    "changed": None,

}]

########NEW FILE########
__FILENAME__ = api_defaults
"""
Descriptions of the normal use of the given url parameters in the
Indivo API. Individual calls should customize if their definitions vary
"""

URL_PARAM_DESC = {'RECORD_ID':'The id string associated with the Indivo record',
                  'CARENET_ID':'The id string associated with the Indivo carenet',
                  'PHA_EMAIL':'The email identifier of the Indivo user app',
                  'PHA_ID':'The email identifier of the Indivo user app',
                  'DOCUMENT_ID':'The unique identifier of the Indivo document',
                  'REQUEST_TOKEN':'The oauth token string generated via the authentication dance',
                  'ACCOUNT_ID':'The email identifier of the Indivo account',
                  'ACCOUNT_EMAIL':'The email identifier of the Indivo account',
                  'PRIMARY_SECRET':'A confirmation string sent securely to the patient from Indivo',
                  'SECONDARY_SECRET':'A secondary confirmation string, accessible by the patient or an admin application',
                  'MESSAGE_ID':'The unique identifier of the Indivo Message',
                  'SHORT_NAME':'The abbreviated name of the auth system.',
                  'EXTERNAL_ID':'The external identifier of the desired resource',
                  'REL_TYPE':'The type of relationship between the documents, i.e. ``annotation``, ``interpretation``',
                  'APP_ID':'The email identifier of the Indivo user app',
                  'APP_EMAIL':'The email identifier of the Indivo user app',
                  'CATEGORY':'The category of vital sign, i.e. ``weight``, ``Blood_Pressure_Systolic``',
                  'LAB':'', 
                  'FUNCTION_NAME':'The internal Indivo function name called by the API request',
                  'REL':'The type of relationship between the documents, i.e. ``annotation``, ``interpretation``',
                  'LAB_CODE':'The identifier corresponding to the measurement being made.',
                  'OTHER_ACCOUNT_ID': 'The email identifier of the Indivo account to share with',
                  'PATH':'The path to a static resource. Relative to the indivo_server static directory.',
                  'PRINCIPAL_EMAIL':'The email with which to scope an external id.',
                  'ATTACHMENT_NUM':'The 1-indexed number corresponding to the message attachment',
                  'DOCUMENT_ID_0':'The id of the document that is the object of the relationship, i.e. DOCUMENT_ID_0 *is annotated by* DOCUMENT_ID_1',
                  'DOCUMENT_ID_1':'The id of the document that is the subject of the relationship, i.e. DOCUMENT_ID_1 *annotates* DOCUMENT_ID_0'
                  }

QUERY_PARAM_DESC = {'offset':'See :ref:`query-operators`',
                    'limit':'See :ref:`query-operators`',
                    'order_by':'See :ref:`query-operators`',
                    'group_by':'See :ref:`query-operators`',
                    'aggregate_by':'See :ref:`query-operators`',
                    'date_range':'See :ref:`query-operators`',
                    'date_group':'See :ref:`query-operators`',
                    '{FIELD}':'See :ref:`query-operators`',
                    'type':'The Indivo document type to filter by',
                    'include_archive':'0 or 1: whether or not to include archived messages in the result set.',
                    'q':'The query string to search for',
                    'fullname':'The full name of the account to search for',
                    'contact_email':'The contact email of the account to search for',
                    'status':'The account or document status to filter by',
                    }

DATA_FIELD_DESC = {
    'account_id': 'An identifier for the account. Must be a valid email address.',
    'full_name': 'The full name of the account.',
    'fullname': 'The full name of the account.',
    'contact_email': 'A valid email at which to reach the account holder.',
    'system':'The identifier of the desired authsystem. ``password`` indicates the \
             internal password system.',
    'username':'The username for this account.',
    'password':'The password for this account.',
    'message_id':'An external identifier for the message.',
    'body':'The message body. Defaults to ``[no body]``.',
    'severity': 'The importance of the message. Options are ``low``, ``medium``, ``high``. Defaults to ``low``.',
    'subject':'The message subject. Defaults to ``[no subject]``.',
    'body_type':'The formatting of the message body. Options are ``plaintext``, ``markdown``. Defaults to ``plaintext``.',
    '':'The raw content of the document to create.',
    }

TEXT_FIELD_DESC = {'description': lambda call: call.get_docstring_summary(),
                   'return_desc': 'DESCRIBE THE VALUES THAT THE CALL RETURNS',
                   'return_ex': 'GIVE AN EXAMPLE OF A RETURN VALUE',
                   }

########NEW FILE########
__FILENAME__ = api_parser
"""
Pull relevant info from the indivo_server codebase to generate a framework for Indivo documentation
"""

# Assumption: Whoever calls us has access to the Django settings module
from django.conf import settings

from operator import attrgetter

from indivo.accesscontrol.access_rule import AccessRule
import indivo
import re

API_ROOTDIR = settings.APP_HOME
API_FP = 'doc/sphinx/autogen/api-skeleton'
API_EXT = '.py'
API_REFERENCE_FP = 'doc/sphinx/source/api-reference'
API_REFERENCE_EXT = '.rst'
API_CALLS_DICT = 'CALLS'
API_SPEC_FP = 'api'
API_SPEC_EXT = '.xml'
PY_CLIENT_FP = 'doc/sphinx/source/py-client-reference'
PY_CLIENT_EXT = '.rst'

class APIDict(object):
    ''' 
    A dictionary for holding Indivo API calls. If specified,
    auto-loads the calls from a python file. 
    '''

    api_rootdir = API_ROOTDIR
    api_fp = API_FP
    api_ext = API_EXT
    api_ref_fp = API_REFERENCE_FP
    api_ref_ext = API_REFERENCE_EXT
    calls_dict = API_CALLS_DICT
    api_spec_fp = API_SPEC_FP
    api_spec_ext = API_SPEC_EXT
    py_client_fp = PY_CLIENT_FP
    py_client_ext = PY_CLIENT_EXT

    def __init__(self, read_file=True):
        self.apicache = {}
        self.dirty = False
        if read_file:
            self._read_api()

    def is_empty(self):
        return not self.apicache

    def _read_api(self):
        '''
        Reads in the calls from the API file.
        '''
        calls = {}
        try:
            importstr = ("%s"%self.api_fp).replace('/', '.')
            api = __import__(importstr, fromlist=[self.calls_dict])
            calls = getattr(api, self.calls_dict)
        except ImportError: # file doesn't exist yet
            pass
        except AttributeError: # file doesn't have the calls_dict variable, must be bad formatting
            raise ValueError('module %s does not contain variable %s, and cannot be parsed as API calls'%
                             (importstr,self.calls_dict))

        for call in calls:
            c_obj = Call(**call)
            self.apicache[c_obj.title] = c_obj # don't use our __setitem__: userfile shouldn't dirty the cache

    def _write_to_file(self, pre_call_text, call_separator, post_call_text, 
                       call_render_func, output_path):
        calls = call_separator.join([getattr(c, call_render_func)() 
                                     for c in sorted(self.values(), key=attrgetter('path', 'method'))])

        out = '%s%s%s'%(pre_call_text, calls, post_call_text)
        f = open(output_path, 'w')
        f.write(out)
        f.close()
       
    def _write_api(self):
        '''
        Write the current state of the API to the API file
        '''
        full_fp = '%s/%s%s'%(settings.APP_HOME,self.api_fp, self.api_ext)
        separator = ',\n'
        render_func = 'to_python'
        imports = ''
        pre = '%s\n\nCALLS=['%(imports)
        post = ']\n'

        self._write_to_file(pre, separator, post, render_func, full_fp)

    def write_api_spec(self, path=None):
        if not path:
            path = '%s/%s%s'%(settings.APP_HOME, self.api_spec_fp, self.api_spec_ext)

        separator = '\n  '
        pre='<api>\n  '
        post='\n</api>'
        render_func = 'to_xml'
        self._write_to_file(pre, separator, post, render_func, path)

    def write_python_client_reference(self):
        '''
        Write a reference for the python client to a ReST document
        '''
        header = '''
Python Client Library Reference
===============================

.. py:module:: indivo_python_client
   :synopsis: A python client library for making authenticated Indivo API calls.

.. py:class:: IndivoClient(server_params, consumer_params, resource_token=None, **state_vars)
   
   The Indivo python client. The client should be initialized with the following arguments:

   * *server_params*: A dictionary containing information about the API server. The dictionary should have 
     two keys: ``api_base``, the server location from which the API is served, and ``authorization_base``, 
     the server location to which the user should be redirected to perform OAuth authorization.

   * *consumer_params*: A dictionary containing information about your app. The dictionary should have two
     keys: ``consumer_key``, the OAuth consumer key for your app, and ``consumer_secret``, the OAuth consumer
     secret for your app.

   * *resource_token*: **Optional.** A token (request, access, or session) with which to sign requests. The
     token should be a dictionary with two keys: ``oauth_token`` and ``oauth_token_secret``.

   * *state_vars*: **Optional.** Additional state to track with the API. This will be used to fill in url
     parameters when available. For example, if you create an IndivoClient with 
     ``pha_email='myapp@apps.indivo.org'``, then making an API call like :http:get:`/apps/{PHA_EMAIL}` will 
     automatically fill in the url, without you needing to pass the ``pha_email`` argument into the call. This
     is useful with variables that are unlikely to change within the use of a single client object, such as
     ``pha_email`` or ``record_id``. You can override the variables in individual API calls if need be, 
     however.

--------

.. py:method:: IndivoClient.get(uri, body={}, headers={}, **uri_params)

   Make a signed HTTP GET request against Indivo. Arguments are:

   * *uri*: The URI against which to make the request. Optionally, the URI may have templatable parameters,
     which should take the form of ``{VAR_NAME}``. Such variables must be passed in via the *uri_params* 
     argument or be present as a state variable on the :py:class:`~indivo_python_client.IndivoClient` 
     instance itself, or a :py:exc:`KeyError` will be raised.

   * *body*: **Optional.** A dictionary containing querystring parameters to add to the request, for example: 
     ``{ 'record_id': 'abcde' }``. 

   * *headers*: **Optional.** A dictionary containing additional HTTP headers to add to the request.

   * *uri_params*: **Optional.** Additional parameters to be templated into the uri. parameter names should
     be the lower-cased equivalent of uri parameters. For example, if the URI contains ``{PHA_EMAIL}``, 
     *uri_params* should contain ``pha_email='someapp@apps.indivo.org'``.

   This call will return a tuple ``(response, content)``, where *response* is an instance of 
   :py:class:`httplib2.Response`, and *content* is the raw content returned by Indivo.

--------

.. py:method:: IndivoClient.put(uri, body='', headers={}, content_type=None, **uri_params)

   Make a signed HTTP PUT request against Indivo. Arguments are:

   * *uri*: The URI against which to make the request. Optionally, the URI may have templatable parameters,
     which should take the form of ``{VAR_NAME}``. Such variables must be passed in via the *uri_params* 
     argument or be present as a state variable on the :py:class:`~indivo_python_client.IndivoClient` 
     instance itself, or a :py:exc:`KeyError` will be raised.

   * *body*: **Optional.** The body of the request. It should be either a raw data string, or a dictionary 
     containing form-data parameters.

   * *headers*: **Optional.** A dictionary containing additional HTTP headers to add to the request.

   * *content_type*: **Optional.** The MIME type of the data submitted in the PUT request. defaults to
     ``application/x-www-form-urlencoded``.

   * *uri_params*: **Optional.** Additional parameters to be templated into the uri. parameter names should
     be the lower-cased equivalent of uri parameters. For example, if the URI contains ``{PHA_EMAIL}``, 
     *uri_params* should contain ``pha_email='someapp@apps.indivo.org'``.

   This call will return a tuple ``(response, content)``, where *response* is an instance of 
   :py:class:`httplib2.Response`, and *content* is the raw content returned by Indivo.

--------

.. py:method:: IndivoClient.post(uri, body='', headers={}, content_type=None, **uri_params)

   Make a signed HTTP POST request against Indivo. Arguments are:

   * *uri*: The URI against which to make the request. Optionally, the URI may have templatable parameters,
     which should take the form of ``{VAR_NAME}``. Such variables must be passed in via the *uri_params* 
     argument or be present as a state variable on the :py:class:`~indivo_python_client.IndivoClient` 
     instance itself, or a :py:exc:`KeyError` will be raised.

   * *body*: **Optional.** The body of the request. It should be either a raw data string, or a dictionary 
     containing form-data parameters.

   * *headers*: **Optional.** A dictionary containing additional HTTP headers to add to the request.

   * *content_type*: **Optional.** The MIME type of the data submitted in the POST request. defaults to
     ``application/x-www-form-urlencoded``.

   * *uri_params*: **Optional.** Additional parameters to be templated into the uri. parameter names should
     be the lower-cased equivalent of uri parameters. For example, if the URI contains ``{PHA_EMAIL}``, 
     *uri_params* should contain ``pha_email='someapp@apps.indivo.org'``.

   This call will return a tuple ``(response, content)``, where *response* is an instance of 
   :py:class:`httplib2.Response`, and *content* is the raw content returned by Indivo.

--------

.. py:method:: IndivoClient.delete(uri, headers={}, **uri_params)

   Make a signed HTTP DELETE request against Indivo. Arguments are:

   * *uri*: The URI against which to make the request. Optionally, the URI may have templatable parameters,
     which should take the form of ``{VAR_NAME}``. Such variables must be passed in via the *uri_params* 
     argument or be present as a state variable on the :py:class:`~indivo_python_client.IndivoClient` 
     instance itself, or a :py:exc:`KeyError` will be raised.

   * *headers*: **Optional.** A dictionary containing additional HTTP headers to add to the request.

   * *uri_params*: **Optional.** Additional parameters to be templated into the uri. parameter names should
     be the lower-cased equivalent of uri parameters. For example, if the URI contains ``{PHA_EMAIL}``, 
     *uri_params* should contain ``pha_email='someapp@apps.indivo.org'``.

   This call will return a tuple ``(response, content)``, where *response* is an instance of 
   :py:class:`httplib2.Response`, and *content* is the raw content returned by Indivo.

--------

.. py:method:: IndivoClient.update_token(resource_token)

   Update the token used by the client to sign requests. *resource_token* should be a dictionary with two
   keys: ``oauth_token`` and ``oauth_token_secret``.

   Returns ``None``.

--------

.. py:method:: IndivoClient.fetch_request_token(params={})

   Get a new request token from the server. *params* should include parameters for generating the token,
   such as ``indivo_record_id``.

   Returns the request token in the form of a dictionary with two keys: ``oauth_token`` and 
   ``oauth_token_secret``.

--------

.. py:method:: IndivoClient.exchange_token(verifier)

   Exchange the client's current token (a request token) for an access token. *verifier* must be the
   verifier string returned after the user has successfully authenticated.

   Returns the newly acquired access token in the form of a dictionary with two keys: ``oauth_token`` and 
   ``oauth_token_secret``.

--------

.. py:method:: IndivoClient.get_surl_credentials()

   Generate a token and secret for signing URLs. This token/secret are based on the client's current resource
   token (which should be an access token). SURL credentials are required in order to use a UI Server widget:
   they delegate access to the UI Server to make API calls on behalf of a user app.

   Returns a dictionary with two keys: ``token`` and ``secret``.

--------

'''
        separator = '\n\n--------\n\n'
        pre = header
        post = '\n'
        render_func = 'to_client_ReST'
        full_fp = '%s/%s%s'%(settings.APP_HOME, self.py_client_fp, self.py_client_ext)
        self._write_to_file(pre, separator, post, render_func, full_fp)

    def write_ReST_reference(self):
        '''
        Write the current state of the API to a ReST document
        '''
        header = '''
API Reference
=============

This page contains a full list of valid Indivo API calls, generated from the code.
For a more detailed walkthrough of individual calls, see :doc:`api`.

In the access control for some calls, you might see the phrase *full control*. In
Indivo, this is defined as follows:

.. glossary::
   
   full control
     A principal is said to be in full control of a record if either:

     * The principal is the owner of the record
 
     * There is a full share between the record and the principal.

'''
        full_fp = '%s/%s%s'%(settings.APP_HOME, self.api_ref_fp, self.api_ref_ext)
        render_func = 'to_ReST'
        separator = '\n\n--------\n\n'
        pre = '%s\n\n--------\n\n'%(header)
        post='\n'
        self._write_to_file(pre, separator, post, render_func, full_fp)

    def get(self, key, default=None):
        try:
            return self.__getitem__(key)
        except KeyError:
            return default

    def __getitem__(self, key):
        return self.apicache[APIUtils.normalize_title(key)]

    def __setitem__(self, _key, val):
        key = APIUtils.normalize_title(_key)
        oldval = self.get(key, None)
        self.apicache[key] = val
        self.dirty = oldval != val

    def __delitem__(self, key):
        del self.apicache[key]
        self.dirty = True

    def save(self):
        if self.dirty:
            self._write_api()

    def update(self, call_dict):
        for k, v in call_dict.iteritems():
            self[k] = v

    def keys(self):
        return self.apicache.keys()
    
    def values(self):
        return self.apicache.values()

    def __repr__(self):
        dictrepr = dict.__repr__(self.apicache)
        return '%s(%s)' % (type(self).__name__, dictrepr)

class CallResolver(object):
    '''
    Takes a user-entered API call and an auto-generated API call
    and resolves their differing properties. Used in generating
    merged API calls.
    '''
    def __init__(self, cp_call, user_call, user_preferred=True):
        self.cp_call = cp_call
        self.user_call = user_call
        self.user_preferred = user_preferred

    def prefer_user(self):
        self.user_preferred = True

    def prefer_cp(self):
        self.user_preferred = False
    
    def resolve(self, field):
        '''
        Given an API call field, returns the value of that field
        that a merged call should use.
        '''
        if isinstance(getattr(self.cp_call, field, None), dict):
            return self._resolve_dictfield(field)
        else:
            return self._resolve_textfield(field)

    def _resolve_dictfield(self, field):
        cp_dict = getattr(self.cp_call, field)
        user_dict = getattr(self.user_call, field)

        all_keys = set(cp_dict.keys()).union(set(user_dict.keys()))

        retdict = {}
        for key in all_keys:
            cp_val = cp_dict.get(key, None)
            user_val = user_dict.get(key, None)
            retdict[key] = self._resolve(cp_val, user_val)

        return retdict

    def _resolve_textfield(self, field):
        cp_val = getattr(self.cp_call, field, None)
        user_val = getattr(self.user_call, field, None)
        return self._resolve(cp_val, user_val)
        
    def _resolve(self, cp_val, user_val):
        
        if (self.user_preferred and user_val) or not cp_val:
            retval = user_val
        else:
            retval = cp_val

        return retval

class Call(object):
    '''
    Representation of an Indivo API call, with rendering to ReST and Python.
    '''

    def __setattr__(self, name, value):
        object.__setattr__(self, name, value)
        if name == 'view_func_name':
            self.view_func = self._get_view_func()
        if name == 'view_func':
            self.access_rule = self._get_access_rule()
        if name == 'access_rule':
            self.access_doc = self._get_access_doc()

    def __init__(self, path=None, method=None, view_func_name='',
                 access_doc='', url_params={}, query_opts={}, data_fields={}, 
                 description='', return_desc='', return_ex='', deprecated=None,
                 added=None, changed=None):
        self.path = path
        self.method = method
        self.title = APIUtils.normalize_title('%s %s'%(method, path))
        self.view_func_name = view_func_name
        if access_doc:
            self.access_doc = access_doc
        self.url_params = url_params
        self.query_opts = query_opts
        self.data_fields = data_fields
        self.description = description
        self.return_desc = return_desc
        self.return_ex = return_ex
        self.deprecated = deprecated
        self.added = added
        self.changed = changed

    def get_docstring_summary(self):
        if self.view_func and self.view_func.__doc__:
            return self.view_func.__doc__.split('\n')[0].strip()
        else:
            return ''

    def _print_dict(self, d):
        lines = []
        for key, value in d.iteritems():
            lines.append("%s'%s':'%s',\n"%(self._indent(8), key, value))
        out = '{\n%s%s}'%(''.join(lines), self._indent(8))
        return out

    def _get_default(self, default_dict, key):
        ret = None
        if default_dict.has_key(key):
            if callable(default_dict[key]):
                try:
                    ret = default_dict[key](self)
                except:
                    pass
            else:
                ret = default_dict[key]
        return ret

    def set_defaults(self, default_maps):
        ''' Replace blank attributes of the Call with default values provided in `default_maps` '''
        mod = False
        for fieldname, default_map in default_maps.iteritems():
            if hasattr(self, fieldname):
                fieldval = getattr(self, fieldname, None)
                # The attribute is a dict, look for its keys in the map
                if isinstance(fieldval, dict):
                    for k in fieldval.keys():
                        if default_map.has_key(k) and not fieldval[k]:
                            newval = self._get_default(default_map, k)
                            if newval:
                                mod = True
                            fieldval[k] = newval

                # The attribute is a string, look for the attribute itself in the map
                else:
                    if default_map.has_key(fieldname) and not fieldval:
                        newval = self._get_default(default_map, fieldname)
                        if newval:
                            mod = True
                        setattr(self, fieldname, newval)
        return mod

    def _print_tuple(self, tuple, varname):
        key = '"%s": '%varname
        if tuple:
            value = str(tuple)
        else:
            value = 'None'

        return '%s%s,\n'%(key, value)

    def to_xml(self):
        '''
        Render the Call to XML, for building an API spec that can be used by client libraries.
        Output will look like:
        <call name="record" method="get" url="/records/{RECORD_ID}" />
        '''
        return '<call name="%s" method="%s" url="%s" />'%(self.view_func_name, self.method, self.path)
            
    def to_python(self):
        ''' 
        Render the Call to python code, for easy import.
        Output will look like:
        
        {
          'method': 'get',
          'path': '/records/{RECORD_ID}',
          'url_params': {
                          'RECORD_ID':'the Indivo record identifier',
                        },
          'view_func_name': 'record',
          'query_opts' : {
                          'offset': 'offset number. default is 0',
                         },
          'data_fields': {
                         },
          'description':'Get basic record information',
          'return_desc':'An XML snippet describing the Record',
          'return_ex':'
          <Record id="c002aa8e-1ff0-11de-b090-001b63948875" label="Jill Smith">
            <demographics document_id="646937a0-1ff1-11de-b090-001b63948875" />
          </Record>',
          'deprecated': ('0.9.3', 'Use :http:get:`/records/{RECORD_ID}/get`.'),
          'added':('0.9.3', ''),
          'changed':('1.0.0', 'Added *offset* to query params'),
        }
        '''
        method = '"method":"%s",\n'%self.method
        path = '"path":"%s",\n'%self.path
        view_func = '"view_func_name":"%s",\n'%self.view_func_name
        access_rule = '"access_doc":"%s",\n'%self.access_doc
        url_params = '"url_params":%s,\n'%self._print_dict(self.url_params)
        query_opts = '"query_opts":%s,\n'%self._print_dict(self.query_opts)
        data_fields = '"data_fields":%s,\n'%self._print_dict(self.data_fields)
        return_desc = '"return_desc":"%s",\n'%self.return_desc
        description = '"description":"%s",\n'%self.description
        return_ex = self._print_quoted_field('return_ex', self.return_ex)
        deprecated = self._print_tuple(self.deprecated, 'deprecated')
        added = self._print_tuple(self.added, 'added')
        changed = self._print_tuple(self.changed, 'changed')
        indent = 4
        
        out = "{\n%s\n}"%( 
            self._indent(indent).join([
                    '', method, path, view_func, access_rule, 
                    url_params, query_opts, data_fields, description,
                    return_desc, return_ex, deprecated, added, changed]))
        return out

    def _print_quoted_field(self, key, val):
        ret = val if val else ''
        if not ret.startswith('\n'):
            ret = '\n'+ret
        if not ret.endswith('\n'):
            ret = ret+'\n'
        return '"%s":\'\'\'%s\'\'\',\n'%(key, ret)

    def to_ReST_directive(self):
        """ Render a ReST directive line for the Call.

        Output will look like:
        
        .. http:get:: /records/{RECORD_ID}
        
        """

        return ".. http:%s:: %s"%(self.method.lower(), self.path)

    def to_client_ReST(self):
        """ Render the Call as a ReST block (documenting the python client call).

        Prints directive, description, and parameters. Output will look like:

        .. py:method:: IndivoClient.record(record_id=None, body={})
           
           Get basic record information. 

           *body* should contain query parameters for the call. See :http:get:`/records/{RECORD_ID}` for 
           valid parameters and the returned content.

           This call will return a tuple ``(response, content)``, where *response* is an instance of 
           :py:class:`httplib2.Response`, and *content* is the raw content returned by Indivo.

        """

        directive = ".. py:method:: IndivoClient.%s"%self.view_func_name
        args = "(" + ", ".join(map(lambda p: p.lower() + "=None", self.url_params.keys()))
        if args != "(": args += "[, "
        else: args += "["
        if self.method == "GET":
            description = '''*body* should contain query parameters for the call. *headers* should contain any additional HTTP headers to pass in with the call.''' 
            args += "body={}, headers={}]"
        elif self.method == "POST" or self.method == "PUT":
            description = '''*body* should contain the data to send with the call. *headers* should contain any additional HTTP headers to pass in with the call. *content_type* should contain the MIME type of the data sent in the *body* argument.'''
            args += "body={}, headers={}, content_type=None]"
        elif self.method == "DELETE":
            description = '''*headers* should contain any additional HTTP headers to pass in with the call.'''
            args += "headers={}]"

        args +=")"
        directive += args

        reference = '''See :http:%s:`%s` for valid parameters and the returned content.'''% (self.method.lower(), self.path)
        description += ' ' + reference
        
        return_desc = '''This call will return a tuple ``(response, content)``, where *response* is an instance of :py:class:`httplib2.Response`, and *content* is the raw content returned by Indivo.'''

        ret = '''%s\n\n%s\n\n%s\n\n%s'''%(
            self._list_to_ReST([directive], 0),
            self._list_to_ReST(self.description.strip().split('\n'), 3),
            self._list_to_ReST([description], 3),
            self._list_to_ReST([return_desc], 3),
            )
        return ret

    def to_ReST(self):
        """ Render the Call as a ReST block.
         
        Prints directive, description, parameters, an example output, 
        and versions changed, added, or deprecated.

        Output will look like: 

        .. http:get:: /records/{RECORD_ID}
        
           Get basic record information.
        
           :shortname: record
           :accesscontrol: The record owner, the admin app that created it, or an app with access to it
           :query order_by: one of ``label``, ``created-at``
           :query offset: offset number. default is 0
           :query limit: limit number. default is 30
           :param RECORD_ID: the Indivo record identifier
           :returns: XML describing the record
        
        ::
        
           <Record id="c002aa8e-1ff0-11de-b090-001b63948875" label="Jill Smith">
             <demographics document_id="646937a0-1ff1-11de-b090-001b63948875" />
           </Record>
        
        .. versionadded:: 0.9.3
           
        .. versionchanged:: 1.0.0
           Added *offset* to query parameters
        
        .. deprecated:: 0.9.3
           Use :http:get:`/records/{RECORD_ID}/get` instead.
        
        """ 

        directive = self.to_ReST_directive()
        short_name = ":shortname: %s"%self.view_func_name
        access_doc = ":accesscontrol: %s"%self.access_doc
        url_params = [":parameter %s: %s"%(p, self.url_params[p]) for p in self.url_params.keys()]
        query_opts = [":queryparameter %s: %s"%(q, self.query_opts[q]) for q in self.query_opts.keys()]
        
        data_fields = []
        for k,v in self.data_fields.iteritems():
            if k == '':
                data_fields = [":rawdata: %s"%v]
                break
            else:
                data_fields.append(":formparameter %s: %s"%(k,v))
        returns = ":returns: %s"%self.return_desc
        indent = 3
        
        out = '%s\n%s\n%s%s%s%s%s%s'%(
            self._list_to_ReST([directive], 0),
            self._list_to_ReST(self.description.strip().split('\n'), indent),
            self._list_to_ReST([short_name], indent), 
            self._list_to_ReST([access_doc], indent),
            self._list_to_ReST(url_params, indent),
            self._list_to_ReST(query_opts, indent),
            self._list_to_ReST(data_fields, indent),
            self._list_to_ReST([returns], indent),
            )

        if self.return_ex.strip():
            ret_ex = self.return_ex
            out += '\nExample Return Value::\n'
            if not ret_ex.startswith('\n'):
                ret_ex = '\n' + ret_ex
            for line in ret_ex.split('\n'):
                out += self._indent(indent) + line + '\n'

        if self.description.find('IMPLEMENTED') > -1:
            todo_desc = "The API Call '%s' is not yet implemented."%self.title
            out += '\n.. todo:: \n\n%s%s\n'%(self._indent(indent), todo_desc)

        if self.added:
            out += self._change_directive('versionadded', self.added[0],
                                          self.added[1])
        if self.changed:
            out += self._change_directive('versionchanged', self.changed[0],
                                          self.changed[1])
        if self.deprecated:
            out += self._change_directive('deprecated', self.deprecated[0],
                                          self.deprecated[1])
        return out

    def _change_directive(self, directive_name, version, explanation):
        exp_str = '%s%s\n'%(self._indent(3), explanation) if explanation else ''
        return '\n.. %s:: %s\n%s'%(directive_name, version, exp_str)

    def _indent(self, indent):
        return " "*indent

    def _list_to_ReST(self, l, indent):
        out = ''
        for item in l:
            out += '%s%s\n'%(self._indent(indent), item)
        return out

    def _get_access_rule(self):
        return AccessRule.lookup(self.view_func) if self.view_func else None

    def _get_access_doc(self):
        if self.access_rule and self.access_rule.rule.__doc__:
            return self.access_rule.rule.__doc__
        else:
            exc_pattern = settings.INDIVO_ACCESS_CONTROL_EXCEPTION 
            if exc_pattern and self.path and re.match(exc_pattern, self.path):
                return 'Anybody'
        return 'Nobody'

    def _get_view_func(self):
        view_func = None
        if self.view_func_name:
            vfn = self.view_func_name
            try:
                # Is it an Indivo view?
                view_func = getattr(__import__('indivo.views', 
                                               fromlist=[vfn]), 
                                    vfn)
            except AttributeError:
                try:
                    # Is it a codingsystems view?
                    view_func = getattr(__import__('codingsystems.views', 
                                                   fromlist=[vfn]), 
                                        vfn)
                except AttributeError:
                    try:
                        # Is it a Django static view?
                        view_func = getattr(__import__('django.views.static', 
                                                       fromlist=[vfn]), 
                                            vfn)
                    except AttributeError:
                        pass
        return view_func
    
class CallParser(object):
    def __init__(self, urls):
        self.urllist = urls
        self.api = APIDict(read_file=False)
        self.parse(self.urllist, parent_path='/')

    def register(self, call):
        self.api[call.title] = call

    def lookup(self, call):
        return self.api.get(call.title, None)

    def parse(self, urllist, parent_path=''):
        for entry in urllist:
                
            # not a leaf node, recurse
            if hasattr(entry, 'url_patterns'):
                cur_path = entry.regex.pattern[1:]
                self.parse(entry.url_patterns, parent_path+cur_path)
                    
            # leaf node
            else:
                path, url_params = APIUtils.parse_url_params(parent_path + entry.regex.pattern[1:-1])

                # build up url_params for the Call constructor
                params = {}
                for param in url_params:
                    params[param[1]] = ''

                if isinstance(entry.callback, indivo.lib.utils.MethodDispatcher):
                    for method, view_func in entry.callback.methods.iteritems():
                        
                        # exclude calls to django views (i.e. static file serving)
                        if not view_func.__module__.startswith('django'):
                            call = Call(path, method, view_func_name=view_func.__name__, 
                                        url_params=params)
                            call.description = call.get_docstring_summary()
                            self.register(call)
                elif not entry.callback.__module__.startswith('django'):
                    method = 'GET'
                    call = Call(path, method, entry.callback.__name__, 
                                url_params=params)
                    call.description = call.get_docstring_summary()
                    self.register(call)

class APIUtils(object):

    @classmethod
    def _find_params(cls, url):
        params = []

        # API documentation format:
        # try matching things in {}
        for pattern in re.finditer('{(.*?)}', url):
            match = pattern.group(0)
            param = pattern.group(1).upper()
            params.append((match, param))

        # Django urlconf format:
        # match things inside <> that are in the context of (?P< your match >..) 
        for pattern in re.finditer( '\(\?P<(.*?)>.*?\)', url):
            match = pattern.group(0)
            param = pattern.group(1).upper()
            params.append((match, param))

        return params

    @classmethod
    def normalize_title(cls, title):
        method, url = title.split(' ')
        return '%s %s'%(cls.normalize_method(method),
                        cls.normalize_url(url))

    @classmethod
    def normalize_method(cls, method):
        return method.upper()
                      
    @classmethod
    def normalize_url(cls, url):
        params = cls._find_params(url)
        for i, param in enumerate(params):
            url = url.replace(param[0], '{%d}'%i)
        return url

    @classmethod
    def parse_url_params(cls, url):
        params = cls._find_params(url)
        for param in params:
            url = url.replace(param[0], '{%s}'%param[1])
        return url, params

########NEW FILE########
__FILENAME__ = httpdomain
"""
    Indivo-specific extensions to httpdomain
    for loading autogenerated API docs.

    Adapted from:

    sphinxcontrib.httpdomain
    ~~~~~~~~~~~~~~~~~~~~~~~~

    The HTTP domain for documenting RESTful HTTP APIs.

    :copyright: Copyright 2011 by Hong Minhee
    :license: BSD, see LICENSE for details.

"""

import re

from docutils import nodes
from docutils.parsers.rst.roles import set_classes

from sphinx import addnodes
from sphinx.roles import XRefRole
from sphinx.domains import Domain, ObjType, Index
from sphinx.directives import ObjectDescription
from sphinx.util.nodes import make_refnode
from sphinx.util.docfields import Field, GroupedField, TypedField

from autogen.api_parser import APIUtils

HTTP_STATUS_CODES = {
    100: 'Continue',
    101: 'Switching Protocols',
    102: 'Processing',
    200: 'OK',
    201: 'Created',
    202: 'Accepted',
    203: 'Non Authoritative Information',
    204: 'No Content',
    205: 'Reset Content',
    206: 'Partial Content',
    207: 'Multi Status',
    226: 'IM Used',              # see RFC 3229
    300: 'Multiple Choices',
    301: 'Moved Permanently',
    302: 'Found',
    303: 'See Other',
    304: 'Not Modified',
    305: 'Use Proxy',
    307: 'Temporary Redirect',
    400: 'Bad Request',
    401: 'Unauthorized',
    402: 'Payment Required',     # unused
    403: 'Forbidden',
    404: 'Not Found',
    405: 'Method Not Allowed',
    406: 'Not Acceptable',
    407: 'Proxy Authentication Required',
    408: 'Request Timeout',
    409: 'Conflict',
    410: 'Gone',
    411: 'Length Required',
    412: 'Precondition Failed',
    413: 'Request Entity Too Large',
    414: 'Request URI Too Long',
    415: 'Unsupported Media Type',
    416: 'Requested Range Not Satisfiable',
    417: 'Expectation Failed',
    418: "I'm a teapot",        # see RFC 2324
    422: 'Unprocessable Entity',
    423: 'Locked',
    424: 'Failed Dependency',
    426: 'Upgrade Required',
    449: 'Retry With',           # proprietary MS extension
    500: 'Internal Server Error',
    501: 'Not Implemented',
    502: 'Bad Gateway',
    503: 'Service Unavailable',
    504: 'Gateway Timeout',
    505: 'HTTP Version Not Supported',
    507: 'Insufficient Storage',
    510: 'Not Extended'
}

http_sig_param_re = re.compile(r'\((?:(?P<type>[^:)]+):)?(?P<name>[\w_]+)\)',
                               re.VERBOSE)

def http_resource_anchor(method, path):
    path = re.sub(r'[<>:/]', '-', path)
    return method.lower() + '-' + APIUtils.normalize_url(path)


class HTTPResource(ObjectDescription):

    doc_field_types = [
        TypedField('parameter', label='URL Parameters',
                   names=('param', 'parameter', 'arg', 'argument'),
                   can_collapse=False,
                   typerolename='obj', typenames=('paramtype', 'type')),
        GroupedField('queryparameter', label='Query Parameters',
                     can_collapse=False,
                     names=('queryparameter', 'queryparam', 'qparam', 'query')),
        GroupedField('formparameter', label='Formdata Parameters',
                     names=('formparameter', 'formparam', 'fparam', 'form')),
        GroupedField('statuscode', label='Status Codes',
                     can_collapse=True,
                     rolename='statuscode',
                     names=('statuscode', 'status', 'code')), 
        Field('rawformdata', label='Raw Data',
              rolename='rawformdata',
              has_arg=False,
              names=('rawformdata','rfd', 'rawdata')),
        Field('accesscontrol', label='Accessible By',
              rolename='accesscontrol',
              has_arg=False,
              names=('accesscontrol',)),
        Field('shortname', label='Short Name',
              rolename='shortname',
              has_arg=False,
              names=('shortname', 'sn', 'view_func')),
        Field('returns', label='Returns',
              rolename='returns',
              has_arg=False,
              names=('returns', 'ret', 'retval')),
    ]

    method = NotImplemented

    def handle_signature(self, sig, signode):
        method = self.method.upper() + ' '

        signode += addnodes.desc_name(method, method)
        offset = 0
        for match in http_sig_param_re.finditer(sig):
            path = sig[offset:match.start()]
            signode += addnodes.desc_name(path, path)
            params = addnodes.desc_parameterlist()
            typ = match.group('type')
            if typ:
                typ = typ + ': '
                params += addnodes.desc_annotation(typ, typ)
            name = match.group('name')
            params += addnodes.desc_parameter(name, name)
            signode += params
            offset = match.end()
        if offset < len(sig):
            path = sig[offset:len(sig)]
            signode += addnodes.desc_name(path, path)
        fullname = self.method.upper() + ' ' + path

        signode['method'] = self.method
        signode['path'] = sig
        signode['fullname'] = fullname
        return (fullname, self.method, sig)

    def needs_arglist(self):
        return False

    def add_target_and_index(self, name_cls, sig, signode):
        sig = APIUtils.normalize_url(sig)
        signode['ids'].append(http_resource_anchor(*name_cls[1:]))
        self.env.domaindata['http'][self.method][sig] = (self.env.docname, '')

    def get_index_text(self, modname, name):
        return ''


class HTTPOptions(HTTPResource):

    method = 'options'


class HTTPHead(HTTPResource):

    method = 'head'


class HTTPPost(HTTPResource):

    method = 'post'


class HTTPGet(HTTPResource):

    method = 'get'


class HTTPPut(HTTPResource):

    method = 'put'


class HTTPDelete(HTTPResource):

    method = 'delete'


class HTTPTrace(HTTPResource):

    method = 'trace'


def http_statuscode_role(name, rawtext, text, lineno, inliner,
                         options={}, content=[]):
    if text.isdigit():
        code = int(text)
        try:
            status = HTTP_STATUS_CODES[code]
        except KeyError:
            msg = inliner.reporter.error('%d is invalid HTTP status code'
                                         % code, lineno=lineno)
            prb = inliner.problematic(rawtext, rawtext, msg)
            return [prb], [msg]
    else:
        try:
            code, status = re.split(r'\s', text.strip(), 1)
            code = int(code)
        except Value:
            msg = inliner.reporter.error(
                'HTTP status code must be an integer (e.g. `200`) or '
                'start with an integer (e.g. `200 OK`); %r is invalid' %
                text,
                line=lineno
            )
            prb = inliner.problematic(rawtext, rawtext, msg)
            return [prb], [msg]
    nodes.reference(rawtext)
    if code == 226:
        url = 'http://www.ietf.org/rfc/rfc3229.txt'
    if code == 418:
        url = 'http://www.ietf.org/rfc/rfc2324.txt'
    if code == 449:
        url = 'http://msdn.microsoft.com/en-us/library' \
              '/dd891478(v=prot.10).aspx'
    elif code in HTTP_STATUS_CODES:
        url = 'http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html' \
              '#sec10.' + ('%d.%d' % (code // 100, 1 + code % 100))
    else:
        url = ''
    set_classes(options)
    node = nodes.reference(rawtext, '%d %s' % (code, status),
                           refuri=url, **options)
    return [node], []


def http_method_role(name, rawtext, text, lineno, inliner,
                     options={}, content=[]):
    references = {
        'options': '9.2',
        'get': '9.3',
        'head': '9.4',
        'post': '9.5',
        'put': '9.6',
        'delete': '9.7',
        'trace': '9.8',
        'connect': '9.9'
    }
    method = str(text).lower()
    umethod = method.upper()
    try:
        sec = references[method]
    except KeyError:
        msg = inliner.reporter.error('%s is not valid HTTP method' % umethod,
                                     lineno=lineno)
        prb = inliner.problematic(rawtext, rawtext, msg)
        return [prb], [msg]
    url = 'http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec' + sec
    node = nodes.reference(rawtext, umethod, refuri=url, **options)
    return [node], []


class HTTPXRefRole(XRefRole):

    def __init__(self, method, **kwargs):
        XRefRole.__init__(self, **kwargs)
        self.method = method

    def process_link(self, env, refnode, has_explicit_title, title, target):
        if not target.startswith('/'):
            pass
        if not has_explicit_title:
            title = self.method.upper() + ' ' + title
        return title, APIUtils.normalize_url(target)


class HTTPIndex(Index):

    name = 'apicalls'
    localname = 'API Call Lookup Table'
    shortname = 'api calls'

    def generate(self, docnames=None):
        content = {}
        for method, routes in self.domain.routes.iteritems():
            for path, info in routes.iteritems():
                letter = path.split('/', 2)
                try:
                    first_letter = letter[1]
                except IndexError:
                    first_letter = letter[0]
                entries = content.setdefault('/' + first_letter, [])
                entries.append([
                    method.upper() + ' ' + path, 
                    0, info[0],
                    http_resource_anchor(method, path), '', '', info[1]
                ])
        content = content.items()
        content.sort(key=lambda (k, v): k)
        return (content, True)


class HTTPDomain(Domain):
    """HTTP domain."""

    name = 'http'
    label = 'HTTP'

    object_types = {
        'options': ObjType('options', 'options', 'obj'),
        'head': ObjType('head', 'head', 'obj'),
        'post': ObjType('post', 'post', 'obj'),
        'get': ObjType('get', 'get', 'obj'),
        'put': ObjType('put', 'put', 'obj'),
        'delete': ObjType('delete', 'delete', 'obj'),
        'trace': ObjType('trace', 'trace', 'obj')
    }

    directives = {
        'options': HTTPOptions,
        'head': HTTPHead,
        'post': HTTPPost,
        'get': HTTPGet,
        'put': HTTPPut,
        'delete': HTTPDelete,
        'trace': HTTPTrace
    }

    roles = {
        'options': HTTPXRefRole('options'),
        'head': HTTPXRefRole('head'),
        'post': HTTPXRefRole('post'),
        'get': HTTPXRefRole('get'),
        'put': HTTPXRefRole('put'),
        'delete': HTTPXRefRole('delete'),
        'trace': HTTPXRefRole('trace'),
        'statuscode': http_statuscode_role,
        'method': http_method_role
    }

    initial_data = {
        'options': {}, # path: (docname, synopsis)
        'head': {},
        'post': {},
        'get': {},
        'put': {},
        'delete': {},
        'trace': {}
    }

    indices = [HTTPIndex]

    @property
    def routes(self):
        return dict((key, self.data[key]) for key in self.object_types)

    def clear_doc(self, docname):
        for typ, routes in self.routes.iteritems():
            for path, info in routes.items():
                if info[0] == docname:
                    del routes[path]

    def resolve_xref(self, env, fromdocname, builder, typ, _target,
                     node, contnode):
        target = APIUtils.normalize_url(_target)
        try:
            info = self.data[str(typ)][target]
        except KeyError:
            return
        else:
            anchor = http_resource_anchor(typ, target)
            title = typ.upper() + ' ' + target
            return make_refnode(builder, fromdocname, info[0], anchor,
                                contnode, title)

    def get_objects(self):
        for method, routes in self.routes.iteritems():
            for path, info in routes.iteritems():
                anchor = http_resource_anchor(method, path)
                yield (path, path, method, info[0], anchor, 1)


def setup(app):
    app.add_domain(HTTPDomain)


########NEW FILE########
__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# Indivo X documentation build configuration file, created by
# sphinx-quickstart on Wed Jul 20 17:33:59 2011.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
sys.path.insert(0, os.path.abspath(os.path.dirname(__file__) + '/../')) # indivo_server/doc/sphinx
sys.path.insert(0, os.path.abspath(os.path.dirname(__file__) + '/../../')) # indivo_server/doc
sys.path.insert(0, os.path.abspath(os.path.dirname(__file__) + '/../../../')) # indivo_server

# Make sure we can grab Django settings
os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'    

# Mock packages that we don't need so that code imports work
# on systems without the packages
mocks = ['markdown', 'markdown.preprocessors.Preprocessor', 'mardown.Extension', 'rdflib']
class Mock(object):
    def __init__(self, *args, **kwargs):
        pass

    def __getattr__(self, name):
        return Mock()

    def __call__(self, *args, **kwargs):
        return Mock()

for mod_name in mocks:
    sys.modules[mod_name] = Mock()

# SPECIAL SETUP FOR READTHEDOCS.ORG
on_rtd = os.environ.get('READTHEDOCS', None) == 'True'
if on_rtd:
    
    # Use a special rtd.org settings module
    os.environ['DJANGO_SETTINGS_MODULE'] = 'settings_rtfd'

    # generate the autocode and the api-reference
    from django.core.management import call_command
    call_command('generate_docs', 'prepare')

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.todo', 'localext.httpdomain']

# autodoc config
autodoc_default_flags = ['members', 
                         'undoc-members', 
                         'private-members', 
                         'show-inheritance',]
# todo config
todo_include_todos = True

# Add any paths that contain templates here, relative to this directory.
templates_path = ['.templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Indivo X'
copyright = u"2012, Children's Hospital Boston. All rights reserved"

from version import INDIVO_SERVER_VERSION, INDIVO_SERVER_RELEASE
# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = INDIVO_SERVER_VERSION
# The full version, including alpha/beta/rc tags.
release = INDIVO_SERVER_RELEASE

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = []

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
modindex_common_prefix = ['indivo.views.', 'views.']

# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
html_theme_options = {
#    'rightsidebar':True,
#    'externalrefs': False,
    'footerbgcolor':'#1E3467',
    'footertextcolor':'#9EADCF',
    'sidebarbgcolor':'#294FAB',
    'sidebartextcolor':'#9EADCF',
#    'sidebarlinkcolor':'#1E3467',
    'sidebarlinkcolor':'#DDDDEE',
    'relbarbgcolor':'#1E3467',
    'relbartextcolor':'#9EADCF',
    'relbarlinkcolor':'#8CA0CF',
    'bgcolor': '#FEFCF7',
#    'textcolor':'black',
#    'linkcolor':'#1E3467',
#    'visitedlinkcolor':'#596E9D',
    'headbgcolor':'#BFC4CE',
    'headtextcolor':'#1E3467',
    'headlinkcolor':'#1E3467',
    }

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []
html_theme_path = [".theme"]

# The name for this set of Sphinx documents.  If None, it defaults to
html_title = "%s v%s documentation"%(project, version)
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['.static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'IndivoXdoc'


# -- Options for LaTeX output --------------------------------------------------

# The paper size ('letter' or 'a4').
#latex_paper_size = 'letter'

# The font size ('10pt', '11pt' or '12pt').
#latex_font_size = '10pt'

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'IndivoX.tex', u'Indivo X Documentation',
   u'Daniel Haas, Ben Adida, Arjun Sanyal, Isaac Kohane, Kenneth Mandl', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Additional stuff for the LaTeX preamble.
#latex_preamble = ''

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'indivox', u'Indivo X Documentation',
     [u'Daniel Haas, Ben Adida, Arjun Sanyal, Isaac Kohane, Kenneth Mandl'], 1)
]

########NEW FILE########
__FILENAME__ = dump_documents
"""
A script to dump documents for records created by
indivo-connector
"""

##
## DJANGO SETUP
##
from django.core.management import setup_environ
import settings, string

setup_environ(settings)

##
## constants
##

INFO = """<patient>
  <last_name>%s</last_name>
  <first_names>%s</first_names>
  <mrn>%s</mrn>
  <confirmation_code>%s</confirmation_code>
</patient>"""
##
## now the script
##

import sys, os
from indivo.models import *
from xml.etree import ElementTree

def dump_documents():
  out_dir = sys.argv[1]

  # go through the patients
  p = Principal.objects.get(email='indivoconnector-admin@apps.indivo.org')

  records = Record.objects.filter(creator=p)
  print "%s records" % len(records)

  PREFIX = "http://indivo.org/vocab/xml/documents#"

  for i, record in enumerate(records):
    record_dir = out_dir + ("/patient_%s" % i)

    # make the directory
    os.mkdir(record_dir)

    # we need basic info, first name, last name
    contact = ElementTree.fromstring(record.contact.content)
    last_name = contact.findtext("{%s}name/{%s}familyName" % (PREFIX,PREFIX))
    first_name = contact.findtext("{%s}name/{%s}givenName" % (PREFIX,PREFIX))
  
    # generate a random MRN
    mrn = "%s-%s-%s" % (utils.random_string(3, choices=string.digits),
                        utils.random_string(3, choices=string.digits),
                        utils.random_string(3, choices=string.digits))

    confirmation_code = utils.random_string(3, choices=string.digits)

    info = INFO % (last_name, first_name, mrn, confirmation_code)

    info_file = open(record_dir + "/info.xml", "w")
    info_file.write(info)
    info_file.close()

    # go through documents
    for i, doc in enumerate([r for r in record.documents.all()]):
      doc_file = open(record_dir + "/doc_" + str(i), "w")
      doc_file.write(doc.content)
      doc_file.close()

if __name__ == '__main__':
  dump_documents()

########NEW FILE########
__FILENAME__ = accessfunc
"""
Shared access functions used by Access Rules in __init__.py
"""

def full_control(principal, record):
    """
    A principal has full control over a record if it is the owner of the record,
    or if it has a full share of the record.
    """
    return principal.ownsRecord(record) \
        or principal.fullySharesRecord(record)

# PHA 3-legged access functions
# Must insure that:
# 1. Account represented by token may access record
# 2. token itself may access record
# 2.A: access token has full share of record
# 3. Account represented by token may access carenet
# 4. Token may access carenet
# 4.A: access token is unconstrained or 
# 4.B: constrained to THIS carenet
# 5. Proxying PHA is the app it should be.#
# (1,2) & (3,4) & 5 are different: now that we have different calls, 
#  they may be handled in different access rules
#
# So 2 functions:
# Note: 'effective principal' is the proxied account if we have 
#  an access token, and principal is the token itself. In autonomous apps,
# the 'effective principal' is the app, not the account, so let's not rely
# on effective principal. If we have an access token, then principal.account
# will give the account or None.
def pha_record_access(principal, record):
    # Is the access token authorized to touch the record?
    if not principal.scopedToRecord(record):
        return False

    # Is the account authorized to touch the record?
    account = principal.account
    if not account:
        # This could be an autonomous app, in which case we should authorize
        if not principal.effective_principal.is_autonomous:

            # This was a two-legged call: no 3-legged access
            return False
    else:
        if not full_control(account, record):
            
            # Account wasn't authorized to touch record
            return False

    return True

def pha_carenet_access(principal, carenet):
    # Is the access token authorized to touch the carenet?
    if not principal.isInCarenet(carenet):
        return False

    # Is the account authorized to touch the carenet?
    # No need to worry about autonomous apps: they can't be in carenets
    account = principal.account
    if not account:
        return False
    return account.isInCarenet(carenet) \


# Note: app-and-record-specific storage is NOT for record-sensitive data:
# it merely allows apps to store app-specific data on a record-by-record
# basis. Thus, as long as the PHA is pinned to the record, it may access
# record_app storage
def pha_record_app_access(principal, record, app):
    return principal.scopedToRecord(record) \
        and (principal.isSame(app) or principal.isProxiedByApp(app))

# PHA 2-legged access
# Note on semantics: The AccessToken Principal should always state that it 'Is the same'
# as its effective principal. I.e., it 'is' the PHA in a 2-legged call, and it 'is' the Account
# in a 3-legged call (though it is 'proxied by' a PHA).
# Thus, isSame(app) will return true in 2-legged but not 3-legged calls.
def pha_app_access(principal, app):
    return principal.isSame(app) 

########NEW FILE########
__FILENAME__ = access_rule
"""
Access Rule class for controlling access to views
"""
from indivo.views import *  
from indivo.models.base import BaseModel

_REGISTRY = {}

class AccessRule(object):

  @classmethod
  def register(cls, access_rule_obj):
    """
    Register a new access rule in the registry--stores a mapping
    from each view to the access function to be evaluated
    """
    for view_func in access_rule_obj.views:
      if _REGISTRY.has_key(view_func):
        raise ValueError("Can't assign the same view to multiple access rules: \
view %s assigned to access group %s AND %s"%(view_func.__name__, _REGISTRY[view_func].name, access_rule_obj.name))
      _REGISTRY[view_func] = access_rule_obj

  @classmethod
  def lookup(cls, view_func):
    """
    Lookup a view function in the registry. Gets an access function
    """
    if _REGISTRY.has_key(view_func):
      return _REGISTRY[view_func]
    return None

  def __init__(self, name, access_func, view_list):
    self.name = name
    self.rule = access_func
    self.views = view_list
    AccessRule.register(self)

  def __str__(self):
    return self.name

  #what args does this function need? With middleware or a decorator above, hopefully just principal and **kwargs
  def check(self, principal, **kwargs):
    return self.rule(principal, **kwargs)

########NEW FILE########
__FILENAME__ = auth
"""
Authentication for Indivo
"""

from django.http import HttpResponse, HttpResponseRedirect, Http404
import logging, functools, urllib
from django.core.exceptions import PermissionDenied
from indivo import models

USER_ID = "_user_id"
NUM_LOGIN_ATTEMPTS = '_num_login_attempts'

def authenticate(request, username, password=None, system=None):
  """Check credentials

  """
  try:
    if password:
      user = models.AccountAuthSystem.objects.get( 
          auth_system = models.AuthSystem.PASSWORD(), 
          username    = urllib.unquote(username).lower().strip()).account
      if user.is_active and user.password_check(password):
        user.on_successful_login()
        return user
      else:
        user.on_failed_login()
        raise PermissionDenied()
    elif system:
      user = models.AccountAuthSystem.objects.get( 
          auth_system = models.AuthSystem.objects.get(short_name=system), 
          username    = urllib.unquote(username).lower().strip()).account
      if user.is_active:
        return user
      else:
        raise PermissionDenied()
  except:
    raise PermissionDenied()
  return False

########NEW FILE########
__FILENAME__ = oauth_servers
"""
OAuth servers for users and admins
"""

import oauth.oauth as oauth

from django.db import transaction

from indivo import models

import datetime, logging


class UserDataStore(oauth.OAuthStore):
  """
  Layer between Python OAuth and Django database
  for user applications (PHAs)
  """

  def _get_pha(self, consumer_key):
    try:
      return models.PHA.objects.get(consumer_key = consumer_key)
    except models.PHA.DoesNotExist:
      return None

  def _get_token(self, token_str, pha=None):
    kwargs = {'token': token_str}
    if pha: kwargs['share__with_pha'] = pha

    try:
      return models.AccessToken.objects.get(**kwargs)
    except models.AccessToken.DoesNotExist:
      return None
    
  def verify_request_token_verifier(self, request_token, verifier):
    """
    Verify whether a request token's verifier matches
    The verifier is stored right in the request token itself
    """
    return request_token.verifier == verifier

  def lookup_consumer(self, consumer_key):
    """
    looks up a consumer
    """
    return self._get_pha(consumer_key)

  def create_request_token(self,  consumer, 
                           request_token_str, 
                           request_token_secret, 
                           verifier, 
                           oauth_callback, 
                           record_id=None,
                           carenet_id=None):
    """
    take a RequestToken and store it.

    anything after request_token_secret is extra kwargs custom to this server.
    """
    
    # look for the record that this might be mapped to
    # IMPORTANT: if the user who authorizes this token is not authorized to admin the record, it will be a no-go
    record = None
    if record_id:
      try:
        record = models.Record.objects.get(id = record_id)
      except models.Record.DoesNotExist:
        pass

    carenet = None
    if carenet_id:
      try:
        carenet = models.Carenet.objects.get(id = carenet_id)
      except models.Carenet.DoesNotExist:
        pass
      
    # (BA) added record to the req token now that it can store it
    # (BA 2010-05-06) added offline_capable
    return models.ReqToken.objects.create(pha             = consumer, 
                                          token           = request_token_str, 
                                          token_secret    = request_token_secret, 
                                          verifier        = verifier, 
                                          oauth_callback  = oauth_callback, 
                                          record          = record,
                                          carenet         = carenet)

  def lookup_request_token(self, consumer, request_token_str):
    """
    token is the token string
    returns a OAuthRequestToken

    consumer may be null.
    """
    try:
      # (BA) fix for consumer being null when we don't know yet who the consumer is
      if consumer:
        return models.ReqToken.objects.get(token = request_token_str, pha = consumer)
      else:
        return models.ReqToken.objects.get(token = request_token_str)
    except models.ReqToken.DoesNotExist:
      return None

  def authorize_request_token(self, request_token, record=None, carenet=None, account=None):
    """
    Mark a request token as authorized by the given user,
    with the given additional parameters.

    This means the sharing has beeen authorized, so the Share should be added now.
    This way, if the access token process fails, a re-auth will go through automatically.

    The account is whatever data structure was received by the OAuthServer.
    """

    if (record or carenet) == None:
      raise Exception("at least record or carenet must be set")

    request_token.authorized_at = datetime.datetime.utcnow()
    request_token.authorized_by = account

    # store the share in the request token
    # added use of defaults to reduce code size if creating an object
    if record:
      share, create_p = models.PHAShare.objects.get_or_create( record        = record, 
                                                               with_pha      = request_token.pha, 
                                                               defaults = {'authorized_at': request_token.authorized_at, 
                                                                           'authorized_by': request_token.authorized_by})
    else:
      # this is a carenet only situation, we NEVER create the share
      # but we do mark the request token with the share
      share = models.PHAShare.objects.get(record = carenet.record, with_pha = request_token.pha)
      if not request_token.carenet:
        request_token.carenet = carenet
      
    request_token.share = share
    request_token.save()
    

  def mark_request_token_used(self, consumer, request_token):
    """
    Mark that this request token has been used.
    Should fail if it is already used
    """
    new_rt = models.ReqToken.objects.get(pha = consumer, token = request_token.token)

    # authorized?
    if not new_rt.authorized:
      raise oauth.OAuthError("Request Token not Authorized")

    new_rt.delete()

  def create_access_token(self, consumer, request_token, access_token_str, access_token_secret):
    """
    Store the newly created access token that is the exchanged version of this
    request token.
    
    IMPORTANT: does not need to check that the request token is still valid, 
    as the library will ensure that this method is never called twice on the same request token,
    as long as mark_request_token_used appropriately throws an error the second time it's called.
    """

    share = request_token.share

    # FIXME: for autonomous apps, it would be good if we didn't keep handing out
    # long-lived tokens here.

    # create an access token for this share
    return share.new_access_token(access_token_str, 
                                  access_token_secret, 
                                  account=request_token.authorized_by,
                                  carenet=request_token.carenet)

  def lookup_access_token(self, consumer, access_token_str):
    """
    token is the token string
    returns a OAuthAccessToken
    """
    return self._get_token(token_str = access_token_str, pha = consumer)

  def check_and_store_nonce(self, nonce_str):
    """
    store the given nonce in some form to check for later duplicates
    
    IMPORTANT: raises an exception if the nonce has already been stored
    """
    nonce, created = models.Nonce.objects.get_or_create(nonce = nonce_str, 
                                                        oauth_type = self.__class__.__name__)
    if not created:
      raise oauth.OAuthError("Nonce already exists")


class MachineDataStore(oauth.OAuthStore):
  """
  Layer between Python OAuth and Django database.
  """

  def __init__(self, type = None):
    self.type = type

  def _get_machine_app(self, consumer_key):
    try:
      if self.type:
        return models.MachineApp.objects.get(app_type = self.type, consumer_key = consumer_key)
      else:
        # no type, we look at all machine apps
        return models.MachineApp.objects.get(consumer_key = consumer_key)
    except models.MachineApp.DoesNotExist:
      return None

  def lookup_consumer(self, consumer_key):
    """
    looks up a consumer
    """
    return self._get_machine_app(consumer_key)

  def lookup_request_token(self, consumer, request_token_str):
    """
    token is the token string
    returns a OAuthRequestToken

    consumer may be null.
    """
    return None

  def lookup_access_token(self, consumer, access_token_str):
    """
    token is the token string
    no access tokens for machine apps
    """
    return None

  def check_and_store_nonce(self, nonce_str):
    """
    store the given nonce in some form to check for later duplicates
    
    IMPORTANT: raises an exception if the nonce has already been stored
    """
    nonce, created = models.Nonce.objects.get_or_create(nonce = nonce_str,
                                                        oauth_type = self.__class__.__name__)
    if not created:
      raise oauth.OAuthError("Nonce already exists")


class SessionDataStore(oauth.OAuthStore):
  """
  Layer between Python OAuth and Django database.

  An oauth-server for in-RAM chrome-app user-specific tokens
  """

  def _get_chrome_app(self, consumer_key):
    try:
      return models.MachineApp.objects.get(consumer_key = consumer_key, app_type='chrome')
    except models.MachineApp.DoesNotExist:
      return None

  def _get_request_token(self, token_str, type=None, pha=None):
    try:
      return models.SessionRequestToken.objects.get(token = token_str)
    except models.SessionRequestToken.DoesNotExist:
      return None

  def _get_token(self, token_str, type=None, pha=None):
    try:
      return models.SessionToken.objects.get(token = token_str)
    except models.SessionToken.DoesNotExist:
      return None

  def lookup_consumer(self, consumer_key):
    """
    looks up a consumer
    """
    return self._get_chrome_app(consumer_key)

  def create_request_token(self, consumer, request_token_str, request_token_secret, verifier, oauth_callback):
    """
    take a RequestToken and store it.

    the only parameter is the user that this token is mapped to.
    """
    
    # we reuse sessiontoken for request and access
    token = models.SessionRequestToken.objects.create(token = request_token_str, secret = request_token_secret)
    return token

  def lookup_request_token(self, consumer, request_token_str):
    """
    token is the token string
    returns a OAuthRequestToken

    consumer may be null.
    """
    return self._get_request_token(token_str = request_token_str)

  def authorize_request_token(self, request_token, user=None):
    """
    Mark a request token as authorized by the given user,
    with the given additional parameters.

    The user is whatever data structure was received by the OAuthServer.
    """
    request_token.user = user
    request_token.authorized_p = True
    request_token.save()

  def mark_request_token_used(self, consumer, request_token):
    """
    Mark that this request token has been used.
    Should fail if it is already used
    """
    if not request_token.authorized_p:
      raise oauth.OAuthError("request token not authorized")

    request_token.delete()

  def create_access_token(self, consumer, request_token, access_token_str, access_token_secret):
    """
    Store the newly created access token that is the exchanged version of this
    request token.
    
    IMPORTANT: does not need to check that the request token is still valid, 
    as the library will ensure that this method is never called twice on the same request token,
    as long as mark_request_token_used appropriately throws an error the second time it's called.
    """

    token = models.SessionToken.objects.create( token   = access_token_str, 
                                                secret  = access_token_secret, 
                                                user    = request_token.user)
    return token

  def lookup_access_token(self, consumer, access_token_str):
    """
    token is the token string
    returns a OAuthAccessToken
    """
    return self._get_token(access_token_str)

  def check_and_store_nonce(self, nonce_str):
    """
    store the given nonce in some form to check for later duplicates
    
    IMPORTANT: raises an exception if the nonce has already been stored
    """
    nonce, created = models.Nonce.objects.get_or_create(nonce = nonce_str,
                                                        oauth_type = self.__class__.__name__)
    if not created:
      raise oauth.OAuthError("Nonce already exists")

class ConnectAuthDataStore(SessionDataStore):
  """ Hybrid data store that looks for a Chrome app consumer, but a Connect Access Token. """

  def _get_token(self, token_str, type=None, pha=None):
    try:
      return models.AccessToken.objects.get(token=token_str, connect_auth_p=True)
    except models.AccessToken.DoesNotExist:
      return None

ADMIN_OAUTH_SERVER = oauth.OAuthServer(store = MachineDataStore())
SESSION_OAUTH_SERVER = oauth.OAuthServer(store = SessionDataStore())
CONNECT_OAUTH_SERVER = oauth.OAuthServer(store = ConnectAuthDataStore())
OAUTH_SERVER = oauth.OAuthServer(store = UserDataStore())

########NEW FILE########
__FILENAME__ = security
"""
A number of security utilities for Indivo

based on django constructs
and Indivo data models
"""

from django.core.exceptions import *

import functools, copy, logging

from oauth import oauth, djangoutils

from indivo import models
from indivo.accesscontrol.oauth_servers import ADMIN_OAUTH_SERVER, OAUTH_SERVER, SESSION_OAUTH_SERVER, CONNECT_OAUTH_SERVER

##
## Gather information about the request
##

def get_oauth_info(request, server):
  try:
    oauth_request = server.extract_oauth_request(djangoutils.extract_request(request))
    consumer, token, parameters = server.check_resource_access(oauth_request)
    return consumer, token, parameters, oauth_request
  except oauth.OAuthError as e:
    return None, None, None, None

def get_principal(request):
  """Figure out the principal making the request.

  First PHA authenticated via Connect, then web user, then PHA, then Chrome App sudo'ing.

  """

  # is this a Connect-style authentication for an app?
  chrome_app, token, parameters, oauth_request = get_oauth_info(request, CONNECT_OAUTH_SERVER)
  if chrome_app and token:
    return token, oauth_request

  # is this a chrome app with a user session token?
  chrome_app, token, parameters, oauth_request = get_oauth_info(request, SESSION_OAUTH_SERVER)
  if token:
    return token.user, oauth_request
  
  # is this a userapp, either two-legged or authorized by the user?
  # IMPORTANT: the principal is the token, not the PHA itself
  # TODO: is this really the right thing, is the token the principal?
  pha, token, parameters, oauth_request = get_oauth_info(request, OAUTH_SERVER)
  if pha:
    if token:
      return token, oauth_request
    else:
      return pha, oauth_request

  # check a machine application
  admin_app, token, params, oauth_request = get_oauth_info(request, ADMIN_OAUTH_SERVER)
  if admin_app:
    return admin_app, oauth_request

  # is this a 'no-user' login?
  if not request.META.has_key('HTTP_AUTHORIZATION'):

    # Only 1 NoUser principal in the database: create it if it
    # doesn't yet exist
    try:
      no_user = models.NoUser.objects.all()[0]
    except IndexError:
      no_user = models.NoUser.objects.create(email="", type='NoUser')
    return no_user, None

  return None, None


########NEW FILE########
__FILENAME__ = example
from indivo.models import Allergy

allergy_fact = Allergy(
    allergic_reaction_title="Anaphylaxis",
    allergic_reaction_system="http://purl.bioontology.org/ontology/SNOMEDCT/",
    allergic_reaction_identifier="39579001",
    category_title="Drug allergy",
    category_system="http://purl.bioontology.org/ontology/SNOMEDCT/",
    category_identifier="416098002",
    drug_class_allergen_title="Sulfonamide Antibacterial",
    drug_class_allergen_system="http://purl.bioontology.org/ontology/NDFRT/",
    drug_class_allergen_identifier="N0000175503",
    severity_title="Severe",
    severity_system="http://purl.bioontology.org/ontology/SNOMEDCT/",
    severity_identifier="24484000",
    )

allergy_exclusion = AllergyExclusion(
    name_title="No known allergies",
    name_identifier="160244002",
    name_system="http://purl.bioontology.org/ontology/SNOMEDCT/",
)

########NEW FILE########
__FILENAME__ = extra
from indivo.data_models.options import DataModelOptions
from indivo.lib.rdf import PatientGraph
from indivo.serializers import DataModelSerializers
from indivo.validators import ValueInSetValidator, ExactValueValidator, NonNullValidator

SNOMED = 'http://purl.bioontology.org/ontology/SNOMEDCT/'
RXNORM = 'http://purl.bioontology.org/ontology/RXNORM/'
NUI = 'http://purl.bioontology.org/ontology/NDFRT/'
UNII = 'http://fda.gov/UNII/'

VALID_CATEGORY_IDS = [
    '414285001', # Food allergy
    '426232007', # Environmental allergy
    '416098002', # Drug allergy
    '59037007',  # Drug intolerance
    '235719002', # Food intolerance
    ]

VALID_SEVERITY_IDS = [
    '255604002', # Mild
    '442452003', # Life Threatening
    '6736007',   # Moderate
    '399166001', # Fatal
    '24484000',  # Severe
]

VALID_EXCLUSION_IDS = [
    '160244002', # No known allergies
    '428607008', # No known environmental allergy
    '429625007', # No known food allergy
    '409137002', # No known history of drug allergy
]

class AllergySerializers(DataModelSerializers):
    def to_rdf(queryset, result_count, record=None, carenet=None):
        if not record:
            record = carenet.record
        
        graph = PatientGraph(record)
        graph.addAllergyList(queryset.iterator())
        return graph.toRDF()

class AllergyOptions(DataModelOptions):
    model_class_name = 'Allergy'
    serializers = AllergySerializers
    field_validators = {
        'allergic_reaction_system': [ExactValueValidator(SNOMED)],
        'allergic_reaction_identifier': [NonNullValidator()],
        'allergic_reaction_title': [NonNullValidator()],
        'category_system': [ExactValueValidator(SNOMED)],
        'category_identifier': [ValueInSetValidator(VALID_CATEGORY_IDS)],
        'category_title': [NonNullValidator()],
        'drug_allergen_system': [ExactValueValidator(RXNORM, nullable=True)],
        'drug_class_allergen_system': [ExactValueValidator(NUI, nullable=True)],
        'food_allergen_system': [ExactValueValidator(UNII, nullable=True)],
        'severity_system': [ExactValueValidator(SNOMED)],
        'severity_identifier': [ValueInSetValidator(VALID_SEVERITY_IDS)],
        'severity_title': [NonNullValidator()],
        }

class AllergyExclusionSerializers(DataModelSerializers):
    def to_rdf(queryset, result_count, record=None, carenet=None):
        if not record:
            record = carenet.record
        
        graph = PatientGraph(record)
        graph.addAllergyExclusions(queryset.iterator())
        return graph.toRDF()

class AllergyExclusionOptions(DataModelOptions):
    model_class_name = 'AllergyExclusion'
    serializers = AllergyExclusionSerializers
    field_validators = {
        'name_system': [ExactValueValidator(SNOMED)],
        'name_identifier': [ValueInSetValidator(VALID_EXCLUSION_IDS)],
        'name_title': [NonNullValidator()],
        }

########NEW FILE########
__FILENAME__ = model
from indivo.models import Fact
from indivo.fields import CodedValueField

class Allergy(Fact):
    allergic_reaction = CodedValueField()
    category = CodedValueField()
    drug_allergen = CodedValueField()
    drug_class_allergen = CodedValueField()
    food_allergen = CodedValueField()
    severity = CodedValueField()

class AllergyExclusion(Fact):
    name = CodedValueField()

########NEW FILE########
__FILENAME__ = example
from indivo.models import Equipment
from indivo.lib.iso8601 import parse_utc_date as date

equipment_fact = Equipment(
    date_started=date("2009-02-05"),
    date_stopped=date("2009-06-12"),
    name="Pacemaker",
    vendor="Acme Medical Devices",
    description="it works!"
    )

########NEW FILE########
__FILENAME__ = model
from indivo.models import Fact
from django.db import models

class Equipment(Fact):
  date_started = models.DateField(null=True)
  date_stopped = models.DateField(null=True)
  name = models.CharField(max_length=40)
  vendor = models.CharField(max_length=40, null=True)
  description = models.TextField(null=True)




########NEW FILE########
__FILENAME__ = example
from indivo.models import Immunization
from indivo.lib.iso8601 import parse_utc_date as date

immunization_fact = Immunization(
    date=date("2009-05-16T12:00:00Z"),
    administration_status_title="Not Administered",
    administration_status_system="http://smartplatforms.org/terms/codes/ImmunizationAdministrationStatus#",
    administration_status_identifier="notAdministered", 
    product_class_title="TYPHOID",
    product_class_system="http://www2a.cdc.gov/nip/IIS/IISStandards/vaccines.asp?rpt=vg#",
    product_class_identifier="TYPHOID",
    product_name_title="typhoid, oral",
    product_name_system="http://www2a.cdc.gov/nip/IIS/IISStandards/vaccines.asp?rpt=cvx#",
    product_name_identifier="25",
    refusal_reason_title="Allergy to vaccine/vaccine components, or allergy to eggs",
    refusal_reason_system="http://smartplatforms.org/terms/codes/ImmunizationRefusalReason#",
    refusal_reason_identifier="allergy",
  )


########NEW FILE########
__FILENAME__ = extra
from indivo.serializers import DataModelSerializers
from indivo.validators import ValueInSetValidator, ExactValueValidator, NonNullValidator
from indivo.data_models.options import DataModelOptions
from indivo.lib.rdf import PatientGraph

IMM_STATUS_URI="http://smartplatforms.org/terms/codes/ImmunizationAdministrationStatus#"
IMM_PROD_URI="http://www2a.cdc.gov/nip/IIS/IISStandards/vaccines.asp?rpt=cvx#"
IMM_CLASS_URI="http://www2a.cdc.gov/nip/IIS/IISStandards/vaccines.asp?rpt=vg#"
IMM_REFUSE_URI="http://smartplatforms.org/terms/codes/ImmunizationRefusalReason#"

VALID_IMM_STATUSES = [
    'doseGiven',
    'notAdministered',
    'partialDose',
]

VALID_REFUSALS = [
    'vaccineUnavailable',
    'patientUndergoingDesensitizationTherapy',
    'notIndicatedPerGuidelines',
    'recentChemoOrRadiaton',
    'allergy',
    'providerDeferred',
    'documentedImmunityOrPreviousDisease',
    'previouslyVaccinated',
    'contraindicated',
    'patientOrParentRefused',
    'comfortMeasuresOnly',
    'possiblePriorAllergyOrReaction',
    'recentOrganOrStemCellTransplant',
]

class ImmunizationSerializers(DataModelSerializers):
    def to_rdf(queryset, result_count, record=None, carenet=None):
        if not record:
            record = carenet.record
        
        graph = PatientGraph(record)
        graph.addImmunizationList(queryset.iterator())
        return graph.toRDF()

class ImmunizationOptions(DataModelOptions):
    model_class_name = 'Immunization'
    serializers = ImmunizationSerializers
    field_validators = {
        'date': [NonNullValidator()],
        'administration_status_system': [ExactValueValidator(IMM_STATUS_URI)],
        'administration_status_identifier': [ValueInSetValidator(VALID_IMM_STATUSES)],
        'administration_status_title': [NonNullValidator()],
        'product_class_system': [ExactValueValidator(IMM_CLASS_URI, nullable=True)],
        'product_class_2_system': [ExactValueValidator(IMM_CLASS_URI, nullable=True)],
        'product_name_system': [ExactValueValidator(IMM_PROD_URI)],
        'product_name_identifier': [NonNullValidator()],
        'product_name_title': [NonNullValidator()],
        'refusal_reason_system': [ExactValueValidator(IMM_REFUSE_URI, nullable=True)],
        'refusal_reason_identifier': [ValueInSetValidator(VALID_REFUSALS, nullable=True)],
        }

########NEW FILE########
__FILENAME__ = model
from indivo.models import Fact
from django.db import models
from indivo.fields import CodedValueField

class Immunization(Fact):
    date = models.DateTimeField(null=True)
    administration_status = CodedValueField()
    product_class = CodedValueField()
    product_class_2 = CodedValueField()
    product_name = CodedValueField()
    refusal_reason = CodedValueField()

########NEW FILE########
__FILENAME__ = example
from indivo.models import LabResult
from indivo.lib.iso8601 import parse_utc_date as date

lab_fact = LabResult(
    abnormal_interpretation_title="Normal",
    abnormal_interpretation_system="http://smartplatforms.org/terms/codes/LabResultInterpretation#",
    abnormal_interpretation_identifier="normal",

    accession_number="AC09205823577",

    test_name_title="Serum Sodium",
    test_name_system="http://purl.bioontology.org/ontology/LNC/",
    test_name_identifier="2951-2",

    status_title="Final results: complete and verified",
    status_system="http://smartplatforms.org/terms/codes/LabStatus#",
    status_identifier="final",

    notes="Blood sample appears to have hemolyzed",

    quantitative_result_non_critical_range_max_value="155",
    quantitative_result_non_critical_range_max_unit="mEq/L",
    quantitative_result_non_critical_range_min_value="120",
    quantitative_result_non_critical_range_min_unit="mEq/L",

    quantitative_result_normal_range_max_value="145",
    quantitative_result_normal_range_max_unit="mEq/L",
    quantitative_result_normal_range_min_value="135",
    quantitative_result_normal_range_min_unit="mEq/L",

    quantitative_result_value_value="140", 
    quantitative_result_value_unit="mEq/L",

    collected_at=date("2010-12-27T17:00:00Z"), 

    collected_by_org_name="City Lab",
    collected_by_org_adr_country="USA",
    collected_by_org_adr_city="Springfield",
    collected_by_org_adr_postalcode="11111",
    collected_by_org_adr_region="MA",
    collected_by_org_adr_street="20 Elm St",

    collected_by_name_family="Finnialispi",
    collected_by_name_given="Tad",

    collected_by_role="Lab Specialist",
    )


########NEW FILE########
__FILENAME__ = extra
from indivo.serializers import DataModelSerializers
from indivo.validators import ValueInSetValidator, ExactValueValidator, NonNullValidator
from indivo.data_models.options import DataModelOptions
from indivo.lib.rdf import PatientGraph

LAB_INTERP_URI="http://smartplatforms.org/terms/codes/LabResultInterpretation#"
LAB_STATUS_URI="http://smartplatforms.org/terms/codes/LabStatus#"
LOINC_URI="http://purl.bioontology.org/ontology/LNC/"

VALID_INTERPS = [
    'normal',
    'critical',
    'abnormal',
]

VALID_STATUSES = [
    'correction',
    'preliminary',
    'final',
]

class LabSerializers(DataModelSerializers):
    def to_rdf(queryset, result_count, record=None, carenet=None):
        if not record:
            record = carenet.record
        
        graph = PatientGraph(record)
        graph.addLabList(queryset.iterator())
        return graph.toRDF()

class LabOptions(DataModelOptions):
    model_class_name = 'LabResult'
    serializers = LabSerializers
    field_validators = {
        'abnormal_interpretation_system': [ExactValueValidator(LAB_INTERP_URI, nullable=True)],
        'abnormal_interpretation_identifier': [ValueInSetValidator(VALID_INTERPS, nullable=True)],
        'test_name_system': [ExactValueValidator(LOINC_URI)],
        'test_name_identifier': [NonNullValidator()],
        'test_name_title': [NonNullValidator()],
        'status_system': [ExactValueValidator(LAB_STATUS_URI, nullable=True)],
        'status_identifier': [ValueInSetValidator(VALID_STATUSES, nullable=True)],
        }

########NEW FILE########
__FILENAME__ = model
from indivo.models import Fact
from django.db import models
from indivo.fields import CodedValueField, QuantitativeResultField, OrganizationField, NameField

class LabResult(Fact):
    abnormal_interpretation = CodedValueField()
    accession_number = models.CharField(max_length=255, null=True)
    test_name = CodedValueField()
    status = CodedValueField()
    narrative_result = models.CharField(max_length=255, null=True)
    notes = models.CharField(max_length=600, null=True)
    quantitative_result = QuantitativeResultField()
    collected_at = models.DateTimeField(null=True)
    collected_by_org = OrganizationField()
    collected_by_name = NameField()
    collected_by_role = models.CharField(max_length=255, null=True)

########NEW FILE########
__FILENAME__ = model
"""
Indivo Models for Measurements
"""

from indivo.models import Fact
from django.db import models
from django.conf import settings

class Measurement(Fact):
  type = models.CharField(max_length=24)
  value = models.FloatField()
  unit = models.CharField(max_length=8)
  datetime = models.DateTimeField()

  def set_source_docs(self, docs):
    self.source_docs = docs

  def __unicode__(self):
    return 'Measurement %s' % self.id


########NEW FILE########
__FILENAME__ = example
from indivo.models import Medication, Fill
from indivo.lib.iso8601 import parse_utc_date as date

med = Medication(
    drugName_title="AMITRIPTYLINE HCL 50 MG TAB",
    drugName_system="http://purl.bioontology.org/ontology/RXNORM/",
    drugName_identifier="856845",
    endDate=date("2007-08-14"),
    frequency_value="2",
    frequency_unit="/d",
    instructions="Take two tablets twice daily as needed for pain",
    provenance_title="Derived by prescription",
    provenance_system="http://smartplatforms.org/terms/codes/MedicationProvenance#",
    provenance_identifier="prescription",
    quantity_value="2",
    quantity_unit="{tablet}",
    startDate=date("2007-03-14"),
    )

fill1 = Fill(
    date=date("2007-03-14T04:00:00Z"),
    dispenseDaysSupply=30,
    pbm="T00000000001011",
    pharmacy_ncpdpid="5235235",
    pharmacy_org="CVS #588",
    pharmacy_adr_country="Australia",
    pharmacy_adr_city="WonderCity",
    pharmacy_adr_postalcode="5555",
    pharmacy_adr_street="111 Lake Drive", 
    provider_dea_number="325555555",
    provider_npi_number="5235235",
    provider_email="joshua.mandel@fake.emailserver.com",
    provider_name_given="Josuha",
    provider_name_family="Mandel",
    provider_tel_1_type="w",
    provider_tel_1_number="1-235-947-3452",
    provider_tel_1_preferred_p=True,
    quantityDispensed_value="60",
    quantityDispensed_unit="{tablet}"
    )

fill2 = Fill(
    date=date("2007-04-14T04:00:00Z"),
    dispenseDaysSupply=30,
    pbm="T00000000001011",
    pharmacy_ncpdpid="5235235",
    pharmacy_org="CVS #588",
    pharmacy_adr_country="Australia",
    pharmacy_adr_city="WonderCity",
    pharmacy_adr_postalcode="5555",
    pharmacy_adr_street="111 Lake Drive", 
    provider_dea_number="325555555",
    provider_npi_number="5235235",
    provider_email="joshua.mandel@fake.emailserver.com",
    provider_name_given="Josuha",
    provider_name_family="Mandel",
    provider_tel_1_type="w",
    provider_tel_1_number="1-235-947-3452",
    provider_tel_1_preferred_p=True,
    quantityDispensed_value="60",
    quantityDispensed_unit="{tablet}",
    )

# save the medication so we can relate other objects to it
med.save()
med.fulfillments = [fill1, fill2]
med.save()

########NEW FILE########
__FILENAME__ = extra
from indivo.serializers import DataModelSerializers
from indivo.validators import ValueInSetValidator, ExactValueValidator, NonNullValidator
from indivo.data_models.options import DataModelOptions
from indivo.lib.rdf import PatientGraph

RXN_URI="http://purl.bioontology.org/ontology/RXNORM/"
MED_PROV_URI="http://smartplatforms.org/terms/codes/MedicationProvenance#"

MED_PROVS = [
    'prescription',
    'fulfillment',
    'administration',
    'reconciliation',
    'patientReport',
]

class MedicationSerializers(DataModelSerializers):
    def to_rdf(queryset, result_count, record=None, carenet=None):
        if not record:
            record = carenet.record
        
        graph = PatientGraph(record)
        graph.addMedList(queryset.iterator())
        return graph.toRDF()

class MedicationOptions(DataModelOptions):
    model_class_name = 'Medication'
    serializers = MedicationSerializers
    field_validators = {
        'drugName_system': [ExactValueValidator(RXN_URI)],
        'drugName_identifier': [NonNullValidator()],
        'drugName_title': [NonNullValidator()],
        'provenance_system': [ExactValueValidator(MED_PROV_URI, nullable=True)],
        'provenance_identifier': [ValueInSetValidator(MED_PROVS, nullable=True)],
        'startDate': [NonNullValidator()],
        }


class FillSerializers(DataModelSerializers):
    def to_rdf(queryset, result_count, record=None, carenet=None):
        if not record:
            record = carenet.record

        graph = PatientGraph(record)
        graph.addFillList(queryset.iterator())
        return graph.toRDF()

class FillOptions(DataModelOptions):
    model_class_name = 'Fill'
    serializers = FillSerializers
    field_validators = {
        'date': [NonNullValidator()],
        'dispenseDaysSupply': [NonNullValidator()],
        }

########NEW FILE########
__FILENAME__ = model
from indivo.models import Fact
from django.db import models
from indivo.fields import CodedValueField, ValueAndUnitField, PharmacyField, ProviderField

class Medication(Fact):
    drugName = CodedValueField()
    endDate = models.DateField(null=True)
    frequency = ValueAndUnitField()
    instructions = models.CharField(max_length=255, null=True)
    provenance = CodedValueField()
    quantity = ValueAndUnitField()
    startDate = models.DateField(null=True)

class Fill(Fact):
    date = models.DateTimeField(null=True)
    dispenseDaysSupply = models.FloatField(null=True)
    pbm = models.CharField(max_length=255, null=True)
    pharmacy = PharmacyField()
    provider = ProviderField()
    quantityDispensed = ValueAndUnitField()
    medication = models.ForeignKey(Medication, null=True, related_name='fulfillments')
  

########NEW FILE########
__FILENAME__ = example
from indivo.models import Problem
from indivo.lib.iso8601 import parse_utc_date as date

problem_fact = Problem(
    startDate=date("2009-05-16T12:00:00Z"),
    endDate=date("2009-05-16T16:00:00Z"),
    name_title="Backache (finding)",
    name_system="http://purl.bioontology.org/ontology/SNOMEDCT/",
    name_identifier="161891005",
    )

########NEW FILE########
__FILENAME__ = extra
from indivo.serializers import DataModelSerializers
from indivo.data_models.options import DataModelOptions
from indivo.lib.rdf import PatientGraph
from indivo.validators import ValueInSetValidator, ExactValueValidator, NonNullValidator

SNOMED_URI = 'http://purl.bioontology.org/ontology/SNOMEDCT/'

class ProblemSerializers(DataModelSerializers):

    def to_rdf(queryset, result_count, record=None, carenet=None):
        if not record:
            record = carenet.record
        
        graph = PatientGraph(record)
        graph.addProblemList(queryset.iterator())
        return graph.toRDF()        

class ProblemOptions(DataModelOptions):
    model_class_name = 'Problem'
    serializers = ProblemSerializers
    field_validators = {
        'name_system': [ExactValueValidator(SNOMED_URI)],
        'name_identifier': [NonNullValidator()],
        'name_title': [NonNullValidator()],
        'startDate': [NonNullValidator()],
        }

########NEW FILE########
__FILENAME__ = model
from indivo.models import Fact
from indivo.fields import CodedValueField
from django.db import models

class Problem(Fact):
  startDate = models.DateTimeField(null=True)
  endDate = models.DateTimeField(null=True)
  name = CodedValueField()
  notes = models.TextField(null=True)

########NEW FILE########
__FILENAME__ = example
from indivo.models import Procedure
from indivo.lib.iso8601 import parse_utc_date as date

procedure_fact = Procedure(
    date_performed=date("2009-05-16T12:00:00"),
    name="Appendectomy",
    name_type="http://codes.indivo.org/procedures#",
    name_value="123",
    name_abbrev="append",
    provider_name="Kenneth Mandl",
    provider_institution="Children's Hospital Boston",
    location="300 Longwood Ave, Boston MA 02115",
    comments="Went great!"
    )




########NEW FILE########
__FILENAME__ = model
from indivo.models import Fact
from django.db import models

class Procedure(Fact):
  date_performed = models.DateTimeField(null=True)
  name = models.CharField(max_length=100)
  name_type = models.CharField(max_length=80, null=True)
  name_value = models.CharField(max_length=40, null=True)
  name_abbrev = models.CharField(max_length=20, null=True)
  provider_name = models.CharField(max_length=200, null=True)
  provider_institution = models.CharField(max_length=200, null=True)
  location = models.CharField(max_length=100, null=True)
  comments = models.TextField(null=True)



########NEW FILE########
__FILENAME__ = example
from indivo.models import SimpleClinicalNote
from indivo.lib.iso8601 import parse_utc_date as date

simple_clinical_note_fact = SimpleClinicalNote(
    date_of_visit=date("2010-02-02T12:00:00Z"),
    finalized_at=date("2010-02-03T13:12:00Z"),
    visit_type="Acute Care",
    visit_type_type="http://codes.indivo.org/visit-types#",
    visit_type_value="123",
    visit_type_abbrev="acute",
    visit_location="Longfellow Medical",
    specialty="Hematology/Oncology",
    specialty_type="http://codes.indivo.org/specialties#",
    specialty_value="234",
    specialty_abbrev="hem-onc",
    signed_at=date("2010-02-03T13:12:00Z"),
    provider_name="Kenneth Mandl",
    provider_institution="Children's Hospital Boston",
    chief_complaint="stomach ache",
    content="Patient presents with ..."
    )


########NEW FILE########
__FILENAME__ = model
from indivo.models import Fact
from django.db import models

class SimpleClinicalNote(Fact):
    date_of_visit = models.DateTimeField()
    finalized_at = models.DateTimeField(null=True)
    visit_type = models.CharField(null=True,max_length=100)
    visit_type_type = models.CharField(max_length=80, null=True)
    visit_type_value = models.CharField(max_length=40, null=True)
    visit_type_abbrev = models.CharField(max_length=20, null=True)
    visit_location = models.CharField(max_length=200, null=True)
    specialty = models.CharField(null=True, max_length=100)
    specialty_type = models.CharField(max_length=80, null=True)
    specialty_value = models.CharField(max_length=40, null=True)
    specialty_abbrev = models.CharField(max_length=20, null=True)
    signed_at = models.DateTimeField(null=True)
    provider_name = models.CharField(null=True,max_length=200)
    provider_institution = models.CharField(max_length=200, null=True)
    chief_complaint = models.CharField(null=True,max_length=255)
    content = models.TextField(null=True)


########NEW FILE########
__FILENAME__ = example
from indivo.models import Encounter, VitalSigns
from indivo.lib.iso8601 import parse_utc_date as date

encounter_fact = Encounter(
    startDate=date("2009-05-16T12:00:00Z"),
    endDate=date("2009-05-16T16:00:00Z"),
    facility_name="Wonder Hospital",
    facility_adr_country="Australia",
    facility_adr_city="WonderCity",
    facility_adr_postalcode="5555",
    facility_adr_street="111 Lake Drive", 
    provider_dea_number="325555555",
    provider_npi_number="5235235",
    provider_email="joshua.mandel@fake.emailserver.com",
    provider_name_given="Josuha",
    provider_name_family="Mandel",
    provider_tel_1_type="w",
    provider_tel_1_number="1-235-947-3452",
    provider_tel_1_preferred_p=True,
    encounterType_title="Ambulatory encounter",
    encounterType_system="http://smartplatforms.org/terms/codes/EncounterType#",
    encounterType_identifier="ambulatory",
    )
encounter_fact.save()

# NOTE: all vitals readings are OPTIONAL. You don't need
# to add all 56 fields here to create a VitalSigns object.
vitals_fact = VitalSigns(
    date=date("2009-05-16T12:00:00Z"),
    encounter=encounter_fact,

    # Blood Pressure
    bp_position_title="Sitting",
    bp_position_identifier="33586001",
    bp_position_system="http://purl.bioontology.org/ontology/SNOMEDCT/",
    bp_site_title="Right arm",
    bp_site_identifier="368209003",
    bp_site_system="http://purl.bioontology.org/ontology/SNOMEDCT/",
    bp_method_title="Auscultation",
    bp_method_identifier="auscultation",
    bp_method_system="http://smartplatforms.org/terms/codes/BloodPressureMethod#",
    bp_diastolic_unit="mm[Hg]",
    bp_diastolic_value=82,
    bp_diastolic_name_title="Intravascular diastolic",
    bp_diastolic_name_identifier="8462-4",
    bp_diastolic_name_system="http://purl.bioontology.org/ontology/LNC/",
    bp_systolic_unit="mm[Hg]",
    bp_systolic_value=132,
    bp_systolic_name_title="Intravascular systolic",
    bp_systolic_name_identifier="8480-6",
    bp_systolic_name_system="http://purl.bioontology.org/ontology/LNC/",

    # Body Mass Index
    bmi_unit="kg/m2",
    bmi_value=21.8,
    bmi_name_title="Body mass index",
    bmi_name_system="http://purl.bioontology.org/ontology/LNC/",
    bmi_name_identifier="39156-5",

    # Heart Rate
    heart_rate_unit="{beats}/min",
    heart_rate_value=70,
    heart_rate_name_title="Heart rate",
    heart_rate_name_system="http://purl.bioontology.org/ontology/LNC/",
    heart_rate_name_identifier="8867-4",

    # Height
    height_unit="m",
    height_value=1.8,
    height_name_title="Body height",
    height_name_system="http://purl.bioontology.org/ontology/LNC/",
    height_name_identifier="8302-2",

    # Oxygen Saturation
    oxygen_saturation_unit="%{HemoglobinSaturation}",
    oxygen_saturation_value=99,
    oxygen_saturation_name_title="Oxygen saturation",
    oxygen_saturation_name_system="http://purl.bioontology.org/ontology/LNC/",
    oxygen_saturation_name_identifier="2710-2",

    # Respiratory Rate
    respiratory_rate_unit="{breaths}/min",
    respiratory_rate_value=16,
    respiratory_rate_name_title="Respiration rate",
    respiratory_rate_name_system="http://purl.bioontology.org/ontology/LNC/",
    respiratory_rate_name_identifier="9279-1",

    # Temperature
    temperature_unit="Cel",
    temperature_value=37,
    temperature_name_title="Body temperature",
    temperature_name_system="http://purl.bioontology.org/ontology/LNC/",
    temperature_name_identifier="8310-5",

    # Weight
    weight_unit="kg",
    weight_value=70.8,
    weight_name_title="Body weight",
    weight_name_system="http://purl.bioontology.org/ontology/LNC/",
    weight_name_identifier="3141-9",
)

########NEW FILE########
__FILENAME__ = extra
from indivo.serializers import DataModelSerializers
from indivo.validators import ValueInSetValidator, ExactValueValidator, NonNullValidator
from indivo.data_models.options import DataModelOptions
from indivo.lib.rdf import PatientGraph

SNOMED_URI="http://purl.bioontology.org/ontology/SNOMEDCT/"
BP_METHOD_URI="http://smartplatforms.org/terms/codes/BloodPressureMethod#"
ENC_TYPE_URI="http://smartplatforms.org/terms/codes/EncounterType#"
LOINC_URI="http://purl.bioontology.org/ontology/LNC/"

BP_POSITION_IDS = [
    '40199007', # Supine
    '33586001', # Sitting
    '10904000', # Standing
]

BP_SITE_IDS = [
    '61396006',  # Left thigh
    '368209003', # Right arm
    '11207009',  # Right thigh
    '368208006', # Left arm
]

BP_METHODS = [
    'invasive',
    'palpation',
    'machine',
    'auscultation',
]

VITAL_SIGN_IDS = {
    'bp_diastolic': ['8462-4'],      # Intravascular diastolic
    'bp_systolic': ['8480-6'],       # Intravascular systolic
    'bmi': ['39156-5'],              # Body mass index
    'heart_rate': ['8867-4'],        # Heart rate
    'height': ['8306-3',             # Body height (lying)
               '8302-2'],            # Body height
    'oxygen_saturation': ['2710-2'], # Oxygen saturation
    'resp_rate': ['9279-1'],         # Respiration rate
    'temperature': ['8310-5'],       # Body temperature
    'weight': ['3141-9'],            # Body weight
    }

UNITS = {
    'bp': ['mm[Hg]'],
    'bmi': ['kg/m2'],
    'heart_rate': ['{beats}/min'],
    'height': ['m'],
    'oxygen_saturation': ['%{HemoglobinSaturation}'],
    'resp_rate': ['{breaths}/min'],
    'temperature': ['Cel'],
    'weight': ['kg'],
}

ENC_TYPES = [
    'home',
    'emergency',
    'ambulatory',
    'inpatient',
    'field',
    'virtual',
]

class EncounterSerializers(DataModelSerializers):
    def to_rdf(queryset, result_count, record=None, carenet=None):
        if not record:
            record = carenet.record
        
        graph = PatientGraph(record)
        graph.addEncounterList(queryset.iterator())
        return graph.toRDF()

class EncounterOptions(DataModelOptions):
    model_class_name = 'Encounter'
    serializers = EncounterSerializers
    field_validators = {
        'encounterType_system': [ExactValueValidator(ENC_TYPE_URI)],
        'encounterType_identifier': [ValueInSetValidator(ENC_TYPES)],
        'encounterType_title': [NonNullValidator()],
        'startDate': [NonNullValidator()],
        }


class VitalsSerializers(DataModelSerializers):
    def to_rdf(queryset, result_count, record=None, carenet=None):
        if not record:
            record = carenet.record

        graph = PatientGraph(record)
        graph.addVitalsList(queryset.iterator())
        return graph.toRDF()

class VitalsOptions(DataModelOptions):
    model_class_name = 'VitalSigns'
    serializers = VitalsSerializers
    field_validators = {
        'date': [NonNullValidator()],
        
        'bp_position_system': [ExactValueValidator(SNOMED_URI, nullable=True)],
        'bp_position_identifier': [ValueInSetValidator(BP_POSITION_IDS, nullable=True)],
        'bp_site_system': [ExactValueValidator(SNOMED_URI, nullable=True)],
        'bp_site_identifier': [ValueInSetValidator(BP_SITE_IDS, nullable=True)],
        'bp_method_system': [ExactValueValidator(BP_METHOD_URI, nullable=True)],
        'bp_method_identifier': [ValueInSetValidator(BP_METHODS, nullable=True)],
        'bp_diastolic_unit': [ValueInSetValidator(UNITS['bp'], nullable=True)],
        'bp_diastolic_name_system': [ExactValueValidator(LOINC_URI, nullable=True)],
        'bp_diastolic_name_identifier': [ValueInSetValidator(VITAL_SIGN_IDS['bp_diastolic'], nullable=True)],
        'bp_systolic_unit': [ValueInSetValidator(UNITS['bp'], nullable=True)],
        'bp_systolic_name_system': [ExactValueValidator(LOINC_URI, nullable=True)],
        'bp_systolic_name_identifier': [ValueInSetValidator(VITAL_SIGN_IDS['bp_systolic'], nullable=True)],

        'bmi_unit': [ValueInSetValidator(UNITS['bmi'], nullable=True)],
        'bmi_name_system': [ExactValueValidator(LOINC_URI, nullable=True)],
        'bmi_name_identifier': [ValueInSetValidator(VITAL_SIGN_IDS['bmi'], nullable=True)],
       
        'heart_rate_unit': [ValueInSetValidator(UNITS['heart_rate'], nullable=True)],
        'heart_rate_name_system': [ExactValueValidator(LOINC_URI, nullable=True)],
        'heart_rate_name_identifier': [ValueInSetValidator(VITAL_SIGN_IDS['heart_rate'], nullable=True)],

        'height_unit': [ValueInSetValidator(UNITS['height'], nullable=True)],
        'height_name_system': [ExactValueValidator(LOINC_URI, nullable=True)],
        'height_name_identifier': [ValueInSetValidator(VITAL_SIGN_IDS['height'], nullable=True)],

        'oxygen_saturation_unit': [ValueInSetValidator(UNITS['oxygen_saturation'], nullable=True)],
        'oxygen_saturation_name_system': [ExactValueValidator(LOINC_URI, nullable=True)],
        'oxygen_saturation_name_identifier': [ValueInSetValidator(VITAL_SIGN_IDS['oxygen_saturation'], nullable=True)],

        'respiratory_rate_unit': [ValueInSetValidator(UNITS['resp_rate'], nullable=True)],
        'respiratory_rate_name_system': [ExactValueValidator(LOINC_URI, nullable=True)],
        'respiratory_rate_name_identifier': [ValueInSetValidator(VITAL_SIGN_IDS['resp_rate'], nullable=True)],

        'temperature_unit': [ValueInSetValidator(UNITS['temperature'], nullable=True)],
        'temperature_name_system': [ExactValueValidator(LOINC_URI, nullable=True)],
        'temperature_name_identifier': [ValueInSetValidator(VITAL_SIGN_IDS['temperature'], nullable=True)],

        'weight_unit': [ValueInSetValidator(UNITS['weight'], nullable=True)],
        'weight_name_system': [ExactValueValidator(LOINC_URI, nullable=True)],
        'weight_name_identifier': [ValueInSetValidator(VITAL_SIGN_IDS['weight'], nullable=True)],

        }


########NEW FILE########
__FILENAME__ = model
from indivo.models import Fact
from django.db import models
from indivo.fields import BloodPressureField, VitalSignField, CodedValueField, OrganizationField, ProviderField

class VitalSigns(Fact):
    date = models.DateTimeField(null=True)
    encounter = models.ForeignKey('Encounter', null=True)
    bp = BloodPressureField()
    bmi = VitalSignField()
    heart_rate = VitalSignField()
    height = VitalSignField()
    oxygen_saturation = VitalSignField()
    respiratory_rate = VitalSignField()
    temperature = VitalSignField()
    weight = VitalSignField()

class Encounter(Fact):
  startDate = models.DateTimeField(null=True)
  endDate = models.DateTimeField(null=True)
  facility = OrganizationField()
  provider = ProviderField()
  encounterType = CodedValueField()

    
    
    

########NEW FILE########
__FILENAME__ = options
"""
Options processing and loading for Indivo medical data models.
"""

from indivo.serializers import DataModelSerializers
from indivo.validators import NonNullValidator

class DataModelOptions(object):
    """ Defines optional extra functionality for Indivo datamodels.

    To add options to a datamodel, subclass this class and override 
    its attributes. 

    Currently available options are:

    * *model_class_name*: **Required**. The name of the datamodel class 
      to attach to.

    * *serializers*: Custom serializers for the data model. Should be 
      set to a subclass of :py:class:`indivo.serializers.DataModelSerializers`.

    * *field_validators*: Custom validators for fields on the data model. A
      dictionary, where keys are field names on the model, and values are lists of
      `Django Validators <https://docs.djangoproject.com/en/1.2/ref/validators/>`_ 
      to be run against the field.

    """

    model_class_name = ''    
    serializers = None
    field_validators = {}

    @classmethod
    def attach(cls, data_model_class):
        """ Apply these options to a data model class.

        Attaches custom serializers and field validators.

        """
        
        if not cls.attach_p(data_model_class): return

        cls.attach_serializers(data_model_class)
        cls.attach_validators(data_model_class)

    @classmethod
    def attach_p(cls, data_model_class):
        """ True if these options should be applied to data_model_class.

        Right now, does ``cls.model_class_name`` match ``data_model_class.__name__``?
        
        """
        
        return cls.model_class_name == data_model_class.__name__

    @classmethod
    def attach_serializers(cls, data_model_class):
        if not cls.serializers: return # No custom serializers

        if issubclass(cls.serializers, DataModelSerializers):
            cls.serializers.attach_to_data_model(data_model_class)
        else:
            raise ValueError("Serializers must be defined on a custom subclass of indivo.serializers.DataModelSerializers")

    @classmethod
    def attach_validators(cls, data_model_class):
        if not cls.field_validators: return # No custom validators

        for field_name, validators in cls.field_validators.iteritems():
            field = data_model_class._meta.get_field(field_name)
            for v in validators:
                
                # We don't actually run NonNullValidators, we simply set blank=False
                # on the field, and let Django do the work
                if isinstance(v, NonNullValidator):
                    field.blank = False
                else:
                    field.validators.append(v)

########NEW FILE########
__FILENAME__ = document_processing
"""
IDP - Indivo Document Processing
"""

import os
import sys
import hashlib
import re
from StringIO import StringIO
from lxml import etree

from indivo.models import DocumentSchema, Fact
from django.conf import settings
from django.core.files.base import ContentFile

from indivo.lib.utils import LazyProperty
from indivo.lib.simpledatamodel import SDMXData, SDMJData
from . import REGISTERED_SCHEMAS

DEFAULT_PREFIX= "http://indivo.org/vocab/xml/documents#"
ETREE_NS_RE = re.compile(r'{(?P<ns>.*?)}')

# Mimetypes that we shouldn't treat as binary
# Only covering the most common cases here--expand as needed
TEXT_MIMETYPES = [
  'application/xml',
  'text/xml',
  'text/plain', 
  'application/json',
  'text/html',
]

# Mimetypes that represent XML
# We can validate XML Syntax for these types
XML_MIMETYPES = [
  'application/xml',
  'text/xml',
]

# subclass of utils.LazyProperty which returns None if the object is binary
class NonBinaryLazyProperty(LazyProperty):
  def __get__(self, obj, _=None):
    if obj and obj.is_binary:
      setattr(obj, self._calculate.func_name, None)
      return None
    return super(NonBinaryLazyProperty, self).__get__(obj)

class DocumentProcessing(object):

  @classmethod
  def expand_schema(cls, schema):
    """
    go from Allergy to http://indivo.org/vocab/xml/documents#Allergy
    """
    if schema is None:
      return None

    if schema.find(':') > -1 or schema.find('/') > -1:
      return schema
    else:
      return "%s%s" % (DEFAULT_PREFIX, schema)

  def __init__(self, content, mime_type):

    # if mime_type is null, we assume it's XML
    self.is_binary = (mime_type and mime_type not in TEXT_MIMETYPES)
    self.is_xml = mime_type in XML_MIMETYPES
    self.content = content
    self.processed_facts = []

    # Validate basic XML Syntax, if required
    if self.is_xml and settings.VALIDATE_XML_SYNTAX:
      self.validate_xml_syntax() 

  def process(self):

    # Validate the XML, if necessary
    if self.validate_p:
      self.validate_xml()

    # Process the doc into Fact objects, if necessary
    if self.process_p:
      self.processed_facts = self._process()

  @property # Not a NonBinaryLazyProperty, as it depends on the value of settings.VALIDATE_XML
  def validate_p(self):
    """ Whether or not this doc needs validation.

    Right now:
    * is it non-binary?
    * Can it be validated?
    * Are we configured to validate XML?

    """

    return settings.VALIDATE_XML and self.validation_func

  @NonBinaryLazyProperty
  def process_p(self):
    """ Whether or not this doc needs processing. 

    Right now:

    * Can it be transformed?

    """
    
    return self.transform_func

  def _process(self):
    """ Process the incoming doc """

    ret = []

    # Run the transform
    output = self.transformed_doc

    # If the output of the transform was a Fact object, we're done
    if isinstance(output, Fact):
      ret.append(output)

    # If the output of the transform was a list of Fact objects,
    # just return the list
    elif isinstance(output, list):
      
      # But they have to all be Fact objects
      for fact in output:
        if not isinstance(fact, Fact):
          raise ValueError("Transform outputted a list of fact objects, but not all list elements were facts.")
        ret.append(fact)
    
    return ret

  @NonBinaryLazyProperty
  def content_etree(self):
    try:
      return etree.parse(StringIO(self.content))
    except Exception, e:
      return None # Don't raise an error, so processing can still 'work' if validation is turned off

  @NonBinaryLazyProperty
  def basename(self):
    if self.content_etree is not None:
      return ETREE_NS_RE.sub('', self.content_etree.getroot().tag)
    return None

  @NonBinaryLazyProperty
  def fqn(self):
    if self.content_etree is not None:
      return ETREE_NS_RE.sub('\g<ns>', self.content_etree.getroot().tag)
    return None

  @NonBinaryLazyProperty
  def validation_func(self):
    if self.fqn and REGISTERED_SCHEMAS.has_key(self.fqn):
      return REGISTERED_SCHEMAS[self.fqn][0]
    return None

  @NonBinaryLazyProperty
  def transform_func(self):
    if self.fqn and REGISTERED_SCHEMAS.has_key(self.fqn):
      return REGISTERED_SCHEMAS[self.fqn][1]
    return None

  @LazyProperty
  def digest(self):
    if self.is_binary:
      return hashlib.sha1(self.content).hexdigest()
    else:
      md = hashlib.sha256()
      md.update(self.content)
      return md.hexdigest()

  @LazyProperty
  def size(self):
    if self.is_binary:
      file = ContentFile(self.content)
      return file.size
    else:
      return len(self.content)

  @NonBinaryLazyProperty
  def transformed_doc(self):
    try:
      if self.transform_func:
        return self.transform_func(self.content_etree)
    except ValueError:
      raise
    except Exception:
      pass
    
    # return None if we don't have a transform func,
    # or if the transform didn't work
    return None

  def validate_xml_syntax(self):
    """ Make sure that the incoming document is properly formatted XML, regardless of content. """
    try:
      xml_etree = etree.XML(self.content)
    except Exception as e:
      raise ValueError("Input document didn't parse as XML, error was: %s"%(str(e)))

  def validate_xml(self):
    """ Validate our doc against its XSD. """
    try:
      if self.validation_func:
        self.validation_func(self.content_etree)
    except etree.DocumentInvalid as e:
      raise ValueError("Input document didn't validate, error was: %s"%(str(e)))

########NEW FILE########
__FILENAME__ = document_utils
from indivo.models import Document

class DocumentUtils:

  def get_latest_doc(self, docid):
    docobj = Document.objects.get(id=docid)

    try:
      latest = Document.objects.get(original=docobj.original,
                                    replaced_by=None)
    except Document.DoesNotExist:
      raise ValueError("No objects exist with original document of passed document, db is in a corrupted state")
    except Document.MultipleObjectsReturned:
      raise ValueError("More than one 'latest' document, db is in a corrupted state")
    
    return latest

  def is_binary(self, data):
    NULL_CHR = '#'
    count, null_count  = 1.0, 0.0 
    threshold = 0.20
    if isinstance(data, str) or isinstance(data, unicode):
      printable = ''.join(["%s" % ((  ord(x) <= 127 and \
                                      len(repr(chr(ord(x))))  == 3 and \
                                      chr(ord(x))) or \
                                    NULL_CHR) 
                                for x in data])
      for char in printable:
        if char == NULL_CHR:
          null_count += 1
        count += 1
      if null_count / count  > threshold:
        return True
    return False


########NEW FILE########
__FILENAME__ = transform
from indivo.lib.simpledatamodel import SDMXData, SDMJData
from lxml import etree

class BaseTransform(object):
    """ Base class for python transforms.

    All transforms (classes that take an etree representing a document
    and output processed data in a different form) should derive from
    this class. 
    
    Subclasses should implement any number of to_* methods. When 
    called (like a function), BaseTransform will find and evaluate the
    first valid transformation method it finds (with no promises about
    ordering).
    
    """
    
    def __init__(self):
        pass # Nothing to do yet

    @classmethod
    def from_transformation_func(cls, transform_func, override_method):
        """ Get a BaseTransform object with a transformation method already overridden. """
        ret = cls()
        setattr(ret, override_method, transform_func)
        return ret

    def to_facts(self, doc_etree):
        """ Transform an etree into a list of Indivo Fact objects.

        Subclasses should implement this method, which takes an
        ``lxml.etree._ElementTree`` (the result of calling ``etree.parse()``),
        and returns a list of :py:class:`indivo.models.Fact` subclasses.

        """

        raise NotImplementedError

    def to_sdmj(self, doc_etree):
        """ Transform an etree into a string of valid Simple Data Model JSON.

        Subclasses should implement this method, which takes an
        ``lxml.etree._ElementTree`` (the result of calling ``etree.parse()``),
        and returns a string in valid :ref:`SDMJ <sdmj>` format.

        """

        raise NotImplementedError

    def to_sdmx(self, doc_etree):
        """ Transform an etree into a string of valid Simple Data Model XML.

        Subclasses should implement this method, which takes an
        ``lxml.etree._ElementTree`` (the result of calling ``etree.parse()``),
        and returns another ``lxml.etree._ElementTree`` instance representing 
        an XML document in valid :ref:`SDMX <sdmx>` format.

        """

        raise NotImplementedError


    def __call__(self, doc_etree):
        
        # Look for a valid method, then call it
        
        # Try conversion to facts first
        ret = self._call_func('to_facts', doc_etree)
        if ret:
            return ret

        # Try conversion to SDMJ
        ret = self._call_func('to_sdmj', doc_etree)
        if ret and isinstance(ret, str):
            return self._sdmj_to_facts(ret)

        # Try conversion to SDMX
        ret = self._call_func('to_sdmx', doc_etree)
        if ret and isinstance(ret, etree._ElementTree):
            return self._sdmx_to_facts(ret)

        # Give up
        return None

    def _call_func(self, funcname, *args, **kwargs):
        func = getattr(self, funcname, None)
        if func:
            try:
                return func(*args, **kwargs)
            except NotImplementedError:
                return None


    def _sdmx_to_facts(self, sdmx_etree):
        """ Transform Simple Data Model XML to Indivo Facts.
        
        Takes an ``lxml.etree._ElementTree`` instance, and returns a list of
        ``indivo.model.Fact`` subclasses.

        """

        parser = SDMXData(sdmx_etree)
        return [instance for instance in parser.get_output()]


    def _sdmj_to_facts(self, sdmj_string):
        """ Transform Simple Data Model JSON to Indivo Facts.
        
        Takes a string of valid SDMJ and returns a list of
        ``indivo.model.Fact`` subclasses.

        """

        parser = SDMJData(sdmj_string)
        return [instance for instance in parser.get_output()]

########NEW FILE########
__FILENAME__ = dummy_fields
from django.db import models

class DummyField(models.Field):
    """ A field that should be replaced by other fields.
    
    *replacements* should be a mapping from field_suffix to (fieldclass, field_kwargs).
    This instructs the datamodel loader to remove this field, and for each entry in the mapping,
    to add a new field with the original name concatenated with field_suffix, which is an instance
    of class fieldclass instantiated with field_kwargs.

    Eventually, when Django supports fields mapping to multiple database columns, these
    fields should actually manage multiple DB columns, but for now we're just using strict substitution.
    
    """
    replacements = {}

class CodedValueField(DummyField):
    """ A field for representing coded data elements.

    Creating a CodedValueField named 'value', for example, will (under the hood) create thee fields:
    
    * ``value_identifier``, the system-specific identifier that represents the element (i.e. an RXNorm CUI)
    * ``value_title``, the human-readable title of the element
    * ``value_system``, the coding system used to represent the element

    When describing instances of your model (either when defining a
    :ref:`transform output <transform-output-types>` or when referencing fields using 
    :ref:`the Indivo Query API <queryable-fields>`), you must refer to these field names, not the original
    ``value`` field name.

    """

    replacements = {
        '_identifier': (models.CharField, {'max_length':255, 'null':True}),
        '_title': (models.CharField, {'max_length':255, 'null':True}),
        '_system': (models.CharField, {'max_length':255, 'null':True}),
        }
    
class ValueAndUnitField(DummyField):
    """ A field for representing data elements with both a value and a unit. 

    Creating a ValueAndUnitField named 'frequency', for example, will (under the hood) create the fields:
    
    * ``frequency_value``, the value of the element
    * ``frequency_unit``, the units in which the value is measured

    When describing instances of your model (either when defining a
    :ref:`transform output <transform-output-types>` or when referencing fields using 
    :ref:`the Indivo Query API <queryable-fields>`), you must refer to these field names, not the original
    ``frequency`` field name.

    """
    
    replacements = {
        '_value': (models.CharField, {'max_length':255, 'null':True}), # consider making this a float?
        '_unit': (models.CharField, {'max_length':255, 'null':True}),
        }

class ValueRangeField(DummyField):
    """ A field for representing a range of values.

    Creating a ValueRangeField named 'normal_range', for example, will (under the hood) create the fields:
    
    * ``normal_range_max``, the maximum value of the range (a :py:class:`~indivo.fields.ValueAndUnitField`)
    * ``normal_range_min``, the minimum value of the range (a :py:class:`~indivo.fields.ValueAndUnitField`)

    When describing instances of your model (either when defining a
    :ref:`transform output <transform-output-types>` or when referencing fields using 
    :ref:`the Indivo Query API <queryable-fields>`), you must refer to these field names, not the original
    ``normal_range`` field name.

    """
    
    replacements = {
        '_max': (ValueAndUnitField, {}),
        '_min': (ValueAndUnitField, {}),
        }

class QuantitativeResultField(DummyField):
    """ A field for representing a quantitative result, and expected ranges for that result.

    Creating a QuantitativeResultField named 'lab_result', for example, will (under the hood) create the fields:
    
    * ``lab_result_non_critical_range``, the range outside of which results are 'critical' (a :py:class:`~indivo.fields.ValueRangeField`)
    * ``lab_result_normal_range``, the range outside of which results are 'abnormal' (a :py:class:`~indivo.fields.ValueRangeField`)
    * ``lab_result_value``, the actual result (a :py:class:`~indivo.fields.ValueAndUnitField`)

    When describing instances of your model (either when defining a
    :ref:`transform output <transform-output-types>` or when referencing fields using 
    :ref:`the Indivo Query API <queryable-fields>`), you must refer to these field names, not the original
    ``lab_result`` field name.

    """
    
    replacements = {
        '_non_critical_range': (ValueRangeField, {}),
        '_normal_range': (ValueRangeField, {}),
        '_value': (ValueAndUnitField, {}),
        }

class AddressField(DummyField):
    """ A field for representing a physical address.

    Creating an AddressField named 'address', for example, will (under the hood) create the fields:
    
    * ``address_country``, the country in which the address is located
    * ``address_city``, the city in which the address is located
    * ``address_postalcode``, the postalcode of the address
    * ``address_region``, the region (state, in the US) in which the address is located
    * ``address_street``, the street address (including street number, apartment number, etc.) at which the address
      is located

    When describing instances of your model (either when defining a
    :ref:`transform output <transform-output-types>` or when referencing fields using 
    :ref:`the Indivo Query API <queryable-fields>`), you must refer to these field names, not the original
    ``address`` field name.

    """
    
    replacements = {
        '_country': (models.CharField, {'max_length':255, 'null':True}),
        '_city': (models.CharField, {'max_length':255, 'null':True}),
        '_postalcode': (models.CharField, {'max_length':12, 'null':True}),
        '_region': (models.CharField, {'max_length':255, 'null':True}),
        '_street': (models.CharField, {'max_length':255, 'null':True}),
        }

class OrganizationField(DummyField):
    """ A field for representing an organization.

    Creating an OrganizationField named 'organization', for example, will (under the hood) create two fields:
    
    * ``pharmacy_name``, the name of the organization
    * ``organization_adr``, the address at which the organization is located (an :py:class:`~indivo.fields.AddressField`)

    When describing instances of your model (either when defining a
    :ref:`transform output <transform-output-types>` or when referencing fields using 
    :ref:`the Indivo Query API <queryable-fields>`), you must refer to these field names, not the original
    ``organization`` field name.

    """
    
    replacements = {
        '_name': (models.CharField, {'max_length':255, 'null':True}),
        '_adr': (AddressField, {}),
        }

class PharmacyField(DummyField):
    """ A field for representing a pharmacy.

    Creating a PharmacyField named 'pharmacy', for example, will (under the hood) create three fields:
    
    * ``pharmacy_ncpdpid``, the pharmacy's National Council for Prescription Drug Programs (NCPDP) ID number
    * ``pharmacy_adr``, the address at which the pharmacy is located (an :py:class:`~indivo.fields.AddressField`)
    * ``pharmacy_org``, the name of the organization that owns the pharmacy

    When describing instances of your model (either when defining a
    :ref:`transform output <transform-output-types>` or when referencing fields using 
    :ref:`the Indivo Query API <queryable-fields>`), you must refer to these field names, not the original
    ``pharmacy`` field name.

    """
    
    replacements = {
        '_ncpdpid': (models.CharField, {'max_length':255, 'null':True}),
        '_org': (models.CharField, {'max_length':255, 'null':True}),
        '_adr': (AddressField, {}),
        }

class NameField(DummyField):
    """ A field for representing a person's name.
    
    Creating a NameField named 'name', for example, will (under the hood) create the fields:

    * ``name_family``, the family (last) name of the person
    * ``name_given``, the given (first) name of the person
    * ``name_middle``, the middle name of the person
    * ``name_prefix``, the prefix (i.e. 'Mr.', 'Sir', etc.) for the person's name
    * ``name_suffix``, the suffix (i.e. 'Jr.', 'Ph.D.', etc.) for the person's name

    When describing instances of your model (either when defining a
    :ref:`transform output <transform-output-types>` or when referencing fields using 
    :ref:`the Indivo Query API <queryable-fields>`), you must refer to these field names, not the original
    ``name`` field name.

    """
    
    replacements = {
        '_family': (models.CharField, {'max_length':255, 'null':True}),
        '_given': (models.CharField, {'max_length':255, 'null':True}),
        '_middle': (models.CharField, {'max_length':255, 'null':True}),
        '_prefix': (models.CharField, {'max_length':255, 'null':True}),
        '_suffix': (models.CharField, {'max_length':255, 'null':True}),
        }

class TelephoneField(DummyField):
    """ A field for representing a telephone number.

    Creating a TelephoneField named 'phone', for example, will (under the hood) create the fields:

    * ``phone_type``, The type of the phone number, limited to ``h`` (home), ``w`` (work), or ``c`` (cell)
    * ``phone_number``, The actual phone number
    * ``phone_preferred_p``, Whether or not this number is a preferred method of contact (``True`` or ``False``)

    When describing instances of your model (either when defining a
    :ref:`transform output <transform-output-types>` or when referencing fields using 
    :ref:`the Indivo Query API <queryable-fields>`), you must refer to these field names, not the original
    ``phone`` field name.

    """

    phone_number_type_choices = ( ('h', 'Home'), ('w', 'Work'), ('c', 'Cell'), )

    replacements = {
        '_type': (models.CharField, {'max_length':1, 'null':True, 'choices':phone_number_type_choices}),
        '_number': (models.CharField, {'max_length':20, 'null':True}),
        '_preferred_p': (models.BooleanField, {'default':False}),
        }

class ProviderField(DummyField):
    """ A field for representing a medical provider. 

    Creating a ProviderField named 'doc', for example, will (under the hood) create the fields:

    * ``doc_dea_number``, the provider's Drug Enforcement Agency (DEA) number
    * ``doc_ethnicity``, the provider's ethnicity
    * ``doc_npi_number``, the provider's National Provider Identification (NPI) number
    * ``doc_preferred_language``, the provider's preferred language
    * ``doc_race``, the provider's race
    * ``doc_adr``, the provider's address (an :py:class:`~indivo.fields.AddressField`)
    * ``doc_bday``, the provider's birth date
    * ``doc_email``, the provider's email address
    * ``doc_name``, the provider's name (a :py:class:`~indivo.fields.NameField`)
    * ``doc_tel_1``, the provider's primary phone number (a :py:class:`~indivo.fields.TelephoneField`)
    * ``doc_tel_2``, the provider's secondary phone number (a :py:class:`~indivo.fields.TelephoneField`)
    * ``doc_gender``,  the provider's gender, limited to ``m`` (male) or ``f`` (female)

    When describing instances of your model (either when defining a
    :ref:`transform output <transform-output-types>` or when referencing fields using 
    :ref:`the Indivo Query API <queryable-fields>`), you must refer to these field names, not the original
    ``doc`` field name.

    """
    
    gender_choices = ( ('m', 'male'), ('f', 'female'), )
    
    replacements = {
        '_dea_number': (models.CharField, {'max_length':255, 'null':True}),
        '_ethnicity': (models.CharField, {'max_length':255, 'null':True}),
        '_npi_number': (models.CharField, {'max_length':255, 'null':True}),
        '_preferred_language': (models.CharField, {'max_length':255, 'null':True}),
        '_race': (models.CharField, {'max_length':255, 'null':True}),
        '_adr': (AddressField, {}),
        '_bday': (models.DateField, {'null':True}),
        '_email': (models.EmailField, {'max_length':255, 'null':True}),
        '_name': (NameField, {'max_length':255, 'null':True}),
        '_tel_1': (TelephoneField, {'max_length':255, 'null':True}),
        '_tel_2': (TelephoneField, {'max_length':255, 'null':True}),
        '_gender': (models.CharField, {'max_length':255, 'null':True, 'choices':gender_choices}),
        }
    
class VitalSignField(DummyField):
    """ A field for representing a single measurement of a vital sign. 

    Creating a VitalSignField named 'bp', for example, will (under the hood) create the fields:

    * ``bp_unit``, the unit of the measurement
    * ``bp_value``, the value of the measurement
    * ``bp_name``, the name of the measurement (a :py:class:`~indivo.fields.CodedValueField`)

    When describing instances of your model (either when defining a
    :ref:`transform output <transform-output-types>` or when referencing fields using 
    :ref:`the Indivo Query API <queryable-fields>`), you must refer to these field names, not the original
    ``bp`` field name.

    """
    
    replacements = {
        '_unit': (models.CharField, {'max_length':255, 'null':True}),
        '_value': (models.FloatField, {'null':True}),
        '_name': (CodedValueField, {}),
        }

class BloodPressureField(DummyField):
    """ A field for representing a blood pressure measurement. 

    Creating a BloodPressureField named 'bp', for example, will (under the hood) create the fields:

    * ``bp_position``, the position in which the measurement was taken (a :py:class:`~indivo.fields.CodedValueField`)
    * ``bp_site``, the site on the body at which the measurement was taken (a :py:class:`~indivo.fields.CodedValueField`)
    * ``bp_method``, the method of the measurement (a :py:class:`~indivo.fields.CodedValueField`)
    * ``bp_diastolic``, the diastolic blood pressure (a :py:class:`~indivo.fields.VitalSignField`)
    * ``bp_systolic``, the systolic blood pressure (a :py:class:`~indivo.fields.VitalSignField`)

    When describing instances of your model (either when defining a
    :ref:`transform output <transform-output-types>` or when referencing fields using 
    :ref:`the Indivo Query API <queryable-fields>`), you must refer to these field names, not the original
    ``bp`` field name.

    """
    
    replacements = {
        '_position': (CodedValueField, {}),
        '_site': (CodedValueField, {}),
        '_method': (CodedValueField, {}),
        '_diastolic': (VitalSignField, {}),
        '_systolic': (VitalSignField, {}),
        }

########NEW FILE########
__FILENAME__ = iso8601
"""ISO 8601 date time string parsing

2010-09-01 slightly refactored to use the built-in time module rather than custom regexps
"""

from datetime import datetime, time

# the iso8601 date formats we accept and produce, and nothing else for now
ISO8601_UTC_DATETIME_FORMAT_MICRO = "%Y-%m-%dT%H:%M:%S.%fZ"
ISO8601_UTC_DATETIME_FORMAT = "%Y-%m-%dT%H:%M:%SZ"
ISO8601_UTC_DATE_FORMAT = "%Y-%m-%d"
ISO8601_UTC_TIME_FORMAT = "%H:%M:%SZ"

def parse_utc_date(datestring):
    """
    parse a date expected to be in UTC format, either a datetime or a date only
    """
    try:
        return datetime.strptime(datestring, ISO8601_UTC_DATE_FORMAT)
    except ValueError:
        try:
            return datetime.strptime(datestring, ISO8601_UTC_DATETIME_FORMAT_MICRO)
        except ValueError:
            # another valueerror here and we surface it to the proc calling parse
            return datetime.strptime(datestring, ISO8601_UTC_DATETIME_FORMAT)

def format_utc_date(date, date_only=False):
    try:
        if isinstance(date, time):
            return date.strftime(ISO8601_UTC_TIME_FORMAT)
        elif date_only:
            return date.strftime(ISO8601_UTC_DATE_FORMAT)
        else:
            if date.microsecond:
                return date.strftime(ISO8601_UTC_DATETIME_FORMAT_MICRO)
            else:
                return date.strftime(ISO8601_UTC_DATETIME_FORMAT)
    except ValueError:
        return "BAD DATE"

########NEW FILE########
__FILENAME__ = mdx_linkexpander
"""
Link Expansion in Messages

this is an extension to the markdown parser
"""

import markdown, re


REGEXP = "\{([a-zA-Z\_]+)\}"

class LinkExpanderPreprocessor(markdown.preprocessors.Preprocessor):
    def __init__(self, variables):
        self.variables = variables

    def process_string(self, s):
        new_s = s

        # match the regexp
        while True:
            m = re.search(REGEXP, new_s)
            if not m:
                break
            new_s = "%s%s%s" % (new_s[:m.span()[0]], self.variables.get(m.group(1),""), new_s[m.span()[1]:])
        return new_s

    def run(self, lines):
        new_lines = []
        for line in lines:
            new_lines.append(self.process_string(line))
        return new_lines
            

class MessageLinkExpanderExtension(markdown.Extension):
    def __init__(self, variables):
        self.variables = variables

    def extendMarkdown(self, md, md_globals):
        md.preprocessors.add('linkexpander', LinkExpanderPreprocessor(self.variables), '_begin') 

########NEW FILE########
__FILENAME__ = query
"""
Common Functionality for support of the Query API
"""

from indivo.lib.sharing_utils import carenet_facts_filter
from indivo.lib.utils import render_template
from indivo.lib.iso8601 import parse_utc_date
from django.db.models import Avg, Count, Max, Min, Sum
from django.db import connection
from django.db.backends import postgresql_psycopg2, mysql, oracle


db_string = connection.settings_dict['ENGINE']
if '.' in db_string:
    db_module, db_name = db_string.rsplit('.', 1)
    DB_ENGINE = getattr(__import__(db_module, fromlist=[db_name]), db_name)
else:
    DB_ENGINE = __import__(db_string)

DATE = 'date'
STRING = 'string'
NUMBER = 'number'

EXPOSED_TYPES = {
  STRING: str,
  DATE: parse_utc_date,
  NUMBER: float
  }

AGG_OPS = {
'sum': (Sum, [NUMBER]),
'avg': (Avg, [NUMBER]),
'max': (Max, [NUMBER, DATE]),
'min': (Min, [NUMBER, DATE]),
'count': (Count, [NUMBER, DATE, STRING])
}

TIME_INCRS = {
    'hour': {postgresql_psycopg2:'YYYY-MM-DD-HH24',
             oracle:'YYYY-MM-DD-HH24',
             mysql:'%%Y-%%m-%%d-%%H',},
    'day': {postgresql_psycopg2:'YYYY-MM-DD',
            oracle:'YYYY-MM-DD',
            mysql:'%%Y-%%m-%%d',},
    'week': {postgresql_psycopg2:'YYYY-WW',
             oracle:'YYYY-WW',
             mysql:'%%Y-%%U',},
    'month': {postgresql_psycopg2:'YYYY-MM',
              oracle:'YYYY-MM',
              mysql:'%%Y-%%m',},
    'year': {postgresql_psycopg2:'YYYY',
             oracle:'YYYY',
             mysql:'%%Y',},
    'hourofday': {postgresql_psycopg2:'HH24',
                  oracle:'HH24',
                  mysql:'%%H',},
    'dayofweek': {postgresql_psycopg2:'D',
                  oracle:'D',
                  mysql:'%%w',},
    'weekofyear': {postgresql_psycopg2:'WW',
                   oracle:'WW',
                   mysql:'%%U',},
    'monthofyear': {postgresql_psycopg2:'MM',
                    oracle:'MM',
                    mysql:'%%m',},
    }

FORMAT_STRS = {
    postgresql_psycopg2: "to_char(\"%(field)s\", '%(format)s')",
    oracle: "to_char(%(field)s, '%(format)s')",
    mysql: "date_format(%(field)s, '%(format)s')",
}

OUTPUT_TEMPLATE = 'reports/report'
AGGREGATE_TEMPLATE = 'reports/aggregate.xml'

RELATED_LIST = [
    'document',
    'document__creator',
    'document__creator__account',
    'document__creator__pha',
    'document__suppressed_by',
    'document__suppressed_by__account',
    'document__status',
    ]

class FactQuery(object):
    def __init__(self, model, model_filters,
                 query_options,
                 record=None, carenet=None):
        self.model = model
        self.valid_filters = model_filters
        self.group_by = query_options.get('group_by')
        self.date_group = query_options.get('date_group')
        self.aggregate_by = query_options.get('aggregate_by')
        self.limit = query_options.get('limit')
        self.offset = query_options.get('offset')
        self.order_by = query_options.get('order_by')
        self.status = query_options.get('status')
        self.date_range = query_options.get('date_range')
        self.query_filters = query_options.get('filters')
        
        self.results = None
        self.trc = None
        self.aggregate_p = None
        self.grouping_p = None
        self.flat_aggregation = None

        self.carenet = carenet
        self.record = carenet.record if carenet else record

    def render(self, item_template, output_template=OUTPUT_TEMPLATE):
        if self.results is None:
            self.execute()

        if self.aggregate_by:
            item_template = AGGREGATE_TEMPLATE
            
        # if we can, iterate efficiently over our results
        if hasattr(self.results, 'iterator'):
            results = self.results.iterator()
        else:
            results = self.results

        template_args = {'fobjs': results,
                         'trc': self.trc,
                         'group_by': self.group_by, 
                         'date_group': self.date_group, 
                         'aggregate_by': self.aggregate_by,
                         'limit': self.limit, 
                         'offset': self.offset,
                         'order_by': self.order_by,
                         'status': self.status,
                         'date_range': self.date_range, 
                         'filters': self.query_filters,        
                         'item_template': item_template
                         }
        return render_template(output_template, template_args, type="xml")

    def execute(self):
        '''
        New API Query Interface (to be released for Beta 3)
        Query operators are evaluated as follows:
        1. filter operators, including date_range but excluding limit and offset, are applied first.
        2. Group_by and date_group, if supplied, are evaluated next
        3. Aggregate by is evaluated
        4. order_by is applied
        5. We evaluate the query to get an ordered list of results, the apply limit and offset.
        '''

        # This is okay, Django evaluates lazily
        results = self.model.objects.all()

        # Apply select_related for performance here
        results = results.select_related(*RELATED_LIST)

        # 1. Apply filter operators (but not limit/offset).
        results = self._apply_filters(results)

        # 2. Evaluate group_by or date_group
        results = self._apply_grouping(results)

        # 3. Evaluate aggregate_by
        self.grouping_p = self.group_by or self.date_group
        self.flat_aggregation = self.aggregate_by and not self.grouping_p
        results = self._apply_aggregation(results)

        # 4. Order_by
        # ignore order_by if we have a single aggregation    
        if not self.flat_aggregation:
            results = self._apply_ordering(results)
    
        # 5. limit and offset. Make sure to grab the total result count
        # before paging is applied and we lose it.

        # No need to get the count or worry about paging for a flat
        # aggregation, which was already evaluated
        if self.flat_aggregation:
            self.trc = 1
            results = [results] # [{'aggregation': 'value'}]

        # Avoid evaluation for as long as possible: pass back a QuerySet object
        else:
            self.trc = results.count()
            if self.limit:
                results = results[self.offset:self.offset+self.limit]
                
        # And we're done!
        self.results = results

    def _apply_filters(self, results):
        # Carenet filters.
        # DH 04-07-2011: Moved up front and changed to not evaluate the queryset

        # Need to allow queries with no record or carenet, i.e., Audit, which isn't constrained to a single record
        if self.record:
            results = results.filter(record=self.record)
        results = carenet_facts_filter(self.carenet, results)


        filter_args = {}
        for field, val in self.query_filters.iteritems():
            if self.valid_filters.has_key(field):
                field_type = self.valid_filters[field][1]
                try:
                    val = val.split('|')
                    if len(val) == 1:
                        parsed_val = EXPOSED_TYPES[field_type](val[0])
                        filter_args[self.valid_filters[field][0]] = parsed_val
                    else:
                        parsed_values = [EXPOSED_TYPES[field_type](x) for x in val]
                        if len(parsed_values) > 0:
                            filter_args[self.valid_filters[field][0] + '__in'] = parsed_values
                except:
                    raise ValueError('Invalid argument type for field %s: expected %s, got %s'%(field, field_type, val))
            else:
                raise ValueError('Invalid filter for fact type %s: %s'%(self.model.__name__, field))
  
        if self.date_range:
            if self.valid_filters.has_key(self.date_range['field']):
                field_type = self.valid_filters[self.date_range['field']][1]
                if field_type != DATE:
                    raise ValueError('Date Ranges may only be calculated over fields of type "date": got %s(%s)'%(self.date_range['field'], field_type))

                if self.date_range['start_date']:
                    filter_args['%s__gte'%(self.valid_filters[self.date_range['field']][0])] = self.date_range['start_date']
                if self.date_range['end_date']:
                    filter_args['%s__lte'%(self.valid_filters[self.date_range['field']][0])] = self.date_range['end_date']
            else:
                raise ValueError('Invalid date range filter for fact type %s: %s'%(self.model.__name__, self.date_range['field']))

        if self.status:
            filter_args['document__status'] = self.status

        if filter_args:
            results = results.filter(**filter_args)

        # Results look like:
        # [obj1, obj2, ...] For every Fact object we haven't filtered out
        return results

    def _apply_grouping(self, results):
        group_field = 'all'

        # Handle the ordinary group
        if self.group_by:
            if self.valid_filters.has_key(self.group_by):          
                group_field = self.valid_filters[self.group_by][0]
            else:
                raise ValueError('Invalid grouping field for fact type %s: %s'%(self.model.__name__, self.group_by))

        # Handle the date group
        elif self.date_group:
            if self.valid_filters.has_key(self.date_group['field']):
                field_type = self.valid_filters[self.date_group['field']][1]
                if field_type != DATE:
                    raise ValueError('Date groups may only be calculated over fields of type "date": got %s(%s)'%(self.date_group['field'], self.field_type))

                group_field = self.valid_filters[self.date_group['field']][0]
                date_incr = self.date_group['time_incr']
                if TIME_INCRS.has_key(date_incr):
                    time_format = TIME_INCRS[date_incr][DB_ENGINE]
                    format_str = FORMAT_STRS[DB_ENGINE]
                    results = results.extra(select={date_incr:format_str%{"field":group_field, "format":time_format}})

                    # From now on, we look at the date-formatted string only
                    group_field = date_incr
                else:
                    raise ValueError('Invalid date_group Increment: %s'%(date_incr))
            else:
                raise ValueError('Invalid grouping field for fact type %s: %s'%(self.model.__name__, self.date_group['field']))
    
        if group_field is not 'all':
            results = results.values(group_field)

        # Results look like:
        # [{'group_field': 'value1'}, {'group_field': 'value2'}], 1 dict per Fact object if we grouped
        # if there was no grouping, results look like: [obj1, obj2, ...]
        return results

    def _apply_aggregation(self, results):
        if self.aggregate_by:      
            agg_field = self.aggregate_by['field']
            if self.valid_filters.has_key(agg_field):
                agg_field_type = self.valid_filters[agg_field][1]

                # Look up the operator
                if AGG_OPS.has_key(self.aggregate_by['operator']):    
                    agg = AGG_OPS[self.aggregate_by['operator']]
                    agg_func_types = agg[1]
                    if agg_field_type not in agg_func_types:
                        raise ValueError('Cannot apply aggregate function %s (type %s) to field %s (type %s)'%(self.aggregate_by['operator'], agg_func_types, agg_field, agg_field_type))

                    agg_func = agg[0]
                    agg_args = { 'aggregate_value': agg_func(self.valid_filters[agg_field][0])}
                else:
                    raise ValueError('Invalid aggregation operator: %s'%(self.aggregate_by['operator']))

                # If we grouped, handle differently
                if self.grouping_p:
                    results = results.annotate(**agg_args)
                else:
                    results = results.aggregate(**agg_args)
            else:
                raise ValueError('Invalid aggregation field for fact type %s: %s'%(self.model.__name__, agg_field))
        else:
            if self.grouping_p:
                raise ValueError('Cannot make grouped queries without specifying an Aggregation!')

        # Results look like:
        # [{'group_field' : value1, 'aggregation': agg_value} ...] 1 dict per each UNIQUE group_field value
        # If there was no grouping, results look like: {'aggregation': value'}
        # If there was no grouping OR aggregation, results look like: [obj1, obj2...]    
        return results

    def _apply_ordering(self, results):
        if self.order_by:
            desc = self.order_by[0] == '-'
            order_by_field_ext = self.order_by if not desc else self.order_by[1:]

            # get the internal model field for order by
            if self.valid_filters.has_key(order_by_field_ext):
                order_by_field = self.valid_filters[order_by_field_ext][0]
            else:
                raise ValueError('Invalid order by field for fact type %s: %s'%(self.model.__name__, self.order_by))

            # Handle special cases of aggregation and grouping
            if self.aggregate_by and order_by_field_ext == self.aggregate_by['field']:
                order_by_field = 'aggregate_value'
            elif self.group_by and order_by_field_ext != self.group_by:
                raise ValueError('OrderBy fields in aggregations may only refer to the grouping field or the aggregation field. Your field was: %s'%(self.order_by))
            elif self.date_group and order_by_field_ext != self.date_group['field']:
                raise ValueError('OrderBy fields in aggregations may only refer to the grouping field or the aggregation field. Your field was: %s'%(self.order_by))
            elif self.date_group:
                order_by_field = self.date_group['time_incr']

            # Django seems to be nondeterministic in its ordering of ties, so let's add an implicit secondary ordering on primary key
            secondary_order_by = 'id'

            # Do the ordering
            order_by_str = order_by_field if not desc else '-'+order_by_field
            results = results.order_by(order_by_str, secondary_order_by)    
        else:
            # Clear ordering if none was specified, to avoid bad interactions with grouping
            results = results.order_by()

        return results

########NEW FILE########
__FILENAME__ = rdf
""" Utilities for generating RDF graphs.

Adapted from the `Smart Sample Data generator <https://github.com/chb/smart_sample_patients/blob/master/bin/generate.py>`_.

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu

"""
from rdflib import ConjunctiveGraph, Namespace, BNode, Literal, RDF, URIRef

# Some constant strings:
SP_DEMOGRAPHICS = "http://smartplatforms.org/records/%s/demographics"
RXN_URI="http://purl.bioontology.org/ontology/RXNORM/%s"
NUI_URI="http://purl.bioontology.org/ontology/NDFRT/%s"
UNII_URI="http://fda.gov/UNII/%s"
SNOMED_URI="http://purl.bioontology.org/ontology/SNOMEDCT/%s"
LOINC_URI="http://purl.bioontology.org/ontology/LNC/%s"
MED_PROV_URI="http://smartplatforms.org/terms/codes/MedicationProvenance#%s"
ENC_TYPE_URI="http://smartplatforms.org/terms/codes/EncounterType#%s"
IMM_STATUS_URI="http://smartplatforms.org/terms/codes/ImmunizationAdministrationStatus#%s"
IMM_PROD_URI="http://www2a.cdc.gov/nip/IIS/IISStandards/vaccines.asp?rpt=cvx#%s"
IMM_CLASS_URI="http://www2a.cdc.gov/nip/IIS/IISStandards/vaccines.asp?rpt=vg#%s"
IMM_REFUSE_URI="http://smartplatforms.org/terms/codes/ImmunizationRefusalReason#%s"
INDIVO_RECORD_URI="http://indivo.org/records/%s"
INDIVO_VOCAB_URI="http://indivo.org/vocab/documents#%s"
LAB_INTERP_URI="http://smartplatforms.org/terms/codes/LabResultInterpretation#%s"
LAB_STATUS_URI="http://smartplatforms.org/terms/codes/LabStatus#%s"

# First Declare Name Spaces
SP = Namespace("http://smartplatforms.org/terms#")
SPCODE = Namespace("http://smartplatforms.org/terms/codes/")
DC = Namespace("http://purl.org/dc/elements/1.1/")
DCTERMS = Namespace("http://purl.org/dc/terms/")
FOAF = Namespace("http://xmlns.com/foaf/0.1/")
RDFS=Namespace("http://www.w3.org/2000/01/rdf-schema#")
VCARD=Namespace("http://www.w3.org/2006/vcard/ns#")


class PatientGraph(object):
    """ Represents a patient's RDF graph"""

    def __init__(self, record):
        """Create an instance of a RDF graph for patient instance p""" 
        self.record=record
        
        # Create a RDF graph and namespaces:
        g = ConjunctiveGraph()
        self.g = g  # Keep a reference to this graph as an instance var
        
        # BindNamespaces to the graph:
        g.bind('rdfs', RDFS)
        g.bind('sp', SP)
        g.bind('spcode', SPCODE)
        g.bind('dc', DC)
        g.bind('dcterms', DCTERMS)
        g.bind('foaf', FOAF)
        g.bind('v', VCARD)
        
    ########################
    ### Public Interface ###
    ########################

    def toRDF(self,format="xml"):
        return self.g.serialize(format=format)
    
    def addDemographics(self, record):
        """ Adds patient Demographics info to the graph. """
        g = self.g
        demographics = record.demographics

        dNode = URIRef(demographics.uri())
        g.add((dNode, RDF.type, SP['Demographics']))
        
        # simple required
        g.add((dNode, VCARD['bday'], Literal(demographics.bday)))
        g.add((dNode, FOAF['gender'], Literal(demographics.gender)))    
        
        # simple optional
        if demographics.ethnicity:
            g.add((dNode, SP['ethnicity'], Literal(demographics.ethnicity)))
        if demographics.preferred_language:
            g.add((dNode, SP['preferredLanguage'], Literal(demographics.preferred_language)))
        if demographics.race:
            g.add((dNode, SP['race'], Literal(demographics.race)))
        if demographics.email:
            g.add((dNode, SP['email'], Literal(demographics.email)))
       
        # compound required
        self.g.add((dNode, VCARD['n'], self.name(demographics, "name")))
        g.add((dNode, SP['medicalRecordNumber'],
               self.code("Indivo Record %s"%record.id,
                         "Indivo Record",
                         INDIVO_RECORD_URI%record.id,
                         blank=True)))
        
        # compound optional           
        addrNode = self.address(demographics, "adr")
        if addrNode:
            self.g.add((dNode, VCARD['adr'], addrNode))
        tel1Node = self.telephone(demographics, "tel_1")
        if tel1Node:
            self.g.add((dNode, VCARD['tel'], tel1Node))
        tel2Node = self.telephone(demographics, "tel_2")
        if tel2Node:
            self.g.add((dNode, VCARD['tel'], tel2Node))

        self.addStatement(dNode)

    def addMedList(self, meds):
        """Adds a MedList to a patient's graph"""

        g = self.g
        if not meds: return # no meds

        for m in meds:
            mNode = self.medication(m)
            self.addStatement(mNode)

            # Now,loop through and add fulfillments for each med
            for fill in m.fulfillments.all().iterator():
                self.addFill(fill, medNode=mNode)

    def addFill(self, fill, medNode=None, med_uri_only=True):
        """ Build a Fill and add it to the patient graph, optionally linking it with a medication node. """
        g = self.g
        rfNode = URIRef(fill.uri('fullfillments'))
        g.add((rfNode, RDF.type, SP['Fulfillment']))
        g.add((rfNode, DCTERMS['date'], Literal(fill.date)))
        g.add((rfNode, SP['dispenseDaysSupply'], Literal(fill.dispenseDaysSupply)))
        if fill.pbm:
            g.add((rfNode, SP['pbm'], Literal(fill.pbm)))

        pharmNode = self.pharmacy(fill, 'pharmacy')
        if pharmNode:
            g.add((rfNode, SP['pharmacy'], pharmNode))

        provNode = self.provider(fill, 'provider')
        if provNode:
            g.add((rfNode, SP['provider'], provNode))

        if fill.quantityDispensed_value and fill.quantityDispensed_unit:
            g.add((rfNode, SP['quantityDispensed'], self.valueAndUnit(fill.quantityDispensed_value,
                                                                      fill.quantityDispensed_unit)))

        if medNode: # link from medication to us
            g.add((medNode, SP['fulfillment'], rfNode))

        # link from us to medication, just a URI or a whole Node if required
        if fill.medication and med_uri_only: 
            g.add((rfNode, SP['medication'], URIRef(fill.medication.uri())))
        elif fill.medication and not med_uri_only:
            g.add((rfNode, SP['medication'], medNode))

        self.addStatement(rfNode)
    
    def addFillList(self, fills):
        """ Adds a FillList to a patient's graph. """
        g = self.g
        if not fills: return # no fills

        addedMeds = {}
        for f in fills:

            # get the med node, creating it if we need to
            medNode = addedMeds.get(f.medication.id, None)
            if not medNode:
                medNode = self.medication(f.medication)
                self.addStatement(medNode)
                addedMeds[f.medication.id] = medNode

            self.addFill(f, medNode=medNode, med_uri_only=False)

    def addProblemList(self, problems):
        """Add problems to a patient's graph"""
        g = self.g

        for prob in problems:
            pnode = URIRef(prob.uri())
            g.add((pnode, RDF.type, SP['Problem']))
            g.add((pnode, SP['startDate'], Literal(prob.startDate)))      
            if prob.endDate:
                g.add((pnode, SP['endDate'], Literal(prob.endDate)))
            if prob.notes:
                g.add((pnode, SP['notes'], Literal(prob.notes)))
            g.add((pnode, SP['problemName'],
                   self.codedValue(SPCODE["SNOMED"],
                                   SNOMED_URI%prob.name_identifier,
                                   prob.name_title,
                                   SNOMED_URI%"",
                                   prob.name_identifier)))
            self.addStatement(pnode)
            
    def addEncounterList(self, encounters):
        """Add encounters to a patient's graph"""
        g = self.g

        for encounter in encounters:
            eNode = self.encounter(encounter)
            self.addStatement(eNode)

    def addVitalsList(self, vitals):
        """Add vitals to a patient's graph"""
        g = self.g

        for v in vitals:
            vnode = URIRef(v.uri('vital_signs'))
            g.add((vnode, RDF.type, SP['VitalSigns']))
            g.add((vnode, DCTERMS['date'], Literal(v.date)))

            enode = self.encounter(v.encounter)
            self.addStatement(enode)
            g.add((vnode, SP['encounter'], enode))

            bpNode = self.bloodPressure(v, 'bp')
            if bpNode:
                g.add((vnode, SP['bloodPressure'], bpNode))

            bmiNode = self.vital(v, 'bmi')
            if bmiNode:
                g.add((vnode, SP['bodyMassIndex'], bmiNode))

            hrNode = self.vital(v, 'heart_rate')
            if hrNode:
                g.add((vnode, SP['heartRate'], hrNode))

            hNode = self.vital(v, 'height')
            if hNode:
                g.add((vnode, SP['height'], hNode))

            osNode = self.vital(v, 'oxygen_saturation')
            if osNode:
                g.add((vnode, SP['oxygenSaturation'], osNode))
                
            rrNode = self.vital(v, 'respiratory_rate')
            if rrNode:
                g.add((vnode, SP['respiratoryRate'], rrNode))
                
            tNode = self.vital(v, 'temperature')
            if tNode:
                g.add((vnode, SP['temperature'], tNode))

            wNode = self.vital(v, 'weight')
            if wNode:
                g.add((vnode, SP['weight'], wNode))
        
            self.addStatement(vnode)

    def addImmunizationList(self, immunizations):
        """Add immunizations to a patient's graph"""
        g = self.g

        for i in immunizations:

            inode = URIRef(i.uri())
            g.add((inode, RDF.type, SP['Immunization']))

            g.add((inode, DCTERMS['date'], Literal(i.date)))
            g.add((inode, SP['administrationStatus'],
                   self.codedValue(
                        SPCODE["ImmunizationAdministrationStatus"],
                        IMM_STATUS_URI%i.administration_status_identifier,
                        i.administration_status_title,
                        IMM_STATUS_URI%"",
                        i.administration_status_identifier)))
            g.add((inode, SP['productName'],
                   self.codedValue(
                        SPCODE['ImmunizationProduct'],
                        IMM_PROD_URI%i.product_name_identifier,
                        i.product_name_title,
                        IMM_PROD_URI%"",
                        i.product_name_identifier)))
        
            if i.product_class_title and i.product_class_identifier:
                g.add((inode, SP['productClass'],
                       self.codedValue(
                            SPCODE['ImmunizationClass'],
                            IMM_CLASS_URI%i.product_class_identifier,
                            i.product_class_title,
                            IMM_CLASS_URI%"",
                            i.product_class_identifier)))
                                
            if i.product_class_2_title and i.product_class_2_identifier:
                g.add((inode, SP['productClass'],
                       self.codedValue(
                            SPCODE['ImmunizationClass'],
                            IMM_CLASS_URI%i.product_class_2_identifier,
                            i.product_class_2_title,
                            IMM_CLASS_URI%"",
                            i.product_class_2_identifier)))
            
            if i.refusal_reason_title and i.refusal_reason_identifier:
                g.add((inode, SP['refusalReason'], 
                       self.codedValue(
                            SPCODE['ImmunizationRefusalReason'],
                            IMM_REFUSE_URI%i.refusal_reason_identifier,
                            i.refusal_reason_title,
                            IMM_REFUSE_URI%"",
                            i.refusal_reason_identifier)))
                            
            self.addStatement(inode)

    def addLabList(self, labs):
        """Adds Lab Results to the patient's graph"""
        g = self.g

        for lab in labs:
            lNode = URIRef(lab.uri('lab_results'))
            g.add((lNode, RDF.type, SP['LabResult']))

            g.add((lNode , SP['labName'],
                   self.codedValue(
                        SPCODE["LOINC"], 
                        LOINC_URI%lab.test_name_identifier,
                        lab.test_name_title,
                        LOINC_URI%"",
                        lab.test_name_identifier)))
            
            if lab.abnormal_interpretation_title and lab.abnormal_interpretation_identifier:
                g.add((lNode, SP['abnormalInterpretation'], 
                       self.codedValue(
                            SPCODE['LabResultInterpretation'],
                            LAB_INTERP_URI%lab.abnormal_interpretation_identifier,
                            lab.abnormal_interpretation_title,
                            LAB_INTERP_URI%"",
                            lab.abnormal_interpretation_identifier)))

            if lab.accession_number:
                g.add((lNode, SP['accessionNumber'], Literal(lab.accession_number)))

            if lab.status_title and lab.status_identifier:
                g.add((lNode, SP['labStatus'],
                       self.codedValue(
                            SPCODE['LabResultStatus'],
                            LAB_STATUS_URI%lab.status_identifier,
                            lab.status_title,
                            LAB_STATUS_URI%"",
                            lab.status_identifier)))

            if lab.narrative_result:
                nrNode = BNode()
                g.add((nrNode, RDF.type, SP['NarrativeResult']))
                g.add((nrNode, SP['value'], Literal(lab.narrative_result)))
                g.add((lNode, SP['narrativeResult'], nrNode))

            if lab.notes:
                g.add((lNode, SP['notes'], Literal(lab.notes)))

            qrNode = self.quantitativeResult(lab, 'quantitative_result')
            if qrNode:
                g.add((lNode, SP['quantitativeResult'], qrNode))

            # Add the specimenCollected node, but only if its subNodes should be added.
            # Implemented with booleans which are set to True by the child 
            # if the parent node should be added
            add_attr = False
            attrNode = BNode()
            if lab.collected_at:
                add_attr = True
                g.add((attrNode, SP['startDate'], Literal(lab.collected_at)))
                
            add_participant = False
            pNode = BNode()
            if lab.collected_by_role:
                add_participant = True
                g.add((pNode, SP['role'], Literal(lab.collected_by_role)))
            oNode = self.organization(lab, 'collected_by_org')
            if oNode:
                add_participant = True
                g.add((pNode, SP['organization'], oNode))            
            personNode = BNode()
            nameNode = self.name(lab, 'collected_by_name')
            if nameNode:
                add_participant = True
                g.add((personNode, RDF.type, SP['Person'])) 
                g.add((personNode, VCARD['n'], nameNode))
                g.add((pNode, SP['person'], personNode))

            if add_participant:
                add_attr = True
                g.add((pNode, RDF.type, SP['Participant']))
                g.add((attrNode, SP['participant'], pNode))

            if add_attr:
                g.add((attrNode, RDF.type, SP['Attribution']))
                g.add((lNode, SP['specimenCollected'], attrNode))

            self.addStatement(lNode)

    def addAllergyExclusions(self, exclusions):
        """ Add allergy exclusions to the patient graph. """
        g = self.g

        for e in exclusions:
            aExcept = URIRef(e.uri('allergy_exclusions'))
            g.add((aExcept, RDF.type, SP['AllergyExclusion']))
            g.add((aExcept, SP['allergyExclusionName'],
                   self.codedValue(
                        SPCODE["AllergyExclusion"],
                        SNOMED_URI%e.name_identifier,
                        e.name_title,
                        SNOMED_URI%'',
                        e.name_identifier)))
            self.addStatement(aExcept)

    def addAllergyList(self, allergies):
        """ Add a list of allergies to the patient graph. """
        g = self.g

        for a in allergies:            
            aNode = URIRef(a.uri('allergies'))
            g.add((aNode, RDF.type, SP['Allergy']))
            g.add((aNode, SP['severity'],
                   self.codedValue(
                        SPCODE["AllergySeverity"],
                        SNOMED_URI%a.severity_identifier, 
                        a.severity_title,
                        SNOMED_URI%'',
                        a.severity_identifier)))
            g.add((aNode, SP['allergicReaction'],
            self.codedValue(
                       SPCODE["SNOMED"],
                       SNOMED_URI%a.allergic_reaction_identifier,
                       a.allergic_reaction_title,
                       SNOMED_URI%'',
                       a.allergic_reaction_identifier)))
            g.add((aNode, SP['category'],
                   self.codedValue(
                        SPCODE["AllergyCategory"],
                        SNOMED_URI%a.category_identifier,
                        a.category_title, 
                        SNOMED_URI%'',
                        a.category_identifier)))

            if a.drug_allergen_identifier and a.drug_allergen_title:
                g.add((aNode, SP['drugAllergen'],
                       self.codedValue(
                            SPCODE["RxNorm_Ingredient"],
                            RXN_URI%a.drug_allergen_identifier,
                            a.drug_allergen_title,
                            RXN_URI%'',
                            a.drug_allergen_identifier)))

            elif a.drug_class_allergen_identifier and a.drug_class_allergen_title:
                g.add((aNode, SP['drugClassAllergen'],
                       self.codedValue(
                            SPCODE["NDFRT"],
                            NUI_URI%a.drug_class_allergen_identifier,
                            a.drug_class_allergen_title,
                            NUI_URI%'',
                            a.drug_class_allergen_identifier)))

            elif a.food_allergen_identifier and a.food_allergen_title:
                g.add((aNode, SP['foodAllergen'],
                       self.codedValue(
                            SPCODE["UNII"],
                            UNII_URI%a.food_allergen_identifier,
                            a.food_allergen_title,
                            UNII_URI%'',
                            a.food_allergen_identifier)))
            self.addStatement(aNode)

    #####################################################
    ### Helper Methods for reusable low-level objects ###
    #####################################################

    def encounter(self, encounter):
        """Build an Encounter, but don't link it to a patient graph"""
        g = self.g

        eNode = URIRef(encounter.uri())
        g.add((eNode, RDF.type, SP['Encounter']))
        g.add((eNode, SP['startDate'], Literal(encounter.startDate)))      
        if encounter.endDate:
            g.add((eNode, SP['endDate'], Literal(encounter.endDate)))
                
        orgNode = self.organization(encounter, 'facility')
        if orgNode:
            g.add((eNode, SP['organization'], orgNode))

        provNode = self.provider(encounter, 'provider')
        if provNode:
            g.add((eNode, SP['provider'], provNode))
                
        g.add((eNode, SP['encounterType'],
               self.codedValue(SPCODE["EncounterType"],
                               ENC_TYPE_URI%encounter.encounterType_identifier,
                               encounter.encounterType_title,
                               ENC_TYPE_URI%"",
                               encounter.encounterType_identifier)))
        return eNode

    def medication(self, m):
        """ Build a Medication, but don't add fills and don't link it to the patient. Returns the med node. """
        g = self.g
        if not m: return # no med

        mNode = URIRef(m.uri())
        g.add((mNode, RDF.type, SP['Medication']))
        g.add((mNode, SP['drugName'], 
               self.codedValue(
                    SPCODE["RxNorm_Semantic"], 
                    RXN_URI%m.drugName_identifier,
                    m.drugName_title,
                    RXN_URI%"",
                    m.drugName_identifier)))
        g.add((mNode, SP['startDate'], Literal(m.startDate)))
        g.add((mNode, SP['instructions'], Literal(m.instructions or ''))) 
        if m.quantity_value and m.quantity_unit:
            g.add((mNode, SP['quantity'], self.valueAndUnit(m.quantity_value, m.quantity_unit)))
        if m.frequency_value and m.frequency_unit:
            g.add((mNode, SP['frequency'], self.valueAndUnit(m.frequency_value, m.frequency_unit)))
        if m.endDate:
            g.add((mNode, SP['endDate'], Literal(m.endDate)))
        if m.provenance_identifier and m.provenance_title and m.provenance_system:
            g.add((mNode, SP['provenance'],
                   self.code(m.provenance_title,
                             MED_PROV_URI%"",
                             m.provenance_identifier,
                             [SPCODE['MedicationProvenance']])))
        return mNode

    def code(self, title, system, identifier, blank=False, classes=[]):
        """ Adds a Code to the graph and returns node """
        if blank:
            node = BNode()
        else:
            node = URIRef(system+identifier)
        self.g.add((node, RDF.type, SP['Code']))
        self.g.add((node, DCTERMS['title'], Literal(title)))
        self.g.add((node, SP['system'], Literal(system)))
        self.g.add((node, DCTERMS['identifier'], Literal(identifier)))

        # Add additional types: the general "Code" and specific, e.g. "BloodPressureCode"        
        for c in classes:
            self.g.add((node, RDF.type, c))
        return node

    def codedValue(self,codeclass,uri,title,system,identifier):
        """ Adds a CodedValue to the graph and returns node"""
        if not (codeclass or uri or title or system or identifier): return None

        cvNode=BNode()
        self.g.add((cvNode, RDF.type, SP['CodedValue']))
        self.g.add((cvNode, DCTERMS['title'], Literal(title)))

        cNode=self.code(title, system, identifier, classes=[codeclass])
        self.g.add((cvNode, SP['code'], cNode))

        return cvNode

    def codedValueFromObj(self, obj, prefix, codeclass):
        suffixes = ['identifier', 'title', 'system']
        fields = self._obj_fields_by_name(obj, prefix, suffixes)
        if not fields:
            return None

        return self.codedValue(
            codeclass,
            fields['system'] + fields['identifier'],
            fields['title'],
            fields['system'],
            fields['identifier'],
            )

    def valueAndUnit(self,value,units):
        """Adds a ValueAndUnit node to a graph; returns the node"""
        if not value and not units: return None

        vNode = BNode()
        self.g.add((vNode, RDF.type, SP['ValueAndUnit']))
        self.g.add((vNode, SP['value'], Literal(value)))
        self.g.add((vNode, SP['unit'], Literal(units)))
        return vNode

    def valueAndUnitFromObj(self, obj, prefix):
        val = getattr(obj, '%s_value'%prefix, None)
        unit = getattr(obj, '%s_unit'%prefix, None)
        return self.valueAndUnit(val, unit)

    def valueRange(self, obj, prefix):
        """Adds a ValueRange node to a graph; returns the node"""
        vrNode = BNode()

        minNode = self.valueAndUnitFromObj(obj, "%s_min"%prefix)
        if minNode:
            self.g.add((vrNode, SP['minimum'], minNode))

        maxNode = self.valueAndUnitFromObj(obj, "%s_max"%prefix)
        if maxNode:
            self.g.add((vrNode, SP['maximum'], minNode))
            
        if not minNode and not maxNode:
            return None

        self.g.add((vrNode, RDF.type, SP['ValueRange']))
        return vrNode

    def quantitativeResult(self, obj, prefix):
        """Adds a QuantitativeResult node to a graph; returns the node"""
        qrNode = BNode()

        ncrNode = self.valueRange(obj, '%s_non_critical_range'%prefix)
        if ncrNode:
            self.g.add((qrNode, SP['nonCriticalRange'], ncrNode))

        nrNode = self.valueRange(obj, '%s_normal_range'%prefix)
        if nrNode:
            self.g.add((qrNode, SP['normalRange'], nrNode))

        vuNode = self.valueAndUnitFromObj(obj, '%s_value'%prefix)
        if vuNode:
            self.g.add((qrNode, SP['valueAndUnit'], vuNode))

        if vuNode:
            self.g.add((qrNode, RDF.type, SP['QuantitativeResult']))
            return qrNode
        return None

    def address(self, obj, prefix):
        suffixes = ['country', 'city', 'postalcode', 'region', 'street']
        fields = self._obj_fields_by_name(obj, prefix, suffixes)
        if not fields:
            return None

        addrNode = BNode() 
        self.g.add((addrNode, RDF.type, VCARD['Address']))

        if fields['street']:
            self.g.add((addrNode, VCARD['street-address'], Literal(fields['street'])))

        if fields['city']:
            self.g.add((addrNode, VCARD['locality'], Literal(fields['city'])))
            
        if fields['region']:
            self.g.add((addrNode, VCARD['region'], Literal(fields['region'])))

        if fields['postalcode']:
            self.g.add((addrNode, VCARD['postal-code'], Literal(fields['postalcode'])))

        if fields['country']:
            self.g.add((addrNode, VCARD['country'], Literal(fields['country'])))

        return addrNode

    def telephone(self, obj, prefix):
        suffixes = ['type', 'number', 'preferred_p']
        fields = self._obj_fields_by_name(obj, prefix, suffixes)
        if not fields or not fields['number']:
            return None

        tNode = BNode()
        self.g.add((tNode, RDF.type, VCARD['Tel']))
        
        if fields['type']:
            self.g.add((tNode, RDF.type, VCARD[getattr(obj, 'get_%s_type_display'%(prefix))()]))
        if fields['preferred_p'] and fields['preferred_p']:
            self.g.add((tNode, RDF.type, VCARD['Pref']))
        if fields['number']:
            self.g.add((tNode, RDF['value'], Literal(fields['number'])))

        return tNode

    def name(self, obj, prefix):
        suffixes = ['family', 'given', 'middle', 'prefix', 'suffix']
        fields = self._obj_fields_by_name(obj, prefix, suffixes)
        if not fields:
            return None

        nNode = BNode()
        self.g.add((nNode, RDF.type, VCARD['Name']))

        if fields['family']:
            self.g.add((nNode, VCARD['family-name'], Literal(fields['family'])))
        if fields['given']:
            self.g.add((nNode, VCARD['given-name'], Literal(fields['given'])))
        if fields['middle']:
            self.g.add((nNode, VCARD['additional-name'], Literal(fields['middle'])))
        if fields['prefix']:
            self.g.add((nNode, VCARD['honorific-prefix'], Literal(fields['prefix'])))
        if fields['suffix']:
            self.g.add((nNode, VCARD['honorific-suffix'], Literal(fields['suffix'])))

        return nNode

    def organization(self, obj, prefix):
        suffixes = ['name', 'adr_country', 'adr_city', 'adr_postalcode', 'adr_region', 'adr_street']
        fields = self._obj_fields_by_name(obj, prefix, suffixes)
        if not fields:
            return None

        oNode = BNode()
        self.g.add((oNode, RDF.type, SP['Organization']))

        if fields['name']:
            self.g.add((oNode, VCARD['organization-name'], Literal(fields['name'])))
        addrNode = self.address(obj, "%s_adr"%prefix)
        if addrNode:
            self.g.add((oNode, VCARD['adr'], addrNode))
        return oNode

    def pharmacy(self, obj, prefix):
        suffixes = ['ncpdpid', 'org', 'adr_country', 'adr_city', 'adr_postalcode', 'adr_region', 'adr_street']
        fields = self._obj_fields_by_name(obj, prefix, suffixes)
        if not fields:
            return None

        pNode = BNode()
        self.g.add((pNode, RDF.type, SP['Pharmacy']))

        if fields['ncpdpid']:
            self.g.add((pNode, SP['ncpdpId'], Literal(fields['ncpdpid'])))
        if fields['org']:
            self.g.add((pNode, VCARD['organization-name'], Literal(fields['org'])))
        addrNode = self.address(obj, "%s_adr"%prefix)
        if addrNode:
            self.g.add((pNode, VCARD['adr'], addrNode))
        return pNode

    def provider(self, obj, prefix):
        suffixes = ['dea_number', 'ethnicity', 'npi_number', 'preferred_language', 'race', 'bday', 'email', 'gender']
        fields = self._obj_fields_by_name(obj, prefix, suffixes)
        if not fields:
            return None

        pNode = BNode()
        self.g.add((pNode, RDF.type, SP['Provider']))

        self.g.add((pNode, VCARD['n'], self.name(obj, "%s_name"%prefix))) # name is required
        if fields['dea_number']:
            self.g.add((pNode, SP['deaNumber'], Literal(fields['dea_number'])))
        if fields['ethnicity']:
            self.g.add((pNode, SP['ethnicity'], Literal(fields['ethnicity'])))
        if fields['npi_number']:
            self.g.add((pNode, SP['npiNumber'], Literal(fields['npi_number'])))
        if fields['preferred_language']:
            self.g.add((pNode, SP['preferredLanguage'], Literal(fields['preferred_language'])))
        if fields['race']:
            self.g.add((pNode, SP['race'], Literal(fields['race'])))
        if fields['bday']:
            self.g.add((pNode, VCARD['bday'], Literal(fields['bday'])))
        if fields['email']:
            self.g.add((pNode, VCARD['email'], Literal(fields['email'])))
        if fields['gender']:
            self.g.add((pNode, FOAF['gender'], Literal(fields['gender'])))

        addrNode = self.address(obj, "%s_adr"%prefix)
        if addrNode:
            self.g.add((pNode, VCARD['adr'], addrNode))

        tel1Node = self.telephone(obj, "%s_tel_1"%prefix)
        if tel1Node:
            self.g.add((pNode, VCARD['tel'], tel1Node))

        tel2Node = self.telephone(obj, "%s_tel_2"%prefix)
        if tel2Node:
            self.g.add((pNode, VCARD['tel'], tel2Node))

        return pNode

    def vital(self, obj, prefix):
        suffixes = ['unit', 'value']
        fields = self._obj_fields_by_name(obj, prefix, suffixes)
        if not fields:
            return None

        vNode = BNode()
        self.g.add((vNode, RDF.type, SP['VitalSign']))

        if fields['unit']:
            self.g.add((vNode, SP['unit'], Literal(fields['unit'])))
        if fields['value']:
            self.g.add((vNode, SP['value'], Literal(fields['value'])))

        nameNode = self.codedValueFromObj(obj, "%s_name"%prefix, SPCODE['VitalSign'])
        if nameNode:
            self.g.add((vNode, SP['vitalName'], nameNode))

        return vNode

    def bloodPressure(self, obj, prefix):
        bpNode = BNode()
        self.g.add((bpNode, RDF.type, SP['BloodPressure']))
        
        sysNode = self.vital(obj, "%s_systolic"%prefix)
        if sysNode:
            self.g.add((bpNode, SP['systolic'], sysNode))

        diaNode = self.vital(obj, "%s_diastolic"%prefix)
        if diaNode:
            self.g.add((bpNode, SP['diastolic'], diaNode))

        posNode = self.codedValueFromObj(obj, "%s_position"%prefix, SPCODE['BloodPressureBodyPosition'])
        if posNode:
            self.g.add((bpNode, SP['bodyPosition'], posNode))

        siteNode = self.codedValueFromObj(obj, "%s_site"%prefix, SPCODE['BloodPressureBodySite'])
        if siteNode:
            self.g.add((bpNode, SP['bodySite'], siteNode))

        methodNode = self.codedValueFromObj(obj, "%s_method"%prefix, SPCODE['BloodPressureMethod'])
        if methodNode:
            self.g.add((bpNode, SP['method'], methodNode))

        return bpNode
    
    ################################
    ### Low-level helper methods ###
    ################################

    def _obj_fields_by_name(self, obj, prefix, suffixes):
        """ Given an object, returns a dictionary of its attributes based on prefix and suffixes.
        
        Specifically, the dictionary is of the form::
        
          {
            'suffix': getattr(obj, prefix + '_' + suffix)
          }
          
        for each suffix in suffixes.
        
        """

        ret = dict([(s, getattr(obj, "%s_%s"%(prefix, s))) for s in suffixes])
        if not reduce(lambda x, y: x or y, ret.values()): # return None if we found none of our fields
            return None
        return ret

    def addStatement(self, s):
        self.g.add((s, SP['belongsTo'], URIRef(INDIVO_RECORD_URI%self.record.id)))

########NEW FILE########
__FILENAME__ = sample_data
"""
.. module: lib.sample_data
   :synopsis: Libary functions for loading sample data into Indivo records.

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>

"""

from django.conf import settings
from django.db import transaction
import os
import glob

from indivo.models import Demographics

SUPPORTED_DOCUMENT_TYPES = {
    '.xml': 'application/xml',
    '.pdf': 'application/pdf',
    '.png': 'image/png',
    '.bmp': 'image/bmp',
    '.gif': 'image/gif',
    '.jpg': 'image/jpeg',
    '.zip': 'application/x-zip',
    '.tar': 'application/x-tar',
    '.gz': 'application/x-gzip',
    '.bz2': 'application/x-bz2',
}

class IndivoDataLoader(object):
    def __init__(self, loader_principal, data_dir=None):
        from indivo.views.documents.document import _document_create
        self._document_create = _document_create
        self.creator = loader_principal
        self.data_dir = data_dir or settings.SAMPLE_DATA_DIR


    def load_profile(self, record, profile, transaction=True):
        if transaction:
            return self._load_profile_transactional(record, profile)
        else:
            return self._load_profile(record, profile)

    @transaction.commit_on_success
    def _load_profile_transactional(self, record, profile):
        return self._load_profile(record, profile)

    def _load_profile(self, record, profile):
        """ Bulk load data into a record.
    
        Loads every document identified by *profile* into *record*.
        
        **Arguments:**
    
        * *creator*: The :py:class:`~indivo.models.base.Principal` instance responsible for
          creating the documents.
    
        * *record*: The :py:class:`~indivo.models.records_and_documents.Record` instance to
          which to assign new documents

        * *profile*: The data profile to load into the record. This is a string, and should
          correspond to a subdirectory of *data_dir*

        * *data_dir*: The directory in which data can be found. The format of this directory
          should look like::

            profile_1/  # Data profiles. Each directory should correspond to a single patient.
            profile_2/
               ...
            profile_n/
              Demographics.xml # An optional demographics document.

              doc_1.xml # XML Data to load goes here.
              doc_2.xml # File names MUST be prefixed with 'doc_'.
                 ...
              doc_n.xml

              doc_1.pdf # Other extensions are treated as binary docs.
              doc_2.pdf # Also prefix names with 'doc_'.
                 ...

        **Returns:**
    
        * ``None``, on success.

        **Raises:**
        
        * :py:exc:`ValueError` if *profile* doesn't correspond to an existing data profile

        """

        # quick security check
        if profile.startswith('.') or profile.startswith('/'):
            raise ValueError("invalid data profile")
            
        docs_dir = os.path.join(self.data_dir, profile)
        if not os.path.exists(docs_dir):
            raise ValueError("invalid data profile")

        # load in the special docs
        self.load_special_docs(docs_dir, record)
                
        # load in the rest of the docs
        for raw_content, mime_type in self.get_all_docs(docs_dir):
            self._document_create(self.creator, raw_content, pha=None,
                                          record=record, mime_type=mime_type)

    def get_all_docs(self, data_dir):
        return self._yield_docs(glob.iglob(os.path.join(data_dir, 'doc_*')))

    def _yield_docs(self, filepaths, open_mode='r'):
        for path in filepaths:
            mime_type = SUPPORTED_DOCUMENT_TYPES.get(os.path.splitext(path)[1], None)
            if not mime_type:
                continue # unrecognized doc type: skipping

            with open(path, open_mode) as f:
                data = f.read()
            yield (data, mime_type)

    def load_special_docs(self, data_dir, record, save=True):
        """ Load the special docs in *data_dir* into *record*. """

        demographics_raw = self._get_named_doc(data_dir, 'Demographics.xml')
        
        if demographics_raw:
            demographics_doc = self._document_create(self.creator, demographics_raw, 
                                                     pha=None, record=record)
            demographics = Demographics.from_xml(demographics_raw)
            demographics.document = demographics_doc
            if save:
                # need to save demographics first for Django ORM
                demographics.save()
            record.demographics = demographics
        
        if save:
            record.save()


    def _get_named_doc(self, data_dir, name):
        """ Return the raw content of a document with a specific name from a data profile.
    
        Returns none if a file named *name* doesn't exist in *data_dir*

        """
    
        full_path = os.path.join(data_dir, name)
        if not os.path.exists(full_path):
            return None
    
        with open(full_path, 'r') as f:
            data = f.read()
            
        return data
    

########NEW FILE########
__FILENAME__ = sharing_utils
"""
Sharing-related Utilities for Indivo
"""
from django.db.models import Q
from indivo.models import DocumentSchema, Document

def carenet_facts_filter(carenet, facts):
  ''' Filters a set of facts, removing facts that were generated from documents not shared in 'carenet'.
  Assumes that the input set of facts is a Django QuerySet, and never evaluates it.'''
  return _carenet_filter(carenet, facts, facts_p=True)


def carenet_documents_filter(carenet, documents):
  ''' Filters a set of documents, removing those not shared in 'carenet'.
  Assumes that the input set of documents is a Django QuerySet, and never evaluates it.'''
  return _carenet_filter(carenet, documents)

def document_in_carenet(carenet, doc_id):
  ''' Returns True if the passed document id corresponds to a shared document, False otherwise. '''
  return _carenet_filter(carenet, Document.objects.all()).filter(id=doc_id).exists()

def document_carenets_filter(document, carenets):
  ''' Filters a set of carenets, removing those that 'document' is not shared in.
  Assumes that the input set of carenets is a Django QuerySet, and never evaluates it.'''

  # Optimization if the doc has been nevershared
  if document.nevershare:
    return carenets.none()

  # Constrain to the record we're looking for
  carenets = carenets.filter(record=document.record)

  # The carenet has been shared with explicitly
  explicitly_shared_with = Q(carenetdocument__document=document, carenetdocument__share_p=True)

  # The carenet has been shared with implicitly via autoshares
  implicitly_shared_with = Q(carenetautoshare__type__type=document.fqn, carenetautoshare__type__isnull=False)

  # There is an exception to the autoshares
  implicit_share_exception = Q(carenetdocument__document=document, carenetdocument__share_p=False)

  # The carenet has been shared with appropriately with the document
  shared_with_doc = explicitly_shared_with | (implicitly_shared_with & ~implicit_share_exception)
  return carenets.filter(shared_with_doc)

def _carenet_filter(carenet, objs, facts_p = False):
  if carenet:  

    # All doc fqns the carenet autoshares with
    carenet_autoshare_fqns = [ds.type for ds in DocumentSchema.objects.filter(carenetautoshare__carenet = carenet)]

    # If we're filtering a set of Fact objects, the filters have to use the 'document' property of the objects
    if facts_p:
      explicit_args = {'document__carenetdocument__carenet':carenet, 
                       'document__carenetdocument__share_p':True,
                       'document__nevershare': False,}
      autoshared_args = {'document__fqn__in': carenet_autoshare_fqns,
                         'document__nevershare':False}
      autoshare_exception_args = {'document__carenetdocument__carenet':carenet,
                                  'document__carenetdocument__share_p': False}
    else:
      explicit_args = {'carenetdocument__carenet':carenet, 
                       'carenetdocument__share_p':True,
                       'nevershare': False,}
      autoshared_args = {'fqn__in': carenet_autoshare_fqns,
                         'nevershare':False}
      autoshare_exception_args = {'carenetdocument__carenet':carenet,
                                  'carenetdocument__share_p': False}

    # The doc is explicity shared in the carenet
    explicitly_shared = Q(**explicit_args)

    # The doc is implicity shared in the carenet via an autoshare
    implicitly_shared = Q(**autoshared_args)

    # There is no exception to the implicit autoshare
    implicit_share_exception = Q(**autoshare_exception_args)

    # The doc is shared appropriately in the carenet
    shared_in_carenet = explicitly_shared | (implicitly_shared & ~implicit_share_exception)

    # Add the filter, but don't force evaluation
    objs = objs.filter(shared_in_carenet)

  return objs

########NEW FILE########
__FILENAME__ = simpledatamodel
"""
Library functions for parsing and generating Simple Data Modeling Language (SDML) definitions and data.

"""

try:
    from django.utils import simplejson
except ImportError:
    try:
        import simplejson
    except ImportError:
        raise ImportError("Couldn't find an installation of SimpleJSON")

from django.db import models
from django.db.models.fields import FieldDoesNotExist
from indivo.models import Fact
from lxml import etree
from indivo.lib import iso8601
from indivo.fields import CodedValueField, ValueAndUnitField, AddressField
from indivo.fields import NameField, TelephoneField, PharmacyField, ProviderField
from indivo.fields import OrganizationField, BloodPressureField, VitalSignField
from indivo.fields import QuantitativeResultField, ValueRangeField

SDM_TYPES = {
    'Date': (models.DateTimeField, {'null':True}),
    'String': (models.CharField, {'max_length': 255, 'null':True}),
    'Number': (models.FloatField, {'null':True}),
    'CodedValue': (CodedValueField, {}),
    'ValueAndUnit': (ValueAndUnitField, {}),
    'Address': (AddressField, {}),
    'Name': (NameField, {}),
    'Telephone': (TelephoneField, {}),
    'Pharmacy': (PharmacyField, {}),
    'Organization': (OrganizationField, {}),
    'Provider': (ProviderField, {}),
    'VitalSign': (VitalSignField, {}),
    'BloodPressure': (BloodPressureField, {}),
    'QuantitativeResult': (QuantitativeResultField, {}),
    'ValueRange': (ValueRangeField, {}),
}

MODEL_NAME_KEY = '__modelname__'

MODEL_SUPERCLASSES = (Fact,)

class SDMJ(object):
    """ A base class for parsing SDMJ. 

    Usage of subclasses looks like:
    >>> parser = SDMJSubclass()
    >>> for django_obj in parser.get_output(): do_stuff()
    
    """
    
    def __init__(self, data_string):
        self.parsed_data = simplejson.loads(data_string)
        if not isinstance(self.parsed_data, list): # Allow lists of SMDJ objects in one string
            self.parsed_data = [self.parsed_data]

        self.output_objects = []

    def _parse(self):
        """ A generator to transform SDMJ data into Django objects.

        Subclasses should parse the SDMJ in self.parsed_data and yield Django objects.

        """
        raise NotImplementedError()

    def get_output(self):

        # only parse once
        if self.output_objects:
            for django_obj in self.output_objects:
                yield django_obj
        
        else:
            for django_obj in self._parse():
                self.output_objects.append(django_obj)
                yield django_obj

test_sdmj_definition = '''
{
    "__modelname__": "Medication",
    "name": "String",
    "date_started": "Date",
    "date_stopped": "Date",
    "brand_name": "String", 
    "route": "String",
    "prescription": {
        "__modelname__": "Prescription",
        "prescribed_by_name": "String",
        "prescribed_by_institution": "String",
        "prescribed_on": "Date",
        "prescribed_stop_on": "Date"
        },
    "fills": [{
            "__modelname__": "Fill",
            "date_filled": "Date",
            "supply_days": "Number",
            "filled_at_name": "String"
            }]
}
'''

class SDML(SDMJ):
    """ A class for parsing SDML data model definitions and building them as Django Model Subclasses. """

    def _parse(self):
        """ Parses the definition string into Django model definitions """

        # Add our toplevel SDML definitions to the stack
        parse_stack = []
        for toplevel_model_def in self.parsed_data:
            parse_stack.append((toplevel_model_def, None))

        # Parse until the stack is empty
        while parse_stack:
            next = parse_stack.pop()
            subdefs_to_parse, model_class = self._parse_one(*next)
                
            # Add the submodels to our stack
            parse_stack.extend(subdefs_to_parse)

            # Yield the model_class we just created
            yield model_class

    def _parse_one(self, parsed_def, foreign_key=None):
        """ Build one Django model definition.
        
        foreign_keys is a list of django.db.models.ForeignKey objects that should be added
        to the new model.

        Returns a tuple of (subdefs_to_parse, model_def), where subdefs_to_parse is a list
        of subobjects that need parsing, and model_def is a django.db.models.Model subclass
        defined by the original parsed_def. list elements of subdefs_to_parse are tuples of
        (definition, foreign_key), appropriate for passing back into this function.
        
        """

        subdefs_to_parse = []
        fields = {}

        # Pull out our model's name first, so we can pass it into submodels as needed.
        model_name = parsed_def.get(MODEL_NAME_KEY, None)
        if not model_name:
            raise SDMLException("All model definitions must specify a name, using the '%s' key"%MODEL_NAME_KEY)
        del parsed_def[MODEL_NAME_KEY]
        model_name = str(model_name) # Eliminate any unicode weirdness

        for attrname, attrval in parsed_def.iteritems():
            attrname = str(attrname) # Eliminate unicode weirdness

            if isinstance(attrval, list):
                # OneToMany Relationship: we save the subobject for later parsing.
                # We don't create any fields on our model--we just tell the subobject
                # to add a foreign key to us.
                if len(attrval) != 1:
                    raise SDMLException("OneToMany Relationships may only define one target relation model")
                
                # build the foreignkey that the submodel should add (pointing at our model)
                submodel_fk = models.ForeignKey(model_name, related_name=attrname, null=True)

                # Add the submodel definition and requested key to the list
                subdefs_to_parse.append((attrval[0], submodel_fk))

            elif isinstance(attrval, dict):
                # OnetoOne Relationship: we save the subobject for later parsing,
                # and create a OneToOne field from us to them

                # get the submodel's name
                try:
                    submodel_name = str(attrval[MODEL_NAME_KEY])
                except KeyError:
                    raise SDMJSchemaException("All model definitions must specify a name, using the '%s' key"%MODEL_NAME_KEY)

                # create the OneToOne field
                # The related name is by default the lowercased name of our model.
                # Might want to re-examine this at some point.
                fields[attrname] = models.OneToOneField(submodel_name, null=True)
                
                # Save the submodel for later parsing
                subdefs_to_parse.append((attrval, None))

            else:
                # Simple type: we simply create the relevant field
                try:
                    field_class, args = SDM_TYPES[attrval]
                except KeyError:
                    raise SDMLException("Invalid SDM type: %s" % str(attrval))

                fields[attrname] = field_class(**args)

        # Add the foreign_key, if we were asked to
        # We'll name the foreign_key after the lowercased name of the model we're pointing
        # at (for now).
        if foreign_key:
            fk_target = foreign_key.rel.to # this might be a string or the class itself
            if hasattr(fk_target, 'lower'):
                fk_name = fk_target.lower()
            else:
                fk_name = fk_target.__name__.lower()
            fields[fk_name] = foreign_key

        # Add special Django-specific model attrs: placeholder, will be overwritten when the model is imported
        fields['__module__'] = 'indivo.data_models.tmp'

        # Now build the Django Model class
        klass = type(str(model_name), MODEL_SUPERCLASSES, fields)

        # And we're done!
        return (subdefs_to_parse, klass)        

test_sdmj_document = '''
{
    "__modelname__": "Medication",
    "name": "ibuprofen",
    "date_started": "2010-10-01T00:00:00Z",
    "date_stopped": "2010-10-31T00:00:00Z",
    "brand_name": "Advil",
    "route": "Oral",
    "prescription": {
        "__modelname__": "Prescription"
        "prescribed_by_name": "Kenneth D. Mandl",
        "prescribed_by_institution": "Children's Hospital Boston",
        "prescribed_on": "2010-09-30T00:00:00Z",
        "prescribed_stop_on": "2010-10-31T00:00:00Z"
    },
    "fills": [
        {
            "__modelname__": "Fill"
            "date_filled": "2010-10-01T00:00:00Z",
            "supply_days": "15",
            "filled_at_name": "CVS"
        },
        {
            "__modelname__": "Fill"
            "date_filled": "2010-10-16T00:00:00Z",
            "supply_days": "15",
            "filled_at_name": "CVS"
        }
    ]
}
'''

class SDMJData(SDMJ):
    """ A class for parsing SDMJ data, and building it into Django Model instances. """

    def _parse(self):
        """ Parses the data string into Django model instances. """

        # Add our toplevel SDMJ documents to the stack
        parse_stack = []
        for toplevel_model_instance in self.parsed_data:
            parse_stack.append((toplevel_model_instance, None, None, None))

        # Parse until the stack is empty
        while parse_stack:
            next = parse_stack.pop()
            subdefs_to_parse, model_instance = self._parse_one(*next)
                
            # Add the submodels to our stack
            parse_stack.extend(subdefs_to_parse)

            # Yield the model instance we just created
            yield model_instance

    def _parse_one(self, instance_dict, rel_parent_obj=None, rel_fieldname=None, rel_to_parent=False):
        """ Build one Django model instance.
        
        rel_parent_obj, rel_fieldname, and rel_to_parent, if provided, are instructions to set up a 
        reference to the parent object. Rel_fieldname is the field on which to create the reference,
        and rel_on_parent indicates which direction the reference should go (child to parent for a
        manytomany relationship, parent to child for a onetoone relationship).

        Returns a tuple of (subdefs_to_parse, parsed_instance), where subdefs_to_parse is a list
        of subobjects that need parsing, and parsed_instance is an instance of the 
        django.db.models.Model subclass we have just parsed. List elements of subdefs_to_parse are 
        tuples of (instance_etree, rel_parent_obj, rel_fieldname, rel_to_parent), appropriate for passing 
        back into this function.
        
        """

        subobjs_found = []
        subdefs_to_parse = []
        fields = {}

        # Pull out our model's name first, so we can pass it into submodels as needed.
        model_name = instance_dict.get(MODEL_NAME_KEY, None)
        if not model_name:
            raise SDMDataException("All SDM data instances must specify the model they belong to.")
        del instance_dict[MODEL_NAME_KEY]
     
        try:
            model_class = getattr(__import__('indivo.models', fromlist=[str(model_name)]), model_name, None)
        except ImportError:
            model_class = None
        finally:
            if not model_class:
                raise SDMDataException("SDM model specified a non-existent data-model: %s"%model_name)

        for fieldname, raw_value in instance_dict.iteritems():
            if isinstance(raw_value, list):
                # OneToMany Field: we save the subobjects for later parsing.
                # We tell the subobject to add a reference to our instance on a field
                # named after the lowercase of our modelname.
                for subobject_dict in raw_value:                
                    subobjs_found.append((subobject_dict, model_name.lower(), True))

            elif isinstance(raw_value, dict):
                # OnetoOne Field: we save the subobject for later parsing.
                # We tell the subobject to add a reference from our instance to them
                subobjs_found.append((raw_value, fieldname, False))

            else:
                # Simple Field: we validate the datatype, then add the data to our model

                # get the field definition on the class
                try:
                    model_field = model_class._meta.get_field(fieldname)
                except FieldDoesNotExist:
                    model_field = None

                if not model_field:
                    raise SDMDataException("Non-existent data field: %s"%fieldname)
                
                if not raw_value:
                    fields[fieldname] = None
                
                else:

                    # since everything is coming in as a string, try converting to native Django types
                    if isinstance(model_field, models.DateField):
                        try:
                            value = iso8601.parse_utc_date(raw_value)
                        except Exception as e:
                            raise SDMDataException("SDM data for field %s should have been an iso8601 datetime: got %s instead"%(fieldname, raw_value))

                    elif isinstance(model_field, models.FloatField) and raw_value:
                        try:
                            value = float(raw_value)
                        except Exception as e:
                            raise SDMDataException("SDM data for field %s should have been numeric: got %s instead"%(fieldname, raw_value))

                    elif isinstance(model_field, models.BooleanField) or isinstance(model_field, models.NullBooleanField):
                        if raw_value.lower() == 'true':
                            value = True
                        elif raw_value.lower() == 'false':
                            value = False
                        elif raw_value == True or raw_value == False:
                            value = raw_value
                        else:
                            raise SDMDataException("SDM data for field %s should have been boolean: got %s instead"%(fieldname, raw_value))
                    else:
                        value = raw_value
 
                    fields[fieldname] = value

        # Add a reference from us to them, if we were asked to.
        # We'll need to save the parent object first, so it has an ID
        if rel_parent_obj and rel_to_parent:
            if not rel_parent_obj.id:
                rel_parent_obj.save()
            fields[rel_fieldname] = rel_parent_obj

        # Now build the Django Model instance
        instance = model_class(**fields)

        # Add a reference from them to us, if we were asked to.
        # We'll need to save ourselves first, so we have an ID.
        if rel_parent_obj and not rel_to_parent:
            instance.save()
            setattr(rel_parent_obj, rel_fieldname, instance)

        # Add ourselves as the parent to all of our subinstances
        for subobj_dict, subobj_field, subobj_direction in subobjs_found:
            subdefs_to_parse.append((subobj_dict, instance, subobj_field, subobj_direction))

        # And we're done!
        return (subdefs_to_parse, instance)        

test_sdmx_document = '''
<Models>
  <Model name="TestMed">
    <Field name="date_started">2010-10-01T00:00:00Z</Field>
    <Field name="name">ibuprofen</Field>
    <Field name="brand_name">Advil</Field>
    <Field name="frequency">14</Field>
    <Field name="prescription">
      <Model name="TestPrescription">
        <Field name="prescribed_by_name">Kenneth D. Mandl</Field>
        <Field name="prescribed_on">2010-09-30T00:00:00Z</Field>
      </Model>
    </Field>
    <Field name="fills">
      <Models>
        <Model name="TestFill">
          <Field name="date_filled">2010-10-01T00:00:00Z</Field>
          <Field name="supply_days">15</Field>
        </Model>
        <Model name="TestFill">
          <Field name="date_filled">2010-10-16T00:00:00Z</Field>
          <Field name="supply_days">15</Field>
        </Model>
      </Models>
    </Field>
  </Model>
</Models>
'''

class SDMXData(object):
    """ A base class for parsing SDMX data, and building it into Django Model instances. """

    def __init__(self, data_etree):
        self.raw_etree = data_etree
        self.output_objects = []

    def get_output(self):

        # only parse once
        if self.output_objects:
            for django_obj in self.output_objects:
                yield django_obj
        
        else:
            for django_obj in self._parse():
                self.output_objects.append(django_obj)
                yield django_obj

    def _parse(self):
        """ Parses the data etree into Django model instances """

        # Add our toplevel SDMX documents to the stack
        parse_stack = []
        for toplevel_model_instance in self.raw_etree.getroot():
            parse_stack.append((toplevel_model_instance, None, None, None))

        # Parse until the stack is empty
        while parse_stack:
            next = parse_stack.pop()
            subdefs_to_parse, model_instance = self._parse_one(*next)
                
            # Add the submodels to our stack
            parse_stack.extend(subdefs_to_parse)

            # Yield the model instance we just created
            yield model_instance

    def _parse_one(self, instance_etree, rel_parent_obj=None, rel_fieldname=None, rel_to_parent=False):
        """ Build one Django model instance.
        
        rel_parent_obj, rel_fieldname, and rel_to_parent, if provided, are instructions to set up a 
        reference to the parent object. Rel_fieldname is the field on which to create the reference,
        and rel_on_parent indicates which direction the reference should go (child to parent for a
        manytomany relationship, parent to child for a onetoone relationship).

        Returns a tuple of (subdefs_to_parse, parsed_instance), where subdefs_to_parse is a list
        of subobjects that need parsing, and parsed_instance is an instance of the 
        django.db.models.Model subclass we have just parsed. List elements of subdefs_to_parse are 
        tuples of (instance_etree, rel_parent_obj, rel_fieldname, rel_to_parent), appropriate for passing 
        back into this function.
        
        """

        subobjs_found = []
        subdefs_to_parse = []
        fields = {}

        # Pull out our model's name first, so we can pass it into submodels as needed.
        model_name = instance_etree.get('name', None)
        if not model_name:
            raise SDMDataException("All SDM data instances must specify the model they belong to.")
     
        try:
            model_class = getattr(__import__('indivo.models', fromlist=[model_name]), model_name, None)
        except ImportError:
            model_class = None
        finally:
            if not model_class:
                raise SDMDataException("SDM model specified a non-existent data-model: %s"%model_name)

        for field_etree in instance_etree.findall('Field'):
            fieldname = field_etree.get('name', None)
            if not fieldname:
                raise SDMDataException("All SDM data fields must specify a fieldname.")

            if field_etree.find('Models') is not None:
                # OneToMany Field: we save the subobjects for later parsing.
                # We tell the subobject to add a reference to our instance on a field
                # named after the lowercase of our modelname.
                for subobject_etree in field_etree.find('Models').findall('Model'):                
                    subobjs_found.append((subobject_etree, model_name.lower(), True))

            elif field_etree.find('Model') is not None:
                # OnetoOne Field: we save the subobject for later parsing.
                # We tell the subobject to add a reference from our instance to them
                subobjs_found.append((field_etree.find('Model'), fieldname, False))

            else:
                # Simple Field: we validate the datatype, then add the data to our model

                # get the field definition on the class
                try:
                    model_field = model_class._meta.get_field(fieldname)
                except FieldDoesNotExist:
                    model_field = None

                if not model_field:
                    raise SDMDataException("Non-existent data field: %s"%fieldname)
                raw_value = field_etree.text
                
                if not raw_value:
                    fields[fieldname] = None
                
                else:

                    # since everything is coming in as a string, try converting to native Django types
                    if isinstance(model_field, models.DateField):
                        try:
                            value = iso8601.parse_utc_date(raw_value)
                        except Exception as e:
                            raise SDMDataException("SDM data for field %s should have been an iso8601 datetime: got %s instead"%(fieldname, raw_value))

                    elif isinstance(model_field, models.FloatField) and raw_value:
                        try:
                            value = float(raw_value)
                        except Exception as e:
                            raise SDMDataException("SDM data for field %s should have been numeric: got %s instead"%(fieldname, raw_value))
                    elif isinstance(model_field, models.BooleanField) or isinstance(model_field, models.NullBooleanField):
                        if raw_value.lower() == 'true':
                            value = True
                        elif raw_value.lower() == 'false':
                            value = False
                        elif raw_value == True or raw_value == False:
                            value = raw_value
                        else:
                            raise SDMDataException("SDM data for field %s should have been boolean: got %s instead"%(fieldname, raw_value))
                    else:
                        value = raw_value
 
                    fields[fieldname] = value

        # Add a reference from us to them, if we were asked to.
        # We'll need to save the parent object first, so it has an ID
        if rel_parent_obj and rel_to_parent:
            if not rel_parent_obj.id:
                rel_parent_obj.save()
            fields[rel_fieldname] = rel_parent_obj

        # Now build the Django Model instance
        instance = model_class(**fields)
        
        # TODO: check for more efficient way than saving every time
        if not instance.id:
            instance.save()

        # Add a reference from them to us, if we were asked to.
        # We'll need to save ourselves first, so we have an ID.
        if rel_parent_obj and not rel_to_parent:
            setattr(rel_parent_obj, rel_fieldname, instance)

        # Add ourselves as the parent to all of our subinstances
        for subobj_etree, subobj_field, subobj_direction in subobjs_found:
            subdefs_to_parse.append((subobj_etree, instance, subobj_field, subobj_direction))

        # And we're done!
        return (subdefs_to_parse, instance)        

class SDMException(ValueError):
    prefix = "" # subclasses should define this

    def __init__(self, msg):
        super(SDMException, self).__init__(self.prefix + msg)
    
class SDMLException(SDMException):
    prefix = "Invalid SDML model definition: "

class SDMDataException(SDMException):
    prefix = "Invalid SDM data: "


########NEW FILE########
__FILENAME__ = utils
"""
Utilities for Indivo
"""

from django.http import HttpResponse
from django.template import Context, loader
from django.conf import settings
from django import http
from django.utils import simplejson
import django

try:
    from django.forms.fields import email_re
except ImportError:
    from django.core.validators import email_re

import django.core.mail as mail
import logging
import string, random
import functools

# taken from pointy-stick.com with some modifications
class MethodDispatcher(object):
    def __init__(self, method_map):
        self.methods= method_map
    
    def resolve(self, request):
        view_func = self.methods.get(request.method, None)
        return view_func
    
    @property
    def resolution_error_response(self):
        return http.HttpResponseNotAllowed(self.methods.keys())
    
    def __call__(self, request, *args, **kwargs):
        view_func = self.resolve(request)
        if view_func:
            return view_func(request, *args, **kwargs)
        return self.resolution_error_response

def is_valid_email(email):
    return True if email_re.match(email) else False

def random_string(length, choices=[string.letters]):
    # FIXME: seed!
    return "".join([random.choice(''.join(choices)) for i in xrange(length)])

def send_mail(subject, body, sender, recipient_list):
    # if send mail?
    if settings.SEND_MAIL:
        try:
            mail.send_mail(subject, body, sender, recipient_list)
        except Exception, e:
            logging.error("Exception raised when trying to send the following email: %s" % e)
            logging.error("-----\nFrom: %s\nTo: %s\nSubject: %s\n\n%s\n-----" % (sender, ', '.join(recipient_list), subject, body))
            raise e
    else:
        logging.debug("send_mail to set to false, would have sent email to %s\n\n%s" % (', '.join(recipient_list), body))

def render_template_raw(template_name, vars, type='xml'):
    t_obj = loader.get_template('%s.%s' % (template_name, type))
    c_obj = Context(vars)
    return t_obj.render(c_obj)

def render_template(template_name, vars, type='xml'):
    content = render_template_raw(template_name, vars, type)
    
    mimetype = 'text/plain'
    if type == 'xml':
        mimetype = "application/xml"
    elif type == "json":
        mimetype = 'text/json'
    return HttpResponse(content, mimetype=mimetype)


def get_element_value(dom, el):
    try:
        return dom.getElementsByTagName(el)[0].firstChild.nodeValue
    except:
        return ""

def url_interpolate(url_template, vars):
    """
    Interpolate a URL template
    TODO: security review this
    """
    
    result_url = url_template
    
    # go through the vars and replace
    for var_name in vars.keys():
        result_url = result_url.replace("{%s}" % var_name, vars[var_name])
    
    return result_url

def is_browser(request):
    """
    Determine if the request accepts text/html, in which case it's a user at a browser.
    """
    accept_header = request.META.get('HTTP_ACCEPT', False) or request.META.get('ACCEPT', False)
    if accept_header and isinstance(accept_header, str):
        return "text/html" in accept_header.split(',')
    return False

def get_content_type(request):
    content_type = None
    if request.META.has_key('CONTENT_TYPE'):
        content_type = request.META['CONTENT_TYPE']
    if not content_type and request.META.has_key('HTTP_CONTENT_TYPE'):
        content_type = request.META['HTTP_CONTENT_TYPE']
    return content_type

# some decorators to make life easier
def django_json(func):
    def func_with_json_conversion(*args, **kwargs):
        return_value = func(*args, **kwargs)
        return HttpResponse(simplejson.dumps(return_value), mimetype='application/json')
    functools.update_wrapper(func_with_json_conversion, func)
    return func_with_json_conversion

# Taken from http://code.activestate.com/
# A decorator for properties whose value should only be calculated once.
# Sample use:
# class SomeClass(object):
#
#     @LazyProperty
#     def someprop(self):
#         print 'Actually calculating value'
#         return 13
#
# To force recalculation (inadvisable):
# o = SomeClass()
# o.someprop # runs the calculation
# o.someprop # doesn't recalculate
# del o.someprop
# o.someprop # re-runs the calculation
#
# Note: DO NOT USE THIS ON PROPERTIES WHICH DEPEND ON THE VALUE OF SETTINGS!!
# If the settings change, the computed value might be incorrect.
 
class LazyProperty(object):
    def __init__(self, calculate_function):
        self._calculate = calculate_function

    def __get__(self, obj, _=None):
        if obj is None:
            return self
        value = self._calculate(obj)
        setattr(obj, self._calculate.func_name, value)
        return value

class DjangoVersionDependentExecutor(object):
    """ class which will execute different code based on Django's version.

    Syntax for a version requirement is ``{major}.{minor}.{revision}[+|-]``, 
    where the optional ``+`` and ``-`` indicate whether to include versions 
    after or before the given release, respectively.

    """

    def __init__(self, version_map, default_return_val=None):
        """ create the object.

        version_map is a dictionary of ``version_requirement:callable`` pairs.
        When called, the object will execute all callables in the 
        dictionary that corresponds to a version_requirement satisfied by the
        current Django version.

        If no such callables exist, calling the object will return
        ``default_return_val``. Otherwise, the call will return the value
        returned by the last callable to be executed. Note that, since there
        is no specified ordering on the callables, this could be the result
        of any passed callable. For this reason, it is a good idea to pass
        callables that all return values of equivalent types.
        
        """
        self.django_v = django.VERSION[0:3]
        self.ret = default_return_val
        self.funcs = []

        for version_string, func in version_map.iteritems():
            if version_string[-1] in ('+', '-'):
                direction = version_string[-1]
                version_string = version_string[:-1]

            req_v = tuple(map(int, version_string.split('.'))[0:3])

            if (req_v < self.django_v and direction == '+') \
                    or (req_v > self.django_v and direction == '-') \
                    or (req_v == self.django_v):
                self.funcs.append(func)

    def __call__(self, *args, **kwargs):
        ret_val = self.ret
        for func in self.funcs:
            ret_val = func(*args, **kwargs)
        return ret_val

########NEW FILE########
__FILENAME__ = view_decorators
"""
Decorators for views
"""

from django.http import Http404, HttpResponseBadRequest
from indivo import models
from indivo import check_safety
from indivo.lib import iso8601

from django.db import IntegrityError
from django.db import transaction 
from functools import wraps

import inspect
import functools

DEFAULT_ORDERBY = 'created_at'
QUERY_OPTIONS_ARG = 'query_options'

def marsloader(query_api_support = False):
  def marsloader_decorator(func):
    def marsloader_func(request, *args, **kwargs):
      """MARS_loader (Modifying Arguments for the Result Set) 
      
      adds arguments specifically meant to modify the result set 
      (eg. limit, offset and order_by)

      04-05-2011: Modified to Handle the New Query Interface
      New arguments are: group_by, aggregate_by, date_group,
      date_range, generic report_specific_filters.
      
      Also: No longer checks that the URL ends in a '/'. We assume
      that if you didn't want to call this function, you wouldn't
      have decorated the view with it.
      """
      
      def parse_string(value):
          return value
      
      def parse_int(value):
          return int(value)
      
      def parse_status(value):
          return models.StatusName.objects.get(name=value)
      
      def parse_aggregate_by(value):
          operator, field = value.split('*')
          field = None if field == '' else field
          return {'operator':operator, 'field':field}
      
      def parse_date_range(value):
          field, start_date, end_date = value.split('*')
          start_date = None if start_date == '' else iso8601.parse_utc_date(start_date)
          end_date = None if end_date == '' else iso8601.parse_utc_date(end_date)
          return {'field':field, 'start_date':start_date, 'end_date':end_date}
      
      def parse_date_group(value):
          field, time_incr = value.split('*')
          return {'field':field, 'time_incr':time_incr}
      
      check_safety()
      
      parse_map = {
        'limit': parse_int,
        'offset': parse_int,
        'order_by': parse_string,
        'status': parse_status,
        'group_by': parse_string,
        'aggregate_by': parse_aggregate_by,  
        'date_range': parse_date_range,   
        'date_group': parse_date_group,            
      }
      
      ignore_map = {
        'response_format': True              
      }
      
      # This should be abstracted
      # StatusName 'active' should always be available
      arg_defaults = {
        'limit': 100, 
        'offset': 0,
        'order_by': '-%s'%(DEFAULT_ORDERBY) if not request.GET.has_key('aggregate_by') or not query_api_support else None,
        'status': models.StatusName.objects.get(name='active'),
        }
      query_api_defaults = {
        'group_by': None,
        'aggregate_by': None,
        'date_range': None,
        'date_group': None,
        }
     
      base_options = {}
      report_specific_filters = {}
      
      # set defaults
      base_options.update(arg_defaults)
      if query_api_support:
          base_options.update(query_api_defaults)
          base_options['filters'] = report_specific_filters
      
      for _arg, value in request.GET.iteritems():
        arg = str(_arg)
        try:
          if parse_map.has_key(arg):
              base_options[arg] = parse_map[arg](value)
          elif ignore_map.has_key(arg):
              pass
          else:
              # might be field-specific query parameter, allow individual reports to type-check
              report_specific_filters[arg] = value
        except models.StatusName.DoesNotExist:
          raise Http404
        except ValueError:
          return HttpResponseBadRequest('Argument %s must be formatted according to the Indivo Query API'%(arg))

      # Check that the new query_options argument is in func()
      if len(inspect.getargspec(func)) > 0:
        if QUERY_OPTIONS_ARG not in inspect.getargspec(func)[0]:
          raise Exception("Missing arg " + QUERY_OPTIONS_ARG + " in " + func.func_name)
      
      # update args
      kwargs[QUERY_OPTIONS_ARG] = base_options
      
      # call the view
      return func(request, **kwargs)

    # Return the wrapped Function
    return functools.update_wrapper(marsloader_func, func)

  # Return the function decorator
  return marsloader_decorator


##
## transaction management
##

def commit_on_200(func):
  """
  Commit changes to the database only if the response is a 200.
  Anything else causes a rollback.
  This is a more stringent version of commit_on_success, which
  only rolls back in the case of an exception.

  The idea here is that first we call the func, and if it returns a bad result
  we do a rollback. The exception catching, we leave to the commit_on_success wrapper,
  which we wrap around ourselves, except if we got an IntegrityError from postgres, which
  commit_on_success doesn't handle correctly.
  """

  @wraps(func)
  def _inner_commit(*args, **kwargs):
    try:
      result = func(*args, **kwargs)
    except IntegrityError:
      transaction.set_dirty()
      raise

    if not hasattr(result, 'status_code') or result.status_code != 200:
      transaction.rollback()

    return result

  # layer the commit_on_successoutside of our first check for 200
  # note that, if the wrapped func raises an exception, it goes 
  # right through our decorator here (like butter), and hits the commit_on_success
  # handler which will roll back the transaction then. We keep it simple.
  return transaction.commit_on_success(_inner_commit)
      
def handle_integrity_error(msg=''):
  """
  Roll back the transaction and Return an HttpResponseBadRequest (400) with the passed message
  if the call raises an IntegrityError. This is useful to avoid Postgres aborting transactions
  after an IntegrityError such as a unique constraint violation.
  """
  def integrity_error_decorator(func):

    @wraps(func)
    def _inner_decorator(*args, **kwargs):
      try:
        return func(*args, **kwargs)
      except IntegrityError:
        transaction.rollback()
        return HttpResponseBadRequest(msg)


    return _inner_decorator
  
  return integrity_error_decorator

########NEW FILE########
__FILENAME__ = cleanup_old_tokens
"""
remove accesstokens and sessiontokens that are expired.
"""


from django.core.management.base import BaseCommand, CommandError
import datetime, time
from indivo.models import *
from oauth.oauth import TIMESTAMP_THRESHOLD

class Command(BaseCommand):
    args = ''
    help = 'clean up old session and access tokens'

    def handle(self, *args, **options):
        now = datetime.datetime.utcnow()
        max_delta = datetime.timedelta(seconds=TIMESTAMP_THRESHOLD)
        oldest_nonce = now - max_delta

        # remove old access tokens
        SessionToken.objects.filter(expires_at__lt = now).delete()

        # remove old session tokens
        AccessToken.objects.filter(expires_at__lt = now).delete()

        # remove old Nonces
        Nonce.objects.filter(created_at__lt = oldest_nonce).delete()

########NEW FILE########
__FILENAME__ = generate_api_spec
"""
Pull relevant info from the indivo_server codebase to generate a framework for Indivo documentation
"""

from optparse import make_option
from django.core.management.base import NoArgsCommand, CommandError
from doc.sphinx.autogen.api_parser import APIDict, CallParser, CallResolver, Call
from django.conf import settings
import urls
import os
import copy

class Command(NoArgsCommand):
    option_list = NoArgsCommand.option_list + (
        make_option('-o', '--output-file',
                    action='store', type='string', dest='output_file',
                    default='', help='Full path to the location to write the API spec.'),
        )
    help = '''\
generate_api_spec: Generate a Specification of the Indivo API.

The specification takes the form of a simple XML File, which looks like:

<api>
  <call name="get_version", method="get", url="/version" />
  <call name="document_create", method="post", url="/records/{RECORD_ID}/documents/ />
      ... More calls ...
</api>

This XML file will be written to disk at indivo_server/api.xml, unless overridden by the -o flag.
'''

    def handle_noargs(self, **options):
        # Parse the indivo server codebase for the latest API calls
        cp = CallParser(urls.urlpatterns)

        # Write the API calls as an XML spec
        cp.api.write_api_spec(options.get('output_file', ''))


########NEW FILE########
__FILENAME__ = generate_docs
"""
Pull relevant info from the indivo_server codebase to generate a framework for Indivo documentation
"""

from django.core.management.base import BaseCommand, CommandError
from doc.sphinx.autogen.api_parser import APIDict, CallParser, CallResolver, Call
from doc.sphinx.autogen.api_defaults import *
from django.conf import settings
import urls
import os
import copy

class Command(BaseCommand):
    args = 'parse | build | prepare'
    help = '''\
generate_docs: Generate a Framework for the Indivo API Documentation. 

Workflow is as follows:

* Run ``./manage.py generate_docs parse``, which pulls in the latest Indivo code
  to create an up-to-date skeleton listing of all API calls supported by Indivo.
  This skeleton is written to a file specified by api_parser.py, usually 
  ``indivo_server/doc/sphinx/autogen/api-skeleton.py``.

* Edit the skeleton file, adding call descriptions, querystring options, url
  parameters, etc. Descriptions may be written as ReST, as they will be plugged
  directly into the Sphinx documentation. The state that you leave this file in 
  will be authoritative until you call ``./manage.py generate_docs parse`` again 
  to re-parse the codebase. Make sure that you this file's syntax is valid Python 
  (i.e., quote all strings appropriately).

* Run ``./manage.py generate_docs build``, which compiles the sphinx documentation,
  using the skeleton file as a reference for the API. 

* Continue to edit the skeleton file or the documentation itself and re-run
  ``./manage.py generate_docs build`` as often as you like. If the code changes,
  make sure to re-run ``./manage.py generate_docs parse`` to pull those changes
  into the skeleton file.

Additionally, for readthedocs.org support, the ``prepare`` argument will do all the
prep work except the final call to build the docs.

'''

    userfields = ['query_opts', 'data_fields', 'return_desc', 
                  'return_ex', 'deprecated', 'added', 'changed']
    cpfields = ['method', 'path', 'view_func_name', 'url_params', 'access_doc',
                'description']
    
    defaults_map = {
        'url_params': URL_PARAM_DESC,
        'query_opts': QUERY_PARAM_DESC,
        'data_fields': DATA_FIELD_DESC,
        'description': TEXT_FIELD_DESC,
        'return_desc': TEXT_FIELD_DESC,
        'return_ex': TEXT_FIELD_DESC,
        }

    autocode_exclude_paths = [
                
        # Always exclude these
        settings.APP_HOME + '/indivo/migrations/',
        settings.APP_HOME + '/indivo/urls/',
        settings.APP_HOME + '/indivo/templates/',
        settings.APP_HOME + '/indivo/tests/',
        
        # Excluded for now, add back in as they get documented
        settings.APP_HOME + '/indivo/accesscontrol/',
        settings.APP_HOME + '/indivo/document_processing/',
        settings.APP_HOME + '/indivo/lib/',
        settings.APP_HOME + '/indivo/management/',
        settings.APP_HOME + '/indivo/middlewares/',
        settings.APP_HOME + '/indivo/models/',
        settings.APP_HOME + '/indivo/templatetags/',
        ]

    def handle(self, *args, **options):
        if len(args) != 1:
            raise CommandError('Expected exactly 1 argument: "parse", "build", or "prepare"')

        if args[0] == 'parse':

            # Parse the indivo server codebase for the latest API calls
            cp = CallParser(urls.urlpatterns)
            cp_api = cp.api
            
            # Get the current user-modified listing of calls
            user_api = APIDict()
            
            # Init a new listing for update
            new_api = APIDict(read_file=False)

            # Diff them
            cp_set = set(cp_api.keys())
            user_set = set(user_api.keys())
        
            intersection = cp_set & user_set
            cp_only = cp_set - user_set
            user_only = user_set - cp_set

            diffstr = 'Changed calls:\n'

            # Calls in both versions
            for title in intersection:
                modified = False
                user_call = user_api[title]
                cp_call = cp_api[title] 
                new_call = Call()
                resolver = CallResolver(cp_call, user_call)
                mod = False

                # computerized fields: choose codebase version, default to user if codebase didn't have it.
                resolver.prefer_cp()
                for field in self.cpfields:
                    oldval = getattr(user_call, field, None)
                    newval = resolver.resolve(field)
                    setattr(new_call, field, newval)
                    if oldval != newval:
                        mod = True

                # user fields: choose user version, default to codebase if user hasn't entered it.
                resolver.prefer_user()
                for field in self.userfields:
                    oldval = getattr(user_call, field, None)
                    newval = resolver.resolve(field)
                    setattr(new_call, field, newval)
                    if oldval != newval:
                        mod = True


                # Set defaults for values that weren't in the cp_call or the user_call
                mod = new_call.set_defaults(self.defaults_map)

                # Note: a 'modified' call is one that has had computerized values
                # written over whatever existed in api-skeleton.py.
                if mod:
                    diffstr += 'MOD: %s\n'%title

                new_api.update({title:new_call})

            # Calls in just the cp version are new: add them to the userfile
            for title in cp_only:
                new_call = copy.copy(cp_api[title])
                new_call.set_defaults(self.defaults_map)                
                new_api.update({title:new_call})
                diffstr += 'ADD: %s\n'%title

            # Calls in just the userfile are no longer valid: delete them from the userfile
            for title in user_only:
                diffstr += 'DEL: %s\n'%title # no need to touch the new_api, since it doesn't contain the call

            # Write our changes out to the userfile
            new_api.save()

            # Print out a diff of what got added and deleted: can't print mods because we don't store past history
            print diffstr

        elif args[0] == 'build':
            api = APIDict()
            
            # Write the API Reference ReST doc
            self.write_api_reference(api)

            # Write the Python Client Reference ReST doc
            self.write_client_reference(api)
            
            # Use sphinx-apidoc to autogenerate code docs
            self.build_autocode()

            # Build the Docs
            self.build_docs()

        elif args[0] == 'prepare':
            api = APIDict()
            
            # Write the API Reference ReST doc
            self.write_api_reference(api)
            
            # Write the Python Client Reference ReST doc
            self.write_client_reference(api)

            # Use sphinx-apidoc to autogenerate code docs
            self.build_autocode()

            # Don't Build the Docs

        else:
            raise CommandError('Unexpected argument: %s. Expected 1 argument: "parse" or "build"'%args[0])            

    def write_api_reference(self, api):
        api.write_ReST_reference()

    def write_client_reference(self, api):
        api.write_python_client_reference()

    def build_autocode(self):
        output_dir = 'source/autocode'
        source_dir = settings.APP_HOME + '/indivo/'
        
        cmd = 'sphinx-apidoc -o %s %s %s'%(output_dir, 
                                           source_dir, 
                                           ' '.join(self.autocode_exclude_paths))
        self.chdir_and_execute(settings.APP_HOME+'/doc/sphinx', cmd)

    def build_docs(self):
        cmd = 'make html SPHINXOPTS=-a'
        self.chdir_and_execute(settings.APP_HOME+'/doc/sphinx', cmd)

    def chdir_and_execute(self, dir, cmd):
        """ Move to a directory, execute a shell command, then move back out. """
        old_dir = os.getcwd()
        os.chdir(dir)
        ret = os.system(cmd)
        os.chdir(old_dir)
        return ret

########NEW FILE########
__FILENAME__ = reset_facts
"""
Drop and Re-parse facts from indivo documents. Should be wrapped around a migration
"""

from django.core.management.base import BaseCommand, CommandError
from indivo.document_processing.document_processing import DocumentProcessing
from indivo.models import Document, Fact

class Command(BaseCommand):
    args = 'drop | process'
    help = 'Reset Fact objects in the Indivo database before Migration. "drop" \
removes all objects, and "process" re-processes existing documents to create new objects'

    def handle(self, *args, **options):
        if len(args) != 1:
            raise CommandError('Expected 1 argument: "drop" or "process"')
        
        if args[0] == 'drop':
            print "Deleting all existing Fact Objects..."
            Fact.objects.all().delete()
            print "Done."
        elif args[0] == 'process':
            print "Re-processing all Documents..."
            for doc in Document.objects.all():
                
                # only reprocess the most recent version of docs
                if not doc.replaced_by:
                    doc.processed = False                
                    doc.save()
            print "Done."
        else:
            raise CommandError('Invalid argument: %s. Expected "drop" or "process"'%args[0])

########NEW FILE########
__FILENAME__ = sync_apps
"""
remove accesstokens and sessiontokens that are expired.
"""


from django.core.management.base import BaseCommand, CommandError
from utils.importer import AppSyncer

class Command(BaseCommand):
    args = ''
    help = 'Sync the currently registered apps with settings.APPS_DIRS'

    def handle(self, *args, **options):
        verbosity = options.get('verbosity')
        
        def print_if(stmt, min_verbosity=1):
            if verbosity > min_verbosity:
                print stmt
                
        print_if("Importing currently registered apps...")
        AppSyncer().sync(verbosity)
        print_if("Done.")

########NEW FILE########
__FILENAME__ = audit
"""
Middleware (filters) for Indivo

inspired by django.contrib.auth middleware, but doing it differently
for tighter integration into email-centric users in Indivo.
"""

import sys, logging
from indivo.accesscontrol import security
from indivo.models import Audit, Principal, Record, Document
from time import strftime
from django.http import *
from django.conf import settings

# AUDIT DATA CATEGORIES:
BASIC = 'basic' # REQUIRED, if audit_level > 'NONE': basic info about request
PRINCIPAL_INFO = 'principal_info' # identifier of principal making request
RESOURCES = 'resources' # resources accessed by request
REQUEST_INFO = 'request_info' # Data passed in through the request (headers, ip, domain, etc.)
RESPONSE_INFO = 'response_info' # Response code, error messages, etc.

AUDIT_LEVELS = {
  'NONE': [],
  'LOW': [BASIC, PRINCIPAL_INFO],
  'MED': [BASIC, PRINCIPAL_INFO, RESOURCES],
  'HIGH': [BASIC, PRINCIPAL_INFO, RESOURCES, REQUEST_INFO, RESPONSE_INFO]
}

class AuditWrapper(object):
  """
  Audit...
  """

  def __init__(self):
    # get Audit related settings
    self.audit_level = settings.AUDIT_LEVEL
    self.audit_oauth = settings.AUDIT_OAUTH
    self.audit_failure = settings.AUDIT_FAILURE
    if not AUDIT_LEVELS.has_key(self.audit_level):
      raise Exception('Invalid audit level in settings.py: %s'%(self.audit_level))

    self.audit_obj = None

  def must_audit(self, request):
    if self.audit_level == 'None':
      return False
    return self.audit_oauth or (not request.META['PATH_INFO'].startswith('/oauth'))

  def process_view(self, request, view_func, view_args, view_kwargs):
    basic = {}
    principal_info = {}
    resources = {}
    request_info = {}

    # Don't audit unless required to
    if not self.must_audit(request):
      self.audit_obj = None
      return None

    # Basic Info
    basic['datetime'] = strftime("%Y-%m-%d %H:%M:%S")

    if hasattr(view_func, 'resolve'):
      view_func = view_func.resolve(request)
    basic['view_func'] = view_func.func_name if view_func else ''

    # Principal Info
    if request.principal:
      principal_info['effective_principal_email'] = request.principal.effective_principal.email
      proxied_by = request.principal.proxied_by
      if proxied_by:
        principal_info['proxied_by_email'] = proxied_by.email

    # Resources
    carenet_id = record_id = None
    if view_kwargs.has_key('record'):
      resources['record_id'] = view_kwargs['record'].id
    elif view_kwargs.has_key('carenet'):
      resources['carenet_id'] = view_kwargs['carenet'].id

    if view_kwargs.has_key('document_id'):
      resources['document_id'] = view_kwargs['document_id']

    if view_kwargs.has_key('external_id'):

      # No need to resolve external ids: the info will still be in the DB
      resources['external_id'] = view_kwargs['external_id']
      
    if view_kwargs.has_key('message_id'):
      resources['message_id'] = view_kwargs['message_id']

    if view_kwargs.has_key('pha'):
      resources['pha_id'] = view_kwargs['pha'].id

    # Request Info

    # if request.META contains HTTP_AUTHORIZATION then use it
    # SZ: Temporary solution
    # Due to the possibility of different standards
    # we will need to check request.META
    # abstract this out!
    req_headers = ''
    if request.META.has_key('HTTP_AUTHORIZATION'):
      req_headers = request.META['HTTP_AUTHORIZATION']
    remote_host = ''
    if request.META.has_key('REMOTE_HOST'):
      remote_host = request.META['REMOTE_HOST']
    request_info['req_domain'] = remote_host
    request_info['req_headers'] = req_headers
    request_info['req_method'] = request.META['REQUEST_METHOD']
    request_info['req_ip_address'] = request.META['REMOTE_ADDR']
    request_info['req_url'] = request.META['PATH_INFO']

    # Build Audit object based on audit level
    data = {}
    for data_category in AUDIT_LEVELS[self.audit_level]:
      if data_category == BASIC:
        data.update(basic)
      if data_category == PRINCIPAL_INFO:
        data.update(principal_info)
      elif data_category == RESOURCES:
        data.update(resources)
      elif data_category == REQUEST_INFO:
        data.update(request_info)
      else:
        pass # ignore data categories we don't know about

    self.audit_obj = Audit(**data) if data else None
    
    return None

  def process_response(self, request, response):

    # Don't audit unless required to
    if not self.must_audit(request):
      return response

    # Build up data
    content_type = 'text/plain'
    content_type_str = 'content-type'

    status_code = 500
    if hasattr(response, 'status_code'):
      status_code = response.status_code

    if hasattr(response, '_headers') and \
        response._headers.has_key(content_type_str) and \
        response._headers[content_type_str][1]:
      content_type = response._headers[content_type_str][1]

    # Did the request complete successfully
    request_successful =  status_code < 400

    data = {}
    for data_category in AUDIT_LEVELS[self.audit_level]:
      if data_category == BASIC:
        data['request_successful'] = request_successful
    
      elif data_category == RESPONSE_INFO:
        data['resp_code'] = status_code
        data['resp_headers'] = content_type
        # Add error message in here mabye

    # Don't audit if we failed and aren't auditing failures
    if self.audit_failure or status_code < 400:
      self.save_response(data)

    if status_code == 403:
      logging.error("permission denied")
      from django import http
      return http.HttpResponseForbidden("<h4>Permission Denied</h4>")

    return response

  def save_response(self, data):
    if not self.audit_obj and data:
      # We got an exception before hitting auditwrapper on the way in: make sure to add basic info
      data['datetime'] = strftime("%Y-%m-%d %H:%M:%S")
      self.audit_obj = Audit(**data)

    else:
      for k,v in data.iteritems():
        if hasattr(self.audit_obj, k):
          setattr(self.audit_obj, k, v)
        
    self.audit_obj.save()

  def process_exception(self, request, exception):
    logging.error(str(exception))

########NEW FILE########
__FILENAME__ = authentication
"""
Middleware (filters) for Indivo

inspired by django.contrib.auth middleware, but doing it differently
for tighter integration into email-centric users in Indivo.
"""

from indivo.accesscontrol import security
from indivo.lib.utils import DjangoVersionDependentExecutor

class Authentication(object):
  def process_request(self, request):

    # django 1.3.0 fails to create a QueryDict for request.POST if we access
    # request.raw_post_data first, but django 1.3.1 raises an exception if
    # we read request.POST and subsequently read request.raw_post_data.
    #
    # So, we preemptively read the appropriate variable first, depending on
    # the current version of django
    self.avoid_post_clobbering(request)

    request.principal, request.oauth_request = security.get_principal(request)

  
  noclobber_map = {'1.3.0': lambda request: request.POST,
                   '1.3.1+': lambda request: request.raw_post_data,
                   }
  avoid_post_clobbering = DjangoVersionDependentExecutor(noclobber_map)

########NEW FILE########
__FILENAME__ = authorization
"""
Middleware (filters) for Indivo

inspired by django.contrib.auth middleware, but doing it differently
for tighter integration into email-centric users in Indivo.
"""

import re
import indivo
import logging

from time import strftime
from django.http import *
from django.core.exceptions import PermissionDenied
from django.conf import settings
from indivo.accesscontrol.access_rule import AccessRule

class Authorization(object):

    def process_view(self, request, view_func, view_args, view_kwargs):
        """ The process_view() hook allows us to examine the request before view_func is called"""
        # Special override flag
        if self.OVERRIDE:
            return None
        
        # Url exception(s)
        exc_pattern= settings.INDIVO_ACCESS_CONTROL_EXCEPTION
        if exc_pattern and re.match(exc_pattern, request.path):
            return None
        
        if hasattr(view_func, 'resolve'):
            resolved_func = view_func.resolve(request)
            if not resolved_func:
                return view_func.resolution_error_response
            else:
                view_func = resolved_func
        
        try:
            if view_func and hasattr(request, 'principal') and request.principal:
                access_rule = AccessRule.lookup(view_func)
                
                if access_rule and access_rule.check(request.principal, **view_kwargs): 
                    return None # Accept
        except:
            logging.debug('indivo.middlewares.Authorization: access_rule.check() was unsuccessful')
            raise PermissionDenied
        logging.debug('indivo.middlewares.Authorization: There is no principal')
        raise PermissionDenied
    
    @classmethod
    def override(cls):
        cls.OVERRIDE = True
    
    @classmethod
    def cancel_override(cls):
        cls.OVERRIDE = False

Authorization.OVERRIDE = False

# Mark that the authorization module has been loaded
# nothing gets served otherwise
indivo.AUTHORIZATION_MODULE_LOADED = True

########NEW FILE########
__FILENAME__ = paramloader
"""
Middleware (filters) for Indivo

Pre-processes paramaters that are passed to Indivo views,
replacing id strings with their corresponding Django models, 
including records, accounts, carenets, etc...

This is helpful to view functions, accesscontrol, and auditing.
"""

from django.http import Http404
from indivo import models

ID    = 'id'
EMAIL = 'email'
TOKEN = 'token'
SEPARATOR = '_'

# Contract: new param will be named the same as the
# old param, up to the first instance of SEPARATOR.

# CHANGE URLS so param name matches primary key in DB
LOAD_PARAMS = { 
  'account_email'   : ( models.Account,  EMAIL ),
  'account_id'      : ( models.Account,  EMAIL ),
  'carenet_id'      : ( models.Carenet,  ID    ),
  'pha_email'       : ( models.PHA,      EMAIL ),
  'record_id'       : ( models.Record,   ID    ),
  'reqtoken_id'     : ( models.ReqToken, TOKEN ),
}

class ParamLoader(object):

  def process_view(self, request, view_func, view_args, view_kwargs):
    """ substitute id-strings with models in view_kwargs:
    account_email becomes account, record_id becomes record, etc."""

    # Destructively modify view_kwargs for internal layers
    for param in LOAD_PARAMS.keys():
      if view_kwargs.has_key(param):
        model_obj = self.get_object_from_param(param, view_kwargs[param])
        
        #delete the old arg, and add the new one
        new_param = param[:param.find(SEPARATOR)]
        del view_kwargs[param]
        view_kwargs[new_param] = model_obj

    return None

  def get_object_from_param(self, param, param_val):
    return object_lookup_by_id(param_val, *LOAD_PARAMS[param])

def object_lookup_by_id(object_id, django_model, id_field):
  if object_id is None:
    return None
  query_kwargs = {id_field : object_id}
  try:
    return django_model.objects.get(**query_kwargs)
  except django_model.DoesNotExist:
    raise Http404
  



########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'Principal'
        db.create_table('indivo_principal', (
            ('id', self.gf('django.db.models.fields.CharField')(max_length=50, primary_key=True)),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='principal_created_by', null=True, to=orm['indivo.Principal'])),
            ('email', self.gf('django.db.models.fields.CharField')(unique=True, max_length=255)),
            ('type', self.gf('django.db.models.fields.CharField')(max_length=100)),
        ))
        db.send_create_signal('indivo', ['Principal'])

        # Adding model 'Account'
        db.create_table('indivo_account', (
            ('account', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Principal'], unique=True, primary_key=True)),
            ('primary_secret', self.gf('django.db.models.fields.CharField')(max_length=16, null=True)),
            ('secondary_secret', self.gf('django.db.models.fields.CharField')(max_length=8, null=True)),
            ('full_name', self.gf('django.db.models.fields.CharField')(max_length=150)),
            ('contact_email', self.gf('django.db.models.fields.CharField')(max_length=300)),
            ('last_login_at', self.gf('django.db.models.fields.DateTimeField')(null=True)),
            ('last_failed_login_at', self.gf('django.db.models.fields.DateTimeField')(null=True)),
            ('total_login_count', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('failed_login_count', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('state', self.gf('django.db.models.fields.CharField')(default='uninitialized', max_length=50)),
            ('last_state_change', self.gf('django.db.models.fields.DateTimeField')(null=True)),
        ))
        db.send_create_signal('indivo', ['Account'])

        # Adding model 'AuthSystem'
        db.create_table('indivo_authsystem', (
            ('id', self.gf('django.db.models.fields.CharField')(max_length=50, primary_key=True)),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='authsystem_created_by', null=True, to=orm['indivo.Principal'])),
            ('short_name', self.gf('django.db.models.fields.CharField')(unique=True, max_length=100)),
            ('internal_p', self.gf('django.db.models.fields.BooleanField')(default=False)),
        ))
        db.send_create_signal('indivo', ['AuthSystem'])

        # Adding model 'AccountAuthSystem'
        db.create_table('indivo_accountauthsystem', (
            ('id', self.gf('django.db.models.fields.CharField')(max_length=50, primary_key=True)),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='accountauthsystem_created_by', null=True, to=orm['indivo.Principal'])),
            ('account', self.gf('django.db.models.fields.related.ForeignKey')(related_name='auth_systems', to=orm['indivo.Account'])),
            ('auth_system', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.AuthSystem'])),
            ('username', self.gf('django.db.models.fields.CharField')(max_length=250)),
            ('auth_parameters', self.gf('django.db.models.fields.CharField')(max_length=2000, null=True)),
            ('user_attributes', self.gf('django.db.models.fields.CharField')(max_length=2000, null=True)),
        ))
        db.send_create_signal('indivo', ['AccountAuthSystem'])

        # Adding unique constraint on 'AccountAuthSystem', fields ['auth_system', 'username']
        db.create_unique('indivo_accountauthsystem', ['auth_system_id', 'username'])

        # Adding model 'Carenet'
        db.create_table('indivo_carenet', (
            ('id', self.gf('django.db.models.fields.CharField')(max_length=50, primary_key=True)),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='carenet_created_by', null=True, to=orm['indivo.Principal'])),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=40)),
            ('record', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Record'])),
        ))
        db.send_create_signal('indivo', ['Carenet'])

        # Adding unique constraint on 'Carenet', fields ['name', 'record']
        db.create_unique('indivo_carenet', ['name', 'record_id'])

        # Adding model 'CarenetDocument'
        db.create_table('indivo_carenetdocument', (
            ('id', self.gf('django.db.models.fields.CharField')(max_length=50, primary_key=True)),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='carenetdocument_created_by', null=True, to=orm['indivo.Principal'])),
            ('carenet', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Carenet'])),
            ('document', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Document'])),
            ('share_p', self.gf('django.db.models.fields.BooleanField')(default=True)),
        ))
        db.send_create_signal('indivo', ['CarenetDocument'])

        # Adding unique constraint on 'CarenetDocument', fields ['carenet', 'document']
        db.create_unique('indivo_carenetdocument', ['carenet_id', 'document_id'])

        # Adding model 'CarenetPHA'
        db.create_table('indivo_carenetpha', (
            ('id', self.gf('django.db.models.fields.CharField')(max_length=50, primary_key=True)),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='carenetpha_created_by', null=True, to=orm['indivo.Principal'])),
            ('carenet', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Carenet'])),
            ('pha', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.PHA'])),
        ))
        db.send_create_signal('indivo', ['CarenetPHA'])

        # Adding unique constraint on 'CarenetPHA', fields ['carenet', 'pha']
        db.create_unique('indivo_carenetpha', ['carenet_id', 'pha_id'])

        # Adding model 'CarenetAccount'
        db.create_table('indivo_carenetaccount', (
            ('id', self.gf('django.db.models.fields.CharField')(max_length=50, primary_key=True)),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='carenetaccount_created_by', null=True, to=orm['indivo.Principal'])),
            ('carenet', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Carenet'])),
            ('account', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Account'])),
            ('can_write', self.gf('django.db.models.fields.BooleanField')(default=False)),
        ))
        db.send_create_signal('indivo', ['CarenetAccount'])

        # Adding unique constraint on 'CarenetAccount', fields ['carenet', 'account']
        db.create_unique('indivo_carenetaccount', ['carenet_id', 'account_id'])

        # Adding model 'CarenetAutoshare'
        db.create_table('indivo_carenetautoshare', (
            ('id', self.gf('django.db.models.fields.CharField')(max_length=50, primary_key=True)),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='carenetautoshare_created_by', null=True, to=orm['indivo.Principal'])),
            ('carenet', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Carenet'])),
            ('record', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Record'])),
            ('type', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.DocumentSchema'], null=True)),
        ))
        db.send_create_signal('indivo', ['CarenetAutoshare'])

        # Adding unique constraint on 'CarenetAutoshare', fields ['carenet', 'record', 'type']
        db.create_unique('indivo_carenetautoshare', ['carenet_id', 'record_id', 'type_id'])

        # Adding model 'Share'
        db.create_table('indivo_share', (
            ('id', self.gf('django.db.models.fields.CharField')(max_length=50, primary_key=True)),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='share_created_by', null=True, to=orm['indivo.Principal'])),
            ('record', self.gf('django.db.models.fields.related.ForeignKey')(related_name='shares', to=orm['indivo.Record'])),
            ('with_account', self.gf('django.db.models.fields.related.ForeignKey')(related_name='shares_to', null=True, to=orm['indivo.Account'])),
            ('with_pha', self.gf('django.db.models.fields.related.ForeignKey')(related_name='shares_to', null=True, to=orm['indivo.PHA'])),
            ('authorized_at', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
            ('authorized_by', self.gf('django.db.models.fields.related.ForeignKey')(related_name='shares_authorized_by', null=True, to=orm['indivo.Account'])),
            ('carenet', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Carenet'], null=True)),
            ('role_label', self.gf('django.db.models.fields.CharField')(max_length=50, null=True)),
        ))
        db.send_create_signal('indivo', ['Share'])

        # Adding unique constraint on 'Share', fields ['record', 'with_account']
        db.create_unique('indivo_share', ['record_id', 'with_account_id'])

        # Adding unique constraint on 'Share', fields ['record', 'with_pha']
        db.create_unique('indivo_share', ['record_id', 'with_pha_id'])

        # Adding model 'AccessToken'
        db.create_table('indivo_accesstoken', (
            ('principal_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Principal'], unique=True, primary_key=True)),
            ('token', self.gf('django.db.models.fields.CharField')(max_length=40)),
            ('token_secret', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('share', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Share'])),
            ('account', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Account'], null=True)),
            ('carenet', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Carenet'], null=True)),
            ('expires_at', self.gf('django.db.models.fields.DateTimeField')(null=True)),
        ))
        db.send_create_signal('indivo', ['AccessToken'])

        # Adding model 'ReqToken'
        db.create_table('indivo_reqtoken', (
            ('principal_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Principal'], unique=True, primary_key=True)),
            ('token', self.gf('django.db.models.fields.CharField')(max_length=40)),
            ('token_secret', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('verifier', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('oauth_callback', self.gf('django.db.models.fields.CharField')(max_length=500, null=True)),
            ('pha', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.PHA'])),
            ('record', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Record'], null=True)),
            ('carenet', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Carenet'], null=True)),
            ('authorized_at', self.gf('django.db.models.fields.DateTimeField')(null=True)),
            ('authorized_by', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Account'], null=True)),
            ('share', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Share'], null=True)),
        ))
        db.send_create_signal('indivo', ['ReqToken'])

        # Adding model 'Message'
        db.create_table('indivo_message', (
            ('id', self.gf('django.db.models.fields.CharField')(max_length=50, primary_key=True)),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='message_created_by', null=True, to=orm['indivo.Principal'])),
            ('account', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Account'])),
            ('about_record', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Record'], null=True)),
            ('external_identifier', self.gf('django.db.models.fields.CharField')(max_length=250, null=True)),
            ('sender', self.gf('django.db.models.fields.related.ForeignKey')(related_name='message_as_sender', to=orm['indivo.Principal'])),
            ('recipient', self.gf('django.db.models.fields.related.ForeignKey')(related_name='message_as_recipient', to=orm['indivo.Principal'])),
            ('severity', self.gf('django.db.models.fields.CharField')(default='low', max_length=100)),
            ('subject', self.gf('django.db.models.fields.CharField')(max_length=100)),
            ('body_type', self.gf('django.db.models.fields.CharField')(default='plaintext', max_length=100)),
            ('body', self.gf('django.db.models.fields.TextField')()),
            ('received_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('read_at', self.gf('django.db.models.fields.DateTimeField')(null=True)),
            ('archived_at', self.gf('django.db.models.fields.DateTimeField')(null=True)),
            ('response_to', self.gf('django.db.models.fields.related.ForeignKey')(related_name='message_responses', null=True, to=orm['indivo.Message'])),
            ('num_attachments', self.gf('django.db.models.fields.IntegerField')(default=0)),
        ))
        db.send_create_signal('indivo', ['Message'])

        # Adding model 'MessageAttachment'
        db.create_table('indivo_messageattachment', (
            ('id', self.gf('django.db.models.fields.CharField')(max_length=50, primary_key=True)),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='messageattachment_created_by', null=True, to=orm['indivo.Principal'])),
            ('message', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Message'])),
            ('size', self.gf('django.db.models.fields.IntegerField')()),
            ('type', self.gf('django.db.models.fields.CharField')(max_length=250)),
            ('content', self.gf('django.db.models.fields.TextField')()),
            ('saved_to_document', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Document'], null=True)),
            ('attachment_num', self.gf('django.db.models.fields.IntegerField')()),
        ))
        db.send_create_signal('indivo', ['MessageAttachment'])

        # Adding unique constraint on 'MessageAttachment', fields ['message', 'attachment_num']
        db.create_unique('indivo_messageattachment', ['message_id', 'attachment_num'])

        # Adding model 'Notification'
        db.create_table('indivo_notification', (
            ('id', self.gf('django.db.models.fields.CharField')(max_length=50, primary_key=True)),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='notification_created_by', null=True, to=orm['indivo.Principal'])),
            ('account', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Account'])),
            ('record', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Record'], null=True)),
            ('sender', self.gf('django.db.models.fields.related.ForeignKey')(related_name='notifications_sent_by', to=orm['indivo.Principal'])),
            ('content', self.gf('django.db.models.fields.CharField')(max_length=500)),
            ('document', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Document'], null=True)),
            ('app_url', self.gf('django.db.models.fields.CharField')(max_length=300, null=True)),
        ))
        db.send_create_signal('indivo', ['Notification'])

        # Adding model 'RecordNotificationRoute'
        db.create_table('indivo_recordnotificationroute', (
            ('id', self.gf('django.db.models.fields.CharField')(max_length=50, primary_key=True)),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='recordnotificationroute_created_by', null=True, to=orm['indivo.Principal'])),
            ('record', self.gf('django.db.models.fields.related.ForeignKey')(related_name='notification_routes', to=orm['indivo.Record'])),
            ('account', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Account'])),
        ))
        db.send_create_signal('indivo', ['RecordNotificationRoute'])

        # Adding unique constraint on 'RecordNotificationRoute', fields ['account', 'record']
        db.create_unique('indivo_recordnotificationroute', ['account_id', 'record_id'])

        # Adding model 'StatusName'
        db.create_table('indivo_statusname', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=24)),
        ))
        db.send_create_signal('indivo', ['StatusName'])

        # Adding model 'DocumentStatusHistory'
        db.create_table('indivo_documentstatushistory', (
            ('id', self.gf('django.db.models.fields.CharField')(max_length=50, primary_key=True)),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='documentstatushistory_created_by', null=True, to=orm['indivo.Principal'])),
            ('status', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.StatusName'])),
            ('reason', self.gf('django.db.models.fields.TextField')()),
            ('document', self.gf('django.db.models.fields.CharField')(max_length=64, null=True)),
            ('record', self.gf('django.db.models.fields.CharField')(max_length=64, null=True)),
            ('proxied_by_principal', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('effective_principal', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
        ))
        db.send_create_signal('indivo', ['DocumentStatusHistory'])

        # Adding model 'Record'
        db.create_table('indivo_record', (
            ('id', self.gf('django.db.models.fields.CharField')(max_length=50, primary_key=True)),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='record_created_by', null=True, to=orm['indivo.Principal'])),
            ('owner', self.gf('django.db.models.fields.related.ForeignKey')(related_name='records_owned_by', null=True, to=orm['indivo.Principal'])),
            ('label', self.gf('django.db.models.fields.CharField')(max_length=60, null=True)),
            ('external_id', self.gf('django.db.models.fields.CharField')(max_length=250, unique=True, null=True)),
            ('contact', self.gf('django.db.models.fields.related.ForeignKey')(related_name='the_record_for_contact', null=True, to=orm['indivo.Document'])),
            ('demographics', self.gf('django.db.models.fields.related.ForeignKey')(related_name='the_record_for_demographics', null=True, to=orm['indivo.Document'])),
        ))
        db.send_create_signal('indivo', ['Record'])

        # Adding model 'DocumentSchema'
        db.create_table('indivo_documentschema', (
            ('id', self.gf('django.db.models.fields.CharField')(max_length=50, primary_key=True)),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='documentschema_created_by', null=True, to=orm['indivo.Principal'])),
            ('type', self.gf('django.db.models.fields.CharField')(max_length=500)),
            ('stylesheet', self.gf('django.db.models.fields.related.ForeignKey')(related_name='stylesheet', null=True, to=orm['indivo.Document'])),
        ))
        db.send_create_signal('indivo', ['DocumentSchema'])

        # Adding model 'Document'
        db.create_table('indivo_document', (
            ('id', self.gf('django.db.models.fields.CharField')(max_length=50, primary_key=True)),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='document_created_by', null=True, to=orm['indivo.Principal'])),
            ('record', self.gf('django.db.models.fields.related.ForeignKey')(related_name='documents', null=True, to=orm['indivo.Record'])),
            ('external_id', self.gf('django.db.models.fields.CharField')(max_length=250, null=True)),
            ('nevershare', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('type', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.DocumentSchema'], null=True)),
            ('mime_type', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
            ('content', self.gf('django.db.models.fields.TextField')(null=True)),
            ('content_file', self.gf('django.db.models.fields.files.FileField')(max_length=100)),
            ('pha', self.gf('django.db.models.fields.related.ForeignKey')(related_name='pha_document', null=True, to=orm['indivo.PHA'])),
            ('suppressed_at', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
            ('suppressed_by', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Principal'], null=True)),
            ('original', self.gf('django.db.models.fields.related.ForeignKey')(related_name='document_thread', null=True, to=orm['indivo.Document'])),
            ('replaced_by', self.gf('django.db.models.fields.related.ForeignKey')(related_name='document_replaced', null=True, to=orm['indivo.Document'])),
            ('size', self.gf('django.db.models.fields.IntegerField')()),
            ('label', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
            ('digest', self.gf('django.db.models.fields.CharField')(max_length=64)),
            ('status', self.gf('django.db.models.fields.related.ForeignKey')(default=1, to=orm['indivo.StatusName'])),
        ))
        db.send_create_signal('indivo', ['Document'])

        # Adding unique constraint on 'Document', fields ['record', 'external_id']
        db.create_unique('indivo_document', ['record_id', 'external_id'])

        # Adding model 'Nonce'
        db.create_table('indivo_nonce', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('nonce', self.gf('django.db.models.fields.CharField')(unique=True, max_length=100)),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
        ))
        db.send_create_signal('indivo', ['Nonce'])

        # Adding model 'PHA'
        db.create_table('indivo_pha', (
            ('principal_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Principal'], unique=True, primary_key=True)),
            ('consumer_key', self.gf('django.db.models.fields.CharField')(max_length=200)),
            ('secret', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
            ('start_url_template', self.gf('django.db.models.fields.CharField')(max_length=500)),
            ('callback_url', self.gf('django.db.models.fields.CharField')(max_length=500)),
            ('is_autonomous', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('autonomous_reason', self.gf('django.db.models.fields.TextField')(null=True)),
            ('has_ui', self.gf('django.db.models.fields.BooleanField')(default=True)),
            ('frameable', self.gf('django.db.models.fields.BooleanField')(default=True)),
            ('schema', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.DocumentSchema'], null=True)),
            ('description', self.gf('django.db.models.fields.CharField')(max_length=2000, null=True)),
            ('privacy_tou', self.gf('django.db.models.fields.TextField')(null=True)),
        ))
        db.send_create_signal('indivo', ['PHA'])

        # Adding model 'MachineApp'
        db.create_table('indivo_machineapp', (
            ('principal_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Principal'], unique=True, primary_key=True)),
            ('consumer_key', self.gf('django.db.models.fields.CharField')(max_length=200)),
            ('secret', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
            ('app_type', self.gf('django.db.models.fields.CharField')(max_length=100)),
        ))
        db.send_create_signal('indivo', ['MachineApp'])

        # Adding model 'SessionRequestToken'
        db.create_table('indivo_sessionrequesttoken', (
            ('id', self.gf('django.db.models.fields.CharField')(max_length=50, primary_key=True)),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='sessionrequesttoken_created_by', null=True, to=orm['indivo.Principal'])),
            ('token', self.gf('django.db.models.fields.CharField')(max_length=40)),
            ('secret', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Account'], null=True)),
            ('approved_p', self.gf('django.db.models.fields.BooleanField')(default=False)),
        ))
        db.send_create_signal('indivo', ['SessionRequestToken'])

        # Adding model 'SessionToken'
        db.create_table('indivo_sessiontoken', (
            ('id', self.gf('django.db.models.fields.CharField')(max_length=50, primary_key=True)),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='sessiontoken_created_by', null=True, to=orm['indivo.Principal'])),
            ('token', self.gf('django.db.models.fields.CharField')(max_length=40)),
            ('secret', self.gf('django.db.models.fields.CharField')(max_length=60)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Account'], null=True)),
            ('expires_at', self.gf('django.db.models.fields.DateTimeField')()),
        ))
        db.send_create_signal('indivo', ['SessionToken'])

        # Adding model 'DocumentRels'
        db.create_table('indivo_documentrels', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('document_0', self.gf('django.db.models.fields.related.ForeignKey')(related_name='rels_as_doc_0', to=orm['indivo.Document'])),
            ('document_1', self.gf('django.db.models.fields.related.ForeignKey')(related_name='rels_as_doc_1', to=orm['indivo.Document'])),
            ('relationship', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.DocumentSchema'])),
        ))
        db.send_create_signal('indivo', ['DocumentRels'])

        # Adding model 'DocumentProcessing'
        db.create_table('indivo_documentprocessing', (
            ('id', self.gf('django.db.models.fields.CharField')(max_length=50, primary_key=True)),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='documentprocessing_created_by', null=True, to=orm['indivo.Principal'])),
            ('document', self.gf('django.db.models.fields.related.ForeignKey')(related_name='processed_doc', null=True, to=orm['indivo.Document'])),
        ))
        db.send_create_signal('indivo', ['DocumentProcessing'])

        # Adding model 'Audit'
        db.create_table('indivo_audit', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('req_view_func', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('req_url', self.gf('django.db.models.fields.URLField')(max_length=200)),
            ('req_datetime', self.gf('django.db.models.fields.DateTimeField')()),
            ('req_ip_address', self.gf('django.db.models.fields.IPAddressField')(max_length=15)),
            ('req_domain', self.gf('django.db.models.fields.URLField')(max_length=200, null=True)),
            ('req_headers', self.gf('django.db.models.fields.TextField')()),
            ('req_method', self.gf('django.db.models.fields.CharField')(max_length=12)),
            ('record', self.gf('django.db.models.fields.CharField')(max_length=64, null=True)),
            ('document', self.gf('django.db.models.fields.CharField')(max_length=64, null=True)),
            ('resp_code', self.gf('django.db.models.fields.IntegerField')()),
            ('resp_error_msg', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('resp_server', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('resp_headers', self.gf('django.db.models.fields.TextField')()),
            ('req_effective_principal_email', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('req_proxied_by_principal_email', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
        ))
        db.send_create_signal('indivo', ['Audit'])

        # Adding model 'Fact'
        db.create_table('indivo_fact', (
            ('id', self.gf('django.db.models.fields.CharField')(max_length=50, primary_key=True)),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('document', self.gf('django.db.models.fields.related.ForeignKey')(related_name='allergy', null=True, to=orm['indivo.Document'])),
            ('record', self.gf('django.db.models.fields.related.ForeignKey')(related_name='allergy', null=True, to=orm['indivo.Record'])),
        ))
        db.send_create_signal('indivo', ['Fact'])

        # Adding model 'Allergy'
        db.create_table('indivo_allergy', (
            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
            ('date_diagnosed', self.gf('django.db.models.fields.DateField')(null=True)),
            ('diagnosed_by', self.gf('django.db.models.fields.CharField')(max_length=32, null=True)),
            ('allergen_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('allergen_type_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('allergen_type_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('allergen_type_abbrev', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('allergen_name', self.gf('django.db.models.fields.CharField')(max_length=200)),
            ('allergen_name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('allergen_name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('allergen_name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('reaction', self.gf('django.db.models.fields.CharField')(max_length=128, null=True)),
            ('specifics', self.gf('django.db.models.fields.TextField')(null=True)),
        ))
        db.send_create_signal('indivo', ['Allergy'])

        # Adding model 'SimpleClinicalNote'
        db.create_table('indivo_simpleclinicalnote', (
            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
            ('date_of_visit', self.gf('django.db.models.fields.DateTimeField')()),
            ('finalized_at', self.gf('django.db.models.fields.DateTimeField')(null=True)),
            ('visit_type', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
            ('visit_type_type', self.gf('django.db.models.fields.CharField')(max_length=80, null=True)),
            ('visit_type_value', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
            ('visit_type_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
            ('visit_location', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('specialty', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
            ('specialty_type', self.gf('django.db.models.fields.CharField')(max_length=80, null=True)),
            ('specialty_value', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
            ('specialty_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
            ('signed_at', self.gf('django.db.models.fields.DateTimeField')(null=True)),
            ('provider_name', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('provider_institution', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('chief_complaint', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('content', self.gf('django.db.models.fields.TextField')(null=True)),
        ))
        db.send_create_signal('indivo', ['SimpleClinicalNote'])

        # Adding model 'Equipment'
        db.create_table('indivo_equipment', (
            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
            ('date_started', self.gf('django.db.models.fields.DateField')(null=True)),
            ('date_stopped', self.gf('django.db.models.fields.DateField')(null=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=40)),
            ('vendor', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
            ('description', self.gf('django.db.models.fields.TextField')(null=True)),
        ))
        db.send_create_signal('indivo', ['Equipment'])

        # Adding model 'Measurement'
        db.create_table('indivo_measurement', (
            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
            ('type', self.gf('django.db.models.fields.CharField')(max_length=24)),
            ('value', self.gf('django.db.models.fields.FloatField')()),
            ('unit', self.gf('django.db.models.fields.CharField')(max_length=8)),
            ('datetime', self.gf('django.db.models.fields.DateTimeField')()),
        ))
        db.send_create_signal('indivo', ['Measurement'])

        # Adding model 'Immunization'
        db.create_table('indivo_immunization', (
            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
            ('date_administered', self.gf('django.db.models.fields.DateTimeField')(null=True)),
            ('administered_by', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
            ('vaccine_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('vaccine_type_type', self.gf('django.db.models.fields.CharField')(max_length=80, null=True)),
            ('vaccine_type_value', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
            ('vaccine_type_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
            ('vaccine_manufacturer', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
            ('vaccine_lot', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
            ('vaccine_expiration', self.gf('django.db.models.fields.DateField')(null=True)),
            ('sequence', self.gf('django.db.models.fields.IntegerField')(null=True)),
            ('anatomic_surface', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
            ('anatomic_surface_type', self.gf('django.db.models.fields.CharField')(max_length=80, null=True)),
            ('anatomic_surface_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
            ('anatomic_surface_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
            ('adverse_event', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
        ))
        db.send_create_signal('indivo', ['Immunization'])

        # Adding model 'Lab'
        db.create_table('indivo_lab', (
            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
            ('date_measured', self.gf('django.db.models.fields.DateTimeField')()),
            ('lab_name', self.gf('django.db.models.fields.CharField')(max_length=250, null=True)),
            ('lab_address', self.gf('django.db.models.fields.CharField')(max_length=250, null=True)),
            ('lab_type', self.gf('django.db.models.fields.CharField')(max_length=250, null=True)),
            ('lab_comments', self.gf('django.db.models.fields.TextField')(null=True)),
            ('first_panel_name', self.gf('django.db.models.fields.CharField')(max_length=250, null=True)),
            ('first_lab_test_name', self.gf('django.db.models.fields.CharField')(max_length=250, null=True)),
            ('first_lab_test_value', self.gf('django.db.models.fields.CharField')(max_length=250, null=True)),
        ))
        db.send_create_signal('indivo', ['Lab'])

        # Adding model 'Medication'
        db.create_table('indivo_medication', (
            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
            ('date_started', self.gf('django.db.models.fields.DateField')(null=True)),
            ('date_stopped', self.gf('django.db.models.fields.DateField')(null=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=200)),
            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
            ('brand_name', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('brand_name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('brand_name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('brand_name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
            ('dose_textvalue', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
            ('dose_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
            ('dose_unit', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
            ('dose_unit_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('dose_unit_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
            ('dose_unit_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
            ('route', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('route_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('route_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('route_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
            ('strength_textvalue', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
            ('strength_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
            ('strength_unit', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
            ('strength_unit_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('strength_unit_value', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
            ('strength_unit_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
            ('frequency', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
            ('frequency_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('frequency_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
            ('frequency_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
            ('prescribed_by_name', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('prescribed_by_institution', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('prescribed_on', self.gf('django.db.models.fields.DateField')(null=True)),
            ('prescribed_stop_on', self.gf('django.db.models.fields.DateField')(null=True)),
            ('dispense_as_written', self.gf('django.db.models.fields.NullBooleanField')(null=True)),
            ('prescription_duration', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
            ('prescription_refill_info', self.gf('django.db.models.fields.TextField')(null=True)),
            ('prescription_instructions', self.gf('django.db.models.fields.TextField')(null=True)),
        ))
        db.send_create_signal('indivo', ['Medication'])

        # Adding model 'Problem'
        db.create_table('indivo_problem', (
            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
            ('date_onset', self.gf('django.db.models.fields.DateTimeField')(null=True)),
            ('date_resolution', self.gf('django.db.models.fields.DateTimeField')(null=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=128)),
            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=128, null=True)),
            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=24, null=True)),
            ('comments', self.gf('django.db.models.fields.TextField')(null=True)),
            ('diagnosed_by', self.gf('django.db.models.fields.CharField')(max_length=128, null=True)),
        ))
        db.send_create_signal('indivo', ['Problem'])

        # Adding model 'Procedure'
        db.create_table('indivo_procedure', (
            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
            ('date_performed', self.gf('django.db.models.fields.DateTimeField')(null=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=100)),
            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=80, null=True)),
            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
            ('provider_name', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('provider_institution', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('location', self.gf('django.db.models.fields.CharField')(max_length=100, null=True)),
            ('comments', self.gf('django.db.models.fields.TextField')(null=True)),
        ))
        db.send_create_signal('indivo', ['Procedure'])

        # Adding model 'Vitals'
        db.create_table('indivo_vitals', (
            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
            ('date_measured', self.gf('django.db.models.fields.DateTimeField')(null=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=100)),
            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=80, null=True)),
            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
            ('value', self.gf('django.db.models.fields.FloatField')()),
            ('unit', self.gf('django.db.models.fields.CharField')(max_length=100)),
            ('unit_type', self.gf('django.db.models.fields.CharField')(max_length=80, null=True)),
            ('unit_value', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
            ('unit_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
            ('site', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
            ('position', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
            ('comments', self.gf('django.db.models.fields.TextField')(null=True)),
        ))
        db.send_create_signal('indivo', ['Vitals'])


    def backwards(self, orm):
        
        # Removing unique constraint on 'Document', fields ['record', 'external_id']
        db.delete_unique('indivo_document', ['record_id', 'external_id'])

        # Removing unique constraint on 'RecordNotificationRoute', fields ['account', 'record']
        db.delete_unique('indivo_recordnotificationroute', ['account_id', 'record_id'])

        # Removing unique constraint on 'MessageAttachment', fields ['message', 'attachment_num']
        db.delete_unique('indivo_messageattachment', ['message_id', 'attachment_num'])

        # Removing unique constraint on 'Share', fields ['record', 'with_pha']
        db.delete_unique('indivo_share', ['record_id', 'with_pha_id'])

        # Removing unique constraint on 'Share', fields ['record', 'with_account']
        db.delete_unique('indivo_share', ['record_id', 'with_account_id'])

        # Removing unique constraint on 'CarenetAutoshare', fields ['carenet', 'record', 'type']
        db.delete_unique('indivo_carenetautoshare', ['carenet_id', 'record_id', 'type_id'])

        # Removing unique constraint on 'CarenetAccount', fields ['carenet', 'account']
        db.delete_unique('indivo_carenetaccount', ['carenet_id', 'account_id'])

        # Removing unique constraint on 'CarenetPHA', fields ['carenet', 'pha']
        db.delete_unique('indivo_carenetpha', ['carenet_id', 'pha_id'])

        # Removing unique constraint on 'CarenetDocument', fields ['carenet', 'document']
        db.delete_unique('indivo_carenetdocument', ['carenet_id', 'document_id'])

        # Removing unique constraint on 'Carenet', fields ['name', 'record']
        db.delete_unique('indivo_carenet', ['name', 'record_id'])

        # Removing unique constraint on 'AccountAuthSystem', fields ['auth_system', 'username']
        db.delete_unique('indivo_accountauthsystem', ['auth_system_id', 'username'])

        # Deleting model 'Principal'
        db.delete_table('indivo_principal')

        # Deleting model 'Account'
        db.delete_table('indivo_account')

        # Deleting model 'AuthSystem'
        db.delete_table('indivo_authsystem')

        # Deleting model 'AccountAuthSystem'
        db.delete_table('indivo_accountauthsystem')

        # Deleting model 'Carenet'
        db.delete_table('indivo_carenet')

        # Deleting model 'CarenetDocument'
        db.delete_table('indivo_carenetdocument')

        # Deleting model 'CarenetPHA'
        db.delete_table('indivo_carenetpha')

        # Deleting model 'CarenetAccount'
        db.delete_table('indivo_carenetaccount')

        # Deleting model 'CarenetAutoshare'
        db.delete_table('indivo_carenetautoshare')

        # Deleting model 'Share'
        db.delete_table('indivo_share')

        # Deleting model 'AccessToken'
        db.delete_table('indivo_accesstoken')

        # Deleting model 'ReqToken'
        db.delete_table('indivo_reqtoken')

        # Deleting model 'Message'
        db.delete_table('indivo_message')

        # Deleting model 'MessageAttachment'
        db.delete_table('indivo_messageattachment')

        # Deleting model 'Notification'
        db.delete_table('indivo_notification')

        # Deleting model 'RecordNotificationRoute'
        db.delete_table('indivo_recordnotificationroute')

        # Deleting model 'StatusName'
        db.delete_table('indivo_statusname')

        # Deleting model 'DocumentStatusHistory'
        db.delete_table('indivo_documentstatushistory')

        # Deleting model 'Record'
        db.delete_table('indivo_record')

        # Deleting model 'DocumentSchema'
        db.delete_table('indivo_documentschema')

        # Deleting model 'Document'
        db.delete_table('indivo_document')

        # Deleting model 'Nonce'
        db.delete_table('indivo_nonce')

        # Deleting model 'PHA'
        db.delete_table('indivo_pha')

        # Deleting model 'MachineApp'
        db.delete_table('indivo_machineapp')

        # Deleting model 'SessionRequestToken'
        db.delete_table('indivo_sessionrequesttoken')

        # Deleting model 'SessionToken'
        db.delete_table('indivo_sessiontoken')

        # Deleting model 'DocumentRels'
        db.delete_table('indivo_documentrels')

        # Deleting model 'DocumentProcessing'
        db.delete_table('indivo_documentprocessing')

        # Deleting model 'Audit'
        db.delete_table('indivo_audit')

        # Deleting model 'Fact'
        db.delete_table('indivo_fact')

        # Deleting model 'Allergy'
        db.delete_table('indivo_allergy')

        # Deleting model 'SimpleClinicalNote'
        db.delete_table('indivo_simpleclinicalnote')

        # Deleting model 'Equipment'
        db.delete_table('indivo_equipment')

        # Deleting model 'Measurement'
        db.delete_table('indivo_measurement')

        # Deleting model 'Immunization'
        db.delete_table('indivo_immunization')

        # Deleting model 'Lab'
        db.delete_table('indivo_lab')

        # Deleting model 'Medication'
        db.delete_table('indivo_medication')

        # Deleting model 'Problem'
        db.delete_table('indivo_problem')

        # Deleting model 'Procedure'
        db.delete_table('indivo_procedure')

        # Deleting model 'Vitals'
        db.delete_table('indivo_vitals')


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Share']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'username'),)", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergen_name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'allergen_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_diagnosed': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'reaction': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'specifics': ('django.db.models.fields.TextField', [], {'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12'}),
            'req_proxied_by_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200'}),
            'req_view_func': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {}),
            'resp_error_msg': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {}),
            'resp_server': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.documentprocessing': {
            'Meta': {'object_name': 'DocumentProcessing'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentprocessing_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'processed_doc'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'brand_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'brand_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'dispense_as_written': ('django.db.models.fields.NullBooleanField', [], {'null': 'True'}),
            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescribed_stop_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescription_duration': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'prescription_instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'prescription_refill_info': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'route': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'route_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'strength_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'strength_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': True}),
            'privacy_tou': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'schema': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_onset': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'date_resolution': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '24', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Share']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.share': {
            'Meta': {'unique_together': "(('record', 'with_account'), ('record', 'with_pha'))", 'object_name': 'Share'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'share_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_to'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_to'", 'null': 'True', 'to': "orm['indivo.PHA']"})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0002_lab_schema_update
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Changing field 'PHA.principal_ptr'
        db.alter_column('indivo_pha', 'principal_ptr_id', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Principal'], unique=True))

        # Adding field 'Lab.normal_range_minimum'
        db.add_column('indivo_lab', 'normal_range_minimum', self.gf('django.db.models.fields.CharField')(max_length=250, null=True), keep_default=False)

        # Adding field 'Lab.normal_range_maximum'
        db.add_column('indivo_lab', 'normal_range_maximum', self.gf('django.db.models.fields.CharField')(max_length=250, null=True), keep_default=False)

        # Adding field 'Lab.non_critical_range_minimum'
        db.add_column('indivo_lab', 'non_critical_range_minimum', self.gf('django.db.models.fields.CharField')(max_length=250, null=True), keep_default=False)

        # Adding field 'Lab.non_critical_range_maximum'
        db.add_column('indivo_lab', 'non_critical_range_maximum', self.gf('django.db.models.fields.CharField')(max_length=250, null=True), keep_default=False)


    def backwards(self, orm):
        
        # Changing field 'PHA.principal_ptr'
        db.alter_column('indivo_pha', 'principal_ptr_id', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Principal'], unique=True, primary_key=True))

        # Deleting field 'Lab.normal_range_minimum'
        db.delete_column('indivo_lab', 'normal_range_minimum')

        # Deleting field 'Lab.normal_range_maximum'
        db.delete_column('indivo_lab', 'normal_range_maximum')

        # Deleting field 'Lab.non_critical_range_minimum'
        db.delete_column('indivo_lab', 'non_critical_range_minimum')

        # Deleting field 'Lab.non_critical_range_maximum'
        db.delete_column('indivo_lab', 'non_critical_range_maximum')


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Share']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'username'),)", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergen_name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'allergen_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_diagnosed': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'reaction': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'specifics': ('django.db.models.fields.TextField', [], {'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12'}),
            'req_proxied_by_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200'}),
            'req_view_func': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {}),
            'resp_error_msg': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {}),
            'resp_server': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.documentprocessing': {
            'Meta': {'object_name': 'DocumentProcessing'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentprocessing_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'processed_doc'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'brand_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'brand_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'dispense_as_written': ('django.db.models.fields.NullBooleanField', [], {'null': 'True'}),
            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescribed_stop_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescription_duration': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'prescription_instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'prescription_refill_info': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'route': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'route_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'strength_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'strength_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True'}),
            'privacy_tou': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'schema': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_onset': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'date_resolution': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '24', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Share']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.share': {
            'Meta': {'unique_together': "(('record', 'with_account'), ('record', 'with_pha'))", 'object_name': 'Share'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'share_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_to'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_to'", 'null': 'True', 'to': "orm['indivo.PHA']"})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0003_update_nonce
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Removing unique constraint on 'Nonce', fields ['nonce']
        db.delete_unique('indivo_nonce', ['nonce'])

        # Adding model 'NoUser'
        db.create_table('indivo_nouser', (
            ('principal_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Principal'], unique=True, primary_key=True)),
        ))
        db.send_create_signal('indivo', ['NoUser'])

        # Adding field 'Nonce.oauth_type'
        db.add_column('indivo_nonce', 'oauth_type', self.gf('django.db.models.fields.CharField')(max_length=50, null=True), keep_default=False)

        # Adding unique constraint on 'Nonce', fields ['nonce', 'oauth_type']
        db.create_unique('indivo_nonce', ['nonce', 'oauth_type'])


    def backwards(self, orm):
        
        # Removing unique constraint on 'Nonce', fields ['nonce', 'oauth_type']
        db.delete_unique('indivo_nonce', ['nonce', 'oauth_type'])

        # Deleting model 'NoUser'
        db.delete_table('indivo_nouser')

        # Deleting field 'Nonce.oauth_type'
        db.delete_column('indivo_nonce', 'oauth_type')

        # Adding unique constraint on 'Nonce', fields ['nonce']
        db.create_unique('indivo_nonce', ['nonce'])


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Share']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'username'),)", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergen_name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'allergen_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_diagnosed': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'reaction': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'specifics': ('django.db.models.fields.TextField', [], {'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12'}),
            'req_proxied_by_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200'}),
            'req_view_func': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {}),
            'resp_error_msg': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {}),
            'resp_server': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.documentprocessing': {
            'Meta': {'object_name': 'DocumentProcessing'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentprocessing_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'processed_doc'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'brand_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'brand_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'dispense_as_written': ('django.db.models.fields.NullBooleanField', [], {'null': 'True'}),
            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescribed_stop_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescription_duration': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'prescription_instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'prescription_refill_info': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'route': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'route_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'strength_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'strength_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True'}),
            'privacy_tou': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'schema': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_onset': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'date_resolution': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '24', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Share']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.share': {
            'Meta': {'unique_together': "(('record', 'with_account'), ('record', 'with_pha'))", 'object_name': 'Share'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'share_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_to'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_to'", 'null': 'True', 'to': "orm['indivo.PHA']"})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0004_move_doc_processing_to_model
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Document.replaces'
        db.add_column('indivo_document', 'replaces', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Document'], null=True), keep_default=False)

        # Adding field 'Document.processed'
        db.add_column('indivo_document', 'processed', self.gf('django.db.models.fields.BooleanField')(default=False), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Document.replaces'
        db.delete_column('indivo_document', 'replaces_id')

        # Deleting field 'Document.processed'
        db.delete_column('indivo_document', 'processed')


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Share']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'username'),)", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergen_name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'allergen_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_diagnosed': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'reaction': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'specifics': ('django.db.models.fields.TextField', [], {'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12'}),
            'req_proxied_by_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200'}),
            'req_view_func': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {}),
            'resp_error_msg': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {}),
            'resp_server': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.documentprocessing': {
            'Meta': {'object_name': 'DocumentProcessing'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentprocessing_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'processed_doc'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'brand_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'brand_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'dispense_as_written': ('django.db.models.fields.NullBooleanField', [], {'null': 'True'}),
            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescribed_stop_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescription_duration': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'prescription_instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'prescription_refill_info': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'route': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'route_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'strength_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'strength_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True'}),
            'privacy_tou': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'schema': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_onset': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'date_resolution': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '24', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Share']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.share': {
            'Meta': {'unique_together': "(('record', 'with_account'), ('record', 'with_pha'))", 'object_name': 'Share'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'share_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_to'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_to'", 'null': 'True', 'to': "orm['indivo.PHA']"})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0005_added_account_shares_and_pha_shares
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'AccountFullShare'
        db.create_table('indivo_accountfullshare', (
            ('id', self.gf('django.db.models.fields.CharField')(max_length=50, primary_key=True)),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='accountfullshare_created_by', null=True, to=orm['indivo.Principal'])),
            ('record', self.gf('django.db.models.fields.related.ForeignKey')(related_name='fullshares', to=orm['indivo.Record'])),
            ('with_account', self.gf('django.db.models.fields.related.ForeignKey')(related_name='fullshares_to', to=orm['indivo.Account'])),
            ('role_label', self.gf('django.db.models.fields.CharField')(max_length=50, null=True)),
        ))
        db.send_create_signal('indivo', ['AccountFullShare'])

        # Adding unique constraint on 'AccountFullShare', fields ['record', 'with_account']
        db.create_unique('indivo_accountfullshare', ['record_id', 'with_account_id'])

        # Adding model 'PHAShare'
        db.create_table('indivo_phashare', (
            ('id', self.gf('django.db.models.fields.CharField')(max_length=50, primary_key=True)),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='phashare_created_by', null=True, to=orm['indivo.Principal'])),
            ('record', self.gf('django.db.models.fields.related.ForeignKey')(related_name='pha_shares', to=orm['indivo.Record'])),
            ('with_pha', self.gf('django.db.models.fields.related.ForeignKey')(related_name='pha_shares_to', to=orm['indivo.PHA'])),
            ('authorized_at', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
            ('authorized_by', self.gf('django.db.models.fields.related.ForeignKey')(related_name='shares_authorized_by', null=True, to=orm['indivo.Account'])),
            ('carenet', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Carenet'], null=True)),
        ))
        db.send_create_signal('indivo', ['PHAShare'])

        # Adding unique constraint on 'PHAShare', fields ['record', 'with_pha']
        db.create_unique('indivo_phashare', ['record_id', 'with_pha_id'])

        # Dropping Foreign Key constraint on 'AccessToken.share'
        db.delete_foreign_key('indivo_accesstoken', 'share_id')

        # Dropping Foreign Key constraint on 'ReqToken.share'
        db.delete_foreign_key('indivo_reqtoken', 'share_id')
        

    def backwards(self, orm):
        
        # Removing unique constraint on 'PHAShare', fields ['record', 'with_pha']
        db.delete_unique('indivo_phashare', ['record_id', 'with_pha_id'])

        # Removing unique constraint on 'AccountFullShare', fields ['record', 'with_account']
        db.delete_unique('indivo_accountfullshare', ['record_id', 'with_account_id'])

        # Deleting model 'AccountFullShare'
        db.delete_table('indivo_accountfullshare')

        # Deleting model 'PHAShare'
        db.delete_table('indivo_phashare')

        # Adding Foreign Key constraint on 'AccessToken.share'
        db.alter_column('indivo_accesstoken', 'share_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Share']))

        # Adding Foreign Key constraint on 'ReqToken.share'
        db.alter_column('indivo_reqtoken', 'share_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Share'], null=True))


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'username'),)", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergen_name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'allergen_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_diagnosed': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'reaction': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'specifics': ('django.db.models.fields.TextField', [], {'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12'}),
            'req_proxied_by_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200'}),
            'req_view_func': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {}),
            'resp_error_msg': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {}),
            'resp_server': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.documentprocessing': {
            'Meta': {'object_name': 'DocumentProcessing'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentprocessing_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'processed_doc'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'brand_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'brand_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'dispense_as_written': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescribed_stop_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescription_duration': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'prescription_instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'prescription_refill_info': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'route': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'route_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'strength_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'strength_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA', '_ormbases': ['indivo.Principal']},
#            'Meta': {'object_name': 'PHA'},
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True'}),
            'privacy_tou': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'schema': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_onset': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'date_resolution': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '24', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.CharField', [], {'max_length':'50', 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.share': {
            'Meta': {'unique_together': "(('record', 'with_account'), ('record', 'with_pha'))", 'object_name': 'Share'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'share_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_to'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_to'", 'null': 'True', 'to': "orm['indivo.PHA']"})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0006_data_migration_shares_to_account_shares_and_pha_shares
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):
    no_dry_run = True

    def forwards(self, orm):
        
        # Create new object for all the old shares in the database
        for share in orm.Share.objects.values():
            
            # Create the PHA Shares
            if share['with_pha_id']:
                del share['with_account_id']
                del share['role_label']
                newshare = orm.PHAShare(**share)

            # Create the Account Shares
            elif share['with_account_id']:
                del share['with_pha_id']
                del share['authorized_at']
                del share['authorized_by_id']
                del share['carenet_id']
                newshare = orm.AccountFullShare(**share)


            newshare.save()

    def backwards(self, orm):
        
        # Create the old-style Share object
        for share in orm.PHAShare.objects.values():
            oldshare = orm.Share(**share)
            oldshare.save()

        for share in orm.AccountFullShare.objects.values():
            odlshare = orm.Share(**share)
            oldshare.save()

    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'username'),)", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergen_name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'allergen_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_diagnosed': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'reaction': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'specifics': ('django.db.models.fields.TextField', [], {'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12'}),
            'req_proxied_by_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200'}),
            'req_view_func': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {}),
            'resp_error_msg': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {}),
            'resp_server': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.documentprocessing': {
            'Meta': {'object_name': 'DocumentProcessing'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentprocessing_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'processed_doc'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'brand_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'brand_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'dispense_as_written': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescribed_stop_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescription_duration': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'prescription_instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'prescription_refill_info': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'route': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'route_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'strength_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'strength_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA', '_ormbases': ['indivo.Principal']},
#            'Meta': {'object_name': 'PHA'},
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True'}),
            'privacy_tou': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'schema': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_onset': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'date_resolution': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '24', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.share': {
            'Meta': {'unique_together': "(('record', 'with_account'), ('record', 'with_pha'))", 'object_name': 'Share'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'share_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_to'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_to'", 'null': 'True', 'to': "orm['indivo.PHA']"})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0007_dropped_oldstyle_shares
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Removing unique constraint on 'Share', fields ['record', 'with_pha']
        db.delete_unique('indivo_share', ['record_id', 'with_pha_id'])

        # Removing unique constraint on 'Share', fields ['record', 'with_account']
        db.delete_unique('indivo_share', ['record_id', 'with_account_id'])

        # Deleting model 'Share'
        db.delete_table('indivo_share')

        # Changing field 'AccessToken.share'
        db.alter_column('indivo_accesstoken', 'share_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.PHAShare']))

        # Changing field 'ReqToken.share'
        db.alter_column('indivo_reqtoken', 'share_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.PHAShare'], null=True))


    def backwards(self, orm):
        
        # Adding model 'Share'
        db.create_table('indivo_share', (
            ('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='share_created_by', null=True, to=orm['indivo.Principal'])),
            ('authorized_at', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
            ('with_pha', self.gf('django.db.models.fields.related.ForeignKey')(related_name='shares_to', null=True, to=orm['indivo.PHA'])),
            ('authorized_by', self.gf('django.db.models.fields.related.ForeignKey')(related_name='shares_authorized_by', null=True, to=orm['indivo.Account'])),
            ('id', self.gf('django.db.models.fields.CharField')(max_length=50, primary_key=True)),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('role_label', self.gf('django.db.models.fields.CharField')(max_length=50, null=True)),
            ('record', self.gf('django.db.models.fields.related.ForeignKey')(related_name='shares', to=orm['indivo.Record'])),
            ('with_account', self.gf('django.db.models.fields.related.ForeignKey')(related_name='shares_to', null=True, to=orm['indivo.Account'])),
            ('carenet', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Carenet'], null=True)),
        ))
        db.send_create_signal('indivo', ['Share'])

        # Adding unique constraint on 'Share', fields ['record', 'with_account']
        db.create_unique('indivo_share', ['record_id', 'with_account_id'])

        # Adding unique constraint on 'Share', fields ['record', 'with_pha']
        db.create_unique('indivo_share', ['record_id', 'with_pha_id'])

        # Deleting Foreign Key constraint on 'AccessToken.share'
        db.delete_foreign_key('indivo_accesstoken', 'share_id')

        # Deleteing Foreign Key constraint on 'ReqToken.share'
        db.delete_foreign_key('indivo_reqtoken', 'share_id')

    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'username'),)", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergen_name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'allergen_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_diagnosed': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'reaction': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'specifics': ('django.db.models.fields.TextField', [], {'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12'}),
            'req_proxied_by_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200'}),
            'req_view_func': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {}),
            'resp_error_msg': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {}),
            'resp_server': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.documentprocessing': {
            'Meta': {'object_name': 'DocumentProcessing'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentprocessing_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'processed_doc'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'brand_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'brand_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'dispense_as_written': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescribed_stop_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescription_duration': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'prescription_instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'prescription_refill_info': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'route': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'route_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'strength_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'strength_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA', '_ormbases': ['indivo.Principal']},
#            'Meta': {'object_name': 'PHA'},
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True'}),
            'privacy_tou': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'schema': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_onset': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'date_resolution': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '24', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0008_added_new_audit_fields
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Audit.datetime'
        db.add_column('indivo_audit', 'datetime', self.gf('django.db.models.fields.DateTimeField')(null=True), keep_default=False)

        # Adding field 'Audit.view_func'
        db.add_column('indivo_audit', 'view_func', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Audit.request_successful'
        db.add_column('indivo_audit', 'request_successful', self.gf('django.db.models.fields.BooleanField')(default=False), keep_default=False)

        # Adding field 'Audit.effective_principal_email'
        db.add_column('indivo_audit', 'effective_principal_email', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Audit.proxied_by_email'
        db.add_column('indivo_audit', 'proxied_by_email', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Audit.carenet_id'
        db.add_column('indivo_audit', 'carenet_id', self.gf('django.db.models.fields.CharField')(max_length=64, null=True), keep_default=False)

        # Adding field 'Audit.record_id'
        db.add_column('indivo_audit', 'record_id', self.gf('django.db.models.fields.CharField')(max_length=64, null=True), keep_default=False)

        # Adding field 'Audit.pha_id'
        db.add_column('indivo_audit', 'pha_id', self.gf('django.db.models.fields.CharField')(max_length=64, null=True), keep_default=False)

        # Adding field 'Audit.document_id'
        db.add_column('indivo_audit', 'document_id', self.gf('django.db.models.fields.CharField')(max_length=64, null=True), keep_default=False)

        # Adding field 'Audit.external_id'
        db.add_column('indivo_audit', 'external_id', self.gf('django.db.models.fields.CharField')(max_length=250, null=True), keep_default=False)

        # Adding field 'Audit.message_id'
        db.add_column('indivo_audit', 'message_id', self.gf('django.db.models.fields.CharField')(max_length=250, null=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Audit.datetime'
        db.delete_column('indivo_audit', 'datetime')

        # Deleting field 'Audit.view_func'
        db.delete_column('indivo_audit', 'view_func')

        # Deleting field 'Audit.request_successful'
        db.delete_column('indivo_audit', 'request_successful')

        # Deleting field 'Audit.effective_principal_email'
        db.delete_column('indivo_audit', 'effective_principal_email')

        # Deleting field 'Audit.proxied_by_email'
        db.delete_column('indivo_audit', 'proxied_by_email')

        # Deleting field 'Audit.carenet_id'
        db.delete_column('indivo_audit', 'carenet_id')

        # Deleting field 'Audit.record_id'
        db.delete_column('indivo_audit', 'record_id')

        # Deleting field 'Audit.pha_id'
        db.delete_column('indivo_audit', 'pha_id')

        # Deleting field 'Audit.document_id'
        db.delete_column('indivo_audit', 'document_id')

        # Deleting field 'Audit.external_id'
        db.delete_column('indivo_audit', 'external_id')

        # Deleting field 'Audit.message_id'
        db.delete_column('indivo_audit', 'message_id')


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'username'),)", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergen_name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'allergen_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_diagnosed': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'reaction': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'specifics': ('django.db.models.fields.TextField', [], {'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12'}),
            'req_proxied_by_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200'}),
            'req_view_func': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {}),
            'resp_error_msg': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {}),
            'resp_server': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.documentprocessing': {
            'Meta': {'object_name': 'DocumentProcessing'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentprocessing_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'processed_doc'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'brand_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'brand_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'dispense_as_written': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescribed_stop_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescription_duration': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'prescription_instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'prescription_refill_info': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'route': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'route_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'strength_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'strength_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True'}),
            'privacy_tou': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'schema': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_onset': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'date_resolution': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '24', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0009_moved_to_new_audit_schema
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models

class Migration(DataMigration):

    def forwards(self, orm):
        "Moving Audit data over to new schema"
        for audit in orm.Audit.objects.all():
            # Basic Info
            audit.datetime = audit.req_datetime
            audit.view_func = audit.req_view_func
            
            # Principal Info
            audit.effective_principal_email = audit.req_effective_principal_email
            audit.proxied_by_email = audit.req_proxied_by_principal_email

            # Resources
            audit.record_id = audit.record
            audit.document_id = audit.document
            
            # Request/Response info: No changes needed
            
            audit.save()

    def backwards(self, orm):
        "Moving Audit data back to old schema"
        for audit in orm.Audit.objects.all():
            # Basic Info
            audit.req_datetime = audit.datetime
            audit.req_view_func = audit.view_func
            
            # Principal Info
            audit.req_effective_principal_email = audit.effective_principal_email
            audit.req_proxied_by_principal_email = audit.proxied_by_email

            # Resources
            audit.record = audit.record_id
            audit.document = audit.document_id
            
            # Request/Response info: No changes needed

            audit.save()


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'username'),)", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergen_name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'allergen_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_diagnosed': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'reaction': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'specifics': ('django.db.models.fields.TextField', [], {'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12'}),
            'req_proxied_by_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200'}),
            'req_view_func': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {}),
            'resp_error_msg': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {}),
            'resp_server': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.documentprocessing': {
            'Meta': {'object_name': 'DocumentProcessing'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentprocessing_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'processed_doc'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'brand_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'brand_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'dispense_as_written': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescribed_stop_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescription_duration': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'prescription_instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'prescription_refill_info': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'route': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'route_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'strength_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'strength_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True'}),
            'privacy_tou': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'schema': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_onset': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'date_resolution': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '24', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0010_dropped_old_audit_fields
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Deleting field 'Audit.resp_error_msg'
        db.delete_column('indivo_audit', 'resp_error_msg')

        # Deleting field 'Audit.req_effective_principal_email'
        db.delete_column('indivo_audit', 'req_effective_principal_email')

        # Deleting field 'Audit.req_proxied_by_principal_email'
        db.delete_column('indivo_audit', 'req_proxied_by_principal_email')

        # Deleting field 'Audit.document'
        db.delete_column('indivo_audit', 'document')

        # Deleting field 'Audit.resp_server'
        db.delete_column('indivo_audit', 'resp_server')

        # Deleting field 'Audit.req_view_func'
        db.delete_column('indivo_audit', 'req_view_func')

        # Deleting field 'Audit.req_datetime'
        db.delete_column('indivo_audit', 'req_datetime')

        # Deleting field 'Audit.record'
        db.delete_column('indivo_audit', 'record')

        # Changing field 'Audit.req_ip_address'
        db.alter_column('indivo_audit', 'req_ip_address', self.gf('django.db.models.fields.IPAddressField')(max_length=15, null=True))

        # Changing field 'Audit.req_headers'
        db.alter_column('indivo_audit', 'req_headers', self.gf('django.db.models.fields.TextField')(null=True))

        # Changing field 'Audit.resp_code'
        db.alter_column('indivo_audit', 'resp_code', self.gf('django.db.models.fields.IntegerField')(null=True))

        # Changing field 'Audit.resp_headers'
        db.alter_column('indivo_audit', 'resp_headers', self.gf('django.db.models.fields.TextField')(null=True))

        # Changing field 'Audit.req_method'
        db.alter_column('indivo_audit', 'req_method', self.gf('django.db.models.fields.CharField')(max_length=12, null=True))

        # Changing field 'Audit.datetime'
        db.alter_column('indivo_audit', 'datetime', self.gf('django.db.models.fields.DateTimeField')())

        # Changing field 'Audit.req_url'
        db.alter_column('indivo_audit', 'req_url', self.gf('django.db.models.fields.URLField')(max_length=200, null=True))


    def backwards(self, orm):
        
        # Adding field 'Audit.resp_error_msg'
        db.add_column('indivo_audit', 'resp_error_msg', self.gf('django.db.models.fields.CharField')(default='', max_length=255), keep_default=False)

        # Adding field 'Audit.req_effective_principal_email'
        db.add_column('indivo_audit', 'req_effective_principal_email', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Audit.req_proxied_by_principal_email'
        db.add_column('indivo_audit', 'req_proxied_by_principal_email', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Audit.document'
        db.add_column('indivo_audit', 'document', self.gf('django.db.models.fields.CharField')(max_length=64, null=True), keep_default=False)

        # Adding field 'Audit.resp_server'
        db.add_column('indivo_audit', 'resp_server', self.gf('django.db.models.fields.CharField')(default='', max_length=255), keep_default=False)

        # Adding field 'Audit.req_view_func'
        db.add_column('indivo_audit', 'req_view_func', self.gf('django.db.models.fields.CharField')(default='', max_length=255), keep_default=False)

        # Adding field 'Audit.req_datetime'
        db.add_column('indivo_audit', 'req_datetime', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2011, 4, 26, 15, 53, 30, 682429)), keep_default=False)

        # Adding field 'Audit.record'
        db.add_column('indivo_audit', 'record', self.gf('django.db.models.fields.CharField')(max_length=64, null=True), keep_default=False)

        # Changing field 'Audit.req_ip_address'
        db.alter_column('indivo_audit', 'req_ip_address', self.gf('django.db.models.fields.IPAddressField')(max_length=15))

        # Changing field 'Audit.req_headers'
        db.alter_column('indivo_audit', 'req_headers', self.gf('django.db.models.fields.TextField')())

        # Changing field 'Audit.resp_code'
        db.alter_column('indivo_audit', 'resp_code', self.gf('django.db.models.fields.IntegerField')())

        # Changing field 'Audit.resp_headers'
        db.alter_column('indivo_audit', 'resp_headers', self.gf('django.db.models.fields.TextField')())

        # Changing field 'Audit.req_method'
        db.alter_column('indivo_audit', 'req_method', self.gf('django.db.models.fields.CharField')(max_length=12))

        # Changing field 'Audit.datetime'
        db.alter_column('indivo_audit', 'datetime', self.gf('django.db.models.fields.DateTimeField')(null=True))

        # Changing field 'Audit.req_url'
        db.alter_column('indivo_audit', 'req_url', self.gf('django.db.models.fields.URLField')(max_length=200))


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'username'),)", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergen_name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'allergen_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_diagnosed': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'reaction': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'specifics': ('django.db.models.fields.TextField', [], {'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.documentprocessing': {
            'Meta': {'object_name': 'DocumentProcessing'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentprocessing_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'processed_doc'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'brand_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'brand_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'dispense_as_written': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescribed_stop_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescription_duration': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'prescription_instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'prescription_refill_info': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'route': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'route_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'strength_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'strength_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True'}),
            'privacy_tou': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'schema': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_onset': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'date_resolution': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '24', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0011_unique_constraint_on_messages
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding unique constraint on 'Message', fields ['account', 'external_identifier', 'sender']
        db.create_unique('indivo_message', ['account_id', 'external_identifier', 'sender_id'])


    def backwards(self, orm):
        
        # Removing unique constraint on 'Message', fields ['account', 'external_identifier', 'sender']
        db.delete_unique('indivo_message', ['account_id', 'external_identifier', 'sender_id'])


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'username'),)", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergen_name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'allergen_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_diagnosed': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'reaction': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'specifics': ('django.db.models.fields.TextField', [], {'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.documentprocessing': {
            'Meta': {'object_name': 'DocumentProcessing'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentprocessing_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'processed_doc'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'brand_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'brand_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'dispense_as_written': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescribed_stop_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescription_duration': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'prescription_instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'prescription_refill_info': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'route': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'route_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'strength_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'strength_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'unique_together': "(('account', 'external_identifier', 'sender'),)", 'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True'}),
            'privacy_tou': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'schema': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_onset': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'date_resolution': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '24', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0012_accountauthsystem_add_unique_constraint
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding unique constraint on 'AccountAuthSystem', fields ['account', 'auth_system']
        db.create_unique('indivo_accountauthsystem', ['account_id', 'auth_system_id'])


    def backwards(self, orm):
        
        # Removing unique constraint on 'AccountAuthSystem', fields ['account', 'auth_system']
        db.delete_unique('indivo_accountauthsystem', ['account_id', 'auth_system_id'])


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'account'), ('auth_system', 'username'))", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergen_name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'allergen_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_diagnosed': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'reaction': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'specifics': ('django.db.models.fields.TextField', [], {'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.documentprocessing': {
            'Meta': {'object_name': 'DocumentProcessing'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentprocessing_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'processed_doc'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'brand_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'brand_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'dispense_as_written': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescribed_stop_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescription_duration': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'prescription_instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'prescription_refill_info': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'route': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'route_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'strength_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'strength_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'unique_together': "(('account', 'external_identifier', 'sender'),)", 'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True'}),
            'privacy_tou': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'schema': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_onset': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'date_resolution': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '24', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0013_auto__add_field_documentschema_internal_p
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'DocumentSchema.internal_p'
        db.add_column('indivo_documentschema', 'internal_p', self.gf('django.db.models.fields.BooleanField')(default=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'DocumentSchema.internal_p'
        db.delete_column('indivo_documentschema', 'internal_p')


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'account'), ('auth_system', 'username'))", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergen_name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'allergen_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_diagnosed': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'reaction': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'specifics': ('django.db.models.fields.TextField', [], {'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.documentprocessing': {
            'Meta': {'object_name': 'DocumentProcessing'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentprocessing_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'processed_doc'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'brand_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'brand_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'dispense_as_written': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescribed_stop_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescription_duration': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'prescription_instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'prescription_refill_info': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'route': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'route_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'strength_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'strength_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'unique_together': "(('account', 'external_identifier', 'sender'),)", 'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True'}),
            'privacy_tou': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'schema': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_onset': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'date_resolution': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '24', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0014_auto__add_field_document_fqn
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Document.fqn'
        db.add_column('indivo_document', 'fqn', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Document.fqn'
        db.delete_column('indivo_document', 'fqn')


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'account'), ('auth_system', 'username'))", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergen_name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'allergen_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_diagnosed': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'reaction': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'specifics': ('django.db.models.fields.TextField', [], {'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'fqn': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.documentprocessing': {
            'Meta': {'object_name': 'DocumentProcessing'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentprocessing_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'processed_doc'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'brand_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'brand_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'dispense_as_written': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescribed_stop_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescription_duration': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'prescription_instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'prescription_refill_info': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'route': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'route_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'strength_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'strength_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'unique_together': "(('account', 'external_identifier', 'sender'),)", 'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True'}),
            'privacy_tou': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'schema': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_onset': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'date_resolution': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '24', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0015_document_schemas_to_fqns
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models

class Migration(DataMigration):

    def forwards(self, orm):
        "Write your forwards methods here."
        for doc in orm.Document.objects.all():
            doc.fqn = doc.type.type
            doc.save()

    def backwards(self, orm):
        "Write your backwards methods here."
        for doc in orm.Document.objects.all():
            doc.type = orm.DocumentSchema(type=doc.fqn)
            doc.save()

    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'account'), ('auth_system', 'username'))", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergen_name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'allergen_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_diagnosed': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'reaction': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'specifics': ('django.db.models.fields.TextField', [], {'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'fqn': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.documentprocessing': {
            'Meta': {'object_name': 'DocumentProcessing'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentprocessing_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'processed_doc'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'brand_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'brand_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'dispense_as_written': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescribed_stop_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescription_duration': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'prescription_instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'prescription_refill_info': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'route': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'route_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'strength_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'strength_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'unique_together': "(('account', 'external_identifier', 'sender'),)", 'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True'}),
            'privacy_tou': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'schema': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_onset': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'date_resolution': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '24', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0016_auto__del_field_document_type
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Deleting field 'Document.type'
        db.delete_column('indivo_document', 'type_id')


    def backwards(self, orm):
        
        # Adding field 'Document.type'
        db.add_column('indivo_document', 'type', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.DocumentSchema'], null=True), keep_default=False)


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'account'), ('auth_system', 'username'))", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergen_name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'allergen_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_diagnosed': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'reaction': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'specifics': ('django.db.models.fields.TextField', [], {'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'fqn': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'})
        },
        'indivo.documentprocessing': {
            'Meta': {'object_name': 'DocumentProcessing'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentprocessing_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'processed_doc'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'brand_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'brand_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'dispense_as_written': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescribed_stop_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescription_duration': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'prescription_instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'prescription_refill_info': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'route': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'route_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'strength_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'strength_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'unique_together': "(('account', 'external_identifier', 'sender'),)", 'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True'}),
            'privacy_tou': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'schema': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_onset': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'date_resolution': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '24', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0017_auto__del_documentprocessing
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Deleting model 'DocumentProcessing'
        db.delete_table('indivo_documentprocessing')


    def backwards(self, orm):
        
        # Adding model 'DocumentProcessing'
        db.create_table('indivo_documentprocessing', (
            ('creator', self.gf('django.db.models.fields.related.ForeignKey')(related_name='documentprocessing_created_by', null=True, to=orm['indivo.Principal'])),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('modified_at', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, auto_now_add=True, blank=True)),
            ('document', self.gf('django.db.models.fields.related.ForeignKey')(related_name='processed_doc', null=True, to=orm['indivo.Document'])),
            ('id', self.gf('django.db.models.fields.CharField')(max_length=50, primary_key=True)),
        ))
        db.send_create_signal('indivo', ['DocumentProcessing'])


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'account'), ('auth_system', 'username'))", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergen_name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'allergen_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_diagnosed': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'reaction': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'specifics': ('django.db.models.fields.TextField', [], {'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'fqn': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'brand_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'brand_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'dispense_as_written': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescribed_stop_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescription_duration': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'prescription_instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'prescription_refill_info': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'route': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'route_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'strength_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'strength_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'unique_together': "(('account', 'external_identifier', 'sender'),)", 'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True'}),
            'privacy_tou': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'schema': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_onset': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'date_resolution': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '24', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0018_add_field_accesstoken_connect_auth_p
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'AccessToken.connect_auth_p'
        db.add_column('indivo_accesstoken', 'connect_auth_p', self.gf('django.db.models.fields.BooleanField')(default=False), keep_default=False)

    def backwards(self, orm):
        
        # Deleting field 'AccessToken.connect_auth_p'
        db.delete_column('indivo_accesstoken', 'connect_auth_p')

    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'connect_auth_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'account'), ('auth_system', 'username'))", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergen_name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'allergen_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_diagnosed': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'reaction': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'specifics': ('django.db.models.fields.TextField', [], {'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'fqn': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'brand_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'brand_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'dispense_as_written': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescribed_stop_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescription_duration': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'prescription_instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'prescription_refill_info': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'route': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'route_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'strength_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'strength_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'unique_together': "(('account', 'external_identifier', 'sender'),)", 'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'privacy_tou': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'schema': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_onset': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'date_resolution': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '24', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0019_move_to_app_manifests
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'MachineApp.description'
        db.add_column('indivo_machineapp', 'description', self.gf('django.db.models.fields.CharField')(max_length=2000, null=True), keep_default=False)

        # Adding field 'MachineApp.author'
        db.add_column('indivo_machineapp', 'author', self.gf('django.db.models.fields.CharField')(max_length=200, null=True), keep_default=False)

        # Adding field 'MachineApp.version'
        db.add_column('indivo_machineapp', 'version', self.gf('django.db.models.fields.CharField')(max_length=40, null=True), keep_default=False)

        # Adding field 'MachineApp.indivo_version'
        db.add_column('indivo_machineapp', 'indivo_version', self.gf('django.db.models.fields.CharField')(max_length=40, null=True), keep_default=False)

        # Deleting field 'PHA.privacy_tou'
        db.delete_column('indivo_pha', 'privacy_tou')

        # Deleting field 'PHA.schema'
        db.delete_column('indivo_pha', 'schema_id')

        # Adding field 'PHA.author'
        db.add_column('indivo_pha', 'author', self.gf('django.db.models.fields.CharField')(max_length=200, null=True), keep_default=False)

        # Adding field 'PHA.version'
        db.add_column('indivo_pha', 'version', self.gf('django.db.models.fields.CharField')(max_length=40, null=True), keep_default=False)

        # Adding field 'PHA.indivo_version'
        db.add_column('indivo_pha', 'indivo_version', self.gf('django.db.models.fields.CharField')(max_length=40, null=True), keep_default=False)

        # Adding field 'PHA.icon_url'
        db.add_column('indivo_pha', 'icon_url', self.gf('django.db.models.fields.CharField')(max_length=500, null=True), keep_default=False)

        # Adding field 'PHA.requirements'
        db.add_column('indivo_pha', 'requirements', self.gf('django.db.models.fields.TextField')(null=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'MachineApp.description'
        db.delete_column('indivo_machineapp', 'description')

        # Deleting field 'MachineApp.author'
        db.delete_column('indivo_machineapp', 'author')

        # Deleting field 'MachineApp.version'
        db.delete_column('indivo_machineapp', 'version')

        # Deleting field 'MachineApp.indivo_version'
        db.delete_column('indivo_machineapp', 'indivo_version')

        # Adding field 'PHA.privacy_tou'
        db.add_column('indivo_pha', 'privacy_tou', self.gf('django.db.models.fields.TextField')(null=True), keep_default=False)

        # Adding field 'PHA.schema'
        db.add_column('indivo_pha', 'schema', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.DocumentSchema'], null=True), keep_default=False)

        # Deleting field 'PHA.author'
        db.delete_column('indivo_pha', 'author')

        # Deleting field 'PHA.version'
        db.delete_column('indivo_pha', 'version')

        # Deleting field 'PHA.indivo_version'
        db.delete_column('indivo_pha', 'indivo_version')

        # Deleting field 'PHA.icon_url'
        db.delete_column('indivo_pha', 'icon_url')

        # Deleting field 'PHA.requirements'
        db.delete_column('indivo_pha', 'requirements')


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'connect_auth_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'account'), ('auth_system', 'username'))", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergen_name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'allergen_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_diagnosed': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'reaction': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'specifics': ('django.db.models.fields.TextField', [], {'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'fqn': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'brand_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'brand_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'dispense_as_written': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescribed_stop_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescription_duration': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'prescription_instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'prescription_refill_info': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'route': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'route_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'strength_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'strength_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'unique_together': "(('account', 'external_identifier', 'sender'),)", 'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'icon_url': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'requirements': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_onset': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'date_resolution': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '24', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0020_add_smart_problem_fields
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Problem.startDate'
        db.add_column('indivo_problem', 'startDate', self.gf('django.db.models.fields.DateTimeField')(null=True), keep_default=False)

        # Adding field 'Problem.endDate'
        db.add_column('indivo_problem', 'endDate', self.gf('django.db.models.fields.DateTimeField')(null=True), keep_default=False)

        # Adding field 'Problem.name_identifier'
        db.add_column('indivo_problem', 'name_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Problem.name_system'
        db.add_column('indivo_problem', 'name_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Problem.name_title'
        db.add_column('indivo_problem', 'name_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Problem.notes'
        db.add_column('indivo_problem', 'notes', self.gf('django.db.models.fields.TextField')(null=True), keep_default=False)

        # Changing field 'Problem.name'
        db.alter_column('indivo_problem', 'name', self.gf('django.db.models.fields.CharField')(max_length=128, null=True))


    def backwards(self, orm):
        
        # Deleting field 'Problem.startDate'
        db.delete_column('indivo_problem', 'startDate')

        # Deleting field 'Problem.endDate'
        db.delete_column('indivo_problem', 'endDate')

        # Deleting field 'Problem.name_identifier'
        db.delete_column('indivo_problem', 'name_identifier')

        # Deleting field 'Problem.name_system'
        db.delete_column('indivo_problem', 'name_system')

        # Deleting field 'Problem.name_title'
        db.delete_column('indivo_problem', 'name_title')

        # Deleting field 'Problem.notes'
        db.delete_column('indivo_problem', 'notes')

        # Changing field 'Problem.name'
        db.alter_column('indivo_problem', 'name', self.gf('django.db.models.fields.CharField')(default='', max_length=128))


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'connect_auth_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'account'), ('auth_system', 'username'))", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergen_name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'allergen_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_diagnosed': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'reaction': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'specifics': ('django.db.models.fields.TextField', [], {'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'fqn': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'brand_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'brand_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'dispense_as_written': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescribed_stop_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescription_duration': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'prescription_instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'prescription_refill_info': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'route': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'route_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'strength_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'strength_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'unique_together': "(('account', 'external_identifier', 'sender'),)", 'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'icon_url': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'requirements': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_onset': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'date_resolution': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'endDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '24', 'null': 'True'}),
            'name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'notes': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'startDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0021_old_problems_to_smart_problems
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models

class Migration(DataMigration):

    def forwards(self, orm):
        "Write your forwards methods here."
        for p in orm.Problem.objects.all():
            p.startDate = p.date_onset
            p.endDate = p.date_resolution
            p.name_identifier = p.name_value
            p.name_system = p.name_type
            p.name_title = p.name
            p.notes = p.comments
            p.save()


    def backwards(self, orm):
        "Write your backwards methods here."
        for p in orm.Problem.objects.all():
            p.date_onset = p.startDate
            p.date_resolution = p.endDate
            p.name_value = p.name_identifier
            p.name_type = p.name_system
            p.name = p.name_title
            p.comments = p.notes
            p.save()

    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'connect_auth_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'account'), ('auth_system', 'username'))", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergen_name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'allergen_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_diagnosed': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'reaction': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'specifics': ('django.db.models.fields.TextField', [], {'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'fqn': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'brand_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'brand_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'dispense_as_written': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescribed_stop_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescription_duration': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'prescription_instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'prescription_refill_info': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'route': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'route_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'strength_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'strength_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'unique_together': "(('account', 'external_identifier', 'sender'),)", 'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'icon_url': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'requirements': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_onset': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'date_resolution': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'endDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '24', 'null': 'True'}),
            'name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'notes': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'startDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0022_drop_old_problem_fields
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Deleting field 'Problem.comments'
        db.delete_column('indivo_problem', 'comments')

        # Deleting field 'Problem.name_abbrev'
        db.delete_column('indivo_problem', 'name_abbrev')

        # Deleting field 'Problem.diagnosed_by'
        db.delete_column('indivo_problem', 'diagnosed_by')

        # Deleting field 'Problem.name'
        db.delete_column('indivo_problem', 'name')

        # Deleting field 'Problem.date_resolution'
        db.delete_column('indivo_problem', 'date_resolution')

        # Deleting field 'Problem.date_onset'
        db.delete_column('indivo_problem', 'date_onset')

        # Deleting field 'Problem.name_type'
        db.delete_column('indivo_problem', 'name_type')

        # Deleting field 'Problem.name_value'
        db.delete_column('indivo_problem', 'name_value')


    def backwards(self, orm):
        
        # Adding field 'Problem.comments'
        db.add_column('indivo_problem', 'comments', self.gf('django.db.models.fields.TextField')(null=True), keep_default=False)

        # Adding field 'Problem.name_abbrev'
        db.add_column('indivo_problem', 'name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=24, null=True), keep_default=False)

        # Adding field 'Problem.diagnosed_by'
        db.add_column('indivo_problem', 'diagnosed_by', self.gf('django.db.models.fields.CharField')(max_length=128, null=True), keep_default=False)

        # Adding field 'Problem.name'
        db.add_column('indivo_problem', 'name', self.gf('django.db.models.fields.CharField')(max_length=128, null=True), keep_default=False)

        # Adding field 'Problem.date_resolution'
        db.add_column('indivo_problem', 'date_resolution', self.gf('django.db.models.fields.DateTimeField')(null=True), keep_default=False)

        # Adding field 'Problem.date_onset'
        db.add_column('indivo_problem', 'date_onset', self.gf('django.db.models.fields.DateTimeField')(null=True), keep_default=False)

        # Adding field 'Problem.name_type'
        db.add_column('indivo_problem', 'name_type', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Problem.name_value'
        db.add_column('indivo_problem', 'name_value', self.gf('django.db.models.fields.CharField')(max_length=128, null=True), keep_default=False)


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'connect_auth_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'account'), ('auth_system', 'username'))", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergen_name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'allergen_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_diagnosed': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'reaction': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'specifics': ('django.db.models.fields.TextField', [], {'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'fqn': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'brand_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'brand_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'dispense_as_written': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescribed_stop_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescription_duration': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'prescription_instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'prescription_refill_info': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'route': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'route_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'strength_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'strength_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'unique_together': "(('account', 'external_identifier', 'sender'),)", 'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'icon_url': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'requirements': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'endDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'notes': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'startDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0023_add_smart_med_fields
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'Fill'
        db.create_table('indivo_fill', (
            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
            ('date', self.gf('django.db.models.fields.DateTimeField')(null=True)),
            ('dispenseDaysSupply', self.gf('django.db.models.fields.FloatField')(null=True)),
            ('pbm', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('medication', self.gf('django.db.models.fields.related.ForeignKey')(related_name='fulfillments', null=True, to=orm['indivo.Medication'])),
            ('pharmacy_ncpdpid', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('pharmacy_adr_region', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('pharmacy_adr_country', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('pharmacy_adr_postalcode', self.gf('django.db.models.fields.CharField')(max_length=12, null=True)),
            ('pharmacy_adr_city', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('pharmacy_adr_street', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('pharmacy_org', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_tel_1_type', self.gf('django.db.models.fields.CharField')(max_length=1, null=True)),
            ('provider_tel_1_preferred_p', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('provider_tel_1_number', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
            ('provider_bday', self.gf('django.db.models.fields.DateField')(null=True)),
            ('provider_email', self.gf('django.db.models.fields.EmailField')(max_length=255, null=True)),
            ('provider_npi_number', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_adr_region', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_adr_country', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_adr_postalcode', self.gf('django.db.models.fields.CharField')(max_length=12, null=True)),
            ('provider_adr_city', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_adr_street', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_gender', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_tel_2_type', self.gf('django.db.models.fields.CharField')(max_length=1, null=True)),
            ('provider_tel_2_preferred_p', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('provider_tel_2_number', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
            ('provider_race', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_dea_number', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_preferred_language', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_ethnicity', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_name_given', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_name_suffix', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_name_family', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_name_prefix', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('quantityDispensed_value', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('quantityDispensed_unit', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
        ))
        db.send_create_signal('indivo', ['Fill'])

        # Adding field 'Medication.endDate'
        db.add_column('indivo_medication', 'endDate', self.gf('django.db.models.fields.DateField')(null=True), keep_default=False)

        # Adding field 'Medication.frequency_unit'
        db.add_column('indivo_medication', 'frequency_unit', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Medication.instructions'
        db.add_column('indivo_medication', 'instructions', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Medication.startDate'
        db.add_column('indivo_medication', 'startDate', self.gf('django.db.models.fields.DateField')(null=True), keep_default=False)

        # Adding field 'Medication.drugName_identifier'
        db.add_column('indivo_medication', 'drugName_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Medication.drugName_system'
        db.add_column('indivo_medication', 'drugName_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Medication.drugName_title'
        db.add_column('indivo_medication', 'drugName_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Medication.provenance_identifier'
        db.add_column('indivo_medication', 'provenance_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Medication.provenance_system'
        db.add_column('indivo_medication', 'provenance_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Medication.provenance_title'
        db.add_column('indivo_medication', 'provenance_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Medication.quantity_value'
        db.add_column('indivo_medication', 'quantity_value', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Medication.quantity_unit'
        db.add_column('indivo_medication', 'quantity_unit', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Changing field 'Medication.frequency_value'
        db.alter_column('indivo_medication', 'frequency_value', self.gf('django.db.models.fields.CharField')(max_length=255, null=True))


    def backwards(self, orm):
        
        # Deleting model 'Fill'
        db.delete_table('indivo_fill')

        # Deleting field 'Medication.endDate'
        db.delete_column('indivo_medication', 'endDate')

        # Deleting field 'Medication.frequency_unit'
        db.delete_column('indivo_medication', 'frequency_unit')

        # Deleting field 'Medication.instructions'
        db.delete_column('indivo_medication', 'instructions')

        # Deleting field 'Medication.startDate'
        db.delete_column('indivo_medication', 'startDate')

        # Deleting field 'Medication.drugName_identifier'
        db.delete_column('indivo_medication', 'drugName_identifier')

        # Deleting field 'Medication.drugName_system'
        db.delete_column('indivo_medication', 'drugName_system')

        # Deleting field 'Medication.drugName_title'
        db.delete_column('indivo_medication', 'drugName_title')

        # Deleting field 'Medication.provenance_identifier'
        db.delete_column('indivo_medication', 'provenance_identifier')

        # Deleting field 'Medication.provenance_system'
        db.delete_column('indivo_medication', 'provenance_system')

        # Deleting field 'Medication.provenance_title'
        db.delete_column('indivo_medication', 'provenance_title')

        # Deleting field 'Medication.quantity_value'
        db.delete_column('indivo_medication', 'quantity_value')

        # Deleting field 'Medication.quantity_unit'
        db.delete_column('indivo_medication', 'quantity_unit')

        # Changing field 'Medication.frequency_value'
        db.alter_column('indivo_medication', 'frequency_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True))


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'connect_auth_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'account'), ('auth_system', 'username'))", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergen_name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'allergen_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_diagnosed': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'reaction': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'specifics': ('django.db.models.fields.TextField', [], {'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'fqn': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.fill': {
            'Meta': {'object_name': 'Fill', '_ormbases': ['indivo.Fact']},
            'date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'dispenseDaysSupply': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'medication': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fulfillments'", 'null': 'True', 'to': "orm['indivo.Medication']"}),
            'pbm': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'pharmacy_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_ncpdpid': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_org': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'provider_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_bday': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'provider_dea_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True'}),
            'provider_ethnicity': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_gender': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_npi_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_preferred_language': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_race': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_tel_1_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_1_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_1_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'provider_tel_2_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_2_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_2_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'quantityDispensed_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantityDispensed_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'brand_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'brand_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'dispense_as_written': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'drugName_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'endDate': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'frequency_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'instructions': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescribed_stop_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescription_duration': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'prescription_instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'prescription_refill_info': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'provenance_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantity_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantity_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'route': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'route_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'startDate': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'strength_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'strength_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'strength_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'unique_together': "(('account', 'external_identifier', 'sender'),)", 'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'icon_url': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'requirements': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'endDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'notes': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'startDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0024_old_meds_to_smart_meds
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models

class Migration(DataMigration):

    def forwards(self, orm):
        "Write your forwards methods here."
        for m in orm.Medication.objects.all():
            m.drugName_title = m.name
            m.drugName_system = m.name_type
            m.drugName_identifier = m.name_value

            m.startDate = m.date_started
            m.endDate = m.date_stopped

            m.frequency_value = m.frequency
            m.frequency_unit = None
            
            m.instructions = m.prescription_instructions

            m.provenance_title = None
            m.provenance_sytem = None
            m.provenance_identifier = None

            m.quantity_value = m.dose_value or m.dose_textvalue
            m.quantity_unit = m.dose_unit

            m.save()

            # Not creating a Fill here, as the fields don't map well.

    def backwards(self, orm):
        "Write your backwards methods here."
        for m in orm.Medication.objects.all():
            m.date_started = m.startDate
            m.date_stopped = m.endDate
            m.name = m.drugName_title
            m.name_type = m.drugName_system
            m.name_value = m.drugName_identifier
            m.name_abbrev = None
            m.brand_name = None
            m.brand_name_type = None
            m.brand_name_value = None
            m.brand_name_abbrev = None
            m.dose_textvalue = "%s %s"%(m.quantity_value, m.quantity_unit)
            m.dose_value = m.quantity_value
            m.dose_unit = m.quantity_unit
            m.dose_unit_type = None
            m.dose_unit_value = None
            m.dose_unit_abbrev = None
            m.route = None
            m.route_type = None
            m.route_value = None
            m.route_abbrev = None
            m.strength_textvalue = None
            m.strength_value = None
            m.strength_unit = None
            m.strength_unit_type = None
            m.strength_unit_value = None
            m.strength_unit_abbrev = None
            m.frequency = m.frequency_value
            m.frequency_type = None
            m.frequency_value = None
            m.frequency_abbrev = None
            m.prescription_instructions = m.instructions

            # Don't bother copying Fill information over--the models are too dissimilar
            m.prescribed_by_name = None
            m.prescribed_by_institution = None
            m.prescribed_on = None
            m.prescribed_stop_on = None
            m.dispense_as_written = None
            m.prescription_duration = None
            m.prescription_refill_info = None
            m.save()

    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'connect_auth_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'account'), ('auth_system', 'username'))", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergen_name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'allergen_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_diagnosed': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'reaction': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'specifics': ('django.db.models.fields.TextField', [], {'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'fqn': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.fill': {
            'Meta': {'object_name': 'Fill', '_ormbases': ['indivo.Fact']},
            'date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'dispenseDaysSupply': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'medication': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fulfillments'", 'null': 'True', 'to': "orm['indivo.Medication']"}),
            'pbm': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'pharmacy_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_ncpdpid': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_org': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'provider_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_bday': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'provider_dea_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True'}),
            'provider_ethnicity': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_gender': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_npi_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_preferred_language': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_race': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_tel_1_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_1_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_1_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'provider_tel_2_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_2_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_2_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'quantityDispensed_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantityDispensed_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'brand_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'brand_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'brand_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'dispense_as_written': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
            'dose_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'dose_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'dose_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'dose_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'dose_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'drugName_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'endDate': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'frequency_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'frequency_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'frequency_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'instructions': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_by_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'prescribed_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescribed_stop_on': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'prescription_duration': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'prescription_instructions': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'prescription_refill_info': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'provenance_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantity_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantity_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'route': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'route_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'route_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'startDate': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'strength_textvalue': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_unit': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'strength_unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'strength_unit_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'strength_unit_value': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'strength_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'unique_together': "(('account', 'external_identifier', 'sender'),)", 'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'icon_url': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'requirements': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'endDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'notes': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'startDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0025_drop_old_med_fields
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Deleting field 'Medication.brand_name_type'
        db.delete_column('indivo_medication', 'brand_name_type')

        # Deleting field 'Medication.strength_textvalue'
        db.delete_column('indivo_medication', 'strength_textvalue')

        # Deleting field 'Medication.brand_name'
        db.delete_column('indivo_medication', 'brand_name')

        # Deleting field 'Medication.name_abbrev'
        db.delete_column('indivo_medication', 'name_abbrev')

        # Deleting field 'Medication.dose_unit_type'
        db.delete_column('indivo_medication', 'dose_unit_type')

        # Deleting field 'Medication.route_value'
        db.delete_column('indivo_medication', 'route_value')

        # Deleting field 'Medication.dose_unit_value'
        db.delete_column('indivo_medication', 'dose_unit_value')

        # Deleting field 'Medication.prescribed_stop_on'
        db.delete_column('indivo_medication', 'prescribed_stop_on')

        # Deleting field 'Medication.frequency_type'
        db.delete_column('indivo_medication', 'frequency_type')

        # Deleting field 'Medication.date_started'
        db.delete_column('indivo_medication', 'date_started')

        # Deleting field 'Medication.route_type'
        db.delete_column('indivo_medication', 'route_type')

        # Deleting field 'Medication.strength_unit_type'
        db.delete_column('indivo_medication', 'strength_unit_type')

        # Deleting field 'Medication.strength_unit_value'
        db.delete_column('indivo_medication', 'strength_unit_value')

        # Deleting field 'Medication.name'
        db.delete_column('indivo_medication', 'name')

        # Deleting field 'Medication.prescribed_by_name'
        db.delete_column('indivo_medication', 'prescribed_by_name')

        # Deleting field 'Medication.frequency_abbrev'
        db.delete_column('indivo_medication', 'frequency_abbrev')

        # Deleting field 'Medication.dose_value'
        db.delete_column('indivo_medication', 'dose_value')

        # Deleting field 'Medication.frequency'
        db.delete_column('indivo_medication', 'frequency')

        # Deleting field 'Medication.prescription_duration'
        db.delete_column('indivo_medication', 'prescription_duration')

        # Deleting field 'Medication.brand_name_abbrev'
        db.delete_column('indivo_medication', 'brand_name_abbrev')

        # Deleting field 'Medication.date_stopped'
        db.delete_column('indivo_medication', 'date_stopped')

        # Deleting field 'Medication.dose_textvalue'
        db.delete_column('indivo_medication', 'dose_textvalue')

        # Deleting field 'Medication.brand_name_value'
        db.delete_column('indivo_medication', 'brand_name_value')

        # Deleting field 'Medication.strength_unit'
        db.delete_column('indivo_medication', 'strength_unit')

        # Deleting field 'Medication.route_abbrev'
        db.delete_column('indivo_medication', 'route_abbrev')

        # Deleting field 'Medication.strength_unit_abbrev'
        db.delete_column('indivo_medication', 'strength_unit_abbrev')

        # Deleting field 'Medication.dose_unit_abbrev'
        db.delete_column('indivo_medication', 'dose_unit_abbrev')

        # Deleting field 'Medication.name_value'
        db.delete_column('indivo_medication', 'name_value')

        # Deleting field 'Medication.dose_unit'
        db.delete_column('indivo_medication', 'dose_unit')

        # Deleting field 'Medication.prescription_refill_info'
        db.delete_column('indivo_medication', 'prescription_refill_info')

        # Deleting field 'Medication.strength_value'
        db.delete_column('indivo_medication', 'strength_value')

        # Deleting field 'Medication.prescribed_by_institution'
        db.delete_column('indivo_medication', 'prescribed_by_institution')

        # Deleting field 'Medication.route'
        db.delete_column('indivo_medication', 'route')

        # Deleting field 'Medication.prescription_instructions'
        db.delete_column('indivo_medication', 'prescription_instructions')

        # Deleting field 'Medication.dispense_as_written'
        db.delete_column('indivo_medication', 'dispense_as_written')

        # Deleting field 'Medication.prescribed_on'
        db.delete_column('indivo_medication', 'prescribed_on')

        # Deleting field 'Medication.name_type'
        db.delete_column('indivo_medication', 'name_type')


    def backwards(self, orm):
        
        # Adding field 'Medication.brand_name_type'
        db.add_column('indivo_medication', 'brand_name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True), keep_default=False)

        # Adding field 'Medication.strength_textvalue'
        db.add_column('indivo_medication', 'strength_textvalue', self.gf('django.db.models.fields.CharField')(max_length=100, null=True), keep_default=False)

        # Adding field 'Medication.brand_name'
        db.add_column('indivo_medication', 'brand_name', self.gf('django.db.models.fields.CharField')(max_length=200, null=True), keep_default=False)

        # Adding field 'Medication.name_abbrev'
        db.add_column('indivo_medication', 'name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True), keep_default=False)

        # Adding field 'Medication.dose_unit_type'
        db.add_column('indivo_medication', 'dose_unit_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True), keep_default=False)

        # Adding field 'Medication.route_value'
        db.add_column('indivo_medication', 'route_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True), keep_default=False)

        # Adding field 'Medication.dose_unit_value'
        db.add_column('indivo_medication', 'dose_unit_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True), keep_default=False)

        # Adding field 'Medication.prescribed_stop_on'
        db.add_column('indivo_medication', 'prescribed_stop_on', self.gf('django.db.models.fields.DateField')(null=True), keep_default=False)

        # Adding field 'Medication.frequency_type'
        db.add_column('indivo_medication', 'frequency_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True), keep_default=False)

        # Adding field 'Medication.date_started'
        db.add_column('indivo_medication', 'date_started', self.gf('django.db.models.fields.DateField')(null=True), keep_default=False)

        # Adding field 'Medication.route_type'
        db.add_column('indivo_medication', 'route_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True), keep_default=False)

        # Adding field 'Medication.strength_unit_type'
        db.add_column('indivo_medication', 'strength_unit_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True), keep_default=False)

        # Adding field 'Medication.strength_unit_value'
        db.add_column('indivo_medication', 'strength_unit_value', self.gf('django.db.models.fields.CharField')(max_length=100, null=True), keep_default=False)

        # Adding field 'Medication.name'
        db.add_column('indivo_medication', 'name', self.gf('django.db.models.fields.CharField')(default='', max_length=200), keep_default=False)

        # Adding field 'Medication.prescribed_by_name'
        db.add_column('indivo_medication', 'prescribed_by_name', self.gf('django.db.models.fields.CharField')(max_length=200, null=True), keep_default=False)

        # Adding field 'Medication.frequency_abbrev'
        db.add_column('indivo_medication', 'frequency_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True), keep_default=False)

        # Adding field 'Medication.dose_value'
        db.add_column('indivo_medication', 'dose_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True), keep_default=False)

        # Adding field 'Medication.frequency'
        db.add_column('indivo_medication', 'frequency', self.gf('django.db.models.fields.CharField')(max_length=100, null=True), keep_default=False)

        # Adding field 'Medication.prescription_duration'
        db.add_column('indivo_medication', 'prescription_duration', self.gf('django.db.models.fields.CharField')(max_length=100, null=True), keep_default=False)

        # Adding field 'Medication.brand_name_abbrev'
        db.add_column('indivo_medication', 'brand_name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True), keep_default=False)

        # Adding field 'Medication.date_stopped'
        db.add_column('indivo_medication', 'date_stopped', self.gf('django.db.models.fields.DateField')(null=True), keep_default=False)

        # Adding field 'Medication.dose_textvalue'
        db.add_column('indivo_medication', 'dose_textvalue', self.gf('django.db.models.fields.CharField')(max_length=100, null=True), keep_default=False)

        # Adding field 'Medication.brand_name_value'
        db.add_column('indivo_medication', 'brand_name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True), keep_default=False)

        # Adding field 'Medication.strength_unit'
        db.add_column('indivo_medication', 'strength_unit', self.gf('django.db.models.fields.CharField')(max_length=40, null=True), keep_default=False)

        # Adding field 'Medication.route_abbrev'
        db.add_column('indivo_medication', 'route_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True), keep_default=False)

        # Adding field 'Medication.strength_unit_abbrev'
        db.add_column('indivo_medication', 'strength_unit_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True), keep_default=False)

        # Adding field 'Medication.dose_unit_abbrev'
        db.add_column('indivo_medication', 'dose_unit_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True), keep_default=False)

        # Adding field 'Medication.name_value'
        db.add_column('indivo_medication', 'name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True), keep_default=False)

        # Adding field 'Medication.dose_unit'
        db.add_column('indivo_medication', 'dose_unit', self.gf('django.db.models.fields.CharField')(max_length=40, null=True), keep_default=False)

        # Adding field 'Medication.prescription_refill_info'
        db.add_column('indivo_medication', 'prescription_refill_info', self.gf('django.db.models.fields.TextField')(null=True), keep_default=False)

        # Adding field 'Medication.strength_value'
        db.add_column('indivo_medication', 'strength_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True), keep_default=False)

        # Adding field 'Medication.prescribed_by_institution'
        db.add_column('indivo_medication', 'prescribed_by_institution', self.gf('django.db.models.fields.CharField')(max_length=200, null=True), keep_default=False)

        # Adding field 'Medication.route'
        db.add_column('indivo_medication', 'route', self.gf('django.db.models.fields.CharField')(max_length=200, null=True), keep_default=False)

        # Adding field 'Medication.prescription_instructions'
        db.add_column('indivo_medication', 'prescription_instructions', self.gf('django.db.models.fields.TextField')(null=True), keep_default=False)

        # Adding field 'Medication.dispense_as_written'
        db.add_column('indivo_medication', 'dispense_as_written', self.gf('django.db.models.fields.NullBooleanField')(null=True, blank=True), keep_default=False)

        # Adding field 'Medication.prescribed_on'
        db.add_column('indivo_medication', 'prescribed_on', self.gf('django.db.models.fields.DateField')(null=True), keep_default=False)

        # Adding field 'Medication.name_type'
        db.add_column('indivo_medication', 'name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True), keep_default=False)


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'connect_auth_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'account'), ('auth_system', 'username'))", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergen_name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'allergen_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'date_diagnosed': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'reaction': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'specifics': ('django.db.models.fields.TextField', [], {'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'fqn': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.fill': {
            'Meta': {'object_name': 'Fill', '_ormbases': ['indivo.Fact']},
            'date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'dispenseDaysSupply': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'medication': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fulfillments'", 'null': 'True', 'to': "orm['indivo.Medication']"}),
            'pbm': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'pharmacy_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_ncpdpid': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_org': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'provider_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_bday': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'provider_dea_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True'}),
            'provider_ethnicity': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_gender': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_npi_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_preferred_language': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_race': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_tel_1_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_1_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_1_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'provider_tel_2_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_2_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_2_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'quantityDispensed_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantityDispensed_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'drugName_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'endDate': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'instructions': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantity_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantity_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'startDate': ('django.db.models.fields.DateField', [], {'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'unique_together': "(('account', 'external_identifier', 'sender'),)", 'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'icon_url': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'requirements': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'endDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'notes': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'startDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0026_add_smart_allergy_fields
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Allergy.food_allergen_identifier'
        db.add_column('indivo_allergy', 'food_allergen_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Allergy.food_allergen_system'
        db.add_column('indivo_allergy', 'food_allergen_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Allergy.food_allergen_title'
        db.add_column('indivo_allergy', 'food_allergen_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Allergy.drug_allergen_identifier'
        db.add_column('indivo_allergy', 'drug_allergen_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Allergy.drug_allergen_system'
        db.add_column('indivo_allergy', 'drug_allergen_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Allergy.drug_allergen_title'
        db.add_column('indivo_allergy', 'drug_allergen_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Allergy.category_identifier'
        db.add_column('indivo_allergy', 'category_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Allergy.category_system'
        db.add_column('indivo_allergy', 'category_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Allergy.category_title'
        db.add_column('indivo_allergy', 'category_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Allergy.drug_class_allergen_identifier'
        db.add_column('indivo_allergy', 'drug_class_allergen_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Allergy.drug_class_allergen_system'
        db.add_column('indivo_allergy', 'drug_class_allergen_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Allergy.drug_class_allergen_title'
        db.add_column('indivo_allergy', 'drug_class_allergen_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Allergy.allergic_reaction_identifier'
        db.add_column('indivo_allergy', 'allergic_reaction_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Allergy.allergic_reaction_system'
        db.add_column('indivo_allergy', 'allergic_reaction_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Allergy.allergic_reaction_title'
        db.add_column('indivo_allergy', 'allergic_reaction_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Allergy.severity_identifier'
        db.add_column('indivo_allergy', 'severity_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Allergy.severity_system'
        db.add_column('indivo_allergy', 'severity_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Allergy.severity_title'
        db.add_column('indivo_allergy', 'severity_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Allergy.food_allergen_identifier'
        db.delete_column('indivo_allergy', 'food_allergen_identifier')

        # Deleting field 'Allergy.food_allergen_system'
        db.delete_column('indivo_allergy', 'food_allergen_system')

        # Deleting field 'Allergy.food_allergen_title'
        db.delete_column('indivo_allergy', 'food_allergen_title')

        # Deleting field 'Allergy.drug_allergen_identifier'
        db.delete_column('indivo_allergy', 'drug_allergen_identifier')

        # Deleting field 'Allergy.drug_allergen_system'
        db.delete_column('indivo_allergy', 'drug_allergen_system')

        # Deleting field 'Allergy.drug_allergen_title'
        db.delete_column('indivo_allergy', 'drug_allergen_title')

        # Deleting field 'Allergy.category_identifier'
        db.delete_column('indivo_allergy', 'category_identifier')

        # Deleting field 'Allergy.category_system'
        db.delete_column('indivo_allergy', 'category_system')

        # Deleting field 'Allergy.category_title'
        db.delete_column('indivo_allergy', 'category_title')

        # Deleting field 'Allergy.drug_class_allergen_identifier'
        db.delete_column('indivo_allergy', 'drug_class_allergen_identifier')

        # Deleting field 'Allergy.drug_class_allergen_system'
        db.delete_column('indivo_allergy', 'drug_class_allergen_system')

        # Deleting field 'Allergy.drug_class_allergen_title'
        db.delete_column('indivo_allergy', 'drug_class_allergen_title')

        # Deleting field 'Allergy.allergic_reaction_identifier'
        db.delete_column('indivo_allergy', 'allergic_reaction_identifier')

        # Deleting field 'Allergy.allergic_reaction_system'
        db.delete_column('indivo_allergy', 'allergic_reaction_system')

        # Deleting field 'Allergy.allergic_reaction_title'
        db.delete_column('indivo_allergy', 'allergic_reaction_title')

        # Deleting field 'Allergy.severity_identifier'
        db.delete_column('indivo_allergy', 'severity_identifier')

        # Deleting field 'Allergy.severity_system'
        db.delete_column('indivo_allergy', 'severity_system')

        # Deleting field 'Allergy.severity_title'
        db.delete_column('indivo_allergy', 'severity_title')


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'connect_auth_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'account'), ('auth_system', 'username'))", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergen_name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'allergen_name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_name_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergen_type_value': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'allergic_reaction_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'allergic_reaction_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'allergic_reaction_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'date_diagnosed': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'diagnosed_by': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
            'drug_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'food_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'food_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'food_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reaction': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
            'severity_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'specifics': ('django.db.models.fields.TextField', [], {'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'fqn': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.fill': {
            'Meta': {'object_name': 'Fill', '_ormbases': ['indivo.Fact']},
            'date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'dispenseDaysSupply': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'medication': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fulfillments'", 'null': 'True', 'to': "orm['indivo.Medication']"}),
            'pbm': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'pharmacy_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_ncpdpid': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_org': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'provider_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_bday': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'provider_dea_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True'}),
            'provider_ethnicity': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_gender': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_npi_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_preferred_language': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_race': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_tel_1_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_1_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_1_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'provider_tel_2_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_2_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_2_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'quantityDispensed_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantityDispensed_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'drugName_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'endDate': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'instructions': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantity_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantity_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'startDate': ('django.db.models.fields.DateField', [], {'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'unique_together': "(('account', 'external_identifier', 'sender'),)", 'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'icon_url': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'requirements': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'endDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'notes': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'startDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0027_drop_old_allergy_fields
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Deleting field 'Allergy.allergen_name_abbrev'
        db.delete_column('indivo_allergy', 'allergen_name_abbrev')

        # Deleting field 'Allergy.allergen_type'
        db.delete_column('indivo_allergy', 'allergen_type')

        # Deleting field 'Allergy.allergen_name_value'
        db.delete_column('indivo_allergy', 'allergen_name_value')

        # Deleting field 'Allergy.specifics'
        db.delete_column('indivo_allergy', 'specifics')

        # Deleting field 'Allergy.diagnosed_by'
        db.delete_column('indivo_allergy', 'diagnosed_by')

        # Deleting field 'Allergy.allergen_type_value'
        db.delete_column('indivo_allergy', 'allergen_type_value')

        # Deleting field 'Allergy.reaction'
        db.delete_column('indivo_allergy', 'reaction')

        # Deleting field 'Allergy.allergen_type_type'
        db.delete_column('indivo_allergy', 'allergen_type_type')

        # Deleting field 'Allergy.allergen_type_abbrev'
        db.delete_column('indivo_allergy', 'allergen_type_abbrev')

        # Deleting field 'Allergy.allergen_name'
        db.delete_column('indivo_allergy', 'allergen_name')

        # Deleting field 'Allergy.allergen_name_type'
        db.delete_column('indivo_allergy', 'allergen_name_type')

        # Deleting field 'Allergy.date_diagnosed'
        db.delete_column('indivo_allergy', 'date_diagnosed')


    def backwards(self, orm):
        
        # Adding field 'Allergy.allergen_name_abbrev'
        db.add_column('indivo_allergy', 'allergen_name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=200, null=True), keep_default=False)

        # Adding field 'Allergy.allergen_type'
        db.add_column('indivo_allergy', 'allergen_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True), keep_default=False)

        # Adding field 'Allergy.allergen_name_value'
        db.add_column('indivo_allergy', 'allergen_name_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True), keep_default=False)

        # Adding field 'Allergy.specifics'
        db.add_column('indivo_allergy', 'specifics', self.gf('django.db.models.fields.TextField')(null=True), keep_default=False)

        # Adding field 'Allergy.diagnosed_by'
        db.add_column('indivo_allergy', 'diagnosed_by', self.gf('django.db.models.fields.CharField')(max_length=32, null=True), keep_default=False)

        # Adding field 'Allergy.allergen_type_value'
        db.add_column('indivo_allergy', 'allergen_type_value', self.gf('django.db.models.fields.CharField')(max_length=200, null=True), keep_default=False)

        # Adding field 'Allergy.reaction'
        db.add_column('indivo_allergy', 'reaction', self.gf('django.db.models.fields.CharField')(max_length=128, null=True), keep_default=False)

        # Adding field 'Allergy.allergen_type_type'
        db.add_column('indivo_allergy', 'allergen_type_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True), keep_default=False)

        # Adding field 'Allergy.allergen_type_abbrev'
        db.add_column('indivo_allergy', 'allergen_type_abbrev', self.gf('django.db.models.fields.CharField')(max_length=200, null=True), keep_default=False)

        # User chose to not deal with backwards NULL issues for 'Allergy.allergen_name'
        raise RuntimeError("Cannot reverse this migration. 'Allergy.allergen_name' and its values cannot be restored.")

        # Adding field 'Allergy.allergen_name_type'
        db.add_column('indivo_allergy', 'allergen_name_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True), keep_default=False)

        # Adding field 'Allergy.date_diagnosed'
        db.add_column('indivo_allergy', 'date_diagnosed', self.gf('django.db.models.fields.DateField')(null=True), keep_default=False)


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'connect_auth_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'account'), ('auth_system', 'username'))", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergic_reaction_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'allergic_reaction_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'allergic_reaction_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'food_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'food_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'food_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'fqn': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.fill': {
            'Meta': {'object_name': 'Fill', '_ormbases': ['indivo.Fact']},
            'date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'dispenseDaysSupply': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'medication': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fulfillments'", 'null': 'True', 'to': "orm['indivo.Medication']"}),
            'pbm': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'pharmacy_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_ncpdpid': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_org': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'provider_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_bday': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'provider_dea_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True'}),
            'provider_ethnicity': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_gender': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_npi_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_preferred_language': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_race': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_tel_1_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_1_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_1_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'provider_tel_2_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_2_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_2_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'quantityDispensed_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantityDispensed_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'drugName_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'endDate': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'instructions': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantity_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantity_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'startDate': ('django.db.models.fields.DateField', [], {'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'unique_together': "(('account', 'external_identifier', 'sender'),)", 'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'icon_url': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'requirements': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'endDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'notes': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'startDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0028_add_allergyexclusion
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'AllergyExclusion'
        db.create_table('indivo_allergyexclusion', (
            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
            ('name_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('name_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('name_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
        ))
        db.send_create_signal('indivo', ['AllergyExclusion'])


    def backwards(self, orm):
        
        # Deleting model 'AllergyExclusion'
        db.delete_table('indivo_allergyexclusion')


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'connect_auth_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'account'), ('auth_system', 'username'))", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergic_reaction_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'allergic_reaction_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'allergic_reaction_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'food_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'food_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'food_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.allergyexclusion': {
            'Meta': {'object_name': 'AllergyExclusion', '_ormbases': ['indivo.Fact']},
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'fqn': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'allergy'", 'null': 'True', 'to': "orm['indivo.Record']"})
        },
        'indivo.fill': {
            'Meta': {'object_name': 'Fill', '_ormbases': ['indivo.Fact']},
            'date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'dispenseDaysSupply': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'medication': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fulfillments'", 'null': 'True', 'to': "orm['indivo.Medication']"}),
            'pbm': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'pharmacy_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_ncpdpid': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_org': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'provider_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_bday': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'provider_dea_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True'}),
            'provider_ethnicity': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_gender': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_npi_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_preferred_language': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_race': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_tel_1_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_1_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_1_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'provider_tel_2_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_2_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_2_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'quantityDispensed_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantityDispensed_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'drugName_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'endDate': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'instructions': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantity_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantity_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'startDate': ('django.db.models.fields.DateField', [], {'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'unique_together': "(('account', 'external_identifier', 'sender'),)", 'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'icon_url': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'requirements': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'endDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'notes': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'startDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0029_add_encounter
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'Encounter'
        db.create_table('indivo_encounter', (
            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
            ('startDate', self.gf('django.db.models.fields.DateTimeField')(null=True)),
            ('endDate', self.gf('django.db.models.fields.DateTimeField')(null=True)),
            ('facility_adr_region', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('facility_adr_country', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('facility_adr_postalcode', self.gf('django.db.models.fields.CharField')(max_length=12, null=True)),
            ('facility_adr_city', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('facility_adr_street', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('facility_name', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('encounterType_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('encounterType_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('encounterType_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_tel_1_type', self.gf('django.db.models.fields.CharField')(max_length=1, null=True)),
            ('provider_tel_1_preferred_p', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('provider_tel_1_number', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
            ('provider_bday', self.gf('django.db.models.fields.DateField')(null=True)),
            ('provider_email', self.gf('django.db.models.fields.EmailField')(max_length=255, null=True)),
            ('provider_npi_number', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_adr_region', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_adr_country', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_adr_postalcode', self.gf('django.db.models.fields.CharField')(max_length=12, null=True)),
            ('provider_adr_city', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_adr_street', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_gender', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_tel_2_type', self.gf('django.db.models.fields.CharField')(max_length=1, null=True)),
            ('provider_tel_2_preferred_p', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('provider_tel_2_number', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
            ('provider_race', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_dea_number', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_preferred_language', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_ethnicity', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_name_given', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_name_suffix', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_name_family', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('provider_name_prefix', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
        ))
        db.send_create_signal('indivo', ['Encounter'])


    def backwards(self, orm):
        
        # Deleting model 'Encounter'
        db.delete_table('indivo_encounter')


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'connect_auth_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'account'), ('auth_system', 'username'))", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergic_reaction_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'allergic_reaction_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'allergic_reaction_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'food_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'food_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'food_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.allergyexclusion': {
            'Meta': {'object_name': 'AllergyExclusion', '_ormbases': ['indivo.Fact']},
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'fqn': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.encounter': {
            'Meta': {'object_name': 'Encounter', '_ormbases': ['indivo.Fact']},
            'encounterType_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'encounterType_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'encounterType_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'endDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'facility_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'facility_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'provider_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'provider_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_bday': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'provider_dea_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True'}),
            'provider_ethnicity': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_gender': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_npi_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_preferred_language': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_race': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_tel_1_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_1_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_1_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'provider_tel_2_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_2_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_2_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'startDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'})
        },
        'indivo.fill': {
            'Meta': {'object_name': 'Fill', '_ormbases': ['indivo.Fact']},
            'date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'dispenseDaysSupply': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'medication': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fulfillments'", 'null': 'True', 'to': "orm['indivo.Medication']"}),
            'pbm': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'pharmacy_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_ncpdpid': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_org': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'provider_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_bday': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'provider_dea_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True'}),
            'provider_ethnicity': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_gender': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_npi_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_preferred_language': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_race': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_tel_1_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_1_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_1_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'provider_tel_2_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_2_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_2_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'quantityDispensed_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantityDispensed_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'drugName_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'endDate': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'instructions': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantity_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantity_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'startDate': ('django.db.models.fields.DateField', [], {'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'unique_together': "(('account', 'external_identifier', 'sender'),)", 'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'icon_url': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'requirements': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'endDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'notes': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'startDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0030_add_smart_immunization_fields
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Immunization.date'
        db.add_column('indivo_immunization', 'date', self.gf('django.db.models.fields.DateTimeField')(null=True), keep_default=False)

        # Adding field 'Immunization.product_class_identifier'
        db.add_column('indivo_immunization', 'product_class_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Immunization.product_class_system'
        db.add_column('indivo_immunization', 'product_class_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Immunization.product_class_title'
        db.add_column('indivo_immunization', 'product_class_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Immunization.product_class_2_identifier'
        db.add_column('indivo_immunization', 'product_class_2_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Immunization.product_class_2_system'
        db.add_column('indivo_immunization', 'product_class_2_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Immunization.product_class_2_title'
        db.add_column('indivo_immunization', 'product_class_2_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Immunization.product_name_identifier'
        db.add_column('indivo_immunization', 'product_name_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Immunization.product_name_system'
        db.add_column('indivo_immunization', 'product_name_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Immunization.product_name_title'
        db.add_column('indivo_immunization', 'product_name_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Immunization.administration_status_identifier'
        db.add_column('indivo_immunization', 'administration_status_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Immunization.administration_status_system'
        db.add_column('indivo_immunization', 'administration_status_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Immunization.administration_status_title'
        db.add_column('indivo_immunization', 'administration_status_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Immunization.refusal_reason_identifier'
        db.add_column('indivo_immunization', 'refusal_reason_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Immunization.refusal_reason_system'
        db.add_column('indivo_immunization', 'refusal_reason_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)

        # Adding field 'Immunization.refusal_reason_title'
        db.add_column('indivo_immunization', 'refusal_reason_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Immunization.date'
        db.delete_column('indivo_immunization', 'date')

        # Deleting field 'Immunization.product_class_identifier'
        db.delete_column('indivo_immunization', 'product_class_identifier')

        # Deleting field 'Immunization.product_class_system'
        db.delete_column('indivo_immunization', 'product_class_system')

        # Deleting field 'Immunization.product_class_title'
        db.delete_column('indivo_immunization', 'product_class_title')

        # Deleting field 'Immunization.product_class_2_identifier'
        db.delete_column('indivo_immunization', 'product_class_2_identifier')

        # Deleting field 'Immunization.product_class_2_system'
        db.delete_column('indivo_immunization', 'product_class_2_system')

        # Deleting field 'Immunization.product_class_2_title'
        db.delete_column('indivo_immunization', 'product_class_2_title')

        # Deleting field 'Immunization.product_name_identifier'
        db.delete_column('indivo_immunization', 'product_name_identifier')

        # Deleting field 'Immunization.product_name_system'
        db.delete_column('indivo_immunization', 'product_name_system')

        # Deleting field 'Immunization.product_name_title'
        db.delete_column('indivo_immunization', 'product_name_title')

        # Deleting field 'Immunization.administration_status_identifier'
        db.delete_column('indivo_immunization', 'administration_status_identifier')

        # Deleting field 'Immunization.administration_status_system'
        db.delete_column('indivo_immunization', 'administration_status_system')

        # Deleting field 'Immunization.administration_status_title'
        db.delete_column('indivo_immunization', 'administration_status_title')

        # Deleting field 'Immunization.refusal_reason_identifier'
        db.delete_column('indivo_immunization', 'refusal_reason_identifier')

        # Deleting field 'Immunization.refusal_reason_system'
        db.delete_column('indivo_immunization', 'refusal_reason_system')

        # Deleting field 'Immunization.refusal_reason_title'
        db.delete_column('indivo_immunization', 'refusal_reason_title')


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'connect_auth_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'account'), ('auth_system', 'username'))", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergic_reaction_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'allergic_reaction_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'allergic_reaction_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'food_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'food_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'food_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.allergyexclusion': {
            'Meta': {'object_name': 'AllergyExclusion', '_ormbases': ['indivo.Fact']},
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'fqn': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.encounter': {
            'Meta': {'object_name': 'Encounter', '_ormbases': ['indivo.Fact']},
            'encounterType_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'encounterType_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'encounterType_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'endDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'facility_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'facility_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'provider_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'provider_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_bday': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'provider_dea_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True'}),
            'provider_ethnicity': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_gender': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_npi_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_preferred_language': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_race': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_tel_1_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_1_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_1_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'provider_tel_2_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_2_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_2_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'startDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'})
        },
        'indivo.fill': {
            'Meta': {'object_name': 'Fill', '_ormbases': ['indivo.Fact']},
            'date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'dispenseDaysSupply': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'medication': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fulfillments'", 'null': 'True', 'to': "orm['indivo.Medication']"}),
            'pbm': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'pharmacy_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_ncpdpid': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_org': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'provider_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_bday': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'provider_dea_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True'}),
            'provider_ethnicity': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_gender': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_npi_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_preferred_language': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_race': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_tel_1_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_1_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_1_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'provider_tel_2_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_2_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_2_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'quantityDispensed_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantityDispensed_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administered_by': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'administration_status_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'administration_status_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'administration_status_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'adverse_event': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'anatomic_surface': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'anatomic_surface_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'anatomic_surface_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'anatomic_surface_value': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'date_administered': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'product_class_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_2_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_2_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_2_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'refusal_reason_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'refusal_reason_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'refusal_reason_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'sequence': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'vaccine_expiration': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'vaccine_lot': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_manufacturer': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'vaccine_type': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'vaccine_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'vaccine_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'vaccine_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'drugName_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'endDate': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'instructions': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantity_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantity_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'startDate': ('django.db.models.fields.DateField', [], {'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'unique_together': "(('account', 'external_identifier', 'sender'),)", 'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'icon_url': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'requirements': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'endDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'notes': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'startDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0031_drop_old_immunization_fields
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Deleting field 'Immunization.anatomic_surface'
        db.delete_column('indivo_immunization', 'anatomic_surface')

        # Deleting field 'Immunization.sequence'
        db.delete_column('indivo_immunization', 'sequence')

        # Deleting field 'Immunization.vaccine_type_type'
        db.delete_column('indivo_immunization', 'vaccine_type_type')

        # Deleting field 'Immunization.anatomic_surface_type'
        db.delete_column('indivo_immunization', 'anatomic_surface_type')

        # Deleting field 'Immunization.adverse_event'
        db.delete_column('indivo_immunization', 'adverse_event')

        # Deleting field 'Immunization.vaccine_manufacturer'
        db.delete_column('indivo_immunization', 'vaccine_manufacturer')

        # Deleting field 'Immunization.vaccine_type_abbrev'
        db.delete_column('indivo_immunization', 'vaccine_type_abbrev')

        # Deleting field 'Immunization.anatomic_surface_value'
        db.delete_column('indivo_immunization', 'anatomic_surface_value')

        # Deleting field 'Immunization.administered_by'
        db.delete_column('indivo_immunization', 'administered_by')

        # Deleting field 'Immunization.vaccine_type'
        db.delete_column('indivo_immunization', 'vaccine_type')

        # Deleting field 'Immunization.vaccine_lot'
        db.delete_column('indivo_immunization', 'vaccine_lot')

        # Deleting field 'Immunization.date_administered'
        db.delete_column('indivo_immunization', 'date_administered')

        # Deleting field 'Immunization.vaccine_type_value'
        db.delete_column('indivo_immunization', 'vaccine_type_value')

        # Deleting field 'Immunization.anatomic_surface_abbrev'
        db.delete_column('indivo_immunization', 'anatomic_surface_abbrev')

        # Deleting field 'Immunization.vaccine_expiration'
        db.delete_column('indivo_immunization', 'vaccine_expiration')


    def backwards(self, orm):
        
        # Adding field 'Immunization.anatomic_surface'
        db.add_column('indivo_immunization', 'anatomic_surface', self.gf('django.db.models.fields.CharField')(max_length=40, null=True), keep_default=False)

        # Adding field 'Immunization.sequence'
        db.add_column('indivo_immunization', 'sequence', self.gf('django.db.models.fields.IntegerField')(null=True), keep_default=False)

        # Adding field 'Immunization.vaccine_type_type'
        db.add_column('indivo_immunization', 'vaccine_type_type', self.gf('django.db.models.fields.CharField')(max_length=80, null=True), keep_default=False)

        # Adding field 'Immunization.anatomic_surface_type'
        db.add_column('indivo_immunization', 'anatomic_surface_type', self.gf('django.db.models.fields.CharField')(max_length=80, null=True), keep_default=False)

        # Adding field 'Immunization.adverse_event'
        db.add_column('indivo_immunization', 'adverse_event', self.gf('django.db.models.fields.CharField')(max_length=100, null=True), keep_default=False)

        # Adding field 'Immunization.vaccine_manufacturer'
        db.add_column('indivo_immunization', 'vaccine_manufacturer', self.gf('django.db.models.fields.CharField')(max_length=40, null=True), keep_default=False)

        # Adding field 'Immunization.vaccine_type_abbrev'
        db.add_column('indivo_immunization', 'vaccine_type_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True), keep_default=False)

        # Adding field 'Immunization.anatomic_surface_value'
        db.add_column('indivo_immunization', 'anatomic_surface_value', self.gf('django.db.models.fields.CharField')(max_length=20, null=True), keep_default=False)

        # Adding field 'Immunization.administered_by'
        db.add_column('indivo_immunization', 'administered_by', self.gf('django.db.models.fields.CharField')(max_length=40, null=True), keep_default=False)

        # Adding field 'Immunization.vaccine_type'
        db.add_column('indivo_immunization', 'vaccine_type', self.gf('django.db.models.fields.CharField')(max_length=200, null=True), keep_default=False)

        # Adding field 'Immunization.vaccine_lot'
        db.add_column('indivo_immunization', 'vaccine_lot', self.gf('django.db.models.fields.CharField')(max_length=20, null=True), keep_default=False)

        # Adding field 'Immunization.date_administered'
        db.add_column('indivo_immunization', 'date_administered', self.gf('django.db.models.fields.DateTimeField')(null=True), keep_default=False)

        # Adding field 'Immunization.vaccine_type_value'
        db.add_column('indivo_immunization', 'vaccine_type_value', self.gf('django.db.models.fields.CharField')(max_length=40, null=True), keep_default=False)

        # Adding field 'Immunization.anatomic_surface_abbrev'
        db.add_column('indivo_immunization', 'anatomic_surface_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True), keep_default=False)

        # Adding field 'Immunization.vaccine_expiration'
        db.add_column('indivo_immunization', 'vaccine_expiration', self.gf('django.db.models.fields.DateField')(null=True), keep_default=False)


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'connect_auth_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'account'), ('auth_system', 'username'))", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergic_reaction_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'allergic_reaction_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'allergic_reaction_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'food_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'food_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'food_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.allergyexclusion': {
            'Meta': {'object_name': 'AllergyExclusion', '_ormbases': ['indivo.Fact']},
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'fqn': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.encounter': {
            'Meta': {'object_name': 'Encounter', '_ormbases': ['indivo.Fact']},
            'encounterType_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'encounterType_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'encounterType_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'endDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'facility_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'facility_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'provider_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'provider_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_bday': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'provider_dea_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True'}),
            'provider_ethnicity': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_gender': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_npi_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_preferred_language': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_race': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_tel_1_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_1_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_1_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'provider_tel_2_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_2_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_2_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'startDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'})
        },
        'indivo.fill': {
            'Meta': {'object_name': 'Fill', '_ormbases': ['indivo.Fact']},
            'date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'dispenseDaysSupply': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'medication': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fulfillments'", 'null': 'True', 'to': "orm['indivo.Medication']"}),
            'pbm': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'pharmacy_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_ncpdpid': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_org': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'provider_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_bday': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'provider_dea_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True'}),
            'provider_ethnicity': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_gender': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_npi_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_preferred_language': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_race': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_tel_1_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_1_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_1_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'provider_tel_2_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_2_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_2_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'quantityDispensed_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantityDispensed_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administration_status_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'administration_status_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'administration_status_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'product_class_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_2_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_2_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_2_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'refusal_reason_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'refusal_reason_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'refusal_reason_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'drugName_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'endDate': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'instructions': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantity_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantity_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'startDate': ('django.db.models.fields.DateField', [], {'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'unique_together': "(('account', 'external_identifier', 'sender'),)", 'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'icon_url': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'requirements': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'endDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'notes': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'startDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitals': {
            'Meta': {'object_name': 'Vitals', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_measured': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'position': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'unit_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'unit_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'unit_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0032_old_vitals_to_smart_vitals
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Deleting model 'Vitals'
        db.delete_table('indivo_vitals')

        # Adding model 'VitalSigns'
        db.create_table('indivo_vitalsigns', (
            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
            ('date', self.gf('django.db.models.fields.DateTimeField')(null=True)),
            ('encounter', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Encounter'], null=True)),
            ('temperature_unit', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('temperature_value', self.gf('django.db.models.fields.FloatField')(null=True)),
            ('temperature_name_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('temperature_name_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('temperature_name_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('weight_unit', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('weight_value', self.gf('django.db.models.fields.FloatField')(null=True)),
            ('weight_name_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('weight_name_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('weight_name_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('oxygen_saturation_unit', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('oxygen_saturation_value', self.gf('django.db.models.fields.FloatField')(null=True)),
            ('oxygen_saturation_name_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('oxygen_saturation_name_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('oxygen_saturation_name_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('bmi_unit', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('bmi_value', self.gf('django.db.models.fields.FloatField')(null=True)),
            ('bmi_name_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('bmi_name_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('bmi_name_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('respiratory_rate_unit', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('respiratory_rate_value', self.gf('django.db.models.fields.FloatField')(null=True)),
            ('respiratory_rate_name_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('respiratory_rate_name_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('respiratory_rate_name_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('height_unit', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('height_value', self.gf('django.db.models.fields.FloatField')(null=True)),
            ('height_name_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('height_name_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('height_name_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('heart_rate_unit', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('heart_rate_value', self.gf('django.db.models.fields.FloatField')(null=True)),
            ('heart_rate_name_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('heart_rate_name_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('heart_rate_name_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('bp_diastolic_unit', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('bp_diastolic_value', self.gf('django.db.models.fields.FloatField')(null=True)),
            ('bp_diastolic_name_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('bp_diastolic_name_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('bp_diastolic_name_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('bp_method_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('bp_method_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('bp_method_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('bp_site_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('bp_site_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('bp_site_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('bp_systolic_unit', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('bp_systolic_value', self.gf('django.db.models.fields.FloatField')(null=True)),
            ('bp_systolic_name_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('bp_systolic_name_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('bp_systolic_name_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('bp_position_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('bp_position_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('bp_position_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
        ))
        db.send_create_signal('indivo', ['VitalSigns'])


    def backwards(self, orm):
        
        # Adding model 'Vitals'
        db.create_table('indivo_vitals', (
            ('date_measured', self.gf('django.db.models.fields.DateTimeField')(null=True)),
            ('site', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
            ('name_value', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
            ('name_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
            ('unit', self.gf('django.db.models.fields.CharField')(max_length=100)),
            ('value', self.gf('django.db.models.fields.FloatField')()),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=100)),
            ('unit_abbrev', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
            ('comments', self.gf('django.db.models.fields.TextField')(null=True)),
            ('unit_type', self.gf('django.db.models.fields.CharField')(max_length=80, null=True)),
            ('position', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
            ('unit_value', self.gf('django.db.models.fields.CharField')(max_length=40, null=True)),
            ('name_type', self.gf('django.db.models.fields.CharField')(max_length=80, null=True)),
        ))
        db.send_create_signal('indivo', ['Vitals'])

        # Deleting model 'VitalSigns'
        db.delete_table('indivo_vitalsigns')


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'connect_auth_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'account'), ('auth_system', 'username'))", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergic_reaction_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'allergic_reaction_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'allergic_reaction_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'food_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'food_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'food_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.allergyexclusion': {
            'Meta': {'object_name': 'AllergyExclusion', '_ormbases': ['indivo.Fact']},
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'fqn': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.encounter': {
            'Meta': {'object_name': 'Encounter', '_ormbases': ['indivo.Fact']},
            'encounterType_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'encounterType_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'encounterType_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'endDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'facility_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'facility_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'provider_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'provider_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_bday': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'provider_dea_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True'}),
            'provider_ethnicity': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_gender': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_npi_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_preferred_language': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_race': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_tel_1_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_1_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_1_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'provider_tel_2_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_2_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_2_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'startDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'})
        },
        'indivo.fill': {
            'Meta': {'object_name': 'Fill', '_ormbases': ['indivo.Fact']},
            'date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'dispenseDaysSupply': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'medication': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fulfillments'", 'null': 'True', 'to': "orm['indivo.Medication']"}),
            'pbm': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'pharmacy_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_ncpdpid': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_org': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'provider_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_bday': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'provider_dea_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True'}),
            'provider_ethnicity': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_gender': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_npi_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_preferred_language': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_race': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_tel_1_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_1_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_1_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'provider_tel_2_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_2_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_2_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'quantityDispensed_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantityDispensed_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administration_status_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'administration_status_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'administration_status_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'product_class_2_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_2_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_2_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'refusal_reason_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'refusal_reason_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'refusal_reason_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.lab': {
            'Meta': {'object_name': 'Lab', '_ormbases': ['indivo.Fact']},
            'date_measured': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'first_lab_test_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_lab_test_value': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'first_panel_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_address': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'lab_name': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'lab_type': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'non_critical_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_maximum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'normal_range_minimum': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'drugName_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'endDate': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'instructions': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantity_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantity_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'startDate': ('django.db.models.fields.DateField', [], {'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'unique_together': "(('account', 'external_identifier', 'sender'),)", 'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'icon_url': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'requirements': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'endDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'notes': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'startDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitalsigns': {
            'Meta': {'object_name': 'VitalSigns', '_ormbases': ['indivo.Fact']},
            'bmi_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bmi_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bmi_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bmi_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bmi_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'bp_diastolic_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_diastolic_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_diastolic_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_diastolic_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_diastolic_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'bp_method_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_method_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_method_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_position_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_position_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_position_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_site_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_site_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_site_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_systolic_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_systolic_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_systolic_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_systolic_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_systolic_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'encounter': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Encounter']", 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'heart_rate_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'heart_rate_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'heart_rate_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'heart_rate_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'heart_rate_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'height_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'height_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'height_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'height_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'height_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'oxygen_saturation_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'oxygen_saturation_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'oxygen_saturation_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'oxygen_saturation_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'oxygen_saturation_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'respiratory_rate_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'respiratory_rate_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'respiratory_rate_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'respiratory_rate_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'respiratory_rate_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'temperature_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'temperature_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'temperature_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'temperature_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'temperature_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'weight_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'weight_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'weight_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'weight_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'weight_value': ('django.db.models.fields.FloatField', [], {'null': 'True'})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0033_old_labs_to_smart_labs
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Deleting model 'Lab'
        db.delete_table('indivo_lab')

        # Adding model 'LabResult'
        db.create_table('indivo_labresult', (
            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
            ('accession_number', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('narrative_result', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('notes', self.gf('django.db.models.fields.CharField')(max_length=600, null=True)),
            ('collected_at', self.gf('django.db.models.fields.DateTimeField')(null=True)),
            ('status_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('status_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('status_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('quantitative_result_value_value', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('quantitative_result_value_unit', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('quantitative_result_non_critical_range_min_value', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('quantitative_result_non_critical_range_min_unit', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('quantitative_result_non_critical_range_max_value', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('quantitative_result_non_critical_range_max_unit', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('quantitative_result_normal_range_min_value', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('quantitative_result_normal_range_min_unit', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('quantitative_result_normal_range_max_value', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('quantitative_result_normal_range_max_unit', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('abnormal_interpretation_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('abnormal_interpretation_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('abnormal_interpretation_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('collected_by_org_adr_region', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('collected_by_org_adr_country', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('collected_by_org_adr_postalcode', self.gf('django.db.models.fields.CharField')(max_length=12, null=True)),
            ('collected_by_org_adr_city', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('collected_by_org_adr_street', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('collected_by_org_name', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('test_name_identifier', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('test_name_system', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('test_name_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('collected_by_name_given', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('collected_by_name_suffix', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('collected_by_name_family', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('collected_by_name_prefix', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('collected_by_role', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
        ))
        db.send_create_signal('indivo', ['LabResult'])


    def backwards(self, orm):
        
        # Adding model 'Lab'
        db.create_table('indivo_lab', (
            ('non_critical_range_minimum', self.gf('django.db.models.fields.CharField')(max_length=250, null=True)),
            ('lab_address', self.gf('django.db.models.fields.CharField')(max_length=250, null=True)),
            ('normal_range_minimum', self.gf('django.db.models.fields.CharField')(max_length=250, null=True)),
            ('lab_type', self.gf('django.db.models.fields.CharField')(max_length=250, null=True)),
            ('date_measured', self.gf('django.db.models.fields.DateTimeField')()),
            ('first_panel_name', self.gf('django.db.models.fields.CharField')(max_length=250, null=True)),
            ('first_lab_test_name', self.gf('django.db.models.fields.CharField')(max_length=250, null=True)),
            ('normal_range_maximum', self.gf('django.db.models.fields.CharField')(max_length=250, null=True)),
            ('non_critical_range_maximum', self.gf('django.db.models.fields.CharField')(max_length=250, null=True)),
            ('fact_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Fact'], unique=True, primary_key=True)),
            ('lab_name', self.gf('django.db.models.fields.CharField')(max_length=250, null=True)),
            ('lab_comments', self.gf('django.db.models.fields.TextField')(null=True)),
            ('first_lab_test_value', self.gf('django.db.models.fields.CharField')(max_length=250, null=True)),
        ))
        db.send_create_signal('indivo', ['Lab'])

        # Deleting model 'LabResult'
        db.delete_table('indivo_labresult')


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'connect_auth_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'account'), ('auth_system', 'username'))", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergic_reaction_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'allergic_reaction_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'allergic_reaction_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'food_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'food_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'food_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.allergyexclusion': {
            'Meta': {'object_name': 'AllergyExclusion', '_ormbases': ['indivo.Fact']},
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'fqn': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.encounter': {
            'Meta': {'object_name': 'Encounter', '_ormbases': ['indivo.Fact']},
            'encounterType_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'encounterType_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'encounterType_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'endDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'facility_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'facility_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'provider_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'provider_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_bday': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'provider_dea_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True'}),
            'provider_ethnicity': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_gender': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_npi_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_preferred_language': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_race': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_tel_1_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_1_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_1_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'provider_tel_2_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_2_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_2_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'startDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'})
        },
        'indivo.fill': {
            'Meta': {'object_name': 'Fill', '_ormbases': ['indivo.Fact']},
            'date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'dispenseDaysSupply': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'medication': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fulfillments'", 'null': 'True', 'to': "orm['indivo.Medication']"}),
            'pbm': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'pharmacy_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_ncpdpid': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_org': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'provider_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_bday': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'provider_dea_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True'}),
            'provider_ethnicity': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_gender': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_npi_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_preferred_language': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_race': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_tel_1_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_1_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_1_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'provider_tel_2_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_2_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_2_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'quantityDispensed_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantityDispensed_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administration_status_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'administration_status_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'administration_status_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'product_class_2_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_2_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_2_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'refusal_reason_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'refusal_reason_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'refusal_reason_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.labresult': {
            'Meta': {'object_name': 'LabResult', '_ormbases': ['indivo.Fact']},
            'abnormal_interpretation_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'abnormal_interpretation_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'abnormal_interpretation_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'accession_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'collected_by_name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_org_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_org_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_org_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'collected_by_org_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_org_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_org_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_role': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'narrative_result': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'notes': ('django.db.models.fields.CharField', [], {'max_length': '600', 'null': 'True'}),
            'quantitative_result_non_critical_range_max_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_non_critical_range_max_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_non_critical_range_min_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_non_critical_range_min_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_normal_range_max_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_normal_range_max_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_normal_range_min_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_normal_range_min_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_value_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_value_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'status_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'status_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'status_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'test_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'test_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'test_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'drugName_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'endDate': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'instructions': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantity_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantity_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'startDate': ('django.db.models.fields.DateField', [], {'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'unique_together': "(('account', 'external_identifier', 'sender'),)", 'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'icon_url': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'requirements': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'endDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'notes': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'startDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_contact'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'the_record_for_demographics'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitalsigns': {
            'Meta': {'object_name': 'VitalSigns', '_ormbases': ['indivo.Fact']},
            'bmi_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bmi_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bmi_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bmi_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bmi_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'bp_diastolic_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_diastolic_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_diastolic_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_diastolic_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_diastolic_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'bp_method_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_method_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_method_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_position_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_position_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_position_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_site_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_site_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_site_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_systolic_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_systolic_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_systolic_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_systolic_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_systolic_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'encounter': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Encounter']", 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'heart_rate_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'heart_rate_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'heart_rate_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'heart_rate_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'heart_rate_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'height_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'height_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'height_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'height_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'height_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'oxygen_saturation_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'oxygen_saturation_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'oxygen_saturation_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'oxygen_saturation_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'oxygen_saturation_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'respiratory_rate_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'respiratory_rate_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'respiratory_rate_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'respiratory_rate_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'respiratory_rate_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'temperature_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'temperature_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'temperature_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'temperature_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'temperature_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'weight_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'weight_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'weight_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'weight_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'weight_value': ('django.db.models.fields.FloatField', [], {'null': 'True'})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0034_auto__add_demographics__del_field_record_demographics__del_field_recor
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'Demographics'
        db.create_table('indivo_demographics', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('created_at', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('document', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['indivo.Document'], null=True)),
            ('bday', self.gf('django.db.models.fields.DateField')()),
            ('email', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('ethnicity', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('gender', self.gf('django.db.models.fields.CharField')(max_length=50)),
            ('preferred_language', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('race', self.gf('django.db.models.fields.CharField')(max_length=200, null=True)),
            ('name_given', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('name_suffix', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('name_family', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('name_prefix', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('tel_2_type', self.gf('django.db.models.fields.CharField')(max_length=1, null=True)),
            ('tel_2_preferred_p', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('tel_2_number', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
            ('adr_region', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('adr_country', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('adr_postalcode', self.gf('django.db.models.fields.CharField')(max_length=12, null=True)),
            ('adr_city', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('adr_street', self.gf('django.db.models.fields.CharField')(max_length=255, null=True)),
            ('tel_1_type', self.gf('django.db.models.fields.CharField')(max_length=1, null=True)),
            ('tel_1_preferred_p', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('tel_1_number', self.gf('django.db.models.fields.CharField')(max_length=20, null=True)),
        ))
        db.send_create_signal('indivo', ['Demographics'])

        # Deleting field 'Record.demographics'
        db.delete_column('indivo_record', 'demographics_id')

        # Deleting field 'Record.contact'
        db.delete_column('indivo_record', 'contact_id')


    def backwards(self, orm):
        
        # Deleting model 'Demographics'
        db.delete_table('indivo_demographics')

        # Adding field 'Record.demographics'
        db.add_column('indivo_record', 'demographics', self.gf('django.db.models.fields.related.ForeignKey')(related_name='the_record_for_demographics', null=True, to=orm['indivo.Document']), keep_default=False)

        # Adding field 'Record.contact'
        db.add_column('indivo_record', 'contact', self.gf('django.db.models.fields.related.ForeignKey')(related_name='the_record_for_contact', null=True, to=orm['indivo.Document']), keep_default=False)


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'connect_auth_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'account'), ('auth_system', 'username'))", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergic_reaction_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'allergic_reaction_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'allergic_reaction_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'food_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'food_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'food_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.allergyexclusion': {
            'Meta': {'object_name': 'AllergyExclusion', '_ormbases': ['indivo.Fact']},
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.demographics': {
            'Meta': {'object_name': 'Demographics'},
            'adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bday': ('django.db.models.fields.DateField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'email': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'ethnicity': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'gender': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'preferred_language': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'race': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'tel_1_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'tel_1_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'tel_1_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'tel_2_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'tel_2_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'tel_2_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'fqn': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.encounter': {
            'Meta': {'object_name': 'Encounter', '_ormbases': ['indivo.Fact']},
            'encounterType_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'encounterType_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'encounterType_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'endDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'facility_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'facility_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'provider_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'provider_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_bday': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'provider_dea_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True'}),
            'provider_ethnicity': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_gender': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_npi_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_preferred_language': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_race': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_tel_1_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_1_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_1_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'provider_tel_2_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_2_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_2_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'startDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'})
        },
        'indivo.fill': {
            'Meta': {'object_name': 'Fill', '_ormbases': ['indivo.Fact']},
            'date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'dispenseDaysSupply': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'medication': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fulfillments'", 'null': 'True', 'to': "orm['indivo.Medication']"}),
            'pbm': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'pharmacy_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_ncpdpid': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_org': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'provider_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_bday': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'provider_dea_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True'}),
            'provider_ethnicity': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_gender': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_npi_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_preferred_language': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_race': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_tel_1_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_1_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_1_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'provider_tel_2_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_2_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_2_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'quantityDispensed_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantityDispensed_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administration_status_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'administration_status_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'administration_status_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'product_class_2_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_2_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_2_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'refusal_reason_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'refusal_reason_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'refusal_reason_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.labresult': {
            'Meta': {'object_name': 'LabResult', '_ormbases': ['indivo.Fact']},
            'abnormal_interpretation_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'abnormal_interpretation_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'abnormal_interpretation_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'accession_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'collected_by_name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_org_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_org_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_org_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'collected_by_org_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_org_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_org_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_role': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'narrative_result': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'notes': ('django.db.models.fields.CharField', [], {'max_length': '600', 'null': 'True'}),
            'quantitative_result_non_critical_range_max_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_non_critical_range_max_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_non_critical_range_min_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_non_critical_range_min_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_normal_range_max_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_normal_range_max_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_normal_range_min_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_normal_range_min_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_value_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_value_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'status_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'status_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'status_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'test_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'test_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'test_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'drugName_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'endDate': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'instructions': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantity_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantity_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'startDate': ('django.db.models.fields.DateField', [], {'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'unique_together': "(('account', 'external_identifier', 'sender'),)", 'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'icon_url': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'requirements': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'endDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'notes': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'startDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitalsigns': {
            'Meta': {'object_name': 'VitalSigns', '_ormbases': ['indivo.Fact']},
            'bmi_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bmi_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bmi_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bmi_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bmi_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'bp_diastolic_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_diastolic_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_diastolic_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_diastolic_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_diastolic_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'bp_method_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_method_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_method_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_position_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_position_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_position_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_site_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_site_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_site_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_systolic_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_systolic_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_systolic_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_systolic_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_systolic_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'encounter': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Encounter']", 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'heart_rate_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'heart_rate_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'heart_rate_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'heart_rate_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'heart_rate_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'height_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'height_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'height_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'height_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'height_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'oxygen_saturation_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'oxygen_saturation_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'oxygen_saturation_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'oxygen_saturation_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'oxygen_saturation_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'respiratory_rate_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'respiratory_rate_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'respiratory_rate_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'respiratory_rate_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'respiratory_rate_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'temperature_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'temperature_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'temperature_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'temperature_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'temperature_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'weight_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'weight_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'weight_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'weight_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'weight_value': ('django.db.models.fields.FloatField', [], {'null': 'True'})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0035_auto__add_field_record_demographics
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding field 'Record.demographics'
        db.add_column('indivo_record', 'demographics', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['indivo.Demographics'], unique=True, null=True), keep_default=False)


    def backwards(self, orm):
        
        # Deleting field 'Record.demographics'
        db.delete_column('indivo_record', 'demographics_id')


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'connect_auth_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'account'), ('auth_system', 'username'))", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergic_reaction_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'allergic_reaction_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'allergic_reaction_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_class_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'food_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'food_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'food_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'severity_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.allergyexclusion': {
            'Meta': {'object_name': 'AllergyExclusion', '_ormbases': ['indivo.Fact']},
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.demographics': {
            'Meta': {'object_name': 'Demographics'},
            'adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bday': ('django.db.models.fields.DateField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'email': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'ethnicity': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'gender': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'preferred_language': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'race': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'tel_1_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'tel_1_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'tel_1_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'tel_2_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'tel_2_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'tel_2_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'fqn': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.encounter': {
            'Meta': {'object_name': 'Encounter', '_ormbases': ['indivo.Fact']},
            'encounterType_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'encounterType_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'encounterType_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'endDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'facility_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'facility_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'facility_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'provider_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'provider_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_bday': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'provider_dea_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True'}),
            'provider_ethnicity': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_gender': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_npi_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_preferred_language': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_race': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_tel_1_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_1_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_1_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'provider_tel_2_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_2_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_2_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'startDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'})
        },
        'indivo.fill': {
            'Meta': {'object_name': 'Fill', '_ormbases': ['indivo.Fact']},
            'date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'dispenseDaysSupply': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'medication': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fulfillments'", 'null': 'True', 'to': "orm['indivo.Medication']"}),
            'pbm': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'pharmacy_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_ncpdpid': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'pharmacy_org': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'provider_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_bday': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'provider_dea_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True'}),
            'provider_ethnicity': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_gender': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_npi_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_preferred_language': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_race': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provider_tel_1_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_1_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_1_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'provider_tel_2_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'provider_tel_2_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_2_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True'}),
            'quantityDispensed_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantityDispensed_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administration_status_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'administration_status_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'administration_status_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'product_class_2_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_2_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_2_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_class_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'refusal_reason_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'refusal_reason_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'refusal_reason_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.labresult': {
            'Meta': {'object_name': 'LabResult', '_ormbases': ['indivo.Fact']},
            'abnormal_interpretation_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'abnormal_interpretation_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'abnormal_interpretation_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'accession_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'collected_by_name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_org_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_org_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_org_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'collected_by_org_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_org_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_org_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'collected_by_role': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'narrative_result': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'notes': ('django.db.models.fields.CharField', [], {'max_length': '600', 'null': 'True'}),
            'quantitative_result_non_critical_range_max_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_non_critical_range_max_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_non_critical_range_min_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_non_critical_range_min_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_normal_range_max_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_normal_range_max_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_normal_range_min_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_normal_range_min_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_value_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantitative_result_value_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'status_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'status_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'status_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'test_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'test_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'test_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8'}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'drugName_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'endDate': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'instructions': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'provenance_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantity_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'quantity_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'startDate': ('django.db.models.fields.DateField', [], {'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'unique_together': "(('account', 'external_identifier', 'sender'),)", 'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'icon_url': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'requirements': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'endDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'notes': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'startDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Demographics']", 'unique': 'True', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitalsigns': {
            'Meta': {'object_name': 'VitalSigns', '_ormbases': ['indivo.Fact']},
            'bmi_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bmi_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bmi_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bmi_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bmi_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'bp_diastolic_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_diastolic_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_diastolic_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_diastolic_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_diastolic_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'bp_method_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_method_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_method_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_position_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_position_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_position_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_site_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_site_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_site_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_systolic_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_systolic_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_systolic_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_systolic_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'bp_systolic_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'encounter': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Encounter']", 'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'heart_rate_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'heart_rate_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'heart_rate_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'heart_rate_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'heart_rate_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'height_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'height_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'height_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'height_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'height_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'oxygen_saturation_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'oxygen_saturation_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'oxygen_saturation_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'oxygen_saturation_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'oxygen_saturation_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'respiratory_rate_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'respiratory_rate_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'respiratory_rate_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'respiratory_rate_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'respiratory_rate_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'temperature_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'temperature_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'temperature_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'temperature_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'temperature_value': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'weight_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'weight_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'weight_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'weight_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'weight_value': ('django.db.models.fields.FloatField', [], {'null': 'True'})
        }
    }

    complete_apps = ['indivo']

########NEW FILE########
__FILENAME__ = 0036_add_middle_name
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Encounter.provider_name_middle'
        db.add_column('indivo_encounter', 'provider_name_middle',
                      self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True),
                      keep_default=False)

        # Adding field 'Fill.provider_name_middle'
        db.add_column('indivo_fill', 'provider_name_middle',
                      self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True),
                      keep_default=False)

        # Adding field 'Demographics.name_middle'
        db.add_column('indivo_demographics', 'name_middle',
                      self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True),
                      keep_default=False)

        # Adding field 'LabResult.collected_by_name_middle'
        db.add_column('indivo_labresult', 'collected_by_name_middle',
                      self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'Encounter.provider_name_middle'
        db.delete_column('indivo_encounter', 'provider_name_middle')

        # Deleting field 'Fill.provider_name_middle'
        db.delete_column('indivo_fill', 'provider_name_middle')

        # Deleting field 'Demographics.name_middle'
        db.delete_column('indivo_demographics', 'name_middle')

        # Deleting field 'LabResult.collected_by_name_middle'
        db.delete_column('indivo_labresult', 'collected_by_name_middle')


    models = {
        'indivo.accesstoken': {
            'Meta': {'object_name': 'AccessToken', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'connect_auth_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']"}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.account': {
            'Meta': {'object_name': 'Account', '_ormbases': ['indivo.Principal']},
            'account': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'contact_email': ('django.db.models.fields.CharField', [], {'max_length': '300'}),
            'failed_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'full_name': ('django.db.models.fields.CharField', [], {'max_length': '150'}),
            'last_failed_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_login_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'last_state_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'primary_secret': ('django.db.models.fields.CharField', [], {'max_length': '16', 'null': 'True'}),
            'secondary_secret': ('django.db.models.fields.CharField', [], {'max_length': '8', 'null': 'True'}),
            'state': ('django.db.models.fields.CharField', [], {'default': "'uninitialized'", 'max_length': '50'}),
            'total_login_count': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        },
        'indivo.accountauthsystem': {
            'Meta': {'unique_together': "(('auth_system', 'account'), ('auth_system', 'username'))", 'object_name': 'AccountAuthSystem'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'auth_systems'", 'to': "orm['indivo.Account']"}),
            'auth_parameters': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'auth_system': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.AuthSystem']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountauthsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'user_attributes': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.accountfullshare': {
            'Meta': {'unique_together': "(('record', 'with_account'),)", 'object_name': 'AccountFullShare'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'accountfullshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares'", 'to': "orm['indivo.Record']"}),
            'role_label': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'with_account': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'fullshares_to'", 'to': "orm['indivo.Account']"})
        },
        'indivo.allergy': {
            'Meta': {'object_name': 'Allergy', '_ormbases': ['indivo.Fact']},
            'allergic_reaction_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'allergic_reaction_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'allergic_reaction_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'category_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'category_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'category_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drug_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'drug_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'drug_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'drug_class_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'drug_class_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'drug_class_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'food_allergen_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'food_allergen_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'food_allergen_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'severity_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'severity_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'severity_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.allergyexclusion': {
            'Meta': {'object_name': 'AllergyExclusion', '_ormbases': ['indivo.Fact']},
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.audit': {
            'Meta': {'object_name': 'Audit'},
            'carenet_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {}),
            'document_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'pha_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'proxied_by_email': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'record_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'req_domain': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'req_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'req_ip_address': ('django.db.models.fields.IPAddressField', [], {'max_length': '15', 'null': 'True'}),
            'req_method': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
            'req_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
            'request_successful': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'resp_code': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'resp_headers': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'view_func': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.authsystem': {
            'Meta': {'object_name': 'AuthSystem'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'authsystem_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
        },
        'indivo.carenet': {
            'Meta': {'unique_together': "(('name', 'record'),)", 'object_name': 'Carenet'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenet_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"})
        },
        'indivo.carenetaccount': {
            'Meta': {'unique_together': "(('carenet', 'account'),)", 'object_name': 'CarenetAccount'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'can_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetaccount_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'})
        },
        'indivo.carenetautoshare': {
            'Meta': {'unique_together': "(('carenet', 'record', 'type'),)", 'object_name': 'CarenetAutoshare'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetautoshare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']"}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']", 'null': 'True'})
        },
        'indivo.carenetdocument': {
            'Meta': {'unique_together': "(('carenet', 'document'),)", 'object_name': 'CarenetDocument'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetdocument_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'share_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'indivo.carenetpha': {
            'Meta': {'unique_together': "(('carenet', 'pha'),)", 'object_name': 'CarenetPHA'},
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carenetpha_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"})
        },
        'indivo.demographics': {
            'Meta': {'object_name': 'Demographics'},
            'adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True', 'blank': 'True'}),
            'adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'bday': ('django.db.models.fields.DateField', [], {'blank': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'ethnicity': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'gender': ('django.db.models.fields.CharField', [], {'max_length': '50', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'name_middle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'preferred_language': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'race': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'tel_1_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'tel_1_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'tel_1_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True', 'blank': 'True'}),
            'tel_2_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'tel_2_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'tel_2_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True', 'blank': 'True'})
        },
        'indivo.document': {
            'Meta': {'unique_together': "(('record', 'external_id'),)", 'object_name': 'Document'},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'content_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'digest': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'fqn': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'mime_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'nevershare': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'original': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_thread'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_document'", 'null': 'True', 'to': "orm['indivo.PHA']"}),
            'processed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documents'", 'null': 'True', 'to': "orm['indivo.Record']"}),
            'replaced_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'document_replaced'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'replaces': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '1', 'to': "orm['indivo.StatusName']"}),
            'suppressed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'suppressed_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Principal']", 'null': 'True'})
        },
        'indivo.documentrels': {
            'Meta': {'object_name': 'DocumentRels'},
            'document_0': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_0'", 'to': "orm['indivo.Document']"}),
            'document_1': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'rels_as_doc_1'", 'to': "orm['indivo.Document']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'relationship': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.DocumentSchema']"})
        },
        'indivo.documentschema': {
            'Meta': {'object_name': 'DocumentSchema'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentschema_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'internal_p': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'stylesheet': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stylesheet'", 'null': 'True', 'to': "orm['indivo.Document']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '500'})
        },
        'indivo.documentstatushistory': {
            'Meta': {'object_name': 'DocumentStatusHistory'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'documentstatushistory_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'effective_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'proxied_by_principal': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'reason': ('django.db.models.fields.TextField', [], {}),
            'record': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.StatusName']"})
        },
        'indivo.encounter': {
            'Meta': {'object_name': 'Encounter', '_ormbases': ['indivo.Fact']},
            'encounterType_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'encounterType_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'encounterType_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'endDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'facility_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'facility_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'facility_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True', 'blank': 'True'}),
            'facility_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'facility_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'facility_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'provider_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True', 'blank': 'True'}),
            'provider_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_bday': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'provider_dea_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_ethnicity': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_gender': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_name_middle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_npi_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_preferred_language': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_race': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_tel_1_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'provider_tel_1_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_1_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True', 'blank': 'True'}),
            'provider_tel_2_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'provider_tel_2_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_2_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True', 'blank': 'True'}),
            'startDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'})
        },
        'indivo.equipment': {
            'Meta': {'object_name': 'Equipment', '_ormbases': ['indivo.Fact']},
            'date_started': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'date_stopped': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40', 'blank': 'True'}),
            'vendor': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True', 'blank': 'True'})
        },
        'indivo.fact': {
            'Meta': {'object_name': 'Fact'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True', 'blank': 'True'})
        },
        'indivo.fill': {
            'Meta': {'object_name': 'Fill', '_ormbases': ['indivo.Fact']},
            'date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'dispenseDaysSupply': ('django.db.models.fields.FloatField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'medication': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'fulfillments'", 'null': 'True', 'to': "orm['indivo.Medication']"}),
            'pbm': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'pharmacy_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'pharmacy_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'pharmacy_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True', 'blank': 'True'}),
            'pharmacy_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'pharmacy_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'pharmacy_ncpdpid': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'pharmacy_org': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True', 'blank': 'True'}),
            'provider_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_bday': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'provider_dea_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_ethnicity': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_gender': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_name_middle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_npi_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_preferred_language': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_race': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_tel_1_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'provider_tel_1_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_1_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True', 'blank': 'True'}),
            'provider_tel_2_number': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'provider_tel_2_preferred_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'provider_tel_2_type': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True', 'blank': 'True'}),
            'quantityDispensed_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'quantityDispensed_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'indivo.immunization': {
            'Meta': {'object_name': 'Immunization', '_ormbases': ['indivo.Fact']},
            'administration_status_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'administration_status_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'administration_status_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'product_class_2_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'product_class_2_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'product_class_2_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'product_class_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'product_class_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'product_class_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'product_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'product_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'product_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'refusal_reason_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'refusal_reason_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'refusal_reason_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'indivo.labresult': {
            'Meta': {'object_name': 'LabResult', '_ormbases': ['indivo.Fact']},
            'abnormal_interpretation_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'abnormal_interpretation_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'abnormal_interpretation_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'accession_number': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'collected_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'collected_by_name_family': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'collected_by_name_given': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'collected_by_name_middle': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'collected_by_name_prefix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'collected_by_name_suffix': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'collected_by_org_adr_city': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'collected_by_org_adr_country': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'collected_by_org_adr_postalcode': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True', 'blank': 'True'}),
            'collected_by_org_adr_region': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'collected_by_org_adr_street': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'collected_by_org_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'collected_by_role': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'narrative_result': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'notes': ('django.db.models.fields.CharField', [], {'max_length': '600', 'null': 'True', 'blank': 'True'}),
            'quantitative_result_non_critical_range_max_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'quantitative_result_non_critical_range_max_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'quantitative_result_non_critical_range_min_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'quantitative_result_non_critical_range_min_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'quantitative_result_normal_range_max_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'quantitative_result_normal_range_max_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'quantitative_result_normal_range_min_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'quantitative_result_normal_range_min_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'quantitative_result_value_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'quantitative_result_value_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'status_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'status_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'status_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'test_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'test_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'test_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
        },
        'indivo.machineapp': {
            'Meta': {'object_name': 'MachineApp'},
            'app_type': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.measurement': {
            'Meta': {'object_name': 'Measurement', '_ormbases': ['indivo.Fact']},
            'datetime': ('django.db.models.fields.DateTimeField', [], {'blank': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '24', 'blank': 'True'}),
            'unit': ('django.db.models.fields.CharField', [], {'max_length': '8', 'blank': 'True'}),
            'value': ('django.db.models.fields.FloatField', [], {'blank': 'True'})
        },
        'indivo.medication': {
            'Meta': {'object_name': 'Medication', '_ormbases': ['indivo.Fact']},
            'drugName_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'drugName_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'drugName_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'endDate': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'frequency_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'frequency_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'instructions': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provenance_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provenance_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provenance_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'quantity_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'quantity_value': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'startDate': ('django.db.models.fields.DateField', [], {'null': 'True'})
        },
        'indivo.message': {
            'Meta': {'unique_together': "(('account', 'external_identifier', 'sender'),)", 'object_name': 'Message'},
            'about_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'archived_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'body_type': ('django.db.models.fields.CharField', [], {'default': "'plaintext'", 'max_length': '100'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'external_identifier': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'num_attachments': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'read_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'received_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_recipient'", 'to': "orm['indivo.Principal']"}),
            'response_to': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_responses'", 'null': 'True', 'to': "orm['indivo.Message']"}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'message_as_sender'", 'to': "orm['indivo.Principal']"}),
            'severity': ('django.db.models.fields.CharField', [], {'default': "'low'", 'max_length': '100'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.messageattachment': {
            'Meta': {'unique_together': "(('message', 'attachment_num'),)", 'object_name': 'MessageAttachment'},
            'attachment_num': ('django.db.models.fields.IntegerField', [], {}),
            'content': ('django.db.models.fields.TextField', [], {}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'messageattachment_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Message']"}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'saved_to_document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'size': ('django.db.models.fields.IntegerField', [], {}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'indivo.nonce': {
            'Meta': {'unique_together': "(('nonce', 'oauth_type'),)", 'object_name': 'Nonce'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'nonce': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'oauth_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
        },
        'indivo.notification': {
            'Meta': {'object_name': 'Notification'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'app_url': ('django.db.models.fields.CharField', [], {'max_length': '300', 'null': 'True'}),
            'content': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'document': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Document']", 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notifications_sent_by'", 'to': "orm['indivo.Principal']"})
        },
        'indivo.nouser': {
            'Meta': {'object_name': 'NoUser', '_ormbases': ['indivo.Principal']},
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'})
        },
        'indivo.pha': {
            'Meta': {'object_name': 'PHA'},
            'author': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
            'autonomous_reason': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'callback_url': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'description': ('django.db.models.fields.CharField', [], {'max_length': '2000', 'null': 'True'}),
            'frameable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'has_ui': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'icon_url': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'indivo_version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
            'is_autonomous': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'requirements': ('django.db.models.fields.TextField', [], {'null': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'start_url_template': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
            'version': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'})
        },
        'indivo.phashare': {
            'Meta': {'unique_together': "(('record', 'with_pha'),)", 'object_name': 'PHAShare'},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shares_authorized_by'", 'null': 'True', 'to': "orm['indivo.Account']"}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'phashare_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares'", 'to': "orm['indivo.Record']"}),
            'with_pha': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pha_shares_to'", 'to': "orm['indivo.PHA']"})
        },
        'indivo.principal': {
            'Meta': {'object_name': 'Principal'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'principal_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'email': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'indivo.problem': {
            'Meta': {'object_name': 'Problem', '_ormbases': ['indivo.Fact']},
            'endDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'}),
            'notes': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'startDate': ('django.db.models.fields.DateTimeField', [], {'null': 'True'})
        },
        'indivo.procedure': {
            'Meta': {'object_name': 'Procedure', '_ormbases': ['indivo.Fact']},
            'comments': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_performed': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'location': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'name_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'name_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'name_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True', 'blank': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
        },
        'indivo.record': {
            'Meta': {'object_name': 'Record'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'record_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'demographics': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Demographics']", 'unique': 'True', 'null': 'True'}),
            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '250', 'unique': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'records_owned_by'", 'null': 'True', 'to': "orm['indivo.Principal']"})
        },
        'indivo.recordnotificationroute': {
            'Meta': {'unique_together': "(('account', 'record'),)", 'object_name': 'RecordNotificationRoute'},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']"}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'recordnotificationroute_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'notification_routes'", 'to': "orm['indivo.Record']"})
        },
        'indivo.reqtoken': {
            'Meta': {'object_name': 'ReqToken', '_ormbases': ['indivo.Principal']},
            'authorized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'authorized_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'}),
            'carenet': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Carenet']", 'null': 'True'}),
            'oauth_callback': ('django.db.models.fields.CharField', [], {'max_length': '500', 'null': 'True'}),
            'pha': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHA']"}),
            'principal_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Principal']", 'unique': 'True', 'primary_key': 'True'}),
            'record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Record']", 'null': 'True'}),
            'share': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.PHAShare']", 'null': 'True'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'token_secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '60'})
        },
        'indivo.sessionrequesttoken': {
            'Meta': {'object_name': 'SessionRequestToken'},
            'approved_p': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessionrequesttoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.sessiontoken': {
            'Meta': {'object_name': 'SessionToken'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sessiontoken_created_by'", 'null': 'True', 'to': "orm['indivo.Principal']"}),
            'expires_at': ('django.db.models.fields.DateTimeField', [], {}),
            'id': ('django.db.models.fields.CharField', [], {'max_length': '50', 'primary_key': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'auto_now_add': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '60'}),
            'token': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Account']", 'null': 'True'})
        },
        'indivo.simpleclinicalnote': {
            'Meta': {'object_name': 'SimpleClinicalNote', '_ormbases': ['indivo.Fact']},
            'chief_complaint': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_of_visit': ('django.db.models.fields.DateTimeField', [], {'blank': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'finalized_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'provider_institution': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'signed_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'specialty': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'specialty_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'specialty_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'specialty_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True', 'blank': 'True'}),
            'visit_location': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'visit_type': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'visit_type_abbrev': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'visit_type_type': ('django.db.models.fields.CharField', [], {'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'visit_type_value': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True', 'blank': 'True'})
        },
        'indivo.statusname': {
            'Meta': {'object_name': 'StatusName'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '24'})
        },
        'indivo.vitalsigns': {
            'Meta': {'object_name': 'VitalSigns', '_ormbases': ['indivo.Fact']},
            'bmi_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'bmi_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'bmi_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'bmi_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'bmi_value': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'bp_diastolic_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'bp_diastolic_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'bp_diastolic_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'bp_diastolic_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'bp_diastolic_value': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'bp_method_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'bp_method_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'bp_method_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'bp_position_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'bp_position_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'bp_position_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'bp_site_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'bp_site_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'bp_site_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'bp_systolic_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'bp_systolic_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'bp_systolic_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'bp_systolic_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'bp_systolic_value': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'date': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
            'encounter': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['indivo.Encounter']", 'null': 'True', 'blank': 'True'}),
            'fact_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['indivo.Fact']", 'unique': 'True', 'primary_key': 'True'}),
            'heart_rate_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'heart_rate_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'heart_rate_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'heart_rate_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'heart_rate_value': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'height_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'height_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'height_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'height_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'height_value': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'oxygen_saturation_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'oxygen_saturation_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'oxygen_saturation_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'oxygen_saturation_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'oxygen_saturation_value': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'respiratory_rate_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'respiratory_rate_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'respiratory_rate_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'respiratory_rate_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'respiratory_rate_value': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'temperature_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'temperature_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'temperature_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'temperature_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'temperature_value': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'weight_name_identifier': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'weight_name_system': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'weight_name_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'weight_unit': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'weight_value': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['indivo']
########NEW FILE########
__FILENAME__ = accounts
"""
Accounts and authentication
"""

from base import *
from django.utils import simplejson
from indivo.lib import utils
import indivo

##
## Accounts
##
MAX_FAILED_LOGINS = 3
UNINITIALIZED, ACTIVE, DISABLED, RETIRED = 'uninitialized', 'active', 'disabled', 'retired'

# in seconds
if hasattr(settings, 'ACCOUNT_REENABLE_TIMEOUT'):
    ACCOUNT_REENABLE_TIMEOUT = settings.ACCOUNT_REENABLE_TIMEOUT
else:
    ACCOUNT_REENABLE_TIMEOUT = None

class Account(Principal):
    Meta = BaseMeta()
    
    account = models.OneToOneField(Principal, primary_key = True, parent_link = True)
    
    # secrets to create the account
    primary_secret = models.CharField(max_length=16, null=True)
    secondary_secret = models.CharField(max_length=8, null=True)
    
    # account's name and contact email
    full_name = models.CharField(max_length = 150, null= False)
    contact_email = models.CharField(max_length = 300, null = False)
    
    # password
    # password_hash = models.CharField(max_length = 64)
    # password_salt = models.CharField(max_length = 64)
    
    # login status
    last_login_at = models.DateTimeField(auto_now_add=False, null=True)
    last_failed_login_at = models.DateTimeField(auto_now_add=False, null=True)
    total_login_count = models.IntegerField(default=0)
    failed_login_count = models.IntegerField(default=0)
    
    STATES = ((UNINITIALIZED, u'Uninitialized (Needs Password)'),
              (ACTIVE, u'Active'),
              (DISABLED, u'Disabled / Locked'),
              (RETIRED, u'Retired'))
    
    # keep track of the state of the user
    state = models.CharField(max_length=50, choices=STATES, default=UNINITIALIZED)
    last_state_change = models.DateTimeField(auto_now_add=False, null=True)
    
    def __unicode__(self):
        return 'Account %s' % self.id

    def save(self, *args, **kwargs):
        """ Enforce case-insensitive emails. """
        self.email = self.email.lower().strip()
        super(Account,self).save(*args, **kwargs)
    
    # Accesscontrol:
    # roles that an Account could have
    def ownsRecord(self, record):
        """
        True if the Account is the owner of the record
        """
        try:
            return record.owner == self
        except:
            return False
    
    def fullySharesRecord(self, record):
        """
        True if the Account has a full share of the record
        """
        try:
            return indivo.models.AccountFullShare.objects.filter(record=record, with_account=self)
        except:
            return False
    
    def isInCarenet(self, carenet):
        """
        True if the Account is in the specified carenet. Note:
        Accounts may be in multiple carenets for multiple records
        """
        try:
            return indivo.models.CarenetAccount.objects.filter(carenet=carenet, account=self)
        except:
            return False
    
    def on_successful_login(self):
        self.last_login_at = datetime.now()
        self.total_login_count += 1
        self.failed_login_count = 0
        self.save()
    
    def on_failed_login(self):
        self.last_failed_login_at = datetime.utcnow()
        self.failed_login_count += 1
        if self.failed_login_count >= MAX_FAILED_LOGINS:
            self.set_state(DISABLED)
        self.save()
    
    def set_state(self, state):
        if self.state == RETIRED:
            raise Exception("account is retired, no further state changes allowed")
    
        self.state = state
        self.last_state_change = datetime.utcnow()
    
    def disable(self):
        self.set_state(DISABLED)
    
    @property
    def is_active(self):
        # if the account is disabled and we've waited long enough, reenable it
        # but only if the system is configured to allow for this reenablement
        # by default it is not
        if ACCOUNT_REENABLE_TIMEOUT and self.state == DISABLED and self.last_failed_login_at and \
            datetime.utcnow() - self.last_failed_login_at > timedelta(seconds=ACCOUNT_REENABLE_TIMEOUT):
            self.set_state(ACTIVE)
            self.failed_login_count = 0
            self.save()
        
        return self.state == ACTIVE
    
    def generate_secrets(self, secondary_secret_p = True):
        self.primary_secret = utils.random_string(16)
        if secondary_secret_p:
            self.secondary_secret = utils.random_string(6, [string.digits])
        else:
            self.secondary_secret = None
        self.save()
    
    # email the owner of the record with the secret
    def send_secret(self):
        # mail template
        subject = utils.render_template_raw('email/secret/subject', {'account': self}, type='txt').strip()
        body = utils.render_template_raw('email/secret/body',
                                            {'account': self,
                                          'url_prefix': settings.UI_SERVER_URL,
                                  'email_support_name': settings.EMAIL_SUPPORT_NAME,
                               'email_support_address': settings.EMAIL_SUPPORT_ADDRESS,
                                           'full_name': self.full_name or self.contact_email},
                                        type='txt')
        
        utils.send_mail(subject, body, 
                        "%s <%s>" % (settings.EMAIL_SUPPORT_NAME, settings.EMAIL_SUPPORT_ADDRESS), 
                        ["%s <%s>" % (self.full_name or self.contact_email, self.contact_email)])
    
    def notify_account_of_new_message(self):
        # only notify accounts that have a state of active or disabled
        if self.state == ACTIVE or self.state == DISABLED:
            subject = utils.render_template_raw('email/new_message/subject', {'account': self}, type='txt').strip()
            body = utils.render_template_raw('email/new_message/body', 
                                                {'account': self, 
                                               'full_name': self.full_name or self.contact_email,
                                              'url_prefix': settings.UI_SERVER_URL, 
                                      'email_support_name': settings.EMAIL_SUPPORT_NAME,
                                   'email_support_address': settings.EMAIL_SUPPORT_ADDRESS }, 
                                            type='txt')
            utils.send_mail(subject, body, 
                            "%s <%s>" % (settings.EMAIL_SUPPORT_NAME, settings.EMAIL_SUPPORT_ADDRESS), 
                            ["%s <%s>" % (self.full_name or self.contact_email, self.contact_email)])
    
    def send_welcome_email(self):
        subject = utils.render_template_raw('email/welcome/subject', {'account': self}, type='txt').strip()
        body = utils.render_template_raw('email/welcome/body', 
                                            { 'account': self, 
                                            'full_name': self.full_name or self.contact_email,
                                           'url_prefix': settings.UI_SERVER_URL, 
                                   'email_support_name': settings.EMAIL_SUPPORT_NAME,
                                'email_support_address': settings.EMAIL_SUPPORT_ADDRESS }, 
                                        type='txt')
        utils.send_mail(subject, body, 
                        "%s <%s>" % (settings.EMAIL_SUPPORT_NAME, settings.EMAIL_SUPPORT_ADDRESS), 
                        ["%s <%s>" % (self.full_name or self.contact_email, self.contact_email)])
    
    ##
    ## password stuff. This used to be stored in this table, but now it's stored
    ## in the accountauthsystems
    ##
    @property
    def password_info(self):
        try:
            return self.auth_systems.get(auth_system=AuthSystem.PASSWORD())
        except AccountAuthSystem.DoesNotExist:
            return None
        except AccountAuthSystem.MultipleObjectsReturned:
            # Added a database constraint: this should never happen
            raise
    
    def _add_password_auth_system(self, username):
        self.auth_systems.get_or_create(auth_system=AuthSystem.PASSWORD(), username=username.lower().strip())
    
    def _password_params_get(self):
        if not self.password_info:
            return None
        return simplejson.loads(self.password_info.auth_parameters or 'null') or {}
    
    def _password_params_set(self, val):
        info = self.password_info
        if info:
            info.auth_parameters = simplejson.dumps(val)
            info.save()
    
    password_params = property(_password_params_get, _password_params_set)
    
    def _password_hash_get(self):
        if self.password_params:
            return self.password_params.get('password_hash', None)
        else:
            return None
    
    def _password_hash_set(self, value):
        new_params = self.password_params
        new_params['password_hash'] = value
        self.password_params = new_params
    
    password_hash = property(_password_hash_get, _password_hash_set)
    
    def _password_salt_get(self):
        return self.password_params.get('password_salt', None)
    
    def _password_salt_set(self, value):
        new_params = self.password_params
        new_params['password_salt'] = value
        self.password_params = new_params
    
    password_salt = property(_password_salt_get, _password_salt_set)
    
    def set_username(self, username):
        """
        set the username
        """
        try:
            auth_system = self.auth_systems.get(auth_system=AuthSystem.PASSWORD())
        except AccountAuthSystem.DoesNotExist:
            raise Exception("need to initialize the password auth system before trying to set the username")
    
        auth_system.username = username
        auth_system.save()
    
    def set_username_and_password(self, username, password=None):
        """Setup the username and password.
        
        password can be null if we don't want to set one yet.
        """
        self._add_password_auth_system(username)
        if password:
            self.password = password
        self.save()
    
    def reset(self):
        self.state = UNINITIALIZED
        self.generate_secrets()
        self.save()
    
    def send_forgot_password_email(self):
        subject = utils.render_template_raw('email/forgot_password/subject', {'account': self}, type='txt').strip()
        body = utils.render_template_raw('email/forgot_password/body', 
                                            {'account': self, 
                                          'url_prefix': settings.UI_SERVER_URL,
                                  'email_support_name': settings.EMAIL_SUPPORT_NAME, 
                               'email_support_address': settings.EMAIL_SUPPORT_ADDRESS},
                                            type='txt')
        utils.send_mail(subject, body, 
                        "%s <%s>" % (settings.EMAIL_SUPPORT_NAME, settings.EMAIL_SUPPORT_ADDRESS), 
                        ["%s <%s>" % (self.full_name or self.contact_email, self.contact_email)])
    
    @classmethod
    def compute_hash(cls, password, salt):
        if not (isinstance(password, str) and isinstance(salt, str)):
            try:
                salt = str(salt)
                password = str(password)
            except:
                raise Exception('Password and Salt need to be strings')
        m = hashlib.sha256()
        m.update(salt)
        m.update(password)
        return m.hexdigest()
    
    def password_get(self):
        raise Exception('you cannot read the password')
    
    def password_set(self, new_password):
        # generate a new salt
        self.password_salt = utils.random_string(20)
        
        # compute the hash
        self.password_hash = self.compute_hash(new_password, self.password_salt)
        if self.state == UNINITIALIZED:
            self.set_state(ACTIVE)
    
    def password_check(self, password_try):
        return self.password_hash == self.compute_hash(password_try, self.password_salt)
    
    @property
    def default_record(self):
        return self.records_owned_by.all()[0]
    
    @property
    def records_administered(self):
        return self.records_owned_by
    
    password = property(password_get, password_set)

class AuthSystem(Object):
    short_name = models.CharField(max_length=100, unique=True)
    
    # is this authentication system handled internally by Indivo X?
    # otherwise externally by the Chrome App
    internal_p = models.BooleanField(default=False)
    
    @classmethod
    def PASSWORD(cls):
        # FIXME: memoize this
        return cls.objects.get_or_create(short_name='password', internal_p=True)[0]

class AccountAuthSystem(Object):
    account         = models.ForeignKey(Account, related_name = 'auth_systems')
    auth_system = models.ForeignKey(AuthSystem)
    
    username = models.CharField(max_length = 250)
    
    # json content for extra parameters
    auth_parameters = models.CharField(max_length = 2000, null = True)
    user_attributes = models.CharField(max_length = 2000, null = True)
    
    class Meta:
        app_label = INDIVO_APP_LABEL
        
        # One account can't have duplicate auth_systems
        # One auth_system can't have duplicate usernames
        unique_together = (('auth_system', 'account'),
                            ('auth_system', 'username'),
                          )

    def save(self, *args, **kwargs):
        """ Enforce lowercase usernames. """
        self.username = self.username.lower().strip()
        super(AccountAuthSystem,self).save(*args, **kwargs)

########NEW FILE########
__FILENAME__ = apps
"""
Indivo Models for Applications that extend Indivo
"""

from django.db import models
from django.conf import settings

from records_and_documents import Record, DocumentSchema
from base import Object, Principal, BaseModel, BaseMeta

import urllib, datetime
import indivo
from indivo.lib.utils import render_template_raw

try:
    from django.utils import simplejson
except ImportError:
    try:
        import simplejson
    except ImportError:
        raise ImportError("Couldn't find an installation of SimpleJSON")

##
## OAuth Stuff
##
class Nonce(BaseModel):
  """
  Nonces for oauth
  FIXME: clear out the old nonces regularly
  """
  nonce = models.CharField(max_length=100, null=False)
  oauth_type = models.CharField(max_length=50, null=True)
  created_at = models.DateTimeField(auto_now_add = True)

  Meta = BaseMeta()
  Meta.unique_together = ("nonce", "oauth_type")

##
## problem with hierarchy of abstracts
##
class OAuthApp(Principal):
  """
  An intermediate abstract class for all OAuth applications
  """

  Meta = BaseMeta(True)

  consumer_key = models.CharField(max_length=200)
  secret = models.CharField(max_length=60)
  name = models.CharField(max_length = 200)

  # short description of the app
  description = models.CharField(max_length=2000, null=True)

  # author of the app
  author = models.CharField(max_length=200, null=True)
  
  # version of the app
  version = models.CharField(max_length=40, null=True)

  # required Indivo version
  indivo_version = models.CharField(max_length=40, null=True)

  @classmethod
  def queryset_as_manifests(cls, queryset, as_string=False, **manifest_args):
      """ Return manifests for each app in the queryset, as a list or as a JSON string (if *as_string* is ``True``). """
      manifest_args.update(as_string=False)
      manifests = [obj.to_manifest(**manifest_args) for obj in queryset.iterator()]
      if as_string:
          return simplejson.dumps(manifests)
      return manifests
          

## HACK because of problem
#OAuthApp = Principal

##
## PHAs
##

class PHA(OAuthApp):
  """
  User applications
  """

  Meta = BaseMeta()

  # URL templates look like http://host/url/{param1}?foo={param2}

  # start_url_template should contain a {record_id} parameter
  # start_url_template may contain a {document_id} parameter
  # start_url_template may contain a {next_url} parameter
  start_url_template = models.CharField(max_length=500)

  # callback_url
  callback_url = models.CharField(max_length=500)

  # does this app request a long-lived token?
  is_autonomous = models.BooleanField(default=False)
  autonomous_reason = models.TextField(null=True)

  # does the application have a user interface at all? (some are just background)
  # this really should only be falsifiable for autonomous apps.
  # non-autonomous apps must have a UI
  has_ui = models.BooleanField(default=True)

  # does the application fit in an iframe?
  # this should be true for now. Eventually
  # we'll have some apps that are not frameable
  frameable = models.BooleanField(default=True)

  # location of the app's icon
  icon_url = models.CharField(max_length=500, null=True)

  # other requirements: datatypes, REST methods, codes, etc.
  # represented as a JSON string suitable for dropping into
  # a SMART manifest
  requirements = models.TextField(null=True)

  @classmethod
  def from_manifest(cls, manifest, credentials, save=True):
    """ Produce a PHA object from an app manifest.

    Manifests should correspond to SMART manifest format 
    (http://wiki.chip.org/smart-project/index.php/Developers_Documentation:_Packaging_Applications_via_SMART_Manifest),
    with some optional Indivo specific extensions, namely:

    * *oauth_callback_url*: A callback URL for Indivo-style oAuth access
    * *autonomous_reason*: An explanation for why the app requires offline access to patient records
    * *has_ui*: ``true`` or ``false``, whether the app can be displayed in a browser.
    * *frameable*: ``true`` or ``false``, whether the app should be loaded in an iframe in the Indivo UI.
    * *indivo_version*: Required version of Indivo for compatibility
    
    Credentials should be JSON objects with two keys:

    * *consumer_key*: The oAuth consumer key to use for the app
    * *consumer_secret*: The oAuth consumer secret to use for the app

    See :doc:`app-registration` for more details.

    """

    from indivo.views import _get_indivo_version
    parsed_manifest = simplejson.loads(manifest)
    parsed_credentials = simplejson.loads(credentials)

    # expand relative urls to be relative to the UI
    start_url = parsed_manifest.get('index', '')
    if start_url and start_url.find('://') < 0:
        start_url = "%s%s"%(settings.UI_SERVER_URL, start_url)

    callback_url = parsed_manifest.get('oauth_callback_url', '')
    if callback_url and callback_url.find('://') < 0:
        callback_url = "%s%s"%(settings.UI_SERVER_URL, callback_url)

    icon_url = parsed_manifest.get('icon', '')
    if icon_url and icon_url.find('://') < 0:
        icon_url = "%s%s"%(settings.UI_SERVER_URL, icon_url)

    kwargs = {
      'consumer_key': parsed_credentials['consumer_key'],
      'secret': parsed_credentials['consumer_secret'],
      'name': parsed_manifest['name'],
      'email': parsed_manifest['id'],
      'start_url_template': start_url,
      'callback_url': callback_url,
      'is_autonomous': parsed_manifest.get('mode', '') == 'background',
      'autonomous_reason': parsed_manifest.get('autonomous_reason', ''),
      'has_ui': parsed_manifest['has_ui'] if parsed_manifest.has_key('has_ui') \
          else parsed_manifest.has_key('index'), # This may not be perfect
      'frameable': parsed_manifest['frameable'] if parsed_manifest.has_key('frameable') \
          else parsed_manifest.has_key('index'),
      'description': parsed_manifest.get('description', ''),
      'author': parsed_manifest.get('author', ''),
      'version': parsed_manifest.get('version', ''),
      'icon_url': icon_url,
      'indivo_version': parsed_manifest['indivo_version'] if parsed_manifest.has_key('indivo_version') \
          else _get_indivo_version(parsed_manifest.get('smart_version', '')),
      'requirements': simplejson.dumps(parsed_manifest.get('requires', {})),
      }
    app = cls(**kwargs)
    if save:
      app.save()
    return app

  def to_manifest(self, smart_only=False, as_string=True):
      """ Produce a SMART-style manifest for the app.
      
      see :doc:`app-registration` for details on the manifest format.

      If *smart_only* is True, only SMART-manifest compatible fields will be included in the output.

      """
      from indivo.views import _get_smart_version
      smart_version = _get_smart_version(self.indivo_version)

      output = {
          "name": self.name,
          "description": self.description,
          "author": self.author,
          "id": self.email,
          "version": self.version,
          "mode": "background" if self.is_autonomous else "ui",
          "scope": "record",
          "icon": self.icon_url,
          "index": self.start_url_template,          
          "requires": simplejson.loads(self.requirements),
          }
      if smart_version:
          output["smart_version"] = smart_version

      if not smart_only:
          output.update({
                  "has_ui": self.has_ui,
                  "frameable": self.frameable,
                  "oauth_callback_url": self.callback_url,
                  "indivo_version": self.indivo_version,
                  })
          if self.is_autonomous:
              output['autonomous_reason'] = self.autonomous_reason
      if as_string:
          return simplejson.dumps(output)
      else:
          return output

  # Accesscontrol:
  # roles that PHAs could implement.
  def isInCarenet(self, carenet):
    """
    True if the PHA is in the specified carenet
    """
    try:
      return indivo.models.CarenetPHA.objects.filter(carenet=carenet, pha=self)
    except:
      return False

  def scopedToRecord(self, record):
    """
    True if the PHA is enabled on the record
    """
    return self.pha_shares_to.filter(record=record).exists()

##
## App Tokens are implemented separately, since they require access to record and docs
## (yes, this is confusing, but otherwise it's circular import hell)
##

##
## Applications which communicate directly with Indivo, not user-mediated
## There are two types:
## - admin: can use the admin API
## - chrome: can use any API and sudo as another user (though not as an admin app)
## 

# inherit first from Principal, second from OAuth Consumer
class MachineApp(OAuthApp):
  APP_TYPES = (
    ('admin', 'Admin'),
    ('chrome', 'Chrome')
    )

  # admin or chrome?
  # all chrome apps are also admin apps, but we use a type field
  # in case we add new types in the future
  app_type = models.CharField(max_length = 100, choices = APP_TYPES, null = False)

  @classmethod
  def from_manifest(cls, manifest, credentials, save=True):
    """ Produce a MachineApp object from an app manifest.

    Manifests should correspond to SMART manifest format 
    (http://wiki.chip.org/smart-project/index.php/Developers_Documentation:_Packaging_Applications_via_SMART_Manifest),
    with one required Indivo specific extensions, namely:
    
    * *ui_app*: ``true`` or ``false``. Whether the machineapp is a UIApp ('chrome app').
    * *indivo_version*: Required version of Indivo for compatibility
    
    Credentials should be JSON objects with two keys:

    * *consumer_key*: The oAuth consumer key to use for the app
    * *consumer_secret*: The oAuth consumer secret to use for the app

    See :doc:`app-registration` for more details.

    """

    from indivo.views import _get_indivo_version
    parsed_manifest = simplejson.loads(manifest)
    parsed_credentials = simplejson.loads(credentials)
    kwargs = {
      'consumer_key': parsed_credentials['consumer_key'],
      'secret': parsed_credentials['consumer_secret'],
      'name': parsed_manifest['name'],
      'email': parsed_manifest['id'],
      'app_type': 'chrome' if parsed_manifest['ui_app'] else 'admin',
      'description': parsed_manifest.get('description', ''),
      'author': parsed_manifest.get('author', ''),
      'version': parsed_manifest.get('version', ''),
      'indivo_version':parsed_manifest['indivo_version'] if parsed_manifest.has_key('indivo_version') \
        else _get_indivo_version(parsed_manifest.get('smart_version', '')),
      }
    app = cls(**kwargs)
    if save:
      app.save()
    return app

  def to_manifest(self, smart_only=False, as_string=True):
      """ Produce a SMART-style manifest for the app.
      
      see :doc:`app-registration` for details on the manifest format.
      
      If *smart_only* is True, only SMART-manifest compatible fields will be included in the output.

      """
      from indivo.views import _get_smart_version
      smart_version = _get_smart_version(self.indivo_version)
      output = {
          "name": self.name,
          "description": self.description,
          "author": self.author,
          "id": self.email,
          "version": self.version,
          "smart_version": smart_version,
          }
      if not smart_only:
          output.update({
                  "ui_app": self.app_type == 'chrome',
                  "indivo_version": self.indivo_version,
                  })
      if as_string:
          return simplejson.dumps(output)
      else:
          return output

  # Accesscontrol:
  # roles that a MachineApp could have
  def isType(self, type_str):
    """
    We override isType to handle admin vs. chrome apps.
    If type is 'MachineApp', always returns True. Otherwise,
    returns True if type_str is the app_type of the Machine App.
    """
    return super(MachineApp, self).isType(type_str) or \
        type_str == self.app_type

  def createdAccount(self, account):
    """
    The MachineApp created the account
    """
    try:
      return account.creator == self
    except:
      return False

  def createdRecord(self, record):
    """
    The MachineApps can created the record
    """
    try:
      return record.creator == self
    except:
      return False

##
## session tokens
##

class SessionRequestToken(Object):
  token = models.CharField(max_length=40)
  secret = models.CharField(max_length=60)

  user = models.ForeignKey('Account', null = True)
  approved_p = models.BooleanField(default=False)

class SessionToken(Object):
  token = models.CharField(max_length=40)
  secret = models.CharField(max_length=60)

  user = models.ForeignKey('Account', null = True)

  expires_at = models.DateTimeField(null = False)

  @property
  def approved_p(self):
    return True
  
  def save(self, *args, **kwargs):
    if self.expires_at == None:
      self.expires_at = datetime.datetime.utcnow() + datetime.timedelta(minutes = 30)
    super(SessionToken, self).save(*args, **kwargs)

  def __str__(self):
    vars = {'oauth_token' : self.token, 'oauth_token_secret' : self.secret, 'account_id': self.user.email}
    return urllib.urlencode(vars)

########NEW FILE########
__FILENAME__ = audit
"""
Indivo Model for Audit
"""

from django.db import models
from django.conf import settings

from base import BaseModel
from indivo.models import Principal, Record, Document

# SZ: Do not put any foreign key constraints on this table. :)
class Audit(BaseModel):
  # Basic Info
  datetime = models.DateTimeField()
  view_func = models.CharField(max_length=255, null=True)
  request_successful = models.BooleanField()
  
  # Principal Info
  effective_principal_email = models.CharField(max_length=255, null=True)
  proxied_by_email = models.CharField(max_length=255, null=True)
  
  # Resources
  carenet_id = models.CharField(max_length=64, null=True)
  record_id = models.CharField(max_length=64, null=True)
  pha_id = models.CharField(max_length=64, null=True)
  document_id = models.CharField(max_length=64, null=True)
  external_id = models.CharField(max_length=250, null=True)
  message_id = models.CharField(max_length=250, null=True)
  
  # Request Info
  req_url = models.URLField(null=True)
  req_ip_address = models.IPAddressField(null=True)
  req_domain = models.URLField(null=True)
  req_headers = models.TextField(null=True)
  req_method = models.CharField(max_length=12, null=True)
  
  # Response Info
  resp_code = models.IntegerField(null=True)
  resp_headers = models.TextField(null=True)
  

  def __unicode__(self):
    return 'Audit %s' % self.id

########NEW FILE########
__FILENAME__ = base
"""
Indivo Models
"""

from django.db import models
from django.conf import settings

import hashlib
import uuid
import copy
import string
import logging

from datetime import datetime, timedelta
from oauth import oauth

from indivo.fields import DummyField

# generate the right meta class
INDIVO_APP_LABEL = 'indivo'

def BaseMeta(abstract_p=False):
  class Meta:
    app_label = INDIVO_APP_LABEL
    abstract = abstract_p
  return Meta

class BaseModel(models.Model):
  """
  The base for all indivo models
  """
  Meta = BaseMeta(True)

  @classmethod
  def setup(cls):
    """
    called automatically after this class has been prepared into the server
    """
    pass

# SZ: Why is this called Object?
class Object(BaseModel):

  id = models.CharField(max_length = 50, primary_key = True)
  created_at = models.DateTimeField(auto_now_add = True)
  modified_at = models.DateTimeField(auto_now_add = True, auto_now = True)
  creator = models.ForeignKey('Principal', related_name = '%(class)s_created_by', null = True)

  def __unicode__(self):
    return "Core Object %s" % self.id

  Meta = BaseMeta(True)

  def save(self, **kwargs):
    if not self.id:
      self.id = str(uuid.uuid4())
    super(Object, self).save(**kwargs)


class Principal(Object):
  Meta = BaseMeta()

  # every principal is associated with an email address
  email = models.CharField(max_length = 255, unique = True)

  # effectively the descendent table
  type = models.CharField(max_length = 100)

  def save(self, *args, **kwargs):
    """
    make sure some fields are set
    """
    if not self.type or self.type == '':
      self.type = self.__class__.__name__
    super(Principal,self).save(*args, **kwargs)

  def _get_subclasses(self):
    """ Returns a dict of 'type_name':class key-value pairs for each subclass of Principal."""
    return dict([(rel.var_name, rel.field.model) 
                 for rel in self._meta.get_all_related_objects() 
                 if isinstance(rel.field, models.OneToOneField) 
                 and issubclass(rel.field.model, self.__class__)])

  def get_subclass(self):
    """ Return the instance of a subclass of this object of type ``self.type``. 
    
    Returns ``self`` if no such instance exists (i.e., we have no subclasses).

    Normally, this is available through ``getattr(self, self.type.lower())``,
    but sometimes that just gets us another principal object. We'll try the
    above approach first, since it allows us to use select_related to be
    more efficient, but if that fails, we'll have to use a call to
    ``objects.get()``, which will always go to the DB. Because of this behavior,
    this call should be used sparingly.
    
    """

    # If we are already an instance of our lowest subclass, avoid extra computation
    if self.__class__.__name__ == self.type:
      return self

    # First try to get at the child through Django's OneToOne attribute
    # i.e. Principal.account or Principal.pha
    try:
      subclass_obj = getattr(self, self.type.lower().strip())
      if subclass_obj.__class__.__name__ == self.type:
        return subclass_obj
    except:
      
      # This shouldn't happen, if Django is working properly and self.type is set correctly
      pass

    # Had trouble with the standard lookup, so select_related won't work.
    # Just use subclass.objects.get(), which will go straight to the DB
    try:
      model_class = self._get_subclasses()[self.type.lower().strip()]
    except KeyError:

      # we're already an instance of the lowest subclass
      return self

    try:
      return model_class.objects.get(id=self.id)
    except model_class.DoesNotExist:

      # Shouldn't happen: our subclass didn't exist
      return self

  def descriptor(self):

    """ Get a name for the Principal instance.

    Returns the email id if we don't have a name (i.e. accesstokens)

    """

    subclass_obj = self.get_subclass()    
    return getattr(subclass_obj, 'full_name', None) or getattr(subclass_obj, 'name', None) or subclass_obj.email
    
  # Accesscontrol:
  # Default Role Implmentations (deny-by-default):
  def isType(self, type_str):
    """
    The principal is of the specified type.
    """
    return self.type == type_str # What are the options for self.type? Where does it get set?

  def isSame(self, arg):
    """
    The principal is the same object as arg. Semantics: if the
    effective principal is the same object as arg, also return true.
    """
    # Note: the django Model overloaded __eq__ operator makes this equivalent
    # to comparing the ids of the models.
    return self == arg or self.effective_principal == arg

  def isProxiedByApp(self, app):
    """
    The principal is proxied by an app, i.e., an accesstoken may be proxied by a PHA
    """
    return False

  def createdAccount(self, account):
    """
    The principal created the account
    """
    return False

  def createdRecord(self, record):
    """
    The principal created the specified record
    """
    return False

  def ownsRecord(self, record):
    """
    The principal is the owner of the specified record
    """
    return False

  def scopedToRecord(self, record):
    """
    The principal is bound to the record at a whole-record level. (i.e., not limited to a carenet)
    """
    return False

  def fullySharesRecord(self, record):
    """
    The record is fully shared with the principal
    """
    return False

  def isInCarenet(self, carenet):
    """
    The principal is located within the scope of the carenet
    """
    return False

  def basicPrincipalRole(self):
    """
    The Principal is a principal. Always returns true, and
    shouldn't be overwritten by subclasses
    """
    return True


  @property
  def effective_principal(self):
    """
    In some cases, a principal's effective principal is not quite itself,
    e.g. a token's identity is really the PHA it comes from.
    """
    return self

  @property
  def proxied_by(self):
    """
    Principals are sometimes proxied by other principals, e.g. a PHA
    By default, principals are not proxied.
    """
    return None

  @property
  def effective_email(self):
    return self.effective_principal

  def __unicode__(self):
    return 'Principal %s' % self.email

  def __eq__(self, other):
    if not other or not isinstance(other, Principal):
      return False

    return self.id == other.id

class DataModelBase(models.base.ModelBase):
    """ Subclass of the Django Model metaclass that handles Dummy Fields on Indivo Data Models. 
    
    Also setting all fields to blank=True, so it won't interfere with our datamodel validation.
    This is fine because we aren't using the Django admin.

    """

    def __new__(cls, name, bases, attrs):

        def replace_field(fields_dict, field_name, field):
            new_fields_dict = copy.copy(fields_dict)
            
            # build the new fields to replace the old field with
            for suffix, new_field_params in field.__class__.replacements.iteritems():
                new_name = "%s%s"%(field_name, suffix)
                new_field_class, new_field_kwargs = new_field_params
                new_field = new_field_class(**new_field_kwargs)
                new_field.blank = True
                new_fields_dict[new_name] = new_field

                # recurse if the new field is actually a replaceable DummyField
                if issubclass(new_field_class, DummyField):
                    new_fields_dict = replace_field(new_fields_dict, new_name, new_field)

            del new_fields_dict[field_name]
            return new_fields_dict

        # Iterate over the fields in the model, and replace all of the dummy fields
        new_attrs = copy.copy(attrs)
        for field_name, field_val in attrs.iteritems():
            if isinstance(field_val, DummyField):
                new_attrs = replace_field(new_attrs, field_name, field_val)
            elif isinstance(field_val, models.Field):
                field_val.blank = True
        return super(DataModelBase, cls).__new__(cls, name, bases, new_attrs)

########NEW FILE########
__FILENAME__ = demographics
"""
Indivo Model for Demographics
"""
import os
from django.conf import settings
from lxml import etree

from django.db import models
from django.core import serializers
from django.utils import simplejson

from base import BaseModel, DataModelBase
from indivo.fields import AddressField, NameField, TelephoneField
from indivo.lib.iso8601 import parse_utc_date 
from indivo.lib.rdf import PatientGraph
from indivo.serializers.json import IndivoJSONEncoder

FIELDS = ('bday', 
          'email', 
          'ethnicity', 
          'gender', 
          'preferred_language', 
          'race', 
          'name_given', 
          'name_suffix',
          'name_middle',
          'name_family', 
          'name_prefix', 
          'tel_2_type', 
          'tel_2_preferred_p', 
          'tel_2_number', 
          'adr_region', 
          'adr_country', 
          'adr_postalcode', 
          'adr_city', 
          'adr_street', 
          'tel_1_type', 
          'tel_1_preferred_p', 
          'tel_1_number'
          )

class Demographics(BaseModel):
    """ SMART style demographics """
    __metaclass__ = DataModelBase
    
    created_at = models.DateTimeField(auto_now_add = True)
    document = models.ForeignKey('Document', null=True)
    
    adr = AddressField()
    bday = models.DateField()
    email = models.CharField(max_length=200, null=True)
    ethnicity = models.CharField(max_length=200, null=True)
    gender = models.CharField(max_length=50)
    name = NameField()
    preferred_language = models.CharField(max_length=200, null=True)
    race = models.CharField(max_length=200, null=True)
    tel_1 = TelephoneField()
    tel_2 = TelephoneField()

    @classmethod
    def from_xml(klass, xml):
        attrs = {}
        _tag = lambda tag_name: "{%s}%s"%("http://indivo.org/vocab/xml/documents#", tag_name)
        
        # build etree
        try:
            root = etree.XML(xml)
        except Exception as e:
            raise ValueError("Input document didn't parse as XML, error was: %s"%(str(e)))
  
        # validate XML
        try:
            with open(os.path.join(settings.APP_HOME, 'indivo/schemas/data/core/demographics/schema.xsd'), 'r') as schema_file:
                schema = etree.XMLSchema(etree.parse(schema_file))

            schema.assertValid(root)
        except etree.DocumentInvalid as e:
            raise ValueError("Input document didn't validate, error was: %s"%(str(e)))
  
        # parse XML
        attrs['bday'] = parse_utc_date(root.findtext(_tag('dateOfBirth')))
        attrs['gender'] = root.findtext(_tag('gender'))
        attrs['email'] = root.findtext(_tag('email'))
        attrs['ethnicity'] = root.findtext(_tag('ethnicity'))
        attrs['race'] = root.findtext(_tag('race'))
        attrs['preferred_language'] = root.findtext(_tag('preferredLanguage'))
        
        nameElement = root.find(_tag('Name'))
        attrs['name_family'] = nameElement.findtext(_tag('familyName'))
        attrs['name_given'] = nameElement.findtext(_tag('givenName'))
        attrs['name_middle'] = nameElement.findtext(_tag('middleName'))
        attrs['name_prefix'] = nameElement.findtext(_tag('prefix'))
        attrs['name_suffix'] = nameElement.findtext(_tag('suffix'))
        
        telephoneElements = root.findall(_tag('Telephone'))
        if len(telephoneElements) > 0:
            tel_1 = telephoneElements[0]
            attrs['tel_1_type'] = tel_1.findtext(_tag('type'))
            attrs['tel_1_number'] = tel_1.findtext(_tag('number'))
            attrs['tel_1_preferred_p'] = 'false' != tel_1.findtext(_tag('preferred'))
            
        if len(telephoneElements) > 1:
            tel_2 = telephoneElements[1]
            attrs['tel_2_type'] = tel_2.findtext(_tag('type'))
            attrs['tel_2_number'] = tel_2.findtext(_tag('number'))
            attrs['tel_2_preferred_p'] = 'false' !=  tel_2.findtext(_tag('preferred'))
        
        addressElement = root.find(_tag('Address'))
        if addressElement is not None:
            attrs['adr_country'] = addressElement.findtext(_tag('country'))
            attrs['adr_city'] = addressElement.findtext(_tag('city'))
            attrs['adr_postalcode'] = addressElement.findtext(_tag('postalCode'))
            attrs['adr_region'] = addressElement.findtext(_tag('region'))
            attrs['adr_street'] = addressElement.findtext(_tag('street'))
        
        return klass(**attrs)
        
    def uri(self):
        return "http://indivo.org/records/%s/demographics"%(self.record.id)
        
    def as_json(self):
        """JSON string representation of Demographics instance"""
        data = serializers.serialize("indivo_python", [self], fields=FIELDS)
        return simplejson.dumps(data, cls=IndivoJSONEncoder)
    
    def as_xml(self):
        """XML string representation of Demographics instance"""
        root = serializers.serialize("indivo_xml", [self], fields=FIELDS)
        return etree.tostring(root)
    
    def as_rdf(self):
        """RDF/XML string representation of Demographics instance"""
        graph = PatientGraph(self.record)
        graph.addDemographics(self.record)
        return graph.toRDF()
    

########NEW FILE########
__FILENAME__ = document_relationships
"""
Indivo Models for Document Relationships
"""

from django.db import models
from django.conf import settings

from base import BaseModel
from indivo.models import Document, DocumentSchema

class DocumentRels(BaseModel):
  document_0 = models.ForeignKey(Document, related_name='rels_as_doc_0')
  document_1 = models.ForeignKey(Document, related_name='rels_as_doc_1')
  relationship = models.ForeignKey(DocumentSchema)

  def __unicode__(self):
    return 'DocumentRel %s' % self.id


########NEW FILE########
__FILENAME__ = fact
import uuid

from lxml import etree

from django.core import serializers
from django.core.exceptions import ValidationError
from django.db import models
from django.utils import simplejson

from indivo.lib.query import DATE, STRING, NUMBER
from indivo.lib.utils import LazyProperty
from indivo.models import Record, Document
from indivo.models.base import BaseModel, DataModelBase
from indivo.serializers.json import IndivoJSONEncoder

class Fact(BaseModel):
    __metaclass__ = DataModelBase

    id = models.CharField(max_length = 50, primary_key = True)
    created_at = models.DateTimeField(auto_now_add = True)
    # should we add a created_by denormalized field here to make it easier to sort facts?
    document = models.ForeignKey(Document, null=True)
    record = models.ForeignKey(Record, null=True)
    
    def __unicode__(self):
        return "%s %s" % (self.__class__.__name__, self.id)

    def uri(self, modelname=None):
        if not modelname:
            modelname = self.__class__.__name__.lower() + 's'
        return "http://indivo.org/records/%s/%s/%s"%(self.record.id, modelname, self.id)
    
    #Meta = BaseMeta(True)
    
    def save(self, **kwargs):
        if not self.id:
            self.id = str(uuid.uuid4())

        # Validate the Model
        try:
            self.full_clean()
        except ValidationError as e:

            # Just raise the first failure
            error_field, errors = e.message_dict.popitem()
            raise ValueError("%s object didn't validate: %s -- %s"%(self.__class__.__name__, error_field, errors[0]))
        super(Fact, self).save(**kwargs)

    @classmethod
    def to_json(cls, queryset, result_count, record=None, carenet=None):
        data = serializers.serialize("indivo_python", queryset)
        return simplejson.dumps(data, cls=IndivoJSONEncoder)
      
    @classmethod
    def to_xml(cls, queryset, result_count, record=None, carenet=None):
        root = serializers.serialize("indivo_xml", queryset)
        return etree.tostring(root)


########NEW FILE########
__FILENAME__ = messaging
"""
Indivo Model for Messaging
"""

from django.db import models
from django.conf import settings

from base import Object, Principal, INDIVO_APP_LABEL

class Message(Object):
    account = models.ForeignKey('Account')

    # about which record is this message?
    about_record = models.ForeignKey('Record', null = True)

    # identifier that can be set by sender
    external_identifier = models.CharField(max_length = 250, null = True)
    sender = models.ForeignKey('Principal', related_name = 'message_as_sender')
    recipient = models.ForeignKey('Principal', related_name = 'message_as_recipient')
    
    SEVERITIES = (
        ('low', 'Low'),
        ('medium', 'Medium'),
        ('high', 'High'))

    # content of message
    severity = models.CharField(max_length=100, default="low", choices=SEVERITIES)
    subject = models.CharField(max_length = 100)

    BODY_TYPES = (
        ('plaintext', 'Plain Text'),
        ('markdown', 'MarkDown')
        )

    # type of the body
    body_type = models.CharField(max_length = 100, default="plaintext", choices=BODY_TYPES)

    body = models.TextField()
    
    received_at = models.DateTimeField(auto_now_add = True)
    read_at = models.DateTimeField(auto_now_add=False, null=True)
    archived_at = models.DateTimeField(auto_now_add=False, null=True)

    # if the user responds to this message
    response_to = models.ForeignKey('self', null=True, related_name='message_responses')

    num_attachments = models.IntegerField(default = 0)

    class Meta:
        app_label = INDIVO_APP_LABEL
        unique_together = (('account', 'external_identifier', 'sender'),)

    @property
    def ready(self):
        return self.messageattachment_set.count() == self.num_attachments
    
    def add_attachment(self, attachment_num, content):
        """
        attachment_num is 1-indexed
        """

        if int(attachment_num) > self.num_attachments:
            raise Exception("attachment num is too high")
        
        mime_type='application/xml' # Only handle XML attachments for now

        from indivo.document_processing.document_processing import DocumentProcessing
        doc_utils = DocumentProcessing(content, mime_type)

        attachment = MessageAttachment.objects.create(
            message = self,
            content = content,
            size = doc_utils.size,
            type = doc_utils.fqn,
            attachment_num = attachment_num)

        return attachment

    def get_attachment(self, attachment_num):
        return MessageAttachment.objects.get(message=self, attachment_num = attachment_num)

class MessageAttachment(Object):
    """
    for now supports only XML attachments
    """

    message = models.ForeignKey(Message)
    
    # bytes
    size = models.IntegerField()

    # xml type
    type = models.CharField(max_length = 250)

    content = models.TextField()

    saved_to_document = models.ForeignKey('Document', null=True)

    attachment_num = models.IntegerField()

    class Meta:
        app_label = INDIVO_APP_LABEL
        unique_together = (('message', 'attachment_num'),)

    @property
    def saved(self):
        return self.saved_to_document != None

    def save_as_document(self, account):
        """
        The account is the one who's doing the saving

        FIXME: need to check the external_id situation, which could cause problems if senders don't use it well.
        """
        if self.saved:
            raise Exception("this attachment already saved to record")
        
        record = self.message.about_record
        if record == None:
            raise Exception("can only save attachments that pertain to a record")

        external_id = "SAVED_ATTACHMENT_%s_%s" % (self.message.external_identifier , str(self.attachment_num))

        # FIXME: this import shows that we should move the _document_create function to models from views.
        from indivo.views.documents.document import _document_create
        self.saved_to_document = _document_create(creator = account, content = self.content,
                                                  pha = None, record = record, external_id = external_id,
                                                  mime_type = 'application/xml')
        self.save()
                                                  

########NEW FILE########
__FILENAME__ = notifications

"""
Indivo Model for healthfeed
"""

from django.db import models
from django.conf import settings

from base import Object, Principal, INDIVO_APP_LABEL

class Notification(Object):
  account = models.ForeignKey('Account')
  record = models.ForeignKey('Record', null = True)
    
  # someone sends a notification to an account, pertaining to a record
  sender = models.ForeignKey('Principal', related_name = 'notifications_sent_by')

  # the text of the notification
  content = models.CharField(max_length= 500)
    
  # the document ID this pertains to
  document = models.ForeignKey('Document', null = True)

  # the URL to the PHA for followup
  app_url = models.CharField(max_length=300, null = True)


class RecordNotificationRoute(Object):
  record = models.ForeignKey('Record', related_name = 'notification_routes')
    
  # account to which notifications are routed
  account = models.ForeignKey('Account')
  
  class Meta:
    app_label = INDIVO_APP_LABEL
    unique_together = (('account', 'record'),)

########NEW FILE########
__FILENAME__ = no_user
from base import Principal
# Principal object for requests made without
# a true principal. This class doesn't
# have any permissions outside of 
# the defaults it inhereits from the Principal
# class (i.e.) 'basicPrincipalRole', so it is basically
# an empty class
class NoUser(Principal):
    pass

########NEW FILE########
__FILENAME__ = records_and_documents
"""
Indivo Model for records and documents
"""
from django.db import models, transaction
from django.conf import settings
from django.core.exceptions import PermissionDenied
from django.core.files.base import ContentFile
from django.db.models import Count

import urllib, hashlib, uuid

from base import Object, Principal, BaseModel, INDIVO_APP_LABEL
from accounts import Account
from shares import AccountFullShare, PHAShare, Carenet
from messaging import Message
from notifications import Notification
from status import StatusName, DocumentStatusHistory
from oauth import oauth

## Indivo Records and Documents
class Record(Object):
  # owner (could be the hospital if the person does not own their own record)
  owner = models.ForeignKey('Principal', related_name = 'records_owned_by', null=True)

  # label that the owner uses
  label = models.CharField(max_length=60, null = True)

  # for lightweight distributed transaction control
  # nullable for those who don't want to consider it
  external_id = models.CharField(max_length = 250, null = True, unique=True)
  demographics = models.OneToOneField('Demographics', null = True)

  @classmethod
  def prepare_external_id(cls, local_external_id, principal_email):
    """
    This utility method creates a 'full' external_id from parameters
    """
    if not local_external_id:
      return None

    return "%s/%s" % (principal_email, local_external_id)

  def __unicode__(self):
    return 'Record %s' % self.id

  def can_admin(self, account):
    return (self.owner == account) or AccountFullShare.objects.filter(record = self, with_account = account)

  @property
  def phas(self):
    # addeed a filter for those shares that are not pha shares
    return [s.with_pha for s in self.pha_shares.all()]

  def has_pha(self, pha):
    # look for token
    try:
      tok = PHAShare.objects.filter(record = self, with_pha = pha)
    except PHAShare.DoesNotExist:
      return False

    return len(tok) > 0

  def get_accounts_to_notify(self):
    """A list of notification routes
    
    Includes a default for the owner of the record
    """

    accounts = list(set([r.account for r in self.notification_routes.all()]))
    if self.owner and (self.owner not in accounts):
      try:
        owner_account = Account.objects.get(email = self.owner.email)
        accounts.append(owner_account)
      except Account.DoesNotExist:
        pass
    return accounts

  def get_messages(self):
    return Message.objects.filter(about_record = self)

  def send_message(self, external_identifier, sender, subject, body, body_type='plaintext', num_attachments = 0, severity='low'):
    # FIXME: does the PHA have the right to notify the account?
    # FIXME: is the routing really the same for notifications and messages
    # go through all of the accounts that need to be notified
    for account in self.get_accounts_to_notify():
      # FIXME: does the account have the right to see notifications on this record?

      account.notify_account_of_new_message()
      Message.objects.create( account             = account, 
                              about_record        = self, 
                              external_identifier = external_identifier,
                              sender              = sender, 
                              recipient           = account, 
                              subject             = subject,
                              body                = body,
                              body_type           = body_type,
                              num_attachments     = num_attachments,
                              severity            = severity)

  def notify(self, pha, content, document_id=None, app_url=None):
    # make sure that the document belongs to the record
    document = None
    if document_id:
      document = Document.objects.get(id = document_id)
      if document.record != self:
        raise PermissionDenied()

    # go through all of the accounts that need to be notified
    for account in self.get_accounts_to_notify():
      Notification.objects.create(record    = self, 
                                  sender    = pha, 
                                  account   = account, 
                                  content   = content, 
                                  creator   = pha, 
                                  document  = document, 
                                  app_url   = app_url)

  @transaction.commit_on_success
  def create_default_carenets(self):
    for carenet_name in settings.INDIVO_DEFAULT_CARENETS:
      cn = Carenet.objects.get_or_create(name = carenet_name, record = self)

  @property
  def carenet_alias_id(self):
    """
    eventually, a real carenet alias will be created, but for now it's
    the record ID, since it's all UUIDs
    """
    return self.id

class DocumentSchema(Object):
  type = models.CharField(max_length = 500)
  stylesheet = models.ForeignKey('Document', null=True, related_name='stylesheet')
  internal_p = models.BooleanField(default=True)
  
  DEFAULT_REL_NAMESPACE = 'http://indivo.org/vocab/documentrels#'

  @classmethod
  def expand_rel(cls, rel):
    if rel is None:
      return None

    if rel.find(':') > -1 or rel.find('/') > -1:
      return rel
    else:
      return "%s%s" % (cls.DEFAULT_REL_NAMESPACE, rel)
    
  @property
  def uri(self):
    return self.type

  # how does this schema map to simple user-level categories
  # allergy, immunization, lab, surgery, condition, medication
  
  # how this is transformed to RDF (pointer to XSLT)

class Document(Object):
  # SZ: We don't want both record AND pha to both be null
  # SZ: We need to add an integrity check for this... 
  record = models.ForeignKey(Record, related_name='documents', null=True)

  # for lightweight distributed transaction control
  # nullable for those who don't want to consider it
  # this external_id may be formatted as one of the following:
  # - {pha_email}/{pha_local_external_id}
  # - {pha_email}/INTERNAL/{pha_local_external_id}
  # - {pha_email}/NORECORD/{pha_local_external_id}

  # you might think (as Ben did), that this is a useful case:
  # - {record_level_external_id}
  # but it's not. external_ids are always scoped to app.
  external_id = models.CharField(max_length = 250, null = True)

  # a parameter to indicate that a document should never be shared,
  # no matter what. If it is true, then it is never accessible except
  # within the record
  nevershare = models.BooleanField(default=False, null=False)

  @classmethod
  def prepare_external_id(cls, local_external_id, pha, pha_specific=False, record_specific=True):
    """
    This utility method creates a 'full' external_id from parameters depending
    on app specificity and record specifity of the document.

    Eventually, abstracting this within the Document model would be ideal
    """
    if not local_external_id:
      return None

    if not pha:
      raise ValueError("an external ID must be scoped to a PHA, cannot prepare an external ID without a PHA")

    if not pha_specific and not record_specific:
      raise ValueError("requested an external ID with a document neither record-specific nor pha_specific")

    if not record_specific:
      return "%s/NORECORD/%s" % (pha.email, local_external_id)

    if pha_specific:
      return "%s/INTERNAL/%s" % (pha.email, local_external_id)
    else:
      return "%s/%s" % (pha.email, local_external_id)

  # Fully Qualified Toplevel XML Name (i.e. http://indivo.org/vocab/xml/documents#Lab)
  fqn = models.CharField(max_length=255, null = True)

  # mime type
  mime_type = models.CharField(max_length=100, null = True)

  # this might be XMLField eventually
  content = models.TextField(null=True)

  # if it's binary, then it's stored as a file
  # the use of the date is just to prevent too many documents in a single directory
  # eventually this might be done using a storage manager that looks at the UUID and 
  # does even partitioning, rather than just date.
  content_file = models.FileField(upload_to='indivo_documents/%Y/%m/%d')

  # PHA specific document?
  pha = models.ForeignKey('PHA', null=True, related_name = 'pha_document')

  suppressed_at = models.DateTimeField(null=True, blank=True)
  suppressed_by = models.ForeignKey('Principal', null=True)
  original = models.ForeignKey('self', related_name='document_thread', null=True)
  replaced_by = models.ForeignKey('self', related_name='document_replaced', null=True)
  replaces = models.ForeignKey('self', null=True)

  size = models.IntegerField()
  label = models.CharField(max_length=100, null=True)
  digest = models.CharField(max_length=64, null=False)
  status = models.ForeignKey('StatusName', null=False, default=1)

  @property
  def relates_to(self):
    return self.rels_as_doc_0.values('relationship__type').annotate(count=Count('relationship'))

  @property
  def is_related_from(self):
    return self.rels_as_doc_1.values('relationship__type').annotate(count=Count('relationship'))

  #related_docs = models.ManyToManyField('self', through='DocumentRels', symmetrical=False)

  # Ben says: I would like this to be pre-computed if possible, probably at insertion time
  def latest(self, id, created_at, creator_email):
    self.latest_id            = id
    self.latest_created_at    = created_at
    self.latest_creator_email = creator_email

  def set_status(self, principal, status, reason):

    # For more explanation on proxied_by_email and effective_principal_email
    # Please see middlewares/audit.py
    effective_principal_email = principal.effective_principal.email

    if principal.proxied_by:
      proxied_by_email = principal.proxied_by.email
    else:
      proxied_by_email = None

    if status and reason:
      status_name = StatusName.objects.get(name=status)
      self.status = status_name
      self.save()

    # Everytime set_status is called we'll record it in DocumentStatusHistory
    # The status and reason is the new status and new reason
    # not the old status and old reason
    # of the given doc which is 'self'

    # Save document status history
    DocumentStatusHistory.objects.create( document              = self.id,
                                          record                = self.record.id,
                                          status                = status_name,
                                          reason                = reason,
                                          proxied_by_principal  = proxied_by_email,
                                          effective_principal   = effective_principal_email)


  #tags = models.ManyToManyField(RecordTag, null = True, blank=True)

  # [ben] not sure why I can't do Meta = BaseMeta, but I can't
  class Meta:
    app_label = INDIVO_APP_LABEL

    # 2010-08-15 changed to just record and external_id.
    # for non-record pha documents, we are not properly preventing duplication
    # but that's how it has to be for now.
    unique_together = (('record', 'external_id'),)

  def __unicode__(self):
    return "Document %s" % self.id


  # 1/2/2011: Moving Document Processing into the model - DH
  def replace(self, new_content, new_mime_type):
    """
    Replace the content of the current document with new content and mime_type
    """
    if self.replaced_by:
      raise ValueError("cannot replace a document that is already replaced")

    from indivo.document_processing.document_processing import DocumentProcessing
    new_doc = DocumentProcessing(new_content, new_mime_type)
    if not new_doc.is_binary:
      # set content and mime_type
      self.content = new_doc.content
      self.mime_type = new_mime_type
      
      # empty out derived fields so that doc processing will repopulate them
      self.fqn = None
      self.size = None
      self.digest = None

    else:
      # Why aren't we doing anything for binaries?
      pass

    self.processed = False # We have changed the content, which now needs processing
    self.save()
    return True

  processed = models.BooleanField(default=False)

  def save(self, *args, **kwargs):
    """
    Handle document processing whenever a new document is created. This method
    processes the document, updates fact objects, and then saves the document
    """
    if self.processed:
      doc = None # Nothing to do here

    else:
      # import dynamically because DocumentProcessing imports DocumentSchema from this file
      from indivo.document_processing.document_processing import DocumentProcessing
      doc = DocumentProcessing(self.content, self.mime_type)

      # Process the Doc, if necessary
      if not self.pha and self.content:
        doc.process()

      # Delete fact objects from the document we are replacing
      if self.replaces:
        from indivo.models import Fact
        Fact.objects.filter(document = self.replaces).delete()

      # Update document info based on processing
      self.fqn = self.fqn if self.fqn else doc.fqn
      self.size = self.size if self.size else doc.size
      self.digest = self.digest if self.digest else doc.digest

      # Create our content file if we are binary
      cf = None
      if doc.is_binary:
        cf = ContentFile(self.content)
        self.content = None
        
    # Oracle is incompatible with multi-column unique constraints where
    # one column might be null (i.e., UNIQUE(record, external_id)).
    # We therefore insure that all Documents have an external id,
    # mirroring the internal id if none was passed in.
  
    # Set the external_id to a random uuid so that we can save it to the
    # db before it has an internal id
    if not self.external_id:
      self.external_id = 'TEMP-EXTID' + str(uuid.uuid4())

    super(Document,self).save(*args, **kwargs)

    # Will we need to rewrite this to the DB after changes?
    save_again = False

    # Now that we have an id, we can handle any document-processing stuff that requires an id
    if not self.processed:
      
      # save our content file if we were binary, now that we have an id.
      if cf:
        self.content_file.save(self.id, cf, save=False) # Don't force a save now, as we will resave later

      # We can also mark the document we are replacing as replaced by us
      if self.replaces:
        self.replaces.replaced_by = self
        self.replaces.save()

      # Update newly created Fact objs, if we created any
      for fobj in doc.processed_facts:
        if fobj:
          fobj.document = self
          fobj.record = self.record
          fobj.save()

      # Mark document as processed
      self.processed = True
      save_again = True

    # If we set a temporary external_id, set it to mirror the internal id
    if self.external_id.startswith('TEMP-EXTID'):
      self.external_id = self.id
      save_again = True

    # Make sure we point to the original document version
    if not self.original:
      self.original = self
      save_again = True

    if save_again:
      self.save()

########NEW FILE########
__FILENAME__ = shares
"""
Indivo Models for Carenets
"""

import urllib, datetime

from django.db import models
from django.conf import settings

from base import Object, Principal, INDIVO_APP_LABEL

class Carenet(Object):
  name = models.CharField(max_length=40)
  record = models.ForeignKey('Record',          null=False)

  def __unicode__(self):
    return 'Carenet %s' % self.id

  class Meta:
    app_label = INDIVO_APP_LABEL
    unique_together = (("name","record"))

  def add_doc(self, doc):
    """
    add the doc to the carenet
    """
    if doc.record != self.record:
      raise ValueError("document is not in the right record")

    return CarenetDocument.objects.get_or_create(carenet = self, document = doc)[0]

  def remove_doc(self, doc):
    CarenetDocument.objects.filter(carenet=self, document=doc).delete()
    
  def contains_doc(self, doc):
    return len(self.carenetdocument_set.filter(document = doc)) > 0

  @property
  def demographics(self):
    """look at the demographics document and see if it's visible in this carenet"""
    demographics = getattr(self.record, 'demographics')
    if not demographics or not demographics.document:
      return None

    candidate_doc = demographics.document

    # check that it's in this carenet
    if self.contains_doc(candidate_doc):
      return demographics
    else:
      return None

class CarenetDocument(Object):
  carenet   = models.ForeignKey('Carenet',      null=False)
  document  = models.ForeignKey('Document',     null=False)

  # a negative share, where share_p is false, is an exception to an autoshare rule
  share_p   = models.BooleanField(default=True, null=False)

  def __unicode__(self):
    return 'CarenetDocument %s' % self.id

  class Meta:
    app_label = INDIVO_APP_LABEL
    unique_together = (("carenet","document"))

class CarenetPHA(Object):
  carenet = models.ForeignKey('Carenet',        null=False)
  pha     = models.ForeignKey('PHA',            null=False)

  def __unicode__(self):
    return 'CarenetPHA %s' % self.id

  class Meta:
    app_label = INDIVO_APP_LABEL
    unique_together = (("carenet","pha"))

class CarenetAccount(Object):
  carenet = models.ForeignKey('Carenet',        null=False)
  account = models.ForeignKey('Account',        null=False)
  can_write = models.BooleanField(default=False)

  def __unicode__(self):
    return 'CarenetAccount %s' % self.id

  class Meta:
    app_label = INDIVO_APP_LABEL
    unique_together = (("carenet","account"))

class CarenetAutoshare(Object):
  carenet = models.ForeignKey('Carenet',        null=False)
  record  = models.ForeignKey('Record',         null=False)
  type    = models.ForeignKey('DocumentSchema', null=True)

  def __unicode__(self):
    return 'CarenetAutoshare %s' % self.id

  class Meta:
    app_label = INDIVO_APP_LABEL
    unique_together = (("carenet","record","type"))

# SZ: We are no longer using for people
# Ben Adida 2010-12-09: actually, for whole-record share, we are still using this for accounts.
# Daniel Haas 2011-04-01: Breaking apart the two use cases: PHAShare vs. AccountFullShare
class AccountFullShare(Object):
  """
  Sharing a record with an account
  """

  # the record that's being shared
  record = models.ForeignKey('Record', related_name = 'fullshares')
  
  # the account being share with, no longer nullable
  with_account = models.ForeignKey('Account', related_name='fullshares_to')

  # a label for the share. This will probably go away in a future release,
  # but it's important to tag for now the role that various shares have.
  # this is called a "label" because it has no enforcement value
  role_label = models.CharField(max_length = 50, null=True)

  class Meta:
    app_label = INDIVO_APP_LABEL
    unique_together = ('record', 'with_account')

# SZ: We are no longer using for people
# Ben Adida 2010-12-09: actually, for whole-record share, we are still using this for accounts.
# Daniel Haas 2011-04-01: Breaking apart the two use cases: PHAShare vs. AccountFullShare
class PHAShare(Object):
  """
  Sharing a record with a PHA
  """

  # the record that's being shared
  record = models.ForeignKey('Record', related_name = 'pha_shares')

  # the PHA being shared with, no longer nullable
  with_pha = models.ForeignKey('PHA', related_name='pha_shares_to')

  # authorized
  authorized_at = models.DateTimeField(null=True, blank=True)

  # the user who added this share
  # there might not be one if this was primed, thus nullable
  authorized_by = models.ForeignKey('Account', null=True, related_name = 'shares_authorized_by')

  # limited to a particular carenet
  # this is when an app is *strictly* limited to a carenet,
  # not when an app is accessed by a user who happens to be in a carenet for that record.
  carenet = models.ForeignKey('Carenet', null=True)

  class Meta:
    app_label = INDIVO_APP_LABEL
    unique_together = ('record', 'with_pha')
    

  def new_access_token(self, token_str, token_secret, account=None, carenet=None):
    """
    create a new access token based on this share
    
    an account must be specified if the app is not autonomous.

    if the app is autonomous, the specified account should have full access
    over the record, or this will fail.

    if a carenet is specified, then this further limits the token to a specific carenet within the share
    we sanity check that the carenet matches the record of the share.

    an autonomous app should not be limited to a carenet, so specifying a carenet in that case should fail.
    """

    if carenet and carenet.record != self.record:
      raise Exception("bad carenet")


    access_token_params = {
      'token' : token_str,
      'token_secret' : token_secret,
      'share' : self,
      'carenet' : carenet
      }

    if self.with_pha.is_autonomous:
      if account:
        if not self.record.can_admin(account):
          raise Exception("an autonomous app can only be accessed by an account with full access to the record.")

        # we don't record the account for autonomous apps at this point
      if carenet:
        raise Exception("carenet should not be specified for autonomous apps")

      access_token_params['expires_at'] = None
    else:
      if account:
        # if no account with non-autonomous app, this
        # is certainly a case of app-priming. In this case,
        # we return a short-lived token with no account
        # specified, since we may not have an account to specify yet!
        access_token_params['account'] = account

      # FIXME: parameterize length of token validity
      access_token_params['expires_at'] = datetime.datetime.utcnow() + datetime.timedelta(minutes = 30)

    return AccessToken.objects.create(**access_token_params)

class Token(object):
  """
  Some common features of access and request tokens
  """

  def __str__(self):
    vars = {'oauth_token' : self.token, 'oauth_token_secret' : self.token_secret}
    if self.share and not self.carenet:
      vars['xoauth_indivo_record_id'] = self.share.record.id
      ## DISABLED FOR NOW
      # vars['xoauth_indivo_carenet_id'] = self.share.record.carenet_alias_id
    if self.carenet:
      vars['xoauth_indivo_carenet_id'] = self.carenet.id
    return urllib.urlencode(vars)

  @property
  def secret(self):
    return self.token_secret

  to_string = __str__
  

class AccessToken(Principal, Token):
  # the token, secret, and PHA this corresponds to
  token = models.CharField(max_length=40)
  token_secret = models.CharField(max_length=60)

  # derived from a share
  share = models.ForeignKey('PHAShare')

  # who is this token on behalf of? Might be nulls here.
  # when this is carenet-limited, the account scopes permissions
  # appropriately. 
  account = models.ForeignKey('Account', null = True)

  # this might seem redundant, given that we have share+account,
  # but it is
  # (a) cleaner to know immediately a carenet restriction, and
  # (b) conceivable that a user could be in two carenets for 
  #     the same record, and thus the rights of this access token
  #     would be ambiguous. Let's be extra explicit.
  # plus this makes permission checking a lot more natural
  carenet = models.ForeignKey('Carenet', null = True)

  # if null, it never expires, so BE CAREFUL
  expires_at = models.DateTimeField(null = True)

  # is this token being used for connect-style auth?
  connect_auth_p = models.BooleanField(default=False)

  # make sure email is set 
  def save(self, *args, **kwargs):
    self.email = "%s@accesstokens.indivo.org" % self.token
    super(AccessToken,self).save(*args, **kwargs)
  
  @property
  def effective_principal(self):
    # is it a session for the account?
    if self.account:
      return self.account
    else:
      return self.share.with_pha

  @property
  def proxied_by(self):
    if self.account:
      return self.share.with_pha
    else:
      return None

  # Accesscontrol:
  # roles that an accesstoken could have
  def isProxiedByApp(self, app):
    """
    Only true if the AccessToken is an account coming in via a PHA
    """
    return self.proxied_by == app

  def scopedToRecord(self, record):
    """
    True if the AccessToken is bound to the whole record, not a carenet
    """
    try:
      return self.share.record == record and not self.carenet
    except:
      return False

  def isInCarenet(self, carenet):
    """
    True if the AccessToken is bound to the carenet
    """
    try:
      return self.carenet == carenet
    except:
      return False

class ReqToken(Principal, Token):
  token = models.CharField(max_length=40)
  token_secret = models.CharField(max_length=60)
  verifier = models.CharField(max_length=60)
  oauth_callback = models.CharField(max_length=500, null=True)

  pha = models.ForeignKey('PHA')

  # record or carenet
  record = models.ForeignKey('Record', null=True)
  carenet = models.ForeignKey('Carenet', null=True)

  # when authorized
  authorized_at = models.DateTimeField(null=True)

  # authorized by can be used to bind the request token first, before the authorized_at is set.
  authorized_by = models.ForeignKey('Account', null = True)

  # the share that this results in
  share = models.ForeignKey('PHAShare', null=True)

  # is this request token for offline access?
  # REMOVED 2010-07-27, since now the apps contain the indication of autonomy
  # NOT the tokens
  # offline_capable = models.BooleanField(default = False)

  # make sure email is set 
  def save(self, *args, **kwargs):
    self.email = "%s@requesttokens.indivo.org" % self.token
    super(ReqToken,self).save(*args, **kwargs)
  
  @property
  def effective_principal(self):
    """
    a request token's identity is really the PHA it comes from.
    """
    return self.pha
  
  # Accesscontrol:
  # Request tokens do not implement any roles, as they
  # are unrelated to the data

  @property
  def authorized(self):
    # only look for authorized_at, because sometimes 
    # it's primed, and not authorized by a particular user
    return self.authorized_at != None




########NEW FILE########
__FILENAME__ = status
"""
Indivo Models for Document Status
"""

from django.db import models
from django.conf import settings

from base import BaseModel, Object

class StatusName(BaseModel):
  name = models.CharField(max_length=24)

  def __unicode__(self):
    return 'StatusName %s' % self.id

class DocumentStatusHistory(Object):
  status = models.ForeignKey('StatusName', null=False)
  reason = models.TextField()
  document = models.CharField(max_length=64, null=True)
  record = models.CharField(max_length=64, null=True)
  proxied_by_principal = models.CharField(max_length=255, null=True)
  effective_principal = models.CharField(max_length=255, null=True)

  def __unicode__(self):
    return 'DocumentStatusHistory %s' % self.id

########NEW FILE########
__FILENAME__ = transform
from indivo.document_processing import BaseTransform

INDIVO_DOC_NS = "{http://indivo.org/vocab/xml/documents#}"

class Transform(BaseTransform):

    def to_sdmx(self, doc_etree):

        # We already have SDMX, but it came in with
        # the indivo namespace, so we need to strip the NS
        for el in doc_etree.iter(tag="%s*"%INDIVO_DOC_NS):
            el.tag = el.tag.replace(INDIVO_DOC_NS, '')
        return doc_etree

########NEW FILE########
__FILENAME__ = validate
"""
A utility to validate multiple example XML docs against a schema

Daniel Haas
daniel.haas@childrens.harvard.edu
2012-03-02

python validate.py schema_dir_1 schema_dir_2 ... -vVerbosity
OR
python validate.py # Validates everything

"""

import sys, os
from lxml import etree
import glob

DEFAULT_SCHEMA_DIRS = [
    '../metadata',
    '../data/core',
    '../data/contrib',
    '../data/output',
]

def discover_schemas(schema_dirs):
    ret = []
    for schema_dir in schema_dirs:
        full_path = os.path.join(os.path.abspath(os.path.dirname(__file__)), schema_dir)
        for entry in os.listdir(full_path):
            schema_path = os.path.join(full_path, entry)
            if os.path.isdir(schema_path) and glob.glob(os.path.join(schema_path, '*.xsd')):
                ret.append(schema_path)
    
    return ret

def get_examples(schema_dir):
    return glob.glob(os.path.join(schema_dir, '*.xml'))

def get_xsd(schema_dir):
    try:
        return glob.glob(os.path.join(schema_dir, '*.xsd'))[0]
    except IndexError:
        raise ValueError('Schema directory %s doesn\'t contain a valid XSD file'%schema_dir)

def validate_docs(xsd_path, xml_paths, verbose=1):
    with open(xsd_path, "r") as schema_file:
        schema = etree.XMLSchema(etree.parse(schema_file))

    for xml_path in xml_paths:
        with open(xml_path, "r") as xml_file:
            doc = etree.parse(xml_file)
        
        output = 'Validating %s against %s...      '%(xml_path, xsd_path)
        if schema.validate(doc):
            output += "ok"
        else:
            log = schema.error_log
            error = log.last_error
            output += str(error)
        
        if verbose:
            print output

if __name__ == '__main__':
    schema_paths = []
    verbose = 1
    for arg in sys.argv[1:]:
        if arg.startswith('-v'):
            verbose = int(arg[2:])
        else:
            schema_paths.append(arg)
    
    if not schema_paths:
        schema_paths = discover_schemas(DEFAULT_SCHEMA_DIRS)

    for schema_path in schema_paths:
        xsd_path = get_xsd(schema_path)
        xml_paths = get_examples(schema_path)
        validate_docs(xsd_path, xml_paths, verbose)

########NEW FILE########
__FILENAME__ = base
"""
Module for abstract serializer base classes.

Differentiated from the Django base serializer by allowing implementing
serializers to process nested objects.  Recursion is prevented by keeping
track of visited objects, and results in repeated objects being skipped after
their first appearance

"""

from StringIO import StringIO

from django.db import models
from django.core.serializers import base
from django.db.models.fields.related import OneToOneField, ManyToOneRel, OneToOneRel

class SerializationRecursionError(Exception):
    """Object encountered twice during serialization"""
    pass

class Serializer(base.Serializer):
    """
    Abstract serializer base class.
    """

    # Indicates if the implemented serializer is only available for
    # internal Django use.
    internal_use_only = False

    def serialize(self, queryset, **options):
        """
        Serialize a queryset.
        """
        self.options = options

        self.stream = options.get("stream", StringIO())
        self.selected_fields = options.get("fields")
        self.seen = options.get("seen", set([]))
        self.start_serialization()
        self.process_objects(queryset)
        self.end_serialization()
        return self.getvalue()

    def process_objects(self, objects):
        for obj in objects:
            try:
                self.process_object(obj)
            except SerializationRecursionError:
                # do not process objects we have already seen
                pass
            
    def process_object(self, obj):
        # avoid recursive serialization
        if obj.pk in self.seen:
            raise SerializationRecursionError()
        self.seen.add(obj.pk)
        
        self.start_object(obj)
        for field in obj._meta.local_fields:
            if field.serialize:
                if field.rel is None:
                    if self.selected_fields is None or field.attname in self.selected_fields:
                        self.handle_field(obj, field)
                else:
                    if (not isinstance(field.rel, ManyToOneRel) or isinstance(field.rel, OneToOneRel)) and (self.selected_fields is None or field.attname[:-3] in self.selected_fields):
                        self.handle_fk_field(obj, field)
        for relatedObject in obj._meta.get_all_related_objects():
            # don't follow back links for One to One relationships, they will
            # show up in local_fields and be handled there.
            if not isinstance(relatedObject.field, OneToOneField):
                self.handle_o2m_field(obj, relatedObject.get_accessor_name())
        for field in obj._meta.many_to_many:
            if field.serialize:
                if self.selected_fields is None or field.attname in self.selected_fields:
                    self.handle_m2m_field(obj, field)
        self.end_object(obj)    
            
    def handle_o2m_field(self, obj, current, field_name):
        """
        Called to handle a OneToMany field.
        """
        raise NotImplementedError
            
class Deserializer(object):
    """
    Deserialization is not supported
    """

    def __init__(self, stream_or_string, **options):
        raise NotImplementedError

    def __iter__(self):
        raise NotImplementedError


class DeserializedObject(object):
    """
    Deserialization is not currently supported
    """

    def __init__(self, obj, m2m_data=None):
        raise NotImplementedError

    def __repr__(self):
        raise NotImplementedError

    def save(self, save_m2m=True):
        raise NotImplementedError

########NEW FILE########
__FILENAME__ = datamodel_hooks
ATTACHABLE_ATTRS = ['to_rdf', 'to_xml', 'to_json',]

class DataModelSerializers(object):
    """ Abstract base class for defining serializers that should be attached to a data model class.
    
    Serializers will override the default implementations. Subclasses should define any of three methods:

    * ``to_rdf(queryset, result_count, record=None, carenet=None)``: takes a queryset, and formats it as valid 
      `RDF/XML <http://www.w3.org/TR/rdf-syntax-grammar/>`_ string.

    * ``to_xml(queryset, result_count, record=None, carenet=None)``: takes a queryset, and formats it as a valid 
      `XML <http://www.w3.org/TR/xml11/>`_ string.

    * ``to_json(queryset, result_count, record=None, carenet=None)``: takes a queryset, and formats it as a valid 
      `JSON <http://www.json.org/>`_ string.

    In order to be called, the methods must be attached to that data model class by calling the 
    ``attach_to_data_model()`` method.

    """

    @classmethod
    def attach_to_data_model(cls, data_model_cls):
        """ Add all of the defined methods as classmethods on ``data_model_cls``. """
        
        for attr_name in ATTACHABLE_ATTRS:
            attr_val = getattr(cls, attr_name, None)
            if attr_val:
                # unbind the method from our class
                unbound_func = attr_val.__func__

                # Wrap it as a classmethod
                cm = classmethod(lambda cls, *args, **kwargs: unbound_func(*args, **kwargs))

                # And bind it to our data model
                setattr(data_model_cls, attr_name, cm)

########NEW FILE########
__FILENAME__ = json
"""
Indivo JSON Serializer

"""

import datetime
from indivo.lib.iso8601 import format_utc_date
from indivo.serializers.python import Serializer as IndivoPythonSerializer
from django.utils import simplejson

try:
    import decimal
except ImportError:
    from django.utils import _decimal as decimal    # Python 2.3 fallback

class Serializer(IndivoPythonSerializer):
    """
    Convert a queryset to JSON.
    """
    internal_use_only = False

    def end_serialization(self):
        self.options.pop('stream', None)
        self.options.pop('fields', None)
        simplejson.dump(self.objects, self.stream, cls=IndivoJSONEncoder, **self.options)

    def getvalue(self):
        if callable(getattr(self.stream, 'getvalue', None)):
            return self.stream.getvalue()

class IndivoJSONEncoder(simplejson.JSONEncoder):
    """
    Encodes datetime/date/time as ISO8601
    """

    def default(self, o):
        if isinstance(o, datetime.datetime) or isinstance(o, datetime.time):
            return format_utc_date(o)
        elif isinstance(o, datetime.date):
            return format_utc_date(o, date_only=True) 
        else:
            return super(IndivoJSONEncoder, self).default(o)
########NEW FILE########
__FILENAME__ = python
"""
Indivo Python Serializer

"""

from django.db import models
from django.utils.encoding import smart_unicode, is_protected_type

from indivo.serializers import base

class Serializer(base.Serializer):
    """
    Serializes a QuerySet to basic Python objects.
    - Parses foreign key and many-to-many fields into nested objects
    - Output mirrors Indivo SDML format
    
    """

    internal_use_only = True

    def start_serialization(self):
        self._current = None
        self.objects = []

    def end_serialization(self):
        pass

    def start_object(self, obj):
        self._current = {}

    def end_object(self, obj):
        self._current["__modelname__"] = smart_unicode(obj.__class__.__name__)
        self._current["__documentid__"] = getattr(obj, 'document_id')
        self.objects.append(self._current)
        self._current = None

    def handle_field(self, obj, field):
        value = field._get_val_from_obj(obj)
        # Protected types (i.e., primitives like None, numbers, dates,
        # and Decimals) are passed through as is. All other values are
        # converted to string first.
        if is_protected_type(value):
            self._current[field.name] = value
        else:
            self._current[field.name] = field.value_to_string(obj)

    def handle_fk_field(self, obj, field):
        related = getattr(obj, field.name)
        if related is not None:
            new_serializer = Serializer()
            self.options.update({'seen': self.seen})
            related = new_serializer.serialize([related], **self.options)
            # fk field should serialize as a single element list
            self._current[field.name] = (related[0] if related else None)

    def handle_m2m_field(self, obj, field):
        if field.creates_table:
            related = getattr(obj, field.name)
            new_serializer = Serializer()
            self.options.update({'seen': self.seen})
            self._current[field.name] = new_serializer.serialize(related.iterator(), **self.options)

    def handle_o2m_field(self, obj, field_name):
        related_manager = getattr(obj, field_name)
        related = related_manager.all()
        new_serializer = Serializer()
        self.options.update({'seen': self.seen})
        parsed_results = new_serializer.serialize(related.iterator(), **self.options)
        self._current[field_name] = parsed_results 

    def getvalue(self):
        return self.objects

def Deserializer(object_list, **options):
    """
    Deserialization is not currently supported
    
    """
    raise NotImplementedError

########NEW FILE########
__FILENAME__ = xml_serializer
"""
Indivo custom XML serializer
"""
import datetime
from lxml import etree

from django.conf import settings
from django.db import models
from django.utils.encoding import smart_unicode

from indivo.lib.iso8601 import format_utc_date
from indivo.serializers import base

class Serializer(base.Serializer):
    """
    Serializes a QuerySet to XML.  Foreign Key and Many-to-Many fields are 
    processed as sub-objects. 
    
    """

    def start_serialization(self):
        """
        Start serialization
        """
        self.root = etree.Element("Models")
        self._current = None

    def end_serialization(self):
        """
        End serialization -- end the document.
        """
        pass

    def start_object(self, obj):
        """
        Called as each object is handled.
        """
        if not hasattr(obj, "_meta"):
            raise base.SerializationError("Non-model object (%s) encountered during serialization" % type(obj))

        self.current = etree.Element("Model", 
                                     name = smart_unicode(obj.__class__.__name__),
                                     documentId = getattr(obj, 'document_id'))
        self.root.append(self.current)
        

    def end_object(self, obj):
        """
        Called after handling all fields for an object.
        """
        pass

    def handle_field(self, obj, field):
        """
        Called to handle each field on an object (except for ForeignKeys and
        ManyToManyFields)
        """
        field_element = etree.Element("Field", name=field.name)

        # Get a "string version" of the object's data.
        if getattr(obj, field.name) is not None:
            value = field._get_val_from_obj(obj)
            if isinstance(value, datetime.datetime) or isinstance(value, datetime.time):
                value = format_utc_date(value)
            elif isinstance(value, datetime.date):
                value = format_utc_date(value, date_only=True)
            elif isinstance(value, bool):
                value = 'true' if value else 'false'
            else:
                 value = field.value_to_string(obj)
            field_element.text = value
        
        self.current.append(field_element)

    def handle_fk_field(self, obj, field):
        """
        Called to handle a ForeignKey (we need to treat them slightly
        differently from regular fields).
        """
        field_element = etree.Element("Field", name=field.name)
        related = getattr(obj, field.name)
        if related is not None:
            new_serializer = Serializer()
            self.options.update({'seen': self.seen})
            parsed_results = new_serializer.serialize([related], **self.options)
        else:
            return

        if len(parsed_results) > 0:
            # attach the first Model of the results
            field_element.append(parsed_results[0])
        
        self.current.append(field_element)

    def handle_m2m_field(self, obj, field):
        """
        Called to handle a ManyToManyField. 
        """
        field_element = etree.Element("Field", name=field.name)
        
        if field.creates_table:
            new_serializer = Serializer()
            self.options.update({'seen': self.seen})
            parsed_results = new_serializer.serialize(related, **self.options)
        
        if len(parsed_results) > 0:
            # attach the returned Models
            field_element.append(parsed_results)
            
        self.current.append(field_element)

    def handle_o2m_field(self, obj, field_name):
        field_element = etree.Element("Field", name=field_name)
        
        related_manager = getattr(obj, field_name)
        related = related_manager.all()
        new_serializer = Serializer()
        self.options.update({'seen': self.seen})
        parsed_results = new_serializer.serialize(related.iterator(), **self.options)
        
        if len(parsed_results) > 0:
            # attach the returned Models
            field_element.append(parsed_results)
            
        self.current.append(field_element) 

    def getvalue(self):
        return self.root

class Deserializer(base.Deserializer):
    """
    Deserialization is not currently supported
    """

    def __init__(self, stream_or_string, **options):
        raise NotImplementedError

########NEW FILE########
__FILENAME__ = template_utils
import time
from django import template
from django.http import HttpResponse
from django.template import Context, loader
from django.template.defaultfilters import stringfilter
from indivo.models import Document
from indivo.lib import iso8601
from indivo.views.documents.document import _set_doc_latest

register = template.Library()

# this used to be a string filter, but that forces us to check silly things like the STRING "None",
# so instead this is just a normal filter, and it returns the empty string if it's null
@register.filter
def check_empty(value):
  if value == None:
    return ''
  else:
    return value
check_empty.is_safe = True

# this is definitely not a string filter, it should be a real timestamp
@register.filter
def format_iso8601_datetime(timestamp):
  if timestamp:
    return iso8601.format_utc_date(timestamp)
  else:
    return ""
format_iso8601_datetime.is_safe = True

@register.filter
def format_iso8601_date(timestamp):
  if timestamp:
    return iso8601.format_utc_date(timestamp, date_only = True)
  else:
    return ""
format_iso8601_date.is_safe = True

########NEW FILE########
__FILENAME__ = accounts_tests
from indivo.models import *
from indivo.tests.internal_tests import InternalTests, TransactionInternalTests
from django.utils.http import urlencode
from django.conf import settings
from indivo.tests.data import *

from lxml import etree
from indivo.lib import iso8601

def accountStateSetUp(test_cases_instance):
    _self = test_cases_instance
    super(_self.__class__, _self).setUp()

    # create an account
    _self.account = _self.createAccount(TEST_ACCOUNTS, 4)

    # create a record for the account
    _self.record = _self.createRecord(TEST_RECORDS, 0, owner=_self.account)

    # create a message, with an attachment
    _self.message = _self.createMessage(TEST_MESSAGES, 2, about_record=_self.record, account=_self.account,
                                        sender=_self.account, recipient=_self.account)
    _self.attachment = _self.createAttachment(TEST_ATTACHMENTS, 0, attachment_num=1, message=_self.message)

    # Create an app, and add it to the record
    _self.pha = _self.createUserApp(TEST_USERAPPS, 0)
    _self.addAppToRecord(record=_self.record, with_pha=_self.pha)

class TransactionAccountInternalTests(TransactionInternalTests):
    
    def setUp(self):
        return accountStateSetUp(self)
    
    def tearDown(self):
        super(TransactionAccountInternalTests,self).tearDown()

    def test_duplicate_message_ids(self):
        msg = TEST_MESSAGES[0]
        data = {'message_id': msg['message_id'],
                'body':msg['body'],
                'severity':msg['severity'],
                }

        # Send a message
        response = self.client.post('/accounts/%s/inbox/'%(self.account.email), 
                                    urlencode(data),'application/x-www-form-urlencoded')
        self.assertEquals(response.status_code, 200)

        # Send it again, with the same message_id. Should break
        response = self.client.post('/accounts/%s/inbox/'%(self.account.email), 
                                    urlencode(data),'application/x-www-form-urlencoded')
        self.assertEquals(response.status_code, 400)


class AccountInternalTests(InternalTests):  

    def setUp(self):
        return accountStateSetUp(self)

    def tearDown(self):
        super(AccountInternalTests,self).tearDown()

    def test_forgot_password(self):
        url = '/accounts/%s/forgot-password'%(self.account.email)

        bad_methods = ['get', 'put', 'delete']
        self.check_unsupported_http_methods(bad_methods, url)

        response = self.client.post(url)
        self.assertEquals(response.status_code, 200)

    def test_create_accounts(self):
        # check invalid email address
        email = "mybadmail2@mail.ma@"
        contact_email = "mymail2@mail.ma"
        response = self.client.post('/accounts/', urlencode({'account_id' : email,'full_name':'fl','contact_email':contact_email,'password':'pass','primary_secret_p':'primaryp','secondary_secret_p':'secondaryp'}),'application/x-www-form-urlencoded')
        self.assertEquals(response.status_code, 400)
        
        # check invalid contact email address 
        email = "mymail2@mail.ma"
        contact_email = "mybadmail2"
        response = self.client.post('/accounts/', urlencode({'account_id' : email,'full_name':'fl','contact_email':contact_email,'password':'pass','primary_secret_p':'primaryp','secondary_secret_p':'secondaryp'}),'application/x-www-form-urlencoded')
        self.assertEquals(response.status_code, 400)
        
        # valid email and contact addresses
        # Make sure DEMO_MODE = False works as expected
        prev_num_accounts = Account.objects.all().count()
        demo_mode = settings.DEMO_MODE
        settings.DEMO_MODE = False
        contact_email = "mymail2@mail.ma"

        # create an Account, normally: should be no records
        response = self.client.post('/accounts/', urlencode({'account_id' : email,'full_name':'fl','contact_email':contact_email,'password':'pass','primary_secret_p':'primaryp','secondary_secret_p':'secondaryp'}),'application/x-www-form-urlencoded')
        self.assertEquals(response.status_code, 200)        
        self.assertEqual(Account.objects.all().count(), prev_num_accounts+1)
        new_acct = Account.objects.get(email=email)
        self.assertEqual(list(new_acct.records_owned_by.all()), [])

        settings.DEMO_MODE = demo_mode

    def test_create_accounts_demo_mode(self):
        email = "mymail2@mail.ma"
        prev_num_accounts = Account.objects.all().count()

        # backup demo settings
        demo_mode = settings.DEMO_MODE
        demo_profiles = settings.DEMO_PROFILES
        data_dir = settings.SAMPLE_DATA_DIR

        # activate demo mode
        settings.DEMO_MODE = True
        settings.DEMO_PROFILES = { 'John Doe':'patient_1', 'John Doe 2':'patient_1',}
        settings.SAMPLE_DATA_DIR = settings.APP_HOME + '/indivo/tests/data/sample'

        # create an Account in demo mode: should see some populated records
        response = self.client.post('/accounts/', urlencode({'account_id':email, 'full_name':'fl','contact_email':'contactemail@me.com','password':'pass','primary_secret_p':'1','secondary_secret_p':'1'}), 'application/x-www-form-urlencoded')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(Account.objects.all().count(), prev_num_accounts+1)
        new_acct = Account.objects.get(email=email)
        recs = new_acct.records_owned_by.all()
        self.assertEqual(recs.count(), 2)
        self.assertEqual(set([r.label for r in recs]), set(['John Doe', 'John Doe 2']))
        for r in recs:
            self.assertNotEqual(Document.objects.filter(record=r).count(), 0)

        # restore demo settings
        settings.DEMO_MODE = demo_mode
        settings.DEMO_PROFILES = demo_profiles
        settings.SAMPLE_DATA_DIR = data_dir
        
    def test_change_password(self):
        response = self.client.post('/accounts/%s/authsystems/password/change'%(self.account.email), urlencode({'old':TEST_ACCOUNTS[4]['password'],'new':"newpassword"}),'application/x-www-form-urlencoded')
        self.assertEquals(response.status_code, 200)
        
    def test_set_password(self): 
        response = self.client.post('/accounts/%s/authsystems/password/set'%(self.account.email), urlencode({'password':'newpassword'}),'application/x-www-form-urlencoded')
        self.assertEquals(response.status_code, 200)

    def test_set_username(self):
        response = self.client.post('/accounts/%s/authsystems/password/set-username'%(self.account.email), urlencode({'username':'newusername'}),'application/x-www-form-urlencoded')
        self.assertEquals(response.status_code, 200)

    def test_add_authsystem_to_accnt(self):
        response = self.client.post('/accounts/%s/authsystems/password/set'%(self.account.email), urlencode({'username':'someuser','password':'somepassword','system':'mychildrens'}),'application/x-www-form-urlencoded')
        self.assertEquals(response.status_code, 200)        

    def test_check_secret(self):
        response = self.client.get('/accounts/%s/check-secrets/%s?secondary_secret=%s'%(self.account.email,self.account.primary_secret,self.account.secondary_secret))
        self.assertEquals(response.status_code, 200)

    def test_get_accountinfo(self):
        response = self.client.get('/accounts/%s'%(self.account.email))
        self.assertEquals(response.status_code, 200)    


    def test_add_archive(self):    
        response = self.client.post('/accounts/%s/inbox/%s/archive'%(self.account.email,self.message.id))
        self.assertEquals(response.status_code, 200)        

    def test_accept_attachment(self):
        response = self.client.post('/accounts/%s/inbox/%s/attachments/%s/accept'%(self.account.email,self.message.id,self.attachment.attachment_num))
        self.assertEquals(response.status_code, 200)

    def test_get_message(self):
        response = self.client.get('/accounts/%s/inbox/%s'%(self.account.email,self.message.id))
        self.assertEquals(response.status_code, 200)    

        # Insure that dates are in the proper format
        xml = etree.fromstring(response.content)
        received_at = xml.findtext('received_at')
        self.assertNotRaises(ValueError, self.validateIso8601, received_at)

        read_at = xml.findtext('read_at')
        self.assertNotRaises(ValueError, self.validateIso8601, read_at)

        archived_at = xml.findtext('archived_at')
        self.assertNotRaises(ValueError, self.validateIso8601, archived_at)

        # We should have gotten one attachemnt.
        # Insure that we got didn't get a doc id, as the doc wasn't saved
        attachments = xml.findall('attachment')
        self.assertEqual(len(attachments), 1)
        attachment_doc_id = attachments[0].get('doc_id')
        self.assertEqual(attachment_doc_id, None)

        # Now save the document and try again
        # We should get a doc id
        self.attachment.save_as_document(self.account)
        response = self.client.get('/accounts/%s/inbox/%s'%(self.account.email, self.message.id))
        self.assertEquals(response.status_code, 200)
        xml = etree.fromstring(response.content)
        attachment = xml.find('attachment')
        attachment_doc_id = attachment.get('doc_id')
        self.assertNotEqual(attachment_doc_id, None)

    def test_get_inbox(self):
        response = self.client.get('/accounts/%s/inbox/'%(self.account.email))
        self.assertEquals(response.status_code, 200)    

        # Insure that dates are in the proper format
        messages = etree.fromstring(response.content)
        for message in messages.iterfind('Message'):
            received_at = message.findtext('received_at')
            self.assertNotRaises(ValueError, self.validateIso8601, received_at)

            read_at = message.findtext('read_at')
            self.assertNotRaises(ValueError, self.validateIso8601, read_at)

            archived_at = message.findtext('archived_at')
            self.assertNotRaises(ValueError, self.validateIso8601, archived_at)

    def test_send_message_to_account(self):
        msg = TEST_MESSAGES[0]
        data = {'message_id': msg['message_id'],
                'subject':msg['subject'],
                'body':msg['body'],
                'body_type':'markdown',
                'severity':msg['severity'],
                }
        response = self.client.post('/accounts/%s/inbox/'%(self.account.email), urlencode(data),'application/x-www-form-urlencoded')
        self.assertEquals(response.status_code, 200)
        root = etree.XML(response.content)
        # check returned data
        message_id = root.get('id')
        self.assertTrue(message_id is not None and len(message_id) > 0, "Did not find message ID")
        subject = root.find('subject').text
        self.assertEqual(subject, msg['subject'], "subjects do not match")
        severity = root.find('severity').text
        self.assertEqual(severity, msg['severity'], "subjects do not match")

    def test_update_account_info(self):
        response = self.client.post('/accounts/%s/info-set'%(self.account.email), urlencode({'contact_email':self.account.contact_email,'full_name':self.account.full_name}),'application/x-www-form-urlencoded')
        self.assertEquals(response.status_code, 200)

    def test_init_account(self):
        new_acct = self.createUninitializedAccount(TEST_ACCOUNTS, 0)
        url = '/accounts/%s/initialize/%s'%(new_acct.email,new_acct.primary_secret)
        response = self.client.post(url, urlencode({'secondary_secret':new_acct.secondary_secret}), 'application/x-www-form-urlencoded')
        self.assertEquals(response.status_code, 200)

    def test_get_notifications(self):
        response = self.client.get('/accounts/%s/notifications/'%(self.account.email))
        self.assertEquals(response.status_code, 200)    

        # Insure that dates are in the proper format
        notifications = etree.fromstring(response.content)
        for n in notifications.iterfind('Notification'):
            received_at = n.findtext('received_at')
            self.assertNotRaises(ValueError, self.validateIso8601, received_at)
        
    def test_get_permissions(self):
        response = self.client.get('/accounts/%s/permissions/'%(self.account.email))
        self.assertEquals(response.status_code, 200)

    def test_get_primary_secret(self):
        response = self.client.get('/accounts/%s/primary-secret'%(self.account.email))
        self.assertEquals(response.status_code, 200)

    def test_get_records(self):
        response = self.client.get('/accounts/%s/records/?status=active'%(self.account.email))
        self.assertEquals(response.status_code, 200)

    def test_account_reset(self):
        url = '/accounts/%s/reset'%(self.account.email)

        bad_methods = ['get', 'put', 'delete']
        self.check_unsupported_http_methods(bad_methods, url)

        response = self.client.post(url)
        self.assertEquals(response.status_code, 200)

    def test_get_secret(self):
        response = self.client.get('/accounts/%s/secret'%(self.account.email))
        self.assertEquals(response.status_code, 200)

    def test_resend_secret(self):
        url = '/accounts/%s/secret-resend'%(self.account.email)

        bad_methods = ['get', 'put', 'delete']
        self.check_unsupported_http_methods(bad_methods, url)
        
        response = self.client.post(url)
        self.assertEquals(response.status_code, 200)

    def test_set_account_state(self):
        response = self.client.post('/accounts/%s/set-state'%(self.account.email), urlencode({'state':'active'}), 'application/x-www-form-urlencoded')
        self.assertEquals(response.status_code, 200)

    def test_account_search(self):
        url = '/accounts/search?'

        # We should have only our own account in the system
        self.assertEqual(Account.objects.all().count(), 1)

        # Create one more, with customized search fields
        search_account = self.createAccount(TEST_ACCOUNTS, 3, 
                                            fullname='test fullname', 
                                            contact_email='test@contact.com')

        # run a search for the existing account by name
        response = self.client.get(url + 'fullname=%s'%(self.account.full_name))
        self.assertEquals(response.status_code, 200)

        # Make sure the results were as expected
        results = etree.XML(response.content).findall('Account')
        self.assertEqual(len(results), 1)
        self.assertEqual(results[0].get('id'), self.account.email)

        # run a search for the existing account by contact email
        response = self.client.get(url + 'contact_email=%s'%(self.account.contact_email))
        self.assertEquals(response.status_code, 200)

        # Make sure the results were as expected
        results = etree.XML(response.content).findall('Account')
        self.assertEqual(len(results), 1)
        self.assertEqual(results[0].get('id'), self.account.email)
        
        # run a search for the existing account by partial name
        response = self.client.get(url + 'fullname=%s'%(self.account.full_name[:-3]))
        self.assertEquals(response.status_code, 200)

        # Make sure the results were as expected
        results = etree.XML(response.content).findall('Account')
        self.assertEqual(len(results), 1)
        self.assertEqual(results[0].get('id'), self.account.email)

        # run a search for the existing account, passing a bogus contact email
        response = self.client.get(url + 'fullname=%s&contact_email=%s'%(self.account.full_name,
                                                                         'DEADBEEF'))
        self.assertEquals(response.status_code, 200)

        # Make sure the results were as expected
        results = etree.XML(response.content).findall('Account')
        self.assertEqual(len(results), 1)
        self.assertEqual(results[0].get('id'), self.account.email)

        # run a search that should return nothing
        response = self.client.get(url + 'fullname=DEADBEEF&contact_email=DEADBEEF')
        self.assertEqual(response.status_code, 200)
        
        # Check the results
        results = etree.XML(response.content).findall('Account')
        self.assertEqual(len(results), 0)

        # run a search that should return both
        response = self.client.get(url + 'contact_email=contact')
        self.assertEqual(response.status_code, 200)
        
        # Check the results
        results = etree.XML(response.content).findall('Account')
        self.assertEqual(len(results), 2)
        self.assertEqual(set([r.get('id') for r in results]), 
                         set([self.account.email, search_account.email]))
        
    def test_get_connect_credentials(self):

        # Test a valid call
        url = '/accounts/%s/apps/%s/connect_credentials'%(self.account.email, self.pha.email)
        data = {'record_id': self.record.id}
        response = self.client.post(url, data=urlencode(data), content_type='application/x-www-form-urlencoded')
        self.assertEqual(response.status_code, 200)
        
        data = etree.XML(response.content)
        self.assertEqual(self.pha.email, data.find('App').get('id', None))
        self.assertEqual(settings.SITE_URL_PREFIX, data.findtext('APIBase'))

        ct = data.findtext('ConnectToken')
        cs = data.findtext('ConnectSecret')
        self.assertNotRaises(Exception, AccessToken.objects.get, token=ct, token_secret=cs, connect_auth_p=True)

        rt = data.findtext('RESTToken')
        rs = data.findtext('RESTSecret')
        self.assertNotRaises(Exception, AccessToken.objects.get, token=rt, token_secret=rs, connect_auth_p=False)

        db_rt = AccessToken.objects.get(token=rt)
        self.assertEqual(db_rt.expires_at, iso8601.parse_utc_date(data.findtext('ExpiresAt')))

        # Get a 404 for invalid accounts, apps, and records
        url = '/accounts/%s/apps/%s/connect_credentials'%('BOGUS_ACCOUNT', self.pha.email)
        data = {'record_id': self.record.id}
        response = self.client.post(url, data=urlencode(data), content_type='application/x-www-form-urlencoded')
        self.assertEqual(response.status_code, 404)

        url = '/accounts/%s/apps/%s/connect_credentials'%(self.account.email, 'BOGUS_APP')
        data = {'record_id': self.record.id}
        response = self.client.post(url, data=urlencode(data), content_type='application/x-www-form-urlencoded')
        self.assertEqual(response.status_code, 404)

        url = '/accounts/%s/apps/%s/connect_credentials'%(self.account.email, self.pha.email)
        data = {'record_id': 'BOGUS_RECORD'}
        response = self.client.post(url, data=urlencode(data), content_type='application/x-www-form-urlencoded')
        self.assertEqual(response.status_code, 404)

    def test_get_user_preferences(self):
        url = '/accounts/%s/apps/%s/preferences'%(self.account.email, self.pha.email)
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.content, '') # No preferences
    
    def test_set_user_preferences(self):
        url = '/accounts/%s/apps/%s/preferences'%(self.account.email, self.pha.email)
        data = 'MYPREFERENCESDOC'
        response = self.client.put(url, data=data, content_type='text/plain')
        self.assertEqual(response.status_code, 200)

        # check that the preferences doc is in the database
        doc_id = Document.prepare_external_id("%s_USER_PREFERENCES"%self.account.id, 
                                              self.pha, pha_specific=True, record_specific=False)
        self.assertTrue(Document.objects.filter(external_id=doc_id, pha=self.pha).exists())
        self.assertEqual(Document.objects.get(external_id=doc_id, pha=self.pha).content, data)

    def test_delete_user_preferences(self):
        url = '/accounts/%s/apps/%s/preferences'%(self.account.email, self.pha.email)
        response = self.client.delete(url)
        self.assertEqual(response.status_code, 200)

        # check that there is no preferences doc in the database
        doc_id = Document.prepare_external_id("%s_USER_PREFERENCES"%self.account.id, 
                                              self.pha, pha_specific=True, record_specific=False)
        self.assertFalse(Document.objects.filter(external_id=doc_id, pha=self.pha).exists())

########NEW FILE########
__FILENAME__ = apps_tests
from indivo.models import *
from indivo.tests.internal_tests import InternalTests
from indivo.tests.data import *
from lxml import etree
from urlparse import parse_qs
from django.utils import simplejson

class PHAInternalTests(InternalTests):

    def setUp(self):
        super(PHAInternalTests,self).setUp()

        # create app
        self.app = self.createUserApp(TEST_USERAPPS, 0)

        # and an autonomous app
        self.autonomous_app = self.createUserApp(TEST_AUTONOMOUS_APPS, 0)

        # create account
        self.account = self.createAccount(TEST_ACCOUNTS, 4)

        # create a record and bind the autonomous app to it
        self.record = self.createRecord(TEST_RECORDS, 0, owner=self.account)
        self.addAppToRecord(record=self.record, with_pha=self.autonomous_app)

        # create another record and don't bind the app to it.
        self.unbound_record = self.createRecord(TEST_RECORDS, 1, owner=self.account)
        
        # create app specific externally referenced doc
        self.external_doc = self.createDocument(TEST_A_DOCS, 1, pha=self.app)

        # create app specific doc
        self.doc = self.createDocument(TEST_A_DOCS, 0, pha=self.app)

    def tearDown(self):
        super(PHAInternalTests,self).tearDown()

    def test_get_smart_manifests(self):
        response = self.client.get('/apps/manifests/')
        self.assertEqual(response.status_code, 200)
        apps = simplejson.loads(response.content)
        self.assertEqual(len(apps), 2)
        app1, app2 = apps
        if app1['name'] == self.app.name:
            self.assertEqual(app1, self.app.to_manifest(smart_only=True, as_string=False))
            self.assertEqual(app2, self.autonomous_app.to_manifest(smart_only=True, as_string=False))
        else:
            self.assertEqual(app2, self.app.to_manifest(smart_only=True, as_string=False))
            self.assertEqual(app1, self.autonomous_app.to_manifest(smart_only=True, as_string=False))

    def test_get_smart_manifest(self):
        response = self.client.get('/apps/%s/manifest'%self.app.email)
        self.assertEqual(response.status_code, 200)
        app = simplejson.loads(response.content)
        self.assertEqual(app, self.app.to_manifest(smart_only=True, as_string=False))

    def test_list_apps(self):
        response = self.client.get('/apps/')
        self.assertEquals(response.status_code, 200)    

    def test_delete_app(self):
        response = self.client.delete('/apps/%s'%(self.app.email))
        self.assertEquals(response.status_code, 200)    
    
    def test_get_app(self):
        response = self.client.get('/apps/%s'%(self.app.email))
        self.assertEquals(response.status_code, 200)

    def test_get_external_document_meta(self):
        response = self.client.get('/apps/%s/documents/external/%s/meta'%(self.app.email,TEST_A_DOCS[1]['external_id']))
        self.assertEquals(response.status_code, 200)            

    def test_put_external_document(self):
        response = self.client.put('/apps/%s/documents/external/%s'%(self.app.email, 'some_ext_id'))
        self.assertEquals(response.status_code, 200)

    def test_put_document_label(self):
        url = '/apps/%s/documents/%s/label'%(self.app.email,self.doc.id)
        newlabel = self.doc.label.upper()

        bad_methods = ['get','post', 'delete']
        self.check_unsupported_http_methods(bad_methods, url)

        response = self.client.put(url, data=newlabel, content_type='text/plain')
        self.assertEquals(response.status_code, 200)            

    def test_get_document_meta(self):
        response = self.client.get('/apps/%s/documents/%s/meta'%(self.app.email,self.doc.id))
        self.assertEquals(response.status_code, 200)            

    def test_put_document(self):
        response = self.client.put('/apps/%s/documents/%s'%(self.app.email,self.doc.id))        
        self.assertEquals(response.status_code, 200)            

    def test_get_document(self):
        response = self.client.get('/apps/%s/documents/%s'%(self.app.email,self.doc.id))        
        self.assertEquals(response.status_code, 200)            

    def test_delete_document(self):
        response = self.client.delete('/apps/%s/documents/%s'%(self.app.email, self.doc.id))
        self.assertEquals(response.status_code, 200)

    def test_list_document(self):
        response = self.client.get('/apps/%s/documents/'%(self.app.email))        
        self.assertEquals(response.status_code, 200)            

    def test_create_document(self):
        response = self.client.post('/apps/%s/documents/'%(self.app.email))        
        self.assertEquals(response.status_code, 200)            

    def test_list_app_records(self):
        response = self.client.get('/apps/%s/records/'%(self.autonomous_app.email))
        self.assertEqual(response.status_code, 200)

        # Make sure we got our record back (and not the unbound record).
        xml = etree.XML(response.content)
        records = xml.findall('Record')
        self.assertEqual(len(records), 1)
        self.assertEqual(records[0].get('id'), self.record.id)
        self.assertEqual(records[0].get('label'), self.record.label)
        self.assertFalse(records[0].get('shared'))
        self.assertNotEqual(records[0].get('id'), self.unbound_record.id)
        self.assertNotEqual(records[0].get('label'), self.unbound_record.label)
        
    def test_post_autonomous_access_token(self):
        response = self.client.post('/apps/%s/records/%s/access_token' % (self.autonomous_app.email, self.record.id))
        self.assertEqual(response.status_code, 200)

        # Make sure we got something that looks like an access token
        content = parse_qs(response.content)
        self.assertTrue(content.has_key('oauth_token'))
        self.assertTrue(content.has_key('oauth_token_secret'))
        self.assertTrue(content.has_key('xoauth_indivo_record_id'))

########NEW FILE########
__FILENAME__ = carenets_tests
from indivo.models import *
from indivo.tests.internal_tests import InternalTests
from indivo.tests.data import *

from django.utils.http import urlencode
import hashlib

LAB_CODE = 'HBA1C' # MAKE SURE TO ADD THESE MEASUREMENTS
CARENET_NAME = 'NEWNAME'

class CarenetInternalTests(InternalTests):

    def setUp(self):
        super(CarenetInternalTests,self).setUp()

        # Create an account which will own the data being shared
        self.shared_account = self.createAccount(TEST_ACCOUNTS, 4)

        # Create a record for the account to share with our other accounts
        self.shared_record = self.createRecord(TEST_RECORDS, 0, owner=self.shared_account)

        # Create a test carenet on the new record
        self.shared_carenet = self.createCarenet(TEST_CARENETS, 0, record=self.shared_record)

        # Create another account to receive the shared data
        self.receiving_account = self.createAccount(TEST_ACCOUNTS, 0)
        
        # Add the account to the test carenet
        self.addAccountToCarenet(self.receiving_account, self.shared_carenet)

        # Add a third account that doesn't share anything yet
        self.unshared_account = self.createAccount(TEST_ACCOUNTS, 1)

        # Create a pha to be shared
        self.shared_pha = self.createUserApp(TEST_USERAPPS, 1)

        # Add the pha to the test carenet
        self.addAppToCarenet(self.shared_pha, self.shared_carenet)

        # Create another pha that doesn't share anything yet
        self.unshared_pha = self.createUserApp(TEST_USERAPPS, 2)

        # But add it to the record so we can add it to carenets easily
        self.addAppToRecord(record=self.shared_record, with_pha=self.unshared_pha)

        #Create a record-specific doc
        self.shared_doc = self.createDocument(TEST_R_DOCS, 6, record=self.shared_record)

        # Share it in our carenet
        self.addDocToCarenet(self.shared_doc, self.shared_carenet)

        #Create another record-specific doc that isn't shared yet
        self.unshared_doc = self.createDocument(TEST_R_DOCS, 7, record=self.shared_record)

        # Set up our record's demographics and add the document to our carenet
        demographics_doc = self.createDocument(TEST_DEMOGRAPHICS_DOCS, 0, record=self.shared_record)
        demographics_doc.save() 
        demographics = Demographics.from_xml(TEST_DEMOGRAPHICS_DOCS[0]['content'])
        demographics.document = demographics_doc
        demographics.save()
        self.shared_record.demographics = demographics
        self.shared_record.save()

        self.addDocToCarenet(demographics_doc, self.shared_carenet)

    def tearDown(self):
        super(CarenetInternalTests,self).tearDown()

    def test_delete_carenet(self):
        c_id = self.shared_carenet.id
        url = '/carenets/%s'%(c_id)
        response = self.client.delete(url)
        self.assertEquals(response.status_code, 200)

    def test_rename_carenet(self):
        c_id = self.shared_carenet.id
        url = '/carenets/%s/rename'%(c_id)
        data = {'name': CARENET_NAME}
        response = self.client.post(url, data=urlencode(data), content_type='application/x-www-form-urlencoded')
        self.assertEquals(response.status_code, 200)

    def test_remove_account_from_carenet(self):
        c_id = self.shared_carenet.id
        a_id = self.receiving_account.email
        url = '/carenets/%s/accounts/%s'%(c_id, a_id)
        response = self.client.delete(url)
        self.assertEquals(response.status_code, 200)

    def test_get_account_permissions_in_carenet(self):
        c_id = self.shared_carenet.id
        a_id = self.shared_account.email
        url = '/carenets/%s/accounts/%s/permissions'%(c_id, a_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)
    
    def test_list_carenet_accounts(self):
        c_id = self.shared_carenet.id
        url = '/carenets/%s/accounts/'%(c_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_add_account_to_carenet(self):
        c_id = self.shared_carenet.id
        url = '/carenets/%s/accounts/'%(c_id)
        data = {'account_id': self.unshared_account.email, 'write':'true'}
        response = self.client.post(url, data=urlencode(data), content_type='application/x-www-form-urlencoded')
        self.assertEquals(response.status_code, 200)

    def test_list_carenet_apps(self):
        c_id = self.shared_carenet.id
        url = '/carenets/%s/apps/'%(c_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)
       
    def test_get_carenet_app_permissions(self):
        c_id = self.shared_carenet.id
        app_id = self.shared_pha.email
        url = '/carenets/%s/apps/%s/permissions'%(c_id, app_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_add_app_to_carenet(self):
        c_id = self.shared_carenet.id
        app_id = self.unshared_pha.email
        url = '/carenets/%s/apps/%s'%(c_id, app_id)
        response = self.client.put(url)
        self.assertEquals(response.status_code, 200)
        
    def test_remove_app_from_carenet(self):
        c_id = self.shared_carenet.id
        app_id = self.shared_pha.email
        url = '/carenets/%s/apps/%s'%(c_id, app_id)
        response = self.client.delete(url)
        self.assertEquals(response.status_code, 200)

    def test_get_carenet_record(self):
        c_id = self.shared_carenet.id
        url = '/carenets/%s/record'%(c_id)
        
        bad_methods = ['post', 'put','delete']
        self.check_unsupported_http_methods(bad_methods, url)

        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_list_carenet_documents(self):
        c_id = self.shared_carenet.id
        url = '/carenets/%s/documents/'%(c_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_get_carenet_document(self):
        c_id = self.shared_carenet.id
        d_id = self.shared_doc.id
        url = '/carenets/%s/documents/%s'%(c_id, d_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_get_carenet_document_meta(self):
        c_id = self.shared_carenet.id
        d_id = self.shared_doc.id
        url = '/carenets/%s/documents/%s/meta'%(c_id, d_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_get_carenet_demographics(self):
        c_id = self.shared_carenet.id
        url = '/carenets/%s/demographics'%(c_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_get_carenet_equipment(self):
        c_id = self.shared_carenet.id
        url = '/carenets/%s/reports/minimal/equipment/'%(c_id)

        bad_methods = ['put', 'post', 'delete']
        self.check_unsupported_http_methods(bad_methods, url)

        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_get_carenet_measurements(self):
        c_id = self.shared_carenet.id
        lab_code = LAB_CODE
        url = '/carenets/%s/reports/minimal/measurements/%s/'%(c_id, lab_code)

        bad_methods = ['put', 'post', 'delete']
        self.check_unsupported_http_methods(bad_methods, url)

        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_get_carenet_procedures(self):
        c_id = self.shared_carenet.id
        url = '/carenets/%s/reports/minimal/procedures/'%(c_id)

        bad_methods = ['put', 'post', 'delete']
        self.check_unsupported_http_methods(bad_methods, url)

        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_get_carenet_simple_clinical_notes(self):
        c_id = self.shared_carenet.id
        url = '/carenets/%s/reports/minimal/simple-clinical-notes/'%(c_id)

        bad_methods = ['put', 'post', 'delete']
        self.check_unsupported_http_methods(bad_methods, url)

        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)


########NEW FILE########
__FILENAME__ = oauth_tests
from indivo.models import *
from indivo.tests.unit.models.base import TokenModelUnitTests
from indivo.tests.data.app import TEST_USERAPPS
from indivo.tests.data.record import TEST_RECORDS
from indivo.tests.data.account import TEST_ACCOUNTS

class OauthInternalTests(TokenModelUnitTests):
    
    def setUp(self):
        super(OauthInternalTests,self).setUp()

        # An account
        self.account = self.createAccount(TEST_ACCOUNTS, 1)
        
        # A record for that account
        self.record = self.createRecord(TEST_RECORDS, 1, owner=self.account)

        # An app
        self.app = self.createUserApp(TEST_USERAPPS, 0)

        # A request token
        token, secret = self.generate_token_and_secret()
        args = {
            'token':token,
            'token_secret':secret,
            'verifier': self.generate_random_string(),
            'oauth_callback': self.app.callback_url,
            'pha': self.app,
            'record':self.record,
            'authorized_at':None,
            'authorized_by':None,
            'share':None
            }
        self.rt = ReqToken.objects.create(**args)

    def tearDown(self):
        super(OauthInternalTests,self).tearDown()


    def test_oauth_http_methods(self):
        invalid_calls = {
            '/oauth/request_token': ['get', 'put', 'delete'],
            '/oauth/access_token': ['get', 'put', 'delete'],
            '/oauth/internal/request_tokens/%s/info'%self.rt.token: ['put', 'post', 'delete'],
            '/oauth/internal/session_create': ['get', 'put', 'delete'],
            '/oauth/internal/request_tokens/%s/claim'%self.rt.token: ['get', 'put', 'delete'],
            '/oauth/internal/request_tokens/%s/approve'%self.rt.token: ['get', 'put', 'delete'],
            '/oauth/internal/surl-verify': ['put', 'post', 'delete'],
            }

        for url, invalid_methods in invalid_calls.iteritems():
            self.check_unsupported_http_methods(invalid_methods, url)

########NEW FILE########
__FILENAME__ = records_tests
from indivo.models import *
from indivo.tests.internal_tests import InternalTests, TransactionInternalTests
from indivo.tests.data import *

from django.utils.http import urlencode
from lxml import etree

DOCUMENT_TYPE = 'Models'
AUDIT_FUNC_NAME = 'record_app_specific_document'
CARENET_LABEL = 'New Carenet'
REL = 'annotation'
STATUS = {'status':'void', 'reason':'because I CAN'}
LAB_CODE = 'HBA1C' # MAKE SURE TO ADD THESE MEASUREMENTS


def recordStateSetUp(test_cases_instance):
    _self = test_cases_instance
    super(_self.__class__, _self).setUp()
    
    # reset our state
    _self.ras_docs = []
    _self.rs_docs = []
    
    # Create an Account
    _self.account = _self.createAccount(TEST_ACCOUNTS, 4)
    
    # Create a record for the account
    _self.record = _self.createRecord(TEST_RECORDS, 0, owner=_self.account)

    # Create an App
    _self.pha = _self.createUserApp(TEST_USERAPPS, 0)

    # Add the app to a record
    share_args = {'record': _self.record,
                  'with_pha': _self.pha}
    _self.addAppToRecord(**share_args)

    # Create a record-app-specific doc
    _self.ras_docs.append(_self.createDocument(TEST_RA_DOCS, 0, record=_self.record, pha=_self.pha))

    # Create a record-specific doc
    _self.rs_docs.append(_self.createDocument(TEST_R_DOCS, 6, record = _self.record))

    # Create a record-specific doc with an external id
    _self.rs_docs.append(_self.createDocument(TEST_R_DOCS, 0, record=_self.record))

    # Create a demographics doc and set on the record
    _self.rs_docs.append(_self.createDocument(TEST_DEMOGRAPHICS_DOCS, 0, record=_self.record))

    demographics = Demographics.from_xml(_self.rs_docs[2].content)
    demographics.document = _self.rs_docs[2] 
    demographics.save()
    _self.record.demographics = demographics
    _self.record.demographics.save()
    _self.record.save()

    # The message we will send (not yet in the DB)
    _self.message = TEST_MESSAGES[2]

    # An attachment to attach (not yet in the DB)
    _self.attachment = TEST_ATTACHMENTS[0]


class TransactionRecordInternalTests(TransactionInternalTests):

    ras_docs = []
    rs_docs = []

    def setUp(self):
        return recordStateSetUp(self)

    def tearDown(self):
        return super(TransactionRecordInternalTests,self).tearDown()
    
    def test_duplicate_ext_ids(self):

        # Test doc creation w/ duplicate ext_ids
        record_id = self.record.id
        ext_id = TEST_R_DOCS[1]['external_id']
        pha_email = self.pha.email
        url = '/records/%s/documents/external/%s/%s'%(record_id, pha_email, ext_id)
        response = self.client.put(url, data=TEST_R_DOCS[1]['content'], content_type='text/xml')
        self.assertEquals(response.status_code, 200)

        # Try twice with the same ext_id, expect 400
        response = self.client.put(url, data=TEST_R_DOCS[1]['content'], content_type='text/xml')
        self.assertEquals(response.status_code, 400)

        #Test record_send_message w/ duplicate ext_ids
        record_id = self.record.id
        msg = self.message
        data = {'subject':msg['subject'],
                'body':msg['body'],
                'body_type':msg['body_type'],
                'num_attachments':msg['num_attachments'],
                'severity':msg['severity']}

        # Send a message
        url = '/records/%s/inbox/%s'%(record_id, msg['message_id'])
        response = self.client.post(url, data=urlencode(data), content_type='application/x-www-form-urlencoded')
        self.assertEquals(response.status_code, 200)

        # Attach to the message
        url = '/records/%s/inbox/%s/attachments/%s'%(record_id, msg['message_id'], self.attachment['attachment_num'])
        response = self.client.post(url, data=self.attachment['content'], content_type='text/xml')
        self.assertEquals(response.status_code, 200)

        # Attach again to the same attachment_num, should break
        url = '/records/%s/inbox/%s/attachments/%s'%(record_id, msg['message_id'], self.attachment['attachment_num'])
        response = self.client.post(url, data=self.attachment['content'], content_type='text/xml')
        self.assertEquals(response.status_code, 400)        
        
        # Send message again to the same message_id, should break
        url = '/records/%s/inbox/%s'%(record_id, msg['message_id'])
        response = self.client.post(url, data=urlencode(data), content_type='application/x-www-form-urlencoded')
        self.assertEquals(response.status_code, 400)


class RecordInternalTests(InternalTests):
    ras_docs = []
    rs_docs = []

    def setUp(self):
        return recordStateSetUp(self)

    def tearDown(self):
        super(RecordInternalTests,self).tearDown()

    def test_create_record_ext(self):
        principal_email = self.account.email
        url='/records/external/%s/%s'%(principal_email, TEST_RECORDS[5]['external_id'])
        response = self.client.put(url, data=TEST_DEMOGRAPHICS_DOCS[0]['content'], content_type='text/xml')
        self.assertEquals(response.status_code, 200)
        # Check for label, contact doc, etc.

    def test_create_record(self):
        url = '/records/' 
        response = self.client.post(url, data=TEST_DEMOGRAPHICS_DOCS[0]['content'], content_type='text/xml')
        self.assertEquals(response.status_code, 200)
        # Check for label, contact doc, etc.

    def test_list_record_apps(self):
        record_id = self.record.id
        url = '/records/%s/apps/'%(record_id) 
        bad_methods = ['put', 'post', 'delete']
        self.check_unsupported_http_methods(bad_methods, url)

        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)
        # Make sure apps are correct!

    def test_get_record_app(self):
        record_id = self.record.id
        pha_email = self.pha.email
        url = '/records/%s/apps/%s'%(record_id, pha_email) 
        bad_methods = ['post',]
        self.check_unsupported_http_methods(bad_methods, url)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)
        # Make sure app is correct!

    def test_delete_record_app(self):
        record_id = self.record.id
        pha_email = self.pha.email
        url = '/records/%s/apps/%s'%(record_id, pha_email) 
        response = self.client.delete(url)
        self.assertEquals(response.status_code, 200)

    def test_enable_record_app(self):
        record_id = self.record.id
        pha_email = self.pha.email
        url = '/records/%s/apps/%s'%(record_id, pha_email) 

        # The app should be enabled by the setup
        self.assertTrue(PHAShare.objects.filter(record__id=record_id, with_pha__email=pha_email).exists())
        
        # The call should work, but do nothing when the share exists
        response = self.client.put(url)
        self.assertEqual(response.status_code, 200)
        self.assertTrue(PHAShare.objects.filter(record__id=record_id, with_pha__email=pha_email).exists())

        # Now, drop the share and assert that it's gone
        PHAShare.objects.get(record__id=record_id, with_pha__email=pha_email).delete()
        self.assertFalse(PHAShare.objects.filter(record__id=record_id, with_pha__email=pha_email).exists())
        
        # Now, make the call again, and expect the share to re-appear
        response = self.client.put(url)
        self.assertEqual(response.status_code, 200)
        self.assertTrue(PHAShare.objects.filter(record__id=record_id, with_pha__email=pha_email).exists())
        
        # the share should be authorized by None (since we authenticated as the NoUser)
        # the share should be authorized recently (i.e. within the last second)
        new_share = PHAShare.objects.get(record__id=record_id, with_pha__email=pha_email)
        self.assertEqual(new_share.authorized_by, None)
        self.assertTimeStampsAlmostEqual(new_share.authorized_at, seconds=1)

    def test_record_app_specific_docs_ext(self):
        # Multiple calls, to avoid having to resolve ext_ids ourselves
        record_id = self.record.id
        pha_email = self.pha.email

        # Create a rec-app specific doc by ext_id, post
        url = '/records/%s/apps/%s/documents/external/%s'%(record_id, pha_email, TEST_RA_DOCS[1]['external_id'])
        response = self.client.post(url, data=TEST_RA_DOCS[1]['content'], content_type='text/xml')
        self.assertEquals(response.status_code, 200)
        
        # Create by put (should overwrite doc)
        url = '/records/%s/apps/%s/documents/external/%s'%(record_id, pha_email, TEST_RA_DOCS[1]['external_id'])
        response = self.client.put(url, data=TEST_RA_DOCS[1]['content'], content_type='text/xml')
        self.assertEquals(response.status_code, 200)

        # Get Meta by ext_id
        url = '/records/%s/apps/%s/documents/external/%s/meta'%(record_id, pha_email, TEST_RA_DOCS[1]['external_id']) 
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)
        # Check for correctness

    def test_get_record_app_specific_doc(self):
        record_id = self.record.id
        pha_email = self.pha.email
        doc_id = self.ras_docs[0].id
        url = '/records/%s/apps/%s/documents/%s'%(record_id, pha_email, doc_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)
        # Check that we got the doc

    def test_delete_record_app_specific_doc(self):
        record_id = self.record.id
        pha_email = self.pha.email
        doc_id = self.ras_docs[0].id
        url = '/records/%s/apps/%s/documents/%s'%(record_id, pha_email, doc_id)
        response = self.client.delete(url)
        self.assertEquals(response.status_code, 200)

    def test_set_record_app_specific_doc_label(self):
        record_id = self.record.id
        pha_email = self.pha.email
        doc_id = self.ras_docs[0].id
        url = '/records/%s/apps/%s/documents/%s/label'%(record_id, pha_email, doc_id)
        bad_methods = ['get', 'post', 'delete']
        self.check_unsupported_http_methods(bad_methods, url)

        response = self.client.put(url, data=TEST_RA_DOCS[0]['label'], content_type='text/plain')
        self.assertEquals(response.status_code, 200)

    def test_get_record_app_specific_doc_meta(self):
        record_id = self.record.id
        pha_email = self.pha.email
        doc_id = self.ras_docs[0].id
        url = '/records/%s/apps/%s/documents/%s/meta'%(record_id, pha_email, doc_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_list_record_app_specific_docs(self):
        record_id = self.record.id
        pha_email = self.pha.email
        url = '/records/%s/apps/%s/documents/'%(record_id, pha_email)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_create_record_app_specific_doc(self):
        record_id = self.record.id
        pha_email = self.pha.email
        url = '/records/%s/apps/%s/documents/'%(record_id, pha_email)
        response = self.client.post(url, data=TEST_RA_DOCS[1]['content'], content_type='text/xml')
        self.assertEquals(response.status_code, 200)

    def test_setup_record_app(self):
        record_id = self.record.id
        pha_email = self.pha.email
        url = '/records/%s/apps/%s/setup'%(record_id, pha_email)
        bad_methods = ['get', 'put', 'delete']
        self.check_unsupported_http_methods(bad_methods, url)

        response = self.client.post(url, data=TEST_R_DOCS[1]['content'], content_type='text/xml')
        self.assertEquals(response.status_code, 200)
    
    def test_get_view_function_audit(self):
        # Need to Create Audit Logs
        record_id = self.record.id
        doc_id = self.ras_docs[0].id
        func_name = AUDIT_FUNC_NAME
        url = '/records/%s/audits/documents/%s/functions/%s/'%(record_id, doc_id, func_name)
        bad_methods = ['put', 'post', 'delete']
        self.check_unsupported_http_methods(bad_methods, url)

        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_get_document_audit(self):
        # Need to Create Audit logs
        record_id = self.record.id
        doc_id = self.ras_docs[0].id
        url = '/records/%s/audits/documents/%s/'%(record_id, doc_id)
        bad_methods = ['put', 'post', 'delete']
        self.check_unsupported_http_methods(bad_methods, url)

        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_get_record_audit(self):
        # Need to create Audit logs
        record_id = self.record.id
        url = '/records/%s/audits/'%(record_id)
        bad_methods = ['put', 'post', 'delete']
        self.check_unsupported_http_methods(bad_methods, url)

        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_record_audit_query(self):
        # Need to create Audit logs
        record_id = self.record.id
        doc_id = self.ras_docs[0].id
        url = '/records/%s/audits/query/?document_id=%s'%(record_id, doc_id)
        bad_methods = ['put', 'post', 'delete']
        self.check_unsupported_http_methods(bad_methods, url)

        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_list_all_autoshares(self):
        # Need to create autoshares
        record_id = self.record.id
        url='/records/%s/autoshare/bytype/all'%(record_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_list_autoshares_by_type(self):
        #Need to create autoshares
        record_id = self.record.id
        type = DOCUMENT_TYPE
        url = '/records/%s/autoshare/bytype/'%(record_id)
        response = self.client.get(url, data={'type': type})
        self.assertEquals(response.status_code, 200)

    def test_autoshare_create(self):
        record_id = self.record.id
        data = {'type': DOCUMENT_TYPE}
        carenet_id = Carenet.objects.filter(record = self.record)[0].id
        url = '/records/%s/autoshare/carenets/%s/bytype/set'%(record_id, carenet_id)
        response = self.client.post(url, data=urlencode(data), content_type='application/x-www-form-urlencoded')
        self.assertEquals(response.status_code, 200)

    def test_autoshare_delete(self):
        record_id = self.record.id
        data = {'type': DOCUMENT_TYPE}
        carenet_id = Carenet.objects.filter(record = self.record)[0].id
        url = '/records/%s/autoshare/carenets/%s/bytype/unset'%(record_id, carenet_id)
        response = self.client.post(url, data=urlencode(data), content_type='application/x-www-form-urlencoded')
        self.assertEquals(response.status_code, 200)
        # CREATE AUTOSHARE TO DELETE

    def test_list_record_carenets(self):
        record_id = self.record.id
        url = '/records/%s/carenets/'%(record_id) 
        response =self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_create_record_carenet(self):
        record_id = self.record.id
        url = '/records/%s/carenets/'%(record_id)
        data = {'name': CARENET_LABEL}
        response = self.client.post(url, data=urlencode(data), content_type='application/x-www-form-urlencoded')
        self.assertEquals(response.status_code, 200)

    def test_set_record_specific_doc_label_ext(self):
        record_id = self.record.id
        ext_id = TEST_R_DOCS[0]['external_id']
        pha_email = self.pha.email
        bad_methods = ['get', 'post', 'delete']
        url= '/records/%s/documents/external/%s/%s/label'%(record_id, pha_email, ext_id)
        self.check_unsupported_http_methods(bad_methods, url)
        response = self.client.put(url, data=TEST_R_DOCS[0]['label'], content_type='text/plain')
        self.assertEquals(response.status_code, 200)

    def test_get_record_specific_doc_meta_ext(self):
        record_id = self.record.id
        ext_id = TEST_R_DOCS[0]['external_id']
        pha_email = self.pha.email
        url = '/records/%s/documents/external/%s/%s/meta'%(record_id, pha_email, ext_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_create_record_specific_doc_ext(self):
        record_id = self.record.id
        ext_id = TEST_R_DOCS[1]['external_id']
        pha_email = self.pha.email
        url = '/records/%s/documents/external/%s/%s'%(record_id, pha_email, ext_id)
        response = self.client.put(url, data=TEST_R_DOCS[1]['content'], content_type='text/xml')
        self.assertEquals(response.status_code, 200)

    def test_relate_existing_record_specific_docs(self):
        record_id = self.record.id
        rel = REL
        doc_id_0 = self.rs_docs[0].id
        doc_id_1 = self.rs_docs[1].id
        url = '/records/%s/documents/%s/rels/%s/%s'%(record_id, doc_id_0, rel, doc_id_1)
        response = self.client.put(url)
        self.assertEquals(response.status_code, 200)

    def test_create_record_specific_doc_by_rel_ext(self):
        record_id = self.record.id
        ext_id = TEST_R_DOCS[1]['external_id']
        rel = REL
        pha_email = self.pha.email
        doc_id = self.rs_docs[0].id
        url = '/records/%s/documents/%s/rels/%s/external/%s/%s'%(record_id, doc_id, rel, pha_email, ext_id)
        response = self.client.post(url, data=TEST_R_DOCS[1]['content'], content_type='text/xml')
        self.assertEquals(response.status_code, 200)

        # Test put as well, should create new doc
        ext_id = TEST_R_DOCS[2]['external_id']
        url = '/records/%s/documents/%s/rels/%s/external/%s/%s'%(record_id, doc_id, rel, pha_email, ext_id)
        response = self.client.put(url, data=TEST_R_DOCS[2]['content'], content_type='text/xml')
        self.assertEquals(response.status_code, 200)

    def test_get_record_specific_docs_by_rel(self):
        record_id = self.record.id
        rel = REL
        doc_id = self.rs_docs[0].id
        url = '/records/%s/documents/%s/rels/%s/'%(record_id, doc_id, rel)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)
        # CREATE RELS TO LOOK UP

    def test_create_record_specific_doc_by_rel(self):
        record_id = self.record.id
        rel = REL
        doc_id = self.rs_docs[0].id

        # test xml doc
        url = '/records/%s/documents/%s/rels/%s/'%(record_id, doc_id, rel)
        response = self.client.post(url, data=TEST_R_DOCS[1]['content'], content_type='text/xml')
        self.assertEquals(response.status_code, 200)
        root = etree.XML(response.content)
        # check relation
        relatedFrom = root.findall('./isRelatedFrom/relation')
        self.assertEquals(len(relatedFrom), 1, "found more/less than 1 relation")
        relatesTo = root.find('./relatesTo')
        self.assertEquals(relatesTo, None, "should be no relatesTo")
        # check document type
        doc_id = root.get('id')
        doc = Document.objects.get(id=doc_id)
        self.assertEquals(doc.mime_type, 'text/xml')
        
        # test binary doc
        url = '/records/%s/documents/%s/rels/%s/'%(record_id, doc_id, rel)
        response = self.client.post(url, data=TEST_R_DOCS[11]['content'], content_type='image/gif')
        self.assertEquals(response.status_code, 200)
        root = etree.XML(response.content)
        doc_id = root.get('id')
        doc = Document.objects.get(id=doc_id)
        self.assertEquals(doc.mime_type, 'image/gif')
        
    def test_get_record_specific_doc_carenets(self):
        record_id = self.record.id
        doc_id = self.rs_docs[0].id
        url = '/records/%s/documents/%s/carenets/'%(record_id, doc_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)
        # PLACE DOC IN CARENETS

    def test_revert_record_specific_doc_autoshare(self):
        # NOT YET IMPLEMENTED!!        
        record_id = self.record.id
        doc_id = self.rs_docs[0].id
        carenet_id = Carenet.objects.filter(record = self.record)[0].id
        url = '/records/%s/documents/%s/carenets/%s/autoshare-revert'%(record_id, doc_id, carenet_id)
        response = self.client.post(url)
        self.assertEquals(response.status_code, 200)

    def test_place_record_specific_doc_in_carenet(self):
        record_id = self.record.id
        doc_id = self.rs_docs[0].id
        carenet_id = Carenet.objects.filter(record = self.record)[0].id
        url = '/records/%s/documents/%s/carenets/%s'%(record_id, doc_id, carenet_id)
        response = self.client.put(url)
        self.assertEquals(response.status_code, 200)

    def test_remove_record_specific_doc_from_carenet(self):
        record_id = self.record.id
        doc_id = self.rs_docs[0].id
        carenet_id = Carenet.objects.filter(record = self.record)[0].id
        url = '/records/%s/documents/%s/carenets/%s'%(record_id, doc_id, carenet_id)
        response = self.client.delete(url)
        self.assertEquals(response.status_code, 200)
        # CODE LOOKS FUNKY--MAKE SURE THIS WORKS FOR REAL

    def test_get_record_specific_doc(self):
        record_id = self.record.id
        doc_id = self.rs_docs[0].id
        url = '/records/%s/documents/%s'%(record_id, doc_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_set_record_specific_doc_label(self):
        record_id = self.record.id
        doc_id = self.rs_docs[0].id
        url = '/records/%s/documents/%s/label'%(record_id, doc_id)
        bad_methods = ['get', 'post', 'delete']
        self.check_unsupported_http_methods(bad_methods, url)
        response = self.client.put(url, data=TEST_R_DOCS[1]['label'], content_type='text/xml')
        self.assertEquals(response.status_code, 200)
        
    def test_get_record_specific_doc_meta(self):
        record_id = self.record.id
        doc_id = self.rs_docs[0].id
        url = '/records/%s/documents/%s/meta'%(record_id, doc_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

        # Make sure metadata fields worked correctly
        xml = etree.XML(response.content)

        created_at = xml.findtext('createdAt')
        self.assertNotRaises(ValueError, self.validateIso8601, created_at)

        creator_name = xml.find('creator').findtext('fullname')
        self.assertEqual(creator_name, self.rs_docs[0].creator.descriptor())

        # TODO: Check remaining fields

    def test_update_record_specific_doc_meta(self):
        # Call does nothing.
        record_id = self.record.id
        doc_id = self.rs_docs[0].id
        url = '/records/%s/documents/%s/meta'%(record_id, doc_id)
        response = self.client.put(url)
        self.assertEquals(response.status_code, 200)
        
    def test_set_record_specific_doc_nevershare(self):
        record_id = self.record.id
        doc_id = self.rs_docs[0].id
        url = '/records/%s/documents/%s/nevershare'%(record_id, doc_id)
        response = self.client.put(url)
        self.assertEquals(response.status_code, 200)
        
    def test_remove_record_specific_doc_nevershare(self):
        record_id = self.record.id
        doc_id = self.rs_docs[0].id
        url = '/records/%s/documents/%s/nevershare'%(record_id, doc_id)
        response = self.client.delete(url)
        self.assertEquals(response.status_code, 200)
        # ADD NEVERSHARE TO REMOVE

    def test_replace_record_specific_doc_ext(self):
        record_id = self.record.id
        doc_id = self.rs_docs[0].id
        pha_email = self.pha.email
        ext_id = TEST_R_DOCS[1]['external_id']
        url = '/records/%s/documents/%s/replace/external/%s/%s'%(record_id, doc_id, pha_email, ext_id)
        response = self.client.put(url, data=TEST_R_DOCS[1]['content'], content_type='text/xml')
        self.assertEquals(response.status_code, 200)

    def test_replace_record_specific_doc(self):
        record_id = self.record.id
        doc_id = self.rs_docs[0].id
        url = '/records/%s/documents/%s/replace'%(record_id, doc_id)
        response = self.client.post(url, data=TEST_R_DOCS[1]['content'], content_type='text/xml')
        self.assertEquals(response.status_code, 200)
        
    def test_set_record_specific_doc_status(self):
        record_id = self.record.id
        doc_id = self.rs_docs[0].id
        url = '/records/%s/documents/%s/set-status'%(record_id, doc_id)
        response = self.client.post(url, data=urlencode(STATUS), content_type='application/x-www-form-urlencoded')
        self.assertEquals(response.status_code, 200)

    def test_get_record_specific_doc_status_history(self):
        record_id = self.record.id
        doc_id = self.rs_docs[0].id
        url = '/records/%s/documents/%s/status-history'%(record_id, doc_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)
        # CREATE STATUS HISTORY ON DOC

    def test_get_record_specific_doc_versions(self):
        record_id = self.record.id
        doc_id = self.rs_docs[0].id
        url = '/records/%s/documents/%s/versions/'%(record_id, doc_id)
        bad_methods = ['put', 'post', 'delete']
        self.check_unsupported_http_methods(bad_methods, url)

        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)
        # CREATE VERSIONS ON DOC

    def test_list_record_specific_docs(self):
        record_id = self.record.id
        url = '/records/%s/documents/'%(record_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_create_record_specific_doc(self):
        record_id = self.record.id
        url = '/records/%s/documents/'%(record_id)
        response = self.client.post(url, data=TEST_R_DOCS[1]['content'], content_type='text/xml')
        self.assertEquals(response.status_code, 200)                                     

    def test_delete_all_record_specific_docs(self):
        record_id = self.record.id
        url = '/records/%s/documents/'%(record_id)
        response = self.client.delete(url)
        self.assertEquals(response.status_code, 200)

    def test_get_demographics(self):
        record_id = self.record.id
        url = '/records/%s/demographics'%(record_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_set_demographics(self):
        record_id = self.record.id
        url = '/records/%s/demographics'%(record_id)
        
        # put
        response = self.client.put(url, data=TEST_DEMOGRAPHICS_DOCS[0]['content'], content_type='text/xml')
        self.assertEquals(response.status_code, 200)

    def test_get_record_info(self):
        record_id = self.record.id
        url = '/records/%s'%(record_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_record_send_message(self):
        # Test send and attach together to avoid setup
        record_id = self.record.id
        msg = self.message
        data = {'subject':msg['subject'],
                'body':msg['body'],
                'body_type':msg['body_type'],
                'num_attachments':msg['num_attachments'],
                'severity':msg['severity']}

        # Send a message
        url = '/records/%s/inbox/%s'%(record_id, msg['message_id'])
        response = self.client.post(url, data=urlencode(data), content_type='application/x-www-form-urlencoded')
        self.assertEquals(response.status_code, 200)
        
        # Attach to the message
        url = '/records/%s/inbox/%s/attachments/%s'%(record_id, msg['message_id'], self.attachment['attachment_num'])
        response = self.client.post(url, data=self.attachment['content'], content_type='text/xml')
        self.assertEquals(response.status_code, 200)

    def test_record_notify(self):
        record_id = self.record.id

        # Test Deprecated Call
        url = '/records/%s/notify'%(record_id)
        bad_methods = ['get', 'put', 'delete']
        self.check_unsupported_http_methods(bad_methods, url)

        data = {'content':TEST_R_DOCS[1]['content'],
                'document_id':self.rs_docs[1].id}
        response =self.client.post(url, data=urlencode(data), content_type='application/x-www-form-urlencoded')
        self.assertEquals(response.status_code, 200)

        # Test Modern Call
        url = '/records/%s/notifications/'%(record_id)
        bad_methods = ['get', 'put', 'delete']
        self.check_unsupported_http_methods(bad_methods, url)

        data = {'content':TEST_R_DOCS[1]['content'],
                'document_id':self.rs_docs[1].id}
        response =self.client.post(url, data=urlencode(data), content_type='application/x-www-form-urlencoded')
        self.assertEquals(response.status_code, 200)

    def test_get_record_owner(self):
        record_id = self.record.id
        url = '/records/%s/owner'%(record_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_set_record_owner(self):
        record_id = self.record.id
        url = '/records/%s/owner'%(record_id)
        response = self.client.post(url, data=self.pha.email, content_type='text/plain')
        self.assertEquals(response.status_code, 200)
        
        # Test put: should have same behavior
        response = self.client.put(url, data=self.pha.email, content_type='text/plain')
        self.assertEquals(response.status_code, 200)

    def test_reset_record_password(self):
        # records/%s/password_reset ['GET'] 
        # DOES NOTHING... Why does this call exist?
        pass

    def test_get_record_shares(self):
        record_id = self.record.id
        url = '/records/%s/shares/'%(record_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)
        # CREATE SHARES
        
    def test_add_record_share(self):
        record_id = self.record.id
        url = '/records/%s/shares/'%(record_id)
        data = {'account_id':self.account.email,
                'role_label':'NEW OWNER'}
        response = self.client.post(url, data=urlencode(data), content_type='application/x-www-form-urlencoded')
        self.assertEquals(response.status_code, 200)

    def test_remove_record_share(self):
        record_id = self.record.id
        other_account_id = self.account.email

        # Test deprecated call
        url = '/records/%s/shares/%s/delete'%(record_id, other_account_id)

        bad_methods = ['get', 'put', 'delete']
        self.check_unsupported_http_methods(bad_methods, url)

        response = self.client.post(url)
        self.assertEquals(response.status_code, 200)

        # Test modern call
        url = '/records/%s/shares/%s'%(record_id, other_account_id)

        bad_methods = ['get', 'put', 'post']
        self.check_unsupported_http_methods(bad_methods, url)

        response = self.client.delete(url)
        self.assertEquals(response.status_code, 200)

        # CREATE SHARES

    def test_get_record_ccr(self):
        record_id = self.record.id
        url = '/records/%s/reports/experimental/ccr'%(record_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)
        # ADD REPORTS

    def test_get_record_equipment(self):
        record_id = self.record.id
        url = '/records/%s/reports/minimal/equipment/'%(record_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)
        # ADD REPORTS

    def test_get_record_measurements(self):
        record_id = self.record.id
        lab_code = LAB_CODE
        url = '/records/%s/reports/minimal/measurements/%s/'%(record_id, lab_code)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)
        # ADD REPORTS

    def test_get_record_procedures(self):
        record_id = self.record.id
        url = '/records/%s/reports/minimal/procedures/'%(record_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)
        # ADD REPORTS

    def test_get_record_simple_clinical_notes(self):
        record_id = self.record.id
        url = '/records/%s/reports/minimal/simple-clinical-notes/'%(record_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)
        # ADD REPORTS

    def test_record_search(self):
        url = '/records/search?label=%s'

        # expect only two existing records: our record and 'the empty record'
        self.assertEqual(Record.objects.all().count(), 2)

        # create another
        search_record = self.createRecord(TEST_RECORDS, 1, owner=self.account)

        # run a search to return our record
        response = self.client.get(url%self.record.label)
        self.assertEqual(response.status_code, 200)
        results = etree.XML(response.content).findall('Record')
        self.assertEqual(len(results), 1)
        self.assertEqual(results[0].get('id'), self.record.id)

        # run a search to return the other record, using partial matching
        response = self.client.get(url%search_record.label[:-3])
        self.assertEqual(response.status_code, 200)
        results = etree.XML(response.content).findall('Record')
        self.assertEqual(len(results), 1)
        self.assertEqual(results[0].get('id'), search_record.id)

        # run a search to return neither record
        response = self.client.get(url%'DEADBEEF')
        self.assertEqual(response.status_code, 200)
        results = etree.XML(response.content).findall('Record')
        self.assertEqual(len(results), 0)

        # run a search to return both records
        response = self.client.get(url%'record_label')
        self.assertEqual(response.status_code, 200) 
        results = etree.XML(response.content).findall('Record')
        self.assertEqual(len(results), 2)
        self.assertEqual(set([r.get('id') for r in results]), 
                         set([self.record.id, search_record.id]))

########NEW FILE########
__FILENAME__ = reporting_tests
import json
from lxml import etree

from rdflib import Graph, Namespace

from indivo.models import *
from indivo.tests.internal_tests import InternalTests
from indivo.tests.data import TEST_ACCOUNTS, TEST_RECORDS

DOCUMENT = '''<DOC>HERE'S MY CONTENT</DOC>'''
DOC_LABEL = 'A Document!'
NS = 'http://indivo.org/vocab/xml/documents#'
SMART = Namespace("http://smartplatforms.org/terms#")

class ReportingInternalTests(InternalTests):

    def setUp(self):
        super(ReportingInternalTests,self).setUp()

        # Create an Account (with a few records)
        self.account = self.createAccount(TEST_ACCOUNTS, 4)

        # Add a record for it
        self.record = self.createRecord(TEST_RECORDS, 0, owner=self.account)

        #Add some sample Reports
        self.loadTestReports(record=self.record)

    def tearDown(self):
        super(ReportingInternalTests,self).tearDown()

    def test_get_simple_clinical_notes(self):
        record_id = self.record.id
        url = '/records/%s/reports/minimal/simple-clinical-notes/?group_by=specialty&aggregate_by=count*provider_name&date_range=date_of_visit*2005-03-10T00:00:00Z*'%(record_id)
        bad_methods = ['put', 'post', 'delete']
        self.check_unsupported_http_methods(bad_methods, url)

        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

        url2 = '/records/%s/reports/minimal/simple-clinical-notes/?provider_name=Kenneth%%20Mandl&date_group=date_of_visit*month&aggregate_by=count*provider_name&order_by=date_of_visit'%(record_id)
        response = self.client.get(url2)
        self.assertEquals(response.status_code, 200)

        url3 = '/records/%s/reports/minimal/simple-clinical-notes/?order_by=-created_at'%(record_id)
        response = self.client.get(url3)
        self.assertEquals(response.status_code, 200)

    def test_get_procedures(self):
        record_id = self.record.id
        url = '/records/%s/reports/minimal/procedures/?group_by=procedure_name&aggregate_by=count*procedure_name&date_range=date_performed*2005-03-10T00:00:00Z*'%(record_id)
        bad_methods = ['put', 'post', 'delete']
        self.check_unsupported_http_methods(bad_methods, url)

        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

        url2 = '/records/%s/reports/minimal/procedures/?procedure_name=Appendectomy&date_group=date_performed*month&aggregate_by=count*procedure_name&order_by=-date_performed'%(record_id)
        response = self.client.get(url2)
        self.assertEquals(response.status_code, 200)

        url3 = '/records/%s/reports/minimal/procedures/?order_by=date_performed'%(record_id)
        response = self.client.get(url3)
        self.assertEquals(response.status_code, 200)


    def test_get_measurements(self):
        record_id = self.record.id
        url = '/records/%s/reports/minimal/measurements/HBA1C/?group_by=lab_code&aggregate_by=avg*value&date_range=date_measured*2005-03-10T00:00:00Z*'%(record_id)
        bad_methods = ['put', 'post', 'delete']
        self.check_unsupported_http_methods(bad_methods, url)

        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

        url2 = '/records/%s/reports/minimal/measurements/HBA1C/?lab_code=HBA1C&date_group=date_measured*month&aggregate_by=max*value&order_by=date_measured&date_range=date_measured*1990-03-10T00:00:00Z*'%(record_id)
        response = self.client.get(url2)
        self.assertEquals(response.status_code, 200)

        url3 = '/records/%s/reports/minimal/measurements/HBA1C/?order_by=date_measured&date_range=date_measured*2009-06-17T03:00:00.02Z*'%(record_id)
        response = self.client.get(url3)
        self.assertEquals(response.status_code, 200)        

    def test_get_equipment(self):
        record_id = self.record.id
        url = '/records/%s/reports/minimal/equipment/?group_by=equipment_vendor&aggregate_by=count*equipment_name&date_range=date_started*2004-03-10T00:00:00Z*'%(record_id)
        bad_methods = ['put', 'post', 'delete']
        self.check_unsupported_http_methods(bad_methods, url)

        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

        url2 = '/records/%s/reports/minimal/equipment/?equipment_name=Tractor&date_group=date_started*month&aggregate_by=count*equipment_name&order_by=date_started&date_range=date_started*1990-03-10T00:00:00Z*'%(record_id)
        response = self.client.get(url2)
        self.assertEquals(response.status_code, 200)

        url3 = '/records/%s/reports/minimal/equipment/?order_by=date_started&date_range=date_started*2000-03-10T00:00:00Z*'%(record_id)
        response = self.client.get(url3)
        self.assertEquals(response.status_code, 200)

    def test_get_audits(self):
        record_id = self.record.id        

        # make some audits
        import datetime
        audit_args = {
            'datetime': datetime.datetime.now(),
            'view_func': 'FUNC1',
            'request_successful': True,
            'record_id': record_id
            }
        Audit.objects.create(**audit_args)
        audit_args = {
            'datetime': datetime.datetime.now(),
            'view_func': 'FUNC2',
            'request_successful': True, 
            'record_id': record_id
            }
        Audit.objects.create(**audit_args)


        url = '/records/%s/audits/query/?date_range=request_date*2010-03-10T00:00:00Z*'%(record_id)
        bad_methods = ['put', 'post', 'delete']
        self.check_unsupported_http_methods(bad_methods, url)
        
        response = self.client.get(url)
        # Should see 2 entries
        self.assertEquals(response.status_code, 200)

        url = '/records/%s/audits/query/?date_range=request_date*2010-03-10T00:00:00Z*&function_name=FUNC1'%(record_id)
        response = self.client.get(url)
        # Should see 1 entry
        self.assertEquals(response.status_code, 200)

        url = '/records/%s/audits/query/?aggregate_by=count*request_date&date_range=request_date*2010-03-10T00:00:00Z*'%(record_id)
        response = self.client.get(url)
        # Should see [{'aggregation': 4}]
        self.assertEquals(response.status_code, 200)

        url = '/records/%s/audits/query/?aggregate_by=count*request_date&date_range=request_date*2010-03-10T00:00:00Z*&function_name=FUNC1'%(record_id)
        response = self.client.get(url)
        # Should see [{'aggregation': 1}]
        self.assertEquals(response.status_code, 200)

    def test_get_generic_labs(self):
        response = self.client.get('/records/%s/reports/LabResult/'%(self.record.id))
        self.assertEquals(response.status_code, 200)
        
        response_json = json.loads(response.content)
        self.assertTrue(len(response_json), 1)

        # check to make sure Model name is correct, and that it has 37 fields        
        first_lab = response_json[0]
        self.assertEquals(first_lab['__modelname__'], 'LabResult')
        self.assertEquals(len(first_lab), 37)

    def test_generic_query_api(self):
        record_id = self.record.id
        #TODO: Vitals is currently the only data model with a numeric field to aggregate on, 
        #      and there are only 2 of them; making meaningful queries difficult.
        
        # group_by, aggregate_by, date_range (json format)
        url = '/records/%s/reports/vitalsigns/?group_by=weight_unit&aggregate_by=avg*weight_value&date_range=date*2005-03-10T00:00:00Z*'%(record_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)
        
        # Check aggregate report
        response_json = json.loads(response.content)
        self.assertEqual(len(response_json), 1)      
        self.assertEqual(response_json[0]['__modelname__'], 'AggregateReport')
        self.assertEqual(float(response_json[0]['value']), 75.8)
        self.assertEqual(response_json[0]['group'], 'kg')

        # group_by, aggregate_by, date_range (xml format)
        url = '/records/%s/reports/vitalsigns/?group_by=weight_unit&aggregate_by=avg*weight_value&date_range=date*2005-03-10T00:00:00Z*&response_format=application/xml'%(record_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)
        
        xml = etree.XML(response.content)
        reports = xml.findall('.//AggregateReport')
        self.assertEqual(len(reports), 1)
        # check aggregate results
        self.assertEqual(float(reports[0].get('value')), 75.8)
        self.assertEqual(reports[0].get('group'), 'kg')

        # string {field}, date_group, aggregate_by, order_by
        url = '/records/%s/reports/vitalsigns/?date_group=date*month&aggregate_by=min*date&order_by=date'%(record_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)
        
        # Check aggregate report
        response_json = json.loads(response.content)
        self.assertEqual(len(response_json), 2)      
        self.assertEqual(response_json[0]['__modelname__'], 'AggregateReport')
        self.assertEqual(response_json[0]['value'], '2009-05-16T12:00:00Z')
        self.assertEqual(response_json[0]['group'], '2009-05')
        self.assertEqual(response_json[1]['__modelname__'], 'AggregateReport')
        self.assertEqual(response_json[1]['value'], '2010-05-16T12:00:00Z')
        self.assertEqual(response_json[1]['group'], '2010-05')
        
        # date {field}
        url = '/records/%s/reports/vitalsigns/?date=2009-05-16T12:00:00Z'%(record_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)
        
        response_json = json.loads(response.content)
        self.assertEqual(len(response_json), 1)      
        self.assertEqual(response_json[0]['date'], '2009-05-16T12:00:00Z')
        
        # string {field}
        url = '/records/%s/reports/vitalsigns/?weight_name_title=Body weight'%(record_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)
        response_json = json.loads(response.content)
        self.assertEqual(len(response_json), 2)      
        self.assertEqual(response_json[0]['weight_name_title'], 'Body weight')
        self.assertEqual(response_json[1]['weight_name_title'], 'Body weight')
        
        # number {field}
        url = '/records/%s/reports/vitalsigns/?weight_value=70.8'%(record_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)
        
        # Check values
        response_json = json.loads(response.content)
        self.assertEqual(len(response_json), 1)
        self.assertEquals(float(response_json[0]['weight_value']), 70.8)
        
        # number {field} with multiple values
        url = '/records/%s/reports/vitalsigns/?weight_value=70.8|80.8'%(record_id)
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

        # Check values
        response_json = json.loads(response.content)
        self.assertEqual(len(response_json), 2)
        for vital in response_json:
            self.assertTrue(float(vital['weight_value']) in [70.8, 80.8])

    def test_get_generic_nonexistent(self):  
        # get a JSON encoded report on a non-existent model
        response = self.client.get('/records/%s/reports/DoesNotExist/'%(self.record.id), {'response_format':'application/json'})
        self.assertEquals(response.status_code, 404)

    def test_get_smart_labs(self):
        response = self.client.get('/records/%s/lab_results/'%(self.record.id))
        self.assertEquals(response.status_code, 200)
        g = Graph()
        g.parse(data=response.content, format="application/rdf+xml")
        lab_results = [l for l in g.subjects(None,SMART["LabResult"])]
        self.assertEqual(len(lab_results), 1)
        
        # retrieve a single lab result
        lab_id = lab_results[0].split('/')[-1]
        
        response = self.client.get('/records/%s/lab_results/%s' % (self.record.id, lab_id))
        self.assertEquals(response.status_code, 200)
        
    def test_get_smart_allergies(self):
        # allergies are a special case since they can be an Allergy or AllergyExclusion 
        response = self.client.get('/records/%s/allergies/'%(self.record.id))
        self.assertEquals(response.status_code, 200)
        g = Graph()
        g.parse(data=response.content, format="application/rdf+xml")
        allergy_results = [l for l in g.subjects(None,SMART["Allergy"])]
        self.assertEqual(len(allergy_results), 1)
        allergy_exclusion_results = [l for l in g.subjects(None,SMART["AllergyExclusion"])]
        self.assertEqual(len(allergy_exclusion_results), 0)
        
        # retrieve a single allergy
        allergy_id = allergy_results[0].split('/')[-1]
        
        response = self.client.get('/records/%s/allergies/%s' % (self.record.id, allergy_id))
        self.assertEquals(response.status_code, 200)        

########NEW FILE########
__FILENAME__ = smart_tests
from indivo.tests.internal_tests import InternalTests

class SMARTInternalTests(InternalTests):
    def setUp(self):
        super(SMARTInternalTests, self).setUp()

    def tearDown(self):
        super(SMARTInternalTests, self).tearDown()

    def test_get_smart_ontology(self):
        response = self.client.get('/ontology')
        self.assertEqual(response.status_code, 200)
        
    def test_get_smart_capabilities(self):
        response = self.client.get('/capabilities/')
        self.assertEqual(response.status_code, 200)


########NEW FILE########
__FILENAME__ = access_key
patient_access_key = "<PatientAccessKey> <record_id>456</record_id> <token>z8j38em</token> <token_secret>hs92jwl</token_secret> <access_key> <patient_id>123</patient_id> <token>z8j38em</token> <token_secret>hs92jwl</token_secret> </access_key> </PatientAccessKey>"
access_key = "<AccessKey> <record_id>456</record_id> <token>z8j38em</token> <token_secret>hs92jwl</token_secret> <access_key> <patient_id>123</patient_id> <token>z8j38em</token> <token_secret>hs92jwl</token_secret> </access_key> </AccessKey>"

########NEW FILE########
__FILENAME__ = account
import string
from indivo.lib import utils
from indivo.models import Account
from base import *

class TestAccount(TestModel):
    model_fields = ['email', 'full_name', 'contact_email', 'primary_secret', 'secondary_secret']
    model_class = Account

    def _setupargs(self, account_id, username, password, fullname='John Doe',
                   contact_email=None,
                   records=None,
                   primary_secret=utils.random_string(6, [string.digits]), 
                   secondary_secret=utils.random_string(6,[string.digits])):
        self.email = account_id
        self._username= username
        self._password = password
        self.full_name = fullname
        self.contact_email = contact_email
        self.records = records 
        self.primary_secret = primary_secret
        self.secondary_secret = secondary_secret

_TEST_ACCOUNTS = [
    {'account_id':'stevezabak@informedcohort.org',
     'username': 'stevezabak',
     'password': 'abc',
     'fullname': 'Steve Zabak',
     'contact_email': 'steve.zabak@childrens.harvard.edu',
     'records': ManyToManyKey('record', 'TEST_RECORDS', [2]), 
     },
    {'account_id':'benadida@informedcohort.org',
     'username': 'benadida',
     'password': 'test',
     'fullname': 'Ben Adida',
     'contact_email': 'ben@adida.net',
     'records': ManyToManyKey('record', 'TEST_RECORDS', [2]),
     },
    {'account_id':'alice@childrens.harvard.edu', 
     'username': 'alice',
     'password': 'alice',
     'fullname': 'Alice Doe',
     'contact_email': 'contact@con.con',
     'records': ManyToManyKey('record', 'TEST_RECORDS', [2]),
     },
    {'account_id':'bob@childrens.harvard.edu',
     'username': 'bob',
     'password': 'robert',
     'fullname': 'Bob Doe',
     'contact_email': 'contact@con.con',
     'records': ManyToManyKey('record', 'TEST_RECORDS', [2]),
     },
    {'account_id':'mymail@mail.ma',
     'username': 'user',
     'password': 'pass',
     'fullname': 'full name',
     'contact_email': 'contact@con.con',
     'records': ManyToManyKey('record', 'TEST_RECORDS', [2]),
     'primary_secret': '010101',
     'secondary_secret': '010101'
     },
    ]
TEST_ACCOUNTS = scope(_TEST_ACCOUNTS, TestAccount)

########NEW FILE########
__FILENAME__ = app
from indivo.models import PHA, MachineApp
from base import *

class TestUserApp(TestModel):
    model_fields = ['name', 'email', 'consumer_key', 'secret', 'author',
                    'has_ui', 'version', 'indivo_version', 'icon_url',
                    'frameable', 'is_autonomous', 'autonomous_reason',
                    'start_url_template', 'callback_url', 'description',
                    'requirements',]
    model_class = PHA
    
    def _setupargs(self, name, email, consumer_key, secret, author='testauthor',
                   has_ui=True, version='1.0.0', indivo_version='1.0.0',
                   icon_url='http://myicons.com/icon.png',
                   frameable=True, is_autonomous=False, autonomous_reason='', 
                   start_url_template='http://start', 
                   callback_url='http://afterauth',
                   description='An Indivo User App',
                   requirements='{}'):
        self.name = name
        self.email = email
        self.consumer_key = consumer_key
        self.secret = secret
        self.author = author
        self.has_ui = has_ui
        self.version = version
        self.indivo_version = indivo_version
        self.icon_url = icon_url
        self.frameable = frameable
        self.is_autonomous = is_autonomous
        self.autonomous_reason = autonomous_reason
        self.start_url_template = start_url_template
        self.callback_url = callback_url
        self.description = description
        self.requirements = requirements

class TestMachineApp(TestModel):
    model_fields = ['name', 'email', 'consumer_key', 'secret', 
                    'description', 'author', 'version', 'indivo_version',
                    'app_type']
    model_class = MachineApp
    
    def _setupargs(self, name, email, consumer_key, secret, 
                   description= "An Indivo Machine App",
                   author="testauthor", version="1.0.0", 
                   indivo_version="1.0.0", app_type='admin'):
        self.name = name
        self.email = email
        self.consumer_key = consumer_key
        self.secret = secret
        self.description = description
        self.author = author
        self.version = version
        self.indivo_version = indivo_version
        self.app_type = app_type

_TEST_USERAPPS = [
    {'name' : 'myApp', 
     'email' : 'myApp@testapps.indivo.org', 
     'consumer_key' : 'myapp', 
     'secret' : 'myapp', 
     'has_ui' : True, 
     'frameable' : True, 
     'is_autonomous' : False, 
     'autonomous_reason' : '', 
     'start_url_template' : 'http://myapp.com/start', 
     'callback_url' : 'http://myapp.com/afterauth', 
     'description' : 'ITS MY APP',
     },
    {'name' : 'User Test App', 
     'email' : 'stephanie@apps.indivo.org', 
     'consumer_key' : 'stephanie@apps.indivo.org', 
     'secret' : 'norepinephrine', 
     'description' : 'USER TEST APP',
     },
    {'name' : 'User Test App2', 
     'email' : 'stephanie2@apps.indivo.org', 
     'consumer_key' : 'stephanie2@apps.indivo.org', 
     'secret' : 'norepinephrine2', 
     'description' : 'USER TEST APP 2',
     },
    ]
TEST_USERAPPS = scope(_TEST_USERAPPS, TestUserApp)

_TEST_AUTONOMOUS_APPS = [
    {'name' : 'myAutonomousApp', 
     'email' : 'myAutonomousApp@testapps.indivo.org', 
     'consumer_key' : 'myautonomousapp', 
     'secret' : 'myautonomousapp', 
     'has_ui' : True, 
     'frameable' : True, 
     'is_autonomous' : True, 
     'autonomous_reason' : 'Because I am the independent type.', 
     'start_url_template' : 'http://myautonomousapp.com/start', 
     'callback_url' : 'http://myapp.com/afterauth', 
     'description' : 'ITS MY AUTONOMOUS APP',
     },
    ]
TEST_AUTONOMOUS_APPS = scope(_TEST_AUTONOMOUS_APPS, TestUserApp)

_TEST_ADMINAPPS = [
    {'name' : 'Admin Test App', 
     'email' : 'stemapnea@apps.indivo.org', 
     'consumer_key' : 'stemapnea@apps.indivo.org', 
     'secret' : 'neuronagility', 
     'app_type' : 'admin',
     },
    {'name' : 'Admin Test App2', 
     'email' : 'stemapnea2@apps.indivo.org', 
     'consumer_key' : 'stemapnea2@apps.indivo.org', 
     'secret' : 'neuronagility2', 
     'app_type' : 'admin',
     },
    ]
TEST_ADMINAPPS = scope(_TEST_ADMINAPPS, TestMachineApp)

_TEST_UIAPPS = [
    {'name' : 'Chrome', 
     'email' : 'chrome@apps.indivo.org',
     'consumer_key' : 'chrome',
     'secret' : 'chrome', 
     'app_type' : 'chrome',
     },
    {'name' : 'OtherChrome', 
     'email' : 'ochrome@apps.indivo.org',
     'consumer_key' : 'ochrome',
     'secret' : 'ochrome', 
     'app_type' : 'chrome',
     },
    ]
TEST_UIAPPS = scope(_TEST_UIAPPS, TestMachineApp)

TEST_SMART_MANIFESTS = [
('''
{
    "name" : "SMART TEST Problems",
    "description" : "Display problems in a table view",
    "author" : "Josh Mandel, Children's Hospital Boston",
    "id" : "problem-list-test@apps.smartplatforms.org",
    "version" : ".1a",
    "smart_version" : "0.4",

    "mode" : "ui",
    "scope": "record",

    "index" : "http://fda.gping.org:8012/framework/problem_list/index.html",	
    "icon" : "http://fda.gping.org:8012/framework/problem_list/icon.png",
  
    "requires" : {
        "http://smartplatforms.org/terms#Problem": {
            "methods": ["GET"]
        }
    }
}
''',
'''
{
    "consumer_key": "problem-list-test@apps.indivo.org",
    "consumer_secret": "problemstest"
}
'''),
]

TEST_USERAPP_MANIFESTS = [
('''
{
  "name" : "Problems TEST",
  "description" : "Display a list of problems, or enter new ones.",
  "author" : "Arjun Sanyal, Children's Hospital Boston",
  "id" : "problemstest@apps.indivo.org",
  "version" : "1.0.0",
  "smart_version": "0.4",

  "mode" : "ui",	
  "scope": "record",
  "has_ui": true,
  "frameable": true,

  "icon" :  "jmvc/ui/resources/images/app_icons_32/problems.png",
  "index": "/apps/problems/start_auth?record_id={record_id}&amp;carenet_id={carenet_id}",
  "oauth_callback_url": "/apps/problems/after_auth"
}
''',
'''
{
    "consumer_key": "problemstest@apps.indivo.org",
    "consumer_secret": "problemstest2"
}
'''),
]

TEST_ADMINAPP_MANIFESTS = [
('''
{
    "name": "Sample Admin App Test",
    "description" : "The reference Indivo UI App",
    "author" : "Ben Adida, Travers Franckle, Arjun Sanyal, Pascal Pfiffner, Daniel Haas. Children's Hospital Boston",
    "id" : "sample_admin_app_test@apps.indivo.org",
    "version" : "2.0.0",
    "indivo_version": "2.0.0",
    "ui_app": false
}
''',
'''
{
    "consumer_key": "sampleadmin_key_test",
    "consumer_secret": "sampleadmin_secret_test"
}
'''),
]

TEST_UIAPP_MANIFESTS = [
('''
{
    "name": "Sample UI App Test",
    "description" : "The reference Indivo UI App",
    "author" : "Ben Adida, Travers Franckle, Arjun Sanyal, Pascal Pfiffner, Daniel Haas. Children's Hospital Boston",
    "id" : "chrome_test@apps.indivo.org",
    "version" : "2.0.0",
    "indivo_version": "2.0.0",
    "ui_app": true
}
''',
'''
{
    "consumer_key": "chrome_test",
    "consumer_secret": "chrome_test"
}
'''),
]

########NEW FILE########
__FILENAME__ = authsystem
from indivo.models import AuthSystem
from base import *

class TestAuthSystem(TestModel):
    model_fields = ['short_name', 'internal_p',]
    model_class = AuthSystem

    def _setupargs(self, short_name, internal_p=False):
        self.short_name = short_name
        self.internal_p = internal_p

_TEST_AUTHSYSTEMS = [
    {'short_name':'mychildrens',
     'internal_p':False,
     },
    ]
TEST_AUTHSYSTEMS = scope(_TEST_AUTHSYSTEMS, TestAuthSystem)

########NEW FILE########
__FILENAME__ = base
import copy, random, string

__all__ = [
    'TestDataContext',
    'TestModel',
    'TestDataItem',
    'scope',
    'ForeignKey',
    'ManyToManyKey',
]

class TestDataContext(object):
    MARKED = 'marked'

    def __init__(self):
        self.subcontexts = [{}]

    def tdi_id(self, tdi):
        """ Get a unique id for the test_data. This is composed of two things:
            the actual id() of the list that it came from, and the index in that
            list. If we have a lazy item, we'll have to de-ref it here. """
        if tdi.lazy:
            tdi._get_data_list()
        return '%s_%s'%(str(id(tdi.data_list)),
                        str(tdi.index))        

    def del_model(self, test_data_id, subcontext_id):
        subcontext = self.subcontexts[subcontext_id]
        if subcontext.has_key(test_data_id):
            del subcontext[test_data_id]
        else:
            raise ValueError('No such model')

    def _add_subcontext(self):
        # DISABLED, FOR NOW
        # self.subcontexts.append({})
        return len(self.subcontexts) - 1

    def _generate_random_string(self, length=5):
        return "".join([random.choice(string.printable[0:62]) for i in range(length)])

    def _add_model(self, test_data_item, subcontext_id, force_create=False, **overrides):
        
        test_model_id = self.tdi_id(test_data_item)

        # Look for the desired model in our subcontext
        subcontext = self.subcontexts[subcontext_id]

        # First time we've ever seen this model: Mark for processing
        if not subcontext.has_key(test_model_id):
            subcontext[test_model_id] = self.MARKED
            
        # We've seen this model before, but it hasn't been fully saved yet
        # Ideally, we would handle this behavior in a sophisticated way
        # (i.e. add ourself to a queue for later processing).
        # But this is just test data, after all, and these chains can only 
        # occur if the test data is created with circular foreignkey references,
        # so let's just complain.
        elif subcontext[test_model_id] == self.MARKED:
            raise Exception('Circular references in test data: can\'t save test items.')
    
        # We've seen this model before, and it has been fully saved: just return it, unless
        # We've been explicitly told not to.
        elif not force_create:
            return subcontext[test_model_id]

        # We want to create 2 of the same model. Extend the model's id to make it unique.
        # NOTE: any reference to the same index of the same list will return the first
        # instance of the model, not this one. This one must be found using the identifier
        # passed into the TestModel constructor.
        else:
            test_model_id = '%s%s'%(test_model_id, self._generate_random_string())
            subcontext[test_model_id] = self.MARKED

        # create the model, with info that points to this specific subcontext
        raw_data_dict = copy.deepcopy(test_data_item.raw_data)
        raw_data_dict.update(identifier=test_model_id, context=self, subcontext_id=subcontext_id)
        raw_data_dict.update(overrides)
        test_model = test_data_item.tm_subclass(**raw_data_dict)

        # register it with our subcontext, now that processing is done
        subcontext[test_model_id] = test_model
        return test_model

    def add_key(self, key, from_instance):
        subcontext_id = from_instance.subcontext_id
        try:
            ret = []
            for test_data_item in key.to:
                ret.append(self._add_model(test_data_item, subcontext_id))
            return ret
        except TypeError:
            return self._add_model(key.to, subcontext_id)

    def add_model(self, test_data_item, **overrides):
        subcontext_id = self._add_subcontext()
        return self._add_model(test_data_item, subcontext_id, **overrides)

class TestModel(object):
    model_fields = [] # A list of field names needed to construct a Django Model
    model_class = None # The Django Model Subclass to construct

    def __init__(self, identifier, context, subcontext_id, **subclass_args):
        self.identifier = identifier
        self.context = context
        self.subcontext_id = subcontext_id
        self._setupargs(**subclass_args)
        self.marked_for_save = False

    def _setupargs(self, **subclass_args):
        """ Should be overriden by subclasses to take initialization args 
            and set up the subclass model. """
        raise NotImplementedError

    def update(self, field_dict, **fields):
        field_dict.update(fields)
        for k, v in field_dict.iteritems():
            setattr(self, k, v)

    def __setattr__(self, item, value):
        """Update our django_object whenever our fields get updated. Follow foreignKeys. """

        # setup foreign keys
        self_attr_val, django_obj_attr_val = self._foreign_key_check(value)

        # update the django object
        if hasattr(self, 'django_obj') and item in self.model_fields:
            setattr(self.django_obj, item, django_obj_attr_val)
            self.dirty = True

        return super(TestModel, self).__setattr__(item, self_attr_val)

    def _foreign_key_check(self, field):
        if isinstance(field, ForeignKey):
            tm = self.context.add_key(field, self)
            return (tm, tm.save())
        elif isinstance(field, TestModel):
            return (field, field.save())
        elif isinstance(field, ManyToManyKey):
            tms = self.context.add_key(field, self)
            return (tms, [tm.save() for tm in tms])
        elif isinstance(field, list) and field and isinstance(field[0], TestModel):
            return (field, [tm.save() for tm in field])
        return (field, field)

    def build_django_obj(self):
        # handle foreign keys
        model_args = dict([(f, self._foreign_key_check(getattr(self, f))[1]) for f in self.model_fields])
        self.django_obj = self.model_class(**model_args)

    def save(self):

        # Make sure we've built the object to save
        dobj_p = getattr(self, 'django_obj', False)
        if not dobj_p:
            self.build_django_obj()

        # Save our django object
        dirty_p = getattr(self, 'dirty', True)
        if dirty_p:
            self.django_obj.save()
            self.dirty = False

        return self.django_obj

class TestDataItem(object):
    def __init__(self, index, module_name=None, list_name=None, data_list=None, lazy=False):
        self.index = index
        self.lazy = lazy
        if lazy:
            self.module_name = module_name
            self.list_name = list_name
            self.data_list = None            
        else:
            self.data_list = data_list

    def _get_data_list(self):
        self.data_list = getattr(__import__(self.module_name, globals(), locals(), [self.list_name], -1), self.list_name)

    @property
    def tm_subclass(self):
        if self.data_list is None:
            self._get_data_list()
        return self.data_list.model_class

    @property
    def raw_data(self):
        if self.data_list is None:
            self._get_data_list()
        return self.data_list[self.index]

def scope(raw_list, tm_subclass):

    class TestModelScopedList(list):
        def __init__(self, tm_subclass, *args, **kwargs):
            self.model_class = tm_subclass
            return super(TestModelScopedList, self).__init__(*args, **kwargs)

        def __add__(self, other):
            """ Allow concatenation of multiple scoped lists with the same tm_subclass. """
            other_model_class = getattr(other, 'model_class', None)
            if other_model_class and other_model_class == self.model_class:
                return TestModelScopedList(self.model_class, super(TestModelScopedList, self).__add__(other))
            else:
                raise TypeError('Can only concatenate TestModelScopedLists with the same TestModel subclasses')

    return TestModelScopedList(tm_subclass, raw_list)

class Key(object):
    def __init__(self, module_name, list_name, index_arg):
        self.module_name = module_name
        self.list_name = list_name
        self.index_arg = index_arg

    @property
    def to(self):
        """ Should return the raw TestDataIdentifier(s) pointed to by the key. """
        raise NotImplementedError

class ForeignKey(Key):

    @property
    def to(self):
        return TestDataItem(self.index_arg, module_name=self.module_name, list_name=self.list_name, lazy=True)

class ManyToManyKey(Key):
    
    @property
    def to(self):
        return [TestDataItem(i, module_name=self.module_name, 
                             list_name=self.list_name, lazy=True) for i in self.index_arg]

########NEW FILE########
__FILENAME__ = carenet
from indivo.models import Carenet
from base import *

class TestCarenet(TestModel):
    model_fields = ['name', 'record']
    model_class = Carenet

    def _setupargs(self, name, record=None):
        self.name = name
        self.record = record

_TEST_CARENETS = [
    {'name': 'test_carenet', 
     'record': ForeignKey('record', 'TEST_RECORDS', 0),
     }
]
TEST_CARENETS = scope(_TEST_CARENETS, TestCarenet)

########NEW FILE########
__FILENAME__ = demographics
from indivo.models import Demographics
from base import ForeignKey, TestModel, scope

class TestDemographics(TestModel):
    # small subset of actual demographics info
    model_fields = ['name_family', 'name_given', 'bday', 'gender', 'email', 'document']
    model_class = Demographics

    def _setupargs(self, family_name, given_name, bday, gender, email=None, demographics_doc=None):
        self.name_family = family_name
        self.name_given = given_name
        self.bday = bday
        self.gender = gender
        self.email = email
        self.document = demographics_doc

_TEST_DEMOGRAPHICS = [
    {'family_name':'Wayne',
     'given_name': 'Bruce',
     'email': 'test@fake.org',
     'bday': '1939-11-15',
     'gender': 'male',
     'demographics_doc': ForeignKey('document', 'TEST_DEMOGRAPHICS_DOCS', 0)
     },
    {'family_name':'Testerson',
     'given_name': 'Test',
     'email': 'test2@fake.org',
     'bday': '1975-01-19',
     'gender': 'female',
     'demographics_doc': ForeignKey('document', 'TEST_DEMOGRAPHICS_DOCS', 1)
     },
    {'family_name':'McGee',
     'given_name': 'Testy',
     'email': 'test3@fake.org',
     'bday': '1985-06-01',
     'gender': 'female',
     'demographics_doc': ForeignKey('document', 'TEST_DEMOGRAPHICS_DOCS', 2)
     },
]
TEST_DEMOGRAPHICS = scope(_TEST_DEMOGRAPHICS, TestDemographics)


TEST_DEMOGRAPHICS_XML = '''
    <Demographics xmlns="http://indivo.org/vocab/xml/documents#">
        <dateOfBirth>1939-11-15</dateOfBirth>
        <gender>male</gender>
        <email>test@fake.org</email>
        <ethnicity>Scottish</ethnicity>
        <preferredLanguage>EN</preferredLanguage>
        <race>caucasian</race>
        <Name>
            <familyName>Wayne</familyName>
            <givenName>Bruce</givenName>
            <middleName>Quentin</middleName>
            <prefix>Mr</prefix>
            <suffix>Jr</suffix>
        </Name>
        <Telephone>
            <type>h</type>
            <number>555-5555</number>
            <preferred>true</preferred>
        </Telephone>
        <Telephone>
            <type>c</type>
            <number>555-6666</number>
            <preferred>false</preferred>
        </Telephone>
        <Address>
            <country>USA</country>
            <city>Gotham</city>
            <postalCode>90210</postalCode>
            <region>secret</region>
            <street>1007 Mountain Drive</street>
        </Address>
    </Demographics>
'''

TEST_DEMOGRAPHICS_RDFXML = '''
    <?xml version="1.0" encoding="UTF-8"?>
    <rdf:RDF xmlns:dcterms="http://purl.org/dc/terms/"    
             xmlns:foaf="http://xmlns.com/foaf/0.1/"    
             xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"    
             xmlns:sp="http://smartplatforms.org/terms#"    
             xmlns:v="http://www.w3.org/2006/vcard/ns#" >
        <rdf:Description rdf:about="http://indivo.org/records/65c9e500-fdcf-4ba3-87ed-6eb265344d84/demographics">
            <v:n rdf:nodeID="_d9d1cbfe-46b9-4534-80cc-c3558cde379f"/>
            <foaf:gender>male</foaf:gender>
            <sp:belongsTo rdf:resource="http://indivo.org/records/65c9e500-fdcf-4ba3-87ed-6eb265344d84"/>
            <sp:ethnicity>Scottish</sp:ethnicity>
            <sp:preferredLanguage>EN</sp:preferredLanguage>
            <rdf:type rdf:resource="http://smartplatforms.org/terms#Demographics"/>
            <v:adr rdf:nodeID="_32774cc8-7eed-45f2-8a1b-663e6c90553b"/>
            <sp:email>test@fake.org</sp:email>
            <v:tel rdf:nodeID="_1f1e7c5d-69c7-466f-bc6e-3b3866adb055"/>
            <v:tel rdf:nodeID="_ab23417c-7d76-4c87-98d1-f081a84e9a10"/>
            <sp:race>caucasian</sp:race>
            <sp:medicalRecordNumber rdf:resource="Indivo Recordhttp://indivo.org/records/65c9e500-fdcf-4ba3-87ed-6eb265344d84"/>
            <v:bday rdf:datatype="http://www.w3.org/2001/XMLSchema#date">1939-11-15</v:bday>
        </rdf:Description>
        <rdf:Description rdf:nodeID="_d9d1cbfe-46b9-4534-80cc-c3558cde379f">
            <v:given-name>Bruce</v:given-name>
            <v:honorific-prefix>Mr</v:honorific-prefix>
            <rdf:type rdf:resource="http://www.w3.org/2006/vcard/ns#Name"/>
            <v:honorific-suffix>Jr</v:honorific-suffix>
            <v:family-name>Wayne</v:family-name>
            <v:additional-name>Quentin</v:additional-name>
        </rdf:Description>
        <rdf:Description rdf:about="Indivo Recordhttp://indivo.org/records/65c9e500-fdcf-4ba3-87ed-6eb265344d84">
            <sp:system>Indivo Record</sp:system>
            <rdf:type rdf:resource="http://smartplatforms.org/terms#Code"/>
            <dcterms:identifier>http://indivo.org/records/65c9e500-fdcf-4ba3-87ed-6eb265344d84</dcterms:identifier>
            <dcterms:title>Indivo Record 65c9e500-fdcf-4ba3-87ed-6eb265344d84</dcterms:title>
        </rdf:Description>
        <rdf:Description rdf:nodeID="_32774cc8-7eed-45f2-8a1b-663e6c90553b">
            <v:locality>Gotham</v:locality>
            <v:country>USA</v:country>
            <rdf:type rdf:resource="http://www.w3.org/2006/vcard/ns#Address"/>
            <v:region>secret</v:region>
            <v:postal-code>90210</v:postal-code>
            <v:street-address>1007 Mountain Drive</v:street-address>
        </rdf:Description>
        <rdf:Description rdf:nodeID="_ab23417c-7d76-4c87-98d1-f081a84e9a10">
            <rdf:value>555-5555</rdf:value>
            <rdf:type rdf:resource="http://www.w3.org/2006/vcard/ns#Tel"/>
            <rdf:type rdf:resource="http://www.w3.org/2006/vcard/ns#Pref"/>
            <rdf:type rdf:resource="http://www.w3.org/2006/vcard/ns#Home"/>
        </rdf:Description>
        <rdf:Description rdf:nodeID="_1f1e7c5d-69c7-466f-bc6e-3b3866adb055">
            <rdf:value>555-6666</rdf:value>
            <rdf:type rdf:resource="http://www.w3.org/2006/vcard/ns#Cell"/>
            <rdf:type rdf:resource="http://www.w3.org/2006/vcard/ns#Tel"/>
            <rdf:type rdf:resource="http://www.w3.org/2006/vcard/ns#Pref"/>
        </rdf:Description>
    </rdf:RDF>
'''

TEST_DEMOGRAPHICS_SDMX = '''
    <Models>
        <Model name="Demographics">
            <Field name="bday">1939-11-15T00:00:00Z</Field>
            <Field name="email">test@fake.org</Field>
            <Field name="ethnicity">Scottish</Field>
            <Field name="gender">male</Field>
            <Field name="preferred_language">EN</Field>
            <Field name="race">caucasian</Field>
            <Field name="name_given">Bruce</Field>
            <Field name="name_suffix">Jr</Field>
            <Field name="name_middle">Quentin</Field>
            <Field name="name_family">Wayne</Field>
            <Field name="name_prefix">Mr</Field>
            <Field name="tel_2_type">c</Field>
            <Field name="tel_2_preferred_p"/>
            <Field name="tel_2_number">555-6666</Field>
            <Field name="adr_region">secret</Field>
            <Field name="adr_country">USA</Field>
            <Field name="adr_postalcode">90210</Field>
            <Field name="adr_city">Gotham</Field>
            <Field name="adr_street">1007 Mountain Drive</Field>
            <Field name="tel_1_type">h</Field>
            <Field name="tel_1_preferred_p">true</Field>
            <Field name="tel_1_number">555-5555</Field>
        </Model>
    </Models>
'''

TEST_DEMOGRAPHICS_SDMJ = '''
    [
        {
            "tel_1_preferred_p": true,
            "adr_region": "secret",
            "tel_2_number": "555-6666",
            "__modelname__": "Demographics",
            "adr_city": "Gotham",
            "ethnicity": "Scottish",
            "adr_postalcode": "90210",
            "name_family": "Wayne",
            "name_middle": "Quentin",
            "tel_1_type": "h",
            "tel_2_type": "c",
            "name_prefix": "Mr",
            "email": "test@fake.org",
            "name_given": "Bruce",
            "adr_street": "1007 Mountain Drive",
            "bday": "1939-11-15T00:00:00Z",
            "tel_1_number": "555-5555",
            "preferred_language": "EN",
            "gender": "male",
            "name_suffix": "Jr",
            "tel_2_preferred_p": false,
            "race": "caucasian",
            "adr_country": "USA"
        }
    ]
'''

########NEW FILE########
__FILENAME__ = document
from indivo.models import Document
from base import *
import hashlib

class TestDocument(TestModel):
    model_fields = ['content', 'record', 'pha', 'label', 'creator', 'external_id', 'mime_type']
    model_class = Document

    def _setupargs(self, content, record=None, pha_spec=False, 
                 pha=None, label='testing', creator=None, external_id=None, mime_type='application/xml'):
        self.content = content
        self.mime_type = mime_type
        self.record = record
        self.pha = pha
        self.local_external_id = external_id
        if self.pha:
            self.external_id = Document.prepare_external_id(external_id, self.pha, pha_spec, record)
        else:
            self.external_id = None

        if not pha_spec:
            self.pha = None

        self.label = label
        self.creator = creator

    def save(self):
        """ Special case: original_id might be a pointer to self, which ForeignKey doesn't support. """
        super(TestDocument, self).save()
        if not Document.objects.filter(pk=self.django_obj.original_id).exists():
            self.django_obj.original = None
            self.django_obj.save()

        return self.django_obj

# TEST_DOCS have no default records: they should always be created with override args of
# (at least) record=some_existing_record

# Docs 1-5 have external ids, docs 6-11 don't
_TEST_R_DOCS = [
    {'label':'rdoc1',
     'content':"<Document id='HELLOWORLD00' xmlns='http://indivo.org/vocab#'></Document>",
     'record': None,
     'pha': ForeignKey('app', 'TEST_USERAPPS',0),
     'creator': ForeignKey('app', 'TEST_USERAPPS', 0),
     'external_id':'external_rdoc1',
     'pha_spec':False
     },
    {'label':'rdoc2',
     'content':"<Document id='HELLOWORLD01' xmlns='http://indivo.org/vocab#'></Document>",
     'record': None,
     'pha': ForeignKey('app', 'TEST_USERAPPS',0),
     'creator': ForeignKey('app', 'TEST_USERAPPS', 0),
     'external_id':'external_rdoc2',
     'pha_spec':False
     },
    {'label':'rdoc3',
     'content':"<Document id='HELLOWORLD02' xmlns='http://indivo.org/vocab#'></Document>",
     'record': None,
     'pha': ForeignKey('app', 'TEST_USERAPPS',0),
     'creator': ForeignKey('app', 'TEST_USERAPPS', 0),
     'external_id':'external_rdoc3',
     'pha_spec':False
     },    
    {'label':'rdoc4',
     'content':"<Document id='HELLOWORLD03' xmlns='http://indivo.org/vocab#'></Document>",
     'record': None,
     'pha': ForeignKey('app', 'TEST_USERAPPS',0),
     'creator': ForeignKey('app', 'TEST_USERAPPS', 0),
     'external_id':'external_rdoc4',
     'pha_spec':False
     },
    {'label':'rdoc5',
     'content':"<Document id='HELLOWORLD04' xmlns='http://indivo.org/vocab#'></Document>",
     'record': None,
     'pha': ForeignKey('app', 'TEST_USERAPPS',0),
     'creator': ForeignKey('app', 'TEST_USERAPPS', 0),
     'external_id':'external_rdoc5',
     'pha_spec':False
     },
    {'label':'rdoc6',
     'content':"<Document id='HELLOWORLD05' xmlns='http://indivo.org/vocab#'></Document>",
     'record': None, 
     'creator': ForeignKey('app', 'TEST_USERAPPS', 0),
      },
    {'label':'rdoc7',
     'content':"<Document id='HELLOWORLD06' xmlns='http://indivo.org/vocab#'></Document>",
     'record': None,
     'creator': ForeignKey('app', 'TEST_USERAPPS', 0),
 
     },
    {'label':'rdoc8',
     'content':"<Document id='HELLOWORLD07' xmlns='http://indivo.org/vocab#'></Document>",
     'record': None,
     'creator': ForeignKey('app', 'TEST_USERAPPS', 0),
     },
    {'label':'rdoc9',
     'content':"<Document id='HELLOWORLD08' xmlns='http://indivo.org/vocab#'></Document>",
     'record': None,
     'creator': ForeignKey('app', 'TEST_USERAPPS', 0),
     },
    {'label':'rdoc10',
     'content':"<Document id='HELLOWORLD09' xmlns='http://indivo.org/vocab#'></Document>",
     'record': None, 
     'creator': ForeignKey('app', 'TEST_USERAPPS', 0),
     },
    {'label':'rdoc11', # The crazy one
     'content':"<CrazyDocument id='HELLOWORLD10' xmlns='http://indivo.org/vocab#'></CrazyDocument>",
     'record': None, 
     'creator': ForeignKey('app', 'TEST_USERAPPS', 0),
     },
    {'label':'rdoc12',
     'content':"<Document id='HELLOWORLD11' xmlns='http://indivo.org/vocab#'>This will be set as a binary doc</Document>",
     'record': None,
     'pha': ForeignKey('app', 'TEST_USERAPPS',0),
     'creator': ForeignKey('app', 'TEST_USERAPPS', 0),
     'external_id':'external_rdoc2',
     'pha_spec':False,
     'mime_type':'image/gif'
     }
]
TEST_R_DOCS = scope(_TEST_R_DOCS, TestDocument)

# Doc 1 has no ext_id, Doc 2 does
_TEST_RA_DOCS = [
    {'label':'radoc1',
     'content':"<Document id='HELLOWORLD01' xmlns='http://indivo.org/vocab#'></Document>",
     'record': None, 
     'pha': ForeignKey('app', 'TEST_USERAPPS',0),
     'creator': ForeignKey('app', 'TEST_USERAPPS', 0),
     'pha_spec':True
     },
    {'label':'radoc2',
     'content':"<Document id='HELLOWORLD02' xmlns='http://indivo.org/vocab#'></Document>",
     'record': None, 
     'pha': ForeignKey('app', 'TEST_USERAPPS',0),
     'creator': ForeignKey('app', 'TEST_USERAPPS', 0),
     'external_id':'external_radoc2',
     'pha_spec':True
     },
]
TEST_RA_DOCS = scope(_TEST_RA_DOCS, TestDocument)

# Doc 1 has no ext_id, Doc 2 does
_TEST_A_DOCS = [
    {'label':'adoc1',
     'content':"<Document id='HELLOWORLD01' xmlns='http://indivo.org/vocab#'></Document>",
     'pha': ForeignKey('app', 'TEST_USERAPPS',0),
     'creator': ForeignKey('app', 'TEST_USERAPPS', 0),
     'pha_spec':True
     },
    {'label':'adoc2',
     'content':"<Document id='HELLOWORLD02' xmlns='http://indivo.org/vocab#'></Document>",
     'pha': ForeignKey('app', 'TEST_USERAPPS',0),
     'creator': ForeignKey('app', 'TEST_USERAPPS', 0),
     'external_id':'external_adoc2',
     'pha_spec':True
     },
]
TEST_A_DOCS = scope(_TEST_A_DOCS, TestDocument)

_TEST_DEMOGRAPHICS_DOCS = [
    {'label':'demo1',
     'record':None,
     'content':'''<Demographics xmlns="http://indivo.org/vocab/xml/documents#">
                    <dateOfBirth>1939-11-15</dateOfBirth>
                    <gender>male</gender>
                    <email>test@fake.org</email>
                    <ethnicity>Scottish</ethnicity>
                    <preferredLanguage>EN</preferredLanguage>
                    <race>caucasian</race>
                    <Name>
                        <familyName>Wayne</familyName>
                        <givenName>Bruce</givenName>
                        <middleName>Quentin</middleName>
                        <prefix>Mr</prefix>
                        <suffix>Jr</suffix>
                    </Name>
                    <Telephone>
                        <type>h</type>
                        <number>555-5555</number>
                        <preferred>true</preferred>
                    </Telephone>
                    <Telephone>
                        <type>c</type>
                        <number>555-6666</number>
                        <preferred>false</preferred>
                    </Telephone>
                    <Address>
                        <country>USA</country>
                        <city>Gotham</city>
                        <postalCode>90210</postalCode>
                        <region>secret</region>
                        <street>1007 Mountain Drive</street>
                    </Address>
                </Demographics>'''},  
    {'label':'demo1',
     'record':None,
     'content':'''<Demographics xmlns="http://indivo.org/vocab/xml/documents#">
                    <dateOfBirth>1975-01-19</dateOfBirth>
                    <gender>female</gender>
                    <email>test2@fake.org</email>
                    <ethnicity>Scottish</ethnicity>
                    <preferredLanguage>english</preferredLanguage>
                    <race>caucasian</race>
                    <Name>
                        <familyName>Testerson</familyName>
                        <givenName>Test</givenName>
                    </Name>
                    <Telephone>
                        <type>h</type>
                        <number>555-5555</number>
                        <preferred>true</preferred>
                    </Telephone>
                    <Telephone>
                        <type>c</type>
                        <number>555-6666</number>
                    </Telephone>
                    <Address>
                        <country>USA</country>
                        <city>Gotham</city>
                        <postalCode>90210</postalCode>
                        <region>secret</region>
                        <street>1007 Mountain Drive</street>
                    </Address>
                </Demographics>'''},
    {'label':'demo1',
     'record':None,
     'content':'''<Demographics xmlns="http://indivo.org/vocab/xml/documents#">
                    <dateOfBirth>1985-06-01</dateOfBirth>
                    <gender>female</gender>
                    <email>test3@fake.org</email>
                    <ethnicity>Scottish</ethnicity>
                    <preferredLanguage>english</preferredLanguage>
                    <race>caucasian</race>
                    <Name>
                        <familyName>McGee</familyName>
                        <givenName>Testy</givenName>
                    </Name>
                    <Telephone>
                        <type>h</type>
                        <number>555-5555</number>
                        <preferred>true</preferred>
                    </Telephone>
                    <Telephone>
                        <type>c</type>
                        <number>555-6666</number>
                    </Telephone>
                    <Address>
                        <country>USA</country>
                        <city>Gotham</city>
                        <postalCode>90210</postalCode>
                        <region>secret</region>
                        <street>1007 Mountain Drive</street>
                    </Address>
                </Demographics>'''},
]
TEST_DEMOGRAPHICS_DOCS = scope(_TEST_DEMOGRAPHICS_DOCS, TestDocument)


########NEW FILE########
__FILENAME__ = document_processing
TEST_DOCUMENT_PROCESSING_DOCS = ['''<TestMed xmlns="http://indivo.org/vocab/xml/documents#">
    <dateStarted>2010-10-01T00:00:00Z</dateStarted>
    <name>med1</name>
    <brandName>Advil</brandName>
    <frequency>2</frequency>
    <Prescription>
        <prescribedByName>Kenneth D. Mandl</prescribedByName>
        <prescribedOn>2010-09-30T00:00:00Z</prescribedOn>
    </Prescription>
    <TestFills>
        <TestFill>
            <dateFilled>2010-10-01T00:00:00Z</dateFilled>
            <supplyDays>30</supplyDays>
        </TestFill>
        <TestFill>
            <dateFilled>2010-10-16T00:00:00Z</dateFilled>
            <supplyDays>30</supplyDays>
        </TestFill>
    </TestFills>
</TestMed>''']

########NEW FILE########
__FILENAME__ = message
from indivo.models import Message, MessageAttachment
from indivo.document_processing.document_processing import DocumentProcessing
from base import *
from reports.allergy import TEST_ALLERGIES

class TestMessage(TestModel):
    model_fields = ['sender', 'recipient', 'external_identifier', 'account', 'about_record',
                    'severity', 'subject', 'body_type', 'body', 'num_attachments']
    model_class = Message
    
    def _setupargs(self, body='NO BODY', sender=None, recipient=None, message_id=None, account=None, about_record=None,
                   severity='low', subject='NO SUBJECT', body_type='plaintext', num_attachments=0):
        self.sender=sender
        self.recipient=recipient
        self.external_identifier = message_id
        self.account=account
        self.about_record=about_record
        self.severity=severity
        self.subject=subject
        self.body_type=body_type,
        self.body = body
        self.num_attachments = num_attachments

class TestMessageAttachment(TestModel):
    model_fields = ['message', 'attachment_num', 'content', 'size', 'type']
    model_class = MessageAttachment
    
    def _setupargs(self, attachment_num=1, message=None, content='<?xml version="1.0" ?><body></body>', 
                   size=None, type=None):
        self.message = message
        self.attachment_num = attachment_num
        self.content = content
        self.size = size or len(content)
        self.type = type or DocumentProcessing(content, 'application/xml').xml_type

_TEST_MESSAGES = [
    {'subject':'test 1', 
     'body':'hello world', 
     'message_id':'msg_01', 
     'severity':'medium',
     'account': ForeignKey('account', 'TEST_ACCOUNTS', 0),
     'sender': ForeignKey('account', 'TEST_ACCOUNTS', 0),
     'recipient': ForeignKey('account', 'TEST_ACCOUNTS', 1),
     'about_record': ForeignKey('record', 'TEST_RECORDS', 0),
     },
    {'subject':'test 2', 
     'body':'hello mars', 
     'message_id':'msg_02', 
     'severity':'high',
     'account': ForeignKey('account', 'TEST_ACCOUNTS', 0),
     'sender': ForeignKey('account', 'TEST_ACCOUNTS', 0),
     'recipient': ForeignKey('account', 'TEST_ACCOUNTS', 1),
     'about_record': ForeignKey('record', 'TEST_RECORDS', 0),
     },
    {'subject':'subj',
     'body':'message_body',
     'message_id':'msg_id',
     'body_type':'plaintext',
     'severity':'low',
     'num_attachments':1,
     'account': ForeignKey('account', 'TEST_ACCOUNTS', 0),
     'sender': ForeignKey('account', 'TEST_ACCOUNTS', 0),
     'recipient': ForeignKey('account', 'TEST_ACCOUNTS', 1),
     'about_record': ForeignKey('record', 'TEST_RECORDS', 0),
     },
    {'subject':'subj2',
     'body':'message_body2',
     'message_id':'msg_id2',
     'body_type':'plaintext',
     'severity':'low',
     'num_attachments':1,
     'account': ForeignKey('account', 'TEST_ACCOUNTS', 0),
     'sender': ForeignKey('account', 'TEST_ACCOUNTS', 0),
     'recipient': ForeignKey('account', 'TEST_ACCOUNTS', 1),
     'about_record': ForeignKey('record', 'TEST_RECORDS', 0),
     },
    ]
TEST_MESSAGES = scope(_TEST_MESSAGES, TestMessage)

_TEST_ATTACHMENTS = [
    {'message': ForeignKey('message', 'TEST_MESSAGES', 2),
     'attachment_num': 1,
     'content':'<?xml version="1.0" ?><body></body>',
     'size':len('<?xml version="1.0" ?><body></body>'),
     'type':'body'
     },
    {'message': ForeignKey('message', 'TEST_MESSAGES', 3),
     'attachment_num': 1,
     'content': TEST_ALLERGIES[0]['content'],
     'size':len(TEST_ALLERGIES[0]['content']),
     'type':'http://indivo.org/vocab/xml/documents#Models',
     },
    ]
TEST_ATTACHMENTS = scope(_TEST_ATTACHMENTS, TestMessageAttachment)

########NEW FILE########
__FILENAME__ = record
from indivo.models import Record, Demographics
from base import *

class TestRecord(TestModel):
    model_fields = ['label', 'demographics', 'owner', 'external_id']
    model_class = Record

    def _setupargs(self, label, demographics=None, owner=None, external_id=None, extid_principal_key=None):
        self.label = label
        self.demographics = demographics
        self.owner = owner
        self.local_external_id = external_id
        if extid_principal_key:
            self.external_id = Record.prepare_external_id(external_id, extid_principal_key.to.raw_data['account_id'])
        else:
            self.external_id = None

_TEST_RECORDS = [
    {'label':'testing_record_label',
     'demographics':ForeignKey('demographics', 'TEST_DEMOGRAPHICS', 0),
     'owner':ForeignKey('account', 'TEST_ACCOUNTS', 0),
     },
    {'label':'test_record_label2',
     'demographics':ForeignKey('demographics', 'TEST_DEMOGRAPHICS', 1),
     'owner':ForeignKey('account', 'TEST_ACCOUNTS', 0),
     },
    {'label':'empty_record',
     },
    {'label':'bob',
     'owner':ForeignKey('account', 'TEST_ACCOUNTS', 0),
     },
    {'label':'jane',
     'owner':ForeignKey('account', 'TEST_ACCOUNTS', 0),
     },
    {'label':'test_record_extid',
     'demographics':ForeignKey('demographics', 'TEST_DEMOGRAPHICS', 2),
     'owner':ForeignKey('account', 'TEST_ACCOUNTS', 0),
     'external_id':'RECORD5_EXTID',
     'extid_principal_key':ForeignKey('account', 'TEST_ACCOUNTS', 4),
     },

]
TEST_RECORDS = scope(_TEST_RECORDS, TestRecord)

########NEW FILE########
__FILENAME__ = allergy
from base import report_content_to_test_docs

_TEST_ALLERGIES_INVALID = [
    # an allergy with the wrong schema, should trigger a validation error
    """
<Models xmlns='http://indivo.org/vocab/xml/documents#'>
  <Model name="Allergy">
    <Field name="allergic_reaction_title">Anaphylaxis</Field>
    <Field name="allergic_reaction_system">http://purl.bioontology.org/ontology/SNOMEDCT/</Field>
    <Field name="allergic_reaction_identifier">39579001</Field>
    <Field name="category_title">Drug allergy</Field>
    <Field name="category_system">http://purl.bioontology.org/ontology/SNOMEDCT/</Field>
    <Field name="category_identifier">416098002</Field>
    <Field name="drug_class_allergen_title">Sulfonamide Antibacterial</Field>
    <Field name="drug_class_allergen_system">http://purl.bioontology.org/ontology/NDFRT/</Field>
    <Field name="drug_class_allergen_identifier">N0000175503</Field>
    <Field name="severity_title">Severe</Field>
    <Field name="severity_system">http://purl.bioontology.org/ontology/SNOMEDCT/</Field>
    <Field name="severity_identifier">24484000</Field>
    <Monkey name="woahthere">THIS SHOULDN'T BE THERE</Monkey>
  </Model>
</Models>
""",
]

_TEST_ALLERGIES = [
    """
<Models xmlns='http://indivo.org/vocab/xml/documents#'>
  <Model name="Allergy">
    <Field name="allergic_reaction_title">Anaphylaxis</Field>
    <Field name="allergic_reaction_system">http://purl.bioontology.org/ontology/SNOMEDCT/</Field>
    <Field name="allergic_reaction_identifier">39579001</Field>
    <Field name="category_title">Drug allergy</Field>
    <Field name="category_system">http://purl.bioontology.org/ontology/SNOMEDCT/</Field>
    <Field name="category_identifier">416098002</Field>
    <Field name="drug_class_allergen_title">Sulfonamide Antibacterial</Field>
    <Field name="drug_class_allergen_system">http://purl.bioontology.org/ontology/NDFRT/</Field>
    <Field name="drug_class_allergen_identifier">N0000175503</Field>
    <Field name="severity_title">Severe</Field>
    <Field name="severity_system">http://purl.bioontology.org/ontology/SNOMEDCT/</Field>
    <Field name="severity_identifier">24484000</Field>
  </Model>
</Models>
""",
]

TEST_ALLERGIES_INVALID = report_content_to_test_docs(_TEST_ALLERGIES_INVALID)
TEST_ALLERGIES = report_content_to_test_docs(_TEST_ALLERGIES)

########NEW FILE########
__FILENAME__ = base
from indivo.tests.data.base import *
from indivo.tests.data.document import TestDocument

def report_content_to_test_docs(content_list):
    default_args = {'label':'report_doc',
                    'record':ForeignKey('record', 'TEST_RECORDS', 0),
                    'creator':ForeignKey('account','TEST_ACCOUNTS',0),
                    }
    raw_data = [dict(default_args, content=c) for c in content_list]
    raw_data = scope(raw_data, TestDocument)
    return raw_data

########NEW FILE########
__FILENAME__ = equipment
from base import report_content_to_test_docs

_TEST_EQUIPMENT = [
    """
<Equipment xmlns='http://indivo.org/vocab/xml/documents#'>
  <dateStarted>2010-09-01</dateStarted>
  <name>Tractor</name> 
  <vendor>John Deer</vendor> 
  <description>Hello World</description>
</Equipment>
""",

    """
<Equipment xmlns="http://indivo.org/vocab/xml/documents#">
  <dateStarted>2010-09-02</dateStarted>
  <name>cane</name>
</Equipment>
"""
]

TEST_EQUIPMENT = report_content_to_test_docs(_TEST_EQUIPMENT)

########NEW FILE########
__FILENAME__ = immunization
from base import report_content_to_test_docs

_TEST_IMMUNIZATIONS = [
    """
<Models xmlns='http://indivo.org/vocab/xml/documents#'>
  <Model name="Immunization">
    <Field name="date">2009-05-16T12:00:00Z</Field>
    <Field name="administration_status_title">Not Administered</Field>
    <Field name="administration_status_system">http://smartplatforms.org/terms/codes/ImmunizationAdministrationStatus#</Field>
    <Field name="administration_status_identifier">notAdministered</Field> 
    <Field name="product_class_title">TYPHOID</Field>
    <Field name="product_class_system">http://www2a.cdc.gov/nip/IIS/IISStandards/vaccines.asp?rpt=vg#</Field>
    <Field name="product_class_identifier">TYPHOID</Field>
    <Field name="product_name_title">typhoid, oral</Field>
    <Field name="product_name_system">http://www2a.cdc.gov/nip/IIS/IISStandards/vaccines.asp?rpt=cvx#</Field>
    <Field name="product_name_identifier">25</Field>
    <Field name="refusal_reason_title">Allergy to vaccine/vaccine components, or allergy to eggs</Field>
    <Field name="refusal_reason_system">http://smartplatforms.org/terms/codes/ImmunizationRefusalReason#</Field>
    <Field name="refusal_reason_identifier">allergy</Field>
  </Model>
</Models>
""",
]

TEST_IMMUNIZATIONS = report_content_to_test_docs(_TEST_IMMUNIZATIONS)

########NEW FILE########
__FILENAME__ = lab
from base import report_content_to_test_docs

_TEST_LABS = [
"""
<Models xmlns="http://indivo.org/vocab/xml/documents#"> 
  <Model name="LabResult">
    <Field name="abnormal_interpretation_title">Normal</Field>
    <Field name="abnormal_interpretation_system">http://smartplatforms.org/terms/codes/LabResultInterpretation#</Field>
    <Field name="abnormal_interpretation_identifier">normal</Field>

    <Field name="accession_number">AC09205823577</Field>

    <Field name="test_name_title">Serum Sodium</Field>
    <Field name="test_name_system">http://purl.bioontology.org/ontology/LNC/</Field>
    <Field name="test_name_identifier">2951-2</Field>

    <Field name="status_title">Final results: complete and verified</Field>
    <Field name="status_system">http://smartplatforms.org/terms/codes/LabStatus#</Field>
    <Field name="status_identifier">final</Field>

    <Field name="notes">Blood sample appears to have hemolyzed</Field>

    <Field name="quantitative_result_non_critical_range_max_value">155</Field>
    <Field name="quantitative_result_non_critical_range_max_unit">mEq/L</Field>
    <Field name="quantitative_result_non_critical_range_min_value">120</Field>
    <Field name="quantitative_result_non_critical_range_min_unit">mEq/L</Field>

    <Field name="quantitative_result_normal_range_max_value">145</Field>
    <Field name="quantitative_result_normal_range_max_unit">mEq/L</Field>
    <Field name="quantitative_result_normal_range_min_value">135</Field>
    <Field name="quantitative_result_normal_range_min_unit">mEq/L</Field>

    <Field name="quantitative_result_value_value">140</Field> 
    <Field name="quantitative_result_value_unit">mEq/L</Field>

    <Field name="collected_at">2010-12-27T17:00:00Z</Field> 

    <Field name="collected_by_org_name">City Lab</Field>
    <Field name="collected_by_org_adr_country">USA</Field>
    <Field name="collected_by_org_adr_city">Springfield</Field>
    <Field name="collected_by_org_adr_postalcode">11111</Field>
    <Field name="collected_by_org_adr_region">MA</Field>
    <Field name="collected_by_org_adr_street">20 Elm St</Field>

    <Field name="collected_by_name_family">Finnialispi</Field>
    <Field name="collected_by_name_given">Tad</Field>

    <Field name="collected_by_role">Lab Specialist</Field>
  </Model>
</Models>
""",
]

TEST_LABS = report_content_to_test_docs(_TEST_LABS)

########NEW FILE########
__FILENAME__ = measurement
from base import report_content_to_test_docs

hba1c = [ {'value' : '3.4', 'datetime' : '2009-01-02T12:03:10Z'},
          {'value' : '9.2', 'datetime' : '2008-01-22T17:29:59Z'},
          {'value' : '4.8', 'datetime' : '2007-11-02T12:16:38Z'},
          {'value' : '4.6', 'datetime' : '2009-04-16T03:22:24Z'},
          {'value' : '3.1', 'datetime' : '2009-09-12T12:13:43Z'},
          {'value' : '3.3', 'datetime' : '2009-01-03T11:03:23Z'},
          {'value' : '1.9', 'datetime' : '2009-08-11T02:38:32Z'},
          {'value' : '1.3', 'datetime' : '2009-01-09T12:12:20Z'},
          {'value' : '6.7', 'datetime' : '2009-03-12T02:43:39Z'},
          {'value' : '3.7', 'datetime' : '2009-02-13T02:11:17Z'}]

_TEST_MEASUREMENTS = [
    """
<HBA1C xmlns='http://indivo.org/vocab/xml/documents#' value='1.77' unit='percent' datetime='2009-07-22T01:00:00.000Z' />
""",

    """
<HBA1C xmlns='http://indivo.org/vocab/xml/documents#' value='2.13' unit='percent' datetime='2009-06-17T03:00:00.034Z' />
""",

    """
<HBA1C xmlns='http://indivo.org/vocab/xml/documents#' value='3.13' unit='percent' datetime='2009-06-17T03:00:00Z' />
""",

]

TEST_MEASUREMENTS = report_content_to_test_docs(_TEST_MEASUREMENTS)

########NEW FILE########
__FILENAME__ = medication
from base import report_content_to_test_docs

_TEST_MEDICATIONS = [
    """
<Medication xmlns="http://indivo.org/vocab/xml/documents#">
  <dateStarted>2009-02-05</dateStarted> 
  <name type="http://indivo.org/codes/meds#" abbrev="c2i" value="COX2 Inhibitor">COX2 Inhibitor</name>
  <brandName type="http://indivo.org/codes/meds#" abbrev="vioxx" value="Vioxx">Vioxx</brandName>
  <dose>
    <value>3</value>
    <unit type="http://indivo.org/codes/units#" value="pills" abbrev="p">pills</unit>
  </dose>
  <route type="http://indivo.org/codes/routes#" value="PO">By Mouth</route>
  <strength>
    <value>100</value>
    <unit type="http://indivo.org/codes/units#" value="mg" abbrev="mg">mg</unit>
  </strength>
  <frequency type="http://indivo.org/codes/frequency#" value="daily" abbrev="daily">every 12 hours</frequency>
  <prescription>
    <by>
      <name>Dr. Ken Mandl</name>
      <institution>Children's Hospital Boston</institution>
    </by>
    <on>2009-02-01</on> 
    <stopOn>2010-01-31</stopOn>
    <dispenseAsWritten>true</dispenseAsWritten>
    <duration>P2M</duration>
    <refillInfo>once a month for 3 months</refillInfo>
    <instructions>don't take them all at once!</instructions>
  </prescription>
</Medication>
""",

    """
<Medication xmlns="http://indivo.org/vocab/xml/documents#">
  <dateStarted>2009-03-05</dateStarted>
  <name>COX2 Inhibitor</name>
  <brandName>Vioxx</brandName>
  <dose>
    <textValue>3 pills</textValue>
  </dose>
  <route>By Mouth</route>
  <strength>
    <value>100</value>
    <unit>mg</unit>
  </strength>
  <frequency>every 12 hours</frequency> 
  <prescription>
    <by>
      <name>Dr. Ken Mandl</name>
      <institution>Children's Hospital Boston</institution>
    </by>
    <on>2009-02-01</on>
    <stopOn>2010-01-31</stopOn>
    <dispenseAsWritten>true</dispenseAsWritten>
    <duration>P2M</duration>
    <refillInfo>once a month for 3 months</refillInfo>
    <instructions>don't take them all at once!</instructions>
  </prescription>
</Medication>
""",

    """
<Medication xmlns='http://indivo.org/vocab/xml/documents#'>
  <dateStarted>2009-02-05</dateStarted>
  <name type='http://indivo.org/codes/meds#' value='Tylenol' abbrev='Tylenol'>Tylenol</name>
  <dose>
    <textValue>2</textValue>
  </dose>
  <frequency type='http://indivo.org/codes/frequency#' value='225756002' abbrev='q4'>every 4 hours</frequency>
</Medication>
""",

]

TEST_MEDICATIONS = report_content_to_test_docs(_TEST_MEDICATIONS)

########NEW FILE########
__FILENAME__ = problem
from base import report_content_to_test_docs

_TEST_PROBLEMS = [
    """
<Problem xmlns='http://indivo.org/vocab/xml/documents#'>
  <dateOnset>2009-05-16T12:00:00Z</dateOnset>
  <dateResolution>2009-05-16T16:00:00Z</dateResolution>
  <name type='http://codes.indivo.org/problems/' value='123' abbrev='MI'>Myocardial Infarction</name>
  <comments>mild heart attack</comments>
  <diagnosedBy>Steve Zabak</diagnosedBy>
</Problem>
""",

    """
<Problem xmlns='http://indivo.org/vocab/xml/documents#'>
  <dateOnset>2009-05-16T12:00:00Z</dateOnset>
  <dateResolution>2009-05-16T16:00:00Z</dateResolution>
  <name>Myocardial Infarction</name>
  <comments>mild heart attack</comments>
  <diagnosedBy>Steve Zabak</diagnosedBy>
</Problem>
""",

    """
<Problem xmlns='http://indivo.org/vocab/xml/documents#'>
  <name>Myocardial Infarction</name>
  <comments>mild heart attack</comments>
  <diagnosedBy>Steve Zabak</diagnosedBy>
</Problem>
""",
]

TEST_PROBLEMS = report_content_to_test_docs(_TEST_PROBLEMS)


########NEW FILE########
__FILENAME__ = procedure
from base import report_content_to_test_docs

_TEST_PROCEDURES = [
    """
<Procedure xmlns='http://indivo.org/vocab/xml/documents#'>
  <datePerformed>2009-05-16T12:00:00Z</datePerformed>
  <name type='http://codes.indivo.org/procedures#' value='85' abbrev='append'>Appendectomy</name>
  <provider>
    <name>Kenneth Mandl</name>
    <institution>Children's Hospital Boston</institution>
  </provider>
</Procedure>
""",

    """
<Procedure xmlns='http://indivo.org/vocab/xml/documents#'>
  <datePerformed>2009-06-16T12:00:00Z</datePerformed>
  <name>Appendectomy</name>
  <provider>
    <name>Kenneth Mandl</name>
    <institution>Children's Hospital Boston</institution>
  </provider>
</Procedure>
""",
]

TEST_PROCEDURES = report_content_to_test_docs(_TEST_PROCEDURES)

########NEW FILE########
__FILENAME__ = simple_clinical_note
from base import report_content_to_test_docs

_TEST_CLINICAL_NOTES = [
    """
<SimpleClinicalNote xmlns="http://indivo.org/vocab/xml/documents#">
  <dateOfVisit>2010-02-02T12:00:00Z</dateOfVisit>
  <finalizedAt>2010-02-03T13:54:03Z</finalizedAt>
  <visitType type="http://codes.indivo.org/visit-types#" value="acute">Acute Care</visitType>
  <visitLocation>Longfellow Medical</visitLocation>
  <specialty type="http://codes.indivo.org/specialties#" value="hem-onc">Hematology/Oncology</specialty>

  <signature>
    <at>2010-02-03T13:12:00Z</at>
    
    <provider>
      <name>Kenneth Mandl</name>
      <institution>Children's Hospital Boston</institution>
    </provider>
  </signature>

  <signature>
    <at>2010-02-03T13:14:00Z</at>
    
    <provider>
      <name>Isaac Kohane</name>
      <institution>Children's Hospital Boston</institution>
    </provider>
  </signature>

  <chiefComplaint>stomach ache</chiefComplaint>
  <content>
    (repeated to test length)
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
  </content>
</SimpleClinicalNote>
""",
]

TEST_CLINICAL_NOTES = report_content_to_test_docs(_TEST_CLINICAL_NOTES)

########NEW FILE########
__FILENAME__ = vital
from base import report_content_to_test_docs

_TEST_VITALS = [
    """
<Models xmlns="http://indivo.org/vocab/xml/documents#">
  <Model name="VitalSigns">
    <Field name="date">2009-05-16T12:00:00Z</Field>
    <Field name="encounter">
      <Model name="Encounter">
        <Field name="startDate">2009-05-16T12:00:00Z</Field>
        <Field name="endDate">2009-05-16T16:00:00Z</Field>
        <Field name="facility_name">Wonder Hospital</Field>
        <Field name="facility_adr_country">Australia</Field>
        <Field name="facility_adr_city">WonderCity</Field>
        <Field name="facility_adr_postalcode">5555</Field>
        <Field name="facility_adr_street">111 Lake Drive</Field> 
        <Field name="provider_dea_number">325555555</Field>
        <Field name="provider_npi_number">5235235</Field>
        <Field name="provider_email">joshua.mandel@fake.emailserver.com</Field>
        <Field name="provider_name_given">Josuha</Field>
        <Field name="provider_name_family">Mandel</Field>
        <Field name="provider_tel_1_type">w</Field>
        <Field name="provider_tel_1_number">1-235-947-3452</Field>
        <Field name="provider_tel_1_preferred_p">true</Field>
        <Field name="encounterType_title">Ambulatory encounter</Field>
        <Field name="encounterType_system">http://smartplatforms.org/terms/codes/EncounterType#</Field>
        <Field name="encounterType_identifier">ambulatory</Field>
      </Model>
    </Field>
    <Field name="bp_position_title">Sitting</Field>
    <Field name="bp_position_identifier">33586001</Field>
    <Field name="bp_position_system">http://purl.bioontology.org/ontology/SNOMEDCT/</Field>
    <Field name="bp_site_title">Right arm</Field>
    <Field name="bp_site_identifier">368209003</Field>
    <Field name="bp_site_system">http://purl.bioontology.org/ontology/SNOMEDCT/</Field>
    <Field name="bp_method_title">Auscultation</Field>
    <Field name="bp_method_identifier">auscultation</Field>
    <Field name="bp_method_system">http://smartplatforms.org/terms/codes/BloodPressureMethod#</Field>
    <Field name="bp_diastolic_unit">mm[Hg]</Field>
    <Field name="bp_diastolic_value">82</Field>
    <Field name="bp_diastolic_name_title">Intravascular diastolic</Field>
    <Field name="bp_diastolic_name_identifier">8462-4</Field>
    <Field name="bp_diastolic_name_system">http://purl.bioontology.org/ontology/LNC/</Field>
    <Field name="bp_systolic_unit">mm[Hg]</Field>
    <Field name="bp_systolic_value">132</Field>
    <Field name="bp_systolic_name_title">Intravascular systolic</Field>
    <Field name="bp_systolic_name_identifier">8480-6</Field>
    <Field name="bp_systolic_name_system">http://purl.bioontology.org/ontology/LNC/</Field>
    <Field name="bmi_unit">kg/m2</Field>
    <Field name="bmi_value">21.8</Field>
    <Field name="bmi_name_title">Body mass index</Field>
    <Field name="bmi_name_system">http://purl.bioontology.org/ontology/LNC/</Field>
    <Field name="bmi_name_identifier">39156-5</Field>
    <Field name="heart_rate_unit">{beats}/min</Field>
    <Field name="heart_rate_value">70</Field>
    <Field name="heart_rate_name_title">Heart rate</Field>
    <Field name="heart_rate_name_system">http://purl.bioontology.org/ontology/LNC/</Field>
    <Field name="heart_rate_name_identifier">8867-4</Field>
    <Field name="height_unit">m</Field>
    <Field name="height_value">1.8</Field>
    <Field name="height_name_title">Body height</Field>
    <Field name="height_name_system">http://purl.bioontology.org/ontology/LNC/</Field>
    <Field name="height_name_identifier">8302-2</Field>
    <Field name="oxygen_saturation_unit">%{HemoglobinSaturation}</Field>
    <Field name="oxygen_saturation_value">99</Field>
    <Field name="oxygen_saturation_name_title">Oxygen saturation</Field>
    <Field name="oxygen_saturation_name_system">http://purl.bioontology.org/ontology/LNC/</Field>
    <Field name="oxygen_saturation_name_identifier">2710-2</Field>
    <Field name="respiratory_rate_unit">{breaths}/min</Field>
    <Field name="respiratory_rate_value">16</Field>
    <Field name="respiratory_rate_name_title">Respiration rate</Field>
    <Field name="respiratory_rate_name_system">http://purl.bioontology.org/ontology/LNC/</Field>
    <Field name="respiratory_rate_name_identifier">9279-1</Field>
    <Field name="temperature_unit">Cel</Field>
    <Field name="temperature_value">37</Field>
    <Field name="temperature_name_title">Body temperature</Field>
    <Field name="temperature_name_system">http://purl.bioontology.org/ontology/LNC/</Field>
    <Field name="temperature_name_identifier">8310-5</Field>
    <Field name="weight_unit">kg</Field>
    <Field name="weight_value">70.8</Field>
    <Field name="weight_name_title">Body weight</Field>
    <Field name="weight_name_system">http://purl.bioontology.org/ontology/LNC/</Field>
    <Field name="weight_name_identifier">3141-9</Field>
  </Model>
</Models>
""",
    """
<Models xmlns="http://indivo.org/vocab/xml/documents#">
  <Model name="VitalSigns">
    <Field name="date">2010-05-16T12:00:00Z</Field>
    <Field name="encounter">
      <Model name="Encounter">
        <Field name="startDate">2010-05-16T12:00:00Z</Field>
        <Field name="endDate">2010-05-16T16:00:00Z</Field>
        <Field name="facility_name">Wonder Hospital</Field>
        <Field name="facility_adr_country">Australia</Field>
        <Field name="facility_adr_city">WonderCity</Field>
        <Field name="facility_adr_postalcode">5555</Field>
        <Field name="facility_adr_street">111 Lake Drive</Field> 
        <Field name="provider_dea_number">325555555</Field>
        <Field name="provider_npi_number">5235235</Field>
        <Field name="provider_email">joshua.mandel@fake.emailserver.com</Field>
        <Field name="provider_name_given">Josuha</Field>
        <Field name="provider_name_family">Mandel</Field>
        <Field name="provider_tel_1_type">w</Field>
        <Field name="provider_tel_1_number">1-235-947-3452</Field>
        <Field name="provider_tel_1_preferred_p">true</Field>
        <Field name="encounterType_title">Ambulatory encounter</Field>
        <Field name="encounterType_system">http://smartplatforms.org/terms/codes/EncounterType#</Field>
        <Field name="encounterType_identifier">ambulatory</Field>
      </Model>
    </Field>
    <Field name="bp_position_title">Sitting</Field>
    <Field name="bp_position_identifier">33586001</Field>
    <Field name="bp_position_system">http://purl.bioontology.org/ontology/SNOMEDCT/</Field>
    <Field name="bp_site_title">Right arm</Field>
    <Field name="bp_site_identifier">368209003</Field>
    <Field name="bp_site_system">http://purl.bioontology.org/ontology/SNOMEDCT/</Field>
    <Field name="bp_method_title">Auscultation</Field>
    <Field name="bp_method_identifier">auscultation</Field>
    <Field name="bp_method_system">http://smartplatforms.org/terms/codes/BloodPressureMethod#</Field>
    <Field name="bp_diastolic_unit">mm[Hg]</Field>
    <Field name="bp_diastolic_value">82</Field>
    <Field name="bp_diastolic_name_title">Intravascular diastolic</Field>
    <Field name="bp_diastolic_name_identifier">8462-4</Field>
    <Field name="bp_diastolic_name_system">http://purl.bioontology.org/ontology/LNC/</Field>
    <Field name="bp_systolic_unit">mm[Hg]</Field>
    <Field name="bp_systolic_value">132</Field>
    <Field name="bp_systolic_name_title">Intravascular systolic</Field>
    <Field name="bp_systolic_name_identifier">8480-6</Field>
    <Field name="bp_systolic_name_system">http://purl.bioontology.org/ontology/LNC/</Field>
    <Field name="bmi_unit">kg/m2</Field>
    <Field name="bmi_value">21.8</Field>
    <Field name="bmi_name_title">Body mass index</Field>
    <Field name="bmi_name_system">http://purl.bioontology.org/ontology/LNC/</Field>
    <Field name="bmi_name_identifier">39156-5</Field>
    <Field name="heart_rate_unit">{beats}/min</Field>
    <Field name="heart_rate_value">70</Field>
    <Field name="heart_rate_name_title">Heart rate</Field>
    <Field name="heart_rate_name_system">http://purl.bioontology.org/ontology/LNC/</Field>
    <Field name="heart_rate_name_identifier">8867-4</Field>
    <Field name="height_unit">m</Field>
    <Field name="height_value">1.8</Field>
    <Field name="height_name_title">Body height</Field>
    <Field name="height_name_system">http://purl.bioontology.org/ontology/LNC/</Field>
    <Field name="height_name_identifier">8302-2</Field>
    <Field name="oxygen_saturation_unit">%{HemoglobinSaturation}</Field>
    <Field name="oxygen_saturation_value">99</Field>
    <Field name="oxygen_saturation_name_title">Oxygen saturation</Field>
    <Field name="oxygen_saturation_name_system">http://purl.bioontology.org/ontology/LNC/</Field>
    <Field name="oxygen_saturation_name_identifier">2710-2</Field>
    <Field name="respiratory_rate_unit">{breaths}/min</Field>
    <Field name="respiratory_rate_value">16</Field>
    <Field name="respiratory_rate_name_title">Respiration rate</Field>
    <Field name="respiratory_rate_name_system">http://purl.bioontology.org/ontology/LNC/</Field>
    <Field name="respiratory_rate_name_identifier">9279-1</Field>
    <Field name="temperature_unit">Cel</Field>
    <Field name="temperature_value">37</Field>
    <Field name="temperature_name_title">Body temperature</Field>
    <Field name="temperature_name_system">http://purl.bioontology.org/ontology/LNC/</Field>
    <Field name="temperature_name_identifier">8310-5</Field>
    <Field name="weight_unit">kg</Field>
    <Field name="weight_value">80.8</Field>
    <Field name="weight_name_title">Body weight</Field>
    <Field name="weight_name_system">http://purl.bioontology.org/ontology/LNC/</Field>
    <Field name="weight_name_identifier">3141-9</Field>
  </Model>
</Models>
""",
]

TEST_VITALS = report_content_to_test_docs(_TEST_VITALS)

########NEW FILE########
__FILENAME__ = sdm
TEST_SDML_DOCS = ['''
{
    "__modelname__": "TestMedication2",
    "name": "String",
    "date_started": "Date",
    "date_stopped": "Date",
    "brand_name": "String", 
    "route": "String",
    "prescription": {
        "__modelname__": "TestPrescription2",
        "prescribed_by_name": "String",
        "prescribed_by_institution": "String",
        "prescribed_on": "Date",
        "prescribed_stop_on": "Date"
        },
    "fills": [{
            "__modelname__": "TestFill2",
            "date_filled": "Date",
            "supply_days": "Number",
            "filled_at_name": "String",
            "code": "CodedValue",
            "quantity": "ValueAndUnit",
            "pharmacy": "Pharmacy",
            "prescriber": "Provider"
            }]
}
''',
]

TEST_SDMJ_DOCS = ['''
{
    "__modelname__": "TestMedication2",
    "name": "ibuprofen",
    "date_started": "2010-10-01T00:00:00Z",
    "date_stopped": "2010-10-31T00:00:00Z",
    "brand_name": "Advil",
    "route": "Oral",
    "prescription": {
        "__modelname__": "TestPrescription2",
        "prescribed_by_name": "Kenneth D. Mandl",
        "prescribed_by_institution": "Children's Hospital Boston",
        "prescribed_on": "2010-09-30T00:00:00Z",
        "prescribed_stop_on": "2010-10-31T00:00:00Z"
    },
    "fills": [
        {
            "__modelname__": "TestFill2",
            "date_filled": "2010-10-01T00:00:00Z",
            "supply_days": "15",
            "filled_at_name": "CVS"
        },
        {
            "__modelname__": "TestFill2",
            "date_filled": "2010-10-16T00:00:00Z",
            "supply_days": "15",
            "filled_at_name": "CVS"
        }
    ]
}
''',
]

TEST_SDMX_DOCS = ['''
<Models>
  <Model name="TestMedication2">
    <Field name="date_started">2010-10-01T00:00:00Z</Field>
    <Field name="name">ibuprofen</Field>
    <Field name="brand_name">Advil</Field>
    <Field name="date_stopped">2010-10-31T00:00:00Z</Field>
    <Field name="route">Oral</Field>
    <Field name="prescription">
      <Model name="TestPrescription2">
        <Field name="prescribed_by_name">Kenneth D. Mandl</Field>
        <Field name="prescribed_by_institution">Children's Hospital Boston</Field>
        <Field name="prescribed_on">2010-09-30T00:00:00Z</Field>
        <Field name="prescribed_stop_on">2010-10-31T00:00:00Z</Field>
      </Model>
    </Field>
    <Field name="fills">
      <Models>
        <Model name="TestFill2">
          <Field name="date_filled">2010-10-01T00:00:00Z</Field>
          <Field name="supply_days">15</Field>
          <Field name="filled_at_name">CVS</Field>
        </Model>
        <Model name="TestFill2">
          <Field name="date_filled">2010-10-16T00:00:00Z</Field>
          <Field name="supply_days">15</Field>
          <Field name="filled_at_name">CVS</Field>
        </Model>
      </Models>
    </Field>
  </Model>
</Models>
''',
]

INVALID_TEST_SDML_DOCS = ['''
{
    "__modelname__": "TestMedication3",
    "name": "String",
    "date_started": "Boink",
    "date_stopped": "Date",
    "brand_name": "String", 
    "route": "String",
    "prescription": {
        "__modelname__": "TestPrescription3",
        "prescribed_by_name": "String",
        "prescribed_by_institution": "String",
        "prescribed_on": "Date",
        "prescribed_stop_on": "Date"
        },
    "fills": [{
            "__modelname__": "TestFill3",
            "date_filled": "Date",
            "supply_days": "Number",
            "filled_at_name": "String"
            }]
}
''',
'''
{
    "__modelname__": "TestMedication3",
    "name": "String",
    "date_started": "Date",
    "date_stopped": "Date",
    "brand_name": "String", 
    "route": "String",
    "prescription": {
        "__modelname__": "TestPrescription3",
        "prescribed_by_name": "String",
        "prescribed_by_institution": "String",
        "prescribed_on": "Date",
        "prescribed_stop_on": "Date"
        },
    "fills": [{
            "__modelname__": "TestFill3",
            "date_filled": "Date",
            "supply_days": "Number",
            "filled_at_name": "String"
            },
            {
            "__modelname__": "TestFillTooManyModels",
            "date_filled": "Date",
            "supply_days": "Number",
            "filled_at_name": "String"
            }]
}
''',
'''
{
    "name": "String",
    "date_started": "Date",
    "date_stopped": "Date",
    "brand_name": "String", 
    "route": "String",
    "EXTRA_FIELD": "String",
    "prescription": {
        "__modelname__": "TestPrescription3",
        "prescribed_by_name": "String",
        "prescribed_by_institution": "String",
        "prescribed_on": "Date",
        "prescribed_stop_on": "Date"
        },
    "fills": [{
            "__modelname__": "TestFill3",
            "date_filled": "Date",
            "supply_days": "Number",
            "filled_at_name": "String"
            }]
}
''',
]

INVALID_TEST_SDMJ_DOCS = ['''
{
    "__modelname__": "TestMedicationNonExistent",
    "name": "ibuprofen",
    "date_started": "2010-10-01T00:00:00Z",
    "date_stopped": "2010-10-31T00:00:00Z",
    "brand_name": "Advil",
    "route": "Oral",
    "prescription": {
        "__modelname__": "TestPrescription2",
        "prescribed_by_name": "Kenneth D. Mandl",
        "prescribed_by_institution": "Children's Hospital Boston",
        "prescribed_on": "2010-09-30T00:00:00Z",
        "prescribed_stop_on": "2010-10-31T00:00:00Z"
    },
    "fills": [
        {
            "__modelname__": "TestFill2",
            "date_filled": "2010-10-01T00:00:00Z",
            "supply_days": "15",
            "filled_at_name": "CVS"
        },
        {
            "__modelname__": "TestFill2",
            "date_filled": "2010-10-16T00:00:00Z",
            "supply_days": "15",
            "filled_at_name": "CVS"
        }
    ]
}
''',
'''
{
    "__modelname__": "TestMedication2",
    "name": "ibuprofen",
    "NON-FIELD": "somedata",
    "date_started": "2010-10-01T00:00:00Z",
    "date_stopped": "2010-10-31T00:00:00Z",
    "brand_name": "Advil",
    "route": "Oral",
    "prescription": {
        "__modelname__": "TestPrescription2",
        "prescribed_by_name": "Kenneth D. Mandl",
        "prescribed_by_institution": "Children's Hospital Boston",
        "prescribed_on": "2010-09-30T00:00:00Z",
        "prescribed_stop_on": "2010-10-31T00:00:00Z"
    },
    "fills": [
        {
            "__modelname__": "TestFill2",
            "date_filled": "2010-10-01T00:00:00Z",
            "supply_days": "15",
            "filled_at_name": "CVS"
        },
        {
            "__modelname__": "TestFill2",
            "date_filled": "2010-10-16T00:00:00Z",
            "supply_days": "15",
            "filled_at_name": "CVS"
        }
    ]
}
''',
'''
{
    "__modelname__": "TestMedication2",
    "name": "ibuprofen",
    "date_started": "2010-10-01T00:00:00Zabc",
    "date_stopped": "2010-10-31T00:00:00Z",
    "brand_name": "Advil",
    "route": "Oral",
    "prescription": {
        "__modelname__": "TestPrescription2",
        "prescribed_by_name": "Kenneth D. Mandl",
        "prescribed_by_institution": "Children's Hospital Boston",
        "prescribed_on": "2010-09-30T00:00:00Z",
        "prescribed_stop_on": "2010-10-31T00:00:00Z"
    },
    "fills": [
        {
            "__modelname__": "TestFill2",
            "date_filled": "2010-10-01T00:00:00Z",
            "supply_days": "15",
            "filled_at_name": "CVS"
        },
        {
            "__modelname__": "TestFill2",
            "date_filled": "2010-10-16T00:00:00Z",
            "supply_days": "15",
            "filled_at_name": "CVS"
        }
    ]
}
''',
'''
{
    "__modelname__": "TestMedication2",
    "name": "ibuprofen",
    "date_started": "2010-10-01T00:00:00Z",
    "date_stopped": "2010-10-31T00:00:00Z",
    "brand_name": "Advil",
    "route": "Oral",
    "prescription": {
        "__modelname__": "TestPrescription2",
        "prescribed_by_name": "Kenneth D. Mandl",
        "prescribed_by_institution": "Children's Hospital Boston",
        "prescribed_on": "2010-09-30T00:00:00Z",
        "prescribed_stop_on": "2010-10-31T00:00:00Z"
    },
    "fills": [
        {
            "__modelname__": "TestFill2",
            "date_filled": "2010-10-01T00:00:00Z",
            "supply_days": "notafloat15",
            "filled_at_name": "CVS"
        },
        {
            "__modelname__": "TestFill2",
            "date_filled": "2010-10-16T00:00:00Z",
            "supply_days": "15",
            "filled_at_name": "CVS"
        }
    ]
}
''',
'''
{
    "__modelname__": "TestMedication2",
    "name": "ibuprofen",
    "date_started": "2010-10-01T00:00:00Z",
    "date_stopped": "2010-10-31T00:00:00Z",
    "brand_name": "Advil",
    "route": "Oral",
    "prescription": {
        "__modelname__": "TestPrescription2",
        "prescribed_by_name": "Kenneth D. Mandl",
        "prescribed_by_institution": "Children's Hospital Boston",
        "prescribed_on": "2010-09-30T00:00:00Z",
        "prescribed_stop_on": "2010-10-31T00:00:00Z"
    },
    "fills": [
        {
            "__modelname__": "TestFill2",
            "date_filled": "2010-10-01T00:00:00Z",
            "supply_days": "15",
            "filled_at_name": "CVS"
        },
        {
            "date_filled": "2010-10-16T00:00:00Z",
            "supply_days": "15",
            "filled_at_name": "CVS"
        }
    ]
}
''',
]

INVALID_TEST_SDMX_DOCS = ['''
<Models>
  <Model name="TestMedicationNonExistent">
    <Field name="date_started">2010-10-01T00:00:00Z</Field>
    <Field name="name">ibuprofen</Field>
    <Field name="brand_name">Advil</Field>
    <Field name="date_stopped">2010-10-31T00:00:00Z</Field>
    <Field name="route">Oral</Field>
    <Field name="prescription">
      <Model name="TestPrescription">
        <Field name="prescribed_by_name">Kenneth D. Mandl</Field>
        <Field name="prescribed_by_institution">Children's Hospital Boston</Field>
        <Field name="prescribed_on">2010-09-30T00:00:00Z</Field>
        <Field name="prescribed_stop_on">2010-10-31T00:00:00Z</Field>
      </Model>
    </Field>
    <Field name="fills">
      <Models>
        <Model name="TestFill">
          <Field name="date_filled">2010-10-01T00:00:00Z</Field>
          <Field name="supply_days">15</Field>
          <Field name="filled_at_name">CVS</Field>
        </Model>
        <Model name="TestFill">
          <Field name="date_filled">2010-10-16T00:00:00Z</Field>
          <Field name="supply_days">15</Field>
          <Field name="filled_at_name">CVS</Field>
        </Model>
      </Models>
    </Field>
  </Model>
</Models>
''',
'''
<Models>
  <Model name="TestMedication2">
    <Field name="date_started">2010-10-01T00:00:00Z</Field>
    <Field name="NONEXISTENT">somedata</Field>
    <Field name="name">ibuprofen</Field>
    <Field name="brand_name">Advil</Field>
    <Field name="date_stopped">2010-10-31T00:00:00Z</Field>
    <Field name="route">Oral</Field>
    <Field name="prescription">
      <Model name="TestPrescription">
        <Field name="prescribed_by_name">Kenneth D. Mandl</Field>
        <Field name="prescribed_by_institution">Children's Hospital Boston</Field>
        <Field name="prescribed_on">2010-09-30T00:00:00Z</Field>
        <Field name="prescribed_stop_on">2010-10-31T00:00:00Z</Field>
      </Model>
    </Field>
    <Field name="fills">
      <Models>
        <Model name="TestFill">
          <Field name="date_filled">2010-10-01T00:00:00Z</Field>
          <Field name="supply_days">15</Field>
          <Field name="filled_at_name">CVS</Field>
        </Model>
        <Model name="TestFill">
          <Field name="date_filled">2010-10-16T00:00:00Z</Field>
          <Field name="supply_days">15</Field>
          <Field name="filled_at_name">CVS</Field>
        </Model>
      </Models>
    </Field>
  </Model>
</Models>
''',
'''
<Models>
  <Model name="TestMedication2">
    <Field name="date_started">2010-10-01T00:00:00Zabc</Field>
    <Field name="name">ibuprofen</Field>
    <Field name="brand_name">Advil</Field>
    <Field name="date_stopped">2010-10-31T00:00:00Z</Field>
    <Field name="route">Oral</Field>
    <Field name="prescription">
      <Model name="TestPrescription">
        <Field name="prescribed_by_name">Kenneth D. Mandl</Field>
        <Field name="prescribed_by_institution">Children's Hospital Boston</Field>
        <Field name="prescribed_on">2010-09-30T00:00:00Z</Field>
        <Field name="prescribed_stop_on">2010-10-31T00:00:00Z</Field>
      </Model>
    </Field>
    <Field name="fills">
      <Models>
        <Model name="TestFill">
          <Field name="date_filled">2010-10-01T00:00:00Z</Field>
          <Field name="supply_days">15</Field>
          <Field name="filled_at_name">CVS</Field>
        </Model>
        <Model name="TestFill">
          <Field name="date_filled">2010-10-16T00:00:00Z</Field>
          <Field name="supply_days">15</Field>
          <Field name="filled_at_name">CVS</Field>
        </Model>
      </Models>
    </Field>
  </Model>
</Models>
''',
'''
<Models>
  <Model name="TestMedication">
    <Field name="date_started">2010-10-01T00:00:00Z</Field>
    <Field name="name">ibuprofen</Field>
    <Field name="brand_name">Advil</Field>
    <Field name="date_stopped">2010-10-31T00:00:00Z</Field>
    <Field name="route">Oral</Field>
    <Field name="prescription">
      <Model name="TestPrescription">
        <Field name="prescribed_by_name">Kenneth D. Mandl</Field>
        <Field name="prescribed_by_institution">Children's Hospital Boston</Field>
        <Field name="prescribed_on">2010-09-30T00:00:00Z</Field>
        <Field name="prescribed_stop_on">2010-10-31T00:00:00Z</Field>
      </Model>
    </Field>
    <Field name="fills">
      <Models>
        <Model name="TestFill">
          <Field name="date_filled">2010-10-01T00:00:00Z</Field>
          <Field name="supply_days">15</Field>
          <Field name="filled_at_name">CVS</Field>
        </Model>
        <Model name="TestFill">
          <Field name="date_filled">2010-10-16T00:00:00Z</Field>
          <Field name="supply_days">notafloat15</Field>
          <Field name="filled_at_name">CVS</Field>
        </Model>
      </Models>
    </Field>
  </Model>
</Models>
''',
'''
<Models>
  <Model name="TestMedication">
    <Field name="date_started">2010-10-01T00:00:00Z</Field>
    <Field name="name">ibuprofen</Field>
    <Field name="brand_name">Advil</Field>
    <Field name="date_stopped">2010-10-31T00:00:00Z</Field>
    <Field name="route">Oral</Field>
    <Field name="prescription">
      <Model name="TestPrescription">
        <Field name="prescribed_by_name">Kenneth D. Mandl</Field>
        <Field name="prescribed_by_institution">Children's Hospital Boston</Field>
        <Field name="prescribed_on">2010-09-30T00:00:00Z</Field>
        <Field name="prescribed_stop_on">2010-10-31T00:00:00Z</Field>
      </Model>
    </Field>
    <Field name="fills">
      <Models>
        <Model name="TestFill">
          <Field name="date_filled">2010-10-01T00:00:00Z</Field>
          <Field name="supply_days">15</Field>
          <Field name="filled_at_name">CVS</Field>
        </Model>
        <Model name="TestFillNonExistent">
          <Field name="date_filled">2010-10-16T00:00:00Z</Field>
          <Field name="supply_days">15</Field>
          <Field name="filled_at_name">CVS</Field>
        </Model>
      </Models>
    </Field>
  </Model>
</Models>
''',
'''
<Models>
  <Model name="TestMedication">
    <Field name="date_started">2010-10-01T00:00:00Z</Field>
    <Field name="name">ibuprofen</Field>
    <Field name="brand_name">Advil</Field>
    <Field name="date_stopped">2010-10-31T00:00:00Z</Field>
    <Field name="route">Oral</Field>
    <Field name="prescription">
      <Model name="TestPrescription">
        <Field name="prescribed_by_name">Kenneth D. Mandl</Field>
        <Field name="prescribed_by_institution">Children's Hospital Boston</Field>
        <Field name="prescribed_on">2010-09-30T00:00:00Z</Field>
        <Field name="prescribed_stop_on">2010-10-31T00:00:00Z</Field>
      </Model>
    </Field>
    <Field name="fills">
      <Models>
        <Model>
          <Field name="date_filled">2010-10-01T00:00:00Z</Field>
          <Field name="supply_days">15</Field>
          <Field name="filled_at_name">CVS</Field>
        </Model>
        <Model name="TestFill">
          <Field name="date_filled">2010-10-16T00:00:00Z</Field>
          <Field name="supply_days">15</Field>
          <Field name="filled_at_name">CVS</Field>
        </Model>
      </Models>
    </Field>
  </Model>
</Models>
''',
]

########NEW FILE########
__FILENAME__ = testmed
TEST_TESTMED_JSON = '''
[
    {
        "__modelname__": "TestMed",
        "name": "med1",
        "brand_name": "Advil",
        "frequency": 2.0,
        "date_started": "2010-10-01T00:00:00Z",
        "prescription": {
            "__modelname__": "TestPrescription",
            "prescribed_by_name": "Kenneth D. Mandl",
            "prescribed_on": "2010-09-30T00:00:00Z"
        },
        "fills": [
            {
                "__modelname__": "TestFill",
                "date_filled": "2010-10-01T00:00:00Z",
                "supply_days": 30.0
            }, {
                "__modelname__": "TestFill",
                "date_filled": "2010-10-16T00:00:00Z",
                "supply_days": 30.0
            }
        ]
    }
]
'''

########NEW FILE########
__FILENAME__ = extra
from indivo.serializers import DataModelSerializers
from indivo.data_models import DataModelOptions
from indivo.validators import ExactValueValidator, ValueInSetValidator

class TestFillSerializers(DataModelSerializers):
    def to_rdf(queryset, result_count, record=None, carenet=None):
        if not record:
            record = carenet.record
        
        return '''TestFill RDF SHOULD GO HERE. But we don't need to test that here.'''

class TestFillOptions(DataModelOptions):
    model_class_name = 'TestFill'
    serializers = TestFillSerializers
    field_validators = {
        'supply_days': [ExactValueValidator(30)],
        }


class TestMedSerializers(DataModelSerializers):
    def to_rdf(queryset, result_count, record=None, carenet=None):
        if not record:
            record = carenet.record
        
        return '''TestMed RDF SHOULD GO HERE. But we don't need to test that here.'''

class TestMedOptions(DataModelOptions):
    model_class_name = 'TestMed'
    serializers = TestMedSerializers
    field_validators = {
        'name': [ValueInSetValidator(['med1', 'med2'], nullable=True)],
        }


class TestPrescriptionSerializers(DataModelSerializers):
    def to_rdf(queryset, result_count, record=None, carenet=None):
        if not record:
            record = carenet.record
        
        return '''TestPrescription RDF SHOULD GO HERE. But we don't need to test that here.'''

class TestPrescriptionOptions(DataModelOptions):
    model_class_name = 'TestPrescription'
    serializers = TestPrescriptionSerializers

########NEW FILE########
__FILENAME__ = main
__all__ = ['Application', 'IndivoClient', 'IndivoClientError']

# System
import sys, os, urllib, logging
logging.basicConfig(level=logging.INFO)

# Application
TEST_MODULES_DIR_LOC = os.path.abspath(os.path.dirname(__file__)) + '/../test_modules'
path_lib = os.path.abspath(os.path.dirname(__file__)) + '/../indivo_client_py/lib'

# Client 
try:
  from indivo.tests.client.lib.client import IndivoClient, IndivoClientError
except ImportError:
  raise Exception("Client tests needs to be included as a submodule within the indivo client")

import functools

# API
import inspect
import traceback

from indivo.tests.integration.config  import ts
from progress_bar     import ProgressBar

PRD = 'prd' 
PASS, FAIL = 'pass', 'fail'
ERR, RESULT, TRACEBACK =  ('err', 'result', 'traceback')

class Application():

  def start(self):
    welcome = '''
==========================
RUNNING INTEGRATION TESTS:
==========================
'''
    print welcome
    count = 0
    report = {}
    progress = ProgressBar(0, len(ts), 77)
    modules = self.load_modules()
    for test_block in ts:
      name, func, test =  (test_block['name'], test_block['func'], test_block['test'])
      progress(count)
      if test:
        report = self.report_setup(name, report)
        try:
          self.run_test(func, modules)
        except Exception, e:
          report = self.report_exception(name, report, e)
      count += 1
    self.display_report(report)
    return True

  def report_setup(self, name, report):
    report[name]          = {}
    report[name][RESULT]  = PASS
    report[name][ERR]     = ''
    return report

  def report_exception(self, name, report, e):
    report[name][RESULT]  = FAIL
    report[name][ERR]     = e
    if hasattr(e, 'msg'):
      report[name][ERR] = e.msg
      if isinstance(e.msg, dict) and \
        e.msg.has_key(PRD):
        report[name][ERR] = e.msg[PRD]
    if hasattr(e, TRACEBACK):
      report[name][TRACEBACK] = e.traceback
    return report

  def load_modules(self):
    modules = []
    exceptions = ['__init__.py', 'data.py']
    files = [file[0:-3] for file in os.listdir(TEST_MODULES_DIR_LOC) \
                  if  file[-3:] != 'pyc' and file not in exceptions and \
                      file[0] != '.' and file[-1] != '~' and file[-1] != '#']
    sys.path.insert(0, os.path.abspath(TEST_MODULES_DIR_LOC))
    for file in files:
      if file:
        try:
          modules.append(__import__(file))
        except ImportError:
          pass
    return modules

  def run_test(self, func, modules):
    for module in modules:
      if hasattr(module, func):
        res = getattr(module, func)(IndivoClient)
        if isinstance(res, bool):
          if res != True:
            raise Exception 
          return True
        elif isinstance(res, tuple):
          if not res[0]:
            raise IndivoClientError(res[1])
    return False

  def display_report(self, report):
    divider = 77*'='
    print divider
    print "Report:"
    for name, info in report.items():
      result = info[RESULT]
      print 10*'.', result + ' : ' + name
      if result == FAIL:
        print 20*'.', info[ERR]
        if info.has_key(TRACEBACK):
          print 20*'.', info[TRACEBACK][1][3]
    print divider

########NEW FILE########
__FILENAME__ = progress_bar
import sys

class ProgressBar:
  """
  originally posted by Randy Pargman
  modified by Children's Hospital of Boston
  """

  def __init__(self, minValue = 0, maxValue = 10, totalWidth=12):
    self.progBar = "[]"   # This holds the progress bar string
    self.min = minValue
    self.max = maxValue
    self.span = maxValue - minValue
    self.width = totalWidth
    self.amount = 0       # When amount == max, we are 100% done 
    self.updateAmount(0)  # Build progress bar string

  def updateAmount(self, newAmount = 0):
    if newAmount < self.min: newAmount = self.min
    if newAmount > self.max: newAmount = self.max
    self.amount = newAmount

    # Figure out the new percent done, round to an integer
    diffFromMin = float(self.amount - self.min)
    percentDone = (diffFromMin / float(self.span)) * 100.0
    percentDone = round(percentDone)
    percentDone = int(percentDone)

    # Figure out how many hash bars the percentage should be
    allFull = self.width - 2
    numHashes = (percentDone / 100.0) * allFull
    numHashes = int(round(numHashes))

    # build a progress bar with hashes and spaces
    #self.progBar = "[" + '='*numHashes + ' '*(allFull-numHashes) + "]"

    if numHashes == 0:
      self.progBar = "[>%s]" % (' '*(allFull-1))
    elif numHashes == allFull:
      self.progBar = "[%s]" % ('='*allFull)
    else:
      self.progBar = "[%s>%s]" % ('='*(numHashes-1), ' '*(allFull-numHashes))

    # figure out where to put the percentage, roughly centered
    percentPlace = (len(self.progBar) / 2) - len(str(percentDone)) 
    percentString = str(percentDone) + "%"

    # slice the percentage into the bar
    self.progBar = self.progBar[0:percentPlace] + percentString + self.progBar[percentPlace+len(percentString):]

  def __str__(self):
    return str(self.progBar)

  def __call__(self, value):
    self.updateAmount(value)
    bar = str(self)
    sys.stdout.write(bar + "\r")
    sys.stdout.flush()

########NEW FILE########
__FILENAME__ = config
# Test Sequence

ts = [ 
{ 'test' : 1, 'name' : 'Auditing',                  'func' : 'test_auditing'},
{ 'test' : 1, 'name' : 'Binary Document Test',      'func' : 'test_binary_document_handling'},
{ 'test' : 1, 'name' : 'Document Handling Test',    'func' : 'test_document_handling'},
{ 'test' : 1, 'name' : 'Document Metadata Test',    'func' : 'test_document_metadata'},
{ 'test' : 1, 'name' : 'Document Processing Test',  'func' : 'test_document_processing'},
{ 'test' : 1, 'name' : 'Messaging',                 'func' : 'test_messaging'},
{ 'test' : 1, 'name' : 'OAuthing',                  'func' : 'test_oauthing'},
{ 'test' : 1, 'name' : 'PHA Document Handling',     'func' : 'test_userapp_document_handling'},
{ 'test' : 1, 'name' : 'PHAing app delete',         'func' : 'test_pha_delete'},
{ 'test' : 1, 'name' : 'PHAing record_app delete',  'func' : 'test_record_pha_delete'},
{ 'test' : 1, 'name' : 'Record Shares',             'func' : 'test_record_shares'},
{ 'test' : 1, 'name' : 'Sharing',                   'func' : 'test_sharing'},
{ 'test' : 1, 'name' : 'Special Document Handling', 'func' : 'test_special_document_handling'},
{ 'test' : 1, 'name' : 'Accounting', 'func' : 'test_account'},
{ 'test' : 1, 'name' : 'AppSpecific', 'func' : 'test_appspecific'},
{ 'test' : 1, 'name' : 'Security', 'func' : 'test_security'},
]

# to test only one
#ts = [ 
#    { 'test' : 1, 'name' : 'Document Handling Test',    'func' : 'test_document_handling'},
#    { 'test' : 1, 'name' : 'Sharing', 'func' : 'test_sharing'},
#    ]

########NEW FILE########
__FILENAME__ = old_style_integration
from app.main import Application
from indivo.tests.internal_tests import InternalTests
from indivo.tests.data.account import TEST_ACCOUNTS
from indivo.tests.data.app import TEST_USERAPPS, TEST_ADMINAPPS, TEST_UIAPPS
from indivo.tests.data.authsystem import TEST_AUTHSYSTEMS
from test_modules.data import *

class OldStyleIntegrationTests(InternalTests):

    def setUp(self):
        super(OldStyleIntegrationTests, self).setUp()
        self.enableAccessControl()

        # Add the integration test apps
        self.createUserApp(TEST_USERAPPS, 1)
        self.createMachineApp(TEST_UIAPPS, 0)
        self.createMachineApp(TEST_ADMINAPPS, 0)

        # Add the integration test accounts
        self.createAccount(TEST_ACCOUNTS, 0)
        self.createAccount(TEST_ACCOUNTS, 1)

        # Add the integration test auth systems
        self.createAuthSystem(TEST_AUTHSYSTEMS, 0)

    def tearDown(self):
        super(OldStyleIntegrationTests, self).tearDown()
        
    def test_integrations(self):
        app = Application()
        app.start()


########NEW FILE########
__FILENAME__ = pluggable_schemas
import os
import settings
import sys
import json
import datetime
from lxml import etree

from indivo.document_processing import IndivoSchemaLoader
from indivo.lib.iso8601 import parse_utc_date as date
from indivo.tests.internal_tests import TransactionInternalTests
from indivo.tests.data import TEST_ACCOUNTS, TEST_RECORDS, TEST_TESTMED_JSON

class PluggableSchemaIntegrationTests(TransactionInternalTests):

    def setUp(self):
        super(PluggableSchemaIntegrationTests,self).setUp()

        # Create an Account (with a few records)
        self.account = self.createAccount(TEST_ACCOUNTS, 4)

        # Add a record for it
        self.record = self.createRecord(TEST_RECORDS, 0, owner=self.account)
        
        # Load the test data models
        self.load_model_dir(self.TEST_MODEL_DIR)
        
        # Load the test schemas
        self.loader = IndivoSchemaLoader(os.path.join(settings.APP_HOME, 'indivo/tests/schemas/test'))
        self.loader.import_schemas()        

    def tearDown(self):
        # Unregister the schemas
        self.loader.unregister_all_schemas()
        
        # Unload the test models
        self.unload_model_dir(self.TEST_MODEL_DIR)

        super(PluggableSchemaIntegrationTests,self).tearDown()
        
    def test_nested_model_json(self):
        # post new document with a TestMed
        test_med_data = open(os.path.join(settings.APP_HOME, 'indivo/tests/schemas/test/testmed/testmed.xml')).read()
        response = self.client.post('/records/%s/documents/'%(self.record.id), 
                                    test_med_data,'application/xml')
        self.assertEquals(response.status_code, 200)

        # get a JSON encoded report on TestMed
        response = self.client.get('/records/%s/reports/TestMed/'%(self.record.id), {'response_format':'application/json'})
        self.assertEquals(response.status_code, 200)

        # parse response and check against expected         
        response_json = json.loads(response.content)
        self.assertEquals(len(response_json), 1)
        
        # delete the document ids, since they won't be consistent 
        test_med = response_json[0]
        del test_med['__documentid__']
        test_prescription = response_json[0]['prescription']
        del test_prescription['__documentid__']
        test_fill_1, test_fill_2 = response_json[0]['fills']
        del test_fill_1['__documentid__']
        del test_fill_2['__documentid__']
        
        expected_json = json.loads(TEST_TESTMED_JSON)
        # we sort the fills here by date, so the JSON comparison will be consistent for this test
        response_json[0]['fills'].sort(key=lambda fill: fill['date_filled'])
        expected_json[0]['fills'].sort(key=lambda fill: fill['date_filled'])
        self.assertTrue(response_json == expected_json, "JSON does not match expected")
        
    def test_nested_model_xml(self):
        # post new document with a TestMed
        test_med_data = open(os.path.join(settings.APP_HOME, 'indivo/tests/schemas/test/testmed/testmed.xml')).read()
        response = self.client.post('/records/%s/documents/'%(self.record.id), 
                                    test_med_data,'application/xml')
        self.assertEquals(response.status_code, 200)
        
        # get a JSON encoded report on TestMed
        response = self.client.get('/records/%s/reports/TestMed/'%(self.record.id), {'response_format':'application/xml'})
        self.assertEquals(response.status_code, 200)

        # parse response and check          
        response_xml = etree.XML(response.content)
        test_meds = response_xml.findall('./Model')
        self.assertEqual(len(test_meds), 1)
        test_med = test_meds[0]
        
        # check TestMed
        self.assertEqual(len(test_med.findall('Field')), 6, "expected 6 fields on TestMed")
        self.assertEqual(test_med.get('name'), 'TestMed')
        self.assertEqual(test_med.find('Field[@name="date_started"]').text, '2010-10-01T00:00:00Z')
        self.assertEqual(test_med.find('Field[@name="name"]').text, 'med1')
        self.assertEqual(test_med.find('Field[@name="brand_name"]').text, 'Advil')
        self.assertEqual(float(test_med.find('Field[@name="frequency"]').text), 2)
        
        # test TestPrescription
        test_prescription = test_med.find('./Field[@name="prescription"]/Model')
        self.assertTrue(test_prescription is not None, "prescription not found")
        self.assertEqual(test_prescription.find('Field[@name="prescribed_by_name"]').text, 'Kenneth D. Mandl')
        self.assertEqual(test_prescription.find('Field[@name="prescribed_on"]').text, '2010-09-30T00:00:00Z')

        # test TestFill
        test_fills = test_med.findall('./Field[@name="fills"]/Models/Model')
        self.assertEqual(len(test_fills), 2)
        self.assertEqual(test_fills[0].get("name"), "TestFill")
        self.assertEqual(float(test_fills[0].find('Field[@name="supply_days"]').text), 30.0)
        
    def test_default_response_format(self):
        # post new document with a TestMed
        test_med_data = open(os.path.join(settings.APP_HOME, 'indivo/tests/schemas/test/testmed/testmed.xml')).read()
        response = self.client.post('/records/%s/documents/'%(self.record.id), 
                                    test_med_data,'application/xml')
        self.assertEquals(response.status_code, 200)

        # request TestMed report without specifying response_format
        response = self.client.get('/records/%s/reports/TestMed/'%(self.record.id))
        self.assertEquals(response.status_code, 200)
        
        # should get back JSON
        self.assertEquals(response['content-type'], 'application/json')
        response_json = json.loads(response.content)
        
        # delete the document ids, since they won't be consistent 
        test_med = response_json[0]
        del test_med['__documentid__']
        test_prescription = response_json[0]['prescription']
        del test_prescription['__documentid__']
        test_fill_1, test_fill_2 = response_json[0]['fills']
        del test_fill_1['__documentid__']
        del test_fill_2['__documentid__']
        
        expected_json = json.loads(TEST_TESTMED_JSON)
        # we sort the fills here by date, so the JSON comparison will be consistent for this test
        response_json[0]['fills'].sort(key=lambda fill: fill['date_filled'])
        expected_json[0]['fills'].sort(key=lambda fill: fill['date_filled'])
        self.assertTrue(response_json == expected_json, "JSON does not match expected")
        
    def test_unsupported_response_format(self):

        # post new document with a TestMed
        test_med_data = open(os.path.join(settings.APP_HOME, 'indivo/tests/schemas/test/testmed/testmed.xml')).read()
        response = self.client.post('/records/%s/documents/'%(self.record.id), 
                                    test_med_data,'application/xml')
        self.assertEquals(response.status_code, 200)
        
        # request an unsupported response_format
        response = self.client.get('/records/%s/reports/TestMed/'%(self.record.id), {'response_format':'application/junk'})
        self.assertEquals(response.status_code, 400)
        
    def test_core_model_xml(self):
        #Add some sample Reports
        self.loadTestReports(record=self.record)
        
        response = self.client.get('/records/%s/reports/LabResult/'%(self.record.id), {'response_format':'application/xml'})
        self.assertEquals(response.status_code, 200)
        
        # parse response and check          
        response_xml = etree.XML(response.content)
        labs = response_xml.findall('./Model')
        self.assertEqual(len(labs), 1)
        lab = labs[0]
        
        self.assertEqual(len(lab.findall('Field')), 35)
        self.assertEqual(lab.get('name'), 'LabResult')
        
    def test_sdmx_schema(self):

        # Post an SDMX document that matches our TestMed datamodel
        sdmx_doc = open(os.path.join(settings.APP_HOME, 'indivo/tests/data_models/test/testmodel/example.sdmx')).read()
        url = "/records/%s/documents/"%self.record.id
        response = self.client.post(url, data=sdmx_doc, content_type='application/xml')
        self.assertEqual(response.status_code, 200)

        # Now fetch the TestMed data elements, and expect to find our data
        url ="/records/%s/reports/TestMed/?response_format=application/xml"%self.record.id
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200)

        response_etree = etree.XML(response.content)
        self.assertEqual(response_etree.tag, 'Models')

        # Check the top-level TestMed
        required_fields = {
            'date_started': (date, datetime.datetime(year=2010, month=8, day=7)),
            'name': (str, "med2"),
            'brand_name': (str, "MyExpensiveMed"),
            'frequency': (float, 4),
            'prescription': None,
            'fills': None
            }
        test_meds = response_etree.findall('Model')
        self.assertEqual(len(test_meds), 1)
        test_med_el = test_meds[0]
        self.assertValidSDMXModel(test_med_el, {'name': 'TestMed'}, required_fields)
        
        # Check the Prescription Node
        required_fields = {
            'prescribed_by_name': (str, "Dr. Doktor"),
            'prescribed_on': (date, datetime.datetime(year=2010, month=8, day=7, hour=11)),
            }
        scrip_node_models = test_med_el.find('Field[@name="prescription"]').findall('Model')
        self.assertEqual(len(scrip_node_models), 1)
        self.assertValidSDMXModel(scrip_node_models[0], {'name':'TestPrescription'}, required_fields)

        # Check the Fill Node
        required_fields = {
            'date_filled': (date, datetime.datetime(year=2010, month=8, day=7, hour=16)),
            'supply_days': (float, 30),
            }
        fill_node_models = test_med_el.find('Field[@name="fills"]').find('Models').findall('Model')
        self.assertEqual(len(fill_node_models), 1)        
        self.assertValidSDMXModel(fill_node_models[0], {'name':'TestFill'}, required_fields)

    def test_data_model_validation(self):
        
        # post some documents that are valid by our TestMed schema but invalid against the TestMed datamodel validators
        invalid_docs = []
        invalid_docs.append(open(os.path.join(settings.APP_HOME, 'indivo/tests/schemas/test/testmed/testmed.xml.invalid')).read())
        invalid_docs.append(open(os.path.join(settings.APP_HOME, 'indivo/tests/schemas/test/testmed/testmed2.xml.invalid')).read())
        invalid_docs.append(open(os.path.join(settings.APP_HOME, 'indivo/tests/schemas/test/testmed/testmed3.xml.invalid')).read())
        for doc in invalid_docs:
            response = self.client.post("/records/%s/documents/"%self.record.id, data=doc, content_type='application/xml')
            self.assertTrue(response.status_code, 400)

        # post some documents that are valid against the validators
        valid_docs = []
        valid_docs.append(open(os.path.join(settings.APP_HOME, 'indivo/tests/schemas/test/testmed/testmed.xml')).read())
        valid_docs.append(open(os.path.join(settings.APP_HOME, 'indivo/tests/schemas/test/testmed/testmed2.xml')).read())
        valid_docs.append(open(os.path.join(settings.APP_HOME, 'indivo/tests/schemas/test/testmed/testmed3.xml')).read())
        for doc in valid_docs:
            response = self.client.post("/records/%s/documents/"%self.record.id, data=doc, content_type='application/xml')
            self.assertTrue(response.status_code, 400)
        
        # Only these three docs should come back in a report
        response = self.client.get('/records/%s/reports/TestMed/'%(self.record.id), {'response_format':'application/json'})
        self.assertEquals(response.status_code, 200)
        response_json = json.loads(response.content)
        self.assertEquals(len(response_json), 3)
 

########NEW FILE########
__FILENAME__ = preferences
from indivo.tests.internal_tests import InternalTests
from indivo.tests.data import TEST_ACCOUNTS, TEST_RECORDS, TEST_USERAPPS

class UserPreferencesIntegrationTests(InternalTests):

    def setUp(self):
        super(UserPreferencesIntegrationTests, self).setUp()

        # Create an Account
        self.account = self.createAccount(TEST_ACCOUNTS, 4)

        # Add a record for it
        self.record = self.createRecord(TEST_RECORDS, 0, owner=self.account)
        
        # Create an app, and add it to the record
        self.pha = self.createUserApp(TEST_USERAPPS, 0)
        self.addAppToRecord(record=self.record, with_pha=self.pha)

        self.PREFS_URL = '/accounts/%s/apps/%s/preferences'%(self.account.email, self.pha.email)

    def tearDown(self):
        super(UserPreferencesIntegrationTests,self).tearDown()
        
    def test_add_preferences(self):
        
        # Start with no preferences
        response = self.client.get(self.PREFS_URL)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.content, '') # No preferences

        # Add some bogus preferences
        prefs = 'MYPREFS'
        response = self.client.put(self.PREFS_URL, data=prefs, content_type='text/plain')
        self.assertEqual(response.status_code, 200)

        # Read them back
        response = self.client.get(self.PREFS_URL)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.content, prefs)

    def test_replace_preferences(self):

        # Add some bogus preferences
        prefs = 'MYPREFS'
        response = self.client.put(self.PREFS_URL, data=prefs, content_type='text/plain')
        self.assertEqual(response.status_code, 200)

        # Read them back
        response = self.client.get(self.PREFS_URL)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.content, prefs)

        # Add some new preferences, XML this time
        new_prefs = "<Preferences>stuff here</Preferences>"
        response = self.client.put(self.PREFS_URL, data=new_prefs, content_type='application/xml')
        self.assertEqual(response.status_code, 200)

        # Read them back: replacement should work
        response = self.client.get(self.PREFS_URL)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.content, new_prefs)

    def test_delete_preferences(self):

        # Start with no preferences
        response = self.client.get(self.PREFS_URL)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.content, '') # No preferences

        # Delete them: should succeed with no changes
        response = self.client.delete(self.PREFS_URL)
        self.assertEqual(response.status_code, 200)
        
        # Still no preferences
        response = self.client.get(self.PREFS_URL)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.content, '') # No preferences

        # Add some preferences
        prefs = 'MYPREFS'
        response = self.client.put(self.PREFS_URL, data=prefs, content_type='text/plain')
        self.assertEqual(response.status_code, 200)

        # Read them back
        response = self.client.get(self.PREFS_URL)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.content, prefs)

        # Delete them: should erase the preferences
        response = self.client.delete(self.PREFS_URL)
        self.assertEqual(response.status_code, 200)
        
        # Should no longer have preferences
        response = self.client.get(self.PREFS_URL)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.content, '') # No preferences

########NEW FILE########
__FILENAME__ = accounting
from xml.etree import ElementTree

from utils import parse_xml, xpath, assert_403, assert_200

def test_account(IndivoClient):
  try:
    chrome_client = IndivoClient('chrome', 'chrome')

    # simplest test case
    chrome_client.create_account({'user_email' : 'ben5@indivo.org', 'contact_email':'ben5@adida.net', 'user_pass': 'foo'})
    chrome_client.add_auth_system(account_id='ben5@indivo.org', data={'system':'password', 'username':'ben5', 'password': 'test5'})
      
    # create an account
    chrome_client.create_account({'user_email' : 'ben@indivo.org', 'primary_secret_p' : '1', 'secondary_secret_p' : '1', 'contact_email':'ben@adida.net'})

    # reset it
    chrome_client.account_reset(account_id='ben@indivo.org')

    # get the account info 
    account_resp = chrome_client.account_info(account_id = 'ben@indivo.org')
    parsed_resp = ElementTree.fromstring(account_resp.response['response_data'])
    secondary_secret = parsed_resp.findtext('secret')

    # get the primary secret
    primary_secret_resp = chrome_client.account_primary_secret(account_id = 'ben@indivo.org')
    parsed_resp = ElementTree.fromstring(primary_secret_resp.response['response_data'])
    primary_secret = parsed_resp.text

    # initialize it
    chrome_client.account_initialize(account_id='ben@indivo.org', primary_secret=primary_secret, data={'secondary_secret':secondary_secret})

    # set username and password
    chrome_client.add_auth_system(account_id='ben@indivo.org', data={'system':'password', 'username':'ben', 'password': 'test'})

    # set the password to something else
    chrome_client.account_set_password(account_id='ben@indivo.org', data={'password':'test2'})      
      
    # see if we can create a session for it
    chrome_client.create_session({'username':'ben','user_pass':'test2'})

    # now the token is in the client, we can change the password
    chrome_client.account_change_password(account_id = 'ben@indivo.org', data={'old':'test2','new':'test3'})

    # change the info
    assert_200(chrome_client.account_info_set(account_id= 'ben@indivo.org', data={'contact_email':'ben2@adida.net','full_name':'Ben2 Adida'}))

    # change the username
    assert_200(chrome_client.account_username_set(account_id='ben@indivo.org', data={'username':'ben2'}))

    chrome_client = IndivoClient('chrome', 'chrome')
    chrome_client.create_session({'username':'ben2','user_pass':'test3'})

    # change the state back and forth
    chrome_client.account_set_state(account_id='ben@indivo.org', data={'state': 'disabled'})
    chrome_client.account_set_state(account_id='ben@indivo.org', data={'state': 'active'})
    chrome_client.account_set_state(account_id='ben@indivo.org', data={'state': 'retired'})
    assert_403(chrome_client.account_set_state(account_id='ben@indivo.org', data={'state': 'active'}))
    
    # do account search
    chrome_client = IndivoClient('chrome', 'chrome')
    accounts = parse_xml(chrome_client.account_search(parameters={'contact_email': 'ben@adida.net'}))
    accounts2 = parse_xml(chrome_client.account_search(parameters={'fullname': 'Steve Zabak'}))

    # create an account with a mychildrens auth system
    chrome_client.create_account({'user_email' : 'ben-chb@indivo.org', 'primary_secret_p' : '0', 'secondary_secret_p' : '0', 'contact_email':'ben-chb@adida.net'})
    chrome_client.add_auth_system(account_id='ben-chb@indivo.org', data={'system':'mychildrens', 'username':'ben-chb'})
    chrome_client.account_set_state(account_id='ben-chb@indivo.org', data={'state':'active'})
    
    # log in with the mychildrens auth system
    chrome_client.create_session({'username':'ben-chb','system':'mychildrens'})
  except Exception, e:
    return False, e
  return True

########NEW FILE########
__FILENAME__ = appspecific
"""
Test proper partition of app-specific and app-record-specific

Ben Adida
2010-09-13
"""

import data

from utils import *

PRD = 'prd'

def test_appspecific(IndivoClient):
    """
    ensure that app-specific and app-record-specific data are 
    properly partitioned
    """
    admin_client = IndivoClient(data.machine_app_email, data.machine_app_secret)

    # create a record and authorize a PHA to access it
    record = parse_xml(admin_client.create_record(data=data.demographics))
    record_id = xpath(record, '/Record/@id')[0]
    token = admin_client.setup_app(record_id=record_id, app_id=data.app_email).response['prd']

    pha_client = IndivoClient(data.app_email, data.app_secret)

    # store an app-specific document
    appspecific_doc = parse_xml(pha_client.post_app_document_ext(app_id = data.app_email, external_id='foobar_partition_appspecific', data=data.allergy))

    # store an app-record-specific document
    pha_client.update_token(token)
    apprecordspecific_doc = parse_xml(pha_client.put_recapp_document_ext(record_id = record_id, app_id = data.app_email, external_id='foobar_partition_apprecordspecific', data=data.allergy))

    # get it by metadata
    apprecordspecific_doc_check = parse_xml(pha_client.read_recapp_document_ext_meta(record_id = record_id, app_id = data.app_email, external_id='foobar_partition_apprecordspecific'))
    
    def check_lists():
        pha_client = IndivoClient(data.app_email, data.app_secret)

        # get the list of documents that are available in app-specific
        appspecific_list = parse_xml(pha_client.read_app_documents(app_id = data.app_email))
        
        # get the list of documents that are available in 
        pha_client.update_token(token)
        apprecordspecific_list = parse_xml(pha_client.get_recapp_documents(record_id = record_id, app_id = data.app_email))
        
        # make sure they are not visible to each other's call
        assert xpath(apprecordspecific_doc, '/Document/@id')[0] in xpath(apprecordspecific_list, '/Documents/Document/@id')
        assert xpath(appspecific_doc, '/Document/@id')[0] in xpath(appspecific_list, '/Documents/Document/@id')
        assert xpath(appspecific_doc, '/Document/@id')[0] not in xpath(apprecordspecific_list, '/Documents/Document/@id')
        assert xpath(apprecordspecific_doc, '/Document/@id')[0] not in xpath(appspecific_list, '/Documents/Document/@id')
        

    check_lists()
    
    # create a second record and authorize the PHA again
    record_2 = parse_xml(admin_client.create_record(data=data.demographics))
    record_id_2 = xpath(record, '/Record/@id')[0]
    token = admin_client.setup_app(record_id=record_id_2, app_id=data.app_email).response['prd']

    # add an app-record-specific doc in there, shouldn't affect either of the other two, and should be able to use the same external_id
    pha_client.update_token(token)
    apprecordspecific_doc_2 = parse_xml(pha_client.put_recapp_document_ext(record_id = record_id_2, app_id = data.app_email, external_id='foobar_partition_apprecordspecific', data=data.immunization))
    
    check_lists()

########NEW FILE########
__FILENAME__ = auditing
import data

def test_auditing(IndivoClient):
  try:
    admin_client = IndivoClient(data.machine_app_email, data.machine_app_secret)
    admin_client.set_app_id(data.app_email)
    record_id = admin_client.create_record(data=data.demographics).response['prd']['Record'][0]
    admin_client.set_record_owner(data=data.account['account_id'])

    chrome_client = IndivoClient('chrome', 'chrome')
    chrome_client.create_session(data.account)
    chrome_client.read_record(record_id=record_id)

    chrome_client.post_document(data=data.doc01)
    docs = chrome_client.read_documents().response['prd']['Documents']

    # Read all documents
    for doc_id in docs:
      #Read doc_ids
      chrome_client.read_document(document=doc_id)

      # Set the app_id to data.app_email
      chrome_client.read_record_audit()
      chrome_client.read_document_audit(document_id=doc_id)
      chrome_client.read_function_audit(function_name='document')

  except Exception, e:
    return False, e
  return True, None


########NEW FILE########
__FILENAME__ = binary_document_handling
import os
import data

THIS_DIR = os.path.abspath(os.path.dirname(__file__))

def test_binary_document_handling(IndivoClient):
  PRD = 'prd'
  try:
    test_file_name = 'xxsmall_binary.chp'
    test_file_location = THIS_DIR + '/../files/'
    test_file = test_file_location + test_file_name
    
    user_client = IndivoClient(data.app_email, data.app_secret)
    user_client.set_app_id(data.app_email)
    if not os.path.exists(test_file):
      raise Exception, test_file_name + ' does not exist'
    else:
      try:
        import fileinput
        lines = ''.join([line for line in fileinput.input(test_file)])
      except ImportError:
        f = open(test_file)
        lines = ''.join([line for line in f])
      doc_id = user_client.post_app_document(data=lines)
  except Exception, e:
    return False, e
  return True


########NEW FILE########
__FILENAME__ = data
from indivo.tests import data

doc_type = 'HBA1C'
label = 'testing_label'
external_doc_id = 'external_doc_test'
app_email = 'stephanie@apps.indivo.org'
app_secret = 'norepinephrine'
app2_email = 'problems@apps.indivo.org'
machine_app_email = 'stemapnea@apps.indivo.org'
machine_app_secret = 'neuronagility'

chrome_app_email= 'chrome@apps.indivo.org'
chrome_consumer_key = 'chrome'
chrome_consumer_secret ='chrome'

account = {'account_id' : 'stevezabak@informedcohort.org', 'username' : 'stevezabak', 'user_pass' : 'abc'}
account02 = {'account_id' : 'benadida@informedcohort.org', 'username' : 'benadida', 'user_pass' : 'test'}
account03 = {'account_id' : 'stevezabak2@informedcohort.org', 'username' : 'stevezabak2', 'user_pass' : 'abcd'}
alice_account = {'user_email' : 'alice@childrens.harvard.edu', 'user_pass' : 'abc'}
bob_account = {'user_email' : 'bob@childrens.harvard.edu', 'user_pass' : 'def'}
message01 = {'subject' : 'test 1', 'body' : 'hello world', 'message_id' : 'msg_01', 'severity': 'medium'}
message02 = {'subject' : 'test 2', 'body' : 'hello mars', 'message_id' : 'msg_02', 'severity': 'high'}

hba1c = [ {'value' : '3.4', 'datetime' : '2009-01-02T12:03:10Z'},
          {'value' : '9.2', 'datetime' : '2008-01-22T17:29:59Z'},
          {'value' : '4.8', 'datetime' : '2007-11-02T12:16:38Z'},
          {'value' : '4.6', 'datetime' : '2009-04-16T03:22:24Z'},
          {'value' : '3.1', 'datetime' : '2009-09-12T12:13:43Z'},
          {'value' : '3.3', 'datetime' : '2009-01-03T11:03:23Z'},
          {'value' : '1.9', 'datetime' : '2009-08-11T02:38:32Z'},
          {'value' : '1.3', 'datetime' : '2009-01-09T12:12:20Z'},
          {'value' : '6.7', 'datetime' : '2009-03-12T02:43:39Z'},
          {'value' : '3.7', 'datetime' : '2009-02-13T02:11:17Z'}]

doc00 = "<Document id='HELLOWORLD00' xmlns='http://indivo.org/vocab#'></Document>"
doc01 = "<Document id='HELLOWORLD01' xmlns='http://indivo.org/vocab#'></Document>"
doc02 = "<Document id='HELLOWORLD02' xmlns='http://indivo.org/vocab#'></Document>"
doc03 = "<Document id='HELLOWORLD03' xmlns='http://indivo.org/vocab#'></Document>"
doc04 = "<Document id='HELLOWORLD04' xmlns='http://indivo.org/vocab#'></Document>"
doc05 = "<Document id='HELLOWORLD05' xmlns='http://indivo.org/vocab#'></Document>"
doc06 = "<Document id='HELLOWORLD06' xmlns='http://indivo.org/vocab#'></Document>"
doc07 = "<Document id='HELLOWORLD07' xmlns='http://indivo.org/vocab#'></Document>"
doc08 = "<Document id='HELLOWORLD08' xmlns='http://indivo.org/vocab#'></Document>"
doc09 = "<Document id='HELLOWORLD09' xmlns='http://indivo.org/vocab#'></Document>"
doc10 = "<Document id='HELLOWORLD10' xmlns='http://indivo.org/vocab#'></Document>"
doc11 = "<Document id='HELLOWORLD11' xmlns='http://indivo.org/vocab#'></Document>"
doc12 = "<Document id='HELLOWORLD12' xmlns='http://indivo.org/vocab#'></Document>"
doc13 = "<Document id='HELLOWORLD13' xmlns='http://indivo.org/vocab#'></Document>"
doc14 = "<Document id='HELLOWORLD14' xmlns='http://indivo.org/vocab#'></Document>"
doc15 = "<Document id='HELLOWORLD15' xmlns='http://indivo.org/vocab#'></Document>"
doc16 = "<Document id='HELLOWORLD16' xmlns='http://indivo.org/vocab#'></Document>"
doc17 = "<Document id='HELLOWORLD17' xmlns='http://indivo.org/vocab#'></Document>"
doc18 = "<Document id='HELLOWORLD18' xmlns='http://indivo.org/vocab#'></Document>"
doc19 = "<Document id='HELLOWORLD19' xmlns='http://indivo.org/vocab#'></Document>"
doc20 = "<Document id='HELLOWORLD20' xmlns='http://indivo.org/vocab#'></Document>"

demographics = '''<?xml version="1.0" encoding="utf-8" ?>
                    <Demographics xmlns="http://indivo.org/vocab/xml/documents#">
                        <dateOfBirth>1939-11-15</dateOfBirth>
                        <gender>male</gender>
                        <email>test@fake.org</email>
                        <ethnicity>Scottish</ethnicity>
                        <preferredLanguage>english</preferredLanguage>
                        <race>caucasian</race>
                        <Name>
                            <familyName>Wayne</familyName>
                            <givenName>Bruce</givenName>
                            <prefix>Mr</prefix>
                            <suffix>Jr</suffix>
                        </Name>
                        <Telephone>
                            <type>h</type>
                            <number>555-5555</number>
                            <preferred>true</preferred>
                        </Telephone>
                        <Telephone>
                            <type>c</type>
                            <number>555-6666</number>
                        </Telephone>
                        <Address>
                            <country>USA</country>
                            <city>Gotham</city>
                            <postalCode>90210</postalCode>
                            <region>secret</region>
                            <street>1007 Mountain Drive</street>
                        </Address>
                    </Demographics>'''
                    
demographics2 = '''<?xml version="1.0" encoding="utf-8" ?>
                    <Demographics xmlns="http://indivo.org/vocab/xml/documents#">
                        <dateOfBirth>1939-11-15</dateOfBirth>
                        <gender>male</gender>
                        <email>test@fake.org</email>
                        <ethnicity>Scottish</ethnicity>
                        <preferredLanguage>english</preferredLanguage>
                        <race>caucasian</race>
                        <Name>
                            <familyName>McTest</familyName>
                            <givenName>Steve</givenName>
                            <prefix>Mr</prefix>
                            <suffix>Jr</suffix>
                        </Name>
                        <Telephone>
                            <type>home</type>
                            <number>555-5555</number>
                            <preferred>true</preferred>
                        </Telephone>
                        <Telephone>
                            <type>cell</type>
                            <number>555-6666</number>
                        </Telephone>
                        <Address>
                            <country>USA</country>
                            <city>Gotham</city>
                            <postalCode>90210</postalCode>
                            <region>secret</region>
                            <street>1007 Mountain Drive</street>
                        </Address>
                    </Demographics>'''
                    
# an allergy with the wrong allergy schema, should fail too
malformed_allergy = data.reports.allergy._TEST_ALLERGIES_INVALID[0]

allergy = data.reports.allergy._TEST_ALLERGIES[0]

immunization = data.reports.immunization._TEST_IMMUNIZATIONS[0]

measurement00 = "<HBA1C xmlns='http://indivo.org/vocab/xml/documents#' value='1.77' unit='percent' datetime='2009-07-22T01:00:00.000Z' />"
measurement01 = "<HBA1C xmlns='http://indivo.org/vocab/xml/documents#' value='2.13' unit='percent' datetime='2009-06-17T03:00:00.034Z' />"
measurement02 = "<HBA1C xmlns='http://indivo.org/vocab/xml/documents#' value='3.13' unit='percent' datetime='2009-06-17T03:00:00Z' />"

medication = """<Medication xmlns="http://indivo.org/vocab/xml/documents#"> <dateStarted>2009-02-05</dateStarted> <name type="http://indivo.org/codes/meds#" abbrev="c2i" value="COX2 Inhibitor">COX2 Inhibitor</name>   <brandName type="http://indivo.org/codes/meds#" abbrev="vioxx" value="Vioxx">Vioxx</brandName> <dose> <value>3</value> <unit type="http://indivo.org/codes/units#" value="pills" abbrev="p">pills</unit> </dose> <route type="http://indivo.org/codes/routes#" value="PO">By Mouth</route> <strength> <value>100</value> <unit type="http://indivo.org/codes/units#" value="mg" abbrev="mg">mg</unit> </strength> <frequency type="http://indivo.org/codes/frequency#" value="daily" abbrev="daily">every 12 hours</frequency> <prescription> <by> <name>Dr. Ken Mandl</name> <institution>Children's Hospital Boston</institution> </by> <on>2009-02-01</on> <stopOn>2010-01-31</stopOn> <dispenseAsWritten>true</dispenseAsWritten> <duration>P2M</duration> <refillInfo>once a month for 3 months</refillInfo> <instructions>don't take them all at once!</instructions> </prescription> </Medication>"""

medication_no_codes = """<Medication xmlns="http://indivo.org/vocab/xml/documents#"> <dateStarted>2009-02-05</dateStarted> <name>COX2 Inhibitor</name>   <brandName>Vioxx</brandName> <dose> <textValue>3 pills</textValue></dose> <route>By Mouth</route> <strength> <value>100</value> <unit>mg</unit> </strength> <frequency>every 12 hours</frequency> <prescription> <by> <name>Dr. Ken Mandl</name> <institution>Children's Hospital Boston</institution> </by> <on>2009-02-01</on> <stopOn>2010-01-31</stopOn> <dispenseAsWritten>true</dispenseAsWritten> <duration>P2M</duration> <refillInfo>once a month for 3 months</refillInfo> <instructions>don't take them all at once!</instructions> </prescription> </Medication>"""

medication2 = "<Medication xmlns='http://indivo.org/vocab/xml/documents#'> <name type='http://indivo.org/codes/meds#' value='Tylenol' abbrev='Tylenol'>Tylenol</name><dose><textValue>2</textValue></dose> <frequency type='http://indivo.org/codes/frequency#' value='225756002' abbrev='q4'>every 4 hours</frequency> </Medication>"

problem = "<Problem xmlns='http://indivo.org/vocab/xml/documents#'> <dateOnset>2009-05-16T12:00:00Z</dateOnset> <dateResolution>2009-05-16T16:00:00Z</dateResolution> <name type='http://codes.indivo.org/problems/' value='123' abbrev='MI'>Myocardial Infarction</name> <comments>mild heart attack</comments> <diagnosedBy>Steve Zabak</diagnosedBy> </Problem>"

problem_no_code = "<Problem xmlns='http://indivo.org/vocab/xml/documents#'> <dateOnset>2009-05-16T12:00:00Z</dateOnset> <dateResolution>2009-05-16T16:00:00Z</dateResolution> <name>Myocardial Infarction</name> <comments>mild heart attack</comments> <diagnosedBy>Steve Zabak</diagnosedBy> </Problem>"

problem_no_dates = "<Problem xmlns='http://indivo.org/vocab/xml/documents#'> <name>Myocardial Infarction</name> <comments>mild heart attack</comments> <diagnosedBy>Steve Zabak</diagnosedBy> </Problem>"

procedure = "<Procedure xmlns='http://indivo.org/vocab/xml/documents#'> <datePerformed>2009-05-16T12:00:00Z</datePerformed> <name type='http://codes.indivo.org/procedures#' value='85' abbrev='append'>Appendectomy</name> <provider> <name>Kenneth Mandl</name> <institution>Children's Hospital Boston</institution> </provider> </Procedure>"

procedure_no_code = "<Procedure xmlns='http://indivo.org/vocab/xml/documents#'> <datePerformed>2009-05-16T12:00:00Z</datePerformed> <name>Appendectomy</name> <provider> <name>Kenneth Mandl</name> <institution>Children's Hospital Boston</institution> </provider> </Procedure>"

equipment = "<Equipment xmlns='http://indivo.org/vocab/xml/documents#'><dateStarted>2010-09-01</dateStarted><name>Tractor</name> <vendor>John Deer</vendor> <description>Hello World</description></Equipment>"

equipment02 = '<Equipment xmlns="http://indivo.org/vocab/xml/documents#"><dateStarted>2010-09-02</dateStarted><name>cane</name></Equipment>'

vital_sign = data.reports.vital._TEST_VITALS[0]

patient_access_key = "<PatientAccessKey> <record_id>456</record_id> <token>z8j38em</token> <token_secret>hs92jwl</token_secret> <access_key> <patient_id>123</patient_id> <token>z8j38em</token> <token_secret>hs92jwl</token_secret> </access_key> </PatientAccessKey>"
access_key = "<AccessKey> <record_id>456</record_id> <token>z8j38em</token> <token_secret>hs92jwl</token_secret> <access_key> <patient_id>123</patient_id> <token>z8j38em</token> <token_secret>hs92jwl</token_secret> </access_key> </AccessKey>"

lab = data.reports.lab._TEST_LABS[0]

clinical_note= """
<SimpleClinicalNote xmlns="http://indivo.org/vocab/xml/documents#">
  <dateOfVisit>2010-02-02T12:00:00Z</dateOfVisit>
  <finalizedAt>2010-02-03T13:54:03Z</finalizedAt>
  <visitType type="http://codes.indivo.org/visit-types#" value="acute">Acute Care</visitType>
  <visitLocation>Longfellow Medical</visitLocation>
  <specialty type="http://codes.indivo.org/specialties#" value="hem-onc">Hematology/Oncology</specialty>

  <signature>
    <at>2010-02-03T13:12:00Z</at>
    
    <provider>
      <name>Kenneth Mandl</name>
      <institution>Children's Hospital Boston</institution>
    </provider>
  </signature>

  <signature>
    <at>2010-02-03T13:14:00Z</at>
    
    <provider>
      <name>Isaac Kohane</name>
      <institution>Children's Hospital Boston</institution>
    </provider>
  </signature>

  <chiefComplaint>stomach ache</chiefComplaint>
  <content>
    (repeated to test length)
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
    Patient presents with a serious condition of X and is probably going to need to see a doctor about Y and Z.
  </content>
</SimpleClinicalNote>
"""

########NEW FILE########
__FILENAME__ = document_handling
import os
import data

from lxml import etree
from utils import *

PRD = 'prd'
RESP_DATA = 'response_data'

def test_document_handling(IndivoClient):

  try:
    # Create Admin client
    admin_client = IndivoClient(data.machine_app_email, data.machine_app_secret)
    admin_client.set_app_id(data.app_email)
    record_id = admin_client.create_record(data=data.demographics).response[PRD]['Record'][0]
    admin_client.set_record_owner(data=data.account['account_id'])

    # Create a new record by external ID, twice.
    record_id_1 = etree.XML(admin_client.put_record_ext(principal_email = data.machine_app_email, external_id = 'record_ext_foobar', data=data.demographics).response[RESP_DATA]).attrib['id']
    record_id_2 = etree.XML(admin_client.put_record_ext(principal_email = data.machine_app_email, external_id = 'record_ext_foobar', data=data.demographics).response[RESP_DATA]).attrib['id']
    if record_id_1 != record_id_2:
      raise Exception("record creation with external ID not idempotent")

    # this should fail, because of bad principal_email
    # record_id_3 = etree.XML(admin_client.put_record_ext(principal_email = data.machine_app_email + "s", external_id = 'record_ext_foobar', data=data.contact).response[RESP_DATA]).attrib['id']

    # Create Chrome client
    chrome_client = IndivoClient(data.chrome_consumer_key, data.chrome_consumer_secret)
    chrome_client.create_session(data.account)
    chrome_client.read_record(record_id=record_id)

    chrome_client.post_document(data=data.doc01)
    document_id = chrome_client.read_documents().response[PRD]['Document'][0]
    chrome_client.read_document_meta(document_id=document_id)

    document_id = chrome_client.read_documents().response[PRD]['Document'][1]
    chrome_client.set_document_status(data='reason=void1&status=void')
    chrome_client.set_document_status(data='reason=archive&status=archived')
    chrome_client.set_document_status(data='reason=firstactive&status=active')
    chrome_client.set_document_status(data='reason=void2&status=void')
    chrome_client.read_document_status_history()

    chrome_client.post_document(data=data.doc02)
    document_id = chrome_client.read_documents().response[PRD]['Document'][0]
    #chrome_client.delete_document() : No longer used

    chrome_client.read_documents(parameters={'status':'active'})
    chrome_client.read_documents(parameters={'status':'void'})
    chrome_client.read_documents()

    chrome_client.post_document(data=data.doc03)
    document_id = chrome_client.read_documents().response[PRD]['Document'][0]
    chrome_client.read_document_meta(document_id=document_id)

    chrome_client.read_documents(parameters={'type':data.doc_type})
    chrome_client.read_document_versions(document_id=document_id)
    chrome_client.post_document_label(document_id=document_id, data=data.label)
    data_docs = [data.doc08, data.doc11, data.doc12, data.doc02, data.doc05]
    for data_doc in data_docs:
      response = chrome_client.replace_document(document_id=document_id, data=data_doc).response
      chrome_client.post_document_relate_given(rel_type='annotation', data=data.doc08)
      document_id = response[PRD]['Document'][0]

    assert_200(chrome_client.get_document_relate(rel_type='annotation'))

    document_id = chrome_client.post_document(data=data.allergy).response[PRD]['Document'][0]
    chrome_client.set_document_status(data='reason=allergy not correct&status=active')

    # this should fail
    assert_400(chrome_client.set_document_status(data='reason=allergy not correct&status=activated'), "bad status should not be allowed to be set on doc")

    chrome_client.post_document(data=data.measurement01)
    chrome_client.read_allergies()

    chrome_client.post_document(data=data.problem)
    chrome_client.read_documents(parameters={'type':'http://indivo.org/vocab/xml/documents#Problem'})

    # try out documents that should be wrong
    assert_400(chrome_client.post_document(data = data.malformed_allergy), "Malformed Allergy - wrong schema")
    
    # Delete all documents related to this record
    # chrome_client.delete_documents()

  except Exception, e:
    return False, e
  return True

 

########NEW FILE########
__FILENAME__ = document_metadata
import os
import data

def test_document_metadata(IndivoClient):
  PRD = 'prd'

  try:
    admin_client = IndivoClient(data.machine_app_email, data.machine_app_secret)
    record_id = admin_client.create_record(data=data.demographics).response[PRD]['Record'][0]

    admin_client.set_app_id(data.app_email)
    admin_client.set_record_owner(data=data.account['account_id'])
    token = admin_client.setup_app(record_id=record_id, app_id=data.app_email).response[PRD]

    chrome_client = IndivoClient('chrome', 'chrome')
    chrome_client.create_session(data.account)
    chrome_client.set_app_id(data.app_email)
    chrome_client.read_record(record_id=record_id)

    # Record specific
    chrome_client.post_document(data=data.doc01)
    chrome_client.read_document_meta()

    # Record specific w/external_id
    chrome_client.post_document_ext(external_id='extid1', app_id='problems@apps.indivo.org', data=data.doc01)
    chrome_client.read_document_ext_meta(external_id='extid1', app_id='problems@apps.indivo.org')

    user_client = IndivoClient(data.app_email, data.app_secret)
    user_client.set_app_id(data.app_email)
    user_client.update_token(token)
    user_client.ds.record_id = record_id

    # Record-App specific
    user_client.post_recapp_document(data=data.doc02)
    user_client.read_recapp_document_meta()

    user_client.put_recapp_document_ext(external_id='extid', data=data.doc03)
    user_client.read_recapp_document_ext_meta(external_id='extid')

    # App specific
    user_client.post_app_document(data=data.patient_access_key)
    user_client.read_app_document_meta()

    user_client.post_app_document_ext(external_id='extid2', data=data.doc04)
    user_client.read_app_document_ext_meta(external_id='extid2')

  except Exception, e:
    return False, e
  return True

########NEW FILE########
__FILENAME__ = document_processing
import os
import data

PRD = 'prd'

def test_document_processing(IndivoClient):
  try:
    admin_client = IndivoClient(data.machine_app_email, data.machine_app_secret)
    admin_client.set_app_id(data.app_email)
    record_id = admin_client.create_record(data=data.demographics).response[PRD]['Record'][0]
    admin_client.set_record_owner(data=data.account['account_id'])

    # SZ: DP shouldn't process app-specific documents
    user_client = IndivoClient(data.app_email, data.app_secret)
    user_client.set_app_id(data.app_email)
    user_client.post_app_document(data=data.measurement00)
    user_client.read_app_document()

    chrome_client = IndivoClient('chrome', 'chrome')
    chrome_client.create_session(data.account)
    chrome_client.read_record(record_id=record_id)

    # SZ: For testing io
    #response = chrome_client.post_document(data=data.lab01, debug=True)
    #chrome_client.read_labs(debug=True)

    doc_id = chrome_client.post_document(data=data.measurement00).response[PRD]['Document'][0]
    chrome_client.read_document()
    chrome_client.read_document_meta()

    chrome_client.replace_document(document_id = doc_id, data=data.measurement01)
    # SZ: Should return 404, can't replace document of an already replaced document
    chrome_client.replace_document(document_id = doc_id, data=data.measurement01)

    medical_documents = [ 
                          data.immunization, 
                          data.lab,
                          data.measurement00,
                          data.measurement01,
                          data.measurement02,
                          data.allergy,
                          data.equipment,
                          data.equipment02,
                          data.vital_sign,
                          data.vital_sign,
                          data.vital_sign,
                          data.procedure,
                          data.procedure_no_code,
                          data.clinical_note
                        ]

    for md in medical_documents:
      response = chrome_client.post_document(data=md)
      if response.response['response_status'] != 200:
        raise Exception("problem posting a document: %s" + response.response['response_data'])

    reports = [ 
                chrome_client.read_equipment(),
                chrome_client.read_procedures(),
                #chrome_client.read_measurements(lab_code='HBA1C', parameters={'limit':1})
                chrome_client.read_measurements(lab_code='HBA1C'),
                chrome_client.read_ccr_experimental(),
              ]

    for report in reports:
      response = report.response
      if response['response_status'] != 200:
        raise Exception, response
  except Exception, e:
    return False, e
  return True


########NEW FILE########
__FILENAME__ = messaging
import data

PRD = 'prd'

from utils import *

def test_messaging(IndivoClient):

  try:
    BODY    = 'body'
    SUBJECT = 'subject'
    MSG_ID  = 'message_id'
    SEVERITY = 'severity'

    admin_client = IndivoClient(data.machine_app_email, data.machine_app_secret)
    admin_client.set_app_id(data.app_email)

    account_id = admin_client.create_account(data.account03)[PRD]['Account'][0]
    admin_client.add_auth_system(account_id=account_id, data={'system':'password', 'username':data.account03['username'], 'password':data.account03['user_pass']})
    record_id = admin_client.create_record(data=data.demographics).response['prd']['Record'][0]

    admin_client.set_record_owner(data=account_id)
    admin_client.setup_app(record_id=record_id, app_id=data.app_email)
    admin_client.message_record(data={SUBJECT : data.message01[SUBJECT], 
                                      BODY    : data.message01[BODY],
                                      SEVERITY: data.message01[SEVERITY]}, 
                                      message_id = data.message01[MSG_ID])
    admin_client.message_account(account_id = account_id,
                                  data= { SUBJECT : data.message02[SUBJECT], 
                                          BODY    : data.message02[BODY],
                                          MSG_ID  : data.message02[MSG_ID],
                                          SEVERITY : data.message02[SEVERITY]})

    token = admin_client.setup_app( record_id = record_id, 
                                    app_id    = data.app_email).response[PRD]

    user_client = IndivoClient(data.app_email, data.app_secret)
    user_client.update_token(token)
    user_client.set_app_id(data.app_email)
    user_client.get_messages(record_id = record_id)

    chrome_client = IndivoClient(data.chrome_consumer_key, data.chrome_consumer_secret)
    chrome_client.create_session(data.account03)


    #
    # check that archival removes one of the messages
    # 

    def num_messages():
      messages = xpath(parse_xml(chrome_client.account_inbox(account_id = data.account03['account_id'])), "/Messages/Message")
      return len(messages)
    
    num_messages_before = num_messages()
    message_id = xpath(parse_xml(chrome_client.account_inbox(account_id = data.account03['account_id'])), "/Messages/Message/@id")[0]

    chrome_client.account_message_archive(account_id = data.account03['account_id'], message_id = message_id)
    num_messages_after = num_messages()

    assert num_messages_before - num_messages_after == 1, "message didn't get archived"

  except Exception, e:
    return False, e
  return True

########NEW FILE########
__FILENAME__ = oauthing
import data

def test_oauthing(IndivoClient):
  user_client = IndivoClient(data.app_email, data.app_secret)
  user_client.set_app_id(data.app_email)
  user_client.get_request_token(data='oauth_callback=oob')

  admin_client = IndivoClient(data.machine_app_email, data.machine_app_secret)
  admin_client.set_app_id(data.app_email)
  record_id = admin_client.create_record(data=data.demographics).response['prd']['Record'][0]
  admin_client.set_record_owner(data=data.account['account_id'])

  # try setting up with two setup documents, to make sure that's possible
  admin_client.setup_app(record_id=record_id, app_id=data.app_email, data="<setup>foo</setup>")
  admin_client.setup_app(record_id=record_id, app_id=data.app2_email, data="<setup>bar</setup>")

########NEW FILE########
__FILENAME__ = pha_delete
import data

def test_pha_delete(IndivoClient):
  try:
    chrome_client = IndivoClient('chrome', 'chrome')
    # SZ: 403 expected since app_id != client
    chrome_client.delete_app(app_id='problems@apps.indivo.org')
  except Exception, e:
    return False, e
  return True

########NEW FILE########
__FILENAME__ = record_pha_delete
import data

def test_record_pha_delete(IndivoClient):
  try:
    admin_client = IndivoClient(data.machine_app_email, data.machine_app_secret)
    admin_client.set_app_id(data.app_email)
    record_id = admin_client.create_record(data=data.demographics).response['prd']['Record'][0]
    admin_client.set_record_owner(data=data.account['account_id'])
    admin_client.setup_app(record_id=record_id, app_id=data.app_email)
    admin_client.delete_record_app(record_id=record_id, app_id=data.app_email)
  except Exception, e:
    return False, e
  return True

########NEW FILE########
__FILENAME__ = record_shares
import os
import data

def test_record_shares(IndivoClient):
  PRD = 'prd'

  try:
    admin_client = IndivoClient(data.machine_app_email, data.machine_app_secret)
    record_id = admin_client.create_record(data=data.demographics).response[PRD]['Record'][0]

    admin_client.set_app_id(data.app_email)
    admin_client.set_record_owner(data=data.account['account_id'])
    token = admin_client.setup_app(record_id=record_id, app_id=data.app_email).response[PRD]

    chrome_client = IndivoClient('chrome', 'chrome')
    chrome_client.create_session(data.account)
    chrome_client.set_app_id(data.app_email)
    chrome_client.read_record(record_id=record_id)

    chrome_client.create_share(data={'account_id':'benadida@informedcohort.org'})
    chrome_client.get_shares()
    chrome_client.delete_share(account_id='benadida@informedcohort.org')
    
  except Exception, e:
    return False, e
  return True

########NEW FILE########
__FILENAME__ = security
"""
Do a bunch of security tests

Ben Adida
2010-08-27
"""
import os, cgi, uuid
import data

from lxml import etree
from django.utils import simplejson
from utils import *

PRD = 'prd'
RESP_DATA = 'response_data'

def test_client_expect_no_access(client, record_id, document_id, run_special_admin_calls=True):
    """
    run tests on a client with a given record_id where the client should have zero access
    to that record. The document ID is a real document inside that record, which shouldn't be allowed to be accessed of course.
    """

    # commented out for now: admin apps should be able to read records that they created
    #assert_403(client.read_record(record_id = record_id))

    if run_special_admin_calls:
        # admin client shouldn't be able to add a document, but TEMPORARILY we're allowing this
        # but NOT on a record not created by the admin app
        assert_403(client.post_document(record_id=record_id, data=data.doc01))
        
        # we DO allow an admin client to check the shares on a record it has created,
        # but not on another record
        assert_403(client.get_shares(record_id=record_id))

        # admin clients querying list of carenets... kosher?
        # should not be able to list carenets, see sharing, etc..
        assert_403(client.get_record_carenets(record_id=record_id))
        assert_403(client.create_carenet(record_id=record_id, data={'name':'foobar'}))
        assert_403(client.get_autoshare(record_id=record_id))

        assert_403(client.setup_app(record_id=record_id, app_id=data.app_email))

        assert_403(client.message_record(record_id=record_id, message_id= str(uuid.uuid1()), data={'subject':'foo','body':'bar', 'num_attachments': 1}))
        assert_403(client.message_record_attachment(record_id=record_id, message_id= str(uuid.uuid1()), attachment_num="1", data="<foo>bar</foo>"))

    assert_403(client.read_documents(record_id=record_id))

    assert_403(client.post_document_ext(record_id=record_id, app_id=data.app_email, external_id= "foobar-ext-fail", data=data.doc01))

    # even when the app_email matches the client, this should give no access
    assert_403(client.get_recapp_documents(record_id=record_id, app_id = data.app_email))

    # FIXME: test the replace call once it returns
    # assert_403(client.replace_document(record_id, document_id=document_id, data=data.doc02))

    assert_403(client.read_document(record_id=record_id, document_id=document_id))
    assert_403(client.read_document_meta(record_id=record_id, document_id=document_id))

    assert_403(client.read_document_versions(record_id=record_id, document_id=document_id))

    assert_403(client.set_document_status(record_id=record_id, document_id=document_id, data='reason=void1&status=void'))
    assert_403(client.read_document_status_history(record_id=record_id, document_id=document_id))

    reports = ['read_equipment', 'read_procedures', 
               ['read_measurements', {'lab_code':'HBA1C'}]]
    for report in reports:
        extra_params = {}
        if type(report) == list:
            extra_params = report[1]
            report = report[0]
        assert_403(getattr(client, report)(**combine_dicts({'record_id':record_id}, extra_params)))


def test_account_admin_calls(client, account_id):
    """
    the following calls should be doable only by an admin app on an account
    only an admin app can add auth system, set password, initialize account, and send the secret
    """

    assert_403(client.add_auth_system(account_id= account_id, data={'system':'password', 'username':'foo', 'password': 'bar'}))

    assert_403(client.account_set_password(account_id= account_id, data={'password': 'foo'}))
 
    # hard to test this one since the primary secret being wrong should give 403 too, should make this better
    assert_403(client.account_initialize(account_id= account_id, primary_secret='foobar'))

    assert_403(client.account_secret_resend(account_id = account_id))

    assert_403(client.account_set_state(account_id = account_id, data={'state': 'active'}))

    assert_403(client.account_primary_secret(account_id = account_id))

    assert_403(client.check_account_secrets(account_id = account_id, primary_secret='foo'))

    assert_403(client.account_forgot_password(account_id = account_id))

    assert_403(client.account_search(data = {'contact_email':  'foo@foo.com'}))

    assert_403(client.put_record_ext(principal_email = data.machine_app_email, external_id = 'record_ext_foobar', data=data.demographics))

    assert_403(client.message_account(account_id = account_id, data = {'subject':'foo', 'body':'bar'}))


def test_chrome_session_calls(client, account_id):
    """
    calls that should only be permissible to a chrome session that *is* the account in question and has full access to the record
    """

    # view account inbox
    assert_403(client.account_inbox(account_id = account_id))
        
    # view account inbox message
    assert_403(client.account_inbox_message(account_id = account_id, message_id='foo'))

    # accept attachment into record
    assert_403(client.account_inbox_message_attachment_accept(account_id = account_id, message_id='foo', attachment_num="1"))

    # view account healthfeed
    assert_403(client.account_notifications(account_id = account_id))

    # change password (FIXME: hard to test this, need something more specific)
    assert_403(client.account_change_password(account_id = account_id, data={'old':'foo', 'new':'bar'}))


def test_security(IndivoClient):

    account_id = data.account['account_id']
    account_id_2 = data.account02['account_id']

    ##
    ## Create a Record to see if others can access it
    ##
    admin_client = IndivoClient(data.machine_app_email, data.machine_app_secret)
    admin_client.set_app_id(data.app_email)
    record_id = admin_client.create_record(data=data.demographics).response[PRD]['Record'][0]
    admin_client.post_document(record_id=record_id, data=data.doc01)
    admin_client.set_record_owner(data=account_id)

    # create another different record and put some docs in it
    chrome_client = IndivoClient(data.chrome_consumer_key, data.chrome_consumer_secret)
    record2_id = chrome_client.create_record(data=data.demographics).response[PRD]['Record'][0]
    chrome_client.set_record_owner(record_id = record2_id, data= account_id_2)

    # put some documents into the first and second records
    chrome_client.create_session(data.account)
    document_id = chrome_client.post_document(record_id=record_id, data=data.allergy).response['prd']['Document'][0]
    chrome_client.post_document(record_id=record_id, data=data.allergy)
    chrome_client.post_document(record_id=record_id, data=data.allergy)

    chrome_client = IndivoClient(data.chrome_consumer_key, data.chrome_consumer_secret)
    chrome_client.create_session(data.account02)
    document2_id = chrome_client.post_document(record_id=record2_id, data=data.allergy).response['prd']['Document'][0]
    chrome_client.post_document(record_id=record2_id, data=data.allergy)
    chrome_client.post_document(record_id=record2_id, data=data.allergy)


    # other than the record owner, no one should have access

    ##
    ## A bogus client, should have access to nothing
    ##
    bogus_client = IndivoClient("foo","bar")

    assert_403(bogus_client.create_record(data=data.demographics))

    test_client_expect_no_access(bogus_client, record_id, document_id)

    # Creating a session should raise a 403
    try:
        token = bogus_client.create_session(data.account)
        if token:
            raise AssertionError("shouldn't be able to create a session: got a valid token.")    
    except IOError as e:
        if e.errno  != 403:
            raise AssertionError("shouldn't be able to create a session: got a non 403 response.")

    test_account_admin_calls(bogus_client, account_id)

    test_chrome_session_calls(bogus_client, account_id)

    # view account
    assert_403(bogus_client.account_info(account_id = account_id))


    ##
    ## Admin Client
    ##

    test_client_expect_no_access(admin_client, record_id, document_id, run_special_admin_calls=False)
    test_client_expect_no_access(admin_client, record2_id, document2_id, run_special_admin_calls=False)

    test_chrome_session_calls(admin_client, account_id)

    ##
    ## Chrome client = user
    ## 
    chrome_client = IndivoClient(data.chrome_consumer_key, data.chrome_consumer_secret)
    chrome_client.create_session(data.account)

    # no access to other record
    test_client_expect_no_access(chrome_client, record2_id, document2_id)

    # chrome client with session is NO LONGER an admin client
    test_account_admin_calls(chrome_client, account_id)

    # chrome client shouldn't access the other account
    test_chrome_session_calls(chrome_client, account_id_2)

    # view other account
    assert_403(chrome_client.account_info(account_id = account_id_2))

    ##
    ## User App 
    ## 
    
    # an app that has not been authorized
    pha_client = IndivoClient(data.app_email, data.app_secret)
    pha_client.set_app_id(data.app_email)
    pha_client.update_token({'oauth_token': "foo", "oauth_token_secret": "bar"})

    test_client_expect_no_access(pha_client, record_id, document_id)
    test_client_expect_no_access(pha_client, record2_id, document2_id)

    # authorize it for one record
    token = admin_client.setup_app(record_id=record_id, app_id=data.app_email).response['prd']

    # make sure records are still inaccessible because token not set
    test_client_expect_no_access(pha_client, record2_id, document2_id)
    test_client_expect_no_access(pha_client, record_id, document_id)
    
    # no admin or chrome session calls before token
    test_account_admin_calls(pha_client, account_id)
    test_chrome_session_calls(pha_client, account_id)
    assert_403(pha_client.account_info(account_id = account_id))

    # set the token
    pha_client.update_token(token)

    # no admin or chrome session calls after token
    test_account_admin_calls(pha_client, account_id)
    test_chrome_session_calls(pha_client, account_id)
    assert_403(pha_client.account_info(account_id = account_id))

    # make sure other record still inaccessible
    test_client_expect_no_access(pha_client, record2_id, document2_id)

    ##
    ## put a user in a carenet and see if he is successfully blocked from other carenets
    ##
    def create_account(account_email, username, password):
        # create an account
        account_id = xpath(parse_xml(admin_client.create_account({'user_email' : account_email, 'primary_secret_p' : '1'})['response_data']), '/Account/@id')[0]

        # get the primary secret
        primary_secret_resp = admin_client.account_primary_secret(account_id = account_email)
        parsed_resp = parse_xml(primary_secret_resp)
        primary_secret = parsed_resp.text

        # initialize it
        admin_client.account_initialize(account_id= account_email, primary_secret=primary_secret)

        # set password
        admin_client.add_auth_system(account_id= account_email, data={'system':'password', 'username':username, 'password': password})

        return account_id

    def login_as(username, password):
        chrome_client = IndivoClient(data.chrome_consumer_key, data.chrome_consumer_secret)
        chrome_client.create_session({'username':username,'user_pass': password})
        return chrome_client

    owner = create_account('security-account-owner@indivo.org', 'owner','owner-password')
    friend = create_account('security-account-sharer@indivo.org', 'friend', 'friend-password')

    record_id = admin_client.create_record(data=data.demographics).response[PRD]['Record'][0]
    admin_client.set_record_owner(record_id = record_id, data=owner)

    chrome_client = login_as('owner', 'owner-password')

    # get the list of carenets
    carenets = chrome_client.get_record_carenets(record_id = record_id).response[PRD]['Carenet']
    carenet_id = carenets[0]
    other_carenet_id = carenets[1]

    # add the friend to the carenet
    chrome_client.post_carenet_account(carenet_id = carenet_id, data={'account_id': friend, 'write': 'false'})
    
    # login as the friend
    chrome_client = login_as('friend', 'friend-password')

    # read other carenet documents?
    assert_403(chrome_client.get_carenet_documents(carenet_id = other_carenet_id))
    assert_403(chrome_client.get_carenet_apps(carenet_id = other_carenet_id))

    ##
    ## make sure an app not in a given carenet is not visible to someone in that carenet
    ##

    # authorize the app into the record
    token = admin_client.setup_app(record_id=record_id, app_id=data.app_email).response['prd']

    # should not be visible at this point
    def check_app():
        app_list = simplejson.loads(chrome_client.get_carenet_apps(carenet_id=carenet_id).response['response_data'])
        assert len(app_list) == 0, "some apps are in there:\n%s" % etree.tostring(app_list[0])

    # now add the app to the other carenet
    chrome_client = login_as('owner', 'owner-password')
    chrome_client.post_carenet_app(carenet_id = other_carenet_id, app_id = data.app_email)

    # still not visible, cause friend is in main carenet, not other carenet
    chrome_client = login_as('friend', 'friend-password')
    check_app()

    # oauth process
    def do_oauth(chrome_client, app_id, app_secret, record_id=None, carenet_id=None):
        """
        perform the whole oauth process up until and including the request token approve
        most of the time we're checking that that one fails
        """

        # get the request token
        app_client = IndivoClient(app_id, app_secret)
        app_client.set_app_id(app_id)
        params = {'oauth_callback': 'oob'}

        approve_params = {}
        if record_id:
            params['indivo_record_id'] = record_id
            approve_params['record_id'] = record_id
        if carenet_id:
            params['indivo_carenet_id'] = carenet_id
            approve_params['carenet_id'] = carenet_id

        rt = app_client.get_request_token(data=params).response['prd']

        # claim it and try to approve it, should fail
        chrome_client.claim_request_token(request_token = rt['oauth_token'])
        return chrome_client.approve_request_token(request_token = rt['oauth_token'], data=approve_params)


    ## app cannot be activated by the friend in either carenet at this point,
    ## since the app is not in the carenet
    assert_403(do_oauth(chrome_client, data.app_email, data.app_secret, carenet_id = other_carenet_id))
    assert_403(do_oauth(chrome_client, data.app_email, data.app_secret, carenet_id = carenet_id))

    chrome_client = login_as('owner', 'owner-password')

    ## what happens if the owner themselves tries to activate in a carenet?
    ## right now this gives a 403, but that might not be the right thing.
    assert_403(do_oauth(chrome_client, data.app_email, data.app_secret, carenet_id = carenet_id))

    # put it in this carenet, still shouldn't be able to activate it in other carenet
    # now add the app to the other carenet
    chrome_client.post_carenet_app(carenet_id = carenet_id, app_id = data.app_email)

    chrome_client = login_as('friend', 'friend-password')
    assert_403(do_oauth(chrome_client, data.app_email, data.app_secret, carenet_id = other_carenet_id))

    ## test the oauth process for non-chrome app, request token claiming and such
    ## everything else should work, the only problem is that admin_client shouldn't be able to claim or approve the token
    admin_client = IndivoClient(data.machine_app_email, data.machine_app_secret)    
    assert_403(do_oauth(admin_client, data.app_email, data.app_secret, carenet_id = carenet_id))

    ## test oauth process for non-user-app, should fail immediately
    assert_403(admin_client.get_request_token(data={'oauth_callback':'oob'}))

    ## test oauth process by trying to have a different app exchange the token for the current app
    approved_rt = do_oauth(chrome_client, data.app_email, data.app_secret, carenet_id = carenet_id)

    ## make an account anything other than "active", and make sure it's not possible to login
    chrome_client = IndivoClient(data.chrome_consumer_key, data.chrome_consumer_secret)
    
    for state in ['disabled', 'retired']:
        chrome_client.account_set_state(account_id = data.account['account_id'], data={'state': state})

        try:
            token = chrome_client.create_session(data.account)
            if token:
                raise AssertionError("shouldn't be able to log in for a user in state %s: got a valid token.")
        except IOError as e:
            if e.errno  != 403:
                raise AssertionError("shouldn't be able to log in for a user in state %s: got a non 403 response.")

    ## test account permissions: messaging, change password



########NEW FILE########
__FILENAME__ = sharing
import data

from utils import assert_403, assert_404, assert_200, parse_xml, xpath

PRD = 'prd'

def test_sharing(IndivoClient):
  DS = 'ds' 

  def get_datastore(obj):
    if hasattr(obj, DS):
      return getattr(obj, DS).values()
    return False

  def set_datastore(obj, **kwargs):
    if hasattr(obj, DS):
      ds = getattr(obj, DS)
      for kwarg, value in kwargs.items():
        if hasattr(ds, kwarg):
          setattr(ds, kwarg, value)
      return obj
    raise ValueError

  def alice_setup(record_id, bob_account_id):

    allergy_type = {'type' : 'http://indivo.org/vocab/xml/documents#Models'}

    alice_chrome_client = IndivoClient('chrome', 'chrome')
    alice_chrome_client.create_session(data.account)
    alice_chrome_client.read_record(record_id=record_id)
    alice_chrome_client.get_account_permissions(account_id=data.account['account_id'])

    alice_chrome_client.get_account_records(account_id = data.account['account_id'])

    # Alice posts a document
    # (We save the first doc instead of zero 
    #   due to the demographics doc already in alice's account)
    alice_chrome_client.post_document(data=data.doc01)
    document_id = alice_chrome_client.read_documents().response[PRD]['Document'][1]

    # Save the document_id in the client's datastore
    alice_chrome_client.ds.document_id = document_id

    # Save the first carenet_id in the client's datastore
    carenet_id = alice_chrome_client.get_record_carenets().response[PRD]['Carenet'][0]

    # post four documents to Alice's record, 2 allergies and 2 immunizations
    document_1_id = xpath(parse_xml(alice_chrome_client.post_document(data=data.allergy)), "/Document/@id")[0]
    document_2_id = xpath(parse_xml(alice_chrome_client.post_document(data=data.allergy)), "/Document/@id")[0]
    document_3_id = xpath(parse_xml(alice_chrome_client.post_document(data=data.immunization)), "/Document/@id")[0]
    document_4_id = xpath(parse_xml(alice_chrome_client.post_document(data=data.immunization)), "/Document/@id")[0]

    # and one more to test nevershare
    document_5_id = xpath(parse_xml(alice_chrome_client.post_document(data=data.allergy)), "/Document/@id")[0]

    # auto-share allergies
    alice_chrome_client.post_autoshare(data=allergy_type, carenet_id=carenet_id)

    assert_200(alice_chrome_client.get_autoshare_bytype_all(record_id=record_id))

    # unshare that one allergy, which should negate the autoshare
    alice_chrome_client.delete_carenet_document(record_id = record_id, document_id = document_2_id, carenet_id=carenet_id)

    # nevershare the third allergy
    alice_chrome_client.document_nevershare_set(record_id = record_id, document_id = document_5_id)

    # immunizations are individually shared (well only one of them)
    alice_chrome_client.post_carenet_document(document_id = document_3_id, carenet_id=carenet_id)
    alice_chrome_client.delete_carenet_document(record_id=record_id, document_id=document_4_id, carenet_id=carenet_id)

    # Alice shares her demographics document(s) with the carenet
    demographics_doc = parse_xml(alice_chrome_client.read_documents(record_id = record_id, parameters={'type':'Demographics'}))
    for doc_id in xpath(demographics_doc, '/Documents/Document/@id'):
      alice_chrome_client.post_carenet_document(record_id = record_id, document_id = doc_id, carenet_id = carenet_id)

    # Alice adds bob_account_id to carenet[0]
    alice_chrome_client.post_carenet_account(carenet_id = carenet_id, data='account_id=' + bob_account_id + '&write=false')

    # Review all accounts within carenet[0]
    assert xpath(parse_xml(alice_chrome_client.get_carenet_accounts(carenet_id = carenet_id)), '/CarenetAccounts')
    alice_chrome_client.get_carenet_apps(carenet_id = carenet_id)

    alice_chrome_client.read_allergies(record_id = record_id)

    # Finally, return the carenet_id, document_id
    # in order to check Bob's access
    # and a second document that is disallowed
    return carenet_id, [document_1_id, document_3_id], [document_2_id, document_4_id, document_5_id]

  def bob_setup(bob_account_id, record_id, carenet_id, allowed_docs, disallowed_docs):
    bob_chrome_client = IndivoClient('chrome', 'chrome')
    bob_chrome_client.create_session(data.account02)

    # SZ: Bob should NOT be able to read the docs directly in the record
    for doc_id in allowed_docs+disallowed_docs:
      assert_403(bob_chrome_client.read_document(record_id=record_id, document_id=doc_id))

    assert_403(bob_chrome_client.get_record_carenets(record_id=record_id))

    # Bob should be able to read the allowed docs

    for doc_id in allowed_docs:
      assert_200(bob_chrome_client.get_carenet_document(carenet_id = carenet_id, document_id = doc_id))

    # Bob should not be able to read the disallowed docs
    for doc_id in disallowed_docs:
      assert_404(bob_chrome_client.get_carenet_document(carenet_id = carenet_id, document_id = doc_id))
    
    # Bob should be able to list docs in the carenet
    carenet_documents_list = bob_chrome_client.get_carenet_documents(carenet_id = carenet_id).response[PRD]['Document']

    # with a parameter
    carenet_documents_list = bob_chrome_client.get_carenet_documents(carenet_id = carenet_id, parameters={'type': 'http://indivo.org/vocab/xml/documents#Allergy'}).response[PRD]['Document']

    # Read carenet allergies
    # TODO: replace with generic call
    # assert_200(bob_chrome_client.read_carenet_allergies(carenet_id = carenet_id))

    # Read the demographics document, this should work
    resp = bob_chrome_client.call('GET', '/carenets/%s/demographics'%carenet_id, options={'parameters':{'response_format':'application/xml'}} )
    demographics_doc = parse_xml(resp)
    family_name = xpath(demographics_doc, '/Models/Model/Field[@name="name_family"]/text()')
    assert(family_name)

    bob_chrome_client.get_account_permissions(account_id=bob_account_id)
    bob_chrome_client.get_carenet_account_permissions(carenet_id= carenet_id,
                                                      record_id=record_id, 
                                                      account_id=bob_account_id)

    # Not yet implemented
    #bob_chrome_client.get_carenet_app_permissions(account_id=bob_account_id)

    return True


  def admin_setup(bob_account_id):

    admin_client = IndivoClient(data.machine_app_email, data.machine_app_secret)
    admin_client.set_app_id(data.app_email)

    # Create a record for Alice and set her at the owner
    record_id = admin_client.create_record(data=data.demographics).response[PRD]['Record'][0]
    admin_client.set_record_owner(data=data.account['account_id'])

    # Create a basic set of carenets
    carenet_names = ['Family2', 'Friends2', 'School/Office']
    for cname in carenet_names:
      admin_client.create_carenet(data='name=' + cname)

    # Check to make sure the admin can list the carenets and the accounts within each one
    carenets = xpath(parse_xml(admin_client.get_record_carenets(record_id = record_id)),'/Carenets/Carenet/@id')

    for carenet_id in carenets:
      assert len(xpath(parse_xml(admin_client.get_carenet_accounts(carenet_id = carenet_id)), '/CarenetAccounts')) > 0

    return record_id

  bob_account_id = 'benadida@informedcohort.org'

  # Admin spawning carenets under Alice's newly created record
  record_id = admin_setup(bob_account_id)
  
  # Given Bob's account id and a record that has been set up for her
  # Alice gives Bob the document_id that she'd like to share with him
  #   Even though Alice gives Bob a document_id, Bob has the ability
  #   to read all documents within the carenet that Alice added him to
  # 2010-09-13 now Alice also shares her demographics URL and we check
  #    that Bob can read it at the special URL
  carenet_id, allowed_documents, disallowed_documents = alice_setup(record_id, bob_account_id)
  return bob_setup(bob_account_id, record_id, carenet_id, allowed_documents, disallowed_documents)


########NEW FILE########
__FILENAME__ = special_document_handling
import os
import data

from utils import parse_xml, xpath

PRD = 'prd'

def test_special_document_handling(IndivoClient):
  DEMOGRAPHICS = 'demographics'

  try:
    admin_client = IndivoClient(data.machine_app_email, data.machine_app_secret)
    record_id = admin_client.create_record(data=data.demographics).response[PRD]['Record'][0]
    admin_client.set_app_id(data.app_email)
    admin_client.set_record_owner(data=data.account['account_id'])
  
    chrome_client = IndivoClient('chrome', 'chrome')
    chrome_client.create_session(data.account)
    chrome_client.read_record(record_id=record_id)
    chrome_client.put_special_document(special_document=DEMOGRAPHICS, data=data.demographics) #TODO: change client away from "special document" for demograhics
    chrome_client.read_special_document(special_document=DEMOGRAPHICS)

    # replace the demographics document
    chrome_client.put_special_document(special_document=DEMOGRAPHICS, data=data.demographics2)
    record_doc = parse_xml(chrome_client.read_record())

    # make sure the label of the record was updated
    record_label = xpath(record_doc,'/Record/@label')[0]
    #TODO: update below to work with new smart demographics
#    contact_fullname = xpath(parse_xml(data.contact02), '/ns:Contact/ns:name/ns:fullName/text()', namespaces={'ns':'http://indivo.org/vocab/xml/documents#'})[0]
#    assert record_label == contact_fullname, "record label is %s while contact_fullname is %s" % (record_label, contact_fullname)

  except Exception, e:
    return False, e
  return True


########NEW FILE########
__FILENAME__ = userapp_document_handling
import os
import data

from utils import assert_403

def test_userapp_document_handling(IndivoClient):
  PRD = 'prd'

  try:
    admin_client = IndivoClient(data.machine_app_email, data.machine_app_secret)
    record_id = admin_client.create_record(data=data.demographics).response[PRD]['Record'][0]
    admin_client.set_app_id(data.app_email)
    admin_client.get_version()

    token = admin_client.setup_app(record_id=record_id, app_id=data.app_email).response[PRD]
    user_client = IndivoClient(data.app_email, 'norepinephrine')

    # Should return a 403
    assert_403(user_client.read_record(record_id=record_id))

    # set up the credentials and now this should work
    user_client.set_app_id(data.app_email)
    user_client.update_token(token)

    user_client.post_app_document(data=data.access_key)
    doc_id = user_client.post_app_document(data=data.patient_access_key).response[PRD]['Document'][0]

    user_client.read_app_document(document_id=doc_id)
    user_client.read_app_documents(parameters={'type':'PatientAccessKey'})
    user_client.read_app_documents(parameters={'type':'AccessKey'})
    user_client.read_app_document_meta(document_id=doc_id)
    user_client.read_app_document()
    user_client.post_app_document_ext(external_id='extid', data=data.doc01)

    user_client.read_app_document_ext_meta(external_id='extid')
    user_client.read_app_documents()

    #user_client.create_or_replace_app_document, document_id=doc_id, data=data.doc02)
    #user_client.post_app_document_label(data.app_email, doc_id, label)
    #user_client.remove_app_document(data.app_email, doc_id)
  except Exception, e:
    return False, e
  return True

########NEW FILE########
__FILENAME__ = utils
"""
Utils for testing
"""

import copy
from lxml import etree

def assert_403(resp, message=""):
    return assert_response_code(resp, 403, message)


def assert_200(resp, message=""):
    return assert_response_code(resp, 200, message)

def assert_400(resp, message=""):
    return assert_response_code(resp, 400, message)

def assert_404(resp, message=""):
    return assert_response_code(resp, 404, message)

def assert_response_code(resp, code, message):
    assert resp.response['response_status'] == code, '%s: status is %s instead of %s' % (message, resp.response['response_status'], code)

def combine_dicts(d1, d2):
    result_d = copy.copy(d1)
    result_d.update(d2)
    return result_d


def parse_xml(resp_or_raw_data):
    if hasattr(resp_or_raw_data, 'response'):
        if resp_or_raw_data.response['response_status'] != 200:
            raise ValueError("not a 200 response trying to parse XML")

        raw_data = resp_or_raw_data.response['response_data']
    else:
        raw_data = resp_or_raw_data

    return etree.XML(raw_data)

def xpath(xml, xpath_expr, namespaces=None):
    return xml.xpath(xpath_expr, namespaces=namespaces)
    

########NEW FILE########
__FILENAME__ = internal_tests
import django.test
from django.conf import settings
from django.test.testcases import disable_transaction_methods, restore_transaction_methods
from django.db.models.loading import cache

from south.db import db

from indivo.data_models import attach_filter_fields, IndivoDataModelLoader
from indivo.models import *
from indivo.tests.data import *
from indivo.lib import iso8601
from indivo.lib.simpledatamodel import SDML

import functools
import os
import os.path
import shutil
import datetime
from xml.dom import minidom
from lxml import etree

class IndivoTests(object):
    TEST_MODEL_MODULE = sys.modules['indivo.models'] # models module to which we can add test datamodels, etc.
    TEST_MODEL_DIR = os.path.join(settings.APP_HOME, 'indivo/tests/data_models/test/')
    dependencies_loaded = False
    dependencies = {DocumentSchema:('document_schemas',['type']),
                    AuthSystem:('auth_systems', ['short_name', 'internal_p']),
                    StatusName:('status_names', ['id', 'name'])}
    dependency_data_sections = {}

    # hackish, like we like it
    def _get_auth_middleware(self):
        self.client.get("/")
        
        # find the right middleware
        for middleware in self.client.handler._view_middleware:
            cls = middleware.__self__.__class__
            if cls.__name__ == 'Authorization':
                return cls

    def disableAccessControl(self):
        mw = self._get_auth_middleware()
        mw.override()

    def enableAccessControl(self):
        mw = self._get_auth_middleware()
        mw.cancel_override()

    def loadModelDependencies(self):
        def get_indivo_data_xml():
            '''Read default data from the indivo_data.xml file'''
            if self.dependency_data_sections:
                return
            data_file = 'utils/indivo_data.xml'
            XMLdata = minidom.parseString(open(settings.APP_HOME + '/' + data_file).read())
            for root in XMLdata.childNodes:
                for section in root.childNodes:
                    if section and hasattr(section, 'nodeName') and section.nodeName != '#text':
                        self.dependency_data_sections[section.nodeName] = section

        def loadDataSection(section, attributes, indivo_model):
            data = self.dependency_data_sections[section]
            for instance in data.childNodes:
                if hasattr(instance, 'getAttribute'):
                    kwargs = {}
                    for attr in attributes:
                        attrval = instance.getAttribute(attr)
                        if attrval.lower() == 'true': attrval = True
                        elif attrval.lower() == 'false': attrval = False
                        kwargs[attr] = attrval
                    indivo_model.objects.get_or_create(**kwargs)                      

        if not self.dependencies_loaded:
            # load xml data for dependencies
            get_indivo_data_xml()

            # Load the data
            for model, ds_info in self.dependencies.iteritems():
                loadDataSection(ds_info[0], ds_info[1], model)

        self.dependencies_loaded = True

    def assertValidSDMXModel(self, model_tag_el, model_tag_attrs, required_fields):
        """ Test that the passed etree._Element validates against the passed arguments.

        Namely, that:

        * The Model tag has all of the attributes/values in **model_tag_attrs**, where
          **model_tag_attrs** is a dict of ``{ 'attribute_name': 'attribute_value' }`` pairs.

        * For each field in **required_fields**, a dict of 
          ``{ 'field_name': (test_func, 'required_value') }`` entries, when ``test_func`` is applied
          to the field named ``'field_name'`` on the Model tag, the output is ``'required_value'``.

        if ``None`` is passed for a value in **required_fields** instead of a ``(test_func, 'required_value')``
        tuple, then the field is checked for existence, but not for correctness.
          
        """

        def check_required_fields(fields, required_fields):
            self.assertEqual(len(fields), len(required_fields))
            self.assertEqual(set([f.get('name') for f in fields]), set(required_fields.keys()))
            for f in fields:
                req_field = required_fields[f.get('name')]
                if req_field:
                    func, val = req_field
                    self.assertEqual(func(f.text), val)
                    
        for attr_name, attr_val in model_tag_attrs.iteritems():
            self.assertEqual(model_tag_el.get(attr_name), attr_val)
        fields = model_tag_el.findall('Field')
        check_required_fields(fields, required_fields)

    def assertTimeStampsAlmostEqual(self, first, second=None, **kwargs):
        """ Test that *first* (a datetime.datetime object) is close in time to *second*.

        kwargs contains arguments for constructing a timedelta object, which defines how
        close the two datetimes should be.

        For example, passing seconds=10, minutes=2 will test that the two dates are within
        2 minutes and 10 seconds of each other.

        By default, the function is run with a constructor of seconds=10, and compared to the
        current time.

        """

        if not second:
            second = datetime.datetime.now()

        defaults = {'seconds':10}
        defaults.update(kwargs)
        td = datetime.timedelta(**defaults)

        if first == second:
            return
        elif first < second and first + td >= second:
            return
        elif first > second and second + td >= first:
            return
        else:
            msg_start = 'Timestamps Not Almost Equal: '
            human_readable_delta = ', '.join(['%s %s'%(v, k) for k,v in defaults.iteritems()])
            msg_main = '%s not within %s of %s.'%(iso8601.format_utc_date(first),
                                                  human_readable_delta,
                                                  iso8601.format_utc_date(second))
            raise self.failureException('%s%s' % (msg_start, msg_main))

    def assertNotRaises(self, exception, call, *args, **kwargs):
        if not hasattr(exception, '__iter__'):
            exception = [exception]
        try:
            result = call(*args, **kwargs)
        except Exception as e:
            for exc in exception:
                if isinstance(e, exc):
                    raise self.failureException('Exception Raised: %s'%e.__class__.__name__)
        return

    def validateIso8601(self, datestring, accept_null = True):
        if not datestring and accept_null:
            return
        else:
            return iso8601.parse_utc_date(datestring)

    def addAppToRecord(self, record, with_pha, carenet=None):
        share = PHAShare.objects.create(record=record, with_pha=with_pha, carenet=carenet)
        return share

    def shareRecordFull(self, record, account):
        return AccountFullShare.objects.create(record=record, with_account=account)

    def addDocToCarenet(self, doc, carenet, share_p=True):
        cd = CarenetDocument.objects.create(carenet=carenet, document=doc, share_p=share_p)
        return cd

    def addAccountToCarenet(self, account, carenet, can_write=False):
        ca = CarenetAccount.objects.create(account=account, carenet=carenet, can_write=can_write)
        return ca
    
    def addAppToCarenet(self, pha, carenet):
        # make sure PHA is already in record
        try:
            share = carenet.record.pha_shares.get(with_pha__email = pha.email)
        except PHAShare.DoesNotExist:
            share = self.addAppToRecord(record=carenet.record, with_pha=pha)

        return CarenetPHA.objects.create(carenet=carenet, pha=pha)

    def relateDocs(self, doc_a, doc_b, rel_type):
        return DocumentRels.objects.create(document_0=doc_a, document_1=doc_b, relationship=rel_type)

    def createDocument(self, test_document_list, index, **overrides):
        return self.createTestItem(test_document_list, index, overrides)

    def createCarenet(self, test_carenet_list, index, **overrides):
        return self.createTestItem(test_carenet_list, index, overrides)

    def createUserApp(self, test_userapp_list, index, **overrides):
        return self.createTestItem(test_userapp_list, index, overrides)
    
    def createMachineApp(self, test_machineapp_list, index, **overrides):
        return self.createTestItem(test_machineapp_list, index, overrides)

    def createRecord(self, test_record_list, index, **overrides):
        record = self.createTestItem(test_record_list, index, overrides)
        record.create_default_carenets()
        return record

    def createAccount(self, test_account_list, index, **overrides):
        account = self.createUninitializedAccount(test_account_list, index, **overrides)
        account.set_username_and_password(username = test_account_list[index]['username'], 
                                          password = test_account_list[index]['password'])
        return account
    
    def createUninitializedAccount(self, test_account_list, index, **overrides):
        return self.createTestItem(test_account_list, index, overrides)

    def createMessage(self, test_message_list, index, **overrides):
        return self.createTestItem(test_message_list, index, overrides)

    def createAttachment(self, test_attachment_list, index, **overrides):
        return self.createTestItem(test_attachment_list, index, overrides)

    def createAuthSystem(self, test_authsystem_list, index, **overrides):
        return self.createTestItem(test_authsystem_list, index, overrides)

    def loadTestReports(self, **overrides):
        for i in range(len(TEST_REPORTS)):
            self.createTestItem(TEST_REPORTS, i, overrides)

    def createTestItem(self, test_item_list, index, overrides_dict={}):
        tdi = TestDataItem(index, data_list=test_item_list)
        scoped_test_model = self.test_data_context.add_model(tdi, **overrides_dict)
        try:
            model_obj = scoped_test_model.save()
        except Exception:
            
            # remove the failed item from our context
            self.test_data_context.del_model(scoped_test_model.identifier, 
                                             scoped_test_model.subcontext_id)
            raise

        return model_obj

    def check_unsupported_http_methods(self, invalid_methods, url):
        for method_name in invalid_methods:
            method_func = getattr(self.client, method_name)
            response = method_func(url)
            self.assertEquals(response.status_code, 405)

    def remove_model_from_cache(self, modelname):
        """ Delete a model from Django's internal cache. """
        try:
            del cache.app_models['indivo'][modelname]
        except KeyError:
            pass

    def save_setting(self, setting_name):
        curr_val = getattr(settings, setting_name, None)
        if self.saved_settings.has_key(setting_name):
            raise ValueError("Already saved setting %s, can't save it again"%setting_name)
        self.saved_settings[setting_name] = curr_val        

    def save_and_modify_setting(self, setting_name, setting_val):
        self.save_setting(setting_name)
        setattr(settings, setting_name, setting_val)

    def restore_setting(self, setting_name):
        old_val = self.saved_settings.get(setting_name, None)
        if not old_val:
            raise ValueError("Cannot restore setting %s, which was never saved"%setting_name)
        setattr(settings, setting_name, old_val)


    def setup_test_settings(self):
        self.saved_settings = {}

        # Redirect settings.MEDIA_ROOT, so flat files are saved separately
        # from existing files
        test_media_root = os.path.join(settings.APP_HOME, 'indivo/tests/test_files')
        if not os.path.exists(test_media_root):
            os.makedirs(test_media_root)
        self.save_and_modify_setting('MEDIA_ROOT', test_media_root)

        # Redirect Schema and Datamodel file locations, so we can play with them during tests
        self.save_and_modify_setting('CORE_SCHEMA_DIRS', 
                                     [os.path.join(settings.APP_HOME, 'indivo/tests/schemas/core')])
        self.save_and_modify_setting('CONTRIB_SCHEMA_DIRS',
                                     [os.path.join(settings.APP_HOME, 'indivo/tests/schemas/contrib')])

        self.save_and_modify_setting('CONTRIB_DATAMODEL_DIRS',
                                     [os.path.join(settings.APP_HOME, 'indivo/tests/data_models/contrib')])

    def restore_test_settings(self):
        # clear out any test files we created, and restore the MEDIA_ROOT setting
        for subtree in os.listdir(settings.MEDIA_ROOT):
            shutil.rmtree(os.path.join(settings.MEDIA_ROOT, subtree))
        self.restore_setting('MEDIA_ROOT')

        # Restore settings for schema and datamodel locations
        self.restore_setting('CORE_SCHEMA_DIRS')
        self.restore_setting('CONTRIB_SCHEMA_DIRS')
        self.restore_setting('CONTRIB_DATAMODEL_DIRS')

    def setUp(self):
        self.test_data_context = TestDataContext()
        self.disableAccessControl()
        self.loadModelDependencies()
        self.setup_test_settings()

    def tearDown(self):
        self.restore_test_settings()

class InternalTests(IndivoTests, django.test.TestCase):
    """ subclass of Django's TestCase with access to useful utils 
        specific to Indivo tests (model creation, access control overrides, etc.).
        Doesn't allow transaction management in tests. """
    pass

class TransactionInternalTests(IndivoTests, django.test.TransactionTestCase):
    """ subclass of Django's TransactionTestCase with access to useful utils 
    specific to Indivo tests (model creation, access control overrides, etc.).
    Allows transaction management in tests. 

    WARNING: Transaction Tests are VERY slow. Only use this if you really need
    to test transactions. If you just need to deal with IntegrityErrors by
    calling rollback, see enable_transactions below. """
    
    def load_model_dir(self, dirpath):
        """ Load data models from a directory (like we do when running Indivo normally). """
        loader = IndivoDataModelLoader(dirpath)
        models = [model_class for model_name, model_class in loader.discover_data_models()]
        self.load_models(models)
        return models
 
    def unload_model_dir(self, dirpath):
        """ Unload data models that have been loaded from a directory."""
        loader = IndivoDataModelLoader(dirpath)
        models = [model_class for model_name, model_class in loader.discover_data_models()]
        self.unload_models(models)

    def load_models_from_sdml(self, sdml):
        """ Load data models from an SDML literal. """
        models = [] 
        for model in SDML(sdml).get_output():
            attach_filter_fields(model)
            models.append(model)
        self.load_models(models)
        return models
        
    def load_models(self, models):
        """ Do the heavy lifting for loading data models.
        
        Registers the models, then migrates the DB to support them.

        """

        loader = IndivoDataModelLoader('')
        for m in models:

            # Register the model in indivo.models
            loader.add_model_to_module(m.__name__, m, self.TEST_MODEL_MODULE)

            # Migrate the database to contain the model
            db.start_transaction()
            try:
                self.create_db_model(m)
            except Exception, e:
                db.rollback_transaction()
            else:
                db.commit_transaction()
        self.finish_db_creation()

    def unload_models(self, models):
        """ Do the heavy lifting for unloading data models.
        
        Unregisters the models, then migrates the DB to remove them.
        
        """

        for m in models:

            # Unregister the model from indivo.models
            delattr(self.TEST_MODEL_MODULE, m.__name__)

            # Remove the model from django's internal model cache
            self.remove_model_from_cache(m.__name__)

            # Migrate the database to no longer contain the model
            db.start_transaction()
            try:
                self.drop_db_model(m)
            except Exception, e:
                db.rollback_transaction()
            else:
                db.commit_transaction()

    def create_db_model(self, django_class):
        """ Migrate the DB to support a single model. """
        fields = [(f.name, f) for f in django_class._meta.local_fields]
        table_name = django_class._meta.db_table
        db.create_table(table_name, fields)

    def finish_db_creation(self):
        """ Exceute deferred SQL after creating several models. 
        
        MUST BE CALLED after self.create_db_model()
        
        """

        db.execute_deferred_sql()

    def drop_db_model(self, django_class):
        """ Migrate the DB to remove a single model. """
        # Drop the table. Also force a commit, or we'll have trouble with pending triggers in future operations.
        table_name = django_class._meta.db_table
        db.start_transaction()
        db.delete_table(table_name)
        db.commit_transaction()

def enable_transactions(func):
    """ Hackish decorator that re-enables transaction management in tests
        from subclasses of django.test.TestCase (where transaction 
        management is disabled by default). We're doing this instead of 
        subclassing django.test.TransactionTestCase because TransactionTestCase 
        is prohibitively slow.

        WARNING: DO NOT COMMIT, as this will break Django's DB resets
        between tests. This class should only be used for tests that
        require periodic rollbacks. 

        WARNING: DO NOT CALL TRANSACTION-MANAGED CODE in tests with this decorator,
        as they will probably call commit. This includes the @commit-on-success 
        style decorators.

        WARNING: If you use this decorator, you are responsible for making sure
        that the DB is clean afterwards. django.test.TestCase will call one
        final rollback after your test method, and if the database isn't clean
        after that call, you're in trouble. """

    def _enable_transactions(*args, **kwargs):
        restore_transaction_methods()
        try:
            ret = func(*args, **kwargs)
        except:
            raise
        finally:
            disable_transaction_methods()

        return ret

    return functools.update_wrapper(_enable_transactions, func)

########NEW FILE########
__FILENAME__ = transform
from indivo.document_processing import BaseTransform

INDIVO_DOC_NS = "{http://indivo.org/vocab/xml/documents#}"

class Transform(BaseTransform):

    def to_sdmx(self, doc_etree):

        # We already have SDMX, but it came in with
        # the indivo namespace, so we need to strip the NS
        for el in doc_etree.iter(tag="%s*"%INDIVO_DOC_NS):
            el.tag = el.tag.replace(INDIVO_DOC_NS, '')
        return doc_etree

########NEW FILE########
__FILENAME__ = datamodel_loader
from indivo.tests.internal_tests import InternalTests
from indivo.data_models import IndivoDataModelLoader, MODULE_NAME, MODULE_EXTENSIONS
from indivo.models import Fact, Record
from indivo.validators import ExactValueValidator, ValueInSetValidator

from django.core.exceptions import ValidationError
from django.conf import settings

import sys, os

TEST_MODULE = sys.modules[__name__]

CORE_MODELS = (
    'Allergy',
    'AllergyExclusion',
    'Equipment',
    'Encounter',
    'Fill',
    'Immunization',
    'LabResult',
    'Measurement',
    'Medication',
    'Problem',
    'Procedure',
    'SimpleClinicalNote',
    'VitalSigns',
    )

CORE_DIRS = (
    'allergy',
    'equipment',
    'immunization',
    'lab',
    'measurement',
    'medication',
    'problem',
    'procedure',
    'simple_clinical_note',
    'vitals',
    )

TEST_MODELS = (
    'TestMed',
    'TestPrescription',
    'TestFill',
    )

TEST_DIRS = (
    'testmodel',
    )

INVALID_TEST_DIRS = (
    'badmodel',
)

class DataModelLoaderUnitTests(InternalTests):
    def setUp(self):
        super(DataModelLoaderUnitTests, self).setUp()
        self.test_dir = os.path.join(settings.APP_HOME, 'indivo/tests/data_models/test')
        self.test_loader = IndivoDataModelLoader(self.test_dir)

    def tearDown(self):
        super(DataModelLoaderUnitTests,self).tearDown()

    def test_import_data_models(self):
        
        # get the core modules, and make sure we imported them all
        self.assertModuleContains(TEST_MODULE, CORE_MODELS)

        # get the test modules, and make sure we imported them all
        self.test_loader.import_data_models(TEST_MODULE)
        self.assertModuleContains(TEST_MODULE, TEST_MODELS)

        # make sure the serializers were loaded correctly
        for model_name  in TEST_MODELS:
            model_cls = getattr(TEST_MODULE, model_name, None)
            rdf_ser = getattr(model_cls, 'to_rdf', None)
            self.assertTrue(rdf_ser)

            # Dummy input to the serializers, which produce dummy output
            rdf_output = rdf_ser(model_cls.objects.none(), 0, Record())
            self.assertTrue(rdf_output.startswith(model_name))
        

        def _find_indivo_validator(validators, validator_class):
            for v in validators:
                if isinstance(v, validator_class):
                    return v

        # make sure the field validators were loaded correctly

        # validator on TestMed.name should accept 'med1', 'med2', or None
        test_med_class = getattr(TEST_MODULE, 'TestMed')
        field = test_med_class._meta.get_field('name')
        validator = _find_indivo_validator(field.validators, ValueInSetValidator)
        self.assertNotRaises(ValidationError, validator, 'med1')
        self.assertNotRaises(ValidationError, validator, 'med2')
        self.assertNotRaises(ValidationError, validator, None)
        self.assertRaises(ValidationError, validator, 'med3')

        # validator on TestFill.supply_days should accept 30
        test_med_class = getattr(TEST_MODULE, 'TestFill')
        field = test_med_class._meta.get_field('supply_days')
        validator = _find_indivo_validator(field.validators, ExactValueValidator)
        self.assertNotRaises(ValidationError, validator, 30)
        self.assertRaises(ValidationError, validator, 29)
        self.assertRaises(ValidationError, validator, '30')
        self.assertRaises(ValidationError, validator, None)

    def test_detect_model_dir(self):
        
        # Make sure we can detect all of our valid model dirs
        # Note: the problem model has an sdml definition, so we're testing python and sdml here
        for model_dir in CORE_DIRS:
            dir_path = os.path.join(settings.CORE_DATAMODEL_DIRS[0], model_dir)
            valid_p, module_name, ext = IndivoDataModelLoader.detect_model_dir(dir_path)
            self.assertTrue(valid_p)
            self.assertEqual(module_name, MODULE_NAME)
            self.assertTrue(ext in MODULE_EXTENSIONS)

        for model_dir in TEST_DIRS:
            dir_path = os.path.join(self.test_dir, model_dir)
            valid_p, module_name, ext = IndivoDataModelLoader.detect_model_dir(dir_path)
            self.assertTrue(valid_p)
            self.assertEqual(module_name, MODULE_NAME)
            self.assertTrue(ext in MODULE_EXTENSIONS)
            
        # Make sure we can detect an invalid dir
        for model_dir in INVALID_TEST_DIRS:
            dir_path = os.path.join(self.test_dir, model_dir)
            valid_p, module_name, ext = IndivoDataModelLoader.detect_model_dir(dir_path)
            self.assertFalse(valid_p)
            self.assertEqual(module_name, None)
            self.assertEqual(ext, None)

    def test_discover_data_models(self):
        
        # Make sure we got all the test datamodels, and they are all Fact subclasses
        test_models = dict([(name, cls) for name, cls in self.test_loader.discover_data_models()])
        self.assertEqual(set(test_models.keys()), set(TEST_MODELS))
        for cls in test_models.values():
            self.assertTrue(issubclass(cls, Fact))

    def assertModuleContains(self, module, member_list):
        self.assertNotRaises(ImportError, __import__, module, fromlist=member_list)
                
    
        

########NEW FILE########
__FILENAME__ = document_processing
import sys
from StringIO import StringIO
from lxml import etree
from indivo.models import *
from indivo.tests.data import TEST_DOCUMENT_PROCESSING_DOCS, TEST_SDML_DOCS
from indivo.tests.internal_tests import TransactionInternalTests
from indivo.document_processing import *
from indivo.document_processing.document_processing import *


class DocumentProcessingUnitTests(TransactionInternalTests):
    def setUp(self):
        super(DocumentProcessingUnitTests, self).setUp()
        
        # Load the test datamodels
        self.load_model_dir(self.TEST_MODEL_DIR)

        # load the test schema
        self.loader = IndivoSchemaLoader(os.path.join(settings.APP_HOME, 'indivo/tests/schemas/test'))
        self.loader.import_schemas()        
        
        # create instance from a TestMed document
        self.instance = DocumentProcessing(TEST_DOCUMENT_PROCESSING_DOCS[0], 'application/xml')

    def tearDown(self):
        self.instance = None
        
        # Unload the test schema
        self.loader.unregister_all_schemas()
        
        # Unregister the classes, reset the DB
        self.unload_model_dir(self.TEST_MODEL_DIR)

        super(DocumentProcessingUnitTests, self).tearDown()     
        
    def test_expand_schemas(self):
        self.assertEquals(self.instance.expand_schema('TestMed'), 'http://indivo.org/vocab/xml/documents#TestMed');
        
    def test_base_name(self):
        self.assertEquals(self.instance.basename, 'TestMed')
        
    def test_fqn(self):
        self.assertEquals(self.instance.fqn, 'http://indivo.org/vocab/xml/documents#TestMed')
        
    def test_xml_syntax_validation(self):
        self.assertNotRaises(ValueError, self.instance.validate_xml_syntax)
        
    def test_xml_validation(self):
        self.assertNotRaises(ValueError, self.instance.validate_xml)
        
    def test_content_etree(self):
        root = self.instance.content_etree
        self.assertFalse(root is None, "content_etree is None")
        self.assertTrue(isinstance(root, etree._ElementTree))
        
    def test_validation_func_existence(self):
        self.assertFalse(self.instance.validation_func is None, "validation_fucn is None")
        
    def test_transform_func_existence(self):
        self.assertFalse(self.instance.transform_func is None, "transform_func is None")
        
    def test_transformed_doc(self):
        transformed_doc = self.instance.transformed_doc
        
        # make sure not empty
        self.assertFalse(transformed_doc is None, "transformed_doc is None")
        
        # should transform to 4 Facts
        self.assertEquals(len(transformed_doc), 4)
        
        # check Class types and count        
        test_classes = ('TestMed', 'TestPrescription', 'TestFill')
        klassCount = dict.fromkeys(test_classes, 0)
        
        for fact in transformed_doc:
            if fact.__class__.__name__ in test_classes:
                klassCount[fact.__class__.__name__] += 1
            else:
                self.fail("unexpected fact %s" % fact.__class__.__name__)
        
        self.assertEquals(klassCount['TestMed'], 1)
        self.assertEquals(klassCount['TestPrescription'], 1)
        self.assertEquals(klassCount['TestFill'], 2)
        
    def test_process_p(self):
        self.assertTrue(self.instance.process_p)
        
    def test_validate_p(self):
        self.assertTrue(self.instance.validate_p)

########NEW FILE########
__FILENAME__ = sample_data
from indivo.tests.internal_tests import InternalTests, TransactionInternalTests
from indivo.tests.data import *
from indivo.lib.sample_data import IndivoDataLoader
from indivo.models import Record, Document
from django.conf import settings
import glob

TEST_SAMPLEDATA_DIR = settings.APP_HOME + '/indivo/tests/data/sample'

def sampleDataSetUp(test_cases_instance):
    _self = test_cases_instance
    super(_self.__class__, _self).setUp()

    # An admin app, to be the 'creator' of our sample data
    _self.creator = _self.createMachineApp(TEST_ADMINAPPS, 0)
    
    # An account, to own our sample record
    _self.account = _self.createAccount(TEST_ACCOUNTS, 4)
    
    # A record, to load our sample data into
    _self.record = _self.createRecord(TEST_RECORDS, 0, owner=_self.account)
    
    # make sure it got no data to begin with
    try:
        d = _self.record.demographics
        _self.record.demographics = None
        _self.record.save()
        d.delete()
        _self.assertEqual(Document.objects.filter(record=_self.record).count(), 0)
    except Exception, e:
        pass

    # Use test sample_data
    _self.old_sampledata_dir = settings.SAMPLE_DATA_DIR
    settings.SAMPLE_DATA_DIR = TEST_SAMPLEDATA_DIR

    # Some common test profiles
    _self.normal_profile_dir = settings.SAMPLE_DATA_DIR + '/patient_1'
    _self.no_demo_profile_dir = settings.SAMPLE_DATA_DIR + '/nodemo'
    
    # create a loader for use in tests
    _self.loader = IndivoDataLoader(_self.creator)

def sampleDataTearDown(test_cases_instance):
    _self = test_cases_instance
    settings.SAMPLE_DATA_DIR = _self.old_sampledata_dir
    super(_self.__class__, _self).tearDown()

class SampleDataUnitTests(InternalTests):
    def setUp(self):
        sampleDataSetUp(self)

    def tearDown(self):
        sampleDataTearDown(self)

    def test_loader_construction(self):
        
        # class should construct with valid args
        try:
            loader = IndivoDataLoader(self.creator)

        except Exception, e:
            self.fail('Could not create with standard args: %s'%str(e))

        # and with a custom data_dir
        try:
            loader = IndivoDataLoader(self.creator, self.old_sampledata_dir)
        except Exception, e:
            self.fail('Could not create with custom data dir: %s'%str(e))
        else:
            self.assertEqual(loader.data_dir, self.old_sampledata_dir)

    def test_loader_get_named_doc(self):
        
        # pull back data from our test data
        doc = self.loader._get_named_doc(self.normal_profile_dir, 'Demographics.xml')
        self.assertTrue(doc)
        with open(self.normal_profile_dir + '/Demographics.xml', 'r') as f:
            self.assertEqual(f.read(), doc)

        # try a nonexistent file
        doc2 = self.loader._get_named_doc(self.normal_profile_dir, 'DEADBEEF.xml')
        self.assertEqual(doc2, None)

        # try a nonexistent directory
        doc3 = self.loader._get_named_doc(settings.SAMPLE_DATA_DIR + '/patient_deadbeef/',
                                          'Demographics.xml')
        self.assertEquals(doc3, None)

    def test_loader_load_special_docs(self):

        # Initial state
        self.assertEqual(self.record.demographics, None)

        # Load the docs, but don't save
        self.loader.load_special_docs(self.normal_profile_dir, self.record, save=False)
        
        # State should have changed in memory
        self.assertNotEqual(self.record.demographics, None)

        # But not in the DB
        db_record = Record.objects.get(id=self.record.id)
        self.assertEqual(db_record.demographics, None)

        # reset
        self.record.demographics = None

        # Load the docs again, and save this time
        self.loader.load_special_docs(self.normal_profile_dir, self.record)

        # State should have changed in memory
        self.assertNotEqual(self.record.demographics, None)
        
        # AND in the DB
        db_record = Record.objects.get(id=self.record.id)
        self.assertNotEqual(db_record.demographics, None)

        # Now check that the demographics got set correctly
        with open(self.normal_profile_dir + '/Demographics.xml', 'r') as f:
            demo_raw = f.read()
        self.assertEqual(self.record.demographics.document.content, demo_raw)

        # reset
        self.record.demographics = None

        # Now check that things still work with missing documents
        self.loader.load_special_docs(self.no_demo_profile_dir, self.record)
        self.assertEqual(self.record.demographics, None)

    def test_loader_get_all_docs(self):
        # Get the docs
        docs = [doc for doc in self.loader.get_all_docs(self.normal_profile_dir)]

        # Make sure all of the xml docs were fetched
        required_files = glob.glob(self.normal_profile_dir + '/doc_*.xml')
        for filepath in required_files:
            with open(filepath, 'r') as f:
                data = (f.read(), 'application/xml')
            self.assertTrue(data in docs, filepath)
            
        # Make sure the pdf doc was fetched
        with open(self.normal_profile_dir + '/doc_pdf.pdf', 'rb') as f:
            data = (f.read(), 'application/pdf')
        self.assertTrue(data in docs)

        # Make sure demographics were not fetched
        with open(self.normal_profile_dir + '/Demographics.xml', 'r') as f:
            data = (f.read(), 'application/xml')
        self.assertFalse(data in docs)

        # Make sure docs with unknown extensions weren't fetched
        with open(self.normal_profile_dir + '/doc_beef.deadbeef', 'rb') as f:
            data = f.read()
        self.assertFalse(data in [doc[0] for doc in docs])
        

class TransactionSampleDataUnitTests(TransactionInternalTests):
    def setUp(self):
        sampleDataSetUp(self)

    def tearDown(self):
        sampleDataTearDown(self)

    def test_loader_load_profile(self):

        # Try loading an invalid profile
        self.assertRaises(Exception, self.loader.load_profile, 
                          self.record, 'patient_invalid')

        # Make sure we didn't create any documents (transactions worked)
        self.assertEqual(Document.objects.filter(record=self.record).count(), 0)

        db_record = Record.objects.get(id=self.record.id)
        self.assertEqual(db_record.demographics, None)

        # Now load a valid profile
        self.loader.load_profile(self.record, 'patient_1')
        
        # Make sure our docs got created
        n_docs = len(glob.glob(self.loader.data_dir + '/patient_1/doc_*'))
        n_docs += 1 # Demographics docs
        n_docs -= 1 # Unknown doctype doc
        self.assertEqual(Document.objects.filter(record=self.record).count(), n_docs)

        # test_loader_load_special_docs tests the content of these
        self.assertNotEqual(self.record.demographics, None) 


########NEW FILE########
__FILENAME__ = schema_loader
from indivo.tests.internal_tests import InternalTests
from indivo.document_processing import IndivoSchemaDir, IndivoSchemaLoader

from django.conf import settings

import os

NS = 'http://indivo.org/vocab/xml/documents#'

VALID_CORE_SCHEMAS = {
    'equipment': NS+'Equipment',
    'procedure': NS+'Procedure',
    'simplenote': NS+'SimpleClinicalNote',
    }

INVALID_CORE_SCHEMAS = (
    'demographics',
    )

class IndivoSchemaDirUnitTests(InternalTests):
    
    def setUp(self):
        super(IndivoSchemaDirUnitTests, self).setUp()

        # A valid directory
        self.valid_instance = IndivoSchemaDir(os.path.join(settings.CONTRIB_SCHEMA_DIRS[0], 'valid'))

        # A valid directory with a python transform
        self.valid_instance_py = IndivoSchemaDir(os.path.join(settings.CONTRIB_SCHEMA_DIRS[0], 'valid_py'))

        # An invalid directory having a schema but no transform
        self.invalid_instance_schema = IndivoSchemaDir(os.path.join(settings.CORE_SCHEMA_DIRS[0], 'demographics'))

        # An invalid directory having neither a schema nor a transform
        self.invalid_instance_empty = IndivoSchemaDir(os.path.join(settings.CONTRIB_SCHEMA_DIRS[0], 'bad_dir'))

    def test_construction(self):

        # Test that our objects got instantiated correctly
        self.assertEqual(self.valid_instance.schema_filename, 'schema')
        self.assertEqual(self.valid_instance.schema_ext, '.xsd')
        self.assertEqual(self.valid_instance.transform_filename, 'transform')
        self.assertEqual(self.valid_instance.transform_ext, '.xsl')

        self.assertEqual(self.valid_instance_py.schema_filename, 'schema')
        self.assertEqual(self.valid_instance_py.schema_ext, '.xsd')
        self.assertEqual(self.valid_instance_py.transform_filename, 'transform')
        self.assertEqual(self.valid_instance_py.transform_ext, '.py')
        
        self.assertEqual(self.invalid_instance_schema.schema_filename, 'schema')
        self.assertEqual(self.invalid_instance_schema.schema_ext, '.xsd')
        self.assertEqual(self.invalid_instance_schema.transform_filename, None)
        self.assertEqual(self.invalid_instance_schema.transform_ext, None)

        self.assertEqual(self.invalid_instance_empty.schema_filename, None)
        self.assertEqual(self.invalid_instance_empty.schema_ext, None)
        self.assertEqual(self.invalid_instance_empty.transform_filename, None)
        self.assertEqual(self.invalid_instance_empty.transform_ext, None)
        
    def test_is_valid(self):
        self.assertTrue(self.valid_instance.is_valid())
        self.assertTrue(self.valid_instance_py.is_valid())
        self.assertFalse(self.invalid_instance_schema.is_valid())
        self.assertFalse(self.invalid_instance_empty.is_valid())

    def test_get_full_schema_path(self):
        schema_path = os.path.join(settings.CONTRIB_SCHEMA_DIRS[0], 'valid/schema.xsd')
        self.assertEqual(self.valid_instance.get_full_schema_path(), schema_path)

        schema_path = os.path.join(settings.CONTRIB_SCHEMA_DIRS[0], 'valid_py/schema.xsd')
        self.assertEqual(self.valid_instance_py.get_full_schema_path(), schema_path)
        
        schema_path = os.path.join(settings.CORE_SCHEMA_DIRS[0], 'demographics/schema.xsd')
        self.assertEqual(self.invalid_instance_schema.get_full_schema_path(), schema_path)

        self.assertEqual(self.invalid_instance_empty.get_full_schema_path(), None)
    
    def test_get_full_transform_path(self):
        transform_path = os.path.join(settings.CONTRIB_SCHEMA_DIRS[0], 'valid/transform.xsl')
        self.assertEqual(self.valid_instance.get_full_transform_path(), transform_path)

        transform_path = os.path.join(settings.CONTRIB_SCHEMA_DIRS[0], 'valid_py/transform.py')
        self.assertEqual(self.valid_instance_py.get_full_transform_path(), transform_path)
        
        self.assertEqual(self.invalid_instance_schema.get_full_transform_path(), None)

        self.assertEqual(self.invalid_instance_empty.get_full_transform_path(), None)

class SchemaLoaderUnitTests(InternalTests):
    def setUp(self):
        super(SchemaLoaderUnitTests, self).setUp()
        self.loader = IndivoSchemaLoader(settings.CORE_SCHEMA_DIRS[0])

    def test_detect_schema_dir(self):
        
        # Make sure we can detect all of the core schemas
        for dirname in VALID_CORE_SCHEMAS.keys():
            schema_dir = IndivoSchemaLoader.detect_schema_dir(os.path.join(settings.CORE_SCHEMA_DIRS[0], dirname))
            self.assertTrue(schema_dir.is_valid())

        # Make sure the core schemas without transforms (demographics, etc.) don't show up
        # as valid document processing schemas
        for dirname in INVALID_CORE_SCHEMAS:
            schema_dir = IndivoSchemaLoader.detect_schema_dir(os.path.join(settings.CORE_SCHEMA_DIRS[0], dirname))
            self.assertFalse(schema_dir.is_valid())

        # Make sure our empty directory isn't a valid schema directory
        bad_dir = os.path.join(settings.CONTRIB_SCHEMA_DIRS[0], 'bad_dir')
        self.assertFalse(IndivoSchemaLoader.detect_schema_dir(bad_dir).is_valid())

    def test_discover_schema_dirs(self):
        
        # Make sure we got all the right schema directories
        schema_dirs = dict([(fqn, (validation_func, transformation_func))
                            for fqn, validation_func, transformation_func in self.loader.discover_schema_dirs()])
        self.assertEqual(set(schema_dirs.keys()), set(VALID_CORE_SCHEMAS.values()))    

########NEW FILE########
__FILENAME__ = simpledatamodel
import sys
from indivo.lib import iso8601
from indivo.tests.internal_tests import TransactionInternalTests, InternalTests
from indivo.tests.data import TEST_SDML_DOCS, TEST_SDMJ_DOCS, TEST_SDMX_DOCS
from indivo.tests.data import INVALID_TEST_SDML_DOCS, INVALID_TEST_SDMJ_DOCS, INVALID_TEST_SDMX_DOCS
from indivo.lib.simpledatamodel import SDML, SDMJData, SDMXData, SDMException
from django.db import models
from django.db.models.fields import FieldDoesNotExist
from lxml import etree
from StringIO import StringIO

class SDMLUnitTests(InternalTests):
    def setUp(self):
        super(SDMLUnitTests, self).setUp()
        self.instance = SDML(TEST_SDML_DOCS[0])

    def tearDown(self):
        self.remove_model_from_cache('TestMedication2')
        self.remove_model_from_cache('TestPrescription2')
        self.remove_model_from_cache('TestFill2')
        self.instance = None
        super(SDMLUnitTests, self).tearDown()

    def test_get_output(self):
        output_classes = [obj for obj in self.instance.get_output()]
        self.assertEqual(len(output_classes), 3) # Three models in the definition
        
        med_klass = scrip_klass = fill_klass = None
        for klass in output_classes:
            klass_name = klass.__name__
            if klass_name == 'TestMedication2':
                med_klass = klass
            elif klass_name == 'TestPrescription2':
                scrip_klass = klass
            elif klass_name == 'TestFill2':
                fill_klass = klass
            else:
                self.fail('SDML parsing produced an invalid class %s'%klass_name)
                
        if not med_klass:
            self.fail('SDML parsing did not produce a TestMedication2 class')
        if not scrip_klass:
            self.fail('SDML parsing did not produce a TestPrescription2 class')
        if not fill_klass:
            self.fail('SDML parsing did not produce a TestFill2 class')

        # Make sure the testmedication2 class parsed as expected
        med_expected_fields = {
            'name': models.CharField,
            'date_started': models.DateTimeField,
            'date_stopped': models.DateTimeField,
            'brand_name': models.CharField,
            'route': models.CharField,
            }
        self.check_class_fields(med_klass, med_expected_fields)

        # The 'prescription' field should be a OneToOne field, pointing at TestPrescription2
        prescription_field = med_klass._meta.get_field('prescription')
        self.assertTrue(isinstance(prescription_field, models.OneToOneField))
        self.assertEqual(prescription_field.rel.to, scrip_klass)

        # The 'fills' field should be the reverse side of a ForeignKey from TestFill2 to TestMedication2
        fills_field = med_klass.fills
        self.assertTrue(isinstance(fills_field, models.fields.related.ForeignRelatedObjectsDescriptor))
        self.assertEqual(fills_field.related.model, fill_klass)

        # Make sure the testprescription2 class parsed as expected
        scrip_expected_fields = {
            'prescribed_by_name': models.CharField,
            'prescribed_by_institution': models.CharField,
            'prescribed_on': models.DateTimeField,
            'prescribed_stop_on': models.DateTimeField,
            }
        self.check_class_fields(scrip_klass, scrip_expected_fields)

        # The TestPrescription2 model should have a 'testmedication2' field pointing to the Medication class
        # (the reverse link of the OneToOne from the TestMedication2)
        scrip_parent_link = scrip_klass.testmedication2
        self.assertTrue(isinstance(scrip_parent_link, models.fields.related.SingleRelatedObjectDescriptor))
        self.assertEqual(scrip_parent_link.related.model, med_klass)

        # Make sure the testfill2 class parsed as expected
        fill_expected_fields = {
            'date_filled': models.DateField,
            'supply_days': models.FloatField,
            'filled_at_name': models.CharField,
            'code_identifier': models.CharField, # CodedValues should be expanded
            'code_title': models.CharField,
            'code_system': models.CharField,
            'quantity_value': models.CharField, # ValueAndUnit fields should be expanded
            'quantity_unit': models.CharField,
            'pharmacy_ncpdpid': models.CharField, # Pharmacy fields should be expanded
            'pharmacy_org': models.CharField,
            'pharmacy_adr_country': models.CharField, # Address fields should be expanded (recursively, from Pharmacy)
            'pharmacy_adr_city': models.CharField,
            'pharmacy_adr_postalcode': models.CharField,
            'pharmacy_adr_region': models.CharField,
            'pharmacy_adr_street': models.CharField,
            'prescriber_dea_number': models.CharField, # Provider fields should be expanded
            'prescriber_ethnicity': models.CharField,
            'prescriber_npi_number': models.CharField,
            'prescriber_preferred_language': models.CharField,
            'prescriber_race': models.CharField,
            'prescriber_adr_country': models.CharField, # Address fields should be expanded (recursively, from Prescriber)
            'prescriber_adr_city': models.CharField,
            'prescriber_adr_postalcode': models.CharField,
            'prescriber_adr_region': models.CharField,
            'prescriber_adr_street': models.CharField,
            'prescriber_bday': models.DateField,
            'prescriber_email': models.EmailField,
            'prescriber_name_family': models.CharField, # Name fields should be expanded (recursively, from Prescriber)
            'prescriber_name_given': models.CharField,
            'prescriber_name_prefix': models.CharField,
            'prescriber_name_suffix': models.CharField,
            'prescriber_gender': models.CharField,
            'prescriber_tel_1_type': models.CharField, # Telephone fields should be expanded (recursively, from Prescriber)
            'prescriber_tel_1_number': models.CharField, 
            'prescriber_tel_1_preferred_p': models.BooleanField,
            'prescriber_tel_2_type': models.CharField,
            'prescriber_tel_2_number': models.CharField,
            'prescriber_tel_2_preferred_p': models.BooleanField,               
            }
        self.check_class_fields(fill_klass, fill_expected_fields)

        # The TestFill2 model should have a ForeignKey field named 'testmedication2' pointing to the Medication class
        fill_parent_link = fill_klass._meta.get_field('testmedication2')
        self.assertTrue(isinstance(fill_parent_link, models.ForeignKey))
        self.assertEqual(fill_parent_link.rel.to, med_klass)

    def test_invalid_schemas(self):
        def cause_exception(doc):
            parser = SDML(doc)
            output = [obj for obj in parser.get_output()]

        for doc in INVALID_TEST_SDML_DOCS:
            self.assertRaises(SDMException, cause_exception, doc)

    def check_class_fields(self, klass, expected_fields):
        for field_name, field_class in expected_fields.iteritems():
            try:
                field = klass._meta.get_field(field_name)
            except FieldDoesNotExist:
                self.fail('SDML parsing did not produce field %s on class %s'%(field_name, klass.__name__))
            self.assertTrue(isinstance(field, field_class))
            
class SDMJDataUnitTests(TransactionInternalTests):
    def setUp(self):
        super(SDMJDataUnitTests, self).setUp()
        self.instance = SDMJData(TEST_SDMJ_DOCS[0])
        self.required_classes = []
        
        # Load test Classes
        self.required_classes = self.load_models_from_sdml(TEST_SDML_DOCS[0])

    def tearDown(self):
        self.instance = None

        # Unregister the classes, reset the DB
        self.unload_models(self.required_classes)
        self.required_classes = []

        super(SDMJDataUnitTests, self).tearDown()        

    def test_get_output(self):
        output_objects = [obj for obj in self.instance.get_output()]
        self.assertEqual(len(output_objects), 4) # Three models in the definition
    
        med_obj = scrip_obj = None
        fill_objs = []
        for obj in output_objects:
            klass_name = obj.__class__.__name__
            if klass_name == 'TestMedication2':
                med_obj = obj
            elif klass_name == 'TestPrescription2':
                scrip_obj = obj
            elif klass_name == 'TestFill2':
                fill_objs.append(obj)
            else:
                self.fail('SDMJ Document parsing produced an instance of an invalid class %s'%klass_name)
                
        if not med_obj:
            self.fail('SDMJ Document parsing did not produce an instance of TestMedication2')
        if not scrip_obj:
            self.fail('SDMJ Document parsing did not produce an instance of TestPrescription2')
        if not fill_objs or len(fill_objs) != 2:
            self.fail('SDMJ Document parsing did not produce two instances of TestFill2')

        # Make sure the testmedication2 object parsed as expected
        med_expected_fields = {
            'name': 'ibuprofen',
            'date_started': iso8601.parse_utc_date('2010-10-01T00:00:00Z'),
            'date_stopped': iso8601.parse_utc_date('2010-10-31T00:00:00Z'),
            'brand_name': 'Advil',
            'route': 'Oral',
            }
        self.check_object_fields(med_obj, med_expected_fields)

        # The 'prescription' field should be a OneToOne field, pointing at the prescription object
        self.assertEqual(med_obj.prescription, scrip_obj)

        # The 'fills' field should be a manager for fills objects
        # We can't test whether they match up because we aren't saving them to the database
        # So currently 'med_obj.fills' will raise a DoesNotExist exception

        # Make sure the testprescription2 class parsed as expected
        scrip_expected_fields = {
            'prescribed_by_name': 'Kenneth D. Mandl',
            'prescribed_by_institution': 'Children\'s Hospital Boston',
            'prescribed_on': iso8601.parse_utc_date('2010-09-30T00:00:00Z'),
            'prescribed_stop_on': iso8601.parse_utc_date('2010-10-31T00:00:00Z'),
            }
        self.check_object_fields(scrip_obj, scrip_expected_fields)

        # The TestPrescription2 object should have a 'testmedication2' field pointing to the Medication class
        # (the reverse link of the OneToOne from the TestMedication2)
        # We can't test this because we aren't saving object to the database.
        # If we were, we should test this with: self.assertEqual(scrip_obj.testmedication2, med_obj)

        # Make sure the testfill2 class parsed as expected
        fill_expected_fields = {
            'supply_days': 15,
            'filled_at_name': 'CVS',
            }
        fill_dates = set([iso8601.parse_utc_date('2010-10-01T00:00:00Z'), 
                          iso8601.parse_utc_date('2010-10-16T00:00:00Z')])
        for fill_obj in fill_objs:
            self.check_object_fields(fill_obj, fill_expected_fields)
            self.assertEqual(fill_obj.testmedication2, med_obj)
        self.assertEqual(set([o.date_filled for o in fill_objs]), fill_dates)

    def test_invalid_schemas(self):
        def cause_exception(doc):
            parser = SDMJData(doc)
            output = [obj for obj in parser.get_output()]

        for doc in INVALID_TEST_SDMJ_DOCS:
            self.assertRaises(SDMException, cause_exception, doc)


    def check_object_fields(self, obj, expected_fields):
        for field_name, expected_val in expected_fields.iteritems():
            actual_val = getattr(obj, field_name, None)
            self.assertEqual(actual_val, expected_val)

class SDMXDataUnitTests(TransactionInternalTests):
    def setUp(self):
        super(SDMXDataUnitTests, self).setUp()
        self.instance = SDMXData(etree.parse(StringIO(TEST_SDMX_DOCS[0])))
        self.required_classes = []
        
        # Load test Classes
        self.required_classes = self.load_models_from_sdml(TEST_SDML_DOCS[0])

    def tearDown(self):
        self.instance = None

        # Unregister the classes, reset the DB
        self.unload_models(self.required_classes)
        self.required_classes = []

        super(SDMXDataUnitTests, self).tearDown()        

    def test_get_output(self):
        output_objects = [obj for obj in self.instance.get_output()]
        self.assertEqual(len(output_objects), 4) # Three models in the definition
    
        med_obj = scrip_obj = None
        fill_objs = []
        for obj in output_objects:
            klass_name = obj.__class__.__name__
            if klass_name == 'TestMedication2':
                med_obj = obj
            elif klass_name == 'TestPrescription2':
                scrip_obj = obj
            elif klass_name == 'TestFill2':
                fill_objs.append(obj)
            else:
                self.fail('SDMX Document parsing produced an instance of an invalid class %s'%klass_name)
                
        if not med_obj:
            self.fail('SDMX Document parsing did not produce an instance of TestMedication2')
        if not scrip_obj:
            self.fail('SDMX Document parsing did not produce an instance of TestPrescription2')
        if not fill_objs or len(fill_objs) != 2:
            self.fail('SDMX Document parsing did not produce two instances of TestFill2')

        # Make sure the testmedication2 object parsed as expected
        med_expected_fields = {
            'name': 'ibuprofen',
            'date_started': iso8601.parse_utc_date('2010-10-01T00:00:00Z'),
            'date_stopped': iso8601.parse_utc_date('2010-10-31T00:00:00Z'),
            'brand_name': 'Advil',
            'route': 'Oral',
            }
        self.check_object_fields(med_obj, med_expected_fields)

        # The 'prescription' field should be a OneToOne field, pointing at the prescription object
        self.assertEqual(med_obj.prescription, scrip_obj)

        # The 'fills' field should be a manager for fills objects
        # We can't test whether they match up because we aren't saving them to the database
        # So currently 'med_obj.fills' will raise a DoesNotExist exception

        # Make sure the testprescription2 class parsed as expected
        scrip_expected_fields = {
            'prescribed_by_name': 'Kenneth D. Mandl',
            'prescribed_by_institution': 'Children\'s Hospital Boston',
            'prescribed_on': iso8601.parse_utc_date('2010-09-30T00:00:00Z'),
            'prescribed_stop_on': iso8601.parse_utc_date('2010-10-31T00:00:00Z'),
            }
        self.check_object_fields(scrip_obj, scrip_expected_fields)

        # The TestPrescription2 object should have a 'testmedication2' field pointing to the Medication class
        # (the reverse link of the OneToOne from the TestMedication2)
        # We can't test this because we aren't saving object to the database.
        # If we were, we should test this with: self.assertEqual(scrip_obj.testmedication2, med_obj)

        # Make sure the testfill2 class parsed as expected
        fill_expected_fields = {
            'supply_days': 15,
            'filled_at_name': 'CVS',
            }
        fill_dates = set([iso8601.parse_utc_date('2010-10-01T00:00:00Z'), 
                          iso8601.parse_utc_date('2010-10-16T00:00:00Z')])
        for fill_obj in fill_objs:
            self.check_object_fields(fill_obj, fill_expected_fields)
            self.assertEqual(fill_obj.testmedication2, med_obj)
        self.assertEqual(set([o.date_filled for o in fill_objs]), fill_dates)

    def test_invalid_schemas(self):
        def cause_exception(doc):
            parser = SDMXData(etree.parse(StringIO(doc)))
            output = [obj for obj in parser.get_output()]

        for doc in INVALID_TEST_SDMX_DOCS:
            self.assertRaises(SDMException, cause_exception, doc)

    def check_object_fields(self, obj, expected_fields):
        for field_name, expected_val in expected_fields.iteritems():
            actual_val = getattr(obj, field_name, None)
            self.assertEqual(actual_val, expected_val)


########NEW FILE########
__FILENAME__ = validators
from indivo.tests.internal_tests import InternalTests
from indivo.validators import ValueInSetValidator, ExactValueValidator
from django.core.exceptions import ValidationError

VAL = 'abc'
VALS = ['bcd', 'cde', 4]
BAD_VALS = ['rst', 'piw', 3]

class ValidatorUnitTests(InternalTests):

    def setUp(self):
        super(ValidatorUnitTests, self).setUp()
        self.v_inset_null = ValueInSetValidator(VALS, nullable=True)
        self.v_inset = ValueInSetValidator(VALS)
        self.v_null = ExactValueValidator(VAL, nullable=True)
        self.v = ExactValueValidator(VAL)

    def tearDown(self):
        super(ValidatorUnitTests,self).tearDown()

    def test_valid_vals(self):
        
        # the correct single value should validate
        self.assertNotRaises(ValidationError, self.v, VAL)
        self.assertNotRaises(ValidationError, self.v_null, VAL)

        # correct values from the set should validate
        for v in VALS:
            self.assertNotRaises(ValidationError, self.v_inset, v)
            self.assertNotRaises(ValidationError, self.v_inset_null, v)


        # empty values should validate against nullable validators
        self.assertNotRaises(ValidationError, self.v_null, None)
        self.assertNotRaises(ValidationError, self.v_null, '')
        self.assertNotRaises(ValidationError, self.v_inset_null, None)
        self.assertNotRaises(ValidationError, self.v_inset_null, '')

    def test_invalid_vals(self):
        
        # incorrect values shouldn't validate
        for v in BAD_VALS:
            self.assertRaises(ValidationError, self.v, v)
            self.assertRaises(ValidationError, self.v_null, v)
            self.assertRaises(ValidationError, self.v_inset, v)
            self.assertRaises(ValidationError, self.v_inset_null, v)

        # empty values shouldn't validate against non-nullable validators
        self.assertRaises(ValidationError, self.v, None)
        self.assertRaises(ValidationError, self.v, '')
        self.assertRaises(ValidationError, self.v_inset, None)
        self.assertRaises(ValidationError, self.v_inset, '')

########NEW FILE########
__FILENAME__ = accesstoken
from base import TokenModelUnitTests
from indivo.tests.internal_tests import enable_transactions
from indivo.tests.data.record import TEST_RECORDS
from indivo.tests.data.account import TEST_ACCOUNTS
from indivo.tests.data.app import TEST_USERAPPS
from indivo.tests.data.app import TEST_AUTONOMOUS_APPS
from indivo.models import AccessToken, Carenet
from django.db import IntegrityError, transaction

import random, string

class AccessTokenModelUnitTests(TokenModelUnitTests):
    def setUp(self):
        super(AccessTokenModelUnitTests, self).setUp()

        # An account
        self.account = self.createAccount(TEST_ACCOUNTS, 1)

        # A record for the account, with a couple carenets
        self.record = self.createRecord(TEST_RECORDS, 0, owner=self.account)
        self.carenets = Carenet.objects.filter(record=self.record)[:2]

        # An unshared account
        self.with_account = self.createAccount(TEST_ACCOUNTS, 2)

        # A proxying app, with our record shared to it.
        self.app = self.createUserApp(TEST_USERAPPS, 0)
        self.share = self.addAppToRecord(record=self.record, with_pha=self.app)

        # Another proxying app, with just a carenet shared to it.
        self.c_app = self.createUserApp(TEST_USERAPPS, 1)
        self.c_share = self.addAppToRecord(record=self.record, with_pha=self.c_app, carenet=self.carenets[0])

        # A proxying autonomous app, with our record shared to it.
        self.a_app = self.createUserApp(TEST_AUTONOMOUS_APPS, 0)
        self.a_share = self.addAppToRecord(record=self.record, with_pha=self.a_app)

    def tearDown(self):
        super(AccessTokenModelUnitTests, self).tearDown()

    @enable_transactions
    def test_construction(self):

        # Should construct normally
        token, secret = self.generate_token_and_secret()
        args = {'token': token,
                'token_secret': secret,
                'share': self.share,
                'account': self.account,
                'carenet': None,
                }
        try:
            at = AccessToken.objects.create(**args)
        except IntegrityError:
            transaction.rollback()
            self.fail('Could not construct account full share')
        else:
            self.assertEqual(at, AccessToken.objects.get(pk=at.pk))

        # Should construct normally when tied to a carenet
        token, secret = self.generate_token_and_secret()
        args = {'token': token,
                'token_secret': secret,
                'share': self.c_share,
                'account': self.account,
                'carenet': self.carenets[0],
                }
        try:
            at = AccessToken.objects.create(**args)
        except IntegrityError:
            transaction.rollback()
            self.fail('Could not construct account full share')
        else:
            self.assertEqual(at, AccessToken.objects.get(pk=at.pk))

        # Should construct normally without an account
        token, secret = self.generate_token_and_secret()
        args = {'token': token,
                'token_secret': secret,
                'share': self.a_share,
                'account': None,
                'carenet': None,
                }
        try:
            at = AccessToken.objects.create(**args)
        except IntegrityError:
            transaction.rollback()
            self.fail('Could not construct account full share')
        else:
            self.assertEqual(at, AccessToken.objects.get(pk=at.pk))

    def test_accesscontrol(self):

        # Build a token, for an account proxied by an app
        token, secret = self.generate_token_and_secret()
        args = {'token': token,
                'token_secret': secret,
                'share': self.share,
                'account': self.account,
                'carenet': None,
                }
        at = AccessToken.objects.create(**args)
        
        self.assertTrue(at.isProxiedByApp(self.app))
        self.assertFalse(at.isProxiedByApp(self.c_app))
        self.assertFalse(at.isProxiedByApp(self.a_app))

        self.assertTrue(at.scopedToRecord(self.record))

        self.assertFalse(at.isInCarenet(self.carenets[0]))
        self.assertFalse(at.isInCarenet(self.carenets[1]))
        
        self.assertEqual(at.effective_principal, self.account)

        # Build a token, for an account proxied by an app, tied to a carenet
        token, secret = self.generate_token_and_secret()
        args = {'token': token,
                'token_secret': secret,
                'share': self.c_share,
                'account': self.account,
                'carenet': self.carenets[0],
                }
        at = AccessToken.objects.create(**args)

        self.assertTrue(at.isProxiedByApp(self.c_app))
        self.assertFalse(at.isProxiedByApp(self.app))
        self.assertFalse(at.isProxiedByApp(self.a_app))

        self.assertFalse(at.scopedToRecord(self.record))
        
        self.assertTrue(at.isInCarenet(self.carenets[0]))
        self.assertFalse(at.isInCarenet(self.carenets[1]))
                        
        self.assertEqual(at.effective_principal, self.account)
       
        # Build a token, for an autonomous app
        token, secret = self.generate_token_and_secret()
        args = {'token': token,
                'token_secret': secret,
                'share': self.a_share,
                'account': None,
                'carenet': None,
                }
        at = AccessToken.objects.create(**args)

        self.assertFalse(at.isProxiedByApp(self.c_app))
        self.assertFalse(at.isProxiedByApp(self.app))
        self.assertFalse(at.isProxiedByApp(self.a_app))

        self.assertTrue(at.scopedToRecord(self.record))
        
        self.assertFalse(at.isInCarenet(self.carenets[0]))
        self.assertFalse(at.isInCarenet(self.carenets[1]))

        self.assertEqual(at.effective_principal, self.a_app)

########NEW FILE########
__FILENAME__ = account
from indivo.tests.internal_tests import InternalTests, enable_transactions
from indivo.tests.data.account import TEST_ACCOUNTS
from indivo.tests.data.record import TEST_RECORDS
from indivo.models.accounts import UNINITIALIZED, ACTIVE, DISABLED, RETIRED
from indivo.models import Record, AccountAuthSystem, Account
from django.db import IntegrityError, transaction
import string

class AccountModelUnitTests(InternalTests):
    def setUp(self):
        super(AccountModelUnitTests,self).setUp()
        
        # An Account
        self.account = self.createAccount(TEST_ACCOUNTS, 1)
        
        # A record for that account
        self.record = self.createRecord(TEST_RECORDS, 1, owner=self.account)

        # An uninitialized account
        self.u_account = self.createUninitializedAccount(TEST_ACCOUNTS, 2)

        # And its record
        self.u_record = self.createRecord(TEST_RECORDS, 2, owner=self.u_account)

        # A fully shared record
        self.fs_record = self.createRecord(TEST_RECORDS, 5) # owned by TEST_ACCOUNTS[0] by default
        self.shareRecordFull(self.fs_record, self.account)

    def tearDown(self):
        super(AccountModelUnitTests,self).tearDown()

    @enable_transactions
    def test_construction(self):
        test_account_list = TEST_ACCOUNTS
        test_account_index = 3
        
        # should fail without a fullname
        overrides = {'fullname':None}
        try:
            self.createTestItem(test_account_list, test_account_index, overrides)
        except IntegrityError:
            transaction.rollback()
        else:
            self.fail('Created Account with no full_name')
        
        # should fail without a contact_email
        overrides = {'contact_email': None}
        try:
            self.createTestItem(test_account_list, test_account_index, overrides)
        except IntegrityError:
            transaction.rollback()
        else:
            self.fail('Created Account with no contact_email')
 
        # should save normally with proper data            
        try:
            a = self.createTestItem(test_account_list, test_account_index)
        except IntegrityError as e:
            transaction.rollback()
            self.fail(str(e))
        
        # Make sure it saved to the DB properly
        self.assertEqual(a, Account.objects.get(pk=a.pk))

    def test_retired(self):
        self.account.set_state("retired")
        self.assertRaises(Exception, lambda: self.account.set_state("active"))

    def test_password(self):
        
        # Can't set a username on uninitialized account
        self.assertRaises(Exception, lambda: self.u_account.set_username(username='foobar'))

        # Set up the account
        self.u_account.set_username_and_password(username='foobar', password='baz')

        # make sure it worked
        pw_info = self.u_account.password_info
        self.assertTrue(isinstance(pw_info, AccountAuthSystem))
        self.assertEqual(pw_info.username, 'foobar')
        self.assertTrue(self.u_account.password_check('baz'))
        self.assertFalse(self.u_account.password_check('foob'))

        # now we should be able to set the username
        self.u_account.set_username(username='foobar2')
        self.assertEqual(self.u_account.password_info.username, 'foobar2')

    def test_failed_login(self):

        # we start out active
        self.assertEqual(self.account.state, ACTIVE)

        # login
        self.account.on_successful_login()
        self.assertEqual(self.account.total_login_count, 1)
        self.assertEqual(self.account.failed_login_count, 0)
        
        # typo
        self.account.on_failed_login()
        self.assertEqual(self.account.total_login_count, 1)
        self.assertEqual(self.account.failed_login_count, 1)

        # typo
        self.account.on_failed_login()
        self.assertEqual(self.account.total_login_count, 1)
        self.assertEqual(self.account.failed_login_count, 2)

        # login: should reset failed count
        self.account.on_successful_login()
        self.assertEqual(self.account.total_login_count, 2)
        self.assertEqual(self.account.failed_login_count, 0)

        # typo: SHOULDN'T DISABLE ACCOUNT
        self.account.on_failed_login()
        self.assertEqual(self.account.total_login_count, 2)
        self.assertEqual(self.account.failed_login_count, 1)
        self.assertNotEqual(self.account.state, DISABLED)

        # typo
        self.account.on_failed_login()
        self.assertEqual(self.account.total_login_count, 2)
        self.assertEqual(self.account.failed_login_count, 2)

        # typo: DISABLES ACCOUNT
        self.account.on_failed_login()
        self.assertEqual(self.account.total_login_count, 2)
        self.assertEqual(self.account.failed_login_count, 3)
        self.assertEqual(self.account.state, DISABLED)

        # we're inactive
        self.assertFalse(self.account.is_active)

        # reactivate
        self.account.set_state(ACTIVE)
        self.failed_login_count = 0
        self.account.save()

        # one more login
        self.account.on_successful_login()
        self.assertEqual(self.account.total_login_count, 3)
        self.assertEqual(self.account.failed_login_count, 0)

    def test_generate_secrets(self):
        self.account.primary_secret = None
        self.account.secondary_secret = None
        self.account.generate_secrets()
        
        # Primary secret should be 16 random characters
        self.assertNotEqual(self.account.primary_secret, None)
        self.assertEqual(len(self.account.primary_secret), 16)

        # Secondary secret should be 6 random digits
        self.assertNotEqual(self.account.secondary_secret, None)
        self.assertEqual(len(self.account.secondary_secret), 6)
        for digit in self.account.secondary_secret:
            self.assertTrue(digit in string.digits)

    def test_save(self):
        '''Account save should force emails to lowercase.'''
        self.account.email = 'miXedCase@mc.coM'
        self.account.save()
        self.assertEqual(self.account.email, 'mixedcase@mc.com')
    
    def test_accesscontrol(self):
        ''' Make sure all of the roles work appropriately '''
        
        # test ownsRecord
        owned_rs = Record.objects.filter(owner=self.account)
        for r in owned_rs:
            self.assertTrue(self.account.ownsRecord(r))

        unowned_rs = Record.objects.exclude(owner=self.account)
        for r in unowned_rs:
            self.assertFalse(self.account.ownsRecord(r))

        # test fullySharesRecord
        self.assertTrue(self.account.fullySharesRecord(self.fs_record)) 
        self.assertFalse(self.account.fullySharesRecord(self.record)) # not fully shared, because we own it
        self.assertFalse(self.account.fullySharesRecord(self.u_record)) # not fully shared because it hasn't been shared

        # test isInCarenet
        self.assertFalse(self.account.isInCarenet(self.u_record.carenet_set.all()[0])) # not added yet
        self.addAccountToCarenet(self.account, self.u_record.carenet_set.all()[0])
        self.assertTrue(self.account.isInCarenet(self.u_record.carenet_set.all()[0])) # now we've added it
        self.assertFalse(self.account.isInCarenet(self.u_record.carenet_set.all()[1])) # but not to a different carenet
    
    def test_disable(self):
        self.assertEqual(self.account.state, ACTIVE)
        self.account.disable()
        self.assertEqual(self.account.state, DISABLED)

    def test_send_secret(self):
        pass # ideally, we should set up a test mail_server to look at emails...

    def test_notify_account_of_new_message(self):
        pass # ideally, we should set up a test mail_server to look at emails...

    def send_welcome_email(self):
        pass # ideally, we should set up a test mail_server to look at emails...
        
    def test_records_administered(self):
        self.assertEqual(list(self.account.records_administered.all()), list(Record.objects.filter(owner=self.account)))

########NEW FILE########
__FILENAME__ = accountauthsystem
from indivo.tests.internal_tests import InternalTests, enable_transactions
from indivo.tests.data.authsystem import TEST_AUTHSYSTEMS
from indivo.tests.data.account import TEST_ACCOUNTS
from indivo.models import AccountAuthSystem
from django.db import IntegrityError, transaction

username1 = 'USER1'
username2 = 'UsEr2'
username3 = 'user3'
username4 = 'USER3'

class AccountAuthSystemModelUnitTests(InternalTests):
    def setUp(self):
        super(AccountAuthSystemModelUnitTests, self).setUp()

        # An external auth system
        self.auth_system = self.createAuthSystem(TEST_AUTHSYSTEMS, 0)

        # An account
        self.account = self.createAccount(TEST_ACCOUNTS, 1)

        # Another account
        self.account2 = self.createAccount(TEST_ACCOUNTS, 2)

    def tearDown(self):
        super(AccountAuthSystemModelUnitTests, self).tearDown()

    @enable_transactions
    def test_construction(self):

        # should construct normally
        args = {'account':self.account,
                'auth_system':self.auth_system,
                'username': username1,
                }
        try:
            aas = AccountAuthSystem.objects.create(**args)
        except IntegrityError:
            transaction.rollback()
            self.fail('Could not create AccountAuthSystem normally')
        else:
            sid = transaction.savepoint()
            self.assertEqual(aas, AccountAuthSystem.objects.get(pk=aas.pk))


        # shouldn't be able to add the same authsystem twice to an account
        args['username'] = username2
        try:
              aas = AccountAuthSystem.objects.create(**args)
        except IntegrityError:
            transaction.savepoint_rollback(sid)
        else:
            self.fail('Added the same authsystem twice to the same account')

        # shouldn't be able to have an authsystem with two identical usernames
        args['username'] = username1
        args['account'] = self.account2
        try:
              aas = AccountAuthSystem.objects.create(**args)
        except IntegrityError:
            transaction.rollback()
        else:
            self.fail('Added two accounts with the same username to a single authsystem')

    @enable_transactions
    def test_lowercase_usernames(self):

        # build an account auth system
        args = {'account':self.account,
                'auth_system':self.auth_system,
                'username': username1,
                }
        aas = AccountAuthSystem.objects.create(**args)
        
        # make sure its username got auto-lowercased
        self.assertEqual(aas.username, username1.lower())

        # make sure this works for mixed-case names
        aas.username = username2
        aas.save()
        self.assertEqual(aas.username, username2.lower())
    
        # should break if we have try to add two equivalent
        # (but differently case) usernames to the same auth system
        aas.username = username3
        aas.save()
        args = {'account': self.account2,
                'auth_system':self.auth_system,
                'username':username4,
                }
        try:
            aas2 = AccountAuthSystem.objects.create(**args)
        except IntegrityError:
            transaction.rollback()
        else:
            self.fail('Saved two equivalent usernames to the same authsystem')

########NEW FILE########
__FILENAME__ = accountfullshare
from indivo.tests.internal_tests import InternalTests, enable_transactions
from indivo.tests.data.record import TEST_RECORDS
from indivo.tests.data.account import TEST_ACCOUNTS
from indivo.models import AccountFullShare
from django.db import IntegrityError, transaction

class AccountFullShareModelUnitTests(InternalTests):
    def setUp(self):
        super(AccountFullShareModelUnitTests, self).setUp()

        # An account
        self.account = self.createAccount(TEST_ACCOUNTS, 1)

        # A record for the account
        self.record = self.createRecord(TEST_RECORDS, 0, owner=self.account)

        # A recipient account
        self.with_account = self.createAccount(TEST_ACCOUNTS, 2)

    def tearDown(self):
        super(AccountFullShareModelUnitTests, self).tearDown()

    @enable_transactions
    def test_construction(self):

        # Should construct normally
        args = {'record': self.record,
                'with_account': self.with_account,
                'role_label': 'Guardian',
                }
        try:
            afs = AccountFullShare.objects.create(**args)
        except IntegrityError:
            transaction.rollback()
            self.fail('Could not construct account full share')
        else:
            self.assertEqual(afs, AccountFullShare.objects.get(pk=afs.pk))

        # Should break if the same record is shared twice with the same account
        try:
            afs = AccountFullShare.objects.create(**args)
        except IntegrityError:
            transaction.rollback()
        else:
            self.fail('Shared a record with the same account twice')
        

########NEW FILE########
__FILENAME__ = audit
from indivo.tests.internal_tests import InternalTests
from indivo.models import Audit

import datetime

class AuditModelUnitTests(InternalTests):
    def setUp(self):
        super(AuditModelUnitTests, self).setUp()

    def tearDown(self):
        super(AuditModelUnitTests, self).tearDown()

    def test_construction(self):
        now = datetime.datetime.now()
        
        args = {'datetime':now,
                'view_func':'create_record',
                'request_successful':True,
                'effective_principal_email':'drawesome@indivo.org',
                'proxied_by_email':'app1@indivo.org',
                'carenet_id':'abcdefg',
                'record_id':'abcdef',
                'pha_id':'app1@indivo.org',
                'document_id':'abcdef',
                'external_id':'EXTERNAL',
                'message_id':'abcdef',
                'req_url':'/records/',
                'req_ip_address':'1.0.0.0',
                'req_domain':'hi.com',
                'req_headers':'abcd',
                'req_method':'POST',
                'resp_code':200,
                'resp_headers':'abcd',
                }

        minimal_args = {'datetime':now,
                        'request_successful':True,
                        }

        # Should construct normally
        a = Audit.objects.create(**args)
        self.assertEqual(a, Audit.objects.get(pk=a.pk))

        # Should construct normally with minimal args
        a = Audit.objects.create(**minimal_args)
        self.assertEqual(a, Audit.objects.get(pk=a.pk))

########NEW FILE########
__FILENAME__ = authsystem
from indivo.tests.internal_tests import InternalTests, enable_transactions
from indivo.tests.data.authsystem import TEST_AUTHSYSTEMS
from indivo.models import AuthSystem
from django.db import IntegrityError, transaction

class AuthSystemModelUnitTests(InternalTests):
    def setUp(self):
        super(AuthSystemModelUnitTests, self).setUp()

    def tearDown(self):
        super(AuthSystemModelUnitTests, self).tearDown()

    @enable_transactions
    def test_construction(self):

        # should construct normally
        try:
            auth_system = self.createAuthSystem(TEST_AUTHSYSTEMS, 0)
        except IntegrityError:
            transaction.rollback()
            self.fail('Could not create AuthSystem normally')
        else:
            sid = transaction.savepoint()
            self.assertEqual(auth_system, AuthSystem.objects.get(pk=auth_system.pk))

        # shouldn't be able to add the same authsystem twice
        try:
            auth_system = self.createAuthSystem(TEST_AUTHSYSTEMS, 0, force_create=True)
        except IntegrityError:
            transaction.savepoint_rollback(sid)
        else:
            self.fail('Added the same authsystem twice')

        # Even if one is internal and the other external
        try:
            auth_system = self.createAuthSystem(TEST_AUTHSYSTEMS, 0, internal_p=True, force_create=True)
        except IntegrityError:
            transaction.rollback()
        else:
            self.fail('Added the same authsystem externally and internally')

    def test_password_authsystem(self):
        
        # System shouldn't exist in the DB by default
        self.assertRaises(AuthSystem.DoesNotExist, AuthSystem.objects.get, short_name='password')
        
        # Should still be able to acces it though, which should create it in the DB
        pw = AuthSystem.PASSWORD()
        self.assertEqual(pw.short_name, 'password')
        self.assertTrue(pw.internal_p)

        # Now it should exist in the DB
        self.assertTrue(AuthSystem.objects.filter(short_name='password').exists())

########NEW FILE########
__FILENAME__ = base
from indivo.tests.internal_tests import InternalTests
import random, string

class TokenModelUnitTests(InternalTests):
    """ Base class for unit tests of token-derived models. Provides basic utilities
        for generating tokens. """

    def generate_random_string(self, length=20):
        return "".join([random.choice(string.printable[0:62]) for i in range(length)])

    def generate_token_and_secret(self):
        return self.generate_random_string(), self.generate_random_string()

########NEW FILE########
__FILENAME__ = carenet
from indivo.tests.internal_tests import InternalTests, enable_transactions
from indivo.tests.data.record import TEST_RECORDS
from indivo.tests.data.demographics import TEST_DEMOGRAPHICS
from indivo.tests.data.document import TEST_R_DOCS
from indivo.tests.data.carenet import TEST_CARENETS
from indivo.models import Carenet
from django.db import IntegrityError, transaction

class CarenetModelUnitTests(InternalTests):
    def setUp(self):
        super(CarenetModelUnitTests, self).setUp()

        # A record for tests that should work, and one for tests that should break
        # test demographics documents are not associated with a record by default, 
        # so we add it in here TODO: better way
        self.good_record = self.createRecord(TEST_RECORDS, 0)
        self.good_record.demographics.document.record = self.good_record
        self.bad_record = self.createRecord(TEST_RECORDS, 1)
        self.bad_record.demographics.document.record = self.bad_record

        # Carenets for each of them
        self.good_carenet = Carenet.objects.filter(record=self.good_record)[0]
        self.bad_carenet = Carenet.objects.filter(record=self.bad_record)[0]

        self.good_doc = self.createDocument(TEST_R_DOCS, 0, record=self.good_record)

    def tearDown(self):
        super(CarenetModelUnitTests, self).tearDown()

    @enable_transactions
    def test_construction(self):

        # should construct normally
        try:
            cn = self.createCarenet(TEST_CARENETS, 0)
        except IntegrityError:
            transaction.rollback()
            self.fail('Could not create Carenet normally')
        else:
            self.assertEqual(cn, Carenet.objects.get(pk=cn.pk))

        # shouldn't be able to create two carenets with the same name on the same record
        try:
            cn = self.createCarenet(TEST_CARENETS, 0, force_create=True)
        except IntegrityError:
            transaction.rollback()
        else:
            self.fail('Added two carenets with the same name to the same record')

    def test_manage_docs(self):

        # No docs should be in the carenet yet.
        self.assertFalse(self.good_carenet.contains_doc(self.good_record.demographics.document))
        self.assertFalse(self.good_carenet.contains_doc(self.good_doc))
        self.assertEqual(self.good_carenet.demographics, None)

        self.assertFalse(self.bad_carenet.contains_doc(self.good_record.demographics.document))
        self.assertFalse(self.bad_carenet.contains_doc(self.good_doc))
        self.assertEqual(self.bad_carenet.demographics, None)

        # Add all of our docs to the good carenet
        self.good_carenet.add_doc(self.good_record.demographics.document)
        self.good_carenet.add_doc(self.good_doc)
                                   
        # Now they should be in there
        self.assertTrue(self.good_carenet.contains_doc(self.good_record.demographics.document))
        self.assertTrue(self.good_carenet.contains_doc(self.good_doc))
        self.assertTrue(self.good_carenet.demographics.document)
        self.assertEqual(self.good_carenet.demographics.document, self.good_record.demographics.document)

        # Fail to add a bunch of docs to the bad carenet
        self.assertRaises(ValueError, self.bad_carenet.add_doc, self.good_record.demographics.document)
        self.assertRaises(ValueError, self.bad_carenet.add_doc, self.good_doc)

        # Those docs better not be in the bad carenet
        self.assertFalse(self.bad_carenet.contains_doc(self.good_record.demographics.document))
        self.assertFalse(self.bad_carenet.contains_doc(self.good_doc))
        self.assertEqual(self.bad_carenet.demographics, None)

        # Now let's remove the docs from the good carenet
        self.good_carenet.remove_doc(self.good_record.demographics.document)
        self.good_carenet.remove_doc(self.good_doc)

        # Now they shouldn't be in the good carenet anymore, either.
        self.assertFalse(self.good_carenet.contains_doc(self.good_record.demographics.document))
        self.assertFalse(self.good_carenet.contains_doc(self.good_doc))
        self.assertEqual(self.good_carenet.demographics, None)

########NEW FILE########
__FILENAME__ = carenetaccount
from indivo.tests.internal_tests import InternalTests, enable_transactions
from indivo.tests.data.account import TEST_ACCOUNTS
from indivo.tests.data.carenet import TEST_CARENETS
from indivo.models import CarenetAccount
from django.db import IntegrityError, transaction

class CarenetAccountModelUnitTests(InternalTests):
    def setUp(self):
        super(CarenetAccountModelUnitTests, self).setUp()

        # An account
        self.account = self.createAccount(TEST_ACCOUNTS, 0)

        # A carenet
        self.carenet = self.createCarenet(TEST_CARENETS, 0)

    def tearDown(self):
        super(CarenetAccountModelUnitTests, self).tearDown()

    @enable_transactions
    def test_construction(self):

        # should construct normally
        try:
            ca = self.addAccountToCarenet(self.account, self.carenet)
        except IntegrityError:
            transaction.rollback()
            self.fail('Could not create CarenetAccount normally')
        else:
            sid = transaction.savepoint()
            self.assertEqual(ca, CarenetAccount.objects.get(pk=ca.pk))

        # shouldn't be able to add an account to the same carenet twice
        try:
            ca = self.addAccountToCarenet(self.account, self.carenet)
        except IntegrityError:
            transaction.savepoint_rollback(sid)
        else:
            self.fail('Added an account to the same carenet twice')

        # Even if one is read_only and one isn't
        try:
            ca = self.addAccountToCarenet(self.account, self.carenet, can_write=True)
        except IntegrityError:
            transaction.rollback()
        else:
            self.fail('Added the an account to the same carenet twice, once not read-only')

########NEW FILE########
__FILENAME__ = carenetautoshare
from indivo.tests.internal_tests import InternalTests, enable_transactions
from indivo.tests.data.record import TEST_RECORDS
from indivo.tests.data.carenet import TEST_CARENETS
from indivo.models import CarenetAutoshare, Carenet, DocumentSchema
from django.db import IntegrityError, transaction

class CarenetAutoshareModelUnitTests(InternalTests):
    def setUp(self):
        super(CarenetAutoshareModelUnitTests, self).setUp()

        # An record
        self.record = self.createRecord(TEST_RECORDS, 0)

        # A carenet
        self.carenet = Carenet.objects.filter(record = self.record)[0]

    def tearDown(self):
        super(CarenetAutoshareModelUnitTests, self).tearDown()

    @enable_transactions
    def test_construction(self):

        # should construct normally
        args = {'carenet':self.carenet,
                'record':self.record,
                'type':DocumentSchema.objects.get(type='http://indivo.org/vocab/xml/documents#Medication'),
                }
        try:
            ca = CarenetAutoshare.objects.create(**args)
        except IntegrityError:
            transaction.rollback()
            self.fail('Could not create CarenetAutoshare normally')
        else:
            self.assertEqual(ca, CarenetAutoshare.objects.get(pk=ca.pk))

        # shouldn't be able to autoshare the same doctype with the same carenet twice
        try:
            ca = CarenetAutoshare.objects.create(**args)
        except IntegrityError:
            transaction.rollback()
        else:
            self.fail('Autoshared the same doctype with the same carenet twice')

########NEW FILE########
__FILENAME__ = carenetdocument
from indivo.tests.internal_tests import InternalTests, enable_transactions
from indivo.tests.data.document import TEST_R_DOCS
from indivo.tests.data.record import TEST_RECORDS
from indivo.tests.data.carenet import TEST_CARENETS
from indivo.models import CarenetDocument
from django.db import IntegrityError, transaction

class CarenetDocumentModelUnitTests(InternalTests):
    def setUp(self):
        super(CarenetDocumentModelUnitTests, self).setUp()

        # A record
        self.record = self.createRecord(TEST_RECORDS, 0)

        # A document for the record
        self.doc = self.createDocument(TEST_R_DOCS, 0, record=self.record)

        # A carenet
        self.carenet = self.createCarenet(TEST_CARENETS, 0)

    def tearDown(self):
        super(CarenetDocumentModelUnitTests, self).tearDown()

    @enable_transactions
    def test_construction(self):

        # should construct normally
        try:
            cd = self.addDocToCarenet(self.doc, self.carenet)
        except IntegrityError:
            transaction.rollback()
            self.fail('Could not create CarenetDocument normally')
        else:
            sid = transaction.savepoint()
            self.assertEqual(cd, CarenetDocument.objects.get(pk=cd.pk))

        # shouldn't be able to share the same document with the same carenet twice
        try:
            cd = self.addDocToCarenet(self.doc, self.carenet)
        except IntegrityError:
            transaction.savepoint_rollback(sid)
        else:
            self.fail('Added the same document to the same carenet twice')

        # Especially with the share_p flags flipped
        try:
            cd = self.addDocToCarenet(self.doc, self.carenet, share_p=False)
        except IntegrityError:
            transaction.rollback()
        else:
            self.fail('Added the same document to the same carenet twice, once with share_p False')

########NEW FILE########
__FILENAME__ = carenetpha
from indivo.tests.internal_tests import InternalTests, enable_transactions
from indivo.tests.data.app import TEST_USERAPPS
from indivo.tests.data.carenet import TEST_CARENETS
from indivo.models import CarenetPHA
from django.db import IntegrityError, transaction

class CarenetPHAModelUnitTests(InternalTests):
    def setUp(self):
        super(CarenetPHAModelUnitTests, self).setUp()

        # An app
        self.app = self.createUserApp(TEST_USERAPPS, 0)

        # A carenet
        self.carenet = self.createCarenet(TEST_CARENETS, 0)

    def tearDown(self):
        super(CarenetPHAModelUnitTests, self).tearDown()

    @enable_transactions
    def test_construction(self):

        # should construct normally
        try:
            cp = self.addAppToCarenet(self.app, self.carenet)
        except IntegrityError:
            transaction.rollback()
            self.fail('Could not create CarenetPHA normally')
        else:
            self.assertEqual(cp, CarenetPHA.objects.get(pk=cp.pk))

        # shouldn't be able to share an app with the same carenet twice
        try:
            cp = self.addAppToCarenet(self.app, self.carenet)
        except IntegrityError:
            transaction.rollback()
        else:
            self.fail('Added an app to the same carenet twice')

########NEW FILE########
__FILENAME__ = demographics
import os
import settings
import json

from lxml import etree

from indivo.tests.internal_tests import InternalTests
from indivo.models import Demographics
from indivo.tests.data.record import TEST_RECORDS
from indivo.tests.data.document import TEST_DEMOGRAPHICS_DOCS
from indivo.tests.data.demographics import TEST_DEMOGRAPHICS_SDMX, TEST_DEMOGRAPHICS_SDMJ, TEST_DEMOGRAPHICS_RDFXML
from indivo.fields import CodedValueField
from django.db import models

URI_PREFIX = "http://indivo.org/"

class DemographicsModelUnitTests(InternalTests):
    def setUp(self):
        super(DemographicsModelUnitTests, self).setUp()

        # A record
        self.record = self.createRecord(TEST_RECORDS, 0)
        
        # A demographics document
        self.document = self.createDocument(TEST_DEMOGRAPHICS_DOCS, 0, record=self.record)
        
        # demographics
        self.demographics = Demographics.from_xml(self.document.content)
        self.demographics.document = self.document
        self.demographics.save()
        self.record.demographics = self.demographics
        self.record.save()
        
    def tearDown(self):
        super(DemographicsModelUnitTests, self).tearDown()
        
    def test_from_xml(self):
        bad_xml = """<stuff>definitely not demographics</stuff>"""

        self.assertNotRaises(Exception, Demographics.from_xml, self.document.content)            
        self.assertRaises(ValueError, Demographics.from_xml, bad_xml)

    def test_as_json(self):
        expected_json = json.loads(TEST_DEMOGRAPHICS_SDMJ)
        generated_json = json.loads(self.demographics.as_json())
        
        del generated_json[0]['__documentid__']
        self.assertEqual(expected_json, generated_json)
        
    def test_as_xml(self):
        root = etree.XML(self.demographics.as_xml())
        
        demographics = root.findall('./Model')
        self.assertEqual(len(demographics), 1)
        demographics = demographics[0]
        
        # check Demographics
        self.assertEqual(len(demographics.findall('Field')), 22, "expected 22 fields on test Demographics")
        self.assertEqual(demographics.get('name'), 'Demographics')
        self.assertEqual(demographics.find('Field[@name="bday"]').text, '1939-11-15T00:00:00Z')
        self.assertEqual(demographics.find('Field[@name="email"]').text, 'test@fake.org')
        self.assertEqual(demographics.find('Field[@name="name_given"]').text, 'Bruce')
        self.assertEqual(demographics.find('Field[@name="name_family"]').text, 'Wayne')
        self.assertEqual(demographics.find('Field[@name="name_middle"]').text, 'Quentin')
        self.assertEqual(demographics.find('Field[@name="name_prefix"]').text, 'Mr')
        self.assertEqual(demographics.find('Field[@name="name_suffix"]').text, 'Jr')
        self.assertEqual(demographics.find('Field[@name="ethnicity"]').text, 'Scottish')
        self.assertEqual(demographics.find('Field[@name="race"]').text, 'caucasian')
        self.assertEqual(demographics.find('Field[@name="tel_1_type"]').text, 'h')
        self.assertEqual(demographics.find('Field[@name="tel_1_number"]').text, '555-5555')
        self.assertEqual(demographics.find('Field[@name="tel_1_preferred_p"]').text, 'true')
        self.assertEqual(demographics.find('Field[@name="tel_2_type"]').text, 'c')
        self.assertEqual(demographics.find('Field[@name="tel_2_number"]').text, '555-6666')
        self.assertEqual(demographics.find('Field[@name="tel_2_preferred_p"]').text, 'false')
        self.assertEqual(demographics.find('Field[@name="adr_region"]').text, 'secret')
        self.assertEqual(demographics.find('Field[@name="adr_country"]').text, 'USA')
        self.assertEqual(demographics.find('Field[@name="adr_postalcode"]').text, '90210')
        self.assertEqual(demographics.find('Field[@name="adr_city"]').text, 'Gotham')
        self.assertEqual(demographics.find('Field[@name="adr_street"]').text, '1007 Mountain Drive')

    def test_as_rdf(self):
        pass

########NEW FILE########
__FILENAME__ = document
from indivo.tests.internal_tests import InternalTests, enable_transactions
from indivo.tests.data.account import TEST_ACCOUNTS
from indivo.tests.data.record import TEST_RECORDS
from indivo.tests.data.app import TEST_USERAPPS
from indivo.tests.data.document import TEST_R_DOCS, TEST_RA_DOCS, TEST_A_DOCS
from indivo.tests.data.reports import TEST_REPORTS_INVALID, TEST_REPORTS
from indivo.models import Document, StatusName, DocumentStatusHistory, Fact

from django.db import IntegrityError, transaction
from django.conf import settings

import datetime

class DocumentModelUnitTests(InternalTests):
    def setUp(self):
        super(DocumentModelUnitTests, self).setUp()

        # An account
        self.account = self.createAccount(TEST_ACCOUNTS, 0)

        # A record
        self.record = self.createRecord(TEST_RECORDS, 0)

        # An app
        self.app = self.createUserApp(TEST_USERAPPS, 0)

        # A couple test docs
        self.r_doc1 = self.createDocument(TEST_R_DOCS, 2, record=self.record)
        self.r_doc2 = self.createDocument(TEST_R_DOCS, 10, record=self.record)

        # save the settings we'll be squashing
        self.save_setting('VALIDATE_XML_SYNTAX')
        self.save_setting('VALIDATE_XML')

    def tearDown(self):
        
        # restore the settings
        self.restore_setting('VALIDATE_XML_SYNTAX')
        self.restore_setting('VALIDATE_XML')

        super(DocumentModelUnitTests, self).tearDown()
        
    @enable_transactions
    def test_construction(self):

        # Should be able to construct record-specific, app-specific,
        # and record-app-specific documents normally
        try:
            r_doc = self.createDocument(TEST_R_DOCS, 6, record=self.record)
            ra_doc = self.createDocument(TEST_RA_DOCS, 0, record=self.record)
            a_doc = self.createDocument(TEST_A_DOCS, 0, record=self.record)
        except IntegrityError:
            transaction.rollback()
            self.fail('Unable to construct documents with standard arguments')
        else:
            self.assertEqual(r_doc, Document.objects.get(pk=r_doc.pk))
            self.assertEqual(ra_doc, Document.objects.get(pk=ra_doc.pk))
            self.assertEqual(a_doc, Document.objects.get(pk=a_doc.pk))

        # Should be able to do the same with external ids
        try:
            re_doc = self.createDocument(TEST_R_DOCS, 0, record=self.record)
            rae_doc = self.createDocument(TEST_RA_DOCS, 1, record=self.record)
            ae_doc = self.createDocument(TEST_A_DOCS, 1, record=self.record)
        except IntegrityError:
            transaction.rollback()
            self.fail('Unable to construct documents with standard arguments and external_ids')
        else:
            self.assertEqual(re_doc, Document.objects.get(pk=re_doc.pk))
            self.assertEqual(rae_doc, Document.objects.get(pk=rae_doc.pk))
            self.assertEqual(ae_doc, Document.objects.get(pk=ae_doc.pk))

        # And with a binary payload
        try:
            b_doc = self.createDocument(TEST_R_DOCS, 1, record=self.record, mime_type='application/pdf')
        except IntegrityError:
            transaction.rollback()
            self.fail('Unable to construct binary document')
        else:
            self.assertEqual(b_doc, Document.objects.get(pk=b_doc.pk))
            self.assertEqual(b_doc.content, None)
            self.assertNotEqual(b_doc.content_file.name, None) # If name isn't none, then the file has been saved

        # But no two docs can have the same record and external id
        try:
            re_doc2 = self.createDocument(TEST_R_DOCS, 0, record=self.record, force_create=True)
        except IntegrityError:
            transaction.rollback()
        else:
            self.fail('Created 2 docs with the same record and external id')

    def test_prepare_external_id(self):
        valid_args = {('abc', self.app, False, True): '%s/%s'%(self.app.email, 'abc'),
                      ('bcd', self.app, True, True): '%s/INTERNAL/%s'%(self.app.email, 'bcd'),
                      ('cde', self.app, True, False): '%s/NORECORD/%s'%(self.app.email, 'cde'),
                      }
        
        invalid_args = {('def', None): ValueError,
                        ('efg', self.app, False, False): ValueError,
                        }

        # Make sure ids are generated properly
        for args, correct_id in valid_args.iteritems():
            self.assertEqual(Document.prepare_external_id(*args), correct_id)

        # Make sure invalid args throw errors
        for args, error in invalid_args.iteritems():
            self.assertRaises(error, Document.prepare_external_id, *args)

    def test_set_latest_info(self):
        # None of the latest attributes should be set 
        # (these are set only in memory when the doc is returned)
        self.assertFalse(hasattr(self.r_doc1, 'latest_id'))
        self.assertFalse(hasattr(self.r_doc1, 'latest_created_at'))
        self.assertFalse(hasattr(self.r_doc1, 'latest_creator_email'))

        # Set the info, assuming that we are the latest doc
        self.r_doc1.latest(self.r_doc1.id, self.r_doc1.created_at, self.r_doc1.creator.email)

        # All of the latest attributes should be set 
        self.assertTrue(hasattr(self.r_doc1, 'latest_id'))
        self.assertTrue(hasattr(self.r_doc1, 'latest_created_at'))
        self.assertTrue(hasattr(self.r_doc1, 'latest_creator_email'))
        self.assertEqual(self.r_doc1.latest_id, self.r_doc1.id)
        self.assertEqual(self.r_doc1.latest_created_at, self.r_doc1.created_at)
        self.assertEqual(self.r_doc1.latest_creator_email, self.r_doc1.creator.email)

        # Set the info, assuming that we've been replaced.
        self.r_doc1.latest(self.r_doc2.id, self.r_doc2.created_at, self.r_doc2.creator.email)

        # All of the latest attributes should be set 
        self.assertTrue(hasattr(self.r_doc1, 'latest_id'))
        self.assertTrue(hasattr(self.r_doc1, 'latest_created_at'))
        self.assertTrue(hasattr(self.r_doc1, 'latest_creator_email'))
        self.assertEqual(self.r_doc1.latest_id, self.r_doc2.id)
        self.assertEqual(self.r_doc1.latest_created_at, self.r_doc2.created_at)
        self.assertEqual(self.r_doc1.latest_creator_email, self.r_doc2.creator.email)


    def test_set_status(self):
        principal = self.account
        good_statuses = ['void', 'archived', 'active']
        bad_status = 'CRAZYSTATUS'
        reason = 'because I am awesome, and I want the doc status to be %s'

        status_objs = dict([(s.name, s) for s in StatusName.objects.all().iterator()])
        
        # status should start out active
        self.assertEqual(self.r_doc1.status, status_objs['active'])

        # change the status and make sure that everything is working
        for status in good_statuses:
            self.r_doc1.set_status(principal, status, reason%status)
            self.assertEqual(self.r_doc1.status, status_objs[status])
            
            try:
                dsh = DocumentStatusHistory.objects.get(document = self.r_doc1.id,
                                                        status = status_objs[status])
                self.assertEqual(dsh.record, self.r_doc1.record.id)
                self.assertEqual(dsh.status, self.r_doc1.status)
                self.assertEqual(dsh.reason, reason%status)
                self.assertEqual(dsh.proxied_by_principal, None)
                self.assertEqual(dsh.effective_principal, self.account.email)
            except DocumentStatusHistory.DoesNotExist:
                self.fail('DocumentStatusHistory object was not created properly')

        # Invalid status should fail
        self.assertRaises(StatusName.DoesNotExist, self.r_doc2.set_status, principal, bad_status, reason%bad_status)

        # And should not create status histories
        self.assertFalse(DocumentStatusHistory.objects.filter(document=self.r_doc2.id).exists())

    def test_replace(self):
        new_content = self.r_doc2.content
        new_mimetype = 'text/xml'
        new_digest = self.r_doc2.digest
        new_size = self.r_doc2.size
        new_type = self.r_doc2.fqn

        # Make sure we start out with the appropriate state
        self.assertNotEqual(self.r_doc1.content, new_content)
        self.assertNotEqual(self.r_doc1.mime_type, new_mimetype)
        self.assertNotEqual(self.r_doc1.digest, new_digest)
        self.assertNotEqual(self.r_doc1.size, new_size)
        self.assertNotEqual(self.r_doc1.fqn, new_type) # This is broken right now, need to fix doc typing

        # Replace the doc, make sure it worked
        self.r_doc1.replace(new_content, new_mimetype)
        self.assertEqual(self.r_doc1.content, new_content)
        self.assertEqual(self.r_doc1.mime_type, new_mimetype)
        self.assertEqual(self.r_doc1.digest, new_digest)
        self.assertEqual(self.r_doc1.size, new_size)
        self.assertEqual(self.r_doc1.fqn, new_type)

        # Replace the doc with bad XML, make sure it fails if validation is on
        malformed_xml = '<AwesomeTag>Stuff<WrongTag>'
        invalid_xml = TEST_REPORTS_INVALID[0]['content']

        settings.VALIDATE_XML_SYNTAX = True
        self.assertRaises(ValueError, self.r_doc1.replace, malformed_xml, new_mimetype)
        settings.VALIDATE_XML_SYNTAX = False

        try:
            self.r_doc1.replace(malformed_xml, new_mimetype)
        except ValueError:
            self.fail('Could not add malformed document even with validation off')

        settings.VALIDATE_XML = True
        self.assertRaises(ValueError, self.r_doc1.replace, invalid_xml, new_mimetype)
        settings.VALIDATE_XML = False

        try:
            self.r_doc1.replace(invalid_xml, new_mimetype)
        except ValueError:
            self.fail('Could not add invalid document even with validation off')

        # Set the doc to replaced, make sure replacing it fails
        self.r_doc1.replaced_by = self.r_doc2
        self.assertRaises(ValueError, self.r_doc1.replace, new_content, new_mimetype)

    def test_save(self):

        # Number of existing fobjs, as reference
        n_fobjs = Fact.objects.all().count()

        # Make sure saving an invalid doc throws an error and doesn't produce any f_objs
        malformed_xml = '<Allergy>Stuff<WrongTag>'
        invalid_xml = TEST_REPORTS_INVALID[0]['content']
        self.r_doc1.processed=False

        self.r_doc1.content = malformed_xml
        settings.VALIDATE_XML_SYNTAX = True
        self.assertRaises(ValueError, self.r_doc1.save)
        self.assertEqual(n_fobjs, Fact.objects.all().count())
        self.assertFalse(self.r_doc1.processed)

        self.r_doc1.content = invalid_xml
        settings.VALIDATE_XML = True
        self.assertRaises(ValueError, self.r_doc1.save)
        self.assertEqual(n_fobjs, Fact.objects.all().count())
        self.assertFalse(self.r_doc1.processed)
        settings.VALIDATE_XML = False
        try:
            self.r_doc1.save()
        except ValueError:
            self.fail('Could not process/save an invalid document, even with validation off')
        old_n_fobjs = n_fobjs
        n_fobjs = Fact.objects.all().count()
        self.assertNotEqual(old_n_fobjs, n_fobjs) # should have created an f_obj, even though invalid
        self.assertTrue(self.r_doc1.processed) # should have successfully processed, even though invalid

        # Make sure saving a valid doc works.
        self.r_doc1.content = TEST_REPORTS[0]['content']
        self.r_doc1.processed = False
        self.r_doc1.save()
        old_n_fobjs = n_fobjs
        n_fobjs = Fact.objects.all().count()
        self.assertNotEqual(old_n_fobjs, n_fobjs)
        self.assertTrue(self.r_doc1.processed)

        # Make sure re-saving a valid doc doesn't re-process it
        self.r_doc1.save()
        self.assertEqual(n_fobjs, Fact.objects.all().count())
        self.assertTrue(self.r_doc1.processed)

        # Make sure saving a doc that doesn't match our schemas works
        self.r_doc1.content = TEST_R_DOCS[2]['content']
        self.r_doc1.processed = False
        self.r_doc1.save()
        self.assertTrue(self.r_doc1.processed)
        self.assertEqual(n_fobjs, Fact.objects.all().count())

        # Make sure setting the external_id on this doc worked
        self.assertEqual(self.r_doc1.external_id, Document.objects.get(id=self.r_doc1.id).external_id)
        
        # Make sure it works on a doc without and external_id
        self.r_doc1.external_id = None
        self.r_doc1.save()
        self.assertEqual(self.r_doc1.external_id, self.r_doc1.id)

        # Make sure self.original has been set
        self.assertEqual(self.r_doc1.original, self.r_doc1)

########NEW FILE########
__FILENAME__ = documentrels
from indivo.tests.internal_tests import InternalTests, enable_transactions
from indivo.tests.data.record import TEST_RECORDS
from indivo.tests.data.document import TEST_R_DOCS
from indivo.models import DocumentRels, DocumentSchema

from django.db import IntegrityError, transaction

class DocumentRelsModelUnitTests(InternalTests):
    def setUp(self):
        super(DocumentRelsModelUnitTests, self).setUp()

        # A record
        self.record = self.createRecord(TEST_RECORDS, 0)

        # A couple test docs
        self.r_doc1 = self.createDocument(TEST_R_DOCS, 2, record=self.record)
        self.r_doc2 = self.createDocument(TEST_R_DOCS, 10, record=self.record)

        self.relationship = DocumentSchema.objects.get(type=DocumentSchema.expand_rel('annotation'))

    def tearDown(self):
        super(DocumentRelsModelUnitTests, self).tearDown()
        
    @enable_transactions
    def test_construction(self):

        # Should be able to construct normally
        try:
            self.relateDocs(self.r_doc1, self.r_doc2, self.relationship)
        except:
            self.fail('Unable to construct documentrels with standard arguments')

        # But not with missing arguments
        self.assertRaises(ValueError, DocumentRels, 
                          document_0=None, document_1=self.r_doc2, relationship=self.relationship)
        self.assertRaises(ValueError, DocumentRels, 
                          document_0=self.r_doc1, document_1=None, relationship=self.relationship)
        self.assertRaises(ValueError, DocumentRels,
                          document_0=self.r_doc1, document_1=self.r_doc2, relationship=None)

########NEW FILE########
__FILENAME__ = documentschema
from indivo.tests.internal_tests import InternalTests
from indivo.models import DocumentSchema

from django.db import IntegrityError, transaction

class DocumentSchemaModelUnitTests(InternalTests):
    def setUp(self):
        super(DocumentSchemaModelUnitTests, self).setUp()

        # An existing schema
        self.schema = DocumentSchema.objects.get(type=DocumentSchema.expand_rel('annotation'))

        self.internal_schema_name = 'new_internal_schema'
        self.external_schema_name = 'http://mysweetdomain.com/schemas#new_external_schema'

    def tearDown(self):
        super(DocumentSchemaModelUnitTests, self).tearDown()
        
    def test_construction(self):

        # Should be able to construct normally
        # Note: not testing the stylesheet attribute because this is highly broken
        try:
            ds = DocumentSchema(type=self.internal_schema_name, stylesheet=None, internal_p=False)
        except:
            self.fail('Unable to construct documentschema with standard arguments')

    def test_expand_rel(self):
        
        # should work on namespaced and internal rels
        self.assertEqual(DocumentSchema.expand_rel(self.internal_schema_name),
                         '%s%s'%(DocumentSchema.DEFAULT_REL_NAMESPACE, self.internal_schema_name))

        self.assertEqual(DocumentSchema.expand_rel(self.external_schema_name), self.external_schema_name)

    def test_uri(self):

        # Should always match type
        self.assertEqual(self.schema.uri, self.schema.type)

########NEW FILE########
__FILENAME__ = documentstatushistory
from indivo.tests.internal_tests import InternalTests
from indivo.models import DocumentStatusHistory, StatusName
from indivo.tests.data.account import TEST_ACCOUNTS
from indivo.tests.data.record import TEST_RECORDS
from indivo.tests.data.document import TEST_R_DOCS

class DocumentStatusHistoryModelUnitTests(InternalTests):
    def setUp(self):
        super(DocumentStatusHistoryModelUnitTests, self).setUp()

        # A status to set
        self.status = StatusName.objects.all()[0]
        
        # A record
        self.record = self.createRecord(TEST_RECORDS, 0)
        
        # A doc
        self.doc = self.createDocument(TEST_R_DOCS, 0, record=self.record)

        # A principal
        self.principal = self.createAccount(TEST_ACCOUNTS, 0)

    def tearDown(self):
        super(DocumentStatusHistoryModelUnitTests, self).tearDown()
        
    def test_construction(self):
        required_args = {
            'status':self.status,
            'reason':'The best reason there is',
            }
        optional_args = {
            'document':self.doc.id,
            'record':self.record.id,
            'proxied_by_principal': self.principal.email,
            'effective_principal':self.principal.email
            }

        # Should be able to construct with no optional args
        try:
            dsh = DocumentStatusHistory(**required_args)
        except:
            self.fail('Unable to construct documentstatushistory with standard arguments')

        # And with all args specified
        required_args.update(optional_args)
        try:
            dsh = DocumentStatusHistory(**required_args)
        except:
            self.fail('Unable to construct documentstatushistory with standard arguments')

########NEW FILE########
__FILENAME__ = fact
from indivo.tests.internal_tests import InternalTests
from indivo.models import Fact
from indivo.tests.data.record import TEST_RECORDS
from indivo.tests.data.document import TEST_R_DOCS
from indivo.fields import CodedValueField
from django.db import models

URI_PREFIX = "http://indivo.org/"

class FactModelUnitTests(InternalTests):
    def setUp(self):
        super(FactModelUnitTests, self).setUp()

        # A record
        self.record = self.createRecord(TEST_RECORDS, 0)
        
        # A doc
        self.doc = self.createDocument(TEST_R_DOCS, 0, record=self.record)

    def tearDown(self):
        super(FactModelUnitTests, self).tearDown()
        
    def test_construction(self):
        args = {
            'document':self.doc,
            'record':self.record,
            }

        # Should be able to construct normally
        try:
            f_obj = Fact(**args)
        except:
            self.fail('Unable to construct Fact with standard args')

        # id should have been created
        self.assertTrue(hasattr(f_obj, 'id'))
        
    def test_metaclass(self):
        fact_subclass_attrs = {
            '__module__': 'tmp.models',
            'not_coded': models.IntegerField(),
            'coded': CodedValueField(),
            }
        
        # generate a subclass of fact
        FactSubclass = type("FactSubclass", (Fact,), fact_subclass_attrs)

        # Since 'coded' was a CodedValueField, we should see three new fields on the subclass
        valid_fields = {
            'fact_ptr': models.OneToOneField, # pointer to the parent class
            'not_coded': models.IntegerField, # original integer field, preserved
            'coded_identifier': models.CharField, # New fields substituted for the DummyField
            'coded_title': models.CharField,
            'coded_system': models.CharField,
            }
        self.assertEqual(len(valid_fields.keys()), len(FactSubclass._meta.local_fields))
        for field in FactSubclass._meta.local_fields:
            self.assertTrue(valid_fields.has_key(field.name))
            self.assertTrue(isinstance(field, valid_fields[field.name]))

    def test_uri(self):
        args = {'record':self.record}
        instance = Fact(**args)
        instance.save() # because we'll need the fact to have an id
        
        # URI should have 'facts' in it by default
        self.assertEqual(instance.uri(), URI_PREFIX + "records/%s/facts/%s"%(self.record.id, instance.id))

        # But we can override it
        self.assertEqual(instance.uri('medications'), URI_PREFIX + "records/%s/medications/%s"%(self.record.id, instance.id))
                         

########NEW FILE########
__FILENAME__ = machineapp
from indivo.tests.internal_tests import InternalTests, enable_transactions
from indivo.models import MachineApp
from indivo.tests.data.record import TEST_RECORDS
from indivo.tests.data.app import TEST_ADMINAPPS, TEST_UIAPPS
from indivo.tests.data.app import TEST_ADMINAPP_MANIFESTS, TEST_UIAPP_MANIFESTS
from indivo.tests.data.account import TEST_ACCOUNTS

try:
    from django.utils import simplejson
except ImportError:
    try:
        import simplejson
    except ImportError:
        raise ImportError("Couldn't find an installation of SimpleJSON")

from django.db import IntegrityError, transaction

class MachineAppModelUnitTests(InternalTests):
    def setUp(self):
        super(MachineAppModelUnitTests, self).setUp()

        # A machineapp
        self.m_app = self.createMachineApp(TEST_ADMINAPPS, 0)
    
        # A UI app
        self.ui_app = self.createMachineApp(TEST_UIAPPS, 0)

        # An account
        self.account = self.createAccount(TEST_ACCOUNTS, 0)

        # A record
        self.record = self.createRecord(TEST_RECORDS, 0, owner=self.account)
        
    def tearDown(self):
        super(MachineAppModelUnitTests, self).tearDown()
     
    @enable_transactions
    def test_construction(self):

        # Should be able to construct normally, UI or Admin
        try:
            ma = self.createMachineApp(TEST_ADMINAPPS, 1)
        except:
            self.fail('Unable to construct AdminApp with standard args')
        else:
            self.assertEqual(ma, MachineApp.objects.get(pk=ma.pk))

        try:
            ma2 = self.createMachineApp(TEST_UIAPPS, 1)
        except:
            self.fail('Unable to construct UIApp with standard args')
        else:
            sid = transaction.savepoint()
            self.assertEqual(ma2, MachineApp.objects.get(pk=ma2.pk))

        # Should not be able to construct two apps with same email
        try:
            ma3 = self.createMachineApp(TEST_ADMINAPPS, 1, force_create=True)
        except:
            transaction.savepoint_rollback(sid)
        else:
            self.fail('Constructed two AdminApps with the same email')

        # Even if they are different app types
        try:
            overrides = {'app_type':'chrome'}
            ma4 = self.createMachineApp(TEST_ADMINAPPS, 1, force_create=True, **overrides)
        except:
            transaction.rollback()
        else:
            self.fail('Constructed an AdminApp and a ChromeApp with the same email')

    def test_accesscontrol(self):
        
        # test isType
        self.assertTrue(self.m_app.isType('admin'))
        self.assertFalse(self.m_app.isType('chrome'))
        self.assertTrue(self.m_app.isType('MachineApp'))
        
        self.assertTrue(self.ui_app.isType('chrome'))
        self.assertFalse(self.ui_app.isType('admin'))
        self.assertTrue(self.ui_app.isType('MachineApp'))

        # test createdAccount
        self.account.creator = self.m_app
        self.assertTrue(self.m_app.createdAccount(self.account))
        self.assertFalse(self.ui_app.createdAccount(self.account))

        # test createdRecord
        self.record.creator = self.ui_app
        self.assertTrue(self.ui_app.createdRecord(self.record))
        self.assertFalse(self.m_app.createdRecord(self.record))

    def test_from_manifest(self):
        all_manifests = TEST_ADMINAPP_MANIFESTS + TEST_UIAPP_MANIFESTS

        # test that save=False works
        for manifest, credentials in all_manifests:
            num_phas = MachineApp.objects.count()
            app = MachineApp.from_manifest(manifest, credentials, save=False)
            self.assertEqual(num_phas, MachineApp.objects.count())
                        
        # Should work with admin apps
        for manifest, credentials in TEST_ADMINAPP_MANIFESTS:
            parsed_m, parsed_c, app = self.buildAppFromManifest(MachineApp, manifest, credentials)
            self.assertValidAdminAppManifest(parsed_m, parsed_c, app, ui=False)

        # Or with UI apps
        for manifest, credentials in TEST_UIAPP_MANIFESTS:
            parsed_m, parsed_c, app = self.buildAppFromManifest(MachineApp, manifest, credentials)
            self.assertValidAdminAppManifest(parsed_m, parsed_c, app, ui=True)

    def test_to_manifest(self):
        for manifest, credentials in TEST_ADMINAPP_MANIFESTS + TEST_UIAPP_MANIFESTS:
            app = MachineApp.from_manifest(manifest, credentials, save=False)
            parsed_m = simplejson.loads(manifest)
            reparsed_m = simplejson.loads(app.to_manifest())

            # The reparsed manifest should contain AT LEAST as much info as the original
            for k, v in parsed_m.iteritems():
                self.assertEqual(v, reparsed_m.get(k, None))

    def buildAppFromManifest(self, model_cls, manifest, credentials):
        parsed_m = simplejson.loads(manifest)
        parsed_c = simplejson.loads(credentials)
        num_apps = model_cls.objects.count()
        app = model_cls.from_manifest(manifest, credentials)
        self.assertEqual(num_apps + 1, model_cls.objects.count())
        return (parsed_m, parsed_c, app)

    def assertValidAdminAppManifest(self, parsed_m, parsed_c, app, ui=True):
        self.assertEqual(parsed_c['consumer_key'], app.consumer_key)
        self.assertEqual(parsed_c['consumer_secret'], app.secret)
        self.assertEqual(parsed_m['name'], app.name)
        self.assertEqual(parsed_m['id'], app.email)
        app_type = 'chrome' if ui else 'admin'
        self.assertEqual(app_type, app.app_type)
        self.assertEqual(parsed_m.get('description', ''), app.description)
        self.assertEqual(parsed_m.get('author', ''), app.author)
        self.assertEqual(parsed_m.get('version', ''), app.version)


########NEW FILE########
__FILENAME__ = message
from indivo.tests.internal_tests import InternalTests, enable_transactions
from indivo.models import MessageAttachment, Message
from indivo.tests.data.app import TEST_USERAPPS
from indivo.tests.data.record import TEST_RECORDS
from indivo.tests.data.message import TEST_MESSAGES, TEST_ATTACHMENTS
from indivo.tests.data.account import TEST_ACCOUNTS

from django.db import IntegrityError, transaction

class MessageModelUnitTests(InternalTests):
    def setUp(self):
        super(MessageModelUnitTests, self).setUp()
    
        # A recipient account
        self.account = self.createAccount(TEST_ACCOUNTS, 0)

        # A sender app
        self.app = self.createUserApp(TEST_USERAPPS, 0)

        # A record, owned by the recipient account
        self.record = self.createRecord(TEST_RECORDS, 0, owner=self.account)
        
        # A Message, sent by the sender app to the recipient account about the record
        self.message = self.createMessage(TEST_MESSAGES, 3, sender=self.app,
                                          account=self.account, about_record=self.record, recipient=self.account)

        # An attachment for the message
        self.attachment = self.createAttachment(TEST_ATTACHMENTS, 1, message=self.message)
        
    def tearDown(self):
        super(MessageModelUnitTests, self).tearDown()
     
    @enable_transactions
    def test_construction(self):

        # Should be able to construct normally
        try:
            m = self.createMessage(TEST_MESSAGES, 0)
        except:
            self.fail('Unable to construct message with standard args')
        else:
            self.assertEqual(m, Message.objects.get(pk=m.pk))

        # Should not be able to violate unique constraint (identical account, external_id, sender)
        try:
            m = self.createMessage(TEST_MESSAGES, 0, force_create=True)
        except IntegrityError:
            transaction.rollback()
        else:
            self.fail('Constructed a message attachment with no message')

        # Should not be able to construct without a sender or recipient
        try:
            m = self.createMessage(TEST_MESSAGES, 0, force_create=True, sender=None)
        except ValueError:
            pass
        else:
            self.fail('Constructed a message with no sender')

        try:
            m = self.createMessage(TEST_MESSAGES, 0, force_create=True, recipient=None)
        except ValueError:
            pass
        else:
            self.fail('Constructed a message with no recipient')

    def test_ready(self):

        # The message we created had all one of its attachments, it should be ready
        self.assertTrue(self.message.ready)

        # Let's take away the attachment
        self.attachment.delete()
        self.assertFalse(self.message.ready)

    @enable_transactions
    def test_add_attachment(self):
        
        # Let's take away our attachment
        self.attachment.delete()

        # And add it back
        attachment = self.message.add_attachment(self.attachment.attachment_num, self.attachment.content)

        self.assertTrue(self.message.ready)
        self.assertEqual(attachment.message, self.message)
        self.assertEqual(attachment.content, self.attachment.content)
        self.assertEqual(attachment.size, self.attachment.size)
        self.assertEqual(attachment.type, self.attachment.type)
        self.assertEqual(attachment.attachment_num, self.attachment.attachment_num)

        # Shouldn't work with a bad attachment number
        self.assertRaises(Exception, self.message.add_attachment, 
                          self.attachment.attachment_num+1, self.attachment.content)

        # Shouldn't work twice
        try:
            self.message.add_attachment(self.attachment.attachment_num, self.attachment.content)
        except IntegrityError:
            transaction.rollback()
        else:
            self.fail('Added two attachments to the same slot')


    def test_get_attachment(self):
        
        # get our attachment
        attachment = self.message.get_attachment(self.attachment.attachment_num)
        
        self.assertEqual(attachment.message, self.message)
        self.assertEqual(attachment.content, self.attachment.content)
        self.assertEqual(attachment.size, self.attachment.size)
        self.assertEqual(attachment.type, self.attachment.type)
        self.assertEqual(attachment.attachment_num, self.attachment.attachment_num)

        # fail to get some crazy-numbered attachments
        self.assertRaises(MessageAttachment.DoesNotExist, self.message.get_attachment, -30)
        self.assertRaises(MessageAttachment.DoesNotExist, self.message.get_attachment, 50)
        self.assertRaises(MessageAttachment.DoesNotExist, self.message.get_attachment, 0)
        self.assertRaises(MessageAttachment.DoesNotExist, self.message.get_attachment,
                          self.attachment.attachment_num+1)

########NEW FILE########
__FILENAME__ = messageattachment
from indivo.tests.internal_tests import InternalTests, enable_transactions
from indivo.models import MessageAttachment, Fact
from indivo.tests.data.record import TEST_RECORDS
from indivo.tests.data.message import TEST_MESSAGES, TEST_ATTACHMENTS
from indivo.tests.data.account import TEST_ACCOUNTS

from django.db import IntegrityError, transaction

class MessageAttachmentModelUnitTests(InternalTests):
    def setUp(self):
        super(MessageAttachmentModelUnitTests, self).setUp()
    
        # An account
        self.account = self.createAccount(TEST_ACCOUNTS, 0)

        # A record
        self.record = self.createRecord(TEST_RECORDS, 0, owner=self.account)
        
        # A Message
        self.message = self.createMessage(TEST_MESSAGES, 3, about_record=self.record, recipient=self.account)

        # An attachment
        self.attachment = self.createAttachment(TEST_ATTACHMENTS, 1, message=self.message)
        
    def tearDown(self):
        super(MessageAttachmentModelUnitTests, self).tearDown()
     
    @enable_transactions
    def test_construction(self):

        # Should be able to construct normally
        try:
            ma = self.createAttachment(TEST_ATTACHMENTS, 0)
        except:
            self.fail('Unable to construct message attachment with standard args')
        else:
            self.assertEqual(ma, MessageAttachment.objects.get(pk=ma.pk))

        # Should not be able to construct without a message
        try:
            ma2 = self.createAttachment(TEST_ATTACHMENTS, 0, force_create=True, message=None)
        except:
            transaction.rollback()
        else:
            self.fail('Constructed a message attachment with no message')

    def test_save_as_document(self):
        
        # expected state
        self.assertFalse(self.attachment.saved)
        n_fobjs = Fact.objects.all().count()

        # save the attachment
        self.attachment.save_as_document(self.account)
        
        self.assertTrue(self.attachment.saved)
        self.assertEqual(self.attachment.content, self.attachment.saved_to_document.content)
        self.assertNotEqual(n_fobjs, Fact.objects.all().count()) # doc should have been processed, creating a fact
        self.assertEqual(self.attachment.type, self.attachment.saved_to_document.fqn)
        self.assertEqual(self.attachment.size, self.attachment.saved_to_document.size)
        self.assertEqual(self.attachment.saved_to_document.external_id, 
                         'SAVED_ATTACHMENT_%s_%s'%(self.attachment.message.external_identifier, 
                                                   self.attachment.attachment_num))

        # Try to resave: expect failure
        self.assertRaises(Exception, self.attachment.save_as_document, self.account)
        
        # Try to save to no record: expect failure
        self.attachment.message.about_record = None
        self.attachment.saved_to_document = None
        self.assertRaises(Exception, self.attachment.save_as_document, self.account)

########NEW FILE########
__FILENAME__ = notification
from indivo.tests.internal_tests import InternalTests
from indivo.models import Notification
from indivo.tests.data.app import TEST_USERAPPS
from indivo.tests.data.record import TEST_RECORDS
from indivo.tests.data.document import TEST_R_DOCS
from indivo.tests.data.account import TEST_ACCOUNTS

class NotificationModelUnitTests(InternalTests):
    def setUp(self):
        super(NotificationModelUnitTests, self).setUp()
    
        # A recipient account
        self.account = self.createAccount(TEST_ACCOUNTS, 0)

        # A sender app
        self.app = self.createUserApp(TEST_USERAPPS, 0)

        # A record, owned by the recipient account
        self.record = self.createRecord(TEST_RECORDS, 0, owner=self.account)
        
        # A document, owned by the record
        self.doc = self.createDocument(TEST_R_DOCS, 0, record=self.record)
                
    def tearDown(self):
        super(NotificationModelUnitTests, self).tearDown()
     
    def test_construction(self):
        args = {
            'account':self.account,
            'sender':self.app,
            'content':'Consider Yourself Notified',
            }
        optional_args = {
            'record':self.record,
            'document':self.doc,
            'app_url':self.app.start_url_template,
            }

        # Should be able to construct normally, with or without optional args
        try:
            n = Notification.objects.create(**args)
        except:
            self.fail('Unable to construct notification without optional args')
        else:
            self.assertEqual(n, Notification.objects.get(pk=n.pk))

        args.update(optional_args)
        try:
            n = Notification.objects.create(**args)
        except:
            self.fail('Unable to construct notification with standard args')
        else:
            self.assertEqual(n, Notification.objects.get(pk=n.pk))

        # Should not be able to construct without a sender or recipient
        try:
            args['sender'] = None
            n = Notification.objects.create(**args)
        except ValueError:
            args['sender'] = self.app
            pass
        else:
            self.fail('Constructed a notification with no sender')

        try:
            args['account'] = None
            n = Notification.objects.create(**args)
        except ValueError:
            pass
        else:
            self.fail('Constructed a notification with no recipient account')

########NEW FILE########
__FILENAME__ = pha
from indivo.tests.internal_tests import InternalTests, enable_transactions
from indivo.models import PHA
from indivo.tests.data.record import TEST_RECORDS
from indivo.tests.data.app import TEST_USERAPPS, TEST_AUTONOMOUS_APPS
from indivo.tests.data.app import TEST_SMART_MANIFESTS, TEST_USERAPP_MANIFESTS 
from indivo.tests.data.account import TEST_ACCOUNTS

try:
    from django.utils import simplejson
except ImportError:
    try:
        import simplejson
    except ImportError:
        raise ImportError("Couldn't find an installation of SimpleJSON")

from django.db import IntegrityError, transaction

class PHAModelUnitTests(InternalTests):
    def setUp(self):
        super(PHAModelUnitTests, self).setUp()

        # A userapp
        self.app = self.createUserApp(TEST_USERAPPS, 0)

        # An account
        self.account = self.createAccount(TEST_ACCOUNTS, 0)

        # A record, and one of its builtin carenets
        self.record = self.createRecord(TEST_RECORDS, 0, owner=self.account)
        self.carenet = self.record.carenet_set.all()[0]
        
    def tearDown(self):
        super(PHAModelUnitTests, self).tearDown()
     
    @enable_transactions
    def test_construction(self):

        # Should be able to construct normally, autonomous or not
        try:
            a = self.createUserApp(TEST_USERAPPS, 1)
        except:
            self.fail('Unable to construct UserApp with standard args')
        else:
            self.assertEqual(a, PHA.objects.get(pk=a.pk))

        try:
            a2 = self.createUserApp(TEST_AUTONOMOUS_APPS, 0)
        except:
            self.fail('Unable to construct Autonomous UserApp with standard args')
        else:
            sid = transaction.savepoint()
            self.assertEqual(a2, PHA.objects.get(pk=a2.pk))

        # Should not be able to construct two apps with same email
        try:
            a3 = self.createUserApp(TEST_USERAPPS, 1, force_create=True)
        except:
            transaction.savepoint_rollback(sid)
        else:
            self.fail('Constructed two UserApps with the same email')

        # Even if one is autonomous
        try:
            overrides = {'is_autonomous':True}
            a4 = self.createUserApp(TEST_USERAPPS, 1, force_create=True, **overrides)
        except:
            transaction.rollback()
        else:
            self.fail('Constructed a UserApp and an AutonomousUserApp with the same email')

    def test_accesscontrol(self):
        
        # test isInCarenet
        self.assertFalse(self.app.isInCarenet(self.carenet))
        
        # add it to the carenet
        self.addAppToCarenet(self.app, self.carenet)
        
        # re-assert
        self.assertTrue(self.app.isInCarenet(self.carenet))

    def test_from_manifest(self):    
        all_manifests = TEST_SMART_MANIFESTS + TEST_USERAPP_MANIFESTS
        
        # test that save=False works
        for manifest, credentials in all_manifests:
            num_phas = PHA.objects.count()
            app = PHA.from_manifest(manifest, credentials, save=False)
            self.assertEqual(num_phas, PHA.objects.count())
            
        # should work with a SMART manifest
        for manifest, credentials in TEST_SMART_MANIFESTS:
            parsed_m, parsed_c, app = self.buildAppFromManifest(PHA, manifest, credentials)
            self.assertValidUserAppManifest(parsed_m, parsed_c, app)

        # Or with Indivo-specific manifest extensions
        for manifest, credentials in TEST_USERAPP_MANIFESTS:
            parsed_m, parsed_c, app = self.buildAppFromManifest(PHA, manifest, credentials)
            self.assertValidUserAppManifest(parsed_m, parsed_c, app)

    def test_to_manifest(self):
        for manifest, credentials in TEST_SMART_MANIFESTS:
            app = PHA.from_manifest(manifest, credentials, save=False)
            parsed_m = simplejson.loads(manifest)
            reparsed_m = simplejson.loads(app.to_manifest(smart_only=True))

            # The reparsed manifest should contain AT LEAST as much info as the original
            for k, v in parsed_m.iteritems():
                
                # URIs might have been expanded if they were relative
                if k in ['index', 'oauth_callback_url', 'icon']:
                    self.assertTrue(reparsed_m.get(k, None).endswith(v))
                else:
                    self.assertEqual(v, reparsed_m.get(k, None))

        for manifest, credentials in TEST_USERAPP_MANIFESTS:
            app = PHA.from_manifest(manifest, credentials, save=False)
            parsed_m = simplejson.loads(manifest)
            reparsed_m = simplejson.loads(app.to_manifest())

            # The reparsed manifest should contain AT LEAST as much info as the original
            for k, v in parsed_m.iteritems():

                # URIs might have been expanded if they were relative
                if k in ['index', 'oauth_callback_url', 'icon']:
                    self.assertTrue(reparsed_m.get(k, None).endswith(v))
                else:
                    self.assertEqual(v, reparsed_m.get(k, None))
            
    def buildAppFromManifest(self, model_cls, manifest, credentials):
        parsed_m = simplejson.loads(manifest)
        parsed_c = simplejson.loads(credentials)
        num_apps = model_cls.objects.count()
        app = model_cls.from_manifest(manifest, credentials)
        self.assertEqual(num_apps + 1, model_cls.objects.count())
        return (parsed_m, parsed_c, app)
    
    def assertValidUserAppManifest(self, parsed_m, parsed_c, app):
        self.assertEqual(parsed_c['consumer_key'], app.consumer_key)
        self.assertEqual(parsed_c['consumer_secret'], app.secret)
        self.assertEqual(parsed_m['name'], app.name)
        self.assertEqual(parsed_m['id'], app.email)
        self.assertTrue(app.start_url_template.endswith(parsed_m.get('index', ''))) # Might have been expanded if it was a relative URI
        self.assertTrue(app.callback_url.endswith(parsed_m.get('oauth_callback_url',''))) # SMART apps won't define this
        autonomous_p = parsed_m.get('mode', '') == 'background'
        self.assertEqual(autonomous_p, app.is_autonomous)
        self.assertEqual(parsed_m.get('autonomous_reason', ''), app.autonomous_reason) # SMART apps won't define this
        has_ui_p = parsed_m['has_ui'] if parsed_m.has_key('has_ui') else parsed_m.has_key('index')
        self.assertEqual(has_ui_p, app.has_ui)
        frameable_p = parsed_m['frameable'] if parsed_m.has_key('frameable') else parsed_m.has_key('index')
        self.assertEqual(frameable_p, app.frameable)
        self.assertEqual(parsed_m.get('description', ''), app.description)
        self.assertEqual(parsed_m.get('author', ''), app.author)
        self.assertEqual(parsed_m.get('version', ''), app.version)
        self.assertTrue(app.icon_url.endswith(parsed_m.get('icon', ''))) # Might have been expanded if it was a relative URI
        self.assertEqual(parsed_m.get('requires', {}), simplejson.loads(app.requirements))

########NEW FILE########
__FILENAME__ = phashare
from indivo.tests.internal_tests import enable_transactions
from base import TokenModelUnitTests
from indivo.tests.data.record import TEST_RECORDS
from indivo.tests.data.account import TEST_ACCOUNTS
from indivo.tests.data.app import TEST_USERAPPS, TEST_AUTONOMOUS_APPS
from indivo.models import PHAShare
from django.db import IntegrityError, transaction

class PHAShareModelUnitTests(TokenModelUnitTests):
    def setUp(self):
        super(PHAShareModelUnitTests, self).setUp()

        # An account
        self.account = self.createAccount(TEST_ACCOUNTS, 0)

        # A record for the account, and one of its default carenets
        self.record = self.createRecord(TEST_RECORDS, 0, owner=self.account)
        self.carenet = self.record.carenet_set.all()[0]

        # An account to grant access to
        self.with_account = self.createAccount(TEST_ACCOUNTS, 1)
        
        # A record w/ carenet for the with_account, not shared
        self.with_record = self.createRecord(TEST_RECORDS, 1, owner=self.with_account)
        self.with_carenet = self.with_record.carenet_set.all()[0]

        # A recipient app
        self.with_pha = self.createUserApp(TEST_USERAPPS, 0)

        # A recipient autonomous app
        self.a_with_pha = self.createUserApp(TEST_AUTONOMOUS_APPS, 0)
        
    def tearDown(self):
        super(PHAShareModelUnitTests, self).tearDown()

    @enable_transactions
    def test_construction(self):

        # Should construct normally, with or without carenets
        args = {'record': self.record,
                'with_pha': self.with_pha,
                'carenet': self.carenet
                }
        try:
            ps = PHAShare.objects.create(**args)
        except IntegrityError:
            transaction.rollback()
            self.fail('Could not construct pha share')
        except:
            self.fail('Could not construct pha share')
        else:
            self.assertEqual(ps, PHAShare.objects.get(pk=ps.pk))

        args['with_pha'] = self.a_with_pha
        args['carenet'] = None
        try:
            ps = PHAShare.objects.create(**args)
        except IntegrityError:
            transaction.rollback()
            self.fail('Could not construct pha share with a carenet')
        except:
            self.fail('Could not construct pha share with a carenet')
        else:
            self.assertEqual(ps, PHAShare.objects.get(pk=ps.pk))

        # Should break if the same record is shared twice with the same app
        try:
            ps = PHAShare.objects.create(**args)
        except IntegrityError:
            transaction.rollback()
        else:
            self.fail('Shared a record with the same pha twice')
        
    def test_new_access_token(self):

        # Share our non-autonomous pha
        pha_share = self.addAppToRecord(self.record, self.with_pha)

        # build an access token for a foreign account to access the app
        token, secret = self.generate_token_and_secret()
        at = pha_share.new_access_token(token, secret, account=self.with_account)
        self.assertEqual(at.token, token)
        self.assertEqual(at.token_secret, secret)
        self.assertEqual(at.share, pha_share)
        self.assertEqual(at.carenet, None)
        self.assertNotEqual(at.expires_at, None)
        self.assertEqual(at.account, self.with_account)

        # build one for the foreign account to access the app in a carenet
        token, secret = self.generate_token_and_secret()
        at = pha_share.new_access_token(token, secret, account=self.with_account, carenet=self.carenet)
        self.assertEqual(at.token, token)
        self.assertEqual(at.token_secret, secret)
        self.assertEqual(at.share, pha_share)
        self.assertEqual(at.carenet, self.carenet)
        self.assertNotEqual(at.expires_at, None)
        self.assertEqual(at.account, self.with_account)

        # try to build one for the foreign account to access the app in an unrelated carenet
        token, secret = self.generate_token_and_secret()
        self.assertRaises(Exception, pha_share.new_access_token, token, secret, account=self.with_account,
                          carenet=self.with_carenet)

        # build one for the record owner to access the app
        token, secret = self.generate_token_and_secret()
        at = pha_share.new_access_token(token, secret, account=self.account)
        self.assertEqual(at.token, token)
        self.assertEqual(at.token_secret, secret)
        self.assertEqual(at.share, pha_share)
        self.assertEqual(at.carenet, None)
        self.assertNotEqual(at.expires_at, None)
        self.assertEqual(at.account, self.account)

        # build one without an account, as if we were priming the record with the app
        token, secret = self.generate_token_and_secret()
        at = pha_share.new_access_token(token, secret)
        self.assertEqual(at.token, token)
        self.assertEqual(at.token_secret, secret)
        self.assertEqual(at.share, pha_share)
        self.assertEqual(at.carenet, None)
        self.assertNotEqual(at.expires_at, None)
        self.assertEqual(at.account, None)

        # Now share our autonomous app
        pha_share = self.addAppToRecord(self.record, self.a_with_pha)        

        # try to build an access token for a foreign account to access the app
        token, secret = self.generate_token_and_secret()
        self.assertRaises(Exception, pha_share.new_access_token, token, secret, account=self.with_account)

        # Now give the account a full share of the record, and the previous call should work
        self.shareRecordFull(self.record, self.with_account)
        at = pha_share.new_access_token(token, secret, account=self.with_account)
        self.assertEqual(at.token, token)
        self.assertEqual(at.token_secret, secret)
        self.assertEqual(at.share, pha_share)
        self.assertEqual(at.carenet, None)
        self.assertEqual(at.expires_at, None)
        self.assertEqual(at.account, None) # Accounts don't make it into autonomous app Access Tokens

        # try to build an access token for the foreign account to access the app in a carenet
        token, secret = self.generate_token_and_secret()
        self.assertRaises(Exception, pha_share.new_access_token, token, secret, account=self.with_account, 
                          carenet=self.carenet)

        # build one for the record owner to access the app
        token, secret = self.generate_token_and_secret()
        at = pha_share.new_access_token(token, secret, account=self.account)
        self.assertEqual(at.token, token)
        self.assertEqual(at.token_secret, secret)
        self.assertEqual(at.share, pha_share)
        self.assertEqual(at.carenet, None)
        self.assertEqual(at.expires_at, None)
        self.assertEqual(at.account, None) # Accounts don't make it into autonomous app Access Tokens

        # build one without an account, as if we were priming the record with the app
        token, secret = self.generate_token_and_secret()
        at = pha_share.new_access_token(token, secret)
        self.assertEqual(at.token, token)
        self.assertEqual(at.token_secret, secret)
        self.assertEqual(at.share, pha_share)
        self.assertEqual(at.carenet, None)
        self.assertEqual(at.expires_at, None)
        self.assertEqual(at.account, None)

########NEW FILE########
__FILENAME__ = record
from indivo.tests.internal_tests import InternalTests, enable_transactions
from indivo.tests.data.account import TEST_ACCOUNTS
from indivo.tests.data.record import TEST_RECORDS
from indivo.tests.data.app import TEST_USERAPPS
from indivo.tests.data.message import TEST_MESSAGES
from indivo.models import Record, Carenet, Notification, Message, RecordNotificationRoute
from django.db import IntegrityError, transaction
from django.conf import settings

import copy

class RecordModelUnitTests(InternalTests):
    def setUp(self):
        super(RecordModelUnitTests,self).setUp()
        
        # An Account
        self.account = self.createAccount(TEST_ACCOUNTS, 1)
        
        # A record for that account
        self.record = self.createRecord(TEST_RECORDS, 1, owner=self.account)

        # An account, full-shared with our record
        self.s_account = self.createAccount(TEST_ACCOUNTS, 2)
        self.shareRecordFull(self.record, self.s_account)

        # An account, shared with nobody
        self.u_account = self.createAccount(TEST_ACCOUNTS, 3)

        # An app, shared with us
        self.app = self.createUserApp(TEST_USERAPPS, 0)
        self.addAppToRecord(self.record, self.app)

        # An app that isn't shared
        self.u_app = self.createUserApp(TEST_USERAPPS, 1)

        # Notification routes for our shared accounts
        self.rnrs = []
        self.rnrs.append(RecordNotificationRoute.objects.create(record=self.record, account=self.account))
        self.rnrs.append(RecordNotificationRoute.objects.create(record=self.record, account=self.s_account))

        # A message we've received
        self.msg = self.createMessage(TEST_MESSAGES, 0, about_record=self.record)

    def tearDown(self):
        super(RecordModelUnitTests,self).tearDown()

    # Not calling self.createRecord here, since that calls record.create_default_carenets, which is
    # transaction-managed. This is why we have to be very careful with the @enable_transactions
    # decorator.
    @enable_transactions
    def test_construction(self):
        
        # should save normally with proper data, external_id or no
        try:
            args = {'label':'empty_record',
                    'owner':self.account,
                    }
            r = Record.objects.create(**args)
        except IntegrityError:
            transaction.rollback()
            self.fail('Could not create record with standard args')
        else:
            self.assertEqual(r, Record.objects.get(pk=r.pk))

        try:

            args = {'label':'test_record_extid',
                    'owner':self.account,
                    'external_id':Record.prepare_external_id('RECORD5_EXTID',self.account.email),
                    }
            r = Record.objects.create(**args)
        except IntegrityError:
            transaction.rollback()
            self.fail('Could not create record with external id')
        else:
            self.assertEqual(r, Record.objects.get(pk=r.pk))

    def test_prepare_external_id(self):
        local_id = 'TEST_ID'
        principal_email = 'a@b.com'

        self.assertEqual(Record.prepare_external_id(local_id, principal_email), '%s/%s'%(principal_email, local_id))
        self.assertEqual(Record.prepare_external_id(None, principal_email), None)

    def test_can_admin(self):
        self.assertTrue(self.record.can_admin(self.account))
        self.assertTrue(self.record.can_admin(self.s_account))
        self.assertFalse(self.record.can_admin(self.u_account))

    def test_phas(self):
        self.assertEqual(self.record.phas, [self.app])

    def test_has_pha(self):
        self.assertTrue(self.record.has_pha(self.app))
        self.assertFalse(self.record.has_pha(self.u_app))

    def test_get_accounts_to_notify(self):
        self.assertEqual(set(self.record.get_accounts_to_notify()), set([self.account, self.s_account]))

    def test_get_messages(self):
        self.assertEqual(list(self.record.get_messages()), [self.msg])

    def test_send_message(self):
        self.record.send_message('msg_ext_id', self.app, 'subj', 'body', severity='high')

        # Make sure the right people got notified
        for account in [rnr.account for rnr in self.rnrs]:
            self.assertTrue(Message.objects.filter(sender=self.app,
                                                    about_record=self.record, 
                                                    account=account).exists())

        self.assertFalse(Message.objects.filter(sender=self.app, 
                                                about_record=self.record, 
                                                account=self.u_account).exists())
        

    def test_notify(self):
        self.record.notify(self.app, 'Notify This!', app_url=self.app.callback_url)
        
        # and without optional params
        self.record.notify(self.app, 'Notify This Twice!')

        # Make sure the right people got notified
        for account in [rnr.account for rnr in self.rnrs]:
            self.assertEqual(Notification.objects.filter(record=self.record, account=account).count(), 2)

        self.assertEqual(Notification.objects.filter(record=self.record, account=self.u_account).count(), 0)

    def test_create_default_carenets(self):
        
        # Eliminate all of our default carenets
        Carenet.objects.filter(record=self.record).delete()

        self.assertEqual(Carenet.objects.filter(record=self.record).count(), 0)

        # And recreate them
        self.record.create_default_carenets()

        self.assertEqual(Carenet.objects.filter(record=self.record).count(), len(settings.INDIVO_DEFAULT_CARENETS))
        for name in settings.INDIVO_DEFAULT_CARENETS:
            self.assertTrue(Carenet.objects.filter(record=self.record, name=name).exists())

    def test_carenet_alias_id(self):
        self.assertEqual(self.record.carenet_alias_id, self.record.id)

########NEW FILE########
__FILENAME__ = recordnotificationroute
from indivo.tests.internal_tests import InternalTests, enable_transactions
from indivo.tests.data.account import TEST_ACCOUNTS
from indivo.tests.data.record import TEST_RECORDS
from indivo.models import RecordNotificationRoute
from django.db import IntegrityError, transaction

class RecordNotificationRouteModelUnitTests(InternalTests):
    def setUp(self):
        super(RecordNotificationRouteModelUnitTests,self).setUp()
        
        # An account
        self.account = self.createAccount(TEST_ACCOUNTS, 1)
        
        # A record for that account
        self.record = self.createRecord(TEST_RECORDS, 1, owner=self.account)

        # A notifiable account
        self.n_account = self.createAccount(TEST_ACCOUNTS, 2)

        # And its record
        self.n_record = self.createRecord(TEST_RECORDS, 1, owner=self.n_account)

    def tearDown(self):
        super(RecordNotificationRouteModelUnitTests,self).tearDown()

    @enable_transactions
    def test_construction(self):
        
        # should construct normally
        args = {'record':self.n_record,
                'account':self.account}
        try:
            rnr = RecordNotificationRoute.objects.create(**args)
        except IntegrityError:
            transaction.rollback()
            self.fail('Could not create RecordNotificationRoute normally')
        else:
            self.assertEqual(rnr, RecordNotificationRoute.objects.get(pk=rnr.pk))
        
        # should fail without a record or an account
        args['record'] = None
        self.assertRaises(ValueError, RecordNotificationRoute.objects.create, **args)
        
        args['account'] = None
        args['record'] = self.n_record
        self.assertRaises(ValueError, RecordNotificationRoute.objects.create, **args)
 
        # should fail on an attempt to create two notification routes from a single record to the same account
        args['account'] = self.account
        try:
            rnr = RecordNotificationRoute.objects.create(**args)
        except IntegrityError:
            transaction.rollback()
        else:
            self.fail('Created two RecordNotificationRoutes between the same record and account')

########NEW FILE########
__FILENAME__ = reqtoken
from indivo.tests.internal_tests import enable_transactions
from base import TokenModelUnitTests
from indivo.tests.data.account import TEST_ACCOUNTS
from indivo.tests.data.record import TEST_RECORDS
from indivo.tests.data.app import TEST_USERAPPS
from indivo.models import ReqToken
from django.db import IntegrityError, transaction

import datetime

class ReqTokenModelUnitTests(TokenModelUnitTests):
    def setUp(self):
        super(ReqTokenModelUnitTests,self).setUp()
        
        # An account
        self.account = self.createAccount(TEST_ACCOUNTS, 1)
        
        # A record for that account
        self.record = self.createRecord(TEST_RECORDS, 1, owner=self.account)

        # An app
        self.app = self.createUserApp(TEST_USERAPPS, 0)

        # default args for constructing a token
        token, secret = self.generate_token_and_secret()
        self.args = {
            'token':token,
            'token_secret':secret,
            'verifier': self.generate_random_string(),
            'oauth_callback': self.app.callback_url,
            'pha': self.app,
            'record':self.record,
            'authorized_at':None,
            'authorized_by':None,
            'share':None
            }

    def tearDown(self):
        super(ReqTokenModelUnitTests,self).tearDown()

    @enable_transactions
    def test_construction(self):
        
        # should construct normally
        try:
            rt = ReqToken.objects.create(**self.args)
        except IntegrityError:
            transaction.rollback()
            self.fail('Could not create ReqToken normally')
        else:
            self.assertEqual(rt, ReqToken.objects.get(pk=rt.pk))
        
    def test_save(self):
        rt = ReqToken(**self.args)
        self.assertEqual(rt.email, '')
        rt.save()
        self.assertEqual(rt.email, '%s@requesttokens.indivo.org'%rt.token)

    def test_effective_principal(self):
        rt = ReqToken.objects.create(**self.args)
        self.assertEqual(rt.effective_principal, self.app)
    
    def test_authorized(self):
        rt = ReqToken.objects.create(**self.args)
        self.assertFalse(rt.authorized)
        rt.authorized_at = datetime.datetime.now()
        self.assertTrue(rt.authorized)

########NEW FILE########
__FILENAME__ = sessiontoken
from indivo.tests.internal_tests import enable_transactions
from base import TokenModelUnitTests
from indivo.tests.data.account import TEST_ACCOUNTS
from indivo.tests.data.record import TEST_RECORDS
from indivo.tests.data.app import TEST_USERAPPS
from indivo.models import SessionToken
from django.db import IntegrityError, transaction

import datetime

SESSION_TOKEN_EXPIRATION = 30 # minutes until a session token should expire

class SessionTokenModelUnitTests(TokenModelUnitTests):
    def setUp(self):
        super(SessionTokenModelUnitTests,self).setUp()
        
        # An account
        self.account = self.createAccount(TEST_ACCOUNTS, 1)
        
        # default args for constructing a token
        token, secret = self.generate_token_and_secret()
        self.args = {
            'token':token,
            'secret':secret,
            'user':self.account,
            'expires_at':None,
            }

    def tearDown(self):
        super(SessionTokenModelUnitTests,self).tearDown()

    @enable_transactions
    def test_construction(self):
        
        # should construct normally
        try:
            st = SessionToken.objects.create(**self.args)
        except IntegrityError:
            transaction.rollback()
            self.fail('Could not create SessionToken normally')
        else:
            self.assertEqual(st, SessionToken.objects.get(pk=st.pk))
        
    def test_approved_p(self):
        st = SessionToken.objects.create(**self.args)
        self.assertTrue(st.approved_p)

    def test_save(self):
        st = SessionToken(**self.args)
        self.assertEqual(st.expires_at, None)

        now = datetime.datetime.now()
        st.save()
        self.assertNotEqual(st.expires_at, None)
        
        # Make sure the expiration time falls within a minute of the expected
        # Can't use assertLessEqual or assertGreaterEqual for python2.6 compatibility
        self.assertTrue(st.expires_at <= now+datetime.timedelta(minutes=SESSION_TOKEN_EXPIRATION+1))
        self.assertTrue(st.expires_at >= now+datetime.timedelta(minutes=SESSION_TOKEN_EXPIRATION-1))

class SessionRequestTokenModelUnitTests(TokenModelUnitTests):
    def setUp(self):
        super(SessionRequestTokenModelUnitTests,self).setUp()
        
        # An account
        self.account = self.createAccount(TEST_ACCOUNTS, 1)
        
        # default args for constructing a token
        token, secret = self.generate_token_and_secret()
        self.args = {
            'token':token,
            'token':secret,
            'user':self.account,
            'approved_p':False
            }

    def tearDown(self):
        super(SessionRequestTokenModelUnitTests,self).tearDown()

    @enable_transactions
    def test_construction(self):
        
        # should construct normally
        try:
            st = SessionToken.objects.create(**self.args)
        except IntegrityError:
            transaction.rollback()
            self.fail('Could not create SessionToken normally')
        else:
            self.assertEqual(st, SessionToken.objects.get(pk=st.pk))

########NEW FILE########
__FILENAME__ = statusname
from indivo.tests.internal_tests import InternalTests, enable_transactions
from indivo.models import StatusName
from django.db import IntegrityError, transaction

class StatusNameModelUnitTests(InternalTests):
    def setUp(self):
        super(StatusNameModelUnitTests,self).setUp()
        
    def tearDown(self):
        super(StatusNameModelUnitTests,self).tearDown()

    @enable_transactions
    def test_construction(self):
        
        # should construct normally
        try:
            sn = StatusName.objects.create(name='defunct', id=4)
        except IntegrityError:
            transaction.rollback()
            self.fail('Could not create StatusName normally')
        else:
            self.assertEqual(sn, StatusName.objects.get(pk=sn.pk))


########NEW FILE########
__FILENAME__ = account
from django.conf.urls.defaults import *

from indivo.views import *
from indivo.lib.utils import MethodDispatcher

urlpatterns = patterns('',

    # forgotten password: Combines a reset and a secret-resend into one call
    (r'^forgot-password$', MethodDispatcher({'POST': account_forgot_password})),

    # reset
    (r'^reset$', MethodDispatcher({'POST': account_reset})),

    # set state
    (r'^set-state$', MethodDispatcher({'POST': account_set_state})),

    # update info
    (r'^info-set$', MethodDispatcher({'POST': account_info_set})),

    # get credentials for a connect-authenticated app
    (r'^apps/(?P<pha_email>[^/]+)/connect_credentials$', MethodDispatcher({'POST': get_connect_credentials})),

    # User Preferences (SMART)
    (r'^apps/(?P<pha_email>[^/]+)/preferences$', 
     MethodDispatcher({'GET': get_user_preferences,
                       'PUT': set_user_preferences,
                       'DELETE': delete_user_preferences,})),

    # auth systems
    (r'^authsystems/$', MethodDispatcher({'POST': account_authsystem_add})),

    # change the password
    (r'^authsystems/password/change$', MethodDispatcher({
                'POST' : account_password_change})),

    # set the password
    (r'^authsystems/password/set$', MethodDispatcher({
                'POST' : account_password_set})),

    # set the username
    (r'^authsystems/password/set-username$', MethodDispatcher({'POST': account_username_set})),

    # URL to initialize account
    (r'^initialize/(?P<primary_secret>[^/]+)$', MethodDispatcher({'POST': account_initialize})),
    (r'^check-secrets/(?P<primary_secret>[^/]+)$', MethodDispatcher({'GET': account_check_secrets})),

    # URL to resend the login URL
    (r'^secret-resend$', MethodDispatcher({'POST':account_resend_secret})),

    # secret
    (r'^secret$', MethodDispatcher({'GET':account_secret})),

    # primary secret (very limited call)
    (r'^primary-secret$', MethodDispatcher({'GET':account_primary_secret})),

    # record list
    (r'^records/$', MethodDispatcher({'GET':record_list})),

    # send a message or read the inbox
    (r'^inbox/$', MethodDispatcher({
                'GET' : account_inbox,
                'POST': account_send_message})),

    # read a message
    (r'^inbox/(?P<message_id>[^/]+)$',
      MethodDispatcher({'GET': account_inbox_message})),

    # archive a message
    (r'^inbox/(?P<message_id>[^/]+)/archive$',
      MethodDispatcher({'POST': account_message_archive})),

    # accept an attachment
    (r'^inbox/(?P<message_id>[^/]+)/attachments/(?P<attachment_num>[^/]+)/accept$', MethodDispatcher({
                'POST': account_inbox_message_attachment_accept})),

    # healthfeed
    (r'^notifications/$', MethodDispatcher({'GET':account_notifications})),

    (r'^permissions/$', MethodDispatcher({'GET': account_permissions})), 
)    

########NEW FILE########
__FILENAME__ = application
from django.conf.urls.defaults import *

from indivo.views import *
from indivo.lib.utils import MethodDispatcher

urlpatterns = patterns('',
    ##
    ## Application-Specific Data Storage
    ##

    # Manifest for the app, SMART style
    (r'^/manifest$', MethodDispatcher({'GET':app_manifest})),

    # List of app-specific documents / create a doc
    (r'^/documents/$', 
      MethodDispatcher({ 'GET': app_document_list, 'POST': app_document_create})),

    # create app-specific doc by document external ID
    (r'^/documents/external/(?P<external_id>[^/]+)$', 
      MethodDispatcher({'PUT': app_document_create_or_update_ext})),

    # One app-specific document
    # app-specific document replace
    (r'^/documents/(?P<document_id>[^/]+)$', 
      MethodDispatcher({'GET': app_specific_document, 
                        'PUT': app_document_create_or_update, 
                        'DELETE': app_document_delete})),

    # One app-specific document's metadata
    # and app-specific document metadata by external ID
    (r'^/documents/(?P<document_id>[^/]+)/meta$', 
      MethodDispatcher({'GET': app_document_meta})),
    (r'^/documents/external/(?P<external_id>[^/]+)/meta$', 
      MethodDispatcher({'GET': app_document_meta_ext})),

    # app-specific document label
    # FIXME: not sure this view works
    (r'^/documents/(?P<document_id>[^/]+)/label$', 
     MethodDispatcher({'PUT':app_document_label})),

    # List available records
    # (autonomous apps only)
    (r'^/records/$', MethodDispatcher({'GET':app_record_list})),

    # Get an access token for an enabled record
    # (autonomous apps only!!!!!)
    # POST, for compatibility with other oAuth calls
    (r'^/records/(?P<record_id>[^/]+)/access_token$', MethodDispatcher({'POST': autonomous_access_token})),

    # app-specific document types
    # (r'^/documents/types/(?P<type>[A-Za-z0-9._%-:#]+)/$', app_document_list_by_type)
    # REMOVED 02/15/2011 for compatibility with record-specific document type calls
    # Type must be passed as a get parameter, i.e. GET /documents/?type={TYPE}
)

########NEW FILE########
__FILENAME__ = carenet
from django.conf.urls.defaults import *

from indivo.views import *
from indivo.lib.utils import MethodDispatcher

urlpatterns = patterns('',
    (r'^$', MethodDispatcher({
                'DELETE' : carenet_delete})),
    (r'^/rename$', MethodDispatcher({
                'POST' : carenet_rename})),
    (r'^/record$', MethodDispatcher({'GET':carenet_record})),

    # Manage documents                      
    (r'^/documents/', include('indivo.urls.carenet_documents')),

    # Manage accounts
    (r'^/accounts/$',
                MethodDispatcher({
                  'GET'  : carenet_account_list, 
                  'POST' : carenet_account_create
                })),     
    (r'^/accounts/(?P<account_id>[^/]+)$', 
      MethodDispatcher({ 'DELETE' : carenet_account_delete })), 

    # Manage apps
    (r'^/apps/$', 
      MethodDispatcher({ 'GET' : carenet_apps_list})),
    (r'^/apps/(?P<pha_email>[^/]+)$', 
      MethodDispatcher({  'PUT' : carenet_apps_create,
                          'DELETE': carenet_apps_delete})),

    # Permissions Calls
    (r'^/accounts/(?P<account_id>[^/]+)/permissions$', 
      MethodDispatcher({ 'GET' : carenet_account_permissions })),
    (r'^/apps/(?P<pha_email>[^/]+)/permissions$', 
      MethodDispatcher({ 'GET' : carenet_app_permissions })),

    # Reporting Calls                      
    (r'^/reports/minimal/procedures/$',
     MethodDispatcher({'GET':carenet_procedure_list})), 
    (r'^/reports/minimal/simple-clinical-notes/$',
     MethodDispatcher({'GET':carenet_simple_clinical_notes_list})), 
    (r'^/reports/minimal/equipment/$',
     MethodDispatcher({'GET':carenet_equipment_list})), 
    (r'^/reports/minimal/measurements/(?P<lab_code>[^/]+)/$',
     MethodDispatcher({'GET':carenet_measurement_list})),
    (r'^/reports/(?P<data_model>[^/]+)/$', 
     MethodDispatcher({'GET':carenet_generic_list})),

    # Demographics                       
    (r'^/demographics$', MethodDispatcher({'GET': read_demographics_carenet})),
)

########NEW FILE########
__FILENAME__ = carenet_documents
from django.conf.urls.defaults import *

from indivo.views import *
from indivo.lib.utils import MethodDispatcher

urlpatterns = patterns(
    '',
    (r'^$',                             
     MethodDispatcher({'GET' : carenet_document_list })), 
    (r'^(?P<document_id>[^/]+)/meta$',  
     MethodDispatcher({'GET' : carenet_document_meta})),
    (r'^(?P<document_id>[^/]+)$',       
     MethodDispatcher({'GET' : carenet_document })), 
)

"""
    (r'^(?P<document_id>[^/]+)/carenets/$', MethodDispatcher({
                'GET' : document_carenets
                })), 
    (r'^(?P<document_id>[^/]+)/carenets/(?P<carenet_id>[^/]+)$', MethodDispatcher({
                'PUT' : carenet_document_placement, 
                'DELETE' : carenet_document_delete
                })), 
    (r'^(?P<document_id>[^/]+)/carenets/(?P<carenet_id>[^/]+/autoshare-revert)$', MethodDispatcher({
                'POST' : autoshare_revert
                })), 


    # document list
    (r'^$', MethodDispatcher({
                'GET': document_list,
                'POST': document_create,
                'DELETE' : documents_delete})),

    # create by document external ID
    #(r'^/documents/external/(?P<external_id>[^/]+)$', MethodDispatcher({'POST' : document_create})),
    (r'^external/(?P<pha_email>[^/]+)/(?P<external_id>[^/]+)$', 
      MethodDispatcher({'PUT' : document_create})),
    
    # single document
    (r'^(?P<document_id>[^/]+)$', MethodDispatcher({'GET': document, 'DELETE': document_delete})),
    
    # document metadata
    (r'^(?P<document_id>[^/]+)/meta$', MethodDispatcher({'GET': document_meta})),

    # document metadata by external ID
    #(r'^/documents/external/(?P<external_id>[^/]+)/meta$', MethodDispatcher({'GET': document_meta})),
    (r'^external/(?P<pha_email>[^/]+)/(?P<external_id>[^/]+)/meta$', 
      MethodDispatcher({'GET': document_meta})),
    
    # document replace
    (r'^(?P<document_id>[^/]+)/replace$', MethodDispatcher({'POST' : document_version})),

    # document versions
    (r'^(?P<document_id>[^/]+)/versions/$', document_versions),

    # document label
    (r'^(?P<document_id>[^/]+)/label$', document_label),

    # Document Status
    (r'^(?P<document_id>[^/]+)/set-status$', MethodDispatcher({'POST' : document_set_status})),
    (r'^(?P<document_id>[^/]+)/status-history$', MethodDispatcher({'GET' : document_status_history})),

    # document label by external id
    #(r'^/documents/external/(?P<external_id>[^/]+)/label$', document_label),
    (r'^external/(?P<pha_email>[^/]+)/(?P<external_id>[^/]+)/label$', document_label),

    # document types
    (r'^types/(?P<type>[A-Za-z0-9._%-:#]+)/$', document_list),

    # document rels
    (r'^(?P<document_id_0>[^/]+)/rels/(?P<rel>[^/]+)/(?P<document_id_1>[^/]+)$', 
      MethodDispatcher({'PUT' : document_rels})),
    (r'^(?P<document_id>[^/]+)/rels/(?P<rel>[^/]+)/external/(?P<pha_email>[^/]+)/(?P<external_id>[^/]+)$', 
      MethodDispatcher({'PUT' : document_create_by_rel, 
                        'POST': document_create_by_rel})),    
    (r'^(?P<document_id_0>[^/]+)/rels/(?P<rel>[^/]+)/', 
      MethodDispatcher({'POST' : document_rels, 
                        'GET' : get_documents_by_rel}))
"""

########NEW FILE########
__FILENAME__ = oauth
from django.conf.urls.defaults import *

#from oauth.djangoutils import request_token, exchange_token, PARAMS
#PARAMS['OAUTH_SERVER'] = OAUTH_SERVER

from indivo.views import *
from indivo.lib.utils import MethodDispatcher

urlpatterns = patterns('',
  url(r'^request_token$',    
      MethodDispatcher({'POST':request_token}),
      name='oauth_request_token'),

  url(r'^access_token$',
      MethodDispatcher({'POST':exchange_token}),     
      name='oauth_access_token'),

  url(r'^internal/request_tokens/(?P<reqtoken_id>[^/]+)/info$', 
      MethodDispatcher({'GET':request_token_info}), 
      name='oauth_internal_request_token_info'),

  # Request Token User Authorization is now handled by the UI, using internal
  # oauth calls (internal/request_tokens/approve), so oauth/authorize is no longer
  # part of the userapp-facing API.
                       
  ## INTERNAL oAuth operations that are not part of the standard public API
  # session
  url(r'^internal/session_create$', 
      MethodDispatcher({'POST':session_create}), 
      name='oauth_session_create'),

  url(r'^internal/request_tokens/(?P<reqtoken_id>[^/]+)/claim$', 
      MethodDispatcher({'POST':request_token_claim}), 
      name='oauth_internal_request_token_claim'),
    
  url(r'^internal/request_tokens/(?P<reqtoken_id>[^/]+)/approve$', 
      MethodDispatcher({'POST':request_token_approve}), 
      name='oauth_internal_request_token_approve'),
  
  ## signing URLS (SURL)
  url(r'^internal/surl-verify$', 
      MethodDispatcher({'GET':surl_verify})),
)


########NEW FILE########
__FILENAME__ = record
from django.conf.urls.defaults import *

from indivo.views import *
from indivo.lib.utils import MethodDispatcher

urlpatterns = patterns('',

    (r'^$', record),

    (r'^/apps/',      include('indivo.urls.record_apps')),
    (r'^/audits/',    include('indivo.urls.record_audits')),
    (r'^/autoshare/', include('indivo.urls.record_autoshare')),
    (r'^/carenets/',  include('indivo.urls.record_carenets')),
    (r'^/documents/', include('indivo.urls.record_documents')),
    (r'^/reports/',   include('indivo.urls.record_reports')),

    # ownership
    (r'^/owner$', MethodDispatcher({
                'GET' : record_get_owner,
                'PUT' : record_set_owner,
                # for now, POST compatibility (Ben)
                'POST' : record_set_owner
                })),
    # shares
    (r'^/shares/$', MethodDispatcher({
        'GET'  : record_shares,
        'POST' : record_share_add})),

    # Deprecated as of 1.0: This isn't RESTful at all
    # Use the below call instead.                       
    (r'^/shares/(?P<other_account_id>[^/]+)/delete$', 
     MethodDispatcher({'POST':record_share_delete})),

    (r'^/shares/(?P<other_account_id>[^/]+)$', 
     MethodDispatcher({'DELETE':record_share_delete})),

    # Deprecated as of 1.0: This isn't RESTful.
    # Use the below call instead.
    (r'^/notify$', MethodDispatcher({'POST':record_notify})),
    (r'^/notifications/$', MethodDispatcher({'POST':record_notify})),

    # message record
    (r'^/inbox/(?P<message_id>[^/]+)$', MethodDispatcher({
                'POST': record_send_message})),
    (r'^/inbox/(?P<message_id>[^/]+)/attachments/(?P<attachment_num>[^/]+)$', MethodDispatcher({
                'POST' : record_message_attach})),

    # SMART API Aliases
    (r'^/allergies/$', MethodDispatcher({'GET': smart_allergies})), # requires a custom view due to AllergyExclusions
    (r'^/(?P<model_name>[^/]+)/$', MethodDispatcher({'GET': smart_generic})),
    (r'^/allergies/(?P<model_id>[^/]+)$', MethodDispatcher({'GET': smart_allergies_instance})),
    (r'^/(?P<model_name>[^/]+)/(?P<model_id>[^/]+)$', MethodDispatcher({'GET': smart_generic_instance})),

    # Demographics
    (r'^/demographics$', MethodDispatcher({'PUT': set_demographics, 'GET': read_demographics})),

)

########NEW FILE########
__FILENAME__ = record_apps
from django.conf.urls.defaults import *

from indivo.views import *
from indivo.lib.utils import MethodDispatcher

urlpatterns = patterns('',
  (r'^$', MethodDispatcher({'GET':record_phas})),
  (r'^(?P<pha_email>[^/]+)$', 
      MethodDispatcher({'GET' : record_pha, 
                        'PUT': record_pha_enable,
                        'DELETE': pha_record_delete})),
  
  # List of app-specific documents / create a doc
  (r'^(?P<pha_email>[^/]+)/documents/$', 
      MethodDispatcher({
              'GET'  : record_app_document_list,
              'POST' : record_app_document_create})),
  
  # create app-specific doc by document external ID
  (r'^(?P<pha_email>[^/]+)/documents/external/(?P<external_id>[^/]+)$', 
      MethodDispatcher({
              'POST' : record_app_document_create_or_update_ext, 
              'PUT'  : record_app_document_create_or_update_ext})),

  # One app-specific document
  (r'^(?P<pha_email>[^/]+)/documents/(?P<document_id>[^/]+)$', MethodDispatcher({
                'GET': record_app_specific_document,
                'DELETE': record_app_document_delete})),

  # One app-specific document's metadata
  (r'^(?P<pha_email>[^/]+)/documents/(?P<document_id>[^/]+)/meta$', 
      MethodDispatcher({'GET': record_app_document_meta})),

  # app-specific document metadata by external ID 
  (r'^(?P<pha_email>[^/]+)/documents/external/(?P<external_id>[^/]+)/meta$', 
      MethodDispatcher({'GET': record_app_document_meta_ext})),

  # app-specific set document label
  (r'^(?P<pha_email>[^/]+)/documents/(?P<document_id>[^/]+)/label$', 
   MethodDispatcher({'PUT':record_app_document_label})),

  # app-specific document types
  # (r'^(?P<pha_email>[^/]+)/documents/types/(?P<type>[A-Za-z0-9._%-:#]+)/$', record_app_document_list_by_type),
  # REMOVED 02/15/2011 for compatibility with record-specific doc access: type is now only passed as a GET param,
  # i.e. GET /{pha_email}/documents/?type={TYPE}

  # setup a PHA completely (pre-auth'ed)
  (r'^(?P<pha_email>[^/]+)/setup$', 
   MethodDispatcher({'POST':record_pha_setup})),
)

########NEW FILE########
__FILENAME__ = record_audits
from django.conf.urls.defaults import *

from indivo.views import *
from indivo.lib.utils import MethodDispatcher

urlpatterns = patterns('',

  # Old style audit views, supported for backwards compatibility
  (r'^$', MethodDispatcher({'GET':audit_record_view})), 
  (r'^documents/(?P<document_id>[^/]+)/$', 
   MethodDispatcher({'GET':audit_document_view})), 
  (r'^documents/(?P<document_id>[^/]+)/functions/(?P<function_name>[^/]+)/$', 
   MethodDispatcher({'GET':audit_function_view})),

  # Audit Using the Query API Interface
  (r'^query/$', MethodDispatcher({'GET':audit_query}))
)

########NEW FILE########
__FILENAME__ = record_autoshare
from django.conf.urls.defaults import *

from indivo.views import *
from indivo.lib.utils import MethodDispatcher

urlpatterns = patterns('',
  (r'^bytype/$', MethodDispatcher({ 'GET'  : autoshare_list })),
  (r'^bytype/all$', MethodDispatcher({ 'GET'  : autoshare_list_bytype_all })),
  (r'^carenets/(?P<carenet_id>[^/]+)/bytype/set$', MethodDispatcher({ 'POST' : autoshare_create })),
  (r'^carenets/(?P<carenet_id>[^/]+)/bytype/unset$', MethodDispatcher({ 'POST' : autoshare_delete }))
)

########NEW FILE########
__FILENAME__ = record_carenets
from django.conf.urls.defaults import *

from indivo.views import *
from indivo.lib.utils import MethodDispatcher

urlpatterns = patterns('',
    (r'^$', MethodDispatcher({
                  'GET' : carenet_list,
                  # SZ: Should be PUT but using POST for compatibility
                  'POST' : carenet_create
                }))
)

########NEW FILE########
__FILENAME__ = record_documents
from django.conf.urls.defaults import *

from indivo.views import *
from indivo.lib.utils import MethodDispatcher

urlpatterns = patterns('',

    #sharing
    (r'^(?P<document_id>[^/]+)/nevershare$', MethodDispatcher({
                'PUT' : document_set_nevershare,
                'DELETE': document_remove_nevershare})),
    (r'^(?P<document_id>[^/]+)/carenets/$', MethodDispatcher({
                'GET' : document_carenets
                })), 
    (r'^(?P<document_id>[^/]+)/carenets/(?P<carenet_id>[^/]+)$', MethodDispatcher({
                'PUT' : carenet_document_placement, 
                'DELETE' : carenet_document_delete
                })), 
    (r'^(?P<document_id>[^/]+)/carenets/(?P<carenet_id>[^/]+)/autoshare-revert$', MethodDispatcher({
                'POST' : autoshare_revert
                })), 

    (r'^$', MethodDispatcher({
                'GET'     : record_document_list,
                'POST'    : document_create,
                'DELETE'  : documents_delete})),

    # create by document external ID
    (r'^external/(?P<pha_email>[^/]+)/(?P<external_id>[^/]+)$', 
      MethodDispatcher({'PUT' : document_create_by_ext_id})),
    (r'^external/(?P<pha_email>[^/]+)/(?P<external_id>[^/]+)/meta$', 
      MethodDispatcher({'GET': record_document_meta_ext})),

    # single document
    (r'^(?P<document_id>[^/]+)$', MethodDispatcher({
                'GET': record_specific_document})),
    
    # document metadata
    (r'^(?P<document_id>[^/]+)/meta$', MethodDispatcher({ 'GET': record_document_meta,
                                                          'PUT' : update_document_meta })),

    # document replace
    (r'^(?P<document_id>[^/]+)/replace$', MethodDispatcher({'POST' : document_version})),
    (r'^(?P<document_id>[^/]+)/replace/external/(?P<pha_email>[^/]+)/(?P<external_id>[^/]+)$', MethodDispatcher({'PUT' : document_version_by_ext_id})),

    # document versions
    (r'^(?P<document_id>[^/]+)/versions/$', 
     MethodDispatcher({'GET':document_versions})),

    # document label
    (r'^(?P<document_id>[^/]+)/label$', 
     MethodDispatcher({'PUT':record_document_label})),

    # Document Status
    (r'^(?P<document_id>[^/]+)/set-status$', MethodDispatcher({'POST' : document_set_status})),
    (r'^(?P<document_id>[^/]+)/status-history$', MethodDispatcher({'GET' : document_status_history})),

    # document label by external id
    #(r'^/documents/external/(?P<external_id>[^/]+)/label$', document_label),
    (r'^external/(?P<pha_email>[^/]+)/(?P<external_id>[^/]+)/label$', 
     MethodDispatcher({'PUT':record_document_label_ext})),

    # document types
    # disabled 2010-08-15 we will only use the query parameter for this
    # (r'^types/(?P<type>[A-Za-z0-9._%-:#]+)/$', document_list),

    # document rels
    (r'^(?P<document_id_0>[^/]+)/rels/(?P<rel>[^/]+)/(?P<document_id_1>[^/]+)$', 
      MethodDispatcher({'PUT' : document_rels})),
    (r'^(?P<document_id>[^/]+)/rels/(?P<rel>[^/]+)/$', 
      MethodDispatcher({'POST': document_create_by_rel, 
                        'GET' : get_documents_by_rel})),
    (r'^(?P<document_id>[^/]+)/rels/(?P<rel>[^/]+)/external/(?P<pha_email>[^/]+)/(?P<external_id>[^/]+)$', 
      MethodDispatcher({'PUT' : document_create_by_rel_with_ext_id, 
                        'POST': document_create_by_rel_with_ext_id})),    

)

########NEW FILE########
__FILENAME__ = record_reports
from django.conf.urls.defaults import *

from indivo.views import *
from indivo.lib.utils import MethodDispatcher

urlpatterns = patterns('',
  (r'^minimal/measurements/(?P<lab_code>[^/]+)/$', 
   MethodDispatcher({'GET':measurement_list})),
  (r'^minimal/procedures/$', 
   MethodDispatcher({'GET':procedure_list})),
  (r'^minimal/equipment/$', 
   MethodDispatcher({'GET':equipment_list})),
  (r'^minimal/simple-clinical-notes/$', 
   MethodDispatcher({'GET':simple_clinical_notes_list})),
  (r'^experimental/ccr$', 
   MethodDispatcher({'GET':report_ccr})),
  (r'^(?P<data_model>[^/]+)/$', 
   MethodDispatcher({'GET':generic_list})),
)

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *

from indivo.views import *
from indivo.lib.utils import MethodDispatcher

urlpatterns = patterns('',
    
    # OAuth
    (r'^oauth/', include('indivo.urls.oauth')),
    (r'^version$', MethodDispatcher({'GET':get_version})),

    # account-specific URLs
    (r'^accounts/$', MethodDispatcher({'POST':account_create})),
    (r'^accounts/search$', MethodDispatcher({'GET':account_search})),
    (r'^accounts/(?P<account_email>[^/]+)$', 
     MethodDispatcher({'GET':account_info})),
    (r'^accounts/(?P<account_email>[^/]+)/', include('indivo.urls.account')),

    # carenet-specific URLs
    (r'^carenets/(?P<carenet_id>[^/]+)', include('indivo.urls.carenet')),

    # record-specific URLs
    (r'^records/$', MethodDispatcher({'POST': record_create})),
    (r'^records/external/(?P<principal_email>[^/]+)/(?P<external_id>[^/]+)$', 
     MethodDispatcher({'PUT'  : record_create_ext})),
    (r'^records/search$', MethodDispatcher({'GET':record_search})),                       
    (r'^records/(?P<record_id>[^/]+)', include('indivo.urls.record')),
    
    # PHAs
    (r'^apps/$', MethodDispatcher({'GET':all_phas})),
    (r'^apps/manifests/$', MethodDispatcher({'GET': all_manifests})),
    (r'^apps/(?P<pha_email>[^/]+)$', 
     MethodDispatcher({'GET' : pha, 'DELETE': pha_delete})),
    (r'^apps/(?P<pha_email>[^/]+)', include('indivo.urls.application')),

    # SMART container calls
    (r'^ontology$', MethodDispatcher({'GET': smart_ontology})),
    (r'^capabilities/$', MethodDispatcher({'GET': smart_capabilities})),              
    
    # static
    (r'^static/(?P<path>.*)$', 'django.views.static.serve', {'document_root': 'static'}),
    
    )

########NEW FILE########
__FILENAME__ = validators
"""
Validators useful for attaching to data models.
"""

from django.core.exceptions import ValidationError

class ValueInSetValidator(object):
    """ Validates that a value is within a set of possible values.

    The optional 'nullable' flag determines whether or not the value
    may also be empty.
    
    """

    def __init__(self, valid_values, nullable=False):
        self.valid_values = valid_values
        self.nullable = nullable

    def __call__(self, value):
        if self.nullable and not value:
            return

        if value not in self.valid_values:
            raise ValidationError("Invalid value: %s. Expected one of: %s"%(value, ", ".join(map(str, self.valid_values))))


class ExactValueValidator(ValueInSetValidator):
    """ Validates that a value is exactly equal to a certain value.

    The optional 'nullable' flag determines whether or not the value
    may also be empty.
    
    """

    def __init__(self, valid_value, nullable=False):
        return super(ExactValueValidator, self).__init__([valid_value], nullable=nullable)
       
 
class NonNullValidator(object):
    """ Validates that a value is not null.
    
    A 'null' value is anything that Django would store as NULL in a database: ``None``, ``""``, ``[]``,
    ``()``, or ``{}``. Note that other python objects that evaluate to false (``0``, ``False``) are not 
    actually null values, as they represent data. 

    This validator is useful for validating that strings are non-empty, for example.
    
    """

    # This is a special validator: it is actually just a proxy for setting blank=False on the field
    pass

########NEW FILE########
__FILENAME__ = account
""" 
.. module:: views.account
   :synopsis: Account-related Indivo view implementations.

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>
.. moduleauthor:: Ben Adida <ben@adida.net>

"""

from base import *
import urllib
import logging
from indivo.lib import utils
from indivo.lib.sample_data import IndivoDataLoader
from django.http import HttpResponseBadRequest
from django.db import IntegrityError
from django.conf import settings
from django.db.models import Q
from oauth.oauth import HTTPRequest, OAuthRequest

ACTIVE_STATE, UNINITIALIZED_STATE = 'active', 'uninitialized'

def account_password_change(request, account):
    """ Change a account's password.

    request.POST must contain:
    
    * *old*: The existing account password.
    * *new*: The desired new password.

    Will return :http:statuscode:`200` on success,
    :http:statuscode:`403` if the old password didn't
    validate, :http:statuscode:`400` if the POST data
    didn't contain both an old password and a new one.
    
    """

    OLD = 'old'
    NEW = 'new'
    if request.POST.has_key(OLD) and request.POST.has_key(NEW):
        if account and account.password_check(request.POST[OLD]):
            account.password = request.POST[NEW]
            account.save()
            return DONE
        else:
            raise PermissionDenied()
    return HttpResponseBadRequest()


def account_reset(request, account):
    """ Reset an account to an ``uninitialized`` state.

    Just calls into :py:meth:`~indivo.models.accounts.Account.reset`.

    Will return :http:statuscode:`200` on success.

    """

    account.reset()
    return DONE


def account_set_state(request, account):
    """ Set the state of an account. 
    
    request.POST must contain:
    
    * *state*: The desired new state of the account.
    
    Options are: 
    
    * ``active``: The account is ready for use.
    
    * ``disabled``: The account has been disabled,
      and cannot be logged into.
      
    * ``retired``: The account has been permanently
      disabled, and will never allow login again.
      Retired accounts cannot be set to any other 
      state.
    
    Will return :http:statuscode:`200` on success,
    :http:statuscode:`403` if the account has been
    retired and :http:statuscode:`400` if POST data
    did not contain a "status" parameter
    
    """
    
    if not request.POST.get('state'):
        return HttpResponseBadRequest('No state')
    
    try:
        account.set_state(request.POST['state'])
    except Exception, e:
        raise PermissionDenied(e)
    account.save()
    return DONE


def account_password_set(request, account):
    """ Force the password of an account to a given value.

    This differs from 
    :py:meth:`~indivo.views.account.account_password_change`
    in that it does not require validation of the old password. This
    function is therefore admin-facing, whereas 
    :py:meth:`~indivo.views.account.account_password_change` 
    is user-facing.

    request.POST must contain:
    
    * *password*: The new password to set.

    Will return :http:statuscode:`200` on success, :http:statuscode:`400`
    if the passed POST data didn't contain a new password.

    """

    if account and request.POST.has_key('password'):
        account.password = request.POST['password']
        account.save()
        return DONE
    return HttpResponseBadRequest()


def account_username_set(request, account):
    """ Force the username of an account to a given value.

    request.POST must contain:

    * *username*: The new username to set.

    Will return :http:statuscode:`200` on success, 
    :http:statuscode:`400` if the POST data doesn't conatain
    a new username.

    """

    if account and request.POST.has_key('username'):
        account.set_username(request.POST['username'])
        return DONE
    return HttpResponseBadRequest()


def account_info_set(request, account):
    """ Set basic information about an account.
    
    request.POST can contain any of:
    
    * *contact_email*: A new contact email for the account.
    
    * *full_name*: A new full name for the account.
    
    Each passed parameter will be updated for the account.
    
    Will return :http:statuscode:`200` on success, 
    :http:statuscode:`400` if the POST data contains none of
    the settable parameters.
    
    """
    
    contact_email = request.POST.get('contact_email')
    full_name = request.POST.get('full_name')
    if not contact_email and not full_name:
        return HttpResponseBadRequest('No parameter given')
    
    if contact_email:
        account.contact_email = contact_email
    if full_name:
        account.full_name = full_name
    
    account.save()
    return DONE


@transaction.commit_on_success
def account_initialize(request, account, primary_secret):
    """ Initialize an account, activating it.

    After validating primary and secondary secrets, changes the 
    account's state from ``uninitialized`` to ``active`` and sends
    a welcome email to the user.

    If the account has an associated secondary secret, request.POST 
    must contain:

    * *secondary_secret*: The secondary_secret generated for the account.

    Will return :http:statuscode:`200` on success, :http:statuscode:`403`
    if the account has already been initialized or if either of the account
    secrets didn't validate, and :http:statuscode:`400` if a secondary secret
    was required, but didn't appear in the POST data.
    
    """
    
    SECONDARY_SECRET = 'secondary_secret'
    
    # check primary secret
    if account.primary_secret != primary_secret:
        account.on_failed_login()
        raise PermissionDenied()
    
    if account.state != UNINITIALIZED_STATE:
        raise PermissionDenied()
    
    # if there is a secondary secret in the account, check it in the form
    if not account.secondary_secret or request.POST.has_key(SECONDARY_SECRET):
        secondary_secret = request.POST.get(SECONDARY_SECRET)
        if account.secondary_secret and secondary_secret != account.secondary_secret:
            account.on_failed_login()
            raise PermissionDenied()
        
        account.state = ACTIVE_STATE
        try:
            account.send_welcome_email()
        except Exception, e:
            logging.exception(e)
        account.save()
        
        return DONE
    return HttpResponseBadRequest()


def account_primary_secret(request, account):
    """ Display an account's primary secret.

    This is an admin-facing call, and should be used sparingly,
    as we would like to avoid sending primary-secrets over the
    wire. If possible, use 
    :py:meth:`~indivo.views.account.account_check_secrets`
    instead.

    Will return :http:statuscode:`200` with the primary secret on success.
    
    """

    return render_template('secret', {'secret': account.primary_secret})


def account_info(request, account):
    """ Display information about an account.

    Return information includes the account's secondary-secret,
    full name, contact email, login counts, state, and auth 
    systems.

    Will return :http:statuscode:`200` on success, with account info
    XML.

    """
    # get the account auth systems
    auth_systems = account.auth_systems.all()
    return render_template('account', {'account': account,
                                'auth_systems': auth_systems})


def account_check_secrets(request, account, primary_secret):
    """ Validate an account's primary and secondary secrets.

    If the secondary secret is to be validated, request.GET must
    contain:

    * *secondary_secret*: The account's secondary secret.

    This call will validate the prmary secret, and the secondary
    secret if passed.

    Will return :http:statuscode:`200` on success, 
    :http:statuscode:`403` if either validation fails.

    """

    SECONDARY_SECRET = 'secondary_secret'
    
    # check primary secret
    if account.primary_secret != primary_secret:
        account.on_failed_login()
        raise PermissionDenied()
    
    # if there is a secondary secret in the account, check it in the form
    if request.GET.has_key(SECONDARY_SECRET):
        secondary_secret = request.GET[SECONDARY_SECRET]
        if account.secondary_secret and secondary_secret != account.secondary_secret:
            raise PermissionDenied()
    return DONE

def account_search(request):
    """ Search for accounts by name or email.
    
    request.GET must contain the query parameters, any of:
    
    * *fullname*: The full name of the account
    
    * *contact_email*: The contact email for the account.
    
    This call returns all accounts matching any part of any of the
    passed query parameters: i.e. it ORs together the query parameters 
    and runs a partial-text match on each.
    
    Will return :http:statuscode:`200` with XML describing
    matching accounts on success, :http:statuscode:`400` if
    no query parameters are passed.
    
    """
    
    fullname      = request.GET.get('fullname', None)
    contact_email = request.GET.get('contact_email', None)
    
    if not (fullname or contact_email):
        return HttpResponseBadRequest('No search criteria given')
    
    query_filter = Q()
    if fullname:
        query_filter |= Q(full_name__icontains = fullname)
    if contact_email:
        query_filter |= Q(contact_email__icontains = contact_email)

    query = Account.objects.filter(query_filter)
    
    return render_template('accounts_search', {'accounts': query}, type='xml')


@transaction.commit_manually
def account_authsystem_add(request, account):
    """ Add a new method of authentication to an account.

    Accounts cannot be logged into unless there exists a
    mechanism for authenticating them. Indivo supports one
    built-in mechanism, password auth, but is extensible with
    other mechanisms (i.e., LDAP, etc.). If an external mechanism 
    is used, a UI app is responsible for user authentication, and 
    this call merely registers with indivo server the fact that 
    the UI can handle auth. If password auth is used, this call 
    additionally registers the password with indivo server.
    Thus, this call can be used to add internal or external auth 
    systems.

    request.POST must contain:

    * *system*: The identifier (a short slug) associated with the
      desired auth system. ``password`` identifies the internal
      password system, and external auth systems will define their
      own identifiers.

    * *username*: The username that this account will use to 
      authenticate against the new authsystem
      
    * *password*: The password to pair with the username.
      **ONLY REQUIRED IF THE AUTH SYSTEM IS THE INTERNAL
      PASSWORD SYSTEM**.

    Will return :http:statuscode:`200` on success, 
    :http:statuscode:`403` if the indicated auth system doesn't exist,
    and :http:statuscode:`400` if the POST data didn't contain a system
    and a username (and a password if system was ``password``), or if
    the account is already registered for the given authsystem, or a 
    different account is already registered for the given authsystem with
    the same username.

    """
    
    # check for username
    USERNAME, PASSWORD = 'username', 'password'
    
    if request.POST.has_key(USERNAME):
        username = request.POST[USERNAME]
    else:
        transaction.rollback()
        return HttpResponseBadRequest('No username')
    
    # did we get a system?
    desired_system = request.POST.get('system')
    if not desired_system:
        transaction.rollback()
        return HttpResponseBadRequest('No system')
    
    # if we got "password" as system, did we get a password?
    new_password = None
    if 'password' == desired_system:
        new_password = request.POST.get(PASSWORD)
        if not new_password:
            transaction.rollback()
            return HttpResponseBadRequest('No password')
    
    # set the auth system
    try:
        system = AuthSystem.objects.get(short_name = desired_system)
        account.auth_systems.create(username = username, 
                                 auth_system = system)
    except AuthSystem.DoesNotExist:
        transaction.rollback()
        raise PermissionDenied()
    except IntegrityError:
        transaction.rollback()
        return HttpResponseBadRequest('Duplicate attempt to add authsystem to account')
    else:
        if system == AuthSystem.PASSWORD() and new_password:
            account.password_set(new_password)
            account.set_state(ACTIVE_STATE)
            account.save()
        
        transaction.commit()
        # return the account info instead
        return DONE


def account_forgot_password(request, account):
    """ Resets an account if the user has forgotten its password.

    This is a convenience call which encapsulates
    :py:meth:`~indivo.views.account.account_reset`, 
    :py:meth:`~indivo.views.account.account_resend_secret`, and
    :py:meth:`~indivo.views.account.account_secret`. In summary,
    it resets the account to an uninitialized state, emails
    the user with a new primary-secret, and returns the
    secondary secret for display.

    Will return :http:statuscode:`200` with the secondary secret
    on success, :http:statuscode:`400` if the account hasn't yet
    been initialized and couldn't possibly need a reset. If the
    account has no associated secondary secret, the return XML
    will be empty.
    
    """

    if account.state != UNINITIALIZED_STATE:
        account.reset()
    else:
        return HttpResponseBadRequest("Account has not been initialized")
    
    try:
        account.send_forgot_password_email()
    except Exception, e:
        logging.exception(e)
    return HttpResponse("<secret>%s</secret>" % account.secondary_secret)


def account_resend_secret(request, account):
    """ Sends an account user their primary secret in case they lost it.

    Will return :http:statuscode:`200` on success.

    """

    # FIXME: eventually check the status of the account
    try:
        account.send_secret()
    except Exception, e:
        logging.exception(e)
    
    # probably ok to return DONE, but it should just be empty, like Flickr
    return DONE


def account_secret(request, account):
    """ Return the secondary secret of an account.

    Will always return :http:statuscode:`200`. If the account 
    has no associated secondary secret, the return XML will
    be empty.

    """

    return HttpResponse("<secret>%s</secret>" % account.secondary_secret)

@transaction.commit_on_success
def account_create(request):
    """ Create a new account, and send out initialization emails.
    
    ``request.POST`` holds the creation arguments. 

    In Demo Mode, this call
    automatically creates new records for the account, populated with
    sample data. See :doc:`/sample-data` for details.
    
    Required Parameters:
    
    * *account_id*: an identifier for the new address. Must be formatted
      as an email address.
    
    Optional Parameters:
    
    * *full_name*: The full name to associate with the account. Defaults
      to the empty string.
    
    * *contact_email*: A valid email at which the account holder can 
      be reached. Defaults to the *account_id* parameter.
    
    * *primary_secret_p*: ``0`` or ``1``. Whether or not to associate 
      a primary secret with the account. Defaults to ``1``.
    
    * *secondary_secret_p*: ``0`` or ``1``. Whether or not to associate
      a secondary secret with the account. Defaults to ``0``.
    
    After creating the new account, this call generates secrets for it,
    and then emails the user (at *contact_email*) with their activation
    link, which contains the primary secret.
    
    This call will return :http:statuscode:`200` with info about the new
    account on success, :http:statuscode:`400` if *account_id* isn't 
    provided or isn't a valid email address, or if an account already
    exists with an id matching *account_id*.
      
    """
    
    account_id = request.POST.get('account_id', None)
    if not account_id or not utils.is_valid_email(account_id):
        return HttpResponseBadRequest("Account ID not valid")
    
    contact_email = request.POST.get('contact_email', account_id)
    if not contact_email or not utils.is_valid_email(contact_email):
        return HttpResponseBadRequest("Contact email not valid")
    
    new_account, create_p = Account.objects.get_or_create(email=urllib.unquote(account_id).lower().strip())
    if create_p:
        
        # generate a secondary secret or not? Requestor can say no.
        # trust model makes sense: the admin app requestor only decides whether or not 
        # they control the additional interaction or if it's not necessary. They never
        # see the primary secret.
        
        new_account.full_name = request.POST.get('full_name', '')
        new_account.contact_email = contact_email
        
        new_account.creator = request.principal
        
        password            = request.POST.get('password', None)
        primary_secret_p    = (request.POST.get('primary_secret_p', "1") == "1")
        secondary_secret_p  = (request.POST.get('secondary_secret_p', "0") == "1")
        
        # we don't allow setting the password here anymore
        new_account.save()
            
        if settings.DEMO_MODE:
            loader = IndivoDataLoader(request.principal)
            
            # Create new records for the account, populated by sample data.
            for record_label, data_profile in settings.DEMO_PROFILES.iteritems():
                
                # Create the record
                record = Record.objects.create(creator=request.principal,
                                               label=record_label,
                                               owner=new_account)

                try:
                    # Load the data: no transactions, as we're already managing them above
                    loader.load_profile(record, data_profile, transaction=False)
                except Exception, e: # Something went wrong: roll everything back and fail
                    logging.exception(e)
                    raise

        if primary_secret_p:
            new_account.generate_secrets(secondary_secret_p = secondary_secret_p)
            try:
                new_account.send_secret()
            except Exception, e:
                logging.exception(e)

                
    # account already existed
    else:
        return HttpResponseBadRequest("An account with email address %s already exists." % account_id)
    
    return render_template('account', {'account': new_account}, type='xml')

def get_connect_credentials(request, account, pha):
    """ Get oAuth credentials for an app to run in Connect or SMART REST mode.

    Generates access tokens for *pha* to run against the *record_id* specified in ``request.POST``, authorized by
    *account*. Generates 2 tokens: one for SMART Connect use, and one for SMART REST use.

    If the app is not yet enabled for the record/carenet, this will return a :http:statuscode:`403`.
    
    """

    carenet = record = None
    carenet_id = request.POST.get('carenet_id', None)
    record_id = request.POST.get('record_id', None)

    if carenet_id:
        try:
            carenet=Carenet.objects.get(id=carenet_id)
        except Carenet.DoesNotExist:
            raise Http404
        except Carenet.MultipleObjectsReturned:
            raise Exception("Multiple carenets with same id--database is corrupt")

    elif record_id:
        try:
            record = Record.objects.get(id=record_id)
        except Record.DoesNotExist:
            raise Http404
        except Record.MultipleObjectsReturned:
            raise Exception("Multiple records with same id--database is corrupt")

    # Make sure that the app is enabled
    if (record and not PHAShare.objects.filter(record=record, with_pha=pha).exists()) or \
            (carenet and not CarenetPHA.objects.filter(carenet=carenet, pha=pha).exists()):
        raise PermissionDenied("Cannot generate credentials before app is enabled")

    # Generate the tokens
    from indivo.accesscontrol.oauth_servers import OAUTH_SERVER
    rest_token = OAUTH_SERVER.generate_and_preauthorize_access_token(pha, record=record, 
                                                                     carenet=carenet, account=account)
    connect_token = OAUTH_SERVER.generate_and_preauthorize_access_token(pha, record=record, 
                                                                        carenet=carenet, account=account)
    connect_token.connect_auth_p = True
    connect_token.save()

    # Generate a 2-legged oauth header for the rest token, based on the pha's start_url
    url = utils.url_interpolate(pha.start_url_template, {'record_id':record_id or '', 'carenet_id':carenet_id or ''})
    request = HTTPRequest("GET", url, HTTPRequest.FORM_URLENCODED_TYPE, '', {})
    oauth_params = {
        'smart_container_api_base': settings.SITE_URL_PREFIX,
        'smart_oauth_token': rest_token.token,
        'smart_oauth_token_secret': rest_token.token_secret,
        'smart_user_id': account.email,
        'smart_app_id': pha.email,
        'smart_record_id': record_id,
        }
    oauth_request = OAuthRequest(consumer=pha,
                                 token=None, # no access tokens: 2-legged request
                                 http_request=request,
                                 oauth_parameters=oauth_params)
    oauth_request.sign()
    auth_header = oauth_request.to_header()["Authorization"]

    return render_template('connect_credentials', 
                           { 'connect_token': connect_token,
                             'rest_token': rest_token,
                             'api_base': settings.SITE_URL_PREFIX,
                             'oauth_header': auth_header,
                             'app_email':pha.email}, 
                           type='xml')
                                 
USER_PREFS_EXTID = "%s_USER_PREFERENCES"

def get_user_preferences(request, account, pha):
    """ Get app-specific User Preferences for an account.

    We're just storing these as app-specific documents with a specific external ID.
    ID is "{account_id}_USER_PREFERENCES". Note that this will be further prepared
    by :py:meth:`~indivo.models.Document.prepare_external_id` before insertion into
    the database.

    """

    prefs_doc = _get_prefs_doc(account, pha)
    return HttpResponse(prefs_doc.content if prefs_doc else '', mimetype="text/plain")

def set_user_preferences(request, account, pha):
    """ Set app-specific User Preferences for an account.

    Overrides all existing preferences.

    """

    from indivo.views.documents.document import app_document_create_or_update_ext
    return app_document_create_or_update_ext(request, pha, USER_PREFS_EXTID%account.id)

def delete_user_preferences(request, account, pha):
    """ Delete all app-specific User Preferences for an account. """
    prefs_doc = _get_prefs_doc(account, pha)
    if prefs_doc:
        prefs_doc.delete()
    return DONE

def _get_prefs_doc(account, pha):
    from indivo.models import Document
    from indivo.views.documents.document import _get_document
    prepared_id = Document.prepare_external_id(USER_PREFS_EXTID%account.id, pha, pha_specific=True, record_specific=False)
    return _get_document(pha=pha, external_id=prepared_id)

########NEW FILE########
__FILENAME__ = audit
"""
.. module:: views.audit
   :synopsis: Indivo view implementations for audit-related calls.

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>
.. moduleauthor:: Ben Adida <ben@adida.net>

"""

import logging, copy
from base import *
from indivo.lib.view_decorators import marsloader, DEFAULT_ORDERBY
from indivo.lib.query import FactQuery, DATE, STRING, NUMBER
from indivo.models import Audit
from django.http import HttpResponseBadRequest, HttpResponse

AUDIT_FILTERS = {
  'record_id': ('record_id', STRING),
  'document_id': ('document_id', STRING),
  'external_id': ('external_id', STRING),
  'request_date': ('datetime', DATE),
  'function_name': ('view_func', STRING),
  'principal_email':('effective_principal_email', STRING),
  'proxied_by_email': ('proxied_by_email', STRING),
  DEFAULT_ORDERBY: ('datetime', DATE),
}

AUDIT_TEMPLATE = 'audit.xml'

@marsloader(query_api_support=True)
def audit_query(request, query_options,
                record=None):
  """ Select Audit Objects via the Query API Interface.

  Accepts any argument specified by the :doc:`/query-api`, and filters
  available audit objects by the arguments.

  Will return :http:statuscode:`200` with XML containing individual or
  aggregated audit records on succes, :http:statuscode:`400` if any of 
  the arguments to the query interface are invalid.

  """
  query_filters = copy.copy(query_options['filters'])
  if record:
    # Careful: security hole here.
    # /records/abc/audits/?record_id=bcd is dangerous
    # Eliminate that possibility
    if query_filters.has_key('record_id') and query_filters['record_id'] is not record.id:
      return HttpResponseBadRequest('Cannot make Audit queries over records not in the request url')
    
    query_filters['record_id'] = record.id
    query_options['filters'] = query_filters
    query_options['status'] = None #ignore status for audits
    
  q = FactQuery(Audit, AUDIT_FILTERS,
                query_options,
                record=None, carenet=None)
  try:
    # Don't display record_id in the output if it wasn't in the query string.
    q.execute()
    if q.query_filters.has_key('record_id') and not query_options['filters'].has_key('record_id'):
      del q.query_filters['record_id']
    
    return q.render(AUDIT_TEMPLATE)

  except ValueError as e:
    return HttpResponseBadRequest(str(e))

##################################
## DEPRECATED CALLS:             #
## Use Query API via audit_query #
##################################
@marsloader()
def audit_function_view(request, record, document_id, function_name, query_options):
  """ Return audits of calls to *function_name* touching *record* and *document_id*.

  Will return :http:statuscode:`200` with matching audits on succes, 
  :http:statuscode:`404` if *record* or *document_id* don't exist.

  .. deprecated:: 0.9.3
     Use :py:meth:`~indivo.views.audit.audit_query` instead.

  """

  try:
    audits = Audit.objects.filter(record_id=record.id,
                                  document_id=document_id, 
                                  view_func=function_name).order_by('-datetime')
                                  
    offset = query_options['offset']
    limit = query_options['limit']
    order_by = query_options['order_by']
    status = query_options['status']
    return render_template('reports/report', 
                           {'fobjs' : audits[offset:offset+limit],
                            'trc': len(audits),
                            'item_template': AUDIT_TEMPLATE,
                            'limit': limit,
                            'offset': offset,
                            'order_by': order_by,
                            'status': status}, 
                           type='xml')
  except:
    raise Http404


@marsloader()
def audit_record_view(request, record, query_options):
  """ Return audits of calls touching *record*.

  Will return :http:statuscode:`200` with matching audits on succes, 
  :http:statuscode:`404` if *record* doesn't exist.

  .. deprecated:: 0.9.3
     Use :py:meth:`~indivo.views.audit.audit_query` instead.

  """
  offset = query_options['offset']
  limit = query_options['limit']
  order_by = query_options['order_by']
  status = query_options['status']
  try:
    audits = Audit.objects.filter(record_id=record.id).order_by('-datetime')
    return render_template('reports/report', 
                           {'fobjs' : audits[offset:offset+limit],
                            'trc': len(audits),
                            'item_template': AUDIT_TEMPLATE,
                            'limit': limit,
                            'offset': offset,
                            'order_by': order_by,
                            'status': status}, 
                           type='xml')
  except:
    raise Http404


@marsloader()
def audit_document_view(request, record, document_id, query_options):
  """ Return audits of calls touching *record* and *document_id*.

  Will return :http:statuscode:`200` with matching audits on succes, 
  :http:statuscode:`404` if *record* or *document_id* don't exist.

  .. deprecated:: 0.9.3
     Use :py:meth:`~indivo.views.audit.audit_query` instead.

  """

  try:
    audits = Audit.objects.filter(record_id=record.id,
                                  document_id=document_id).order_by('-datetime')
                                  
    offset = query_options['offset']
    limit = query_options['limit']
    order_by = query_options['order_by']
    status = query_options['status']
    return render_template('reports/report', 
                           {'fobjs' : audits[offset:offset+limit],
                            'trc': len(audits),
                            'item_template': AUDIT_TEMPLATE,
                            'limit': limit,
                            'offset': offset,
                            'order_by': order_by,
                            'status': status}, 
                           type='xml')
  except:
    raise Http404

########NEW FILE########
__FILENAME__ = base
"""
.. module:: views.base
   :synopsis: Base includes for Indivo views.

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>
.. moduleauthor:: Ben Adida <ben@adida.net>

"""

from django.http import HttpResponse, HttpResponseRedirect, Http404, HttpResponseBadRequest
from django.core.exceptions import *
from django.core import serializers
from django.db import transaction

from indivo.models import *
from indivo.lib.view_decorators import marsloader, commit_on_200, handle_integrity_error

import logging, datetime

# SZ: standardize
from indivo.lib import utils
from indivo.lib.utils import render_template, render_template_raw

DONE = render_template('ok', {}, type="xml")

########NEW FILE########
__FILENAME__ = document
"""
.. module:: views.document.document
     :synopsis: Indivo view implementations related to document creation and listing.

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>
.. moduleauthor:: Ben Adida <ben@adida.net>

"""

import urllib2
import hashlib

from indivo.lib import utils

from indivo.views.base import *
from indivo.document_processing.document_utils import DocumentUtils
from indivo.document_processing.document_processing import DocumentProcessing

from django.db.models import Count
from django.db import IntegrityError, transaction


PHA, RECORD, CREATOR, MIME_TYPE, EXTERNAL_ID, ORIGINAL_ID, CONTENT, DIGEST, SIZE, TYPE, REPLACES, STATUS    = (
    'pha', 'record', 'creator', 'mime_type', 'external_id', 'original_id', 'content', 'digest', 'size', 'type', 'replaces', 'status')

##
## The following calls need to be optimized and not done at load time
##
def _set_doc_latest(doc):
    """ Set the 'latest version'-related fields on a document for rendering.

    This is computed at load-time before each rendering of document. It is 
    not pre-computed or stored in the DB.

    returns: None

    """

    docutils_obj = DocumentUtils()
    latest = docutils_obj.get_latest_doc(doc.id)
    doc.latest(latest.id, latest.created_at, latest.creator.email)

def _render_documents(docs, record, pha, tdc, format_type='xml'):
    """ Lowlevel document rendering to response data.

    **Arguments:**
    
    * *docs*: An iterable of 
        :py:class:`~indivo.models.records_and_documents.Document`
        objects to be rendered.

    * *record*: The 
        :py:class:`~indivo.models.records_and_documents.Record`
        that every document in *docs* belongs to.

    * *pha*: The
        :py:class:`~indivo.models.apps.PHA` that *docs* are 
        scoped to.

    * *tdc*: The total document count of objects to render (i.e., ``len(docs)``).
        This can be passed in to avoid recomputing the size of docs if that might
        be expensive (i.e., a QuerySet which would require an extra DB call).

    * *format_type*: The format to render into. Options are ``xml``.

    **Returns:** 

    * an HTTPResponse whose body is an XML string containing the rendered list of 
        documents (which might be empty).

    """

    if docs:
        for doc in docs:
            if doc.id:
                _set_doc_latest(doc)

    return utils.render_template('documents', {  'docs'      : docs, 
                                                                                             'record'    : record, 
                                                                                             'pha'       : pha, 
                                                                                             'tdc'       : tdc}, 
                                                                                                type=format_type)

def _get_document(record=None, carenet=None, document_id=None, pha=None, external_id=None):
    """ Fetch a document from the DB.
    
    EITHER *document_id* OR *external_id* must be provided (exclusive or). If a 
    document doesn't exist matching all passed arguments, this call returns None.

    **Arguments:**
    
    * *record*: if the document is record-specific, this
        :py:class:`~indivo.models.records_and_documents.Record`
        instance refers to the document's record.

    * *carenet*: if the document is being found via a carenet, this
        :py:class:`~indivo.models.share.Carenet`
        instance refers to the carenet containing the document. 

        .. warning::

             Carenet membership is NOT checked in this function. That security
             must be checked elsewhere.

    * *document_id*: the internal identifier for the document, if available.

        .. note::
             
             One of *external_id* or *document_id* MUST be passed to this function,
             or it cannot retrieve a unique document.

    * *pha*: if the document is application-specific, this
        :py:class:`~indivo.models.apps.PHA` instance refers to the 
        application to which the document pertains.

    * *external_id*: the external identifier for the document, if available. The
        identifier should already have been prepared using
        :py:meth:`~indivo.models.records_and_documents.Document.prepare_external_id`.
     
        .. note::
             
             One of *external_id* or *document_id* MUST be passed to this function,
             or it cannot retrieve a unique document.

    **Returns:**

    * An instance of 
        :py:class:`~indivo.models.records_and_documents.Document`,
        on success.

    * None, if a document satisfying all passed arguments could not be found.

    """
    if carenet:
        record = carenet.record
    
    doc = None
    try:
        if document_id:
            doc = Document.objects.get(record=record, pha=pha, id=document_id)
        elif external_id:
            doc = Document.objects.get(record=record, pha=pha, external_id=external_id)
    except Document.DoesNotExist:
        return None
    return doc

def _document_create(creator, content, pha, record,
                                         replaces_document=None, external_id=None, mime_type=None,
                                         status = None):
    """ Create an Indivo Document.

    This is the lowest-level creation function called for all record- and/or 
    app-specific documents.

    The PHA argument, if non-null, indicates app-specificity only. By this point, 
    the external_id should be fully formed.

    If status is specified, then it is used, otherwise it is not specified and 
    the model's default value is used (i.e. ``active``).

    This function creates a new model instance, processing the document if 
    necessary, and storing it in the database (or in the file system, if the
    document is binary).

    **Arguments:**

    * *creator*: The :py:class:`~indivo.models.base.Principal`
        instance that is responsible for creating the document.

    * *content*: The raw content (XML or binary) of the document to be created.

    * *pha*: if the document is application-specific, this
        :py:class:`~indivo.models.apps.PHA` instance refers to the 
        application to which the document pertains.
    
    * *record*: if the document is record-specific, this
        :py:class:`~indivo.models.records_and_documents.Record`
        instance refers to the document's record.

    * *replaces_document*: If the new document will overwrite (via in-place update
        or versioning) an existing document, this 
        :py:class:`~indivo.models.records_and_documents.Document`
        instance references the old document to be overwritten.

    * *external_id*: the external identifier to assing to the new document, 
        if available. The identifier should already have been prepared using
        :py:meth:`~indivo.models.records_and_documents.Document.prepare_external_id`.

    * *mime_type*: the mime type of the new document, i.e. 
        :mimetype:`application/xml`.

    * *status*: The initial status of the new document. ``active`` by default.
     
    **Returns:**

    * A new instance of 
        :py:class:`~indivo.models.records_and_documents.Document`,
        on success. If the document was updated in place, and no new document was
        created, the old document is returned.

    **Raises:**
    
    * :py:exc:`ValueError`: if the document doesn't validate.
    
    * :py:exc:`django.db.IntegrityError`: if the arguments to this function
        violate a database unique constraint (i.e., duplicate external id).

        .. warning::

             If an :py:exc:`IntegrityError` is raised, it will invalidate the 
             current database transaction. Calling functions should handle this
             case and rollback the current transaction.

    """

    new_doc = None

    # Overwrite content if we are replacing an existing PHA doc
    if pha and replaces_document:
        replaces_document.replace(content, mime_type)
    
    # Create new document
    else:
        creator = creator.effective_principal
        doc_args = {PHA         : pha,
                    RECORD      : record,
                    CREATOR     : creator,
                    MIME_TYPE   : mime_type,
                    EXTERNAL_ID : external_id,
                    REPLACES    : replaces_document,
                    CONTENT     : content,
                    ORIGINAL_ID : replaces_document.original_id if replaces_document else None
                }
        if status:
            doc_args[STATUS] = status

        # create the document
        new_doc = Document.objects.create(**doc_args)

    # return new doc if we have it, otherwise updated old doc
    return new_doc or replaces_document

def __local_document_create(request, record, pha, external_id, existing_doc):
    """ Create a document, or update one in place.

    This function serves 
    :py:meth:`~indivo.views.documents.document.document_create` and 
    :py:meth:`~indivo.views.documents.document.document_create_or_update`,
    which encompasses record- and/or app-specific documents.

    The external_id is expected to be already adjusted.

    **Arguments:**

    * *request*: The incoming Django HttpRequest object.

    * *record*: if the document is record-specific, this
        :py:class:`~indivo.models.records_and_documents.Record`
        instance refers to the document's record.

    * *pha*: if the document is application-specific, this
        :py:class:`~indivo.models.apps.PHA` instance refers to the 
        application to which the document pertains.  

    * *external_id*: the external identifier to assing to the new document, 
        if available. The identifier should already have been prepared using
        :py:meth:`~indivo.models.records_and_documents.Document.prepare_external_id`.

    * *existing_doc*: If the new document will overwrite (via in-place update
        or versioning) an existing document, this 
        :py:class:`~indivo.models.records_and_documents.Document`
        instance references the old document to be overwritten.

    **Returns:**

    * An HttpResponse object whose body is a string of XML describing the created 
        document, ready for return over the wire on success.

    * An instance of :py:class:`django.http.HttpResponseBadRequest` if the new
        document failed validation during the creation process.

    **Raises:**
    
    * :py:exc:`django.db.IntegrityError`: if the arguments to this function
        violate a database unique constraint (i.e., duplicate external id).

        .. warning::

             If an :py:exc:`IntegrityError` is raised, it will invalidate the 
             current database transaction. Calling functions should handle this
             case and rollback the current transaction.

    """

    try:
        doc = _document_create(record             = record, 
                               creator           = request.principal,
                               pha               = pha, 
                               content           = request.raw_post_data, 
                               external_id       = external_id,
                               replaces_document = existing_doc,
                               mime_type         = utils.get_content_type(request))
    except ValueError, e:
        return HttpResponseBadRequest("the document submitted is malformed:" + str(e))

    _set_doc_latest(doc)
    return utils.render_template('document', {'record': doc.record, 
                                            'doc'     : doc, 
                                            'pha'     : pha }) 


@commit_on_200
def document_create(request, record):
    """ Create a record-specific Indivo Document.

    Calls into 
    :py:meth:`~indivo.views.documents.document.__local_document_create`.

    """

    return __local_document_create(request, record, pha=None,
                                   external_id = None, existing_doc=None)

@commit_on_200
@handle_integrity_error('Duplicate external id. Each document requires a unique external id')
def document_create_by_ext_id(request, record, pha, external_id):
    """ Create a record-specific Indivo Document with an associated external id.

    Calls into 
    :py:meth:`~indivo.views.documents.document.__local_document_create`.

    """
    return  __local_document_create(request, record, pha=None,
                                                     external_id=Document.prepare_external_id(external_id, pha),
                                                     existing_doc=None)

@commit_on_200
def app_document_create_or_update(request, pha, document_id):
    """ Create or Overwrite an app-specific Indivo document.

    Calls into
    :py:meth:`~indivo.views.documents.document.document_create_or_update`.

    """

    return document_create_or_update(request, pha=pha, document_id=document_id)

@commit_on_200
def app_document_create(request, pha):
    """ Create an app-specific Indivo document.

    Calls into
    :py:meth:`~indivo.views.documents.document.document_create_or_update`.

    """

    return document_create_or_update(request, pha=pha)

@commit_on_200
def app_document_create_or_update_ext(request, pha, external_id):
    """ Create an app-specific Indivo document with an associated external id.

    Calls into
    :py:meth:`~indivo.views.documents.document.document_create_or_update`.

    """

    return document_create_or_update(request, pha, external_id=external_id)

@commit_on_200
def record_app_document_create(request, record, pha):
    """ Create a record-app-specific Indivo document.

    Calls into
    :py:meth:`~indivo.views.documents.document.document_create_or_update`.

    """

    return document_create_or_update(request, pha, record=record)

@commit_on_200
def record_app_document_create_or_update_ext(request, record, pha, external_id):
    """ Create or Overwrite a record-app-specific Indivo document with an associated external id.

    Calls into
    :py:meth:`~indivo.views.documents.document.document_create_or_update`.

    """
    return document_create_or_update(request, pha, record=record, external_id=external_id)

def document_create_or_update(request, pha, record=None, document_id=None, external_id=None):
    """ Create or Overwrite an app-specific or record-app-specific document, possibly with an associated external id.

    Prepares the external id, loads the existing document to overwrite, then
    calls into 
    :py:meth:`~indivo.views.documents.document.__local_document_create`.

    """

    existing_doc = None

    # set the external ID up properly
    full_external_id = Document.prepare_external_id(external_id, pha,
                                                    pha_specific=True, record_specific= (record != None))

    if document_id:
        existing_doc = _get_document(record=record, document_id=document_id, pha=pha)
    elif external_id:
        existing_doc = _get_document(record=record, pha=pha, external_id=full_external_id)

    return __local_document_create(request, record, pha, full_external_id, existing_doc)


def record_app_specific_document(request, record, pha, document_id):
    """ Retrieve a record-app-specific document. 
    
    Calls into :py:meth:`~indivo.views.documents.document.document`.

    """
    return document(request, document_id, record=record, pha=pha)


def app_specific_document(request, pha, document_id):
    """ Retrive an app-specific document.

    Calls into :py:meth:`~indivo.views.documents.document.document`.

    """

    return document(request, document_id, pha=pha)


def record_specific_document(request, record, document_id):
    """ Retrieve a record-specific document.

    Calls into :py:meth:`~indivo.views.documents.document.document`.

    """

    return document(request, document_id, record=record)

def document(request, document_id, record=None, pha=None):
    """ Retrieve a document, record- and/or app-specific. 

    **Arguments:**

    * *request*: the incoming Django HttpRequest object.

    * *document_id*: the internal identifier of the document to retrieve.

    * *record*: if the document is record-specific, this
        :py:class:`~indivo.models.records_and_documents.Record`
        instance refers to the document's record.

    * *pha*: if the document is application-specific, this
        :py:class:`~indivo.models.apps.PHA` instance refers to the 
        application to which the document pertains.  

    **Returns:**

    * An HttpResponse object whose body contains the raw content of the document 
        on success.

    **Raises:**
    
    * A :py:exc:`django.http.Http404` if the document could not be found.

    """

    document = _get_document(pha=pha, record=record, document_id=document_id)
    if not document \
        or (pha and document.pha != pha):
        raise Http404
    
    return _render_document(document)

def _render_document(document):
    """ Get the raw content of a document, ready to be sent over the wire.

    **Arguments:**

    * *document*: the
        :py:class:`~indivo.models.records_and_documents.Document`
        instance to render.
        
    **Returns:**

    * An HttpResponse object whose body contains the The raw content of the 
        document on success.

    """

    # no content, must be a file
    if not document.content:
        return HttpResponse(document.content_file, mimetype=document.mime_type)

    return HttpResponse(document.content, mimetype="application/xml")


@marsloader()
def app_document_list(request, pha, query_options):
    """ List app-specific documents.

    Calls into :py:meth:`~indivo.views.documents.document.document_list`.

    """

    return document_list(request, query_options, pha=pha)

@marsloader()
def record_document_list(request, record, query_options):
    """ List record-specific documents.

    Calls into :py:meth:`~indivo.views.documents.document.document_list`.

    """

    return document_list(request, query_options, record=record)

@marsloader()
def record_app_document_list(request, record, pha, query_options):
    """ List record-app-specific documents.

    Calls into :py:meth:`~indivo.views.documents.document.document_list`.

    """

    return document_list(request, query_options, record=record, pha=pha)

def document_list(request, query_options, record=None, pha=None):
    """ List Indivo documents.

    **Arguments:**

    * *request*: The incoming Django HttpRequest object. ``request.GET`` may contain:
    
        * *type*: The Indivo document schema type on which to filter the resut set. As 
            of 2010-08-16, type is no longer part of the URL, it's only in the GET
            query parameters.


    * *limit*, *offset*, *status*, *order_by*: Standard paging and filtering 
        arguments. See :py:func:`~indivo.lib.view_decorators.marsloader`
        or :doc:`/query-api`.

    * *record*: if desired documents are record-specific, this
        :py:class:`~indivo.models.records_and_documents.Record`
        instance refers to the record to filter on.

    * *pha*: if the desired documents are application-specific, this
        :py:class:`~indivo.models.apps.PHA` instance refers to the 
        app to filter on.

    **Returns:**

    * an HTTPResponse whose body is an XML string containing the rendered list of 
        documents (which might be empty), on success.

    **Raises:**
    
    * :py:exc:`django.http.Http404`: if *type* was passed, but didn't 
        correspond to an existing Indivo schema.

    """

    order_by = query_options['order_by']
    offset = query_options['offset']
    limit = query_options['limit']
    status = query_options['status']

    fqn = DocumentProcessing.expand_schema(request.GET.get('type', None))
    try:
        if fqn:
            try:
                if record:
                    docs = record.documents.filter(fqn=fqn, 
                                                   replaced_by=None, status=status, pha=pha).order_by(order_by)
                else:
                    docs = Document.objects.filter(fqn=fqn, 
                                                   pha=pha, replaced_by=None, status=status).order_by(order_by)
                return _render_documents(docs, record, pha, docs.count())
            except DocumentSchema.DoesNotExist:
                raise Http404
        docs = Document.objects.filter(record=record, 
                                       replaced_by=None, pha=pha, status=status).order_by(order_by)
    except:
        docs = []
    return _render_documents(docs[offset:offset+limit], record, pha, len(docs))

########NEW FILE########
__FILENAME__ = document_delete
"""
.. module:: views.document.document_delete
   :synopsis: Indivo view implementations related to document deletion.

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>
.. moduleauthor:: Ben Adida <ben@adida.net>

"""

from indivo.views.base import *
from indivo.views.documents.document import _get_document

def app_document_delete(request, pha, document_id):
  """ Delete an app-specific document. 

  No restrictions, since this storage is managed by the app.

  Calls into
  :py:meth:`~indivo.views.documents.document_delete._document_delete`.

  """

  return _document_delete(document_id, pha=pha)

def record_app_document_delete(request, record, pha, document_id):
  """ Delete a record-app-specific document. 

  No restrictions, since this storage is managed by the app.

  Calls into
  :py:meth:`~indivo.views.documents.document_delete._document_delete`.

  """

  return _document_delete(document_id, pha=pha, record=record)


def _document_delete(document_id, pha=None, record=None):
  """ Delete a document.

  **ARGUMENTS:**

  * *document_id*: The internal identifier of the document to delete.
  
  * *pha*: If the document to delete is scoped to an app, this
    :py:class:`~indivo.models.apps.PHA` instance refers to the app.

  * *record*: If the document to delete is scoped to a record, this
    :py:class:`~indivo.models.records_and_documents.Record` 
    instance refers to the record.
  
  **RETURNS:**
  
  * :http:statuscode:`200` on success.

  **RAISES:**
  
  * :py:exc:`django.http.Http404` if the arguments don't identify an existing
    document.

  """

  document = _get_document(record=record, pha=pha, document_id=document_id)
  if not document:
    raise Http404

  document.delete()
  return DONE

def documents_delete(request, record):
  """ Delete all documents associated with a record.

  **ARGUMENTS:**

  * *request*: The incoming Django HttpRequest object.
  
  * *record*: The 
    :py:class:`~indivo.models.records_and_documents.Record` to
    purge of documents.

  **RETURNS:**
  
  * :http:statuscode:`200` on success.

  """

  Document.objects.filter(record=record).delete()
  return DONE

########NEW FILE########
__FILENAME__ = document_label
"""
.. module:: views.document.document_label
   :synopsis: Indivo view implementations related to document labeling.

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>
.. moduleauthor:: Ben Adida <ben@adida.net>

"""

from indivo.views.base import *
from indivo.views.documents.document import _render_documents, _get_document

def app_document_label(request, pha, document_id):
  """ Set the label of an app-specific document.

  Calls into 
  :py:meth:`~indivo.views.documents.document_label._document_label`.

  """

  return _document_label(request, pha=pha, document_id=document_id, app_specific=True)


def record_app_document_label(request, record, pha, document_id):
  """ Set the label of a record-app-specific document.

  Calls into 
  :py:meth:`~indivo.views.documents.document_label._document_label`.

  """

  return _document_label(request, record=record, pha=pha, document_id=document_id, app_specific=True)


def record_document_label(request, record, document_id):
  """ Set the label of a record-specific document.

  Calls into 
  :py:meth:`~indivo.views.documents.document_label._document_label`.

  """

  return _document_label(request, record=record, document_id=document_id, app_specific=False)


def record_document_label_ext(request, record, document=None, external_id=None, pha=None, app_specific=False):
  """ Set the label of a record-specific document, specified by external id.

  Calls into 
  :py:meth:`~indivo.views.documents.document_label._document_label`.

  """

  return _document_label(request, record, document, external_id, pha, app_specific)

def _document_label(request, record=None, document_id=None, external_id=None, pha=None, app_specific=False):
  """ Set a document's label.

  **ARGUMENTS:**
  
  * *request*: The incoming Django HttpRequest object. ``request.POST`` must 
    consist of a raw string containing the new label to assign.
  
  * *record*: The 
    :py:class:`~indivo.models.records_and_documents.Record` that
    the document is scoped to, if applicable.

  * *document_id*: The internal identifier of the document to re-label.

    .. Note::

       One of *external_id* or *document_id* MUST be passed to this function, 
       or it cannot retrieve a unique document.

  * *external_id*: The external identifier of the document to re-label.

    .. Note::

       One of *external_id* or *document_id* MUST be passed to this function, 
       or it cannot retrieve a unique document.

  * *pha*: The :py:class:`~indivo.models.apps.PHA` object that the
    document is scoped to. Also serves to scope *external_id*, if present and
    *app_specific* is ``True``.

  * *app_specific*: Whether or not the document is app-specific. The mere presence
    of the *pha* argument isn't enough to satisfy this question, as *pha* might
    have been passed in only to scope an external id for a non-app-specific
    document.

  **RETURNS:**

  * An HttpResponse object with an XML string describing the re-labeled document
    on success.

  **RAISES:**

  * :py:exc:`django.http.Http404` if neither *document_id* nor *external_id*
    identify an existing document.

  """

  label = request.raw_post_data

  # Get the document
  full_external_id = Document.prepare_external_id(external_id, pha, pha_specific = app_specific)
  if not app_specific:
    pha = None
  document = _get_document(record=record, document_id=document_id, pha=pha, external_id=full_external_id)
    
  if not document:
    raise Http404

  document.label = label
  document.save()

  return _render_documents([document], record, pha, 1)

########NEW FILE########
__FILENAME__ = document_meta
"""
.. module:: views.document.document_meta
   :synopsis: Indivo view implementations related to document metadata

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>
.. moduleauthor:: Ben Adida <ben@adida.net>

"""

from indivo.views.base import *
from indivo.views.documents.document import _set_doc_latest, _get_document


def update_document_meta(request, record, document_id):
  """ Set metadata fields on a document. NOT IMPLEMENTED. """

  # Does Nothing
  return DONE


def carenet_document_meta(request, carenet, document_id):
  """ Fetch the metadata of a record-specific document via a carenet.

  Calls into 
  :py:meth:`~indivo.views.documents.document_meta._document_meta`.

  """

  document = _get_document(carenet=carenet, document_id=document_id)
  return _document_meta(carenet=carenet, document=document)


def record_document_meta(request, record, document_id):
  """ Fetch the metadata of a record-specific document.

  Calls into 
  :py:meth:`~indivo.views.documents.document_meta._document_meta`.

  """

  document = _get_document(record=record, document_id=document_id)
  return _document_meta(record=record, document=document)


def record_document_meta_ext(request, record, pha, external_id):
  """ Fetch the metadata of a record-specific document identified by external id.

  Calls into 
  :py:meth:`~indivo.views.documents.document_meta._document_meta`.

  """

  return _document_meta(record=record, pha=pha, external_id=external_id)


def app_document_meta(request, pha, document_id):
  """ Fetch the metadata of an app-specific document.

  Calls into 
  :py:meth:`~indivo.views.documents.document_meta._document_meta`.

  """
  """For 1:1 mapping of URLs to views. Calls _document_meta"""
  document = _get_document(pha=pha, document_id=document_id)
  return _document_meta(pha=pha, document=document, app_specific=True)

def app_document_meta_ext(request, pha, external_id):
  """ Fetch the metadata of an app-specific document identified by external id.

  Calls into 
  :py:meth:`~indivo.views.documents.document_meta._document_meta`.

  """

  return _document_meta(pha=pha, external_id=external_id, app_specific=True)


def record_app_document_meta(request, record, pha, document_id):
  """ Fetch the metadata of a record-app-specific document.

  Calls into 
  :py:meth:`~indivo.views.documents.document_meta._document_meta`.

  """

  document = _get_document(record=record, pha=pha, document_id=document_id)
  return _document_meta(record=record, document=document, pha=pha, app_specific=True)


def record_app_document_meta_ext(request, record, pha, external_id):
  """ Fetch the metadata of a record-app-specific document identified by external id.

  Calls into 
  :py:meth:`~indivo.views.documents.document_meta._document_meta`.

  """

  return _document_meta(record=record, pha=pha, external_id=external_id, app_specific=True)


def _document_meta(record=None, carenet=None, document=None, pha=None, external_id=None, app_specific=False):
  """ Fetch the metadata of a single document.
  
  Metadata includes:
  
  * id

  * date created
  
  * creator 

  * the document that replaced this one

  * the document that this one replaces

  * the original document in the version chain

  * the latest document in the version chain

  * label

  * current status

  * nevershare status

  * related documents
  

  **ARGUMENTS:**
  
  * *record*: The 
    :py:class:`~indivo.models.records_and_documents.Record` that
    the document is scoped to, if applicable.

  * *carenet*: The 
    :py:class:`~indivo.models.shares.Carenet` that
    the document is shared into, if applicable.

  * *document*: The document to get metadata for, if it has been prefetched.

    .. Note::

       One of *external_id* or *document* MUST be passed to this function, 
       or it cannot retrieve a unique document.

  * *pha*: The :py:class:`~indivo.models.apps.PHA` object that the
    document is scoped to. Also serves to scope *external_id*, if present and
    *app_specific* is ``True``.

  * *external_id*: The external identifier of the document to re-label.

    .. Note::

       One of *external_id* or *document* MUST be passed to this function, 
       or it cannot retrieve a unique document.

  * *app_specific*: Whether or not the document is app-specific. The mere presence
    of the *pha* argument isn't enough to satisfy this question, as *pha* might
    have been passed in only to scope an external id for a non-app-specific
    document.

  **RETURNS:**

  * An HttpResponse object with an XML string describing the document metadata
    on success.

  **RAISES:**

  * :py:exc:`django.http.Http404` if *document* isn't passed and *external_id*
    doesn't identify an existing document.

  """

  if carenet:
    record = carenet.record

  if not document:
    full_external_id = Document.prepare_external_id(external_id, pha=pha, 
                                                    pha_specific=app_specific, 
                                                    record_specific=(record is not None))
    if not full_external_id:
      raise Http404

    if not app_specific:
      pha = None
    document = _get_document(record=record, pha=pha, external_id=full_external_id)
    if not document:
      raise Http404

  _set_doc_latest(document)

  return render_template('single_document', {'doc' : document, 'record': document.record})

########NEW FILE########
__FILENAME__ = document_rels
"""
.. module:: views.document.document_rels
   :synopsis: Indivo view implementations related to document relations

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>
.. moduleauthor:: Ben Adida <ben@adida.net>

"""

from indivo.views.base import *
from indivo.views.documents.document import _document_create, _render_documents, _get_document

@marsloader()
def get_documents_by_rel(request, record, document_id, rel, query_options, pha=None):
  """ Get all documents related to the passed document_id by a relation of the passed relation-type.

  Includes relationships to other versions of *document_id*.
  Paging operators are NOT IMPLEMENTED.

  **ARGUMENTS:**

  * *request*: The incoming Django HttpRequest object.
  
  * *record*: The 
    :py:class:`~indivo.models.records_and_documents.Record` that
    the document is scoped to.

  * *document_id*: The internal document identifier for the source document.

  * *rel*: The relationship type to filter related documents by (as a string).

  * *limit*, *offset*, *status*, *order_by*: Standard paging and filtering 
    arguments. See :py:func:`~indivo.lib.view_decorators.marsloader`
    or :doc:`/query-api`.

    .. Note:: 
    
       Paging operators are not implemented for this call currently. Passing
       them into the function will have no effect on output.

  * *pha*: The :py:class:`~indivo.models.apps.PHA` object that the
    source document is scoped to, if applicable.

  **RETURNS:**

  * An HttpResponse object with an XML string listing related documents
    on success.

  **RAISES:**

  * :py:exc:`django.http.Http404` if *document_id*
    doesn't identify an existing document scoped to *record*.

  """
  # Need to add limit, offset, order_by
  document = _get_document(record=record, document_id=document_id)
  if not document:
    raise Http404

  tdc = 0
  try:
    relationship = DocumentSchema.objects.get(type=DocumentSchema.expand_rel(rel))
    docs = Document.objects.filter(record=record,
                                   status=query_options['status'],
                                   rels_as_doc_1__document_0__original=document.original_id, # doc is related to passed document
                                   rels_as_doc_1__relationship=relationship) # AND relation type is correct
    tdc = len(docs)
  except:
    docs = []
  return _render_documents(docs, record, pha, tdc)


def document_rels(request, record, document_id_0, rel, document_id_1):
  """ Create a new relationship between two existing documents.

  **ARGUMENTS:**

  * *request*: The incoming Django HttpRequest object.
  
  * *record*: The 
    :py:class:`~indivo.models.records_and_documents.Record` that
    the documents are scoped to.

  * *document_id_0*: The internal document identifier for the source document.

  * *rel*: The relationship type between the two documents (as a string).

  * *document_id_1*: The internal document identifier for the related document.

  **RETURNS:**

  * :http:statuscode:`200` on success.

  **RAISES:**

  * :py:exc:`django.http.Http404` if either *document_id_0* or *document_id_1*
    don't identify an existing document scoped to *record*, or if *rel* doesn't
    identify a valid relationship type.

  """
  try:
    document_0    = Document.objects.get(id = document_id_0)
    relationship  = DocumentSchema.objects.get(type= DocumentSchema.expand_rel(rel))
    document_1 = Document.objects.get(id = document_id_1)

    DocumentRels.objects.create(document_0=document_0, document_1=document_1, relationship=relationship)
  except Document.DoesNotExist:
    raise Http404
  except DocumentSchema.DoesNotExist:
    raise Http404
  return DONE


@transaction.commit_on_success
def document_create_by_rel(request, record, document_id, rel):
  """ Create a document and relate it to an existing document.

  Calls into :py:meth:`~indivo.views.documents.document_rels._document_create_by_rel`.

  """

  return _document_create_by_rel(request, record, document_id, rel)

@transaction.commit_on_success
def document_create_by_rel_with_ext_id(request, record, document_id, rel, pha, external_id):
  """ Create a document, assign it an external id, and relate it to an existing document.

  Calls into :py:meth:`~indivo.views.documents.document_rels._document_create_by_rel`.

  """

  return _document_create_by_rel(request, record, document_id, rel, pha, external_id)

def _document_create_by_rel(request, record, document_id, rel, pha=None, external_id=None):
  """ Create a document and relate it to an existing document.

  **ARGUMENTS:**

  * *request*: The incoming Django HttpRequest object. ``request.POST`` must
    contain the raw content of the new document.
  
  * *record*: The 
    :py:class:`~indivo.models.records_and_documents.Record` to
    which to scope the new document, and to which the source document is scoped.

  * *document_id*: The internal document identifier for the source document.

  * *rel*: The relationship type to establish between the source document and the
    new document (as a string).

  * *pha*: The :py:class:`~indivo.models.apps.PHA` object that 
    scopes the external_id, if present.

  * *external_id*: The external identifier to assign to the newly created document.

  **RETURNS:**

  * An HttpResponse object whose body is a string of XML describing the created 
    document, ready for return over the wire on success.

  * :http:statuscode:`400` if the new document content is invalid

  **RAISES:**

  * :py:exc:`django.http.Http404` if *document_id*
    doesn't identify an existing document scoped to *record*, or if
    *rel* doesn't identify a valid relationship type.  

  """

  old_doc = _get_document(record=record, document_id=document_id)
  if not old_doc:
    raise Http404

  # no rels in app-specific docs
  full_external_id = Document.prepare_external_id(external_id, pha=pha, pha_specific = False)

  try:
    # create the doc
    new_doc = _document_create( record = record, 
                                creator = request.principal,
                                pha = None,
                                content = request.raw_post_data,
                                external_id = full_external_id,
                                mime_type = utils.get_content_type(request))
    # create the rel
    DocumentRels.objects.create(document_0 = old_doc, 
                                document_1 = new_doc, 
                                relationship = DocumentSchema.objects.get(type=DocumentSchema.expand_rel(rel)))
  except DocumentSchema.DoesNotExist:
    raise Http404
  except ValueError as e:
    return HttpResponseBadRequest(str(e))
  return utils.render_template('document', {'record': new_doc.record, 
                                            'doc'     : new_doc,
                                            'pha'     : pha })

########NEW FILE########
__FILENAME__ = document_status
"""
.. module:: views.document.document_status
   :synopsis: Indivo view implementations related to document status.

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>
.. moduleauthor:: Ben Adida <ben@adida.net>

"""

from indivo.views.base import *
from indivo.views.documents.document import _get_document

@transaction.commit_on_success
def document_set_status(request, record, document_id):
  """ Set the status of a record-specific document.

  **ARGUMENTS:**
  
  * *request*: The incoming Django HttpRequest object. ``request.POST`` must 
    contain:
    
    * *status* The new status for the document. Must identify an existing
      :py:class:`~indivo.models.status.StatusName` object.
    
    * *reason* The reason for the status change
  
  * *record*: The 
    :py:class:`~indivo.models.records_and_documents.Record` that
    the document is scoped to.

  * *document_id*: The internal identifier of the document whose status is being
    altered.

  **RETURNS:**

  * :http:statuscode:`200` on success.

  * :http:statuscode:`400` if ``request.POST`` is missing arguments.

  **RAISES:**

  * :py:exc:`django.http.Http404` if *document_id* doesn't
    identify an existing document scoped to *record*.

  """

  document = _get_document(record=record, document_id=document_id)
  if not document:
    raise Http404

  status_str, reason_str = 'status', 'reason'
  try:
    document.set_status(request.principal, 
                        request.POST[status_str],
                        request.POST[reason_str])
  except:
    return HttpResponseBadRequest()

  return DONE

def document_status_history(request, record, document_id):
  """ List all changes to a document's status over time.

  **ARGUMENTS:**
  
  * *request*: The incoming Django HttpRequest object.
  
  * *record*: The 
    :py:class:`~indivo.models.records_and_documents.Record` that
    the document is scoped to.

  * *document_id*: The internal identifier of the document for which to get 
    status history.

  **RETURNS:**

  * A :py:class:`django.http.HttpResponse` object containing an XML string
    listing status changes for the document.

  **RAISES:**

  * :py:exc:`django.http.Http404` if *document_id* doesn't
    identify an existing document scoped to *record*.

  """

  document = _get_document(record=record, document_id=document_id)
  if not document:
    raise Http404

  return render_template('document_status_history', 
          { 'document_id'      : document.id,
            'document_history' : DocumentStatusHistory.objects.filter(
                                  record    = record.id, 
                                  document  = document.id)})

########NEW FILE########
__FILENAME__ = document_versions
"""
.. module:: views.document.document_versions
   :synopsis: Indivo view implementations related to document versioning.

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>
.. moduleauthor:: Ben Adida <ben@adida.net>

"""

from indivo.views.base import *
from indivo.views.documents.document import _document_create, _render_documents, _set_doc_latest, _get_document

@transaction.commit_on_success
def document_version(request, record, document_id):
  """ Create a new version of a record-specific document.

  Calls into 
  :py:meth:`~indivo.views.documents.document_versions._document_version`.

  """

  return _document_version(request, record, document_id)

@transaction.commit_on_success
def document_version_by_ext_id(request, record, document_id, pha, external_id):
  """ Create a new version of a record-specific document and assign it an external id.

  Calls into 
  :py:meth:`~indivo.views.documents.document_versions._document_version`.

  """

  return _document_version(request, record, document_id, pha=pha, external_id=external_id)

def _document_version(request, record, document_id, pha=None, external_id=None):
  """ Create a new version of a record-specific document. 

    **ARGUMENTS:**
  
  * *request*: The incoming Django HttpRequest object. ``request.POST`` must 
    consist of a raw string containing the new document content.
  
  * *record*: The 
    :py:class:`~indivo.models.records_and_documents.Record` to which
    the old document is scoped, and to which the new document will be scoped.

  * *document_id*: The internal identifier of the old document. The old document
    must be at the latest version, or the call will fail.

  * *external_id*: The external identifier to assign to the new document.

  * *pha*: The :py:class:`~indivo.models.apps.PHA` object used
    to scope *external_id*, if present.

  **RETURNS:**

  * An HttpResponse object with an XML string containing metadata on the new
    document on success.

  * :http:statuscode:`400` if the old document has previously been replaced 
    by a newer version.

  **RAISES:**

  * :py:exc:`django.http.Http404` if *document_id* doesn't
    identify an existing document, or if document creation fails (odd behavior).

  """

  old_document = _get_document(record=record, document_id=document_id)
  if not old_document:
    raise Http404

  # Can't version an already versioned document
  if old_document.replaced_by:
    return HttpResponseBadRequest("Can't version a document that has already been versioned. Get the latest version of the document.")


  full_external_id = Document.prepare_external_id(external_id, pha)
  try:
    new_doc = _document_create(record=record, 
                               creator=request.principal, 
                               content=request.raw_post_data,
                               replaces_document = old_document, 
                               pha=None,
                               external_id = full_external_id,
                               mime_type=utils.get_content_type(request))
  except:
    raise Http404

  _set_doc_latest(new_doc)
  return render_template('document', {'record'  : record, 
                                      'doc'     : new_doc, 
                                      'pha'     : None })



@marsloader()
def document_versions(request, record, document_id, query_options):
  """ Retrieve the versions of a document.

  **ARGUMENTS:**
  
  * *request*: The incoming Django HttpRequest object.
  
  * *record*: The 
    :py:class:`~indivo.models.records_and_documents.Record` to which
    the document is scoped.

  * *document_id*: The internal identifier of the document. 

  * *limit*, *offset*, *status*, *order_by*: Standard paging and filtering 
    arguments. See :py:func:`~indivo.lib.view_decorators.marsloader`
    or :doc:`/query-api`.

  **RETURNS:**

  * An HttpResponse object with an XML string containing metadata on all versions
    of the document, including the passed *document_id*, on success.

  **RAISES:**

  * :py:exc:`django.http.Http404` if *document_id* doesn't
    identify an existing document.

  """

  document = _get_document(record=record, document_id=document_id)
  if not document:
    raise Http404

  try:
    docs = Document.objects.filter( original  = document.original_id, 
                                    status    = query_options['status']).order_by(query_options['order_by'])
  except:
    raise Http404

  offset = query_options['offset']
  limit = query_options['limit']
  return _render_documents(docs[offset:offset+limit], record, None, len(docs))

########NEW FILE########
__FILENAME__ = special_documents
from indivo.views.base import *
from indivo.views.documents.document import _document_create, _set_doc_latest
from indivo.models import Demographics

def get_demographics(record_or_carenet):
  """ Fetch the demographics from either a record or a carenet.

  **ARGUMENTS:**

  * *record_or_carenet*: The 
    :py:class:`~indivo.models.records_and_documents.Record` or 
    :py:class:`~indivo.models.shares.Carenet` from which to fetch the demographics.

  **RETURNS:**

  * The demographics as a
    :py:class:`~indivo.models.Demographics`
    instance, if they exist.

  * ``None``, if *record* or *carenet* hasn't been assigned  demographics

  **RAISES:**

  * :py:exc:`ValueError` if *record_or_carenet* is None.

  """

  if record_or_carenet is None:
    raise ValueError("carenet or record must be non-null")

  the_doc = None
  the_doc = record_or_carenet.demographics
    
  return the_doc

def read_demographics(request, record):
  """ Read demographics from a record.

  Calls into 
  :py:meth:`~indivo.views.documents.special_documents._read_demographics`.
  
  """

  return _read_demographics(request, record)

def read_demographics_carenet(request, carenet):
  """ Read demographics from a carenet.

  Calls into 
  :py:meth:`~indivo.views.documents.special_documents._read_demographics`.

  """

  return _read_demographics(request, carenet)

def _read_demographics(request, record_or_carenet):
  """ Read demographics from a record or carenet.

  Calls into 
  :py:meth:`~indivo.views.documents.special_documents.get_demographics`.

  """
  demographics = get_demographics(record_or_carenet)
  if not demographics:
    raise Http404

  response_format = request.GET.get("response_format", 'application/rdf+xml')
  
  if response_format == 'application/rdf+xml':
      result = demographics.as_rdf()
  elif response_format == 'application/json':
      result = demographics.as_json()
  elif response_format == 'application/xml':
      result = demographics.as_xml()
  else:
      return HttpResponseBadRequest('format not supported')
  
  return HttpResponse(result,  mimetype=response_format)

@transaction.commit_on_success
def set_demographics(request, record):
  """ Create or update demographics on a record.

  **ARGUMENTS:**

  * *request*: The incoming Django HttpRequest object. ``request.POST`` must 
    consist of a raw string containing the demographics content.

  * *record*: The 
    :py:class:`~indivo.models.records_and_documents.Record` from 
    which to fetch the demographics.

  **RETURNS:**

  * a :py:class:`django.http.HttpResponse` containing Metadata XML on the
    newly created document. TODO: what should we return now that we have a model

  * :http:statuscode:`400` if the new demographics content didn't validate.

  """
  
  # grab existing demographics
  demographics = get_demographics(record)
  demographics_doc = (demographics.document if demographics else None)

  # build new demographics
  try:
    new_demographics = Demographics.from_xml(request.raw_post_data)
  except Exception as e:
    return HttpResponseBadRequest(str(e))  

  # this will do the right thing in terms of replacement
  try:
    new_doc = _document_create(record=record, 
                               creator=request.principal, 
                               content=request.raw_post_data,
                               pha=None,
                               replaces_document=demographics_doc)
    new_demographics.document = new_doc
  except:
    return HttpResponseBadRequest('Invalid document: special documents must be valid XML')
    
  # update the record pointer
  new_demographics.save()
  record.demographics = new_demographics
  record.save()
  #TODO: used to be changing the record label to reflect updated demographics

  _set_doc_latest(new_doc)
  return render_template('document', { 'record'  : record, 
                                              'doc'     : new_doc, 
                                              'pha'     : None})

########NEW FILE########
__FILENAME__ = messaging
"""
.. module:: views.messaging
   :synopsis: Indivo view implementations for messaging-related calls.

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>
.. moduleauthor:: Ben Adida <ben@adida.net>

"""

from base import *

import datetime

import markdown
from indivo.lib import mdx_linkexpander
from django.db import IntegrityError

def _get_subject(request):
  """Extract a message subject from request.POST."""

  subject = []
  subject.append(request.POST.get('subject', "[no subject]"))
  return ''.join(subject)

@transaction.commit_on_success
@handle_integrity_error('Duplicate external id. Each message requires a unique message_id')
def account_send_message(request, account):
  """ Send a message to an account.

  Account messages have no attachments for now, as we wouldn't know
  which record to store them on.

  request.POST may contain any of:

  * *message_id*: An external identifier for the message, used for idempotent sends.
    Defaults to ``None``.

  * *subject*: The message subject. Defaults to ``[no subject]``.

  * *body*: The message body. Defaults to ``[no body]``.

  * *severity*: The importance of the message. Options are ``low``, ``medium``,
    ``high``. Defaults to ``low``.

  After delivering the message to Indivo's inbox, this call will send an email to 
  the account's contact address, alerting them that a new message has arrived.

  Will return :http:statuscode:`200` on success, :http:statuscode:`400` if the
  passed *message_id* is a duplicate.
  
  """

  message = Message.objects.create( 
    account             = account, 
    sender              = request.principal, 
    recipient           = account, 
    external_identifier = request.POST.get('message_id', None), 
    subject             = _get_subject(request),
    body                = request.POST.get('body', "[no body]"),
    body_type           = request.POST.get('body_type', 'plaintext'),
    severity            = request.POST.get('severity', 'low'))
  
  account.notify_account_of_new_message()
  return render_template('_message', {'message' : message})

@transaction.commit_on_success
@handle_integrity_error('Duplicate external id. Each message requires a unique message_id')
def record_send_message(request, record, message_id):
  """ Send a message to a record.

  request.POST may contain any of:

  * *subject*: The message subject. Defaults to ``[no subject]``.

  * *body*: The message body. Defaults to ``[no body]``.

  * *body_type*: The formatting of the message body. Options are ``plaintext``,
    ``markdown``. Defaults to ``plaintext``.

  * *num_attachments*: The number of attachments this message requires. Attachments
    are uploaded with calls to 
    :py:meth:`~indivo.views.messaging.record_message_attach`, and 
    the message will not be delivered until all attachments have been uploaded.
    Defaults to 0.

  * *severity*: The importance of the message. Options are ``low``, ``medium``,
    ``high``. Defaults to ``low``.

  *message_id*: An external identifier for the message, used for idempotent sends.
    Defaults to ``None``.

  After delivering the message to the Indivo inbox of all accounts authorized to
  view messages for the passed *record*, this call will send an email to each 
  account's contact address, alerting them that a new message has arrived.

  Will return :http:statuscode:`200` on success, :http:statuscode:`400` if the
  passed *message_id* is a duplicate.
  
  """

  record.send_message(
    external_identifier = message_id, 
    sender              = request.principal.effective_principal,
    subject             = _get_subject(request),
    body                = request.POST.get('body',    '[no body]'),
    body_type           = request.POST.get('body_type',    'plaintext'),
    num_attachments     = request.POST.get('num_attachments', 0),
    severity            = request.POST.get('severity', 'low'))
  
  return DONE

@transaction.commit_on_success
@handle_integrity_error('Duplicate attachment number. Each attachment number must be unique and 1-indexed')
def record_message_attach(request, record, message_id, attachment_num):
  """ Attach a document to an Indivo message.

  Only XML documents are accepted for now. Since Message objects are duplicated
  for each recipient account, this call may attach the document to multiple
  Message objects.

  request.POST must contain the raw XML attachment data.

  *message_id*: The external identifier of the message to add the attachment to

  Will return :http:statuscode:`200` on success, :http:statuscode:`400` if the
  attachment with number *attachment_num* has already been uploaded.

  """

  # there may be more than one message here
  messages = Message.objects.filter(about_record = record, external_identifier = message_id)
  
  for message in messages:
    message.add_attachment(attachment_num, request.raw_post_data)

  return DONE

@marsloader()
def account_inbox(request, account, query_options):
  """ List messages in an account's inbox.

  Messages will be ordered by *order_by* and paged by *limit* and
  *offset*. request.GET may additionally contain:

  * *include_archive*: Adds messages that have been archived (which are
    normally omitted) to the listing. Any value will be interpreted as ``True``. 
    Defaults to ``False``, as if it weren't passed.

  Will return :http:statuscode:`200` with a list of messages on success.

  """

  messages = account.message_as_recipient.order_by(query_options['order_by'])

  if not request.GET.get('include_archive', False):
    messages = messages.filter(archived_at=None)

  return render_template('messages', {'messages' : messages})


def account_inbox_message(request, account, message_id):
  """ Retrieve an individual message from an account's inbox.

  This call additionally filters message content based on its
  body-type. For example, markdown content is scrubbed of 
  extraneous HTML, then converted to HTML content. Also, this
  call marks the message as read.

  *message_id* should be the internal identifier of the message

  Will return :http:statuscode:`200` with XML describing the message
  (id, sender, dates received, read, and archived, subject, body,
  severity, etc.) on success.

  """

  message = account.message_as_recipient.get(id = message_id)

  # if message not read, mark it read
  if not message.read_at:
    message.read_at = datetime.datetime.utcnow()
    message.save()

  # markdown
  if message.body_type == 'markdown':
    ext = mdx_linkexpander.MessageLinkExpanderExtension({
        'APP_BASE':'foobar',
        'message_id': message_id
        })
    message.body = markdown.Markdown(safe_mode=True, output_format='html4', extensions = [ext]).convert(message.body)

  return render_template('message', {'message' : message})


def account_inbox_message_attachment_accept(request, account, message_id, attachment_num):
  """ Accept a message attachment into the record it corresponds to.

  This call is triggered when a user views a message with an attachment, and 
  chooses to add the attachment contents into their record.

  Will return :http:statuscode:`200` on success, :http:statuscode:`410` if the 
  attachment has already been saved.

  """
  message = account.message_as_recipient.get(id = message_id)
  
  # this might fail, if the document doesn't validate
  try:
    message.get_attachment(int(attachment_num)).save_as_document(account)
  except ValueError as e:
    return HttpResponseBadRequest(str(e))
  else:
    return DONE

def account_message_archive(request, account, message_id):
  """ Archive a message.

  This call sets a message's archival date as now, unless it's already set. 
  This means that future calls to 
  :py:meth:`~indivo.views.messaging.account_inbox` will not
  display this message by default.
  
  Will return :http:statuscode:`200` on success.

  """

  message = account.message_as_recipient.get(id = message_id)
  if not message.archived_at:
    message.archived_at = datetime.datetime.utcnow()
    message.save()
  return DONE


@marsloader()
def account_notifications(request, account, query_options):
  """ List an account's notifications.

  Orders by *order_by*, pages by *limit* and *offset*.
  
  Will return :http:statuscode:`200` with a list of notifications on success.

  """

  notifications = Notification.objects.filter(account = account).order_by(query_options['order_by'])
  return render_template('notifications', {'notifications' : notifications})

########NEW FILE########
__FILENAME__ = pha
"""
.. module:: views.pha
 :synopsis: Indivo view implementations for userapp-related calls.

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>
.. moduleauthor:: Ben Adida <ben@adida.net>

"""

import urllib, urlparse
import logging

from base import *

from oauth.djangoutils import extract_request
from oauth import oauth
from indivo.views.documents.document import _get_document
from indivo.lib import iso8601
import base64, hmac, datetime

from django.utils import simplejson

def all_manifests(request):
    """ List SMART manifests for all available userapps.

    Will return :http:statuscode:`200` with a list of app manifests as JSON on success.

    """
    
    return _phas(request, smart_only=True)

def all_phas(request):
    """ List all available userapps.

    Will return :http:statuscode:`200` with a list of app manifests as JSON on success.

    """

    return _phas(request)

@utils.django_json
def _phas(request, smart_only=False):
    return PHA.queryset_as_manifests(PHA.objects.all(), smart_only=smart_only)

def pha(request, pha):
    """ Return a description of a single userapp.

    Will return :http:statuscode:`200` with the app's JSON manifest
    on success.
    
    """

    return _pha(request, pha)

def app_manifest(request, pha):
    """ Return a SMART manifest for a single userapp.

    Will return :http:statuscode:`200` with the app's JSON manifest
    on success.
    
    """
    return _pha(request, pha, smart_only=True)

@utils.django_json
def _pha(request, pha, smart_only=False):
    return pha.to_manifest(smart_only=smart_only, as_string=False)

def app_record_list(request, pha):
    """ Return a list of all records that have this pha enabled.

    Will return :http:statuscode`200` with a list of records on success.
 
    """

    records = Record.objects.filter(pha_shares__with_pha=pha)
    return render_template('record_list', {'records':records, 'full_shares':[], 'carenet_shares':[]})

def record_pha_enable(request, record, pha):
    """ Enable a userapp for a record.

    This is accomplished by adding a share between the record and the app.
    We don't limit the share to a carenet: this is scoped to the whole record.

    Will return :http:statuscode:`200` on success or if the share already exists, 
    :http:statuscode:`404` if either the record or the app doesn't exist.

    """

    # If this call isn't made by an Account, it's an admin priming the app. 
    # In that case, we'll leave authorized_by blank.
    auth_by = request.principal if request.principal.isType('Account') else None
    share, create_p = PHAShare.objects.get_or_create(record=record,
                                                     with_pha=pha,
                                                     defaults={'authorized_at': datetime.datetime.now(),
                                                               'authorized_by': auth_by})
    return DONE
    
def pha_record_delete(request, record, pha):
    """ Remove a userapp from a record.

    This is accomplished by deleting the app from all carenets belonging to
    the record, then removing the Shares between the record and the app.

    Will return :http:statuscode:`200` on success, :http:statuscode:`404` if
    either the record or the app don't exist.

    """

    try:
        # delete all the carenet placements of the app
        CarenetPHA.objects.filter(carenet__record = record, pha=pha).delete()

        # delete all the share objects that matter
        PHAShare.objects.filter(with_pha=pha, record=record.id).delete()
    except:
        raise Http404
    return DONE


def pha_delete(request, pha):
    """ Delete a userapp from Indivo.

    This call removes the app entirely from indivo, so it will never be
    accessible again. To remove an app just from a single record, see
    :py:meth:`~indivo.views.pha.pha_record_delete`.

    Will return :http:statuscode:`200` on success.

    """

    try:
        pha.delete()
    except:
        raise Http404
    return DONE
    
##
## OAuth Process
##

def request_token(request):
    """ Get a new request token, bound to a record or carenet if desired.

    request.POST may contain **EITHER**:

    * *indivo_record_id*: The record to which to bind the request token.
    
    * *indivo_carenet_id*: The carenet to which to bind the request token.

    Will return :http:statuscode:`200` with the request token on success,
    :http:statuscode:`403` if the oauth signature on the request was missing
    or faulty.

    """

    # ask the oauth server to generate a request token given the HTTP request
    try:
        # we already have the oauth_request in context, so we don't get it again
        from indivo.accesscontrol.oauth_servers import OAUTH_SERVER
        request_token = OAUTH_SERVER.generate_request_token(request.oauth_request, 
                                                            record_id = request.POST.get('indivo_record_id', None),
                                                            carenet_id = request.POST.get('indivo_carenet_id', None))
        return HttpResponse(request_token.to_string(), mimetype='text/plain')
    except oauth.OAuthError, e:
        # an exception can be raised if there is a bad signature (or no signature) in the request
        raise PermissionDenied()


def exchange_token(request):
    """ Exchange a request token for a valid access token.

    This call requires that the request be signed with a valid oauth request
    token that has previously been authorized.

    Will return :http:statuscode:`200` with the access token on success,
    :http:statuscode:`403` if the oauth signature is missing or invalid.

    """
    
    # ask the oauth server to exchange a request token into an access token
    # this will check proper oauth for this action

    try:
        from indivo.accesscontrol.oauth_servers import OAUTH_SERVER
        access_token = OAUTH_SERVER.exchange_request_token(request.oauth_request)
        # an exception can be raised if there is a bad signature (or no signature) in the request
    except:
        raise PermissionDenied()
    
    return HttpResponse(access_token.to_string(), mimetype='text/plain')

def autonomous_access_token(request, pha, record):
    """ Fetch an access token for an autonomous app to access a record.

    This call *assumes* that the app has already been enabled on the record, and 
    that the user has already authorized it (this must be checked in the access control 
    for the function). Otherwise, this will automatically enable the app on the record
    (a BAD idea).

    This call should be made by autonomous apps to get access tokens for records which
    have already enabled them (presumably after a call to app_record_list).

    Will return :http:statuscode:`200` with a valid access token for the app bound to the
    record on success.
   
    """

    from indivo.accesscontrol.oauth_servers import OAUTH_SERVER
    access_token = OAUTH_SERVER.generate_and_preauthorize_access_token(pha, record=record)
    return HttpResponse(access_token.to_string(), mimetype="application/x-www-form-urlencoded")

##
## OAuth internal calls
##

def session_create(request):
    """ Authenticate a user and register a web session for them.

    request.POST must contain:

    * *username*: the username of the user to authenticate.

    request.POST may contain **EITHER**:
    
    * *password*: the password to use with *username* against the
        internal password auth system.

    * *system*: An external auth system to authenticate the user
    
    Will return :http:statuscode:`200` with a valid session token 
    on success, :http:statuscode:`400` if no username was provided, :http:statuscode:`403` if the passed credentials were
    invalid or it the passed *system* doesn't exist.
    
    """

    from indivo.accesscontrol import auth
    user = None
    username = None
    password = None
    if request.POST.has_key('username'):
        username = request.POST['username']
    else:
        return HttpResponseBadRequest('No username provided')
    
    if request.POST.has_key('password'):
        password = request.POST['password']
        user = auth.authenticate(request, username, password)

        if not password and request.POST.has_key('system'):
                system = request.POST['system']
                try:
                        AuthSystem.objects.get(short_name=system)
                        user = auth.authenticate(request, username, None, system)
                except AuthSystem.DoesNotExist:
                        raise PermissionDenied()
    if not password and request.POST.has_key('system'):
        system = request.POST['system']
        try:
            AuthSystem.objects.get(short_name=system)
            user = auth.authenticate(request, username, None, system)
        except AuthSystem.DoesNotExist:
            raise PermissionDenied()

    if not user:
        raise PermissionDenied()

    if user.is_active:
        # auth worked, created a session based token
        from indivo.accesscontrol.oauth_servers import SESSION_OAUTH_SERVER
        token = SESSION_OAUTH_SERVER.generate_and_preauthorize_access_token(request.principal, user=user)
    else:
        logging.debug('indivo.views.pha.session_create(): This user is not active')
        raise PermissionDenied()
    
    return HttpResponse(str(token), mimetype='text/plain')


def request_token_claim(request, reqtoken):
    """ Claim a request token on behalf of an account.

    After this call, no one but ``request.principal`` will be able to
    approve *reqtoken*.

    Will return :http:statuscode:`200` with the email of the claiming principal
    on success, :http:statuscode:`403` if the token has already been claimed.

    """

    # already claimed by someone other than me?
    if reqtoken.authorized_by != None and reqtoken.authorized_by != request.principal:
        raise PermissionDenied()
    
    reqtoken.authorized_by = request.principal
    reqtoken.save()

    return HttpResponse(request.principal.email)


def request_token_info(request, reqtoken):
    """ Get information about a request token.

    Information includes: 

    * the record/carenet it is bound to
    
    * Whether the bound record/carenet has been authorized before
    
    * Information about the app for which the token was generated.

    Will return :http:statuscode:`200` with the info on success.
    
    """

    share = None

    try:
        if reqtoken.record:
            share = PHAShare.objects.get(record = reqtoken.record, with_pha = reqtoken.pha)
        elif reqtoken.carenet:
            # if there is a carenet, then we look up the corresponding record
            # and see if this app is already granted access to it.
            #
            # note that the user will still need to be in this carenet to approve
            # the request token
            share = PHAShare.objects.get(record = reqtoken.carenet.record, with_pha = reqtoken.pha)
    except PHAShare.DoesNotExist:
        pass

    return render_template('requesttoken', {'request_token':reqtoken, 'share' : share}, type='xml')


def request_token_approve(request, reqtoken):
    """ Indicate a user's consent to bind an app to a record or carenet.

    request.POST must contain **EITHER**:
    
    * *record_id*: The record to bind to.

    * *carenet_id*: The carenet to bind to.

    Will return :http:statuscode:`200` with a redirect url to the app on success,
    :http:statuscode:`403` if *record_id*/*carenet_id* don't match *reqtoken*.

    """

    record_id = request.POST.get('record_id', None)
    carenet_id = request.POST.get('carenet_id', None)
    
    record = None
    if record_id:
        record = Record.objects.get(id = record_id)

    carenet = None
    if carenet_id:
        carenet = Carenet.objects.get(id = carenet_id)

    # if the request token was bound to a record, then it must match
    if reqtoken.record != None and reqtoken.record != record:
        raise PermissionDenied()

    # if the request token was bound to a carenet
    if reqtoken.carenet != None and reqtoken.carenet != carenet:
        raise PermissionDenied()

    # the permission check that the current user is authorized to connect to this record
    # or to this carenet is already done in accesscontrol
    
    # authorize the request token
    from indivo.accesscontrol.oauth_servers import OAUTH_SERVER
    request_token = OAUTH_SERVER.authorize_request_token(reqtoken.token, record = record, carenet = carenet, account = request.principal)

    # where to redirect to + parameters
    redirect_url = request_token.oauth_callback or request_token.pha.callback_url
    redirect_url += "?oauth_token=%s&oauth_verifier=%s" % (request_token.token, request_token.verifier)

    # redirect to the request token's callback, or if null the PHA's default callback
    return HttpResponse(urllib.urlencode({'location': redirect_url}))

##
## PHA app storage: see views/documents/document.py
##

##
## signing URLs
##
def surl_verify(request):
    """ Verify a signed URL.
    
    The URL must contain the following GET parameters:
    
    * *surl_timestamp*: when the url was generated. Must be within the past hour,
        to avoid permitting old surls.

    * *surl_token* The access token used to sign the url.

    * *surl_sig* The computed signature (base-64 encoded sha1) of the url.

    Will always return :http:statuscode:`200`. The response body will be one of:
    
    * ``<result>ok</result>``: The surl was valid.

    * ``<result>old</result>``: The surl was too old.

    * ``<result>mismatch</result>``: The surl's signature was invalid.
    
    """

    OK = HttpResponse("<result>ok</result>", mimetype="application/xml")
    # May want to add more explanation here
    OLD = HttpResponse("<result>old</result>", mimetype="application/xml")
    MISMATCH = HttpResponse("<result>mismatch</result>", mimetype="application/xml")

    url = request.GET['url']
    parsed_url = urlparse.urlparse(url)
    query = urlparse.parse_qs(parsed_url.query)

    # check timestamp (cheapest thing to check, we check it first)
    url_timestamp = iso8601.parse_utc_date(query['surl_timestamp'][0])
    if (datetime.datetime.utcnow() - url_timestamp) > datetime.timedelta(hours=1):
        return OLD
    
    # generate the secret that should be used here
    try:
        token = AccessToken.objects.get(token = query['surl_token'][0])
    except AccessToken.DoesNotExist:
        return MISMATCH

    # compute the surl secret
    # the string conversion on the secret is required because of a python 2.6 bug
    secret = base64.b64encode(hmac.new(str(token.token_secret), "SURL-SECRET", hashlib.sha1).digest())

    # extract the signature
    surl_sig = query['surl_sig'][0]

    # remove the signature from the URL to verify the rest of it
    # technically this means the signature can be inserted in the middle of the URL,
    # but we'll live with that for now, it shouldn't present a problem
    url_without_sig = url.replace('&%s' % urllib.urlencode({'surl_sig': surl_sig}), '')

    expected_signature = base64.b64encode(hmac.new(secret, url_without_sig, hashlib.sha1).digest())
    
    if expected_signature == surl_sig:
        return OK
    else:
        return MISMATCH

########NEW FILE########
__FILENAME__ = record
"""
.. module: views.record
   :synopsis: Indivo view implementations for record-related calls.

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>
.. moduleauthor:: Ben Adida <ben@adida.net>

"""

#import libxml2
from lxml import etree

from indivo.lib import utils
from indivo.views.documents.document import _document_create
from base import *

from django.db.models import Q

ACTIVE_STATE = 'active'



@marsloader()
def record_list(request, account, query_options):
  """ List all available records for an account.

  This includes records that *account* owns, records that have been fully shared
  with *account*, and records that are shared with *account* via carenets.

  Will return :http:statuscode:`200` with a list of records on success.

  """

  records = account.records_owned_by.all()
  full_shares = account.fullshares_to.all()
  carenet_shares = account.carenetaccount_set.all()
  return render_template('record_list', {'records': records, 'full_shares' : full_shares, 'carenet_shares': carenet_shares})


def record_get_owner(request, record):
  """ Get the owner of a record.

  Will always return :http:statuscode:`200`. The response body will contain the
  owner's email address, or the empty string if the record is unowned.
  
  """

  owner_email = ""
  if record.owner:
    owner_email = record.owner.email
  return render_template('account_id', {'id': owner_email})


def record_set_owner(request, record):
  """ Set the owner of a record.

  request.POST must contain the email address of the new owner.

  Will return :http:statuscode:`200` with information about the new
  owner on success, :http:statuscode:`400` if request.POST is empty
  or the passed email address doesn't correspond to an existing principal.
  
  """

  try:
    record.owner = Principal.objects.get(email=request.raw_post_data)
    record.save()
  except Principal.DoesNotExist:
    logging.error('Post has no owner in body')
    return HttpResponseBadRequest()
  return render_template('account', {'account': record.owner})
    

def record(request, record):
  """ Get information about an individual record.

  Will return :http:statuscode:`200` with information about the record on
  success.

  """

  return render_template('record', {'record': record})

def record_search(request):
  """ Search for records by label (usually the same as full name).

  request.GET must contain the query parameters, any of:

  * *label*: The record's label

  This call returns all records matching any part of any of the 
  query parameters: i.e. it ORs together the query parameters and
  runs a partial-text match on each.

  Will return :http:statuscode:`200` with XML describing matching
  records on success, :http:statuscode:`400` if no query parameters 
  are passed.

  """

  label = request.GET.get('label', None)

  if not label:
    return HttpResponseBadRequest('No search criteria given')

  query_filter = Q()
  if label:
    query_filter |= Q(label__icontains=label)

  query = Record.objects.filter(query_filter)

  return render_template('record_list', {'records':query}, type='xml')
                                         
@utils.django_json
def record_phas(request, record):
  """ List userapps bound to a given record.

  request.GET may optionally contain:

  * *type*: An XML schema namespace. If specified, only apps which
    explicitly declare themselves as supporting that namespace will
    be returned.

  Will return :http:statuscode:`200` with a list of JSON manifests
  for the matching apps on success.

  """

  phas = record.phas

  # are we filtering by schema?
  type = request.GET.get('type', None)
  if type:
    schema = DocumentSchema.objects.get(type=type)
    phas = [pha for pha in phas if pha.schema == schema]

  # interpolate the the start_url_template into start_url
  manifests = []
  for pha in phas:
    pha.start_url = utils.url_interpolate(pha.start_url_template, {'record_id' : record.id})
    manifests.append(pha.to_manifest(as_string=False))

  return manifests

@utils.django_json
def record_pha(request, record, pha):
  """ Get information about a given userapp bound to a record.

  Will return :http:statuscode:`200` with a JSON manifest for the app on success,
  :http:statuscode:`404` if the app isn't actually bound to the record.

  """

  try:
    pha = record.pha_shares.get(with_pha__email = pha.email).with_pha
  except PHAShare.DoesNotExist:
    raise Http404
  pha.start_url = utils.url_interpolate(pha.start_url_template, {'record_id' : record.id})
  return pha.to_manifest(as_string=False)


def record_notify(request, record):
  """ Send a notification about a record to all accounts authorized to be notified.

  Notifications should be short alerts, as compared to full inbox messages, and
  may only be formatted as plaintext.

  request.POST must contain:

  * *content*: The plaintext content of the notification.

  request.POST may contain:

  * *document_id*: The document to which this notification pertains.

  * *app_url*: A callback url to the app for more information.

  Will return :http:statuscode:`200` on success, :http:statuscode:`400` if 
  *content* wasn't passed.

  """

  CONTENT = 'content'
  if request.POST.has_key(CONTENT):
    content = request.POST[CONTENT]
    record.notify(request.principal.effective_principal, 
                  content     = content, 
                  document_id = request.POST.get('document_id', None), 
                  app_url     = request.POST.get('app_url', None))
    # return the notification ID instead of DONE?
    return DONE
  else:
    return HttpResponseBadRequest()


def record_shares(request, record):
  """ List the shares of a record.

  This includes shares with apps (phashares) and full shares with accounts
  (fullshares).
  
  Will return :http:statuscode:`200` with a list of shares on success.

  """

  pha_shares = record.pha_shares.all()
  full_shares = record.fullshares.all()
  return render_template('shares', {'fullshares': full_shares, 'phashares':pha_shares, 'record': record})


def record_share_add(request, record):
  """ Fully share a record with another account.

  A full share gives the recipient account full access to all data and apps 
  on the record, and adds the recipient to the list of accounts who are alerted
  when the record gets a new alert or notification.

  request.POST must contain:

  * *account_id*: the email address of the recipient account.

  request.POST may contain:

  * *role_label*: A label for the share (usually the relationship between the
    record owner and the recipient account, i.e. 'Guardian')

  Will return :http:statuscode:`200` on success, :http:statuscode:`400` if
  *account_id* was not passed, and :http:statuscode:`404` if the passed
  *account_id* does not correspond to an existing Account.

  """

  ACCOUNT_ID = 'account_id'
  try:
    if request.POST.has_key(ACCOUNT_ID):
      other_account_id = request.POST[ACCOUNT_ID].lower().strip()
      account = Account.objects.get(email=other_account_id)
      RecordNotificationRoute.objects.get_or_create(account = account, record = record)
      share = AccountFullShare.objects.get_or_create(record = record, with_account = account, role_label = request.POST.get('role_label', None))
      return DONE
    else:
      return HttpResponseBadRequest()
  except Account.DoesNotExist:
    raise Http404
  except Principal.DoesNotExist:
    raise Http404


def record_share_delete(request, record, other_account_id):
  """ Undo a full record share with an account.
  
  Will return :http:statuscode:`200` on success, :http:statuscode:`404` if
  *other_account_id* doesn't correspond to an existing Account.

  """

  try:
    account = Account.objects.get(email=other_account_id.lower().strip())
    shares = AccountFullShare.objects.filter(record = record, with_account = account)
    shares.delete()
    # delete the message route
    routes = RecordNotificationRoute.objects.filter(record = record, account = account)
    routes.delete()
    return DONE
  except Account.DoesNotExist:
    raise Http404
  except Principal.DoesNotExist:
    raise Http404

@transaction.commit_on_success
def record_create(request, principal_email=None, external_id=None):
  """ Create a new record.

  For 1:1 mapping of URLs to views: just calls 
  :py:meth:`~indivo.views.record._record_create`.

  """
  
  return _record_create(request, principal_email, external_id)

@transaction.commit_on_success
def record_create_ext(request, principal_email=None, external_id=None):
  """ Create a new record with an associated external id.

  For 1:1 mapping of URLs to views: just calls 
  :py:meth:`~indivo.views.record._record_create`.

  """

  return _record_create(request, principal_email, external_id)

def _record_create(request, principal_email=None, external_id=None):
  """ Create an Indivo record.

  request.POST must contain raw XML that is a valid Indivo Demographics
  document (see :doc:`/schemas/demographics-schema`).
  
  This call will create a new record containing the following 
  information:

  * *creator*: Corresponds to ``request.principal``.

  * *label*: The full name of the new record, specified in the
    demographics document.

  * *owner*: Corresponds to ``request.principal``.

  * *external_id* An external identifier for the record, if 
    passed in.

  Additionally, this call will create a Demographics document for the record.

  Will return :http:statuscode:`200` with information about the record on
  success, :http:statuscode:`400` if the demographics data in request.POST was
  empty or invalid XML.
  
  """

  # If the xml data is not valid return an HttpResponseBadRequest Obj
  xml_data = request.raw_post_data
  try:
    etree.XML(xml_data)
  except:
    return HttpResponseBadRequest("Demographics XML not valid")

  demographics = Demographics.from_xml(xml_data)
  label = demographics.name_given + ' ' + demographics.name_family

  record_external_id = Record.prepare_external_id(external_id, principal_email)
    
  if external_id:
    record , created_p = Record.objects.get_or_create(
      external_id = record_external_id,
      defaults = {
        'creator' : request.principal,
        'label' : label,
        'owner' : request.principal})
  else:
    record = Record.objects.create(
      external_id = record_external_id,
      creator = request.principal,
      label = label,
      owner = request.principal)
    created_p = True

  # only set up the new demographics document if the record is new
  # otherwise just return the existing record
  if created_p:
    # Create default carenets for this particular record
    record.create_default_carenets()

    # Create the demographics document
    # use the same external ID as for the record
    # since those are distinct anyways
    doc_external_id = record_external_id

    doc = _document_create( record      = record,
                            creator     = request.principal,
                            pha         = None,
                            content     = xml_data,
                            external_id = doc_external_id)
      
    # set up demographics model and add it to the record
    demographics.document = doc
    demographics.save()
    record.demographics = demographics
    record.save()

  return render_template('record', {'record' : record}, type='xml')

@transaction.commit_on_success
def record_pha_setup(request, record, pha):
  """ Bind an app to a record without user authorization.

  This call should be used to set up new records with apps required
  for this instance of Indivo to run (i.e. syncer apps that connect to 
  data sources). It can only be made by admins, since it skips the
  normal app authorization process.

  ``request.POST`` may contain raw content that will be used
  as a setup document for the record.

  Will return :http:statuscode:`200` with a valid access token for the
  app bound to the record on success.
  
  """

  # TODO: eventually, when there are permission restrictions on a PHA, 
  # make sure that any permission restrictions on the current PHA are 
  # transitioned accordingly.

  content = request.raw_post_data

  # if there is a document, create it
  if content:
    # is there already a setup doc
    setup_docs = Document.objects.filter(record=record, pha=pha, external_id='SETUP')
    if len(setup_docs) == 0:
      new_doc = _document_create( record      = record,
                                  creator     = request.principal,
                                  pha         = pha,
                                  content     = content,
                                  external_id = Document.prepare_external_id('SETUP', pha, pha_specific=True, record_specific=True))

  # preauthorize the token.
  from indivo.accesscontrol.oauth_servers import OAUTH_SERVER
  access_token = OAUTH_SERVER.generate_and_preauthorize_access_token(pha, record=record)

  # return the token
  return HttpResponse(access_token.to_string(), mimetype="application/x-www-form-urlencoded")

########NEW FILE########
__FILENAME__ = ccr
"""
.. module:: views.reports.ccr
   :synopsis: Indivo view implementations for the CCR report.

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>
.. moduleauthor:: Ben Adida <ben@adida.net>

"""

from django.http import HttpResponseBadRequest
from indivo.lib.view_decorators import marsloader
from indivo.lib.utils import render_template
from indivo.lib.sharing_utils import carenet_facts_filter
from indivo.models import *

import datetime


def report_ccr(request, record=None, carenet=None):
  """ Export patient data as a Continuity of Care Record (CCR) document.
  
  Will return :http:statuscode:`200` with a CCR on success, 
  :http:statuscode:`400` if neither a record or carenet was passed.

  """

  if carenet:
    record = carenet.record
  if not record:
    return HttpResponseBadRequest()

  # FIXME: fix these carenet filters to be smarter

  active_status = StatusName.objects.get(name='active')

  medications = carenet_facts_filter(carenet,
                                     Medication.objects.select_related().filter(record=record, document__status=active_status))
  immunizations = carenet_facts_filter(carenet, 
                                       Immunization.objects.select_related().filter(record=record, 
                                                                                    document__status=active_status))
  vitalsigns = carenet_facts_filter(carenet,
                                    VitalSigns.objects.select_related().filter(record=record, 
                                                                           document__status=active_status))


  return render_template('reports/ccr', 
                         {'record': record, 'now': datetime.datetime.utcnow(),
                          'medications': medications,
                          'immunizations' : immunizations,
                          'vitalsigns' : vitalsigns},
                         type="xml")

########NEW FILE########
__FILENAME__ = equipment
"""
.. module:: views.reports.equipment
   :synopsis: Indivo view implementations for the equipment report.

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>
.. moduleauthor:: Ben Adida <ben@adida.net>

"""

from django.http import HttpResponseBadRequest, HttpResponse
from indivo.lib.view_decorators import marsloader, DEFAULT_ORDERBY
from indivo.lib.query import FactQuery, DATE, STRING, NUMBER
from indivo.models import Equipment

EQUIPMENT_FILTERS = {
  'date_started': ('date_started', DATE),
  'date_stopped': ('date_stopped', DATE),
  'equipment_name': ('name', STRING),
  'equipment_vendor': ('vendor', STRING),
  DEFAULT_ORDERBY : ('created_at', DATE)
}

EQUIPMENT_TEMPLATE = 'reports/equipment.xml'

def equipment_list(*args, **kwargs):
  """ List the equipment data for a given record.

  For 1:1 mapping of URLs to views. Just calls
  :py:meth:`~indivo.views.reports.equipment._equipment_list`.

  """

  return _equipment_list(*args, **kwargs)


def carenet_equipment_list(*args, **kwargs):
  """ List the equipment data for a given carenet.

  For 1:1 mapping of URLs to views. Just calls
  :py:meth:`~indivo.views.reports.equipment._equipment_list`.

  """

  return _equipment_list(*args, **kwargs)

@marsloader(query_api_support=True)
def _equipment_list(request, query_options,
                       record=None, carenet=None):
  """ List the equipment objects matching the passed query parameters.
  
  See :doc:`/query-api` for a listing of valid parameters.

  Will return :http:statuscode:`200` with a list of equipment on success,
  :http:statuscode:`400` if any invalid query parameters were passed.

  """

  q = FactQuery(Equipment, EQUIPMENT_FILTERS,
                query_options,
                record, carenet)
  try:
    return q.render(EQUIPMENT_TEMPLATE)
  except ValueError as e:
    return HttpResponseBadRequest(str(e))

########NEW FILE########
__FILENAME__ = generic
"""
.. module:: views.reports.generic
   :synopsis: Indivo view implementations for generic reports over any Model

.. moduleauthor:: Travers Franckle <travers.franckle@childrens.harvard.edu>

"""
from lxml import etree

from django.db.models.loading import get_model
from django.http import HttpResponseBadRequest, HttpResponse, Http404
from django.utils import simplejson

from indivo.lib.query import FactQuery
from indivo.lib.view_decorators import marsloader
from indivo.serializers.json import IndivoJSONEncoder

# map request content types to Model serialization types
SERIALIZATION_FORMAT_MAP = {
    'application/json': 'json',
    'application/xml': 'xml',
    'text/xml': 'xml',
    'application/rdf+xml': 'rdf',
}

def serialize(cls, format, query, record=None, carenet=None):
    """Serialize an indivo.lib.query to the requested format 
    
    Non-aggregate queries are handled by the data model's own serialization
    methods, while aggregate queries are serialized in a standard way to 
    AggregateReports
        
    **Returns:**
    
    * A string representation of the serialized query results in the requested 
      format
    
    """
     
    # aggregate queries
    if query.aggregate_by:
        return serialize_as_aggregate(format, query)
    
    # non-aggregate queries
    queryset = query.results
    result_count = query.trc
    method = "to_" + SERIALIZATION_FORMAT_MAP[format]
    if hasattr(cls, method):
        return getattr(cls, method)(queryset, result_count, record, carenet)
    else:
        raise ValueError("format not supported")

def serialize_as_aggregate(format, query):
    """Serialize an aggregate query to the requested format"""
    
    serialization_type = SERIALIZATION_FORMAT_MAP[format]
    results = None
    if serialization_type == 'xml':
        results = aggregate_xml(query)
    elif serialization_type == 'json':
        results = aggregate_json(query)
    else:
        raise ValueError("format not supported")
    
    return results

def aggregate_json(query):
    """Serialize an aggregate query's results to a JSON string"""
    
    results = []
    group_key = (query.group_by if query.group_by else query.date_group['time_incr']) 
    for row in query.results:
        row['__modelname__'] = 'AggregateReport'
        
        # rename the group key to 'group'
        row['group'] = row[group_key]
        del row[group_key]
        
        # rename 'aggregate_value' to 'value'
        row['value'] = row['aggregate_value']
        del row['aggregate_value']
        
        results.append(row)
        
    return simplejson.dumps(results, cls=IndivoJSONEncoder)
    
def aggregate_xml(query):
    """Serialize an aggregate query's results to an XML string"""
    
    root = etree.Element("AggregateReports")
    group_key = (query.group_by if query.group_by else query.date_group['time_incr']) 
    for row in query.results:
        row_element = etree.Element("AggregateReport", 
                                    value = str(row['aggregate_value']),
                                    group = row[group_key])
        root.append(row_element)
        
    return etree.tostring(root)

@marsloader(query_api_support=True)
def generic_list(request, query_options, data_model, record=None, carenet=None, response_format=None):
  """ List the Model data for a given record.

  """

  return _generic_list(request, query_options, data_model, record, carenet, response_format)

@marsloader(query_api_support=True)
def carenet_generic_list(request, query_options, data_model, record=None, carenet=None, response_format=None):
  """ List the Model data for a given carenet.

  """

  return _generic_list(request, query_options, data_model, record, carenet, response_format)


def _generic_list(request, query_options, data_model, record=None, carenet=None, response_format=None):
  """ List the Model objects matching the passed query parameters.
  
  See :doc:`/query-api` for a listing of valid parameters.

  Will return :http:statuscode:`200` with a list of Models or AggregateReports 
  on success, :http:statuscode:`400` if any invalid query parameters were passed.

  """
  # check requested format
  if not response_format:
      response_format = request.GET.get("response_format", 'application/json')
  
  if not SERIALIZATION_FORMAT_MAP.has_key(response_format):
      # unsupported format
      return HttpResponseBadRequest("format not supported")
  
  # look up model
  model_class = get_model('indivo', data_model)
  if model_class is None:
      # model not found
      raise Http404

  # build query
  model_filters =  model_class.filter_fields # TODO: possible to make a lazy class property?
  query = FactQuery(model_class, 
                model_filters,
                query_options,
                record, 
                carenet)
  try:
      query.execute()
      data = serialize(model_class, response_format, query, record, carenet)
      return HttpResponse(data, mimetype=response_format)
  except ValueError as e:
    return HttpResponseBadRequest(str(e))

########NEW FILE########
__FILENAME__ = measurement
"""
.. module:: views.reports.measurement
   :synopsis: Indivo view implementations for the measurement report.

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>
.. moduleauthor:: Ben Adida <ben@adida.net>

"""

from django.http import HttpResponseBadRequest, HttpResponse
from indivo.lib.view_decorators import marsloader, DEFAULT_ORDERBY
from indivo.lib.query import FactQuery, DATE, STRING, NUMBER
from indivo.models import Measurement
import copy

MEASUREMENT_FILTERS = {
  'lab_code' : ('type', STRING),
  'value' : ('value', NUMBER),
  'date_measured' : ('datetime', DATE),
  DEFAULT_ORDERBY : ('created_at', DATE)
}

MEASUREMENT_TEMPLATE = 'reports/measurement.xml'

def measurement_list(*args, **kwargs):
  """ List the measurement data for a given record.

  For 1:1 mapping of URLs to views. Just calls
  :py:meth:`~indivo.views.reports.measurement._measurement_list`.

  """

  return _measurement_list(*args, **kwargs)

def carenet_measurement_list(*args, **kwargs):
  """ List the measurement data for a given carenet.

  For 1:1 mapping of URLs to views. Just calls
  :py:meth:`~indivo.views.reports.measurement._measurement_list`.

  """
  return _measurement_list(*args, **kwargs)

@marsloader(query_api_support=True)
def _measurement_list(request, query_options, lab_code,
                      record=None, carenet=None):
  """ List the measurement objects matching the passed query parameters.
  
  See :doc:`/query-api` for a listing of valid parameters.

  Will return :http:statuscode:`200` with a list of measurements on success,
  :http:statuscode:`400` if any invalid query parameters were passed.

  """
  # lab_code comes in as part of the url
  if lab_code:
      query_options['filters']['lab_code'] = lab_code
  
  q = FactQuery(Measurement, MEASUREMENT_FILTERS,
                query_options,
                record, carenet)
  try:
    # hack, so we don't display lab_code in the output if it wasn't in the query string.
    q.execute()
    if q.query_filters.has_key('lab_code') and not query_options['filters'].has_key('lab_code'):
      del q.query_filters['lab_code']

    return q.render(MEASUREMENT_TEMPLATE)
  except ValueError as e:
    return HttpResponseBadRequest(str(e))

########NEW FILE########
__FILENAME__ = procedure
"""
.. module:: views.reports.procedure
   :synopsis: Indivo view implementations for the procedure report.

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>
.. moduleauthor:: Ben Adida <ben@adida.net>

"""

from django.http import HttpResponseBadRequest, HttpResponse
from indivo.lib.view_decorators import marsloader, DEFAULT_ORDERBY
from indivo.lib.query import FactQuery, DATE, STRING, NUMBER
from indivo.models import Procedure

PROCEDURE_FILTERS = {
  'procedure_name' : ('name', STRING),
  'date_performed': ('date_performed', DATE),
  DEFAULT_ORDERBY : ('created_at', DATE)
}

PROCEDURE_TEMPLATE = 'reports/procedure.xml'

def procedure_list(*args, **kwargs):
  """ List the procedure data for a given record.

  For 1:1 mapping of URLs to views. Just calls
  :py:meth:`~indivo.views.reports.procedure._procedure_list`.

  """

  return _procedure_list(*args, **kwargs)

def carenet_procedure_list(*args, **kwargs):
  """ List the procedure data for a given carenet.

  For 1:1 mapping of URLs to views. Just calls
  :py:meth:`~indivo.views.reports.procedure._procedure_list`.

  """
  
  return _procedure_list(*args, **kwargs)

@marsloader(query_api_support=True)
def _procedure_list(request, query_options,
                    record=None, carenet=None):
  """ List the procedure objects matching the passed query parameters.
  
  See :doc:`/query-api` for a listing of valid parameters.

  Will return :http:statuscode:`200` with a list of procedures on success,
  :http:statuscode:`400` if any invalid query parameters were passed.

  """

  q = FactQuery(Procedure, PROCEDURE_FILTERS,
                query_options,
                record, carenet)

  try:
    return q.render(PROCEDURE_TEMPLATE)
  except ValueError as e:
    return HttpResponseBadRequest(str(e))

########NEW FILE########
__FILENAME__ = simple_clinical_notes
"""
.. module:: views.reports.simple_clinical_notes
   :synopsis: Indivo view implementations for the simple_clinical_notes report.

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>
.. moduleauthor:: Ben Adida <ben@adida.net>

"""


from django.http import HttpResponseBadRequest, HttpResponse
from indivo.lib.view_decorators import marsloader, DEFAULT_ORDERBY
from indivo.lib.query import FactQuery, DATE, STRING, NUMBER
from indivo.models import SimpleClinicalNote

SIMPLE_CLINICAL_NOTE_FILTERS = {
  'specialty' : ('specialty', STRING),
  'provider_name' : ('provider_name', STRING),
  'date_of_visit': ('date_of_visit', DATE),
  DEFAULT_ORDERBY : ('created_at', DATE)
}

SIMPLE_CLINICAL_NOTE_TEMPLATE = 'reports/simple_clinical_note.xml'

def simple_clinical_notes_list(*args, **kwargs):
  """ List the simple_clinical_notes data for a given record.

  For 1:1 mapping of URLs to views. Just calls
  :py:meth:`~indivo.views.reports.simple_clinical_notes._simple_clinical_notes_list`.

  """

  return _simple_clinical_notes_list(*args, **kwargs)

def carenet_simple_clinical_notes_list(*args, **kwargs):
  """ List the simple_clinical_notes data for a given carenet.

  For 1:1 mapping of URLs to views. Just calls
  :py:meth:`~indivo.views.reports.simple_clinical_notes._simple_clinical_notes_list`.

  """

  return _simple_clinical_notes_list(*args, **kwargs)

@marsloader(query_api_support=True)
def _simple_clinical_notes_list(request, query_options,
                              record=None, carenet=None):
  """ List the simple_clinical_notes objects matching the passed query parameters.
  
  See :doc:`/query-api` for a listing of valid parameters.

  Will return :http:statuscode:`200` with a list of simple clinical notes on 
  success, :http:statuscode:`400` if any invalid query parameters were passed.

  """  
  
  q = FactQuery(SimpleClinicalNote, SIMPLE_CLINICAL_NOTE_FILTERS,
                query_options,
                record, carenet)
  try:
    return q.render(SIMPLE_CLINICAL_NOTE_TEMPLATE)
  except ValueError as e:
    return HttpResponseBadRequest(str(e))

########NEW FILE########
__FILENAME__ = smart
"""
.. module:: views.reports.smart
   :synopsis: Indivo view implementations for SMART reports.

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>

"""

from django.http import HttpResponseBadRequest, HttpResponse, Http404, HttpResponseServerError
from django.db.models.loading import get_model
from indivo.lib.view_decorators import DEFAULT_ORDERBY
from indivo.lib.query import FactQuery
from indivo.lib.rdf import PatientGraph
from indivo.models import StatusName, Allergy, AllergyExclusion
from .generic import _generic_list

SMART_URLS_TO_DATAMODELS = {
    'problems': 'Problem',
    'encounters': 'Encounter',
    'allergies': 'Allergy',
    'fulfillments': 'Fill', 
    'immunizations': 'Immunization',
    'lab_results': 'LabResult',
    'medications': 'Medication',
    'vital_signs': 'VitalSigns',
}

def get_default_query_args():
    return {
        'offset': 0,
        'order_by': '-%s'%DEFAULT_ORDERBY,
        'status': StatusName.objects.get(name='active'),
        'group_by': None,
        'aggregate_by': None,
        'date_range': None,
        'date_group': None,
        'filters': {},
        }

def smart_generic(request, record, model_name):
    """ SMART-compatible alias for the generic list view: returns data_models serialized as SMART RDF."""

    default_query_args = get_default_query_args()
    data_model_name = SMART_URLS_TO_DATAMODELS.get(model_name, None)
    if not data_model_name:
        raise Http404
    return _generic_list(request, default_query_args, data_model_name, response_format="application/rdf+xml", record=record)

def smart_allergies(request, record):
    """ SMART allergy list, serialized as RDF/XML.
    
    A bit more complicated than the generic list view, since we have to serialize AllergyExclusions as well.
    
    """

    default_query_args = get_default_query_args()  
    allergies_query = FactQuery(Allergy, Allergy.filter_fields, default_query_args, record, None)
    exclusions_query = FactQuery(AllergyExclusion, AllergyExclusion.filter_fields, default_query_args, record, None)
    
    try:
        allergies_query.execute()
        exclusions_query.execute()
    except ValueError as e:
        return HttpResponseBadRequest(str(e))
    
    graph = PatientGraph(record)
    graph.addAllergyList(allergies_query.results.iterator())
    graph.addAllergyExclusions(exclusions_query.results.iterator())
    return HttpResponse(graph.toRDF(), mimetype='application/rdf+xml')

def smart_generic_instance(request, record, model_name, model_id):
    """Retrieve a specific instance of a SMART model."""
    data_model_name = SMART_URLS_TO_DATAMODELS.get(model_name, None)
    if not data_model_name:
        # model mapping not found
        raise Http404
    model_class = get_model('indivo', data_model_name)
    if model_class is None:
        # model class not found
        raise Http404
    try:
        # we use .filter here instead of .get_object_or_404 so we have a QuerySet 
        # for serialization
        model_instance = model_class.objects.filter(id=model_id)
        if model_instance.count() == 1:
            # found
            data = model_class.to_rdf(model_instance, 1, record)
            return HttpResponse(data, mimetype='application/rdf+xml')
        elif model_instance.count() > 1:
            # more than a single instance found
            return HttpResponseServerError()
        else:
            # not found
            raise Http404
    except ValueError as e:
        return HttpResponseBadRequest(str(e))
    
def smart_allergies_instance(request, record, model_id):
    """Retrieve a specific instance of a SMART allergy.
    
    SMART allergies can be an Allergy or an AllergyExclusion
    
    """
    try:
        # Allergy and AllergyExclusion IDs are non-overlapping, so we can search
        # for them sequentially
        instance = Allergy.objects.filter(id=model_id)
        if instance.count() == 1:
            data = Allergy.to_rdf(instance, 1, record)
        else:
            instance = AllergyExclusion.objects.filter(id=model_id)
            if instance.count() == 1:
                data = AllergyExclusion.to_rdf(instance, 1, record)
            else:
                raise Http404
    except ValueError as e:
        return HttpResponseBadRequest(str(e))
    
    return HttpResponse(data, mimetype='application/rdf+xml')

########NEW FILE########
__FILENAME__ = shares_account
"""
.. module:: views.sharing.shares_account
   :synopsis: Indivo view implementations related to sharing with accounts.

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>
.. moduleauthor:: Ben Adida <ben@adida.net>

"""

from indivo.views.base import *
from django.http import HttpResponseBadRequest
from django.core.exceptions import PermissionDenied

def carenet_account_create(request, carenet):
  """ Add an account to a carenet.
  
  request.POST must contain:
  
  * *account_id*: The email of the account to share with.

  * *write*: Whether or not the account can write to the 
    carenet. Can be ``'true'`` or ``'false'``. This is currently
    unused, as carenets are read-only, however it must be provided
    anyways.

  Will return :http:statuscode:`200` on success, :http:statuscode:`404`
  if the specified *account_id* doesn't exist, or :http:statuscode:`400`
  if either *account_id* or *write* is not in request.POST.

  """

  ACCOUNT_ID = 'account_id'
  if request.POST.has_key(ACCOUNT_ID) and \
      request.POST.has_key('write'):
    account_id = request.POST[ACCOUNT_ID].lower().strip()
    try:
      carenets = CarenetAccount.objects.create(
                    carenet = carenet,
                    account = Account.objects.get(email=account_id),
                    can_write = (request.POST['write'] == 'true')
                  )
    except Carenet.DoesNotExist:
      raise Http404
    except Account.DoesNotExist:
      raise Http404
  else:
    return HttpResponseBadRequest()
  return DONE


def carenet_account_list(request, carenet):
  """ List the accounts in a carenet.
  
  Will return :http:statuscode:`200` with a list of accounts on success.

  """

  carenet_accounts = CarenetAccount.objects.select_related().filter(carenet=carenet)

  return render_template('carenet_accounts', {'carenet_accounts' : carenet_accounts}, type="xml")


def carenet_account_delete(request, account, carenet):
  """ Remove an account from a carenet.
  
  Will return :http:statuscode:`200` on success.

  """

  try:
    CarenetAccount.objects.get(
                    account=account, 
                    carenet=carenet).delete()
    return DONE
  except Carenet.DoesNotExist:
    raise Http404
  except Account.DoesNotExist:
    raise Http404


def carenet_account_permissions(request, carenet, account):
  """ List the permissions of an account within a carenet.
  
  Currently, carenets are read-only and accounts can access
  all documents within a carenet, so this call returns static
  XML indicating blanket access.

  Will return :http:statuscode:`200` with the static XML on success.

  """

  # For now, using a static template 
  # since an account has access to all documents within a carenet
  return render_template('permissions', {}, type="xml")


def account_permissions(request, account):
  """ List the carenets that an account has access to.
  
  Will return :http:statuscode:`200` with a list of carenets on success.

  """

  # Since we want to preserve uniqueness we map the carenet accounts list to a dict
  carenets = {}
  map(carenets.__setitem__, 
      [cna.carenet for cna in CarenetAccount.objects.select_related().filter(
        account = account)], [])
  map(carenets.__setitem__,
      [cn for cn in Carenet.objects.select_related().filter(record__owner = account)], [])
  return render_template('carenets', { 'carenets'  : carenets.keys(), 
                                       'record'    : None}, type="xml")

########NEW FILE########
__FILENAME__ = shares_autoshare
"""
.. module:: views.sharing.shares_autoshare
   :synopsis: Indivo view implementations related to autoshares of documents.

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>
.. moduleauthor:: Ben Adida <ben@adida.net>

"""

from indivo.views.base import *
from django.http import HttpResponseBadRequest
from django.core.exceptions import PermissionDenied
from indivo.document_processing.document_processing import DocumentProcessing

def carenet_nevershare(request, document_id):
  # Not Yet Implemented
  #CarenetNeverShare.objects.create(document=Document.objects.get(id=document_id))
  return Done


def autoshare_list(request, record):
  """ For a single record, list all carenets that a given doctype is autoshared with.
  
  request.GET must contain:
  
  * *type*: the document schema namespace to check autoshares for

  Will return :http:statuscode:`200` with a list of carenets that have an autoshare
  set up for doctype *type* on success, :http:statuscode:`404`
  if the specified *type* doesn't exist.

  """

  TYPE = 'type'
  autoshares = []
  if request.GET.has_key(TYPE):
    try:
      docschema = DocumentSchema.objects.get(type = DocumentProcessing.expand_schema(request.GET[TYPE]))
    except DocumentSchema.DoesNotExist:
      raise Http404
    carenets = [autoshare.carenet for autoshare in CarenetAutoshare.objects.select_related().filter(
                  record = record, type = docschema)]
  return render_template('carenets', {  'carenets'  : carenets, 
                                        'record'    : record}, type="xml")


def autoshare_list_bytype_all(request, record):
  """ For a single record, list all doctypes autoshared into carenets.
  
  Will return :http:statuscode:`200` with a list of doctypes and the
  carenets that have an autoshare for each doctype on success.

  """

  autoshares = CarenetAutoshare.objects.select_related().filter(record = record).order_by('type')

  # group them by type
  autoshares_by_type = {}
  
  for autoshare in autoshares:
    if not autoshares_by_type.has_key(autoshare.type):
      autoshares_by_type[autoshare.type] = []

    autoshares_by_type[autoshare.type].append(autoshare)

  return render_template('all_autoshares_bytype', {  'autoshares_by_type'  : autoshares_by_type, 
                                        'record'    : record}, type="xml")


def autoshare_create(request, record, carenet):
  """ Automatically share all documents of a certain type into a carenet.
  
  request.POST must contain:
  
  * *type*: the document schema namespace to create an autoshare for

  Will return :http:statuscode:`200` on sucess, :http:statuscode:`404`
  if the specified *type* doesn't exist.

  """

  TYPE = 'type'
  if request.POST.has_key(TYPE):
    try:
      docschema = DocumentSchema.objects.get(type = DocumentProcessing.expand_schema(request.POST[TYPE]))
    except DocumentSchema.DoesNotExist:
      raise Http404
    CarenetAutoshare.objects.create(record  = record, 
                                    carenet = carenet, 
                                    type    = docschema)
  return DONE


def autoshare_delete(request, record, carenet):
  """ Remove an autoshare from a carenet.
  
  request.POST must contain:
  
  * *type*: the document schema namespace to remove an autoshare for

  This will effectively unshare all documents of type *type* from the carenet,
  except documents which were shared individually.

  Will return :http:statuscode:`200` on sucess, :http:statuscode:`404`
  if the specified *type* doesn't exist.

  """

  TYPE = 'type'
  if request.POST.has_key(TYPE):
    try:
      docschema = DocumentSchema.objects.get(type = DocumentProcessing.expand_schema(request.POST[TYPE]))
    except DocumentSchema.DoesNotExist:
      raise Http404
    CarenetAutoshare.objects.filter(record  = record, 
                                    carenet = carenet,
                                    type    = docschema).delete()
  return DONE

def autoshare_revert(request, record, document_id, carenet):
  """ Revert the document-sharing of a document in a carent to whatever rules are specified by autoshares. NOT IMPLEMENTED."""
  # Not yet implemented
  return DONE

########NEW FILE########
__FILENAME__ = shares_carenet
"""
.. module:: views.sharing.shares_carenet
   :synopsis: Indivo view implementations related to carenet management.

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>
.. moduleauthor:: Ben Adida <ben@adida.net>

"""

from indivo.views.base import *
from django.http import HttpResponseBadRequest
from django.core.exceptions import PermissionDenied
from django.db import IntegrityError

NAME = 'name'

@transaction.commit_on_success
def carenet_create(request, record):
    """ Create a new carenet for a record.
  
    request.POST must contain:
    
    * *name*: the label for the new carenet.

    Will return :http:statuscode:`200` with XML describing the new
    carenet on success, :http:statuscode:`400` if *name* wasn't passed
    or if a carenet named *name* already exists on this record.
    
    """

    if request.POST.has_key(NAME):
        carenet_name = request.POST[NAME]
        try:
            cnObj = Carenet.objects.create(name = carenet_name, record = record)
        except IntegrityError:
            transaction.rollback()
            return HttpResponseBadRequest('Carenet name is already taken')
        return render_template('carenets', {'carenets':[cnObj], 'record':record}, type="xml")
    return HttpResponseBadRequest('Please provide a name for the carenet')


def carenet_list(request, record):
    """ List all carenets for a record.

    Will return :http:statuscode:`200` with a list of carenets on success.

    """
    carenets = Carenet.objects.filter(record=record)
    return render_template('carenets', {'carenets':carenets, 'record':record}, type="xml")


def carenet_delete(request, carenet):
    """ Delete a carenet.

    Will return :http:statuscode:`200` on success.

    """

    carenet.delete()
    return DONE


@transaction.commit_on_success
def carenet_rename(request, carenet):
    """ Change a carenet's name.

    request.POST must contain:
    
    * *name*: The new name for the carenet.
    
    Will return :http:statuscode:`200` with XML describing the renamed
    carenet on success, :http:statuscode:`400` if *name* wasn't passed
    or if a carenet named *name* already exists on this record.

    """

    if request.POST.has_key(NAME):
        try:
            carenet.name = request.POST[NAME]
            carenet.save()
        except IntegrityError:
            transaction.rollback()
            return HttpResponseBadRequest('Carenet name is already taken')                  # Indivo UI relies on this string to identify the reason of the 400 being returned
        return render_template('carenets', {'carenets': [carenet], 'record':carenet.record}, type="xml")
    return HttpResponseBadRequest('Please provide a new name for the carenet')

########NEW FILE########
__FILENAME__ = shares_document
"""
.. module:: views.sharing.shares_document
   :synopsis: Indivo view implementations related to sharing documents

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>
.. moduleauthor:: Ben Adida <ben@adida.net>

"""

import indivo.views
from indivo.lib.sharing_utils import carenet_documents_filter, document_in_carenet, document_carenets_filter
from indivo.views.base import *
from indivo.views.documents.document import _render_documents, _get_document, _render_document
from django.http import HttpResponseBadRequest
from django.core.exceptions import PermissionDenied

from django.db.models import F
from indivo.models import Document

@transaction.commit_on_success
def carenet_document_placement(request, record, carenet, document_id):
  """ Place a document into a given carenet.

  Will return :http:statuscode:`200` on success, :http:statuscode:`404` if
  *document_id* doesn't exist or if *document_id* has a nevershare set
  on it.

  """

  document = _get_document(document_id=document_id, record=record)

  # don't allow this for nevershare documents
  if not document or document.nevershare:
    raise Http404

  CarenetDocument.objects.get_or_create(carenet=carenet, document=document)
  return DONE


def carenet_document_delete(request, carenet, record, document_id):
  """ Unshare a document from a given carenet.

  If there is an autoshare of *document_id*'s type into *carenet*, this 
  call creates an exception for *document_id* in *carenet*. If *document_id*
  was shared individually into *carenet*, this call removes it. If *document_id*
  is not shared in *carenet* at all, this call does nothing immediately.
  
  In all cases, this call exempts *document_id* from any future autoshares into
  this carenet.

  Will return :http:statuscode:`200` on success, :http:statuscode:`404` if 
  *document_id* doesn't exist or if *document_id* or *carenet* don't belong
  to *record*.

  """

  document = _get_document(document_id=document_id, record=record)

  # this is always permission denied, so we can just handle it here
  # not in the access control system
  if not document or document.record != carenet.record:
    raise Http404

  doc_share, created_p = CarenetDocument.objects.get_or_create(document = document, carenet = carenet, defaults={'share_p':False})

  if not created_p and doc_share.share_p:
    doc_share.share_p = False
    doc_share.save()

  return DONE


def carenet_record(request, carenet):
  """ Get basic information about the record to which a carenet belongs.

  For now, info is the record id, label, creation time, creator, contact,
  and demographics.

  Will return :http:statuscode:`200` with XML about the record on success.

  """
  return render_template('record', {'record': carenet.record})


@marsloader()
def carenet_document_list(request, carenet, query_options):
  """List documents from a given carenet.

  request.GET may contain:
  
  * *type*: The document schema type to filter on.

  Returns both documents in the given carenet and documents with the same types 
  as in the record's autoshare, filtered by *type* if passed.

  Will return :http:statuscode:`200` with a document list on success,
  :http:statuscode:`404` if *type* doesn't exist.

  """
  
  try:
    doc_type_uri = request.GET.get('type', None)
    if doc_type_uri:
      requested_doc_type = DocumentSchema.objects.get(type = doc_type_uri)
    else:
      requested_doc_type = None
  except DocumentSchema.DoesNotExist:
    raise Http404

  documents = carenet_documents_filter(carenet, carenet.record.documents)
  tdc = documents.count()

  offset = query_options['offset']
  limit = query_options['limit']
  ret_documents = documents[offset:offset+limit]

  return _render_documents(ret_documents, carenet.record, None, tdc)



def carenet_document(request, carenet, document_id):
  """Return a document from a carenet.

  Will only return the document if it exists within the carenet.
  
  Will return :http:statuscode:`200` with the document content on success,
  :http:statuscode:`404` if *document_id* is invalid or if the indicated
  document is not shared in *carenet*.

  """
  
  document = _get_document(document_id=document_id, carenet=carenet)
  if not document or document.nevershare:
    raise Http404

  if document_in_carenet(carenet, document_id):
    return _render_document(document)
  else: 
    raise Http404

def document_carenets(request, record, document_id):
  """List all the carenets into which a document has been shared.

  Will return :http:statuscode:`200` with a list of carenets on success,
  :http:statuscode:`404` if *document_id* is invalid.
  
  """
  document = _get_document(document_id=document_id, record=record)
  if not document:
    raise Http404

  # Get the carenets
  carenets = document_carenets_filter(document, Carenet.objects.all())

  return render_template('carenets', {'carenets' : carenets, 'record' : record})

########NEW FILE########
__FILENAME__ = shares_nevershare
"""
.. module:: views.sharing.shares_nevershare
   :synopsis: Indivo view implementations related to nevershares

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>
.. moduleauthor:: Ben Adida <ben@adida.net>

"""

import indivo.views
from indivo.views.base import *
from indivo.views.documents.document import _render_documents, _get_document
from django.http import HttpResponseBadRequest
from django.core.exceptions import PermissionDenied


def document_set_nevershare(request, record, document_id):
  """ Flag a document to never be shared, anywhere.

  This overrides autoshares and existing shares, and prevents
  sharing the document in the future, until
  :py:meth:`~indivo.views.shares.shares_nevershare.document_remove_nevershare` 
  is called.

  Will return :http:statuscode:`200` on success, :http:statuscode:`404` if 
  *document_id* is invalid.

  """

  document = _get_document(document_id=document_id, record=record)
  if not document:
    raise Http404

  document.nevershare = True
  document.save()
  return DONE


def document_remove_nevershare(request, record, document_id):
  """ Remove the nevershare flag from a document.

  If a document has was shared via autoshare or explicitly, then marked
  as nevershare, this call will reactivate all previously existing shares.

  Will return :http:statuscode:`200` on success, :http:statuscode:`404` if
  *document_id* is invalid.
  
  """

  document = _get_document(document_id=document_id, record=record)
  if not document:
    raise Http404

  document.nevershare = False
  document.save()
  return DONE

########NEW FILE########
__FILENAME__ = shares_pha
"""
.. module:: views.sharing.shares_pha
   :synopsis: Indivo view implementations related to sharing applications

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>
.. moduleauthor:: Ben Adida <ben@adida.net>

"""

from indivo.views.base import *
from django.http import HttpResponseBadRequest
from django.core.exceptions import PermissionDenied

@utils.django_json
def carenet_apps_list(request, carenet, smart_only=False):
  """ List Apps within a given carenet.

  Will return :http:statuscode:`200` with manifests for the apps on success.
  
  """
  
  phas = PHA.objects.filter(carenetpha__carenet=carenet)
  return PHA.queryset_as_manifests(phas, smart_only=smart_only)

def carenet_apps_create(request, carenet, pha):
  """ Add an app to a carenet

  Read/write capability is determined by the user who uses the app, 
  not by the app itself, so no permissions are assigned here.

  Apps can only be added to carenets if they have already been shared with
  the carenet's record (i.e. the user has agreed to use the app).
 
  Autonomous apps cannot be added to carenets, as they require a full-record
  scope.

  Will return :http:statuscode:`200` on success, :http:statuscode:`404` if 
  there is no existing share between *pha* and *carenet's* record, or
  :http:statuscode:`400` if *pha* is autonomous.

  """
  
  # make sure the PHA already has access to record
  try:
    pha = carenet.record.pha_shares.get(with_pha__email = pha.email).with_pha
  except PHAShare.DoesNotExist:
    raise Http404

  if not pha.is_autonomous:
    CarenetPHA.objects.get_or_create(carenet=carenet, pha=pha)
  else:
    return HttpResponseBadRequest('Autonomous apps may not be linked to individual carenets: they always access the entire record')

  return DONE


def carenet_apps_delete(request, carenet, pha):
  """ Remove an app from a given carenet.

  Will return :http:statuscode:`200` on success, or if *pha* was never in
  *carenet* and no work needed to be done.

  """

  try:
    carenet_pha = CarenetPHA.objects.get(carenet=carenet, pha__email=pha.email)
    carenet_pha.delete()
  except CarenetPHA.DoesNotExist:
    pass

  return DONE



def carenet_app_permissions(request, carenet, pha):
  """ Retrieve the permissions for an app within a carenet. NOT IMPLEMENTED.

  Will return :http:statuscode:`200` always, without doing anything.
  
  """

  # Not yet implemented
  return DONE

########NEW FILE########
__FILENAME__ = smart_container
"""
.. module:: view.smart_container
   :synopsis: Indivo views to support SMART container-level API calls

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>

"""

from base import *
import urllib2

def smart_ontology(request):
    """Fetch the SMART ontology as RDF/XML."""

    # just fetch it from the smart server
    # TODO: cache this file and serve it statically
    url = 'http://sandbox-api.smartplatforms.org/ontology'

    ontology = urllib2.urlopen(url).read()
    return HttpResponse(ontology, mimetype="application/rdf+xml")

def smart_capabilities(request):
    """SMART Capabilities"""
    capabilites = '''{
    "http://smartplatforms.org/terms#Alert": {
        "methods": [
            "POST"
        ]
    }, 
    "http://smartplatforms.org/terms#Allergy": {
        "methods": [
            "GET"
        ]
    }, 
    "http://smartplatforms.org/terms#AppManifest": {
        "methods": [
            "GET"
        ]
    }, 
    "http://smartplatforms.org/terms#Capabilities": {
        "methods": [
            "GET"
        ]
    }, 
    "http://smartplatforms.org/terms#Demographics": {
        "methods": [
            "GET"
        ]
    }, 
    "http://smartplatforms.org/terms#Encounter": {
        "methods": [
            "GET"
        ]
    }, 
    "http://smartplatforms.org/terms#Fulfillment": {
        "methods": [
            "GET"
        ]
    }, 
    "http://smartplatforms.org/terms#Immunization": {
        "methods": [
            "GET"
        ]
    }, 
    "http://smartplatforms.org/terms#LabResult": {
        "methods": [
            "GET"
        ]
    }, 
    "http://smartplatforms.org/terms#Medication": {
        "methods": [
            "GET"
        ]
    }, 
    "http://smartplatforms.org/terms#Ontology": {
        "methods": [
            "GET"
        ]
    }, 
    "http://smartplatforms.org/terms#Problem": {
        "methods": [
            "GET"
        ]
    }, 
    "http://smartplatforms.org/terms#User": {
        "methods": [
            "GET"
        ]
    }, 
    "http://smartplatforms.org/terms#UserPreferences": {
        "methods": [
            "DELETE", 
            "GET", 
            "PUT"
        ]
    }, 
    "http://smartplatforms.org/terms#VitalSigns": {
        "methods": [
            "GET"
        ]
    }
}'''
    return HttpResponse(capabilites, mimetype='application/json')
########NEW FILE########
__FILENAME__ = manage
#!/usr/bin/env python
from django.core.management import execute_manager
try:
    import settings # Assumed to be in the same directory.
except ImportError:
    import sys
    sys.stderr.write("Error: Can't find the file 'settings.py' in the directory containing %r.\nHINT: Make sure that you have copied the settings.py.default file to settings.py.\n(If the file settings.py does indeed exist, it's causing an ImportError somehow.)\n" % __file__)
    sys.exit(1)

if __name__ == "__main__":
    execute_manager(settings)

########NEW FILE########
__FILENAME__ = settings_rtfd
# settings.py:
#
# Settings for the IndivoX Backend Server.

###############################
# For Instance Administrators #
###############################

# Required Setup #
##################

# People who will get emailed when errors are raised
# See https://docs.djangoproject.com/en/1.2/howto/error-reporting/
# Use tuples of ('Full Name', 'email'), i.e.
# ADMINS = (
#    ('John Doe', 'jdoe@gmail.com'),
# )
ADMINS = (
    )

# Make this unique, and don't share it with anybody.
SECRET_KEY = 'REPLACEMENOW'

# absolute filepath where indivo_server is installed
import os
APP_HOME = os.path.abspath(os.path.dirname(__file__))

# Automatically create new records with sample data by default
DEMO_MODE = False

# which sample data to load when in demo mode. Maps desired record labels
# to data profiles. 'Data profiles' correspond
# to subfolders of SAMPLE_DATA_DIR
DEMO_PROFILES = {
    'John Doe':'patient_1',
    }

# Location for sample data
SAMPLE_DATA_DIR = APP_HOME + '/sample_data'

# URL prefix (where indivo_server will be accessible from the web)
SITE_URL_PREFIX = "http://localhost:8000"

# URL prefix for the UI server
# (usually port 80 on the same machine)
UI_SERVER_URL = 'http://localhost'

# Storage Settings
DATABASES = {
    'default':{
        'ENGINE':'django.db.backends.postgresql_psycopg2', # '.postgresql_psycopg2', '.mysql', or '.oracle'
        'NAME':'indivo', # Required to be non-empty string
        'USER':'', # Required to be non-empty string
        'PASSWORD':'',
        'HOST':'', # Set to empty string for localhost.
        'PORT':'', # Set to empty string for default.
        },
}

# Absolute path to the directory that holds media.
# Example: "/home/media/media.lawrence.com/"
# In Indivo, all binary documents (pdf, etc.) are stored as files in MEDIA_ROOT
# This storage could potentially grow large, so pick this location accordingly
MEDIA_ROOT = APP_HOME + '/indivo_files/'

# Email settings
SEND_MAIL = False # Turn email on at all?
EMAIL_HOST = ""
EMAIL_PORT = 25
EMAIL_FROM_ADDRESS = "Indivo <support@indivo.localhost>"
EMAIL_SUPPORT_ADDRESS = "support@indivo.localhost"
EMAIL_SUPPORT_NAME = "Indivo Support"

# Timeout before reenabling a disabled account
# in seconds. None if you don't want reenabling.
# Accounts are disabled after 3 consecutive failed
# logins.
ACCOUNT_REENABLE_TIMEOUT = 1

# Advanced Setup #
##################

# Default carenets for new records
INDIVO_DEFAULT_CARENETS = ['Family', 'Physicians', 'Work/School']

# Audit Settings
AUDIT_LEVEL = 'HIGH' # 'HIGH', 'MED', 'LOW', 'NONE'
AUDIT_OAUTH = True # Audit the calls used solely for the oauth dance?
AUDIT_FAILURE = True # Audit the calls that return with unsuccessful status (4XX, 5XX)?

# Apps Settings
APPS_DIRS = {
    'ui': [APP_HOME + '/registered_apps/ui',],
    'admin': [APP_HOME + '/registered_apps/admin',],
    'user': [APP_HOME + '/registered_apps/user',],
}

# DataModel Settings
CORE_DATAMODEL_DIRS = [APP_HOME + '/indivo/data_models/core',] # Directories for core datamodel definitions
CONTRIB_DATAMODEL_DIRS = [APP_HOME + '/indivo/data_models/contrib',] # Directories for contributed datamodel definitions

# XML Validation and Transformation settings
VALIDATE_XML_SYNTAX = True # Validate all incoming XML docs for basic syntax?
VALIDATE_XML = True # Validate XML docs to process against the Indivo schemas?
CORE_SCHEMA_DIRS = [APP_HOME + '/indivo/schemas/data/core',] # Directories for core schemas
CONTRIB_SCHEMA_DIRS = [APP_HOME + '/indivo/schemas/data/contrib',] # Directories for contributed schemas

# logging
import logging
logging.basicConfig(level = logging.DEBUG, format = '%(asctime)s %(levelname)s %(message)s',
                    filename = APP_HOME + '/indivo.log', filemode = 'a')

#############################
# For Indivo/Django Experts #
#############################

# excluse a URL pattern from access control
INDIVO_ACCESS_CONTROL_EXCEPTION = "^/codes/"

MANAGERS = ADMINS

DEBUG = False
TEMPLATE_DEBUG = DEBUG

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# If running in a Windows environment this must be set to the same as your
# system time zone.

## IMPORTANT for Indivo: do NOT change this timezone to your local timezone.
## KEEP IT as UTC.
TIME_ZONE = 'UTC'

## ALSO, we recommend that, if you use PostgreSQL, you set the timezone to UTC in postgresql.conf

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash if there is a path component (optional in other cases).
# Examples: "http://media.lawrence.com", "http://example.com/media/"
MEDIA_URL = ''

# URL prefix for admin media -- CSS, JavaScript and images. Make sure to use a
# trailing slash.
# Examples: "http://foo.com/media/", "/media/".
ADMIN_MEDIA_PREFIX = '/media/'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
#     'django.template.loaders.eggs.Loader',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'indivo_server.indivo.middlewares.authentication.Authentication',
    'indivo_server.indivo.middlewares.paramloader.ParamLoader',
    'indivo_server.indivo.middlewares.authorization.Authorization',
    'indivo_server.indivo.middlewares.audit.AuditWrapper'
)


ROOT_URLCONF = 'indivo_server.urls'

TEMPLATE_DIRS = (
  APP_HOME + "/templates",
  APP_HOME + "/indivo/templates"
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

INSTALLED_APPS = (
    'django.contrib.contenttypes',
    'django.contrib.sites',
    'indivo',
    'codingsystems',
    # for migrations
    'south',
)

# cookie
SESSION_COOKIE_NAME = "indivo_server_sessionid"

# auth
LOGIN_URL = "/account/login"

# no trailing slash just because
APPEND_SLASH = False

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *

# Uncomment the next two lines to enable the admin:
#from django.contrib import admin
#admin.autodiscover()

urlpatterns = patterns('',
    # Coding Systems
    (r'^codes/', include('indivo_server.codingsystems.urls')),
                       
    # Everything to indivo
    (r'^', include('indivo_server.indivo.urls.urls')),
)

########NEW FILE########
__FILENAME__ = accounts
import sys
from indivo import models
from indivo.lib.sample_data import IndivoDataLoader

class Accounts:
  LABELS = 'labels'

  account_tags = ('email', 'full_name', 'contact_email', 'username', 'password', 'records')

  def __init__(self, elements, verbosity):
    self.verbosity = verbosity
    self.process_accounts(elements)

  def process_accounts(self, elements):
    accounts = []
    for node in elements.childNodes:
      account = {}
      account_email = node.getAttribute(self.account_tags[0])
      account[self.account_tags[0]] = account_email
      if self.verbosity:
        print "\tAdding account: ", account_email
      for tag_name in self.account_tags:
        if tag_name == self.account_tags[-1]:
          records_node = node.getElementsByTagName(self.account_tags[-1])[0]
          if records_node and records_node.hasChildNodes:
            account[self.LABELS] = []
            for record in records_node.childNodes:
              account[self.LABELS].append((record.getAttribute('label'), 
                                           record.getAttribute('data_profile')))
        elem_node = node.getElementsByTagName(tag_name)
        if elem_node and len(elem_node) > 0 and elem_node[0].firstChild:
          account[tag_name] = elem_node[0].firstChild.nodeValue
      accounts.append(account)
    return self.create_accounts(accounts)

  def create_accounts(self, accounts):
    for acct_info in accounts:
      account, account_created = models.Account.objects.get_or_create( 
                                      email         = acct_info['email'], 
                                      full_name     = acct_info['full_name'], 
                                      contact_email = acct_info['contact_email'])
      if account_created:
        account.set_username_and_password(  username = acct_info['username'], 
                                            password = acct_info['password'])
        if acct_info.has_key(self.LABELS):
          for label, data_profile in acct_info[self.LABELS]:
            record, record_created = models.Record.objects.get_or_create(owner = account, label = label)
            if record_created:
              record.create_default_carenets()

              if data_profile:
                if self.verbosity:
                  print "\tLoading data profile %s for record %s"%(data_profile, label)
                loader = IndivoDataLoader(models.NoUser.objects.get_or_create(email="", 
                                                                              type='NoUser')[0])
                try:
                  loader.load_profile(record, data_profile)
                except Exception, e:
                  if self.verbosity:
                    print "\t\tError loading profile: %s"%str(e)
    return True

########NEW FILE########
__FILENAME__ = auth_systems
from indivo import models
import importer_utils

class Auth_systems:

  def __init__(self, elements, verbosity):
    kwargs = []
    for node in elements.childNodes:
      kwarg = {}
      kwarg['short_name'] = node.getAttribute('short_name')
      kwarg['internal_p'] = importer_utils.clean_value(node.getAttribute('internal_p'))
      kwargs.append(kwarg)
      if verbosity:
        print "\tAdding authsystem: ", node.getAttribute('short_name')
    for kw in kwargs:
      models.AuthSystem.objects.get_or_create(**kw)

########NEW FILE########
__FILENAME__ = document_schemas
from indivo import models

class Document_schemas:
  def __init__(self, nodes, verbosity):
    kwargs = []
    for node in nodes.childNodes:
      kwarg = {}
      kwarg['type'] = node.getAttribute('type')
      kwargs.append(kwarg)
    for kw in kwargs:
      models.DocumentSchema.objects.get_or_create(**kw)

########NEW FILE########
__FILENAME__ = importer_utils

def clean_value(val):
  if    val.lower() == 'true':  return True
  elif  val.lower() == 'false': return False
  else:                         return val.strip()

########NEW FILE########
__FILENAME__ = status_names
from indivo import models

class Status_names:
  def __init__(self, elements, verbosity):
    kwargs = []
    for node in elements.childNodes:
      kwarg = {}
      kwarg['id'] = node.getAttribute('id')
      kwarg['name'] = node.getAttribute('name')
      kwargs.append(kwarg)
    for kw in kwargs:
      models.StatusName.objects.get_or_create(**kw)

########NEW FILE########
__FILENAME__ = deploy
import os
import string
import random
import upholstery
import datetime

USER = 'szabak'

def run():
  host = 'indivo.genepartnership.org'
  #host = 'indivo-staging.informedcohort.org'
  #host = 'indivobig.genepartnership.org'
  #host = 'x-staging.indivo.org'
  code_dirs = ['indivo_server', 'indivo_ui_server']
  deploy_obj = Deploy(host)
  #deploy_obj.init()
  deploy_obj.set_user(USER)
  deploy_obj.deploy(code_dirs)

class Deploy:

  def __init__(self, host):
    self.host = host
    self.users = ['steve', 'web']
    self.packages = [ 'apache2-mpm-prefork', 
                      'libapache2-mod-wsgi', 
                      'libapache2-mod-gnutls', 
                      'python2.6', 
                      'python-libxml2', 
                      'python-libxslt1', 
                      'python-psycopg2',
                      'python-django',
                      'postgresql-8.4']
  
    self.apt_get    = 'apt-get -y -qq '
    self.cd         = 'cd '
    self.chmod      = 'chmod '
    self.chown      = 'chown '
    self.echo       = 'echo '
    self.groupadd   = 'groupadd '
    self.groupdel   = 'groupdel '
    self.mkdir      = 'mkdir '
    self.mv         = 'mv '
    self.rm         = 'rm '
    self.sudo       = 'sudo -u '
    self.symlink    = 'ln -s '
    self.tar        = 'tar '
    self.touch      = 'touch '
    self.useradd    = 'useradd -m '

    self.tar_compress_flags   = 'czf'
    self.tar_decompress_flags = 'zxf'

    self.default_home_dir = '/home/'
    self.default_ssh_dir = '.ssh/'

    self.remote_sudoer_location = '/etc/sudoers'

  def get_host(self, username=''):
    if not username:
      return self.host
    else:
      return username + '@' + self.host

  def init(self):
    # test /tmp/successful
    create_users      = True
    install_packages  = True
    start_httpd       = True

    # SZ: First user gets sudo access
    if create_users and self.create_users(self.users):
      self.set_user(self.users[0])
      if install_packages and self.install_packages():
        start_httpd and self.start_httpd()

  def deploy(self, code_dirs):
    deploy_code = True
    if deploy_code:
      self.deploy(code_dirs)

  def create_users(self, users):
    authorized_keys_file = 'authorized_keys'
    public_key_location = self.get_public_key_location()
    sudo_group = self.add_sudo_group()

    for user in users:
      if users[0] == user:
        upholstery.run(self.useradd + user + ' -G ' + sudo_group)
      else:
        upholstery.run(self.useradd + user)

      # If a public key exists then push it to the server
      if public_key_location:
        upholstery.run(self.mkdir + self.default_home_dir + user + '/' + self.default_ssh_dir)
        upholstery.put(public_key_location, self.default_home_dir +  user + '/' + \
                                                        self.default_ssh_dir + \
                                                        authorized_keys_file)
      # Symlink all users > 0
      upholstery.run(self.symlink + self.default_home_dir + user + ' /' + user)
    self.change_mode(440, self.remote_sudoer_location)
    return True

  def add_sudo_group(self):
    sudo_group = self.random_string(6)
    self.set_user('root')
    self.add_group(sudo_group)
    self.change_mode(640, self.remote_sudoer_location)
    sudo_line = '%%' + sudo_group + ' ALL=(ALL) NOPASSWD:ALL' 
    upholstery.run(self.echo + '\'' + sudo_line + "' >> " + self.remote_sudoer_location)
    return sudo_group

  #def random_string(self, length, choices=[string.letters]):
  def random_string(self, length, choices=[]):
    if not choices:
      choices = [string.letters]
    return "".join([random.choice(''.join(choices)) for i in xrange(length)])

  def get_public_key_location(self):
    _possible_ssh_pubkey_locations = ['id_dsa.pub', 'id_dsa', 'id_rsa.pub', 'id_rsa']
    if os.environ.has_key('USER'):
      current_user = os.environ['USER']
    if os.path.exists(self.default_home_dir + current_user + '/' + self.default_ssh_dir):
      ssh_base_dir = self.default_home_dir + current_user + '/' + self.default_ssh_dir
      for default_ssh_pubkey_location in _possible_ssh_pubkey_locations:
        if os.path.exists(ssh_base_dir + default_ssh_pubkey_location):
          return ssh_base_dir + default_ssh_pubkey_location
    return False

  def set_user(self, user):
    upholstery.set(fab_hosts=[self.get_host(user)])

  def add_group(self, group, num_tries=0):
    try:
      upholstery.run(self.groupadd + group)
    except:
      if num_tries == 0:
        self.del_group(group)
        self.add_group(group, 1)
      else:
        pass
        #raise UpErr

  def del_group(self, group):
    upholstery.run(self.groupdel + group)

  def start_httpd(self):
    self.deploy_virtual_host()
    self.deploy_ports_conf()
    self.service('apache2', 'restart')
    self.service('postgresql-8.4', 'restart')
    return True

  def service(self, program, action):
    upholstery.sudo('service ' + program + ' ' + action)

  def install_packages(self):
    if  self._pre_install_packages() and \
        self._install_packages() and \
        self._post_install_packages():
      return True
    return False

  def _pre_install_packages(self):
    return True

  def _install_packages(self):
    if hasattr(self, 'packages'):
      for package in self.packages:
        upholstery.sudo(self.apt_get + ' install ' + package)
      return True
    return False

  def _post_install_packages(self):
    self.create_postgres_user('root')
    self.create_postgres_user('web')
    self.create_postgres_user('www-data')
    upholstery.run(self.sudo + 'postgres createdb indivo')
    return True

  def create_postgres_user(self, user):
    # SZ: All postgres users should NOT be superusers!
    upholstery.run(self.sudo + 'postgres createuser -s ' + user)

  def deploy_virtual_host(self):
    # SZ: randomize
    filename_virtual_host = 'virtual_host'
    virtual_host_path = '/etc/apache2/sites-enabled/000-default'
    if self.create_file(filename_virtual_host, virtual_host):
      upholstery.put(filename_virtual_host, filename_virtual_host)
      upholstery.local(self.rm + filename_virtual_host)
      upholstery.sudo(self.mv + filename_virtual_host + ' ' + virtual_host_path)
  
  def deploy_ports_conf(self):
    ports_conf= """
    NameVirtualHost *:80
    Listen 80
    Listen 8000
    """

    ports_path = '/etc/apache2/ports.conf'
    filename_ports_conf = 'ports_conf'
    if self.create_file(filename_ports_conf, ports_conf):
      upholstery.put(filename_ports_conf, filename_ports_conf)
      upholstery.local(self.rm + filename_ports_conf)
      upholstery.sudo(self.mv + filename_ports_conf + ' ' + ports_path)

  def create_file(self, filename, content, mode='w'):
    try:
      f = open(filename, mode)
      f.write(content)
      f.close()
    except:
      return False
    return True

  def change_mode(self, mode, file):
    if isinstance(mode, int):
      try:
        mode = str(mode)
      except:
        raise TypeError
    if isinstance(mode, str):
      upholstery.run(self.chmod + mode + ' ' + file)
      return True
    return False

  def deploy(self, code_dirs):
    self.datetime = datetime.datetime.today()
    if  self._pre_deploy()  and \
        self._deploy(code_dirs)      and \
        self._post_deploy():
      return True
    else:
      return False

  def _pre_deploy(self):
    return True
  
  def _deploy(self, code_dirs):
    compressed_file_name = 'tmp.tar.gz'
    exclude_dir = '.git'

    for code_dir in code_dirs:
      if os.path.exists(code_dir):
        upholstery.local(self.tar + ' ' + self.tar_compress_flags + ' ' + compressed_file_name + \
                         ' ' + code_dir + ' --exclude "' + exclude_dir + '"')
        upholstery.put(compressed_file_name, compressed_file_name)
        upholstery.local(self.rm + compressed_file_name)

        # Decompress and Clean up
        upholstery.run(self.tar + ' ' + self.tar_decompress_flags + ' ' + compressed_file_name)
        upholstery.run(self.rm + compressed_file_name)

        if self.datetime:
          indivo_servers_location = '/web/' + code_dir + 's/' + \
                                    code_dir + '-' + \
                                    str(self.datetime.year) + '_' + \
                                    str(self.datetime.month) + '_' + \
                                    str(self.datetime.day)
        else:
          indivo_server_location = '/web/'

        # SZ: Remove this in the future
        upholstery.sudo(self.mv + code_dir + ' ' + indivo_servers_location)

    return True

  def _post_deploy(self):
    self.set_user(USER)
    upholstery.sudo(self.chown + 'web:www-data -R /web/indivo_servers/')
    upholstery.sudo(self.chown + 'web:www-data -R /web/indivo_ui_servers/')
    #self.set_user('web')
    #upholstery.run(self.cd + '/web/indivo_server && ./reset.sh')

    # Restart apache
    upholstery.run(self.touch + '/tmp/successful')

    # SZ: For development
    #upholstery.run('python manage.py runserver 0.0.0.0:8000')

    return True

virtual_host = """
<VirtualHost *:8000>
 ServerAdmin steve.zabak@childrens.harvard.edu
 ServerName x-staging.indivo.org
 DocumentRoot /web/indivo_server
 Alias /static/ /web/indivo_server/static/
 EnableMMAP On
 EnableSendfile On
 LogLevel warn
 <Directory /web/indivo_server>
  Order deny,allow
  Allow from all
 </Directory>
 #RedirectMatch ^/$ https://localhost
 WSGIDaemonProcess indivo user=www-data group=www-data processes=1 maximum-requests=500 threads=10
 WSGIProcessGroup indivo
 WSGIScriptAlias / /web/indivo_server/django.wsgi
 WSGIPassAuthorization On
</VirtualHost>
<VirtualHost *:80>
 ServerAdmin steve.zabak@childrens.harvard.edu
 ServerName x-staging.indivo.org
 DocumentRoot /web/indivo_ui_server
 Alias /static/ /web/indivo_ui_server/ui/static/
 EnableMMAP On
 EnableSendfile On
 LogLevel warn
 <Directory /web/indivo_ui_server>
  Order deny,allow
  Allow from all
 </Directory>
 #RedirectMatch ^/$ https://localhost
 WSGIDaemonProcess indivo_ui user=www-data group=www-data processes=1 maximum-requests=500 threads=10
 WSGIProcessGroup indivo_ui
 WSGIScriptAlias / /web/indivo_ui_server/django.wsgi
 WSGIPassAuthorization On
</VirtualHost>
"""

if __name__ == '__main__':
  upholstery.main()

########NEW FILE########
__FILENAME__ = importer
import os
import sys
from xml.dom import minidom
import datasections
from django.conf import settings
from indivo.models import PHA, MachineApp

class AppSyncer(object):
	def __init__(self, app_paths=None):
		self.app_paths = app_paths or settings.APPS_DIRS
		self.db_phas = dict([(app.email, app) for app in PHA.objects.all()])
		self.db_machine_apps = dict([(app.email, app) for app in MachineApp.objects.all()])

	def sync(self, verbosity=True):
		ui_app_paths = self.app_paths['ui']
		admin_app_paths = self.app_paths['admin']
		user_app_paths = self.app_paths['user']
    
		# sync the UI apps
		for path in ui_app_paths:
			self.sync_app_dir(path, user_app=False, verbosity=verbosity)

		# sync the admin apps
		for path in admin_app_paths:
			self.sync_app_dir(path, user_app=False, verbosity=verbosity)

		# sync the user apps
		for path in user_app_paths:
			self.sync_app_dir(path, verbosity=verbosity)

		# delete all apps that weren't registered
		for app_email, app in self.db_phas.iteritems():
			print "\tUser App %s no longer registered. Deleting..." % app.email
			app.delete()

		for app_email, app in self.db_machine_apps.iteritems():
			print "\tMachine App %s no longer registered. Deleting..." % app.email
			app.delete()

	def sync_app_dir(self, dir_path, user_app=True, verbosity=True):
		for app_dir in os.listdir(dir_path):
			full_app_path = os.path.join(dir_path, app_dir)
			if os.path.isdir(full_app_path):
				self.sync_app(full_app_path, user_app=user_app, verbosity=verbosity)

	def sync_app(self, full_path, user_app=True, verbosity=True):
		manifest_fp = os.path.join(full_path, 'manifest.json')
		credentials_fp = os.path.join(full_path, 'credentials.json')

		if verbosity:
			print "\tProcessing %s App %s..." % ("User" if user_app else "Machine", os.path.basename(full_path))
  
		try:
			with open(manifest_fp, 'r') as f:
				manifest = f.read()
			with open(credentials_fp, 'r') as f:
				credentials = f.read()
    
			app_klass = PHA if user_app else MachineApp
			app = app_klass.from_manifest(manifest, credentials, save=False)

			app_dict = self.db_phas if user_app else self.db_machine_apps
			db_app = app_dict.get(app.email, None)

			# if the app already exists, just update it
			if db_app:				
				if verbosity:
					print "\t\tApp exists. Updating... "
					
				# update all the necessary fields
				app.id = db_app.id
				app.created_at = db_app.created_at
				app.creator = db_app.creator
				
				# mark the app as synced
				del app_dict[app.email]

			elif verbosity:
				print "\t\tNew app. Registering... "
    
			app.save()

		except Exception as e:
			if verbosity:
				print "\t\tError loading app: %s. Skipping..."%str(e)
			return None

def import_data(verbosity=True):
  bf_prefix = ''
  if os.path.dirname(__file__):
    bf_prefix = os.path.dirname(__file__) + '/'
    data_file  = bf_prefix + 'indivo_data.xml'

  if os.path.isfile(data_file):
    f = open(data_file)
    lines = []
    for line in f:
      lines.append(line.strip())
    dom = minidom.parseString(''.join(lines))
    for root in dom.childNodes:
      # Make sure to pull in required info first
      # This is hack, but the required stuff shouldn't
      # really be in the data file anyways.
      
      # Required info is auth_systems, status_names, document_schemas
      req_secs = ['auth_systems', 'status_names', 'document_schemas']

      for section in root.childNodes:
        if section and getattr(section, 'nodeName', None) in req_secs:
          import_section(section, verbosity)

      # Now import the others
      for section in root.childNodes:
        if section and getattr(section, 'nodeName', None) not in req_secs:
          import_section(section, verbosity)
  else:
    raise ValueError("No indivo_data.xml file found")

def import_section(section, verbosity):
  try:
    # Note the nodeName, className and fileName relationship
    if hasattr(section, 'nodeName'):
      if hasattr(datasections, section.nodeName):
        class_name = section.nodeName.capitalize()
        seclib = getattr(datasections, section.nodeName)
        if hasattr(seclib, class_name):
          getattr(seclib, class_name)(section, verbosity)
  except ImportError:
    pass


########NEW FILE########
__FILENAME__ = load_codingsystems
"""
Driver for coding system loading
"""

from codingsystems.data import snomed, loinc, rxterms, hl7vaccines

def load_codingsystems():
    snomed.create_and_load_from('codingsystems/data/complete/SNOMEDCT_CORE_SUBSET_200911_utf8.txt')
    loinc.create_and_load_from('codingsystems/data/complete/LOINCDB.TXT')
    rxterms.create_and_load_from('codingsystems/data/complete/RxTerms201005.txt')
    hl7vaccines.create_and_load_from('codingsystems/data/complete/HL7_V3_VACCINES.txt')
    
if __name__ == '__main__':
    load_codingsystems()

########NEW FILE########
__FILENAME__ = reset
#!/usr/bin/python

"""
.. module:: utils.reset
   :synopsis: Script for resetting the Indivo Server Database and loading initial data

.. moduleauthor:: Daniel Haas <daniel.haas@post.harvard.edu>

"""

# Set up the Django environment
import sys
import os
from django.core import management
os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'
sys.path.insert(0, os.path.abspath(os.path.dirname(__file__) + '/../'))
from django.db import connection, DatabaseError, IntegrityError

from load_codingsystems import load_codingsystems
from utils.importer import import_data, AppSyncer

from optparse import OptionParser
import subprocess

# Prepare database-specific commands
CONN_DICT = connection.settings_dict
DB_MODULE, DB_NAME = CONN_DICT['ENGINE'].rsplit('.', 1)

# TODO Make the database communications more django like, if not use django to
#       do the setup.

def isvalid(s):
    return type(s) == str and len(s) > 0

if DB_NAME == 'mysql':
    import _mysql_exceptions as DB_EXCEPTION_MODULE

    params = []
    if (not isvalid(CONN_DICT['NAME'])):
        raise ValueError("Database setting NAME must be a valid non-empty string")
    if (isvalid(CONN_DICT['USER'])):
        params.append('-u%s' % CONN_DICT['USER'])
    else:
        raise ValueError("Database setting USER must be a valid non-empty string")
    if (isvalid(CONN_DICT['PASSWORD'])):
        params.append('-p%s' % CONN_DICT['PASSWORD'])
    if (isvalid(CONN_DICT['HOST'])):
        params.append('-h %s' % CONN_DICT['HOST'])
    if (isvalid(CONN_DICT['PORT'])):
        params.append('-P %s' % CONN_DICT['PORT'])
    params = " ".join(params)

    CREATE_DB_CMD = 'mysqladmin %s create %s' % (params, CONN_DICT['NAME'])
    DROP_DB_CMD = 'mysqladmin %s drop %s' % (params, CONN_DICT['NAME'])
elif DB_NAME == 'postgresql_psycopg2':
    import psycopg2 as DB_EXCEPTION_MODULE
    
    params = []
    if (not isvalid(CONN_DICT['NAME'])):
        raise ValueError("Database setting NAME must be a valid non-empty string")
    if (isvalid(CONN_DICT['USER'])):
        params.append('-U %s' % CONN_DICT['USER'])
    else:
        raise ValueError("Database setting USER must be a valid non-empty string")
    if (isvalid(CONN_DICT['HOST'])):
        params.append('-h %s' % CONN_DICT['HOST'])
    if (isvalid(CONN_DICT['PORT'])):
        params.append('-p %s' % CONN_DICT['PORT'])
    params = " ".join(params)

    CREATE_DB_CMD = 'createdb -W %s %s' % (params, CONN_DICT['NAME'])
    DROP_DB_CMD = 'dropdb -W %s %s' % (params, CONN_DICT['NAME'])

else:
    raise ValueError("Reset Script doesn't support backend %s" % DB_NAME)


def create_db():
    return subprocess.check_call(CREATE_DB_CMD, shell=True)


def drop_db():
    # close django's connection to the database
    connection.close()
    return subprocess.check_call(DROP_DB_CMD, shell=True)

# Parse commandline Arguments
usage = ''' %prog [options]

Reset the Indivo database, optionally loading initial data and codingsystems data. Initial data should
be placed in indivo_server/utils/indivo_data.xml.

Some of the commands (i.e. dropping and creating the database)
require authentication to the underlying database. If you are prompted
for a password, use the password for your database user (the same one you
specified in settings.py)'''

parser = OptionParser(usage=usage)
parser.add_option("-s",
                  action="store_true", dest="syncdb", default=True,
                  help="Reset the Database (default behavior).")
parser.add_option("--no-syncdb",
                  action="store_false", dest="syncdb",
                  help="Don't reset the database.")
parser.add_option("-b",
                  action="store_true", dest="load_data", default=True,
                  help="Load initial data from indivo_data.xml, if available (default behavior).")
parser.add_option("--no-data",
                  action="store_false", dest="load_data",
                  help="Don't load initial data from indivo_data.xml.")
parser.add_option("-c",
                  action="store_true", dest="load_codingsystems", default=False,
                  help="Load codingsystems data, if available.")
parser.add_option("--no-codingsystems",
                  action="store_false", dest="load_codingsystems",
                  help="Don't load codingsystems data (default behavior).")
parser.add_option("--force-drop",
                  action="store_true", dest="force_drop", default=False,
                  help="Force a drop and recreate of the database (useful if flushing the database fails).")
parser.add_option("--no-force-drop",
                  action="store_false", dest="force_drop",
                  help="Don't force a drop and recreate of the database unless necessary (default behavior).")

(options, args) = parser.parse_args()

# Prompt for confirmation--we are about to trash a database, after all
confirm = raw_input("""You have requested a reset of the database.
This will IRREVERSIBLY DESTROY all data currently in the %r database,
and return each table to its initial state.
Are you sure you want to do this?

    Type 'yes' to continue, or 'no' to cancel: """ % CONN_DICT['NAME'])

if confirm != 'yes':
    print "Reset Cancelled."

else:

    # Reset the Database
    if options.syncdb:
        print "RESETTING DATABASE..."

        # Assume the database exists and is synced: try flushing the database
        force_drop = options.force_drop
        if not force_drop:
            try:
                print "Flushing the Database of existing data..."
                management.call_command('flush', verbosity=0, interactive=False)
                management.call_command('migrate', fake=True, verbosity=0)
                print "Database Flushed."

            # Couldn't flush. Either the database doesn't exist, or it is corrupted.
            # Try dropping and recreating, below
            except (DB_EXCEPTION_MODULE.OperationalError, DatabaseError, IntegrityError) as e:
                force_drop = True

            # Unknown exception. For now, just treat same as other exceptions
            except Exception as e:
                force_drop = True

        if force_drop:

            # Try dropping the database, in case it existed
            print "Database nonexistent or corrupted, or Database drop requeseted. Attempting to drop database..."
            try:
                drop_db()
            except subprocess.CalledProcessError:
                print "Couldn't drop database. Probably because it didn't exist."

            # Create the Database
            print "Creating the Database..."
            try:
                create_db()
            except subprocess.CalledProcessError:
                print "Couldn't create database. Database state likely corrupted. Exiting..."
                exit()

            # Sync the Database
            print "Syncing and Migrating the database..."
            management.call_command('syncdb', verbosity=0)

            # Migrate the Database
            management.call_command('migrate', verbosity=0)
            print "Database Synced."

    # Load codingsystems
    if options.load_codingsystems:
        print "LOADING CODINGSYSTEMS DATA..."
        try:
            load_codingsystems()
            print "LOADED."
        except Exception as e:
            print str(e)
            print "COULDN'T LOAD DATA. SKIPPING."

    # Import initial data
    if options.load_data:
        print "LOADING INITIAL INDIVO DATA..."
        try:
            import_data()
            AppSyncer().sync()
            print "LOADED."
        except Exception as e:
            print str(e)
            print "COULDN'T LOAD DATA. SKIPPING."

########NEW FILE########
__FILENAME__ = upholstery
#!/usr/bin/env python -i

# Fabric - Pythonic remote deployment tool.
# Copyright (C) 2008  Christian Vest Hansen
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import datetime
import getpass
import os
import os.path
import pwd
import re
import signal
import subprocess
import sys
import threading
import time
import types

try:
  import paramiko as ssh
except ImportError:
  print("Error: paramiko is a required module. Please install it:")
  print("  $ sudo easy_install paramiko")
  sys.exit(1)

#__author__ = 'Christian Vest Hansen'
#__author_email__ = 'karmazilla@gmail.com'
#__url__ = 'http://www.nongnu.org/fab/'
__version__ = '0.0.9'
__author__ = 'Steve Zabak'
__author_email__ = 'steve.zabak@childrens.harvard.edu'
__license__ = 'GPL-2'
__greeter__ = '''\
   Upholstery v. %(fab_version)s, Copyright (C) 2008 %(fab_author)s.
   Upholstery comes with ABSOLUTELY NO WARRANTY; for details type `up warranty'.
   This is free software, and you are welcome to redistribute it
   under certain conditions; type `up license' for details.
'''

ENV = {
  'fab_version': __version__,
  'fab_author': __author__,
  'fab_mode': 'rolling',
  'fab_port': 22,
  'fab_user': pwd.getpwuid(os.getuid())[0],
  'fab_password': None,
  'fab_pkey': None,
  'fab_key_filename': None,
  'fab_new_host_key': 'accept',
  'fab_shell': '/bin/bash -l -c "%s"',
  'fab_timestamp': datetime.datetime.utcnow().strftime('%F_%H-%M-%S'),
  'fab_print_real_sudo': False,
  'fab_fail': 'abort',
}

CONNECTIONS = []
COMMANDS = {}
OPERATIONS = {}
STRATEGIES = {}
_LAZY_FORMAT_SUBSTITUTER = re.compile(r'\$\((?P<var>\w+?)\)')

#
# Compatibility fixes
#
if hasattr(str, 'partition'):
  partition = str.partition
else:
  def partition(txt, sep):
    idx = txt.find(sep)
    if idx == -1:
      return txt, '', ''
    else:
      return (txt[:idx], sep, txt[idx + len(sep):])

#
# Helper decorators:
#
def new_registering_decorator(registry):
  def registering_decorator(first_arg=None):
    if callable(first_arg):
      registry[first_arg.__name__] = first_arg
      return first_arg
    else:
      def sub_decorator(f):
        registry[first_arg] = f
        return f
      return sub_decorator
  return registering_decorator
command = new_registering_decorator(COMMANDS)
operation = new_registering_decorator(OPERATIONS)
strategy = new_registering_decorator(STRATEGIES)

def run_per_host(op_fn):
  def wrapper(*args, **kwargs):
    if not CONNECTIONS:
      _connect()
    _on_hosts_do(op_fn, *args, **kwargs)
  wrapper.__doc__ = op_fn.__doc__
  wrapper.__name__ = op_fn.__name__
  return wrapper

#
# Standard fabfile operations:
#
@operation
def set(**variables):
  """
  Set a number of Fabric environment variables.
  
  set() takes a number of keyword arguments, and defines or updates the
  variables that correspond to each keyword with the respective value.
  
  The values can be of any type, but strings are used for most variables.
  If the value is a string and contain any eager variable references, such as
  %(fab_user)s, then these will be expanded to their corresponding value.
  Lazy references, those beginning with a $ rather than a %, will not be
  expanded.
  
  Example:
    set(fab_user='joe.shmoe', fab_mode='rolling')
  
  """
  for k, v in variables.items():
    if isinstance(v, types.StringTypes):
      ENV[k] = (v % ENV)
    else:
      ENV[k] = v

@operation
def get(name, otherwise=None):
  """
  Get the value of a given Fabric environment variable.
  
  If the variable isn't found, then this operation returns the
  value of the 'otherwise' parameter, which is None unless set.
  
  """
  return ENV.get(name, otherwise)

@operation
def getAny(*names):
  """
  Given a list of variable names as parameters, get the value of the first
  of these variables that is actually defined (and does not resolve to
  boolean False), or None.
  
  Example:
    getAny('hostname', 'ipv4', 'ipv6', 'ip', 'address')
  
  """
  for name in names:
    value = ENV.get(name)
    if value:
      return value
  # Implicit return value of None here if no names found.

@operation
def require(var, **kwargs):
  """
  Make sure that a certain environment variable is available.
  
  The 'var' parameter is a string that names the variable to check for.
  Two other optional kwargs are supported:
    * 'used_for' is a string that gets injected into, and then printed, as
      something like this string: "This variable is used for %s".
    * 'provided_by' is a list of strings that name commands which the user
      can run in order to satisfy the requirement.
  
  If the required variable is not found in the current environment, then the
  operation is stopped and Fabric halts.
  
  Example:
    require('project_name',
      used_for='finding the target deployment dir.',
      provided_by=['staging', 'production'],
    )
  
  """
  if var in ENV:
    return
  print(
    ("The '%(fab_cur_command)s' command requires a '" + var
    + "' variable.") % ENV
  )
  if 'used_for' in kwargs:
    print("This variable is used for %s" % _lazy_format(
      kwargs['used_for']))
  if 'provided_by' in kwargs:
    print("Get the variable by running one of these commands:")
    to_s = lambda obj: getattr(obj, '__name__', str(obj))
    provided_by = [to_s(obj) for obj in kwargs['provided_by']]
    print('\t' + ('\n\t'.join(provided_by)))
  sys.exit(1)

@operation
def prompt(varname, msg, validate=None, default=None):
  """
  Display a prompt to the user and store the input in the given variable.
  If the variable already exists, then it is not prompted for again.
  
  The 'validate' parameter is a callable that raises an exception on invalid
  inputs and returns the input for storage in ENV.
  It may process the input and convert it to a different type, as in the
  second example below.
  
  Example:
    # Simplest form:
    prompt('environment', 'Please specify target environment')
    
    # With default:
    prompt('dish', 'Specify favorite dish', default='spam & eggs')
    
    # With validation, i.e. require integer input:
    prompt('nice', 'Please specify process nice level', validate=int)
  
  """
  if varname in ENV and ENV[varname] is not None:
    return
  
  if callable(default):
    default = default()
  
  try:
    default_str = default and (" [%s]" % str(default).strip()) or ""
    prompt_msg = _lazy_format("%s%s: " % (msg.strip(), default_str))
    value = raw_input(prompt_msg)
    if not value:
      value = default
    
    if callable(validate):
      value = validate(value)
    
    set(**{varname: value})
  except EOFError:
    return

@operation
@run_per_host
def put(host, client, env, localpath, remotepath, **kwargs):
  """
  Upload a file to the current hosts.
  
  The 'localpath' parameter is the relative or absolute path to the file on
  your localhost that you wish to upload to the fab_hosts.
  The 'remotepath' parameter is the destination path on the individual
  fab_hosts, and relative paths are relative to the fab_user's home
  directory.
  
  May take an additional 'fail' keyword argument with one of these values:
    * ignore - do nothing on failure
    * warn - print warning on failure
    * abort - terminate fabric on failure
  
  Example:
    put('bin/project.zip', '/tmp/project.zip')
  
  """
  localpath = _lazy_format(localpath, env)
  remotepath = _lazy_format(remotepath, env)
  if not os.path.exists(localpath):
    return False
  ftp = client.open_sftp()
  # SZ: print("[%s] put: %s -> %s" % (host, localpath, remotepath))
  ftp.put(localpath, remotepath)
  return True

@operation
@run_per_host
def download(host, client, env, remotepath, localpath, **kwargs):
  """
  Download a file from the remote hosts.
  
  The 'remotepath' parameter is the relative or absolute path to the files
  to download from the fab_hosts. The 'localpath' parameter will be suffixed
  with the individual hostname from which they were downloaded, and the
  downloaded files will then be stored in those respective paths.
  
  May take an additional 'fail' keyword argument with one of these values:
    * ignore - do nothing on failure
    * warn - print warning on failure
    * abort - terminate fabric on failure
  
  Example:
    set(fab_hosts=['node1.cluster.com', 'node2.cluster.com'])
    download('/var/log/server.log', 'server.log')
  
  The above code will produce two files on your local system, called
  "server.log.node1.cluster.com" and "server.log.node2.cluster.com"
  respectively.
  
  """
  ftp = client.open_sftp()
  localpath = _lazy_format(localpath) + '.' + host
  remotepath = _lazy_format(remotepath)
  print("[%s] download: %s <- %s" % (host, localpath, remotepath))
  ftp.get(remotepath, localpath)
  return True

@operation
@run_per_host
def run(host, client, env, cmd, **kwargs):
  """
  Run a shell command on the current fab_hosts.
  
  The provided command is executed with the permissions of fab_user, and the
  exact execution environ is determined by the fab_shell variable.
  
  May take an additional 'fail' keyword argument with one of these values:
    * ignore - do nothing on failure
    * warn - print warning on failure
    * abort - terminate fabric on failure
  
  Example:
    run("ls")
  
  """
  cmd = _lazy_format(cmd, env)
  real_cmd = env['fab_shell'] % cmd.replace('"', '\\"')
  if not _confirm_proceed('run', host, kwargs):
    return False
  # SZ: print("[%s] run: %s" % (host, cmd))
  chan = client._transport.open_session()
  chan.exec_command(real_cmd)
  bufsize = -1
  stdin = chan.makefile('wb', bufsize)
  stdout = chan.makefile('rb', bufsize)
  stderr = chan.makefile_stderr('rb', bufsize)
  
  out_th = _start_outputter("[%s] out" % host, stdout)
  # SZ: err_th = _start_outputter("[%s] err" % host, stderr)
  status = chan.recv_exit_status()
  chan.close()
  return status == 0

@operation
@run_per_host
def sudo(host, client, env, cmd, **kwargs):
  """
  Run a sudo (root privileged) command on the current hosts.
  
  The provided command is executed with root permissions, provided that
  fab_user is in the sudoers file in the remote host. The exact execution
  environ is determined by the fab_shell variable - the 'sudo' part is
  injected into this variable.
  
  May take an additional 'fail' keyword argument with one of these values:
    * ignore - do nothing on failure
    * warn - print warning on failure
    * abort - terminate fabric on failure
  
  Example:
    sudo("install_script.py")
  
  """
  cmd = _lazy_format(cmd, env)
  passwd = env['fab_password']
  sudo_cmd = passwd and "sudo -S " or "sudo "
  real_cmd = env['fab_shell'] % (sudo_cmd + cmd.replace('"', '\\"'))
  cmd = env['fab_print_real_sudo'] and real_cmd or cmd
  if not _confirm_proceed('sudo', host, kwargs):
    return False # TODO: should we return False in fail??
  # SZ: print("[%s] sudo: %s" % (host, cmd))
  chan = client._transport.open_session()
  chan.exec_command(real_cmd)
  bufsize = -1
  stdin = chan.makefile('wb', bufsize)
  stdout = chan.makefile('rb', bufsize)
  stderr = chan.makefile_stderr('rb', bufsize)
  if passwd:
    stdin.write(env['fab_password'])
    stdin.write('\n')
    stdin.flush()
  out_th = _start_outputter("[%s] out" % host, stdout)
  err_th = _start_outputter("[%s] err" % host, stderr)
  status = chan.recv_exit_status()
  chan.close()
  return status == 0

@operation
def local(cmd, **kwargs):
  """
  Run a command locally.
  
  This operation is essentially 'os.system()' except that variables are
  expanded prior to running.
  
  May take an additional 'fail' keyword argument with one of these values:
    * ignore - do nothing on failure
    * warn - print warning on failure
    * abort - terminate fabric on failure
  
  Example:
    local("make clean dist", fail='abort')
  
  """
  final_cmd = _lazy_format(cmd)
  # SZ: print("[localhost] run: " + final_cmd)
  retcode = subprocess.call(final_cmd, shell=True)
  if retcode != 0:
    _fail(kwargs, "Local command failed:\n" + _indent(final_cmd))

@operation
def local_per_host(cmd, **kwargs):
  """
  Run a command locally, for every defined host.
  
  Like the local() operation, this is pretty similar to 'os.system()', but
  with this operation, the command is executed (and have its variables
  expanded) for each host in fab_hosts.
  
  May take an additional 'fail' keyword argument with one of these values:
    * ignore - do nothing on failure
    * warn - print warning on failure
    * abort - terminate fabric on failure
  
  Example:
    local_per_host("scp -i login.key stuff.zip $(fab_host):stuff.zip")
  
  """
  _check_fab_hosts()
  con_envs = [con.get_env() for con in CONNECTIONS]
  if not con_envs:
    # we might not have connected yet
    for hostname in ENV['fab_hosts']:
      env = {}
      env.update(ENV)
      env['fab_host'] = hostname
      con_envs.append(env)
  for env in con_envs:
    final_cmd = _lazy_format(cmd, env)
    # SZ: print(_lazy_format("[localhost/$(fab_host)] run: " + final_cmd, env))
    retcode = subprocess.call(final_cmd, shell=True)
    if retcode != 0:
      _fail(kwargs, "Local command failed:\n" + _indent(final_cmd))

@operation
def load(filename, **kwargs):
  """
  Load up the given fabfile.
  
  This loads the fabfile specified by the 'filename' parameter into fabric
  and make its commands and other functions available in the scope of the 
  current fabfile.
  
  May take an additional 'fail' keyword argument with one of these values:
    * ignore - do nothing on failure
    * warn - print warning on failure
    * abort - terminate fabric on failure
  
  Example:
    load("conf/production-settings.py")
  
  """
  if os.path.exists(filename):
    execfile(filename)
    for name, obj in locals().items():
      if not name.startswith('_') and isinstance(obj, types.FunctionType):
        COMMANDS[name] = obj
      if not name.startswith('_'):
        __builtins__[name] = obj
  else:
    _fail(kwargs, "Load failed:\n" + _indent(
      "File not found: " + filename))

@operation
def upload_project(**kwargs):
  """
  Uploads the current project directory to the connected hosts.
  
  This is a higher-level convenience operation that basically 'tar' up the
  directory that contains your fabfile (presumably it is your project
  directory), uploads it to the fab_hosts and 'untar' it.
  
  This operation expects the tar command-line utility to be available on your
  local machine, and it also expects your system to have a /tmp directory
  that is writeable.
  
  Unless something fails half-way through, this operation will make sure to
  delete the temporary files it creates.
  
  """
  tar_file = "/tmp/fab.%(fab_timestamp)s.tar" % ENV
  cwd_name = os.getcwd().split(os.sep)[-1]
  local("tar -czf %s ." % tar_file, **kwargs)
  put(tar_file, cwd_name + ".tar.gz", **kwargs)
  local("rm -f " + tar_file, **kwargs)
  run("tar -xzf " + cwd_name, **kwargs)
  run("rm -f " + cwd_name + ".tar.gz", **kwargs)

#
# Standard Fabric commands:
#
@command("help")
def _help(**kwargs):
  """
  Display Fabric usage help, or help for a given command.
  
  You can provide help with a parameter and get more detailed help for a
  specific command. For instance, to learn more about the list command, you
  could run 'fab help:list'.
  
  If you are developing your own fabfile, then you might also be interested
  in learning more about operations. You can do this by running help with the
  'op' parameter set to the name of the operation you would like to learn
  more about. For instance, to learn more about the 'run' operation, you
  could run 'fab help:op=run'.
  
  Lastly, you can also learn more about a certain strategy with the 'strg'
  and 'strategy' parameters: 'fab help:strg=rolling'.
  
  """
  if kwargs:
    for k, v in kwargs.items():
      if k in COMMANDS:
        _print_help_for_in(k, COMMANDS)
      elif k in OPERATIONS:
        _print_help_for_in(k, OPERATIONS)
      elif k in ['op', 'operation']:
        _print_help_for_in(kwargs[k], OPERATIONS)
      elif k in ['strg', 'strategy']:
        _print_help_for_in(kwargs[k], STRATEGIES)
      else:
        _print_help_for(k, None)
  else:
    print("""
  Fabric is a simple pythonic remote deployment tool.
  
  Type 'fab list' to get a list of available commands.
  Type 'fab help:help' to get more information on how to use the built in
  help.
  
  """)

@command("list")
def _list_commands(**kwargs):
  """
  Display a list of commands with descriptions.
  
  By default, the list command prints a list of available commands, with a
  short description (if one is available). However, the list command can also
  print a list of available operations if you provide it with the 'ops' or
  'operations' parameters, or it can print strategies with the 'strgs' and
  'strategies' parameters.
  
  """
  if kwargs:
    for k, v in kwargs.items():
      if k in ['cmds', 'commands']:
        print("Available commands are:")
        _list_objs(COMMANDS)
      elif k in ['ops', 'operations']:
        print("Available operations are:")
        _list_objs(OPERATIONS)
      elif k in ['strgs', 'strategies']:
        print("Available strategies are:")
        _list_objs(STRATEGIES)
      else:
        print("Don't know how to list '%s'." % k)
        print("Try one of these instead:")
        print(_indent('\n'.join([
          'cmds', 'commands',
          'ops', 'operations',
          'strgs', 'strategies',
        ])))
        sys.exit(1)
  else:
    print("Available commands are:")
    _list_objs(COMMANDS)

@command("license")
def _license():
  "Display the Fabric distribution license text."
  print("""		  GNU GENERAL PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License applies to any program or other work which contains
a notice placed by the copyright holder saying it may be distributed
under the terms of this General Public License.  The "Program", below,
refers to any such program or work, and a "work based on the Program"
means either the Program or any derivative work under copyright law:
that is to say, a work containing the Program or a portion of it,
either verbatim or with modifications and/or translated into another
language.  (Hereinafter, translation is included without limitation in
the term "modification".)  Each licensee is addressed as "you".

Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope.  The act of
running the Program is not restricted, and the output from the Program
is covered only if its contents constitute a work based on the
Program (independent of having been made by running the Program).
Whether that is true depends on what the Program does.

  1. You may copy and distribute verbatim copies of the Program's
source code as you receive it, in any medium, provided that you
conspicuously and appropriately publish on each copy an appropriate
copyright notice and disclaimer of warranty; keep intact all the
notices that refer to this License and to the absence of any warranty;
and give any other recipients of the Program a copy of this License
along with the Program.

You may charge a fee for the physical act of transferring a copy, and
you may at your option offer warranty protection in exchange for a fee.

  2. You may modify your copy or copies of the Program or any portion
of it, thus forming a work based on the Program, and copy and
distribute such modifications or work under the terms of Section 1
above, provided that you also meet all of these conditions:

  a) You must cause the modified files to carry prominent notices
  stating that you changed the files and the date of any change.

  b) You must cause any work that you distribute or publish, that in
  whole or in part contains or is derived from the Program or any
  part thereof, to be licensed as a whole at no charge to all third
  parties under the terms of this License.

  c) If the modified program normally reads commands interactively
  when run, you must cause it, when started running for such
  interactive use in the most ordinary way, to print or display an
  announcement including an appropriate copyright notice and a
  notice that there is no warranty (or else, saying that you provide
  a warranty) and that users may redistribute the program under
  these conditions, and telling the user how to view a copy of this
  License.  (Exception: if the Program itself is interactive but
  does not normally print such an announcement, your work based on
  the Program is not required to print an announcement.)

These requirements apply to the modified work as a whole.  If
identifiable sections of that work are not derived from the Program,
and can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works.  But when you
distribute the same sections as part of a whole which is a work based
on the Program, the distribution of the whole must be on the terms of
this License, whose permissions for other licensees extend to the
entire whole, and thus to each and every part regardless of who wrote it.

Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Program.

In addition, mere aggregation of another work not based on the Program
with the Program (or with a work based on the Program) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License.

  3. You may copy and distribute the Program (or a work based on it,
under Section 2) in object code or executable form under the terms of
Sections 1 and 2 above provided that you also do one of the following:

  a) Accompany it with the complete corresponding machine-readable
  source code, which must be distributed under the terms of Sections
  1 and 2 above on a medium customarily used for software interchange; or,

  b) Accompany it with a written offer, valid for at least three
  years, to give any third party, for a charge no more than your
  cost of physically performing source distribution, a complete
  machine-readable copy of the corresponding source code, to be
  distributed under the terms of Sections 1 and 2 above on a medium
  customarily used for software interchange; or,

  c) Accompany it with the information you received as to the offer
  to distribute corresponding source code.  (This alternative is
  allowed only for noncommercial distribution and only if you
  received the program in object code or executable form with such
  an offer, in accord with Subsection b above.)

The source code for a work means the preferred form of the work for
making modifications to it.  For an executable work, complete source
code means all the source code for all modules it contains, plus any
associated interface definition files, plus the scripts used to
control compilation and installation of the executable.  However, as a
special exception, the source code distributed need not include
anything that is normally distributed (in either source or binary
form) with the major components (compiler, kernel, and so on) of the
operating system on which the executable runs, unless that component
itself accompanies the executable.

If distribution of executable or object code is made by offering
access to copy from a designated place, then offering equivalent
access to copy the source code from the same place counts as
distribution of the source code, even though third parties are not
compelled to copy the source along with the object code.

  4. You may not copy, modify, sublicense, or distribute the Program
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense or distribute the Program is
void, and will automatically terminate your rights under this License.
However, parties who have received copies, or rights, from you under
this License will not have their licenses terminated so long as such
parties remain in full compliance.

  5. You are not required to accept this License, since you have not
signed it.  However, nothing else grants you permission to modify or
distribute the Program or its derivative works.  These actions are
prohibited by law if you do not accept this License.  Therefore, by
modifying or distributing the Program (or any work based on the
Program), you indicate your acceptance of this License to do so, and
all its terms and conditions for copying, distributing or modifying
the Program or works based on it.

  6. Each time you redistribute the Program (or any work based on the
Program), the recipient automatically receives a license from the
original licensor to copy, distribute or modify the Program subject to
these terms and conditions.  You may not impose any further
restrictions on the recipients' exercise of the rights granted herein.
You are not responsible for enforcing compliance by third parties to
this License.

  7. If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Program at all.  For example, if a patent
license would not permit royalty-free redistribution of the Program by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Program.

If any portion of this section is held invalid or unenforceable under
any particular circumstance, the balance of the section is intended to
apply and the section as a whole is intended to apply in other
circumstances.

It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system, which is
implemented by public license practices.  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice.

This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License.

  8. If the distribution and/or use of the Program is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Program under this License
may add an explicit geographical distribution limitation excluding
those countries, so that distribution is permitted only in or among
countries not thus excluded.  In such case, this License incorporates
the limitation as if written in the body of this License.

  9. The Free Software Foundation may publish revised and/or new versions
of the General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

Each version is given a distinguishing version number.  If the Program
specifies a version number of this License which applies to it and "any
later version", you have the option of following the terms and conditions
either of that version or of any later version published by the Free
Software Foundation.  If the Program does not specify a version number of
this License, you may choose any version ever published by the Free Software
Foundation.

  10. If you wish to incorporate parts of the Program into other free
programs whose distribution conditions are different, write to the author
to ask for permission.  For software which is copyrighted by the Free
Software Foundation, write to the Free Software Foundation; we sometimes
make exceptions for this.  Our decision will be guided by the two goals
of preserving the free status of all derivatives of our free software and
of promoting the sharing and reuse of software generally.""")

@command("warranty")
def _warranty():
  "Display warranty information for the Fabric software."
  print("""			  NO WARRANTY

  BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
REPAIR OR CORRECTION.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.""")

@command("set")
def _set(**kwargs):
  """
  Set a Fabric variable.
  
  Example:
    $fab set:fab_user=billy,other_var=other_value
  """
  for k, v in kwargs.items():
    ENV[k] = (v % ENV)

@command("shell")
def _shell(**kwargs):
  """
  Start an interactive shell connection to the specified hosts.
  
  Optionally takes a list of hostnames as arguments, if Fabric is, by
  the time this command runs, not already connected to one or more
  hosts. If you provide hostnames and Fabric is already connected, then
  Fabric will, depending on fab_fail, complain and abort.
  
  The fab_fail variable can be overwritten with the 'set' command, or
  by specifying an additional 'fail' argument.
  
  Examples:
    $fab shell
    $fab shell:localhost,127.0.0.1
    $fab shell:localhost,127.0.0.1,fail=warn
  
  """
  # expect every arg w/o a value to be a hostname
  hosts = filter(lambda k: not kwargs[k], kwargs.keys())
  if hosts:
    if CONNECTIONS:
      _fail(kwargs, "Already connected to predefined fab_hosts.")
    set(fab_hosts = hosts)
  def lines():
    try:
      while True:
        yield raw_input("up> ")
    except EOFError:
      # user pressed ctrl-d
      print
  for line in lines():
    if line == 'exit':
      break
    elif line.startswith('sudo '):
      sudo(line[5:], fail='warn')
    else:
      run(line, fail='warn')

#
# Standard strategies:
#
@strategy("fanout")
def _fanout_strategy(fn, *args, **kwargs):
  """
  A strategy that executes on all hosts in parallel.
  
  THIS STRATEGY IS CURRENTLY BROKEN!
  
  """
  err_msg = "The $(fab_current_operation) operation failed on $(fab_host)"
  threads = []
  for host_conn in CONNECTIONS:
    env = host_conn.get_env()
    env['fab_current_operation'] = fn.__name__
    host = env['fab_host']
    client = host_conn.client
    def functor():
      _try_run_operation(fn, host, client, env, *args, **kwargs)
    thread = threading.Thread(None, functor)
    thread.setDaemon(True)
    threads.append(thread)
  map(threading.Thread.start, threads)
  map(threading.Thread.join, threads)

@strategy("rolling")
def _rolling_strategy(fn, *args, **kwargs):
  """One-at-a-time fail-fast strategy."""
  err_msg = "The $(fab_current_operation) operation failed on $(fab_host)"
  for host_conn in CONNECTIONS:
    env = host_conn.get_env()
    env['fab_current_operation'] = fn.__name__
    host = env['fab_host']
    client = host_conn.client
    _try_run_operation(fn, host, client, env, *args, **kwargs)

#
# Internal plumbing:
#

class HostConnection(object):
  """
  A connection to an SSH host - wraps an SSHClient.
  
  Instances of this class populate the CONNECTIONS list.
  """
  def __init__(self, hostname, port, global_env, user_local_env):
    self.global_env = global_env
    self.user_local_env = user_local_env
    self.host_local_env = {
      'fab_host': hostname,
      'fab_port': port,
    }
    self.client = None
  def get_env(self):
    "Create a new environment that is the union of local and global envs."
    env = dict(self.global_env)
    env.update(self.user_local_env)
    env.update(self.host_local_env)
    return env
  def connect(self):
    env = self.get_env()
    new_host_key = env['fab_new_host_key']
    client = ssh.SSHClient()
    client.load_system_host_keys()
    if new_host_key == 'accept':
      client.set_missing_host_key_policy(ssh.AutoAddPolicy())
    try:
      self._do_connect(client, env)
    except (ssh.AuthenticationException, ssh.SSHException):
      PASS_PROMPT = \
        "Password for $(fab_user)@$(fab_host)$(fab_passprompt_suffix)"
      if 'fab_password' in env and env['fab_password']:
        env['fab_passprompt_suffix'] = " [Enter for previous]: "
      else:
        env['fab_passprompt_suffix'] = ": "
      connected = False
      password = None
      while not connected:
        try:
          password = getpass.getpass(_lazy_format(PASS_PROMPT, env))
          env['fab_password'] = password
          self._do_connect(client, env)
          connected = True
        except ssh.AuthenticationException:
          print("Bad password.")
          env['fab_passprompt_suffix'] = ": "
        except (EOFError, TypeError):
          # ctrl-D or ctrl-C on password prompt
          print
          sys.exit(0)
      self.host_local_env['fab_password'] = password
      self.user_local_env['fab_password'] = password
    self.client = client
  def disconnect(self):
    if self.client:
      self.client.close()
  def _do_connect(self, client, env):
    host = env['fab_host']
    port = env['fab_port']
    username = env['fab_user']
    password = env['fab_password']
    pkey = env['fab_pkey']
    key_filename = env['fab_key_filename']
    client.connect(host, port, username, password, pkey, key_filename)
  def __str__(self):
    return self.host_local_env['fab_host']

def _indent(text, level=4):
  "Indent all lines in text with 'level' number of spaces, default 4."
  return '\n'.join(((' ' * level) + line for line in text.splitlines()))

def _print_help_for(name, doc):
  "Output a pretty-printed help text for the given name & doc"
  default_help_msg = '* No help-text found.'
  msg = doc or default_help_msg
  lines = msg.splitlines()
  # remove leading blank lines
  while lines and lines[0].strip() == '':
    lines = lines[1:]
  # remove trailing blank lines
  while lines and lines[-1].strip() == '':
    lines = lines[:-1]
  if lines:
    msg = '\n'.join(lines)
    if not msg.startswith('  '):
      msg = _indent(msg)
    print("Help for '%s':\n%s" % (name, msg))
  else:
    print("No help message found for '%s'." % name)

def _print_help_for_in(name, dictionary):
  "Print a pretty help text for the named function in the dict."
  if name in dictionary:
    _print_help_for(name, dictionary[name].__doc__)
  else:
    _print_help_for(name, None)

def _list_objs(objs):
  max_name_len = reduce(lambda a, b: max(a, len(b)), objs.keys(), 0)
  cmds = objs.items()
  cmds.sort(lambda x, y: cmp(x[0], y[0]))
  for name, fn in cmds:
    print '  ', name.ljust(max_name_len),
    if fn.__doc__:
      print ':', filter(None, fn.__doc__.splitlines())[0].strip()
    else:
      print

def _check_fab_hosts():
  "Check that we have a fab_hosts variable, and complain if it's missing."
  if 'fab_hosts' not in ENV:
    print("Fabric requires a fab_hosts variable.")
    print("Please set it in your fabfile.")
    print("Example: set(fab_hosts=['node1.com', 'node2.com'])")
    sys.exit(1)
  if len(ENV['fab_hosts']) == 0:
    print("The fab_hosts list was empty.")
    print("Please specify some hosts to connect to.")
    sys.exit(1)

def _connect():
  "Populate CONNECTIONS with HostConnection instances as per fab_hosts."
  _check_fab_hosts()
  signal.signal(signal.SIGINT, lambda: _disconnect() and sys.exit(0))
  global CONNECTIONS
  def_port = ENV['fab_port']
  username = ENV['fab_user']
  fab_hosts = ENV['fab_hosts']
  user_envs = {}
  host_connections_by_user = {}
  
  # grok fab_hosts into who connects to where
  for host in fab_hosts:
    if '@' in host:
      user, _, host_and_port = partition(host, '@')
    else:
      user, host_and_port = None, host
    hostname, _, port = partition(host_and_port, ':')
    user = user or username
    port = int(port or def_port)
    if user is not '' and user not in user_envs:
      user_envs[user] = {'fab_user': user}
    conn = HostConnection(hostname, port, ENV, user_envs[user])
    if user not in host_connections_by_user:
      host_connections_by_user[user] = [conn]
    else:
      host_connections_by_user[user].append(conn)
  
  # Print and establish connections
  for user, host_connections in host_connections_by_user.iteritems():
    user_env = dict(ENV)
    user_env.update(user_envs[user])
    print(_lazy_format("Logging into the following hosts as $(fab_user):",
      user_env))
    print(_indent('\n'.join(map(str, host_connections))))
    map(HostConnection.connect, host_connections)
    CONNECTIONS += host_connections
  set(fab_connected=True)

def _disconnect():
  "Disconnect all clients."
  global CONNECTIONS
  map(HostConnection.disconnect, CONNECTIONS)
  CONNECTIONS = []

def _lazy_format(string, env=ENV):
  "Do recursive string substitution of ENV vars - both lazy and eager."
  if string is None:
    return None
  env = dict([(k, str(v)) for k, v in env.items()])
  def replacer_fn(match):
    var = match.group('var')
    if var in env:
      return _lazy_format(env[var] % env, env)
    else:
      return match.group(0)
  return re.sub(_LAZY_FORMAT_SUBSTITUTER, replacer_fn, string % env)

def _on_hosts_do(fn, *args, **kwargs):
  """
  Invoke the given function with hostname and client parameters in
  accord with the current fab_mode strategy.
  
  fn should be a callable taking these parameters:
    hostname : str
    client : paramiko.SSHClient
    *args
    **kwargs
  
  """
  strategy = ENV['fab_mode']
  if strategy in STRATEGIES:
    strategy_fn = STRATEGIES[strategy]
    strategy_fn(fn, *args, **kwargs)
  else:
    print("Unsupported fab_mode: %s" % strategy)
    print("Supported modes are: %s" % (', '.join(STRATEGIES.keys())))
    sys.exit(1)

def _try_run_operation(fn, host, client, env, *args, **kwargs):
  """
  Used by strategies to attempt the execution of an operation, and handle
  any failures appropriately.
  """
  err_msg = "The $(fab_current_operation) operation failed on $(fab_host)"
  success = False
  try:
    success = fn(host, client, env, *args, **kwargs)
  except SystemExit:
    raise
  except BaseException, e:
    _fail(kwargs, err_msg + ':\n' + _indent(str(e)), env)
  if not success:
    _fail(kwargs, err_msg + '.', env)

def _confirm_proceed(exec_type, host, kwargs):
  if 'confirm' in kwargs:
    infotuple = (exec_type, host, _lazy_format(kwargs['confirm']))
    question = "Confirm %s for host %s: %s [yN] " % infotuple
    answer = raw_input(question)
    return answer and answer in 'yY'
  return True

def _fail(kwargs, msg, env=ENV):
  # Get failure code
  codes = {
    'ignore': (1, ''),
    'warn': (2, 'Warning: '),
    'abort': (3, 'Error: '),
  }
  code, msg_prefix = codes[env['fab_fail']]
  if 'fail' in kwargs:
    code, msg_prefix = codes[kwargs['fail']]
  # If warn or above, print message
  if code > 1:
    print(msg_prefix + _lazy_format(msg, env))
    # If abort, also exit
    if code > 2:
      sys.exit(1)


def _start_outputter(prefix, channel):
  def outputter():
    line = channel.readline()
    while line:
      # SZ: print("%s: %s" % (prefix, line)),
      line = channel.readline()
  thread = threading.Thread(None, outputter, prefix)
  thread.setDaemon(True)
  thread.start()
  return thread

def _pick_fabfile():
  "Figure out what the fabfile is called."
  guesses = ['setup.py', 'fabfile', 'Fabfile', 'fabfile.py', 'Fabfile.py']
  options = filter(os.path.exists, guesses)
  if options:
    return options[0]
  else:
    return guesses[0] # load() will barf for us...

def _load_default_settings():
  "Load user-default fabric settings from ~/.fabric"
  # TODO: http://mail.python.org/pipermail/python-list/2006-July/393819.html
  cfg = os.path.expanduser("~/.fabric")
  if os.path.exists(cfg):
    comments = lambda s: s and not s.startswith("#")
    settings = filter(comments, open(cfg, 'r'))
    settings = [(k.strip(), v.strip()) for k, _, v in
      [partition(s, '=') for s in settings]]
    ENV.update(settings)

def _parse_args(args):
  cmds = []
  for cmd in args:
    cmd_args = {}
    if ':' in cmd:
      cmd, cmd_str_args = cmd.split(':', 1)
      for cmd_arg_kv in cmd_str_args.split(','):
        k, _, v = partition(cmd_arg_kv, '=')
        cmd_args[k] = (v % ENV)
    cmds.append((cmd, cmd_args))
  return cmds

def _validate_commands(cmds):
  if not cmds:
    print("No commands given.")
    _list_commands()
  else:
    for cmd in cmds:
      if not cmd[0] in COMMANDS:
        print("No such command: %s" % cmd[0])
        sys.exit(1)

def _execute_commands(cmds):
  for cmd, args in cmds:
    ENV['fab_cur_command'] = cmd
    # SZ: print("Running %s..." % cmd)
    if args is not None:
      args = dict(zip(args.keys(), map(_lazy_format, args.values())))
    COMMANDS[cmd](**(args or {}))

def main():
  args = sys.argv[1:]
  if not args:
    args.append('run')
  try:
    try:
      # SZ: print(__greeter__ % ENV)
      _load_default_settings()
      fabfile = _pick_fabfile()
      load(fabfile, fail='warn')
      commands = _parse_args(args)
      _validate_commands(commands)
      _execute_commands(commands)
    finally:
      _disconnect()
    # SZ: print("Done.")
  except SystemExit:
    # a number of internal functions might raise this one.
    raise
  except KeyboardInterrupt:
    print("Stopped.")
    sys.exit(1)
  except:
    sys.excepthook(*sys.exc_info())
    # we might leave stale threads if we don't explicitly exit()
    sys.exit(1)
  sys.exit(0)

########NEW FILE########
__FILENAME__ = version
INDIVO_SERVER_VERSION = '2.0'

INDIVO_SERVER_RELEASE = '2.0.0'

SMART_COMPATIBILITY = {
    '2.0.0' : '0.4',
}

########NEW FILE########
