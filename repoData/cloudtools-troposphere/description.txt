## Pending
- Use subnet group for param, not vpc securitygroup [GH-65]
- Add support for Equals function and Condition [GH-66]
- Added ELB access logs and CrossZone test [GH-67]
- Added support for more condition functions [GH-69]
- Tweaked a few integer validation messages [GH-71]
- Fix resource.name backward compatibility regression
- Fix pep8 errors due to new pep8 1.5.x changes [GH-72]
- Allow Ref() in VPNGatewayRoutePropagation RouteTableIds list [GH-73]
- Add OpsWorks Support [GH-74]
- Add new property MetricsCollection [GH-79]
- Patching Users class to use basestring or Ref type for Groups [GH-80]
- Added support for Kinesis [GH-81]

## 0.5.0 (2014-03-21)
- Add OpenStack native types [GH-61]
- Make `integer()` validator work with any integer-like object [GH-57]
- Add support to ELB ConnectionDrainingPolicy [GH-62]
- Add more OpenStack resource types and validation [GH-63]

## 0.4.0 (2014-02-19)
- Allow to extend resource classes by adding custom attributes [GH-16]
- Add AWS::ElastiCache::SubnetGroup [GH-27]
- Fix examples/VPC\_EC2\_Instance\_With\_Multiple\_Dynamic\_IPAddresses.py [GH-29]
- CacheSecurityGroupNames not required if using VpcSecurityGroupIds [GH-31]
- Add VPNConnectionRoute object and attribute to VPNConnection [GH-33]
- add new CrossZone option to ELB [GH-34]
- Add VPC\_With\_VPN\_Connection example
- Fixup some of the network related validators and pep8 changes
- Add support for Tags and PortRange
- Add more resource name properties per CloudFormation release 2013-12-19
- Add Tier Environment property per CloudFormation release 2013-12-19
- Add VPNGatewayRoutePropagation per CloudFormation release 2013-11-22
- Add Tags properties  per CloudFormation release 2013-09-24
- Add network changes from CloudFormation release 2013-09-17
- Canonicalize integer and bool values for more consistent output [GH-35]
- Add travis-ci for automated testing [GH-38]
- Check output of examples in test\_examples [GH-40]
- Add support for conditions and for Fn::If() [GH-41]
- Tweak ELB ranges to match ec2 console [GH-43]
- Handle bool values better in cfn2py [GH-45]
- Allow strings (as well as Refs) for Subnet VpcId [GH-47]
- Add InstanceID to AutoScalingGroup and LaunchConfiguration
- ec2.DHCPOptions NTPservers -> NtpServers [GH-54]
- Add SQS dead letter queue from CloudFormation release 2014-01-29
- Add AutoScaling ScheduledAction from release 2014-01-27
- Add Tags for SecurityGroups [GH-55]
- RecordSets in Route53 not formatted correctly [GH-51]
- Allow Ref() in NetworkInterfaceProperty GroupSet list [GH-56]

## 0.3.4 (2013-12-05)
- Adding separators options to print to json function [GH-19]
- Add cfn2py script to convert json templates to Python [GH-22]
- Add EnableDnsSupport and EnableDnsHostnames properties for VPC [GH-23]
- Add VPC support to elasticache [GH-24]
- Fix missing Import Ref [GH-26]
- Add missing AWS::SQS::Queue properties
- Add resource naming (Name Type)
- Allow Ref's in the list objects

## 0.3.3 (2013-10-04)
- Fix Ref() to output the name only [GH-17]
- Add Ref test.
- Fix some IAM issues

## 0.3.2 (2013-09-25)
- Convert VPCDHCPOptionsAssociation to not have \_\_init\_\_
- Fix Output, Parameter and UpdatePolicy to not output a Properties dict
- Raise a ValueError if adding a duplicate object to the template
- Set the correct dictname for UpdatePolicy

## 0.3.1 (2013-09024)
- Make the code more DRY [GH-15]
- Add a optional `name` argument to AWSProperty constructor
- Add ability to push large stack templates to S3
- InstanceType is not required (defaults to m1.small)
- Add AssociatePublicIpAddress property for AutoScaling LaunchConfiguration
- Make Tags an AWSHelperFn to make it easier to assign
- Resource property types should not be in a Properties dictionary
- Clean up "required" error checking and handle property types better

## 0.3.0 (2013-08-07)
- Do not validate AWSHelperFun's [GH-8] [GH-9]
- Add missing return in integer\_range [GH-10]
- integer\_range validator for ELB HealthyCheckInt
- Convert RDS::DBInstance::VPCSecurityGroups to new list type checking
- VPCSecurityGroups for RDS should be a list, not a basestring 

## 0.2.9 (2013-05-07)
- Fixing ELB LoadBalancerPorts not required (error in the AWS docs)

## 0.2.8 (2013-04-24)
- EC2 SecurityGroup Egress & Ingress rules should be objects
- Fix Attributes validator for ELB Policies
- Allow PolicyDocuments to use (if present) awacs Policy objects
- Add test for matching against a tuple of types

## 0.2.6 (2013-03-26)
- Add cfn script to create, tail and show stack resources

## 0.2.5 (2013-03-25)
- UpdatePolicy validation enhancements [GH-5]
- Add VPCSecurityGroups property to AWS::RDS::DBInstance
- DefaultCacheBehavior is a required property for DistributionConfig
- Fix CustomGateway -> CustomerGateway
- Domain does not have any properties
- Fix VPC security group rule bugs
- Added EBSBlockDevice and BlockDeviceMapping classes.
- Add a post-validator to allow individual object to validate themselves
- Add ability to use validate functions on property values
- Add validation of list element types
- Add unit tests

## 0.2.0 (2013-02-26)
- Add support for autoscaling notification configurations [GH-2]
- Add support for AWS::ElastiCache and AWS::RDS
- Move to AWSProperty entirely.
- Add shortcuts for the NotificationTypes strings
- Add Python 3.x compatibility support
- Pass pep8 and pyflakes

## 0.1.2 (2013-02-21)
- First PyPI release
- Add S3 bucket support [GH-1]

troposphere - library to create [AWS CloudFormation][] descriptions

The troposphere library allows for easier creation of the AWS CloudFormation
JSON by writing Python code to describe the AWS resources. Troposphere also
includes some basic support for [OpenStack resources][] via heat.

To facilitate catching CloudFormation or JSON errors early the library has
property and type checking built into the classes.

A simple example to create an instance would look like this:
```
>>> from troposphere import Ref, Template
>>> import troposphere.ec2 as ec2
>>> t = Template()
>>> instance = ec2.Instance("myinstance")
>>> instance.ImageId = "ami-951945d0"
>>> instance.InstanceType = "t1.micro"
>>> t.add_resource(instance)
<troposphere.ec2.Instance object at 0x101bf3390>
>>> print(t.to_json())
{
    "Resources": {
        "myinstance": {
            "Properties": {
                "ImageId": "ami-951945d0", 
                "InstanceType": "t1.micro"
            }, 
            "Type": "AWS::EC2::Instance"
        }
    }
}
```

Alternatively, parameters can be used instead of properties:
```
>>> instance = ec2.Instance("myinstance", ImageId="ami-951945d0", InstanceType="t1.micro")
>>> t.add_resource(instance)
<troposphere.ec2.Instance object at 0x101bf3550>
```

And add_resource() returns the object to make it easy to use with Ref():
```
>>> instance = t.add_resource(ec2.Instance("myinstance", ImageId="ami-951945d0", InstanceType="t1.micro"))
>>> Ref(instance)
<troposphere.Ref object at 0x101bf3490>
```

Examples of the error checking (full tracebacks removed for clarity):

Incorrect property being set on AWS resource:
```
>>> import troposphere.ec2 as ec2
>>> ec2.Instance("ec2instance", image="i-XXXX")
Traceback (most recent call last):
...
AttributeError: AWS::EC2::Instance object does not support attribute image
```

Incorrect type for AWS resource property:
```
>>> ec2.Instance("ec2instance", ImageId=1)
Traceback (most recent call last):
...
TypeError: ImageId is <type 'int'>, expected <type 'basestring'>
```

Missing required property for the AWS resource:
```
>>> from troposphere import Template
>>> import troposphere.ec2 as ec2
>>> t = Template()
>>> t.add_resource(ec2.Instance("ec2instance", ImageId="ami-3bcc9e7e"))
<troposphere.ec2.Instance object at 0x109ee2e50>
>>> print(t.to_json())
Traceback (most recent call last):
...
ValueError: Resource InstanceType required in type AWS::EC2::Instance
```

Currently supported AWS resource types:
- AWS::AutoScaling
- AWS::CloudFormation
- AWS::CloudFront
- AWS::CloudWatch
- AWS::DynamoDB
- AWS::EC2
- AWS::ElastiCache
- AWS::ElasticBeanstalk
- AWS::ElasticLoadBalancing
- AWS::IAM
- AWS::RDS
- AWS::Route53
- AWS::S3
- AWS::SDB
- AWS::SNS
- AWS::SQS

Currently supported OpenStack resource types:
- OS::Neutron::Firewall
- OS::Neutron::FirewallPolicy
- OS::Neutron::FirewallRule
- OS::Neutron::FloatingIP
- OS::Neutron::FloatingIPAssociation
- OS::Neutron::HealthMonitor
- OS::Neutron::Pool
- OS::Neutron::LoadBalancer
- OS::Neutron::Net
- OS::Neutron::PoolMember
- OS::Neutron::Port
- OS::Neutron::SecurityGroup
- OS::Nova::FloatingIP
- OS::Nova::FloatingIPAssociation
- OS::Nova::KeyPair
- OS::Nova::Server

Todo:
- Add additional validity checks
- Add missing AWS resource types:
  - AWS::CloudFormation::Authentication
  - AWS::CloudFormation::CustomResource
  - AWS::CloudFormation::Init
- Need to implement AWS::AutoScaling::AutoScalingGroup TerminationPolicies

Duplicating a single instance sample would look like this:

```
# Converted from EC2InstanceSample.template located at:
# http://aws.amazon.com/cloudformation/aws-cloudformation-templates/

from troposphere import Base64, FindInMap, GetAtt
from troposphere import Parameter, Output, Ref, Template
import troposphere.ec2 as ec2


template = Template()

keyname_param = template.add_parameter(Parameter(
    "KeyName",
    Description="Name of an existing EC2 KeyPair to enable SSH "
                "access to the instance",
    Type="String",
))

template.add_mapping('RegionMap', {
    "us-east-1":      {"AMI": "ami-7f418316"},
    "us-west-1":      {"AMI": "ami-951945d0"},
    "us-west-2":      {"AMI": "ami-16fd7026"},
    "eu-west-1":      {"AMI": "ami-24506250"},
    "sa-east-1":      {"AMI": "ami-3e3be423"},
    "ap-southeast-1": {"AMI": "ami-74dda626"},
    "ap-northeast-1": {"AMI": "ami-dcfa4edd"}
})

ec2_instance = template.add_resource(ec2.Instance(
    "Ec2Instance",
    ImageId=FindInMap("RegionMap", Ref("AWS::Region"), "AMI"),
    InstanceType="t1.micro",
    KeyName=Ref(keyname_param),
    SecurityGroups=["default"],
    UserData=Base64("80")
))

template.add_output([
    Output(
        "InstanceId",
        Description="InstanceId of the newly created EC2 instance",
        Value=Ref(ec2_instance),
    ),
    Output(
        "AZ",
        Description="Availability Zone of the newly created EC2 instance",
        Value=GetAtt(ec2_instance, "AvailabilityZone"),
    ),
    Output(
        "PublicIP",
        Description="Public IP address of the newly created EC2 instance",
        Value=GetAtt(ec2_instance, "PublicIp"),
    ),
    Output(
        "PrivateIP",
        Description="Private IP address of the newly created EC2 instance",
        Value=GetAtt(ec2_instance, "PrivateIp"),
    ),
    Output(
        "PublicDNS",
        Description="Public DNSName of the newly created EC2 instance",
        Value=GetAtt(ec2_instance, "PublicDnsName"),
    ),
    Output(
        "PrivateDNS",
        Description="Private DNSName of the newly created EC2 instance",
        Value=GetAtt(ec2_instance, "PrivateDnsName"),
    ),
])

print(template.to_json())
```

[AWS CloudFormation]: http://aws.amazon.com/cloudformation
[OpenStack resources]: http://docs.openstack.org/developer/heat/template_guide/openstack.html

