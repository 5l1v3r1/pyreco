__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# surlex documentation build configuration file, created by
# sphinx-quickstart on Sun Nov 15 09:07:51 2009.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.append(os.path.abspath('.'))

# -- General configuration -----------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = []

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'surlex'
copyright = '2009, Cody Soyland'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '0.1'
# The full version, including alpha/beta/rc tags.
release = '0.1.2'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of documents that shouldn't be included in the build.
#unused_docs = []

# List of directories, relative to source directory, that shouldn't be searched
# for source files.
exclude_trees = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  Major themes that come with
# Sphinx are currently 'default' and 'sphinxdoc'.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_use_modindex = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# If nonempty, this is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = ''

# Output file base name for HTML help builder.
htmlhelp_basename = 'surlexdoc'


# -- Options for LaTeX output --------------------------------------------------

# The paper size ('letter' or 'a4').
#latex_paper_size = 'letter'

# The font size ('10pt', '11pt' or '12pt').
#latex_font_size = '10pt'

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'surlex.tex', 'surlex Documentation',
   'Cody Soyland', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# Additional stuff for the LaTeX preamble.
#latex_preamble = ''

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_use_modindex = True

########NEW FILE########
__FILENAME__ = surlex2regex
#!/usr/bin/env python
from surlex import Surlex
import sys
from optparse import OptionParser

def main():
    parser = OptionParser()
    parser.set_usage('surlex2regex.py <surlex>')
    if len(sys.argv) == 1:
        argv = ['-h']
    else:
        argv = sys.argv[1:]
    options, args = parser.parse_args(argv)
    print (Surlex(args[0]).translate())

if __name__ == '__main__':
    main()

########NEW FILE########
__FILENAME__ = dj
from django.conf.urls import url
from surlex import Surlex

def surl(surlex, *args, **kwargs):
    return url(Surlex(surlex).translate(), *args, **kwargs)

########NEW FILE########
__FILENAME__ = exceptions
class SurlexException(Exception):
    """
        a generic surlex exception
    """
    pass

class MalformedSurlex(SurlexException):
    """
        surlex parser error -- when read_until does not find
        the expected character it'll throw this
    """
    pass

class MacroDoesNotExist(SurlexException):
    """
        surlex parser error -- when a macro cannot be resolved
        this will be thrown
    """
    pass

########NEW FILE########
__FILENAME__ = grammar
import re
from surlex.exceptions import MalformedSurlex
from surlex.macros import MacroRegistry, DefaultMacroRegistry

# Define the next function for python 2 and 3 compatibility
try:
    if next:
        pass
except NameError:
    def next(iterable):
        return iterable.next()

class Node(object):
    pass

class TextNode(Node):
    def __init__(self, token):
        self.token = token

    def __eq__(self, other):
        return (self.__class__ == other.__class__ and
                self.token == other.token)

    def __repr__(self):
        return '<TextNode "%s">' % self.token

class WildcardNode(Node):
    def __init__(self):
        pass
    def __eq__(self, other):
        return self.__class__ == other.__class__

    def __repr__(self):
        return '<WildcardNode>'

class BlockNode(Node):
    def __init__(self, node_list):
        self.node_list = node_list

    def __eq__(self, other):
        return (self.__class__ == other.__class__ and
                self.node_list == other.node_list)

class OptionalNode(BlockNode):
    def __repr__(self):
        return '<OptionalNode: %s>' % self.node_list

class TagNode(Node):
    def __init__(self, name):
        self.name = name

    def __eq__(self, other):
        return (self.__class__ == other.__class__ and
                self.name == other.name)

    def __repr__(self):
        return '<TagNode: %s>' % self.name

class RegexTagNode(TagNode):
    def __init__(self, name, regex):
        self.name = name
        self.regex = regex

    def __eq__(self, other):
        return (self.__class__ == other.__class__ and
                self.name == other.name and
                self.regex == other.regex)

    def __repr__(self):
        return '<RegexTagNode %s: %s>' % (self.name, self.regex)

class MacroTagNode(TagNode):
    def __init__(self, name, macro):
        self.name = name
        self.macro = macro

    def __eq__(self, other):
        return (self.__class__ == other.__class__ and
                self.name == other.name and
                self.macro == other.macro)

    def __repr__(self):
        return '<MacroTagNode %s: %s>' % (self.name, self.macro)

class Parser(object):
    def __init__(self, surlex):
        self.surlex = surlex
        self.chars = iter(surlex)

    def get_node_list(self):
        return list(self.parse(self.chars))

    def read_until(self, chars, char):
        try:
            next_char = next(chars)
        except StopIteration:
            raise MalformedSurlex('Malformed surlex. Expected %s.' % char)
        if next_char == char:
            return ''
        if next_char == '\\':
            # only escape what we are looking for
            escaped_char = next(chars)
            if escaped_char == char:
                return escaped_char + self.read_until(chars, char)
            else:
                return '\\' + escaped_char + self.read_until(chars, char)
        else:
            return next_char + self.read_until(chars, char)

    def parse(self, chars):
        token = ''
        for char in chars:
            if char in '<*(':
                if token:
                    yield TextNode(token)
                token = ''
            if char == '\\':
                # escape with backslash
                token += next(chars)
            elif char == '<':
                tag_content = self.read_until(chars, '>')
                name = ''
                regex = None
                macro = None
                for char in tag_content:
                    if char == '=':
                        name, regex = tag_content.split('=', 1)
                        break
                    if char == ':':
                        name, macro = tag_content.split(':', 1)
                        break
                if regex:
                    yield RegexTagNode(name, regex)
                elif macro:
                    yield MacroTagNode(name, macro)
                else:
                    yield TagNode(tag_content)
            elif char == '*':
                # wildcard
                yield WildcardNode()
            elif char == '(':
                yield OptionalNode(list(self.parse(chars)))
            elif char == ')':
                # end of node list, stop parsing
                break
            else:
                # literal output
                token += char
        if token:
            yield TextNode(token)

class RegexScribe(object):
    def __init__(self, node_list, macro_registry=DefaultMacroRegistry()):
        self.node_list = node_list
        self.macro_registry = macro_registry

    def translate(self):
        output = ''
        for node in self.node_list:
            if isinstance(node, TextNode):
                output += node.token.replace('.', '\.')
            elif isinstance(node, WildcardNode):
                output += '.*'
            elif isinstance(node, OptionalNode):
                output += '(' + RegexScribe(node.node_list).translate() + ')?'
            elif isinstance(node, TagNode):
                if isinstance(node, MacroTagNode):
                    regex = self.macro_registry.get(node.macro)
                elif isinstance(node, RegexTagNode):
                    regex = node.regex
                else:
                    regex = '.+'
                if node.name:
                    output += '(?P<%s>%s)' % (node.name, regex)
                else:
                    output += regex
        return output

def get_all_nodes(node_list):
    for node in node_list:
        if isinstance(node, BlockNode):
            for node in get_all_nodes(node.node_list):
                yield node
        else:
            yield node

########NEW FILE########
__FILENAME__ = macros
from surlex.exceptions import MacroDoesNotExist

class MacroRegistry(object):
    macros = {}
    def __init__(self, macros={}):
        all_macros = {}
        all_macros.update(self.macros)
        all_macros.update(macros)
        self.macros = all_macros

    def get(self, macro_name):
        try:
            return self.macros[macro_name]
        except KeyError:
            raise MacroDoesNotExist('Macro "%s" not defined' % macro_name)

    def set(self, macro_name, regex):
        self.macros[macro_name] = regex

class DefaultMacroRegistry(MacroRegistry):
    global_macros = {}

    def __init__(self):
        super(DefaultMacroRegistry, self).__init__({
            'Y': r'\d{4}', # year, including century
            'y': r'\d{2}', # year, not including century
            'M': r'(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)', # month, abbreviated
            'm': r'(0?([1-9])|10|11|12)', # month, 1 or 2 digit
            'd': r'((0|1|2)?([1-9])|[1-3]0|31)', # day, 1 or 2 digit
            '#': r'\d+', # number, any length
            's': r'[\w-]+', # slug
            'u': r'[a-fA-F0-9]{8}-?[a-fA-F0-9]{4}-?[a-fA-F0-9]{4}-?[a-fA-F0-9]{4}-?[a-fA-F0-9]{12}', # uuid
        })

    @classmethod
    def register(cls, macro, regex):
        cls.global_macros[macro] = regex

    def get(self, macro_name):
        try:
            return super(DefaultMacroRegistry, self).get(macro_name)
        except MacroDoesNotExist:
            try:
                return self.__class__.global_macros[macro_name]
            except KeyError:
                raise MacroDoesNotExist('Macro "%s" not defined' % macro_name)


########NEW FILE########
__FILENAME__ = tests
import unittest
from surlex import surlex_to_regex as surl, match, register_macro, parsed_surlex_object, Surlex, MacroRegistry
from surlex import grammar
from surlex.exceptions import MalformedSurlex, MacroDoesNotExist
import re

class TestGrammer(unittest.TestCase):
    def test_parser_simple(self):
        parser = grammar.Parser('test')
        self.assertEqual(parser.get_node_list(), [grammar.TextNode('test')])

    def test_parser_simple1(self):
        self.assertEqual(
            grammar.Parser(r'a\backslash').get_node_list(),
            [grammar.TextNode('abackslash')],
        )

    def test_parser_wildcard_simple(self):
        parser = grammar.Parser('*')
        self.assertEqual(parser.get_node_list(), [grammar.WildcardNode()])

    def test_parser_wildcard1(self):
        self.assertEqual(
            grammar.Parser('text*').get_node_list(),
            [grammar.TextNode('text'), grammar.WildcardNode()],
        )

    def test_parser_wildcard2(self):
        self.assertEqual(
            grammar.Parser('*text').get_node_list(),
            [grammar.WildcardNode(), grammar.TextNode('text')],
        )

    def test_parser_wildcard3(self):
        self.assertEqual(
            grammar.Parser('*text*').get_node_list(),
            [grammar.WildcardNode(), grammar.TextNode('text'), grammar.WildcardNode()],
        )

    def test_optional1(self):
        self.assertEqual(
            grammar.Parser('required(optional)').get_node_list(),
            [grammar.TextNode('required'), grammar.OptionalNode([grammar.TextNode('optional')])],
        )

    def test_optional2(self):
        self.assertEqual(
            grammar.Parser('(optional)required').get_node_list(),
            [grammar.OptionalNode([grammar.TextNode('optional')]), grammar.TextNode('required')],
        )

    def test_optional_empty(self):
        self.assertEqual(
            grammar.Parser('()').get_node_list(),
            [grammar.OptionalNode([])],
        )

    def test_optional_multiple(self):
        self.assertEqual(
            grammar.Parser('()()').get_node_list(),
            [grammar.OptionalNode([]), grammar.OptionalNode([])],
        )

    def test_optional_nested(self):
        self.assertEqual(
            grammar.Parser('((text))').get_node_list(),
            [grammar.OptionalNode([grammar.OptionalNode([grammar.TextNode('text')])])],
        )

    def test_tag(self):
        self.assertEqual(
            grammar.Parser('<test>').get_node_list(),
            [grammar.TagNode('test')]
        )

    def test_regex_tag(self):
        self.assertEqual(
            grammar.Parser('<test=.*>').get_node_list(),
            [grammar.RegexTagNode('test', '.*')]
        )

    def test_macro_tag(self):
        self.assertEqual(
            grammar.Parser('<test:m>').get_node_list(),
            [grammar.MacroTagNode('test', 'm')]
        )

    def test_unnamed_regex(self):
        self.assertEqual(
            grammar.Parser('<=.*>').get_node_list(),
            [grammar.RegexTagNode('', '.*')]
        )

    def test_unnamed_macro(self):
        self.assertEqual(
            grammar.Parser('<:m>').get_node_list(),
            [grammar.MacroTagNode('', 'm')]
        )

    def test_complex(self):
        self.assertEqual(
            grammar.Parser('/articles/<id=\d{5}>/<year:Y>/(<slug>/)').get_node_list(),
            [
                grammar.TextNode('/articles/'),
                grammar.RegexTagNode('id', r'\d{5}'),
                grammar.TextNode('/'),
                grammar.MacroTagNode('year', 'Y'),
                grammar.TextNode('/'),
                grammar.OptionalNode([
                    grammar.TagNode('slug'),
                    grammar.TextNode('/'),
                ]),
            ]
        )

class TestRegexScribe(unittest.TestCase):
    def test_basic(self):
        node_list = [grammar.TextNode('test')]
        self.assertEqual(grammar.RegexScribe(node_list).translate(), 'test')

    def test_optional(self):
        node_list = [
            grammar.TextNode('required'),
            grammar.OptionalNode([
               grammar.TextNode('optional'),
            ]),
        ]
        self.assertEqual(
            grammar.RegexScribe(node_list).translate(),
            'required(optional)?'
        )

    def test_tag(self):
        node_list = [
            grammar.TagNode('simple'),
        ]
        self.assertEqual(
            grammar.RegexScribe(node_list).translate(),
            '(?P<simple>.+)',
        )

    def test_regex_tag(self):
        node_list = [
            grammar.RegexTagNode('simple', '[0-9]{2}'),
        ]
        self.assertEqual(
            grammar.RegexScribe(node_list).translate(),
            '(?P<simple>[0-9]{2})',
        )

    def test_uncaptured_regex_tag(self):
        node_list = [
            grammar.RegexTagNode('', '[0-9]{2}'),
        ]
        self.assertEqual(
            grammar.RegexScribe(node_list).translate(),
            '[0-9]{2}',
        )

    def test_macro_tag(self):
        node_list = [
            grammar.MacroTagNode('year', 'Y'),
        ]
        self.assertEqual(
            grammar.RegexScribe(node_list).translate(),
            r'(?P<year>\d{4})',
        )

    def test_uncaptured_macro_tag(self):
        node_list = [
            grammar.MacroTagNode('', 'Y'),
        ]
        self.assertEqual(
            grammar.RegexScribe(node_list).translate(),
            r'\d{4}',
        )

class TestSurlex(unittest.TestCase):
    def setUp(self):
        # matches are pairs of surl expressions and the regex equivalent
        self.matches = (
            ('/<product>/<option>.html', '/(?P<product>.+)/(?P<option>.+)\.html'),
            ('/<product>/<option>.*', '/(?P<product>.+)/(?P<option>.+)\..*'),
            ('/things/edit/<slug>', '/things/edit/(?P<slug>.+)'),
            ('/real/regex/<=.*$>', '/real/regex/.*$'),
            ('/(checkout/)login', '/(checkout/)?login'),
        )

    def test_matches(self):
        for surlex, regex in self.matches:
            self.assertEqual(surl(surlex), regex)

    def test_basic_capture1(self):
        surlex = '/<var>/'
        regex = '/(?P<var>.+)/'
        self.assertEqual(surl(surlex), regex)

    def test_basic_capture2(self):
        surlex = '/<product>/<option>.html'
        regex = '/(?P<product>.+)/(?P<option>.+)\.html'
        self.assertEqual(surl(surlex), regex)

    def test_macro(self):
        surlex = '/year/<:Y>.html'
        regex = '/year/\d{4}\.html'
        self.assertEqual(surl(surlex), regex)

    def test_macro_capture(self):
        surlex = '/blog/<year:Y>.html'
        regex = '/blog/(?P<year>\d{4})\.html'
        self.assertEqual(surl(surlex), regex)

    def test_custom_macro(self):
        register_macro('B', 'bar')
        surlex = '/foo/<:B>/'
        regex = '/foo/bar/'
        self.assertEqual(surl(surlex), regex)

    def test_custom_macro2(self):
        registry = MacroRegistry({'int': r'[0-9]'})
        surlex = Surlex('/<foo:int>/', registry)
        self.assertEqual(surlex.translate(), '/(?P<foo>[0-9])/')

    def test_regex_capture(self):
        surlex = '/<var=[0-9]*>/'
        regex = '/(?P<var>[0-9]*)/'
        self.assertEqual(surl(surlex), regex)

    def test_optional(self):
        surlex = '/things/(<slug>/)'
        regex = '/things/((?P<slug>.+)/)?'
        self.assertEqual(surl(surlex), regex)

    def test_wildcard(self):
        surlex = '/foo/*.html'
        regex = '/foo/.*\.html'
        self.assertEqual(surl(surlex), regex)

    def test_regex(self):
        surlex = '/anything/<=.*$>'
        regex = '/anything/.*$'
        self.assertEqual(surl(surlex), regex)

    def test_regex2(self):
        surlex = r'/<=\d{5}$>'
        regex = r'/\d{5}$'
        self.assertEqual(surl(surlex), regex)

    def test_regex3(self):
        surlex = '<=\>>'
        regex = '>'
        self.assertEqual(surl(surlex), regex)

    def test_parse_fail(self):
        surlex = '<asdf'
        self.assertRaises(MalformedSurlex, surl, surlex)

    def test_macro_lookup_fail(self):
        self.assertRaises(MacroDoesNotExist, surl, '<year:UNKNOWN>')

    def test_groupmacros(self):
        known_macro = parsed_surlex_object('<year:Y>')
        unnamed_macro = parsed_surlex_object('<:Y>')
        self.assertEqual(known_macro.groupmacros['year'], 'Y')
        self.assertEqual(unnamed_macro.groupmacros[''], 'Y')

    def test_match(self):
        surlex = '/articles/<year>/<slug>/'
        subject = '/articles/2008/this-article/'
        m = match(surlex, subject)
        self.assertEqual(m['year'], '2008')
        self.assertEqual(m['slug'], 'this-article')

if __name__ == '__main__':
    unittest.main()

########NEW FILE########
