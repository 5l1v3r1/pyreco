__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# django-generic-aggregation documentation build configuration file, created by
# sphinx-quickstart on Wed May  2 16:49:11 2012.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = []

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'django-generic-aggregation'
copyright = u'2012, charles leifer'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '0.3.2'
# The full version, including alpha/beta/rc tags.
release = '0.3.2'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'nature'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'django-generic-aggregationdoc'


# -- Options for LaTeX output --------------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'django-generic-aggregation.tex', u'django-generic-aggregation Documentation',
   u'charles leifer', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'django-generic-aggregation', u'django-generic-aggregation Documentation',
     [u'charles leifer'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output ------------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'django-generic-aggregation', u'django-generic-aggregation Documentation',
   u'charles leifer', 'django-generic-aggregation', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

########NEW FILE########
__FILENAME__ = models
import datetime

from django.contrib.contenttypes.generic import GenericForeignKey, GenericRelation
from django.contrib.contenttypes.models import ContentType
from django.db import models


class Rating(models.Model):
    rating = models.IntegerField()
    created = models.DateTimeField(default=datetime.datetime.now)
    object_id = models.IntegerField()
    content_type = models.ForeignKey(ContentType)
    content_object = GenericForeignKey(ct_field='content_type', fk_field='object_id')
    
    def __unicode__(self):
        return '%s rated %s' % (self.content_object, self.rating)


class CharFieldGFK(models.Model):
    name = models.CharField(max_length=255)
    object_id = models.TextField()
    content_type = models.ForeignKey(ContentType)
    content_object = GenericForeignKey(ct_field='content_type', fk_field='object_id')


class Food(models.Model):
    name = models.CharField(max_length=100)
    
    ratings = GenericRelation(Rating)
    char_gfk = GenericRelation(CharFieldGFK)

    def __unicode__(self):
        return self.name

########NEW FILE########
__FILENAME__ = tests
import datetime

from django.contrib.contenttypes.models import ContentType
from django.db import models
from django.test import TestCase

from generic_aggregation import generic_annotate as _generic_annotate, generic_aggregate as _generic_aggregate, generic_filter as _generic_filter
from generic_aggregation.utils import fallback_generic_annotate, fallback_generic_aggregate, fallback_generic_filter
from generic_aggregation.generic_aggregation_tests.models import (
    Food, Rating, CharFieldGFK
)

class SimpleTest(TestCase):
    def setUp(self):
        self.apple = Food.objects.create(name='apple')
        self.orange = Food.objects.create(name='orange')
        self.peach = Food.objects.create(name='peach')

        dt = datetime.datetime(2010, 1, 1)

        Rating.objects.create(content_object=self.apple, rating=5)
        Rating.objects.create(content_object=self.apple, rating=3)
        Rating.objects.create(content_object=self.apple, rating=1, created=dt)
        Rating.objects.create(content_object=self.apple, rating=3, created=dt)

        Rating.objects.create(content_object=self.orange, rating=4)
        Rating.objects.create(content_object=self.orange, rating=3)
        Rating.objects.create(content_object=self.orange, rating=8, created=dt)

    def generic_annotate(self, *args, **kwargs):
        return _generic_annotate(*args, **kwargs)

    def generic_aggregate(self, *args, **kwargs):
        return _generic_aggregate(*args, **kwargs)

    def generic_filter(self, *args, **kwargs):
        return _generic_filter(*args, **kwargs)

    def test_annotation(self):
        annotated_qs = self.generic_annotate(
            Food.objects.all(),
            Rating.objects.all(),
            models.Count('ratings__rating')).order_by('-score')
        self.assertEqual(annotated_qs.count(), 2)

        food_a, food_b = annotated_qs

        self.assertEqual(food_a.score, 4)
        self.assertEqual(food_a.name, 'apple')

        self.assertEqual(food_b.score, 3)
        self.assertEqual(food_b.name, 'orange')

        annotated_qs = self.generic_annotate(Food.objects.all(), Rating, models.Sum('ratings__rating'))
        self.assertEqual(annotated_qs.count(), 2)

        food_b, food_a = annotated_qs.order_by('-score')

        self.assertEqual(food_b.score, 15)
        self.assertEqual(food_b.name, 'orange')

        self.assertEqual(food_a.score, 12)
        self.assertEqual(food_a.name, 'apple')

        annotated_qs = self.generic_annotate(Food, Rating, models.Avg('ratings__rating'))
        self.assertEqual(annotated_qs.count(), 2)

        food_b, food_a = annotated_qs.order_by('-score')

        self.assertEqual(food_b.score, 5)
        self.assertEqual(food_b.name, 'orange')

        self.assertEqual(food_a.score, 3)
        self.assertEqual(food_a.name, 'apple')

    def test_aggregation(self):
        # number of ratings on any food
        aggregated = self.generic_aggregate(Food, Rating, models.Count('ratings__rating'))
        self.assertEqual(aggregated, 7)

        # total of ratings out there for all foods
        aggregated = self.generic_aggregate(Food.objects.all(), Rating, models.Sum('ratings__rating'))
        self.assertEqual(aggregated, 27)

        # (showing the use of filters and inner query)

        aggregated = self.generic_aggregate(Food.objects.filter(name='apple'), Rating, models.Count('ratings__rating'))
        self.assertEqual(aggregated, 4)

        aggregated = self.generic_aggregate(Food.objects.filter(name='orange'), Rating, models.Count('ratings__rating'))
        self.assertEqual(aggregated, 3)

        # avg for apple
        aggregated = self.generic_aggregate(Food.objects.filter(name='apple'), Rating, models.Avg('ratings__rating'))
        self.assertEqual(aggregated, 3)

        # avg for orange
        aggregated = self.generic_aggregate(Food.objects.filter(name='orange'), Rating, models.Avg('ratings__rating'))
        self.assertEqual(aggregated, 5)

    def test_subset_annotation(self):
        todays_ratings = Rating.objects.filter(created__gte=datetime.date.today())
        annotated_qs = self.generic_annotate(Food.objects.all(), todays_ratings, models.Sum('ratings__rating'))
        self.assertEqual(annotated_qs.count(), 2)

        food_a, food_b = annotated_qs.order_by('-score')

        self.assertEqual(food_a.score, 8)
        self.assertEqual(food_a.name, 'apple')

        self.assertEqual(food_b.score, 7)
        self.assertEqual(food_b.name, 'orange')

    def test_subset_aggregation(self):
        todays_ratings = Rating.objects.filter(created__gte=datetime.date.today())
        aggregated = self.generic_aggregate(Food.objects.all(), todays_ratings, models.Sum('ratings__rating'))
        self.assertEqual(aggregated, 15)

        aggregated = self.generic_aggregate(Food.objects.all(), todays_ratings, models.Count('ratings__rating'))
        self.assertEqual(aggregated, 4)

    def test_charfield_pks(self):
        a1 = CharFieldGFK.objects.create(name='a1', content_object=self.apple)
        a2 = CharFieldGFK.objects.create(name='a2', content_object=self.apple)
        o1 = CharFieldGFK.objects.create(name='o1', content_object=self.orange)

        annotated_qs = self.generic_annotate(Food.objects.all(), CharFieldGFK, models.Count('char_gfk__name'))
        self.assertEqual(annotated_qs.count(), 3)

        food_a, food_b, food_c = annotated_qs.order_by('-score')

        self.assertEqual(food_b.score, 1)
        self.assertEqual(food_b.name, 'orange')

        self.assertEqual(food_a.score, 2)
        self.assertEqual(food_a.name, 'apple')

        self.assertEqual(food_c.score, 0)
        self.assertEqual(food_c.name, 'peach')

        aggregated = self.generic_aggregate(Food.objects.all(), CharFieldGFK, models.Count('char_gfk__name'))
        self.assertEqual(aggregated, 3)

    def test_custom_alias(self):
        annotated_qs = self.generic_annotate(Food, Rating, models.Count('ratings__rating'), alias='count')
        food_a, food_b = annotated_qs.order_by('-count')

        self.assertEqual(food_a.count, 4)
        self.assertEqual(food_a.name, 'apple')

    def test_filter(self):
        ratings = self.generic_filter(Rating.objects.all(), Food.objects.filter(name='orange'))
        self.assertEqual(len(ratings), 3)

        for obj in ratings:
            self.assertEqual(obj.content_object.name, 'orange')

    def test_filter_cast(self):
        a1 = CharFieldGFK.objects.create(name='a1', content_object=self.apple)
        a2 = CharFieldGFK.objects.create(name='a2', content_object=self.apple)
        o1 = CharFieldGFK.objects.create(name='o1', content_object=self.orange)

        qs = self.generic_filter(CharFieldGFK.objects.all(), Food.objects.filter(name='apple'))
        self.assertEqual(len(qs), 2)

        for obj in qs:
            self.assertEqual(obj.content_object.name, 'apple')

class FallbackTestCase(SimpleTest):
    def generic_aggregate(self, *args, **kwargs):
        return fallback_generic_annotate(*args, **kwargs)

    def generic_aggregate(self, *args, **kwargs):
        return fallback_generic_aggregate(*args, **kwargs)

    def generic_filter(self, *args, **kwargs):
        return fallback_generic_filter(*args, **kwargs)

########NEW FILE########
__FILENAME__ = utils
"""
Django does not properly set up casts
"""

import django
from django.contrib.contenttypes.generic import GenericForeignKey
from django.contrib.contenttypes.models import ContentType
from django.db import connection, models
from django.db.models.query import QuerySet


def get_gfk_field(model):
    for field in model._meta.virtual_fields:
        if isinstance(field, GenericForeignKey):
            return field

    raise ValueError('Unable to find gfk field on %s' % model)

def normalize_qs_model(qs_or_model):
    if isinstance(qs_or_model, QuerySet):
        return qs_or_model
    return qs_or_model._default_manager.all()

def get_field_type(f):
    if django.VERSION < (1, 4):
        raw_type = f.db_type()
    else:
        raw_type = f.db_type(connection)
    if raw_type.lower().split()[0] in ('serial', 'integer', 'unsigned', 'bigint', 'smallint'):
        raw_type = 'integer'
    return raw_type

def prepare_query(qs_model, generic_qs_model, aggregator, gfk_field):
    qs = normalize_qs_model(qs_model)
    generic_qs = normalize_qs_model(generic_qs_model)
    
    model = qs.model
    generic_model = generic_qs.model
    
    if gfk_field is None:
        gfk_field = get_gfk_field(generic_model)
    
    content_type = ContentType.objects.get_for_model(model)
    rel_name = aggregator.lookup.split('__', 1)[0]
    
    try:
        generic_rel_descriptor = getattr(model, rel_name)
    except AttributeError:
        # missing the generic relation, so do fallback query
        return False
    
    rel_model = generic_rel_descriptor.field.rel.to
    if rel_model != generic_model:
        raise AttributeError('Model %s does not match the GenericRelation "%s" (%s)' % (
            generic_model, rel_name, rel_model,
        ))
    
    pk_field_type = get_field_type(model._meta.pk)
    gfk_field_type = get_field_type(generic_model._meta.get_field(gfk_field.fk_field))
    if pk_field_type != gfk_field_type:
        return False
    
    qs = qs.filter(**{
        '%s__%s' % (rel_name, gfk_field.ct_field): content_type,
        '%s__pk__in' % (rel_name): generic_qs.values('pk'),
    })
    return qs

def generic_annotate(qs_model, generic_qs_model, aggregator, gfk_field=None, alias='score'):
    """
    Find blog entries with the most comments:
    
        qs = generic_annotate(Entry.objects.public(), Comment.objects.public(), Count('comments__id'))
        for entry in qs:
            print entry.title, entry.score
    
    Find the highest rated foods:
    
        generic_annotate(Food, Rating, Avg('ratings__rating'), alias='avg')
        for food in qs:
            print food.name, '- average rating:', food.avg
    
    .. note::
        In both of the above examples it is assumed that a GenericRelation exists
        on Entry to Comment (named "comments") and also on Food to Rating (named "ratings").
        If a GenericRelation does *not* exist, the query will still return correct
        results but the code path will be different as it will use the fallback method.
    
    .. warning::
        If the underlying column type differs between the qs_model's primary
        key and the generic_qs_model's foreign key column, it will use the fallback
        method, which can correctly CASTself.
    
    :param qs_model: A model or a queryset of objects you want to perform
        annotation on, e.g. blog entries
    :param generic_qs_model: A model or queryset containing a GFK, e.g. comments
    :param aggregator: an aggregation, from django.db.models, e.g. Count('id') or Avg('rating')
    :param gfk_field: explicitly specify the field w/the gfk
    :param alias: attribute name to use for annotation
    """
    prepared_query = prepare_query(qs_model, generic_qs_model, aggregator, gfk_field)
    if prepared_query is not False:
        return prepared_query.annotate(**{alias: aggregator})
    else:
        # need to fall back since CAST will be missing
        return fallback_generic_annotate(qs_model, generic_qs_model, aggregator, gfk_field, alias)


def generic_aggregate(qs_model, generic_qs_model, aggregator, gfk_field=None):
    """
    Find total number of comments on blog entries:
    
        generic_aggregate(Entry.objects.public(), Comment.objects.public(), Count('comments__id'))
    
    Find the average rating for foods starting with 'a':
    
        a_foods = Food.objects.filter(name__startswith='a')
        generic_aggregate(a_foods, Rating, Avg('ratings__rating'))
    
    .. note::
        In both of the above examples it is assumed that a GenericRelation exists
        on Entry to Comment (named "comments") and also on Food to Rating (named "ratings").
        If a GenericRelation does *not* exist, the query will still return correct
        results but the code path will be different as it will use the fallback method.
    
    .. warning::
        If the underlying column type differs between the qs_model's primary
        key and the generic_qs_model's foreign key column, it will use the fallback
        method, which can correctly CASTself.

    :param qs_model: A model or a queryset of objects you want to perform
        annotation on, e.g. blog entries
    :param generic_qs_model: A model or queryset containing a GFK, e.g. comments
    :param aggregator: an aggregation, from django.db.models, e.g. Count('id') or Avg('rating')
    :param gfk_field: explicitly specify the field w/the gfk
    """
    prepared_query = prepare_query(qs_model, generic_qs_model, aggregator, gfk_field)
    if prepared_query is not False:
        return prepared_query.aggregate(aggregate=aggregator)['aggregate']
    else:
        # need to fall back since CAST will be missing
        return fallback_generic_aggregate(qs_model, generic_qs_model, aggregator, gfk_field)


def generic_filter(generic_qs_model, filter_qs_model, gfk_field=None):
    """
    Only show me ratings made on foods that start with "a":
    
        a_foods = Food.objects.filter(name__startswith='a')
        generic_filter(Rating.objects.all(), a_foods)
    
    Only show me comments from entries that are marked as public:
    
        generic_filter(Comment.objects.public(), Entry.objects.public())
    
    :param generic_qs_model: A model or queryset containing a GFK, e.g. comments
    :param qs_model: A model or a queryset of objects you want to restrict the generic_qs to
    :param gfk_field: explicitly specify the field w/the gfk
    """
    generic_qs = normalize_qs_model(generic_qs_model)
    filter_qs = normalize_qs_model(filter_qs_model)
    
    if not gfk_field:
        gfk_field = get_gfk_field(generic_qs.model)
    
    pk_field_type = get_field_type(filter_qs.model._meta.pk)
    gfk_field_type = get_field_type(generic_qs.model._meta.get_field(gfk_field.fk_field))
    if pk_field_type != gfk_field_type:
        return fallback_generic_filter(generic_qs, filter_qs, gfk_field)
    
    return generic_qs.filter(**{
        gfk_field.ct_field: ContentType.objects.get_for_model(filter_qs.model),
        '%s__in' % gfk_field.fk_field: filter_qs.values('pk'),
    })


###############################################################################
# fallback methods

def query_as_sql(query):
    if django.VERSION < (1, 2):
        return query.as_sql()
    else:
        return query.get_compiler(connection=connection).as_sql()

def query_as_nested_sql(query):
    if django.VERSION < (1, 2):
        return query.as_nested_sql()
    else:
        return query.get_compiler(connection=connection).as_nested_sql()

def gfk_expression(qs_model, gfk_field):
    # handle casting the GFK field if need be
    qn = connection.ops.quote_name
    
    pk_field_type = get_field_type(qs_model._meta.pk)
    gfk_field_type = get_field_type(gfk_field.model._meta.get_field(gfk_field.fk_field))
    if 'mysql' in connection.settings_dict['ENGINE'] and pk_field_type == 'integer':
        pk_field_type = 'unsigned'
    
    if pk_field_type != gfk_field_type:
        # cast the gfk to the pk type
        gfk_expr = "CAST(%s AS %s)" % (qn(gfk_field.fk_field), pk_field_type)
    else:
        gfk_expr = qn(gfk_field.fk_field) # the object_id field on the GFK
    
    return gfk_expr

def fallback_generic_annotate(qs_model, generic_qs_model, aggregator, gfk_field=None, alias='score'):
    qs = normalize_qs_model(qs_model)
    generic_qs = normalize_qs_model(generic_qs_model)
    
    content_type = ContentType.objects.get_for_model(qs.model)
    
    qn = connection.ops.quote_name
    aggregate_field = aggregator.lookup
    
    # since the aggregate may contain a generic relation, strip it
    if '__' in aggregate_field:
        _, aggregate_field = aggregate_field.rsplit('__', 1)
    
    if gfk_field is None:
        gfk_field = get_gfk_field(generic_qs.model)
    
    # collect the params we'll be using
    params = (
        aggregator.name, # the function that's doing the aggregation
        qn(aggregate_field), # the field containing the value to aggregate
        qn(gfk_field.model._meta.db_table), # table holding gfk'd item info
        qn(gfk_field.ct_field + '_id'), # the content_type field on the GFK
        content_type.pk, # the content_type id we need to match
        gfk_expression(qs.model, gfk_field),
        qn(qs.model._meta.db_table), # the table and pk from the main
        qn(qs.model._meta.pk.name)   # part of the query
    )
    
    sql_template = """
        SELECT COALESCE(%s(%s), 0) AS aggregate_score
        FROM %s
        WHERE
            %s=%s AND
            %s=%s.%s"""
    
    extra = sql_template % params
    
    if generic_qs.query.where.children:
        generic_query = generic_qs.values_list('pk').query
        inner_query, inner_query_params = query_as_sql(generic_query)
        
        inner_params = (
            qn(generic_qs.model._meta.db_table),
            qn(generic_qs.model._meta.pk.name),
        )
        inner_start = ' AND %s.%s IN (' % inner_params
        inner_end = ')'
        extra = extra + inner_start + inner_query + inner_end
    else:
        inner_query_params = []

    return qs.extra(
        select={alias: extra},
        select_params=inner_query_params,
    )

def fallback_generic_aggregate(qs_model, generic_qs_model, aggregator, gfk_field=None):
    qs = normalize_qs_model(qs_model)
    generic_qs = normalize_qs_model(generic_qs_model)
    
    content_type = ContentType.objects.get_for_model(qs.model)
    
    qn = connection.ops.quote_name
    aggregate_field = aggregator.lookup
    
    # since the aggregate may contain a generic relation, strip it
    if '__' in aggregate_field:
        _, aggregate_field = aggregate_field.rsplit('__', 1)
    
    if gfk_field is None:
        gfk_field = get_gfk_field(generic_qs.model)
    
    qs = qs.values_list('pk') # just the pks
    query, query_params = query_as_nested_sql(qs.query)
    
    # collect the params we'll be using
    params = (
        aggregator.name, # the function that's doing the aggregation
        qn(aggregate_field), # the field containing the value to aggregate
        qn(gfk_field.model._meta.db_table), # table holding gfk'd item info
        qn(gfk_field.ct_field + '_id'), # the content_type field on the GFK
        content_type.pk, # the content_type id we need to match
        gfk_expression(qs.model, gfk_field), # the object_id field on the GFK
    )
    
    query_start = """
        SELECT %s(%s) AS aggregate_score
        FROM %s
        WHERE
            %s=%s AND
            %s IN (
                """ % params
    
    query_end = ")"
    
    if generic_qs.query.where.children:
        generic_query = generic_qs.values_list('pk').query
        inner_query, inner_query_params = query_as_sql(generic_query)
        
        query_params += inner_query_params
        
        inner_params = (
            qn(generic_qs.model._meta.pk.name),
        )
        inner_start = ' AND %s IN (' % inner_params
        inner_end = ')'
        query_end = query_end + inner_start + inner_query + inner_end
    
    # pass in the inner_query unmodified as we will use the cursor to handle
    # quoting the inner parameters correctly
    query = query_start + query + query_end
    
    cursor = connection.cursor()
    cursor.execute(query, query_params)
    row = cursor.fetchone()

    return row[0]

def fallback_generic_filter(generic_qs_model, filter_qs_model, gfk_field=None):
    generic_qs = normalize_qs_model(generic_qs_model)
    filter_qs = normalize_qs_model(filter_qs_model)
    
    if gfk_field is None:
        gfk_field = get_gfk_field(generic_qs.model)
    
    # get the contenttype of our filtered queryset, e.g. Business
    filter_model = filter_qs.model
    content_type = ContentType.objects.get_for_model(filter_model)
    
    # filter the generic queryset to only include items of the given ctype
    generic_qs = generic_qs.filter(**{gfk_field.ct_field: content_type})
    
    # just select the primary keys in the sub-select
    filtered_query = filter_qs.values_list('pk').query
    inner_query, inner_query_params = query_as_sql(filtered_query)
    
    where = '%s IN (%s)' % (
        gfk_expression(filter_model, gfk_field),
        inner_query,
    )
    
    return generic_qs.extra(
        where=(where,),
        params=inner_query_params
    )

########NEW FILE########
__FILENAME__ = runtests
#!/usr/bin/env python
import sys
from os.path import dirname, abspath

from django.conf import settings

if len(sys.argv) > 1: 
    if 'postgres' in sys.argv:
        sys.argv.remove('postgres')
        db_engine = 'django.db.backends.postgresql_psycopg2'
    elif 'mysql' in sys.argv:
        sys.argv.remove('mysql')
        db_engine = 'django.db.backends.mysql'
    db_name = 'test_main'
else:
    db_engine = 'django.db.backends.sqlite3'
    db_name = ''

if not settings.configured:
    settings.configure(
        DATABASES = {
            'default': {
                'ENGINE': db_engine,
                'NAME': db_name,
            }
        },
        INSTALLED_APPS = [
            'django.contrib.contenttypes',
            'generic_aggregation.generic_aggregation_tests',
        ],
    )

from django.test.utils import get_runner


def runtests(*test_args):
    if not test_args:
        test_args = ['generic_aggregation_tests']
    parent = dirname(abspath(__file__))
    sys.path.insert(0, parent)
    TestRunner = get_runner(settings)
    test_runner = TestRunner(verbosity=1, interactive=True)
    failures = test_runner.run_tests(test_args)
    sys.exit(failures)


if __name__ == '__main__':
    runtests(*sys.argv[1:])

########NEW FILE########
