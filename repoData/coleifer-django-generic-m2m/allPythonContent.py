__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# django-generic-m2m documentation build configuration file, created by
# sphinx-quickstart on Mon Jul 11 16:59:12 2011.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = []

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'django-generic-m2m'
copyright = u'2011, charles leifer'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '0.2.1'
# The full version, including alpha/beta/rc tags.
release = '0.2.1'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'nature'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'django-generic-m2mdoc'


# -- Options for LaTeX output --------------------------------------------------

# The paper size ('letter' or 'a4').
#latex_paper_size = 'letter'

# The font size ('10pt', '11pt' or '12pt').
#latex_font_size = '10pt'

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'django-generic-m2m.tex', u'django-generic-m2m Documentation',
   u'charles leifer', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Additional stuff for the LaTeX preamble.
#latex_preamble = ''

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'django-generic-m2m', u'django-generic-m2m Documentation',
     [u'charles leifer'], 1)
]

########NEW FILE########
__FILENAME__ = manage
#!/usr/bin/env python
from django.core.management import execute_manager
try:
    import settings # Assumed to be in the same directory.
except ImportError:
    import sys
    sys.stderr.write("Error: Can't find the file 'settings.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n(If the file settings.py does indeed exist, it's causing an ImportError somehow.)\n" % __file__)
    sys.exit(1)

if __name__ == "__main__":
    execute_manager(settings)

########NEW FILE########
__FILENAME__ = settings
import os

DEBUG = True
TEMPLATE_DEBUG = DEBUG

SITE_ROOT = os.path.dirname(os.path.realpath(__file__))

ADMIN_MEDIA_PREFIX = '/static/admin/'

MEDIA_ROOT = '%s/media/' % (SITE_ROOT)
MEDIA_URL = '/media/'

STATIC_URL = '/static/'
STATICFILES_DIRS = (
    '%s/static/' % (SITE_ROOT),
)

CACHE_BACKEND = 'dummy:///'
CACHE_KEY_PREFIX = 'semtags'
CACHE_MIDDLEWARE_KEY_PREFIX = CACHE_KEY_PREFIX
CACHE_MIDDLEWARE_SECONDS = 60

LOGIN_REDIRECT_URL = '/'

SITE_NAME = 'semtags.com'

DATABASES = {
    'default': {
        'ENGINE'     : 'django.db.backends.sqlite3',
        'HOST'       : '',
        'PORT'       : '',
        'NAME'       : '%s/semtags.db' % SITE_ROOT,
        'USER'       : '',
        'PASSWORD'   : ''
    }
}

TIME_ZONE = 'America/Chicago'
LANGUAGE_CODE = 'en-us'
USE_I18N = True
SITE_ID = 1
SECRET_KEY = 'gv^gjq&amp;kwrs3uqmd*s-is7%8z7@bc9^#4$txthzx$ta3nrn6(&amp;'
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)

TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.load_template_source',
    'django.template.loaders.app_directories.load_template_source',
)

TEMPLATE_CONTEXT_PROCESSORS = (
    'django.core.context_processors.auth',
    'django.core.context_processors.debug',
    'django.core.context_processors.media',
    'django.core.context_processors.static',
    'django.contrib.messages.context_processors.messages',
    'django.core.context_processors.request'
)

MIDDLEWARE_CLASSES = (
    'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.cache.FetchFromCacheMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
)

ROOT_URLCONF = 'example.urls'

TEMPLATE_DIRS = (
    '%s/templates/' % (SITE_ROOT),
)

AUTOCOMPLETE_BACKEND = 'completion.backends.db_backend.DatabaseAutocomplete'
AUTOCOMPLETE_MIN_WORDS = 1

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.admin',
    'django.contrib.contenttypes',
    'django.contrib.markup',
    'django.contrib.messages',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.staticfiles',
    'basic.blog',
    'basic.inlines',
    'basic.media',
    'basic.people',
    'basic.places',
    'tagging', # needed by basic
    'completion',
    'genericm2m',
    
    # lastly, just a single app for this site
    'example.site_app',
)

########NEW FILE########
__FILENAME__ = forms
from django import forms
from django.contrib.contenttypes.models import ContentType
from django.template.defaultfilters import slugify

from basic.blog.models import Post
from basic.media.models import Photo


class BaseRelationshipsForm(forms.ModelForm):
    relationships = forms.CharField(required=False)
    hidden_relationships = forms.CharField(required=False, widget=forms.HiddenInput())
    
    def clean_hidden_relationships(self):
        hidden = self.cleaned_data.get('hidden_relationships') or ''
        
        cts_and_ids = [ct_id for ct_id in hidden.split(',') if ct_id.strip()]
        objects = []
        
        for ct_id in cts_and_ids:
            content_type_id, object_id = ct_id.split(':')
            
            ctype = ContentType.objects.get_for_id(int(content_type_id))
            obj = ctype.model_class()._default_manager.get(pk=object_id)
            
            objects.append(obj)
        
        return objects


class SlugifyMixin(object):
    def clean_title(self):
        title = self.cleaned_data.get('title')
        self.instance.slug = slugify(title)
        return title


class PostForm(BaseRelationshipsForm, SlugifyMixin):
    class Meta:
        model = Post
        fields = ('title', 'body',)


class PhotoForm(BaseRelationshipsForm, SlugifyMixin):
    class Meta:
        model = Photo
        fields = ('title', 'photo',)

########NEW FILE########
__FILENAME__ = models
from providers import *

from basic.blog.models import Post
from basic.media.models import Photo
from completion.listeners import start_listening
from genericm2m.utils import monkey_patch


# monkey patch the Post model with a related objects descriptor
monkey_patch(Post)
monkey_patch(Photo)

# configure our signal handlers so we can update the autocomplete index on
# model save & delete
start_listening()

########NEW FILE########
__FILENAME__ = providers
from completion import site, DjangoModelProvider

from basic.blog.models import Post
from basic.media.models import Photo
from basic.people.models import Person
from basic.places.models import City, Place


class PostProvider(DjangoModelProvider):
    def get_title(self, obj):
        return obj.title
    
    def get_pub_date(self, obj):
        return obj.publish
    
    def get_data(self, obj):
        return {
            'title': obj.title,
            'url': obj.get_absolute_url(),
        }


class PhotoProvider(DjangoModelProvider):
    def get_title(self, obj):
        return obj.title
    
    def get_pub_date(self, obj):
        return obj.uploaded
    
    def get_data(self, obj):
        return {
            'title': obj.title,
            'url': obj.get_absolute_url(),
        }


class PersonProvider(DjangoModelProvider):
    def get_title(self, obj):
        return obj.full_name
    
    def get_pub_date(self, obj):
        return obj.birth_date
    
    def get_data(self, obj):
        return {
            'title': obj.full_name,
            'url': obj.get_absolute_url(),
        }


class PlaceProvider(DjangoModelProvider):
    def get_title(self, obj):
        return obj.title
    
    def get_pub_date(self, obj):
        return obj.modified
    
    def get_data(self, obj):
        return {
            'title': obj.title,
            'url': obj.get_absolute_url(),
        }


class CityProvider(DjangoModelProvider):
    def get_title(self, obj):
        return unicode(obj)
    
    def get_pub_date(self, obj):
        return None
    
    def get_data(self, obj):
        return {
            'title': unicode(obj),
            'url': obj.get_absolute_url(),
        }


site.register(Post, PostProvider)
site.register(Photo, PhotoProvider)
site.register(Person, PersonProvider)
site.register(Place, PlaceProvider)
site.register(City, CityProvider)

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *


urlpatterns = patterns('example.site_app.views',
    url(r'^photo/$', 'create_photo', name='create_photo'),
    url(r'^post/$', 'create_post', name='create_post'),
)

########NEW FILE########
__FILENAME__ = views
from django.shortcuts import redirect, render_to_response
from django.template import RequestContext

from forms import PhotoForm, PostForm


def generic_completion_view(request, form_class, template):
    form = form_class(request.POST or None, request.FILES or None)
    
    if request.method == 'POST' and form.is_valid():
        # save the new object instance
        new_obj = form.save()
        
        # grab the related objects from the form and add them
        # to the new post instance
        for obj in form.cleaned_data['hidden_relationships']:
            new_obj.related.connect(obj)
        
        return redirect(new_obj)
    
    return render_to_response(template, {'form': form},
        context_instance=RequestContext(request))

def create_photo(request):
    return generic_completion_view(request, PhotoForm, 'media/create_photo.html')

def create_post(request):
    return generic_completion_view(request, PostForm, 'blog/create_post.html')

########NEW FILE########
__FILENAME__ = urls
from django.conf import settings
from django.conf.urls.defaults import *
from django.contrib import admin

admin.autodiscover()

urlpatterns = patterns('',
    url(r'^admin/', include(admin.site.urls)),
    url(r'^autocomplete/', include('completion.urls')),
    url(r'^blog/', include('basic.blog.urls')),
    url(r'^create/', include('example.site_app.urls')), # our custom content creation views
    url(r'^media/', include('basic.media.urls.photos')),
    url(r'^people/', include('basic.people.urls')),
    url(r'^places/', include('basic.places.urls')),
    url(r'^media/(?P<path>.*)$', 'django.views.static.serve', {
        'document_root': settings.MEDIA_ROOT,
    }),
    url(r'^$', 'django.views.generic.simple.direct_to_template', kwargs={'template': 'homepage.html'}),
)

########NEW FILE########
__FILENAME__ = models
from django.contrib.contenttypes.generic import GenericForeignKey
from django.contrib.contenttypes.models import ContentType
from django.db import models

from genericm2m.models import RelatedObjectsDescriptor


class RelatedBeverage(models.Model):
    food = models.ForeignKey('Food')
    beverage = models.ForeignKey('Beverage')
    
    class Meta:
        ordering = ('-id',)


class Food(models.Model):
    name = models.CharField(max_length=255)
    
    related = RelatedObjectsDescriptor()
    related_beverages = RelatedObjectsDescriptor(RelatedBeverage, 'food', 'beverage')
    
    def __unicode__(self):
        return self.name


class Beverage(models.Model):
    name = models.CharField(max_length=255)
    
    related = RelatedObjectsDescriptor()
    
    def __unicode__(self):
        return self.name


class Person(models.Model):
    name = models.CharField(max_length=255)
    
    related = RelatedObjectsDescriptor()
    
    def __unicode__(self):
        return self.name


class Boring(models.Model):
    name = models.CharField(max_length=255)
    
    def __unicode__(self):
        return self.name


class AnotherRelatedObject(models.Model):
    parent_type = models.ForeignKey(ContentType, related_name="child_%(class)s")
    parent_id = models.IntegerField(db_index=True)
    parent = GenericForeignKey(ct_field="parent_type", fk_field="parent_id")
    
    object_type = models.ForeignKey(ContentType, related_name="related_%(class)s")
    object_id = models.IntegerField(db_index=True)
    object = GenericForeignKey(ct_field="object_type", fk_field="object_id")
    
    alias = models.CharField(max_length=255, blank=True)
    description = models.TextField(blank=True)
    
    creation_date = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ('id',)


class Note(models.Model):
    content = models.TextField()
    
    related = RelatedObjectsDescriptor(AnotherRelatedObject)

########NEW FILE########
__FILENAME__ = tests
from django.contrib.contenttypes.models import ContentType
from django.test import TestCase

from genericm2m.models import RelatedObject, RelatedObjectsDescriptor, GFKOptimizedQuerySet
from genericm2m.genericm2m_tests.models import (
    Food, Beverage, Person, RelatedBeverage, Boring, AnotherRelatedObject, Note
)


class RelationsTestCase(TestCase):
    def setUp(self):
        self.pizza = Food.objects.create(name='pizza')
        self.sandwich = Food.objects.create(name='sandwich')
        self.cereal = Food.objects.create(name='cereal')

        self.soda = Beverage.objects.create(name='soda')
        self.beer = Beverage.objects.create(name='beer')
        self.milk = Beverage.objects.create(name='milk')

        self.mario = Person.objects.create(name='mario')
        self.sam = Person.objects.create(name='sam')
        self.chocula = Person.objects.create(name='chocula')

        self.table = Boring.objects.create(name='table')
        self.chair = Boring.objects.create(name='chair')

    def assertRelatedEqual(self, rel_qs, tups, from_field='parent',
                           to_field='object'):
        rel_tup = [
            (getattr(rel_obj, from_field), getattr(rel_obj, to_field)) \
            for rel_obj in rel_qs
        ]
        self.assertEqual(rel_tup, list(tups))

    def test_connect(self):
        """
        Connect model instances to various other model instances, then query
        the manager and check the queryset returned is correct
        """
        self.pizza.related.connect(self.soda)
        self.pizza.related.connect(self.beer)
        self.pizza.related.connect(self.mario)

        self.soda.related.connect(self.pizza)
        self.soda.related.connect(self.beer)

        related = self.pizza.related.all()
        self.assertRelatedEqual(related, (
            (self.pizza, self.mario),
            (self.pizza, self.beer),
            (self.pizza, self.soda),
        ))

        self.sandwich.related.connect(self.soda)
        self.sandwich.related.connect(self.milk)

        related = self.sandwich.related.all()
        self.assertRelatedEqual(related, (
            (self.sandwich, self.milk),
            (self.sandwich, self.soda),
        ))

        related = self.cereal.related.all()
        self.assertRelatedEqual(related, ())

        related = self.soda.related.all()
        self.assertRelatedEqual(related, (
            (self.soda, self.beer),
            (self.soda, self.pizza),
        ))

        self.sandwich.related.connect(self.table)

        related = self.sandwich.related.all()
        self.assertRelatedEqual(related, (
            (self.sandwich, self.table),
            (self.sandwich, self.milk),
            (self.sandwich, self.soda),
        ))

    def test_related_to(self):
        """
        Check the back-side of the double-GFK, note: this only works on objects
        that have a RelatedObjectsDescriptor() pointing to the same model
        class, in this case the default `RelatedObject`
        """
        self.pizza.related.connect(self.soda)
        self.pizza.related.connect(self.beer)
        self.pizza.related.connect(self.table)
        self.sandwich.related.connect(self.soda)
        self.sandwich.related.connect(self.milk)
        self.mario.related.connect(self.soda)
        self.soda.related.connect(self.pizza)

        related = self.soda.related.related_to()
        self.assertRelatedEqual(related, (
            (self.mario, self.soda),
            (self.sandwich, self.soda),
            (self.pizza, self.soda),
        ))

        related = self.beer.related.related_to()
        self.assertRelatedEqual(related, (
            (self.pizza, self.beer),
        ))

        related = self.milk.related.related_to()
        self.assertRelatedEqual(related, (
            (self.sandwich, self.milk),
        ))

        related = self.pizza.related.related_to()
        self.assertRelatedEqual(related, (
            (self.soda, self.pizza),
        ))

    def test_symmetrical(self):
        self.pizza.related.connect(self.soda)
        self.pizza.related.connect(self.beer)
        self.pizza.related.connect(self.table)
        self.sandwich.related.connect(self.soda)
        self.sandwich.related.connect(self.milk)
        self.mario.related.connect(self.soda)
        self.soda.related.connect(self.pizza)

        related = self.soda.related.symmetrical().order_by('id')
        self.assertRelatedEqual(related, (
            (self.pizza, self.soda),
            (self.sandwich, self.soda),
            (self.mario, self.soda),
            (self.soda, self.pizza),
        ))

        related = self.beer.related.symmetrical()
        self.assertRelatedEqual(related, (
            (self.pizza, self.beer),
        ))

    def test_manager_methods(self):
        """
        Since the RelatedObjectsDescriptor behaves like a dynamic manager (much
        the same as Django's ForeignRelatedObjectsDescriptor) test to ensure
        that the manager behaves as expected and correctly implements all the
        basic FK methods
        """
        # connect pizza to soda and grab the newly-created RelatedObject
        self.pizza.related.connect(self.soda)
        rel_obj = RelatedObject.objects.all()[0]

        # connect cereal to milk (this is just to make sure that anything
        # modified on one Food object doesn't affect another Food object
        self.cereal.related.connect(self.milk)

        # create a new RelatedObject but do not save it yet -- note that it does
        # not have `parent_object` set
        new_rel_obj = RelatedObject(object=self.beer)

        # add this related object to pizza, parent_object gets set and it will
        # show up in the queryset as expected
        self.pizza.related.add(new_rel_obj)
        self.assertRelatedEqual(self.pizza.related.all(), (
            (self.pizza, self.beer),
            (self.pizza, self.soda),
        ))

        # remove the original RelatedObject `rel_obj`, which was the connection
        # from pizza -> soda
        self.pizza.related.remove(rel_obj)
        self.assertRelatedEqual(self.pizza.related.all(), (
            (self.pizza, self.beer),
        ))

        # make sure clearing pizza's related queryset works
        self.pizza.related.clear()
        self.assertRelatedEqual(self.pizza.related.all(), ())

        # make sure clearing the pizza objects didn't affect cereal
        self.assertRelatedEqual(self.cereal.related.all(), (
            (self.cereal, self.milk),
        ))

        # there should be just one row in the table
        self.assertEqual(RelatedObject.objects.count(), 1)

    def test_model_level(self):
        """
        The RelatedObjectsDescriptor can work at the class-level as well and
        applies to all instances of the model - check that when connections are
        made between individual instances and then are queried via the class,
        that all connections are returned from that model type
        """
        self.pizza.related.connect(self.beer)
        self.cereal.related.connect(self.milk)

        self.mario.related.connect(self.pizza)
        self.sam.related.connect(self.beer)
        self.soda.related.connect(self.pizza)

        self.assertRelatedEqual(Food.related.all(), (
            (self.cereal, self.milk),
            (self.pizza, self.beer),
        ))

        self.assertRelatedEqual(Beverage.related.all(), (
            (self.soda, self.pizza),
        ))

        self.assertRelatedEqual(Person.related.all(), (
            (self.sam, self.beer),
            (self.mario, self.pizza),
        ))

    def test_custom_connect(self):
        """
        Mimic the test_connect() method, but instead use the custom descriptor,
        `related_beverages` which goes through the RelatedBeverage model
        """
        self.pizza.related_beverages.connect(self.soda)
        self.pizza.related_beverages.connect(self.beer)

        related = self.pizza.related_beverages.all()
        self.assertRelatedEqual(related, (
            (self.pizza, self.beer),
            (self.pizza, self.soda),
        ), 'food', 'beverage')

        self.sandwich.related_beverages.connect(self.soda)
        self.sandwich.related_beverages.connect(self.milk)

        related = self.sandwich.related_beverages.all()
        self.assertRelatedEqual(related, (
            (self.sandwich, self.milk),
            (self.sandwich, self.soda),
        ), 'food', 'beverage')

        related = self.cereal.related_beverages.all()
        self.assertRelatedEqual(related, ())

    def test_custom_model_manager(self):
        """
        Mimic the test_model_manager() method, but instead use the custom
        descriptor and through model
        """
        self.pizza.related_beverages.connect(self.soda)
        rel_obj = RelatedBeverage.objects.all()[0] # grab the new related obj

        self.cereal.related_beverages.connect(self.milk)

        new_rel_obj = RelatedBeverage(beverage=self.beer)

        self.pizza.related_beverages.add(new_rel_obj)
        self.assertRelatedEqual(self.pizza.related_beverages.all(), (
            (self.pizza, self.beer),
            (self.pizza, self.soda),
        ), 'food', 'beverage')

        self.pizza.related_beverages.remove(rel_obj)
        self.assertRelatedEqual(self.pizza.related_beverages.all(), (
            (self.pizza, self.beer),
        ), 'food', 'beverage')

        self.pizza.related_beverages.clear()
        self.assertRelatedEqual(self.pizza.related_beverages.all(), ())

        # make sure clearing the pizza objects didn't affect cereal
        self.assertRelatedEqual(self.cereal.related_beverages.all(), (
            (self.cereal, self.milk),
        ), 'food', 'beverage')

        self.assertEqual(RelatedBeverage.objects.count(), 1)

    def test_custom_model_level(self):
        """
        And lastly, test that the custom descriptor/through-model work as
        expected at the model-level (previous tests were instance-level)
        """
        self.pizza.related_beverages.connect(self.soda)
        self.pizza.related_beverages.connect(self.beer)
        self.sandwich.related_beverages.connect(self.soda)
        self.cereal.related_beverages.connect(self.milk)

        self.assertRelatedEqual(Food.related_beverages.all(), (
            (self.cereal, self.milk),
            (self.sandwich, self.soda),
            (self.pizza, self.beer),
            (self.pizza, self.soda),
        ), 'food', 'beverage')

    def test_generic_traversal(self):
        """
        Ensure that the RelatedObjectsDescriptor returns a GFKOptimizedQuerySet
        when the through model contains a GFK -- also check that the queryset's
        optimized lookup works as expected
        """
        self.pizza.related.connect(self.beer)
        self.pizza.related.connect(self.soda)
        self.pizza.related.connect(self.mario)

        # the manager returns instances of GFKOptimizedQuerySet
        related = self.pizza.related.all()
        self.assertEqual(type(related), GFKOptimizedQuerySet)

        # check the queryset is using the right field
        self.assertEqual(related.get_gfk().name, 'object')

        # the custom queryset's optimized lookup works correctly
        objects = related.generic_objects()
        self.assertEqual(objects, [self.mario, self.soda, self.beer])

        # check the reverse does not hold, documenting existing behavior since
        # it looks at only the "default" manager on the back-side
        related = self.soda.related.related_to()
        self.assertEqual(type(related), GFKOptimizedQuerySet)

        # check the queryset is using the right field
        self.assertEqual(related.get_gfk().name, 'parent')

        # the custom queryset's optimized lookup works correctly
        objects = related.generic_objects()
        self.assertEqual(objects, [self.pizza])

    def test_filtering(self):
        """
        Check that filtering on RelatedObject fields (or through model fields)
        works as expected
        """
        self.pizza.related.connect(self.beer, alias='bud lite')
        self.pizza.related.connect(self.soda, alias='pepsi')
        self.pizza.related.connect(self.mario)

        rel_qs = self.pizza.related.filter(alias='bud lite')
        self.assertRelatedEqual(rel_qs, (
            (self.pizza, self.beer),
        ))

        rel_qs = self.pizza.related.filter(object_type=ContentType.objects.get_for_model(Beverage))
        self.assertRelatedEqual(rel_qs, (
            (self.pizza, self.soda),
            (self.pizza, self.beer),
        ))

        rel_qs = self.beer.related.related_to().filter(alias='bud lite')
        self.assertRelatedEqual(rel_qs, (
            (self.pizza, self.beer),
        ))

    def test_custom_model_using_gfks(self):
        """
        Check that using a custom through model with GFKs works as expected
        (looking at models.py, Note uses `AnotherRelatedObject` as its through)
        """
        self.note_a = Note.objects.create(content='a')
        self.note_b = Note.objects.create(content='b')
        self.note_c = Note.objects.create(content='c')

        self.note_a.related.connect(self.pizza)
        self.note_a.related.connect(self.note_b)

        self.pizza.related.connect(self.note_b)

        # create some notes with custom attributes
        self.note_b.related.connect(self.cereal, alias='cereal note', description='lucky charms!')
        self.note_b.related.connect(self.milk, alias='milk note', description='goes good with cereal')

        # ensure that the queryset is using the correct model and automatically
        # determines that a GFKOptimizedQuerySet can be used
        queryset = self.note_a.related.all()
        self.assertEqual(queryset.model, AnotherRelatedObject)
        self.assertTrue(isinstance(queryset, GFKOptimizedQuerySet))

        related_a = self.note_a.related.all()
        self.assertRelatedEqual(related_a, (
            (self.note_a, self.pizza),
            (self.note_a, self.note_b),
        ))

        related_b = self.note_b.related.all()
        self.assertRelatedEqual(related_b, (
            (self.note_b, self.cereal),
            (self.note_b, self.milk),
        ))

        related_to = self.note_b.related.related_to()
        # note that pizza does not show up here even though it is related to note b
        # this is because that relationship was stored in a different table (RelatedObject)
        # as opposed to AnotherRelatedObject
        self.assertEqual(related_to.generic_objects(), [self.note_a])

        cereal_rel, milk_rel = related_b

        # check that the custom attributes were saved correctly
        self.assertEqual(cereal_rel.alias, 'cereal note')
        self.assertEqual(cereal_rel.description, 'lucky charms!')

        self.assertEqual(milk_rel.alias, 'milk note')
        self.assertEqual(milk_rel.description, 'goes good with cereal')

        # check that we can filter on fields as expected
        self.assertRelatedEqual(self.note_b.related.filter(alias='cereal note'), (
            (self.note_b, self.cereal),
        ))

        related_c = self.note_c.related.all()
        self.assertRelatedEqual(related_c, ())

        # lastly, check that the GFKOptimizedQuerySet returns the expected
        # results when doing the optimized lookup
        self.assertEqual(related_a.generic_objects(), [
            self.pizza, self.note_b
        ])

        self.assertEqual(related_b.generic_objects(), [
            self.cereal, self.milk
        ])

        self.assertEqual(related_c.generic_objects(), [])

########NEW FILE########
__FILENAME__ = models
from django.contrib.contenttypes.generic import GenericForeignKey
from django.contrib.contenttypes.models import ContentType
from django.db import models
from django.db.models import Q
from django.db.models.query import QuerySet

from sys import version_info
from genericm2m import PY3, unicode, str

class GFKOptimizedQuerySet(QuerySet):
    def __init__(self, *args, **kwargs):
        # pop the gfk_field from the kwargs if its passed in explicitly
        self._gfk_field = kwargs.pop('gfk_field', None)

        # call the parent class' initializer
        super(GFKOptimizedQuerySet, self).__init__(*args, **kwargs)

    def _clone(self, *args, **kwargs):
        clone = super(GFKOptimizedQuerySet, self)._clone(*args, **kwargs)
        clone._gfk_field = self._gfk_field
        return clone

    def get_gfk(self):
        if not self._gfk_field:
            for field in self.model._meta.virtual_fields:
                if isinstance(field, GenericForeignKey):
                    self._gfk_field = field
                    break

        return self._gfk_field

    def generic_objects(self):
        clone = self._clone()

        ctypes_and_fks = {}

        gfk_field = self.get_gfk()
        ctype_field = '%s_id' % gfk_field.ct_field
        fk_field = gfk_field.fk_field

        for obj in clone:
            ctype = ContentType.objects.get_for_id(getattr(obj, ctype_field))
            obj_id = getattr(obj, fk_field)

            ctypes_and_fks.setdefault(ctype, [])
            ctypes_and_fks[ctype].append(obj_id)

        gfk_objects = {}
        for ctype, obj_ids in ctypes_and_fks.items():
            gfk_objects[ctype.pk] = ctype.model_class()._default_manager.in_bulk(obj_ids)

        obj_list = []
        for obj in clone:
            obj_list.append(gfk_objects[getattr(obj, ctype_field)][getattr(obj, fk_field)])

        return obj_list


class RelatedObjectsDescriptor(object):
    def __init__(self, model=None, from_field='parent', to_field='object'):
        self.related_model = model or RelatedObject
        self.from_field = self.get_related_model_field(from_field)
        self.to_field = self.get_related_model_field(to_field)

    def get_related_model_field(self, field_name):
        opts = self.related_model._meta
        for virtual_field in opts.virtual_fields:
            if virtual_field.name == field_name:
                return virtual_field
        return opts.get_field(field_name)

    def is_gfk(self, field):
        return isinstance(field, GenericForeignKey)

    def get_query_for_field(self, instance, field):
        if self.is_gfk(field):
            ctype = ContentType.objects.get_for_model(instance)
            return {
                field.ct_field: ctype,
                field.fk_field: instance.pk
            }
        elif isinstance(instance, field.rel.to):
            return {field.name: instance}

        raise TypeError('Unable to query %s with %s' % (field, instance))

    def get_query_from(self, instance):
        return self.get_query_for_field(instance, self.from_field)

    def get_query_to(self, instance):
        return self.get_query_for_field(instance, self.to_field)

    def contribute_to_class(self, cls, name):
        self.name = name
        self.model_class = cls
        setattr(cls, self.name, self)

    def __get__(self, instance, cls=None):
        if instance is None:
            return self

        ManagerClass = type(self.related_model._default_manager)
        return self.create_manager(instance, ManagerClass)

    def __set__(self, instance, value):
        if instance is None:
            raise AttributeError("Manager must be accessed via instance")

        manager = self.__get__(instance)
        manager.add(*value)

    def delete_manager(self, instance):
        return self.create_manager(instance,
                self.related_model._base_manager.__class__)

    def create_manager(self, instance, superclass, cf_from=True):
        rel_obj = self
        if cf_from:
            core_filters = self.get_query_from(instance)
            rel_field = self.to_field
        else:
            core_filters = self.get_query_to(instance)
            rel_field = self.from_field
        uses_gfk = self.is_gfk(rel_field)

        class RelatedManager(superclass):
            def get_query_set(self):
                if uses_gfk:
                    qs = GFKOptimizedQuerySet(self.model, gfk_field=rel_field)
                    return qs.filter(**(core_filters))
                else:
                    return superclass.get_query_set(self).filter(**(core_filters))

            def add(self, *objs):
                for obj in objs:
                    if not isinstance(obj, self.model):
                        raise TypeError("'%s' instance expected" % self.model._meta.object_name)
                    if not PY3:
                        for (k, v) in core_filters.iteritems():
                            setattr(obj, k, v)
                    else:
                        for (k, v) in core_filters.items():
                            setattr(obj, k, v)
                    obj.save()
            add.alters_data = True

            def create(self, **kwargs):
                kwargs.update(core_filters)
                return super(RelatedManager, self).create(**kwargs)
            create.alters_data = True

            def get_or_create(self, **kwargs):
                kwargs.update(core_filters)
                return super(RelatedManager, self).get_or_create(**kwargs)
            get_or_create.alters_data = True

            def remove(self, *objs):
                for obj in objs:
                    # Is obj actually part of this descriptor set?
                    if obj in self.all():
                        obj.delete()
                    else:
                        raise rel_obj.related_model.DoesNotExist(
                            "%r is not related to %r." % (obj, instance))
            remove.alters_data = True

            def clear(self):
                self.all().delete()
            clear.alters_data = True

            def connect(self, obj, **kwargs):
                kwargs.update(rel_obj.get_query_to(obj))
                connection, created = self.get_or_create(**kwargs)
                return connection

            def related_to(self):
                mgr = rel_obj.create_manager(instance, superclass, False)
                return mgr.filter(
                    **rel_obj.get_query_to(instance)
                )

            def symmetrical(self):
                return superclass.get_query_set(self).filter(
                    Q(**rel_obj.get_query_from(instance)) |
                    Q(**rel_obj.get_query_to(instance))
                ).distinct()

        manager = RelatedManager()
        manager.core_filters = core_filters
        manager.model = self.related_model

        return manager

    def all(self):
        if self.is_gfk(self.from_field):
            ctype = ContentType.objects.get_for_model(self.model_class)
            query = {self.from_field.ct_field: ctype}
        else:
            query = {}
        return self.related_model._default_manager.filter(**query)


class BaseGFKRelatedObject(models.Model):
    """
    A generic many-to-many implementation where diverse objects are related
    across a single model to other diverse objects -> using a dual GFK
    """
    # SOURCE OBJECT:
    parent_type = models.ForeignKey(ContentType, related_name="child_%(class)s")
    parent_id = models.IntegerField(db_index=True)
    parent = GenericForeignKey(ct_field="parent_type", fk_field="parent_id")

    # ACTUAL RELATED OBJECT:
    object_type = models.ForeignKey(ContentType, related_name="related_%(class)s")
    object_id = models.IntegerField(db_index=True)
    object = GenericForeignKey(ct_field="object_type", fk_field="object_id")

    class Meta:
        abstract = True


class RelatedObject(BaseGFKRelatedObject):
    """
    A subclass of BaseGFKRelatedObject which adds two fields used for tracking
    some metadata about the relationship, an alias and the date the relationship
    was created
    """
    alias = models.CharField(max_length=255, blank=True)
    creation_date = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ('-creation_date',)

    def __unicode__(self):
        return unicode('%s related to %s ("%s")' % (self.parent, self.object, self.alias))

########NEW FILE########
__FILENAME__ = utils
from genericm2m.models import RelatedObjectsDescriptor


def monkey_patch(model_class, name='related', descriptor=None):
    rel_obj = descriptor or RelatedObjectsDescriptor()
    rel_obj.contribute_to_class(model_class, name)
    setattr(model_class, name, rel_obj)
    return True

########NEW FILE########
__FILENAME__ = runtests
#!/usr/bin/env python
import sys
from os.path import dirname, abspath

import django
from django.conf import settings


if len(sys.argv) > 1 and 'postgres' in sys.argv:
    sys.argv.remove('postgres')
    db_engine = 'django.db.backends.postgresql_psycopg2'
    db_name = 'test_main'
else:
    db_engine = 'django.db.backends.sqlite3'
    db_name = ''

if not settings.configured:
    settings.configure(
        DATABASES=dict(default=dict(ENGINE=db_engine, NAME=db_name)),
        INSTALLED_APPS = [
            'django.contrib.contenttypes',
            'genericm2m',
            'genericm2m.genericm2m_tests',
        ],
    )

from django.test.utils import get_runner


def runtests(*test_args):
    if not test_args:
        if sys.version_info[0] > 2:
            test_args = ['genericm2m.genericm2m_tests']
        else:
            test_args = ["genericm2m_tests"]
    parent = dirname(abspath(__file__))
    sys.path.insert(0, parent)
    TestRunner = get_runner(settings)
    test_runner = TestRunner(verbosity=1, interactive=True)
    failures = test_runner.run_tests(test_args)
    sys.exit(failures)

if __name__ == '__main__':
    runtests(*sys.argv[1:])

########NEW FILE########
