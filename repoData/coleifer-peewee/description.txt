# Changelog

Tracking changes in peewee between versions.  For a complete view of all the
releases, visit GitHub:

https://github.com/coleifer/peewee/releases

## 2.2.4

This release contains a complete rewrite of `pwiz` as well as some improvements to the SQLite extension, including support for the BM25 ranking algorithm for full-text searches. I also merged support for sqlcipher, an encrypted SQLite database with many thanks to @thedod!

### Changes in 2.2.4

* Rewrite of `pwiz`, schema introspection utility.
* `Model.save()` returns a value indicating the number of modified rows.
* Fixed bug with `PostgresqlDatabase.last_insert_id()` leaving a transaction open in autocommit mode (#353).
* Added BM25 ranking algorithm for full-text searches with SQLite.

[View commits](https://github.com/coleifer/peewee/compare/2.2.3...2.2.4)

## 2.2.3

This release contains a new migrations module in addition to a number of small features and bug fixes.

### Changes in 2.2.3

* New migrations module.
* Added a return value to `Model.save()` indicating number of rows affected.
* Added a `date_trunc()` method that works for Sqlite.
* Added a `Model.sqlall()` class-method to return all the SQL to generate the model / indices.

### Bugs fixed

* #342, allow functions to not coerce parameters automatically.
* #338, fixed unaliased columns when using Array and Json fields with postgres, thanks @mtwesley.
* #331, corrected issue with the way unicode arrays were adapted with psycopg2.
* #328, pwiz / mysql bug.
* #326, fixed calculation of the alias_map when using subqueries.
* #324, bug with `prefetch()` not selecting the correct primary key.


[View commits](https://github.com/coleifer/peewee/compare/2.2.2...2.2.3)


## 2.2.1

I've been looking forward to this release, as it contains a couple new features
that I've been wanting to add for some time now. Hope you find them useful.

### Changes in 2.2.1

* Window queries using ``OVER`` syntax.
* Compound query operations ``UNION``, ``INTERSECT``, ``EXCEPT`` as well as symmetric difference.

### Bugs fixed

* #300, pwiz was not correctly interpreting some foreign key constraints in SQLite.
* #298, drop table with cascade API was missing.
* #294, typo.

[View commits](https://github.com/coleifer/peewee/compare/2.2.0...2.2.1)

## 2.2.0

This release contains a large refactoring of the way SQL was generated for both
the standard query classes (`Select`, `Insert`, `Update`, `Delete`) as well as
for the DDL methods (`create_table`, `create_index`, etc). Instead of joining
strings of SQL and manually quoting things, I've created `Clause` objects
containing multiple `Node` objects to represent all parts of the query.

I also changed the way peewee determins the SQL to represent a field. Now a
field implements ``__ddl__`` and ``__ddl_column__`` methods. The former creates
the entire field definition, e.g.:

    "quoted_column_name" <result of call to __ddl_column__> [NOT NULL/PRIMARY KEY/DEFAULT NEXTVAL(...)/CONSTRAINTS...]

The latter method is responsible just for the column type definition. This might
return ``VARCHAR(255)`` or simply ``TEXT``. I've also added support for
arbitrary constraints on each field, so you might have:

    price = DecimalField(decimal_places=2, constraints=[Check('price > 0')])

### Changes in 2.2.0

* Refactored query generation for both SQL queries and DDL queries.
* Support for arbitrary column constraints.
* `autorollback` option to the `Database` class that will roll back the
  transaction before raising an exception.
* Added `JSONField` type to the `postgresql_ext` module.
* Track fields that are explicitly set, allowing faster saves (thanks @soasme).
* Allow the `FROM` clause to be an arbitrary `Node` object (#290).
* `schema` is a new `Model.Mketa` option and is used throughout the code.
* Allow indexing operation on HStore fields (thanks @zdxerr, #293).

### Bugs fixed

* #277 (where calls not chainable with update query)
* #278, use `wraps()`, thanks @lucasmarshall
* #284, call `prepared()` after `create()`, thanks @soasme.
* #286, cursor description issue with pwiz + postgres

[View commits](https://github.com/coleifer/peewee/compare/2.1.7...2.2.0)


## 2.1.7

### Changes in 2.1.7

* Support for savepoints (Sqlite, Postgresql and MySQL) using an API similar to that of transactions.
* Common set of exceptions to wrap DB-API 2 driver-specific exception classes, e.g. ``peewee.IntegrityError``.
* When pwiz cannot determine the underlying column type, display it in a comment in the generated code.
* Support for circular foreign-keys.
* Moved ``Proxy`` into peewee (previously in ``playhouse.proxy``).
* Renamed ``R()`` to ``SQL()``.
* General code cleanup, some new comments and docstrings.

### Bugs fixed

* Fixed a small bug in the way errors were handled in transaction context manager.
* #257
* #265, nest multiple calls to functions decorated with `@database.commit_on_success`.
* #266
* #267

Commits: https://github.com/coleifer/peewee/compare/2.1.6...2.1.7
Released 2013-12-25

## 2.1.6

Changes included in 2.1.6:

* [Lightweight Django integration](http://peewee.readthedocs.org/en/latest/peewee/playhouse.html#django-integration).
* Added a [csv loader](http://peewee.readthedocs.org/en/latest/peewee/playhouse.html#csv-loader) to playhouse.
* Register unicode converters per-connection instead of globally when using `pscyopg2`.
* Fix for how the related object cache is invalidated (#243).

Commits: https://github.com/coleifer/peewee/compare/2.1.5...2.1.6
Released 2013-11-19

## 2.1.5

### Summary of new features

* Rewrote the ``playhouse.postgres_ext.ServerSideCursor`` helper to work with a single query.  [Docs](http://peewee.readthedocs.org/en/latest/peewee/playhouse.html#server-side-cursors).
* Added error handler hook to the database class, allowing your code to choose how to handle errors executing SQL.  [Docs](http://peewee.readthedocs.org/en/latest/peewee/api.html#Database.sql_error_handler).
* Allow arbitrary attributes to be stored in ``Model.Meta`` a5e13bb26d6196dbd24ff228f99ff63d9c046f79.
* Support for composite primary keys (!!).  [How-to](http://peewee.readthedocs.org/en/latest/peewee/cookbook.html#composite-primary-keys) and [API docs](http://peewee.readthedocs.org/en/latest/peewee/api.html#CompositeKey).
* Added helper for generating ``CASE`` expressions.  [Docs](http://peewee.readthedocs.org/en/latest/peewee/playhouse.html#case).
* Allow the table alias to be specified as a model ``Meta`` option.
* Added ability to specify ``NOWAIT`` when issuing ``SELECT FOR UPDATE`` queries.

### Bug fixes

* #147, SQLite auto-increment behavior.
* #222
* #223, missing call to ``execute()`` in docs.
* #224, python 3 compatibility fix.
* #227, was using wrong column type for boolean with MySQL.

Commits: https://github.com/coleifer/peewee/compare/2.1.4...2.1.5
Released 2013-10-19

## 2.1.4

* Small refactor of some components used to represent expressions (mostly better names).
* Support for [Array fields](http://peewee.readthedocs.org/en/latest/peewee/playhouse.html#ArrayField) in postgresql.
* Added notes on [Proxy](http://peewee.readthedocs.org/en/latest/peewee/playhouse.html#proxy)
* Support for [Server side cursors](http://peewee.readthedocs.org/en/latest/peewee/playhouse.html#server-side-cursors) with postgresql.
* Code cleanups for more consistency.

Commits: https://github.com/coleifer/peewee/compare/2.1.3...2.1.4
Released 2013-08-05

## 2.1.3

* Added the ``sqlite_ext`` module, including support for virtual tables, full-text search, user-defined functions, collations and aggregates, as well as more granular locking.
* Manually convert data-types when doing simple aggregations - fixes issue #208
* Profiled code and dramatically increased performance of benchmarks.
* Added a proxy object for lazy database initialization - fixes issue #210

Commits: https://github.com/coleifer/peewee/compare/2.1.2...2.1.3
Released 2013-06-28

-------------------------------------

## 2.0.0

Major rewrite, see notes here: http://peewee.readthedocs.org/en/latest/peewee/upgrading.html#upgrading

.. image:: http://i.imgur.com/zhcoT.png

peewee
======

* a small, expressive orm
* written in python (2.6+, 3.2+)
* built-in support for sqlite, mysql and postgresql and special extensions like `hstore <http://peewee.readthedocs.org/en/latest/peewee/playhouse.html#postgresql-hstore>`_

.. image:: https://api.travis-ci.org/coleifer/peewee.png?branch=master
  :target: https://travis-ci.org/coleifer/peewee

For flask integration, including an admin interface and RESTful API, check
out `flask-peewee <https://github.com/coleifer/flask-peewee/>`_.

For notes on the upgrade from 1.0 to 2.0, check out `the upgrade docs <http://peewee.readthedocs.org/en/latest/peewee/upgrading.html>`_.

Check out the `quickstart IPython notebook <http://nbviewer.ipython.org/d3faf30bbff67ce5f70c>`_.

Example queries::

    # a simple query selecting a user
    User.get(User.username == 'charles')

    # get the staff and super users
    editors = User.select().where(
        (User.is_staff == True) |
        (User.is_superuser == True)
    )

    # get tweets by editors ("<<" maps to IN)
    Tweet.select().where(Tweet.user << editors)

    # how many active users are there?
    User.select().where(User.active == True).count()

    # paginate the user table and show me page 3 (users 41-60)
    User.select().order_by(User.username).paginate(3, 20)

    # order users by number of tweets
    User.select().annotate(Tweet).order_by(
        fn.Count(Tweet.id).desc()
    )

    # a similar way of expressing the same
    tweet_ct = fn.Count(Tweet.id)
    (User
      .select(User, tweet_ct.alias('ct'))
      .join(Tweet)
      .group_by(User)
      .order_by(tweet_ct.desc()))

    # do an atomic update
    Counter.update(count=Counter.count + 1).where(
        Counter.url == request.url
    )


Check out the `quick start <http://peewee.readthedocs.org/en/latest/peewee/quickstart.html>`_ for more!


Learning more
-------------

the official `peewee cookbook <http://peewee.readthedocs.org/en/latest/peewee/cookbook.html>`_
has recipes for common operations and is a good place to get started.

check the `documentation <http://peewee.readthedocs.org/>`_ for more
examples.

specific question?  come hang out in the #peewee channel on freenode.irc.net,
or post to the mailing list, http://groups.google.com/group/peewee-orm

lastly, peewee runs on python 2.6+ or 3.2+.

Still want more info?
---------------------

.. image:: http://media.charlesleifer.com/blog/photos/wat.jpg



Why?
----

peewee began when I was working on a small app in flask and found myself writing
lots of queries and wanting a very simple abstraction on top of the sql.  I had
so much fun working on it that I kept adding features. peewee is small enough that
its my hope anyone with an interest in orms will be able to understand the code
without much trouble.


model definitions and schema creation
-------------------------------------

smells like django::


    from peewee import *

    class Blog(Model):
        title = CharField()

        def __unicode__(self):
            return self.title

    class Entry(Model):
        title = CharField(max_length=50)
        content = TextField()
        pub_date = DateTimeField()
        blog = ForeignKeyField(Blog, related_name='entries')

        def __unicode__(self):
            return '%s: %s' % (self.blog.title, self.title)


open a connection to the database::

    >>> from peewee import database
    >>> database.connect()

create a set of tables from models ::

     >>> from peewee import create_model_tables
     >>> create_model_tables([Blog, Entry]) # will be sorted topologically

create a specific table ::

    >>> Blog.create_table()
    >>> Entry.create_table()

drop a specific table ::

    >>> Blog.drop_table()
    >>> Entry.drop_table()

drop a set of tables from models ::

    >>> from peewee import drop_model_tables
    >>> drop_model_tables([Blog, Entry]) # Drop tables for all given models (in the right order)


foreign keys work like django's
-------------------------------

    >>> b = Blog(title="Peewee's Big Adventure")
    >>> b.save()
    >>> e = Entry(title="Greatest movie ever?", content="YES!", blog=b)
    >>> e.save()
    >>> e.blog
    <Blog: Peewee's Big Adventure>
    >>> for e in b.entries:
    ...     print e.title
    ...
    Greatest movie ever?


querying
--------

queries come in 5 flavors (select/update/insert/delete/"raw").

there's the notion of a *query context* which is the model being selected
or joined on::

    User.select().where(User.active == True).order_by(User.username)

since User is the model being selected, the where clause and the order_by will
pertain to attributes on the User model.  User is the current query context
when the .where() and .order_by() are evaluated.

an example using joins::

    (Tweet
      .select()
      .join(User)
      .where((Tweet.deleted == False) & (User.active == True))
      .order_by(Tweet.pub_date.desc()))

this will select non-deleted tweets from active users.


using sqlite
------------

::

    from peewee import *

    database = SqliteDatabase('my.db')

    class BaseModel(Model):
        class Meta:
            database = database

    class Blog(BaseModel):
        creator = CharField()
        name = CharField()

    class Entry(BaseModel):
        creator = CharField()
        name = CharField()


using postgresql
----------------

you can now use postgresql::

    from peewee import *

    database = PostgresqlDatabase('my_db', user='root')

    class BaseModel(Model):
        class Meta:
            database = database

    # ... same as above sqlite example ...


using mysql
-----------

you can now use MySQL::

    from peewee import *

    database = MySQLDatabase('my_db', user='root')

    class BaseModel(Model):
        class Meta:
            database = database

    # ... same as above sqlite example ...


what now?
---------

Check out the `quick start <http://peewee.readthedocs.org/en/latest/peewee/quickstart.html>`_

