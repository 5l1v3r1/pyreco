__FILENAME__ = admin
from django.contrib import admin
from models import DnsRecord


class DnsRecordAdmin(admin.ModelAdmin):
    list_display = ('domain', 'ip', 'key', 'provider', 'last_change',)
    ordering = ('domain',)
    list_filter = ('provider', 'last_change')

admin.site.register(DnsRecord, DnsRecordAdmin)

########NEW FILE########
__FILENAME__ = run_dns_server
# Inspired by http://code.activestate.com/recipes/491264-mini-fake-dns-server/

import socket

from django.core.management.base import NoArgsCommand

from dynamicdns.models import DnsRecord


class Command(NoArgsCommand):
    help = 'Runs the built-in DNS server'

    def handle(self, **options):

        print 'django-dynamic-dns built-in dns server'

        udps = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        udps.bind(('', 53))

        try:
            while True:
                data, addr = udps.recvfrom(1024)
                p = DnsQuery(data)
                try:
                    dns_record = DnsRecord.objects.get(domain=p.domain.rstrip('.'))
                    if dns_record.lan_ip and addr[0] == dns_record.ip:
                        ip = dns_record.lan_ip
                    else:
                        ip = dns_record.ip
                except DnsRecord.DoesNotExist:
                    ip = None
                udps.sendto(p.answer(ip), addr)
                print 'Answer: %s -> %s' % (p.domain, ip)
        except KeyboardInterrupt:
            print 'Finished.'
            udps.close()


class DnsQuery:
    def __init__(self, data):
        self.data = data
        self.domain = ''

        tipo = (ord(data[2]) >> 3) & 15   # Opcode bits
        if tipo == 0:                     # Standard query
            ini = 12
            lon = ord(data[ini])
            while lon != 0:
                self.domain += data[ini + 1:ini + lon + 1] + '.'
                ini += lon + 1
                lon = ord(data[ini])

    def answer(self, ip):
        packet = []
        if self.domain and ip:
            packet += self.data[:2]                                             # Transaction ID
            packet += '\x81\x80'                                                # Flags: Standard query response, No error
            packet += self.data[4:6] + self.data[4:6] + '\x00\x00\x00\x01'      # Question and Answer Counts
            packet += self.data[12:].split('\x00\x00\x29')[0]                   # Original Domain Name Question
            packet += '\xc0\x0c'                                                # Pointer to domain name
            packet += '\x00\x01'                                                # Type: A
            packet += '\x00\x01'                                                # Class: IN
            packet += '\x00\x00\x00\x01'                                        # TTL: 1 second
            packet += '\x00\x04'                                                # Data length: 4 bytes
            packet += ''.join(map(lambda x: chr(int(x)), ip.split('.')))        # 4 bytes of IP
            packet += '\x00\x00\x29'                                            # Additional record <Root>: type OPT
            packet += self.data[12:].split('\x00\x00\x29')[1]
        if not ip:
            packet += self.data[:2] + '\x81\x80'
            packet += self.data[4:6] + '\x00\x00' + '\x00\x00\x00\x00'          # Question and Answer Counts
            packet += self.data[12:]                                            # Original Domain Name Question
            packet += '\xc0\x0c'                                                # Pointer to domain name
        return ''.join(packet)

########NEW FILE########
__FILENAME__ = models
from datetime import datetime
import string
import random

from django.conf import settings
from django.db import models

from utils import update_dns_record


PROVIDER_CHOICES = [(name, name) for name in settings.DYNAMICDNS_PROVIDERS.keys()]


class DnsRecord(models.Model):
    domain = models.CharField(max_length=50, unique=True, help_text='Domain/subdomain name')
    ip = models.CharField(max_length=16, blank=True)
    lan_ip = models.CharField(max_length=16, blank=True, help_text='Only required when using the internal DNS server as a provider')
    key = models.CharField(max_length=50, blank=True, help_text='Optional - Autogenerated if left blank')
    provider = models.CharField(max_length=25, choices=PROVIDER_CHOICES, blank=True)
    last_change = models.DateTimeField(blank=True, null=True)

    def __unicode__(self):
        return self.domain

    def generate_key(self, size=50, chars=string.ascii_uppercase + string.ascii_lowercase + string.digits):
        return ''.join(random.choice(chars) for x in range(size))

    def save(self):
        if not self.key:
            self.key = self.generate_key()
        update_dns_record(self, self.ip)
        self.last_change = datetime.now()
        super(DnsRecord, self).save()

########NEW FILE########
__FILENAME__ = digitalocean
import json

import requests

from . import DynamicDnsPlugin


class DigitalOcean(DynamicDnsPlugin):
    def update(self, ip):
        client_id = self.config['client_id']
        api_key = self.config['api_key']
        prefix, fqdn = self.domain.split('.', 1)
        subdomain = False

        # Get domain ID
        url = 'https://api.digitalocean.com/domains?client_id={}&api_key={}'.format(client_id, api_key)
        content = json.loads(requests.get(url).content)
        domain_id = None
        if not 'domains' in content:
            raise LookupError('Error connecting to DigitalOcean API. Status: {}'.format(content['status']))
        for domain in content['domains']:
            if domain['name'] in [self.domain, fqdn]:
                domain_id = domain['id']
                if domain['name'] == fqdn:
                    subdomain = True
                break
        if not domain_id:
            raise LookupError('Domain ID for {} not found in DigitalOcean API call \'/domains\''.format(self.domain))

        # Get domain records
        url = 'https://api.digitalocean.com/domains/{}/records?client_id={}&api_key={}'.format(domain_id, client_id, api_key)
        content = json.loads(requests.get(url).content)
        record_id = None
        for record in content['records']:
            if record['record_type'] == 'A' and (
                (subdomain and record['name'] == prefix) or
                (not subdomain and record['name'] == '@')):
                    record_id = record['id']
                    break
        if not record_id:
            raise LookupError('\'A\' record for {} not found in DigitalOcean API call \'/domains/{}/records\''.format(self.domain, domain_id))

        # Update record with new IP
        url = 'https://api.digitalocean.com/domains/{}/records/{}/edit?client_id={}&api_key={}&data={}'.format(domain_id, record_id, client_id, api_key, ip)
        content = json.loads(requests.get(url).content)
        if content['status'] == 'OK':
            raise RuntimeError('Couldn\'t update IP address in DigitalOcean DNS record via API call \'/domains/{}/records/{}/edit?data={}\''.format(domain_id, record_id, ip))

########NEW FILE########
__FILENAME__ = dummy
from . import DynamicDnsPlugin


class Dummy(DynamicDnsPlugin):
    pass
########NEW FILE########
__FILENAME__ = rackspace
import clouddns

from . import DynamicDnsPlugin


class Rackspace(DynamicDnsPlugin):
    def update(self, ip):
        dns = clouddns.connection.Connection(self.config['username'], self.config['api_key'])
        fqdn = self.domain.split('.', 1)[1]
        domain = dns.get_domain(name=fqdn)
        record = domain.get_record(name=self.domain)
        record.update(data=ip)
########NEW FILE########
__FILENAME__ = urls
from django.conf.urls import patterns, include, url


urlpatterns = patterns('dynamicdns.views',
    url(r'^update/(?P<domain>[a-z0-9-.]+)/', 'dynamic_dns_update'),
    url(r'^read/(?P<domain>[a-z0-9-.]+)/', 'dynamic_dns_read'),
)

########NEW FILE########
__FILENAME__ = utils
from django.conf import settings


def update_dns_record(dns_record, ip):
    if dns_record.provider:
        config = settings.DYNAMICDNS_PROVIDERS[dns_record.provider]
        mod_path, mod_name = config['plugin'].rsplit('.', 1)
        exec('from {} import {} as DnsPlugin'.format(mod_path, mod_name))
        dns_plugin = DnsPlugin(dns_record.domain, config)
        dns_plugin.update(ip)
########NEW FILE########
__FILENAME__ = views
import json
from time import sleep

from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt

from models import DnsRecord


def dynamic_dns_read(request, domain):
    data = {}
    dns_record = DnsRecord.objects.get(domain=domain)
    data['domain'] = dns_record.domain
    data['ip'] = dns_record.ip
    data['last_change'] = dns_record.last_change.isoformat()
    return HttpResponse(json.dumps(data), mimetype="application/json")


@csrf_exempt
def dynamic_dns_update(request, domain):
    '''
    Updates a domain to use a new IP address. If the IP should be the machine
    that performs the update, just supply your secret key as a POST parameter
    like this:
      curl http://localhost:8000/domain/update/a.example.com/ --data "key=ZHXPu3RTfs3oAexrwBTi8DGN5lmiH3t1pc9iGG1NZsp75UeM84"
    Otherwise provide an 'ip' as another parameter:
      curl http://localhost:8000/domain/update/a.example.com/ --data "key=ZHXPu3RTfs3oAexrwBTi8DGN5lmiH3t1pc9iGG1NZsp75UeM84&ip=1.2.3.4"
    You should use HTTPS in production to avoid MITM attacks.
    '''
    data = {}
    status = 400
    dns_record = None
    updated = False

    if 'key' not in request.POST:
        data['error'] = 'Bad request'
    else:
        try:
            dns_record = DnsRecord.objects.get(domain=domain)
        except DnsRecord.DoesNotExist:
            pass  # We don't want to give away which domains are managed so we will return an auth failure
        if not dns_record or request.POST['key'] != dns_record.key:
            sleep(2)  # Very basic rate-limiting (also depends on number of workers running)
            data['error'] = 'Authentication failure'
            status = 403
        else:
            if 'ip' in request.POST:
                ip = request.POST['ip']
            else:
                ip = request.META.get('HTTP_X_FORWARDED_FOR', '') or request.META.get('REMOTE_ADDR')
            if ip != dns_record.ip:
                dns_record.ip = ip
                dns_record.save()
                updated = True
            data['domain'] = dns_record.domain
            data['ip'] = dns_record.ip
            data['last_change'] = dns_record.last_change.isoformat()
            data['updated'] = updated
            status = 200
    return HttpResponse(json.dumps(data), mimetype="application/json", status=status)

########NEW FILE########
__FILENAME__ = manage
#!/usr/bin/env python
import os
import sys

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "sampleproject.settings")

    from django.core.management import execute_from_command_line

    execute_from_command_line(sys.argv)

########NEW FILE########
__FILENAME__ = settings
"""
Django settings for sampleproject project.

For more information on this file, see
https://docs.djangoproject.com/en/1.6/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.6/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
BASE_DIR = os.path.dirname(os.path.dirname(__file__))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.6/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'o6hk&s9ffvgn5g3k$))i=@7k16g#ai@oom4m#d)bw(oumpp022'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

TEMPLATE_DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'dynamicdns',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
)

ROOT_URLCONF = 'sampleproject.urls'

WSGI_APPLICATION = 'sampleproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.6/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Internationalization
# https://docs.djangoproject.com/en/1.6/topics/i18n/

LANGUAGE_CODE = 'en-gb'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.6/howto/static-files/

STATIC_URL = '/static/'


DYNAMICDNS_PROVIDERS = {
    'dummy': {
        'plugin': 'dynamicdns.plugins.Dummy',
    },
    'rackspace': {
        'plugin': 'dynamicdns.plugins.Rackspace',
        'username': 'YOUR_USERNAME',
        'api_key': 'YOUR_API_KEY',
    },
    'digitalocean': {
        'plugin': 'dynamicdns.plugins.DigitalOcean',
        'client_id': 'YOUR_CLIENT_ID',
        'api_key': 'YOUR_API_KEY',
    },
}

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls import patterns, include, url
from django.contrib import admin


admin.autodiscover()

urlpatterns = patterns('',
    # Examples:
    # url(r'^$', 'sampleproject.views.home', name='home'),
    # url(r'^blog/', include('blog.urls')),

    url(r'^dynamicdns/', include('dynamicdns.urls')),
    url(r'^admin/', include(admin.site.urls)),
)

########NEW FILE########
__FILENAME__ = wsgi
"""
WSGI config for sampleproject project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/1.6/howto/deployment/wsgi/
"""

import os
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "sampleproject.settings")

from django.core.wsgi import get_wsgi_application
application = get_wsgi_application()

########NEW FILE########
