####For Ubuntu 12.04 Users.

Download these files and run:

sudo sh Quick_install.sh *-- out of date, see Update*

It will install a bunch of packages that are often used in IPython and create
three shortcuts on your desktop.  You may want to edit the path in the IPython 
shorcuts to reflect the directory you want to store your notebooks in. 
Additionally, you will have to manually change the appearance of the icons of 
the shortcuts.  This is done by right clicking on the icon->properties->click on 
the current icon and slect a new one.  Two icons images are among the files 
here.

(Still needs work buts gets most of the big stuff.)

####New Stuff:

The files:

* IPython_dir.py
* IPython3_dir.py

Will open up file dialog boxes which you can use to open IPython in a particular 
directory.  You will need to edit them to set your default path.

You still need to use Stop IPython Notebook.sh when you are done to close all of
the IPython processes.

####Update: 

Quick_install.sh is now out of date with the release of IPython 1.1 but a lot of
the packages it installs still need to be installed.  My current procedure uses 
the following apt-get commands.  I am not sure all are necessary and some might 
be missing but I'm 95% sure...

    sudo add-apt-repository ppa:fkrull/deadsnakes
    sudo apt-get update
    sudo apt-get install python-software-properties
    sudo apt-get install python3.3
    sudo apt-get install pandoc g++
    sudo apt-get install python-pip python-zmq python-jinja2 python-pygments
    sudo pip install tornado

    sudo pip install sphinx # to get the latest version of sphinx for nbconvert

    sudo apt-get install curl python3-zmq python3-jinja2 python3-pygments python3-sphinx python3-setuptools

    sudo cp /usr/bin/pip /usr/local/bin/pip-2.7 # needed to not lose pip-2.7

    curl -O https://raw.github.com/pypa/pip/master/contrib/get-pip.py
    sudo python3.2 get-pip.py
    sudo pip-3.2 install tornado
    sudo pip-3.2 install sympy # optional for using sympy
    sudo easy_install -U distribute
    sudo apt-get install freetype* 
    sudo apt-get install python-dev
    sudo apt-get install python3-dev
    sudo add-apt-repository ppa:takluyver/python3
    sudo apt-get update
    sudo apt-get install python-matplotlib
    sudo apt-get install python3-matplotlib
    
    sudo apt-get install texlive # for nbconvert
    
    sudo apt-get install python-pyside # for my menu programs
    sudo apt-get install python3-pyside # for my menu programs
    
    sudo apt-get install mayavi2      # for a personal project
    sudo apt-get install python-scipy
    sudo apt-get install python3-scipy
    sudo apt-get install python-sympy
    sudo apt-get install python3-sympy # already installed above
    
    download the latest sympy from https://github.com/sympy/sympy/releases
    install it from sorce code via
    sudo python setup.py install
    sudo python3 setup.py install
    
I also downloaded the IPython source files and installed it with the two following commands:

    sudo python setup.py install
    sudo python3 setup.py install

However I guess I could have used these instead:

    sudo pip-2.7 install ipython
    sudo pip-3.2 install ipython # might not have installed IPython for Python3.3

I'm also not sure if these would have installed the IPython Notebook.

####Trouble Shooting

The easiest way to find out why something doesn't work is to run the command from the terminal 
and read the error messages to determine what packages are missing and/or what commands have 
errors in them.

###Final Note on Executing Scripts and Programs

In order to be able to run a script by clicking on it you will need to enable nautilus within dconfg-editor.
The followinf instructions were written by Basharat Sial [here](http://askubuntu.com/questions/138908/how-to-execute-a-script-just-by-double-clicking-like-exe-files-in-windows).

	Hit Alt+F2, type dconf-editor and hit Enter.
	In dconfg-editor goto: org ➤ gnome ➤ nautilus ➤ preferences
	Click on executable-text-activation and from drop down menu select:
	launch: to launch scripts as programs.
	OR
	ask: to ask what to do via a dialog.
	Close dconf-editor. Thats it!

Useful IPython Notebooks and Related Code
========================

This is a list of projects/links I have found useful for quick referance examples.

####Referances and collections
* [IPython Official Notebook Collection](https://github.com/ipython/ipython/tree/master/examples/notebooks#a-collection-of-notebooks-for-using-ipython-effectively)
* [A gallery of interesting IPython Notebooks](https://github.com/ipython/ipython/wiki/A-gallery-of-interesting-IPython-Notebooks)
* [Markdown Reference](http://daringfireball.net/projects/markdown/)

####Tutorials
#####Basic Programming Education
* [Python Programming for the Humanities](https://github.com/fbkarsdorp/python-course#python-programming-for-the-humanities)
* [Lectures introducing scientific computing with Python using IPython](https://github.com/jrjohansson/scientific-python-lectures#lectures-on-scientific-computing-with-python)
* [IPython - beyond plain Python](http://nbviewer.ipython.org/urls/raw.github.com/ipython/ipython-in-depth/master/notebooks/IPython%20-%20beyond%20plain%20Python.ipynb)
* [Tracebacks - working with error messages](http://nbviewer.ipython.org/4152326/)
* [Python - the quick tutorial](http://nbviewer.ipython.org/4152314/)
* [An introduction to NumPy](http://nbviewer.ipython.org/url/mentat.za.net/numpy/pydata/pydata2012_nyc_numpy.ipynb)
* [A Crash Course in Python for Scientists](http://nbviewer.ipython.org/5920182)
    * [...for IPython3](http://nbviewer.ipython.org/5924718)

#####Machine Learning
* [Machine learning with scikit-learn](http://scikit-learn.org/stable/)
* [Scikit-learn tutorial](https://github.com/amueller/tutorial_ml_gkbionics#tutorial_ml_gkbionics)
* [Scikit-image and other scikits](http://scikits.scipy.org/scikits)
* [SimpleCV computer vision](http://www.reddit.com/r/IPython/comments/1e4ojm/simplecv_computer_vision_tutorial_using_ipython/)

#####Web Scraping and Data Mining
* [Mining the Social Web, (2nd Edition)](https://github.com/ptwobrussell/Mining-the-Social-Web-2nd-Edition#mining-the-social-web-2nd-edition)
* [Webscraping example](http://nbviewer.ipython.org/4743272)
* [Learn Pandas](https://bitbucket.org/hrojas/learn-pandas)

#####Data Presentation
Audible
* [Csound Tutorial](http://nbviewer.ipython.org/5535792)
* [The sound Of Hydrogen](http://nbviewer.ipython.org/urls/raw.github.com/Carreau/posts/master/07-the-sound-of-hydrogen.ipynb)
* [Browsercast - embedding audio in a notebook](https://github.com/wolever/browsercast)

Visual
* [d3js in IPython](http://nbviewer.ipython.org/4484816/ipyD3sample.ipynb)
* [Learn Pandas (repeated from above)](https://bitbucket.org/hrojas/learn-pandas)
* [Matplotlib Gallery](http://matplotlib.org/gallery.html)

#####More Advanced Programming Education
* [Treating notebooks as a library](http://nbviewer.ipython.org/5491090/analysis.ipynb)
* [IPython extension index](https://github.com/ipython/ipython/wiki/Extensions-Index)
* [Numba: 1400x Speedup of Python code in a single line](http://jakevdp.github.io/blog/2013/06/15/numba-vs-cython-take-2/)
* [Python Descriptors Demystified](http://nbviewer.ipython.org/urls/gist.github.com/ChrisBeaumont/5758381/raw/descriptor_writeup.ipynb)
* [A Primer on Python Metaclasses](http://jakevdp.github.io/blog/2012/12/01/a-primer-on-python-metaclasses/)
* [PyData 2013: Advanced Matplotlib](https://github.com/jakevdp/matplotlib_pydata2013?source=c#pydata-2013-advanced-matplotlib)

Interesting Examples
========================
* [Motion-activated camera with Raspberry Pi ](http://nbviewer.ipython.org/5588279)
* [Plotting Arduino Analog Data in IPython Notebook](http://nbviewer.ipython.org/5721739)
* [Diplaying Chemical Compounds](http://www.reddit.com/r/IPython/comments/1fxxpj/chemistry_and_the_rdkit_library/)
* [Javascript Animation](http://nbviewer.ipython.org/urls/raw.github.com/jakevdp/JSAnimation/master/animation_example.ipynb)
* [Carpentry](http://nbviewer.ipython.org/5743962)
* [Timeit magic](http://nbviewer.ipython.org/5978528)
* [%timeit Magic vs timeit Module (Also timeit HTML Table)](http://nbviewer.ipython.org/urls/github.com/damontallen/Timeit_magic_vs_module/raw/master/timeit_magic_vs_timeit_module.ipynb)
* [Examples of plotting (multi-)colored lines](http://nbviewer.ipython.org/urls/raw.github.com/dpsanders/matplotlib-examples/master/colorline.ipynb)

Other Resources
========================
* [Python Package Index](https://pypi.python.org/pypi?%3Aaction=browse)
* [IPython dev meetings on hackpad](https://hackpad.com/IPython-dev-meetings-6wTSjJt7TZK)
* [IPython sub-reddit](http://www.reddit.com/r/IPython/)
* [IPython.org](http://ipython.org/)
* [IPython in depth - Notebooks](https://github.com/ipython/ipython-in-depth/tree/master/notebooks)
    * [IPython in-depth: high-productivity interactive and parallel python Lecture (2:48:47)](http://pyvideo.org/video/1652/ipython-in-depth-high-productivity-interactive-a-0)
* [IPython Ubuntu PPA](https://launchpad.net/%7Ejtaylor/+archive/ipython)
* [Git tutorial](http://nbviewer.ipython.org/urls/github.com/fperez/reprosw/raw/master/Version%2520Control.ipynb)

IPython-quick-ref-sheets
========================

This project represents ongoing work developing quick reference sheets for IPython.  It is an
attempt to make several versions of the %quickref IPython magic output for ease
of access.

The final goal is to have versions that include .png, .html, .svg, and .pdf formats.

SVG Images
========================

###Basic Commands

![Basic help](http://damontallen.github.io/IPython-quick-ref-sheets/svg/Basic_Help.svg)

###Magic Commands
![Magic help](http://damontallen.github.io/IPython-quick-ref-sheets/svg/Magic_only.svg)

The IPython Notebook used to develop the SVG images is [here](http://nbviewer.ipython.org/urls/raw.github.com/damontallen/IPython-quick-ref-sheets/master/SVG_Table_Builder.ipynb).  It contains a custom magic command to grab the text of the %quickref magic command.
However, the libraries that the notebook references are only in this git page.

(FYI The SVG files above are also available for downloading on [this github.io page](http://damontallen.github.io/IPython-quick-ref-sheets/).)

Image Files
========================

These image files are from screenshots for the HTML version of the quick reference tables.

![ScreenShot](https://github.com/damontallen/IPython-quick-ref-sheets/raw/master/Basic_Help.png)
![ScreenShot2](https://github.com/damontallen/IPython-quick-ref-sheets/raw/master/Magic_only.png)


HTML Help Tables
========================

The HTML versions of the quick reference tables above were generated in the IPython 
notebook. They render correctly in Chrome, but they do not in
Firefox.  Despite this problem, for now, these HTML files could be modified by someone with
more experience to make them a good reference.
(I believe the problem is due to not specifying the font family but I haven't tried the modification yet.)

PDF Files
========================

The pdf versions were generated by printing out the HTML rendering from within 
Chrome.  Unfortunately, during the print process the color for the title and the 
headers was removed from the pdfs.  In the future I would like to automate this conversion from within 
the IPython notebook, or just Python with the aid of a HTML to pdf library.  I have not tried
generating the pdf using the SVG images yet.

Notebook
========================

The IPython notebook that generated the HTML files can be viewed [here](http://nbviewer.ipython.org/urls/github.com/damontallen/IPython-quick-ref-sheets/raw/master/Qick_ref_with_library.ipynb). It 
first takes the %quickref text and converts it to a dictionary with labels for the
title, headings, and comment lines, as well as the multiline examples.  A copy of
the dictionary is saved as a binary pickle and can be downloaded from this git.
The notebook goes on the generate HTML representations of the quickref text.

Quick Reference Text
========================

Originally the text file that this work is based on was generated from the IPython source code.  This
was done by downloading a copy of the source code from [here](https://github.com/ipython/ipython/downloads) and inserting the modification 
the "modification_code.py" code into the "basic.py" file.  It was inserted around line 380 to be able to 
add the %quickref_file magic command.  

Now a custom magic command, added at runtime in an IPython notebook, is used to generate the text.  
Since the magic is now used at run time, the resulting text no longer needs to be saved to a file.
The magic and insertion code is in the [SVG notebook](http://nbviewer.ipython.org/urls/raw.github.com/damontallen/IPython-quick-ref-sheets/master/SVG_Table_Builder.ipynb).


Other Thoughts
========================

[Another aproach](http://ubuntuone.com/6qEHHRVcJKd53TfEEpsCW1) was taken by Thomas Kluyver in which he manually developed
a quick referance sheet using Scribus. It looks better than the standard table currently rendered so in the future I 
would like to switch to that style.  I encourage anyone who wants to make that change, or any other improvements, to do so.
FYI, Inkscape is a open source vector graphics editor that could also be used to edit the SVG images above.

The use of the [webkit](http://www.webkit.org/) library may be a way around using Chrome to generate the png versions.

This [IPython Notebook](http://nbviewer.ipython.org/urls/github.com/damontallen/IPython-quick-ref-sheets/raw/master/SVG_Table_Class-lib%2520test.ipynb) contains experiemntal results building tables from SVG parts.

