__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# django-lazysignup documentation build configuration file, created by
# sphinx-quickstart on Fri Jun  8 04:44:46 2012.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = []

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'django-lazysignup'
copyright = u'2012, Dan Fairs'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '0.11.1'
# The full version, including alpha/beta/rc tags.
release = version

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'django-lazysignupdoc'


# -- Options for LaTeX output --------------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'django-lazysignup.tex', u'django-lazysignup Documentation',
   u'Dan Fairs', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'django-lazysignup', u'django-lazysignup Documentation',
     [u'Dan Fairs'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output ------------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'django-lazysignup', u'django-lazysignup Documentation',
   u'Dan Fairs', 'django-lazysignup', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

########NEW FILE########
__FILENAME__ = backends
from django.contrib.auth.backends import ModelBackend
from lazysignup.models import LazyUser


class LazySignupBackend(ModelBackend):

    def authenticate(self, username=None):
        user_class = LazyUser.get_user_class()
        try:
            return user_class.objects.get(username=username)
        except user_class.DoesNotExist:
            return None

    def get_user(self, user_id):
        # Annotate the user with our backend so it's always available,
        # not just when authenticate() has been called. This will be
        # used by the is_lazy_user filter.
        user_class = LazyUser.get_user_class()
        try:
            user = user_class.objects.get(pk=user_id)
        except user_class.DoesNotExist:
            user = None
        else:
            user.backend = 'lazysignup.backends.LazySignupBackend'
        return user

########NEW FILE########
__FILENAME__ = decorators
from functools import wraps
from django.conf import settings
from django.contrib.auth import SESSION_KEY
from django.contrib.auth import authenticate
from django.contrib.auth import get_user
from django.contrib.auth import login
from django.shortcuts import redirect
from django.utils.decorators import available_attrs
from lazysignup.utils import is_lazy_user

ALLOW_LAZY_REGISTRY = {}
USER_AGENT_BLACKLIST = []


def allow_lazy_user(func):
    def wrapped(request, *args, **kwargs):
        assert hasattr(request, 'session'), ("You need to have the session "
                                             "app intsalled")
        if getattr(settings, 'LAZYSIGNUP_ENABLE', True):
            # If the user agent is one we ignore, bail early
            ignore = False
            request_user_agent = request.META.get('HTTP_USER_AGENT', '')
            for user_agent in USER_AGENT_BLACKLIST:
                if user_agent.search(request_user_agent):
                    ignore = True
                    break

            # If there's already a key in the session for a valid user, then
            # we don't need to do anything. If the user isn't valid, then
            # get_user will return an anonymous user
            if get_user(request).is_anonymous() and not ignore:
                # If not, then we have to create a user, and log them in.
                from lazysignup.models import LazyUser
                user, username = LazyUser.objects.create_lazy_user()
                request.user = None
                user = authenticate(username=username)
                assert user, ("Lazy user creation and authentication "
                              "failed. Have you got "
                              "lazysignup.backends.LazySignupBackend in "
                              "AUTHENTICATION_BACKENDS?")
                # Set the user id in the session here to prevent the login
                # call cycling the session key.
                request.session[SESSION_KEY] = user.id
                login(request, user)
        return func(request, *args, **kwargs)

    return wraps(func)(wrapped)


def require_lazy_user(*redirect_args, **redirect_kwargs):
    def decorator(func):
        @wraps(func, assigned=available_attrs(func))
        def inner(request, *args, **kwargs):
            if is_lazy_user(request.user):
                return func(request, *args, **kwargs)
            else:
                return redirect(*redirect_args, **redirect_kwargs)
        return inner
    return decorator


def require_nonlazy_user(*redirect_args, **redirect_kwargs):
    def decorator(func):
        @wraps(func, assigned=available_attrs(func))
        def inner(request, *args, **kwargs):
            if not is_lazy_user(request.user):
                return func(request, *args, **kwargs)
            else:
                return redirect(*redirect_args, **redirect_kwargs)
        return inner
    return decorator

########NEW FILE########
__FILENAME__ = exceptions
class NotLazyError(TypeError):
    """ Raised when an operation is attempted on a non-lazy user """

########NEW FILE########
__FILENAME__ = forms
from django.contrib.auth.forms import UserCreationForm as UserCreationFormBase


class UserCreationForm(UserCreationFormBase):

    def get_credentials(self):
        return {
            'username': self.cleaned_data['username'],
            'password': self.cleaned_data['password1']}

########NEW FILE########
__FILENAME__ = remove_expired_users
import datetime
from django.conf import settings
from django.core.management.base import NoArgsCommand

from lazysignup.models import LazyUser


class Command(NoArgsCommand):
    help = u"""Remove all users whose sessions have expired and who haven't
               set a password. This assumes you are using database sessions"""

    def handle_noargs(self, **options):
        # Delete each of these users. We don't use the queryset delete()
        # because we want cascades to work (including, of course, the LazyUser
        # object itself)
        for lazy_user in self.to_delete():
            lazy_user.user.delete()

    def to_delete(self):
        delete_before = datetime.datetime.now() - datetime.timedelta(
            seconds=settings.SESSION_COOKIE_AGE)
        return LazyUser.objects.filter(
            user__last_login__lt=delete_before).select_related('user')

########NEW FILE########
__FILENAME__ = 0001_initial
# flake8: noqa
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'LazyUser'
        db.create_table('lazysignup_lazyuser', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['auth.User'], unique=True)),
        ))
        db.send_create_signal('lazysignup', ['LazyUser'])


    def backwards(self, orm):
        
        # Deleting model 'LazyUser'
        db.delete_table('lazysignup_lazyuser')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'lazysignup.lazyuser': {
            'Meta': {'object_name': 'LazyUser'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'unique': 'True'})
        }
    }

    complete_apps = ['lazysignup']

########NEW FILE########
__FILENAME__ = 0002_auto__add_field_lazyuser_created
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'LazyUser.created'
        db.add_column('lazysignup_lazyuser', 'created',
                      self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now, db_index=True),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'LazyUser.created'
        db.delete_column('lazysignup_lazyuser', 'created')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'lazysignup.lazyuser': {
            'Meta': {'object_name': 'LazyUser'},
            'created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'unique': 'True'})
        }
    }

    complete_apps = ['lazysignup']

########NEW FILE########
__FILENAME__ = models
import re
import uuid
from django.conf import settings
from django.db import models
try:
    from django.utils.timezone import now
except ImportError:
    import datetime
    now = datetime.datetime.now

from lazysignup.decorators import USER_AGENT_BLACKLIST
from lazysignup.exceptions import NotLazyError
from lazysignup.utils import is_lazy_user
from lazysignup.signals import converted

DEFAULT_BLACKLIST = (
    'slurp',
    'googlebot',
    'yandex',
    'msnbot',
    'baiduspider',
)

for user_agent in getattr(settings, 'LAZYSIGNUP_USER_AGENT_BLACKLIST',
    DEFAULT_BLACKLIST):
    USER_AGENT_BLACKLIST.append(re.compile(user_agent, re.I))


class LazyUserManager(models.Manager):

    username_field = 'username'

    def create_lazy_user(self):
        """ Create a lazy user. Returns a 2-tuple of the underlying User
        object (which may be of a custom class), and the username.
        """
        user_class = self.model.get_user_class()
        username = self.generate_username(user_class)
        user = user_class.objects.create_user(username, '')
        self.create(user=user)
        return user, username

    def convert(self, form):
        """ Convert a lazy user to a non-lazy one. The form passed
        in is expected to be a ModelForm instance, bound to the user
        to be converted.

        The converted ``User`` object is returned.

        Raises a TypeError if the user is not lazy.
        """
        if not is_lazy_user(form.instance):
            raise NotLazyError('You cannot convert a non-lazy user')

        user = form.save()

        # We need to remove the LazyUser instance assocated with the
        # newly-converted user
        self.filter(user=user).delete()

        converted.send(self, user=user)
        return user

    def generate_username(self, user_class):
        """ Generate a new username for a user
        """
        m = getattr(user_class, 'generate_username', None)
        if m:
            return m()
        else:
            max_length = user_class._meta.get_field(
                self.username_field).max_length
            return uuid.uuid4().hex[:max_length]


class LazyUser(models.Model):
    user = models.ForeignKey(
        getattr(settings, 'LAZYSIGNUP_USER_MODEL', 'auth.User'),
        unique=True)
    created = models.DateTimeField(default=now, db_index=True)
    objects = LazyUserManager()

    @classmethod
    def get_user_class(cls):
        return cls._meta.get_field('user').rel.to

########NEW FILE########
__FILENAME__ = signals
import django.dispatch

converted = django.dispatch.Signal(providing_args=['user'])


########NEW FILE########
__FILENAME__ = lazysignup_tags
from django.template import Library
from lazysignup.utils import is_lazy_user

register = Library()
is_lazy_user = register.filter(is_lazy_user)

########NEW FILE########
__FILENAME__ = tests
import datetime
import hashlib
import sys
from functools import wraps

from django.conf import settings
from django.core.urlresolvers import reverse, NoReverseMatch
from django.db import models
from django.http import HttpRequest, HttpResponse
from django.contrib.auth import SESSION_KEY, BACKEND_SESSION_KEY
from django.contrib.auth import authenticate
from django.contrib.auth import get_user
from django.contrib.auth import login
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import AnonymousUser
from django.contrib.auth.models import User
from django.contrib.auth.models import UserManager
from django.contrib.sessions.middleware import SessionMiddleware
from django.test import TestCase
from django.views.decorators.http import require_POST

try:
    from unittest import mock
except ImportError:
    import mock

from lazysignup.backends import LazySignupBackend
from lazysignup.decorators import (allow_lazy_user, require_lazy_user,
    require_nonlazy_user)
from lazysignup.exceptions import NotLazyError
from lazysignup.management.commands import remove_expired_users
from lazysignup.models import LazyUser
from lazysignup.utils import is_lazy_user
from lazysignup.signals import converted

_missing = object()


class GoodUserCreationForm(UserCreationForm):
    """ Hardcoded credentials to demonstrate that the get_credentials method
    is being used
    """
    def get_credentials(self):
        return {
            'username': 'demo',
            'password': 'demo',
        }

    def save(self, commit=True):
        instance = super(GoodUserCreationForm, self).save(commit=False)
        creds = self.get_credentials()
        instance.username = creds['username']
        instance.set_password(creds['password'])
        if commit:
            instance.save()
        return instance


def view(request):
    r = HttpResponse()
    if request.user.is_authenticated():
        r.status_code = 500
    return r


@allow_lazy_user
def lazy_view(request):
    r = HttpResponse()
    if request.user.is_anonymous() or request.user.has_usable_password():
        r.status_code = 500
    return r


@require_lazy_user("view-for-nonlazy-users")
def requires_lazy_view(request):
    return HttpResponse()


@require_nonlazy_user("view-for-lazy-users")
def requires_nonlazy_view(request):
    return HttpResponse()


def no_lazysignup(func):
    def wrapped(*args, **kwargs):
        if hasattr(settings, 'LAZYSIGNUP_ENABLE'):
            old = settings.LAZYSIGNUP_ENABLE
        else:
            old = _missing
        settings.LAZYSIGNUP_ENABLE = False
        try:
            result = func(*args, **kwargs)
        finally:
            if old is _missing:
                delattr(settings, 'LAZYSIGNUP_ENABLE')
            else:
                settings.LAZYSIGNUP_ENABLE = old
        return result
    return wraps(func)(wrapped)


class CustomUser(User):
    objects = UserManager()
    my_custom_field = models.CharField(max_length=50, blank=True, null=True)
    custom_username = models.CharField(max_length=35)


class LazyTestCase(TestCase):

    def setUp(self):
        self.request = HttpRequest()
        SessionMiddleware().process_request(self.request)

        # We have to save the session to cause a session key to be generated.
        self.request.session.save()

    @mock.patch('django.core.urlresolvers.RegexURLResolver.resolve')
    def test_session_already_exists(self, mock_resolve):
        # If the user id is already in the session, this decorator should do
        # nothing.
        f = allow_lazy_user(lambda request: 1)
        user = User.objects.create_user('test', 'test@test.com', 'test')
        self.request.user = AnonymousUser()
        login(self.request, authenticate(username='test', password='test'))
        mock_resolve.return_value = (f, None, None)

        f(self.request)
        self.assertEqual(user, self.request.user)

    @mock.patch('django.core.urlresolvers.RegexURLResolver.resolve')
    def test_bad_session_already_exists(self, mock_resolve):
        # If the user id is already in the session, but the user doesn't
        # exist, then a user should be created
        f = allow_lazy_user(lambda request: 1)
        self.request.session[SESSION_KEY] = 1000
        mock_resolve.return_value = (f, None, None)

        f(self.request)
        self.assertFalse(self.request.user.username is None)
        self.assertEqual(False, self.request.user.has_usable_password())

    @mock.patch('django.core.urlresolvers.RegexURLResolver.resolve')
    def test_create_lazy_user(self, mock_resolve):
        # If there isn't a setup session, then this middleware should create a
        # user with a random username and an unusable password.
        f = allow_lazy_user(lambda request: 1)
        mock_resolve.return_value = (f, None, None)
        f(self.request)
        self.assertFalse(self.request.user.username is None)
        self.assertEqual(False, self.request.user.has_usable_password())

    @mock.patch('django.core.urlresolvers.RegexURLResolver.resolve')
    def test_banned_user_agents(self, mock_resolve):
        # If the client's user agent matches a regex in the banned
        # list, then a user shouldn't be created.
        self.request.META['HTTP_USER_AGENT'] = 'search engine'
        f = allow_lazy_user(lambda request: 1)
        mock_resolve.return_value = (f, None, None)

        f(self.request)
        self.assertFalse(hasattr(self.request, 'user'))
        self.assertEqual(0, len(User.objects.all()))

    def test_normal_view(self):
        # Calling our undecorated view should *not* create a user. If one is
        # created, then the view will set the status code to 500.
        response = self.client.get('/nolazy/')
        self.assertEqual(200, response.status_code)

    def test_decorated_view(self):
        # Calling our undecorated view should create a user. If one is
        # created, then the view will set the status code to 500.
        self.assertEqual(0, len(User.objects.all()))
        response = self.client.get('/lazy/')
        self.assertEqual(200, response.status_code)
        self.assertEqual(1, len(User.objects.all()))

    def test_remove_expired_users_uses_lazy_model(self):
        # remove_expired_users used to be hardcoded to look for an unusable
        # password and the Django user model. Make sure that it actually
        # uses the LazyUser mechanism.
        User.objects.create_user('dummy2', '')
        user, _ = LazyUser.objects.create_lazy_user()
        user.last_login = datetime.datetime(1972, 1, 1)
        user.save()
        c = remove_expired_users.Command()
        c.handle()
        users = User.objects.all()
        self.assertEqual(1, len(users))
        self.assertEqual('dummy2', users[0].username)

    def test_remove_expired_users_session_cookie_age(self):
        # The remove_expired_users should look at SESSION_COOKIE_AGE to figure
        # out whether to delete users. It will delete users who have not
        # logged in since datetime.datetime.now - SESSION_COOKIE_AGE.
        user1, _ = LazyUser.objects.create_lazy_user()
        user2, _ = LazyUser.objects.create_lazy_user()
        user1.last_login = datetime.datetime(1972, 1, 1)
        user1.save()
        c = remove_expired_users.Command()
        c.handle()
        users = User.objects.all()
        self.assertEqual(1, len(users))
        self.assertEqual(user2.username, users[0].username)

    def test_convert_ajax(self):
        # Calling convert with an AJAX request should result in a 200
        self.client.get('/lazy/')
        response = self.client.post('/convert/', {
            'username': 'demo',
            'password1': 'password',
            'password2': 'password',
        }, HTTP_X_REQUESTED_WITH='XMLHttpRequest')
        self.assertEqual(200, response.status_code)

        users = User.objects.all()
        self.assertEqual(1, len(users))
        self.assertEqual('demo', users[0].username)

        # We should find that the auth backend used is no longer the
        # Lazy backend, as the conversion should have logged the new
        # user in.
        self.assertNotEqual('lazysignup.backends.LazySignupBackend',
            self.client.session[BACKEND_SESSION_KEY])

    def test_convert_custom_template(self):
        # Check a custom template is used, if specified.
        response = self.client.get('/custom_convert/')
        self.assertEqual(['lazysignup/done.html'],
            [t.name for t in response.templates])

    def test_convert_ajax_custom_template(self):
        # If a custom ajax template is provided, then it should be used when
        # rendering an ajax GET of the convert view. (Usually, this would be
        # a 'chromeless' version of the regular template)
        response = self.client.get('/custom_convert_ajax/',
            HTTP_X_REQUESTED_WITH='XMLHttpRequest')
        self.assertEqual(['lazysignup/done.html'],
            [t.name for t in response.templates])

    def test_convert_non_ajax(self):
        # If it's a regular web browser, we should get a 301.
        self.client.get('/lazy/')
        response = self.client.post('/convert/', {
            'username': 'demo',
            'password1': 'password',
            'password2': 'password',
        })
        self.assertEqual(302, response.status_code)

        users = User.objects.all()
        self.assertEqual(1, len(users))
        self.assertEqual('demo', users[0].username)

    def test_convert_mismatched_passwords_ajax(self):
        self.client.get('/lazy/')
        response = self.client.post('/convert/', {
            'username': 'demo',
            'password1': 'password',
            'password2': 'passwordx',
        }, HTTP_X_REQUESTED_WITH='XMLHttpRequest')
        self.assertEqual(400, response.status_code)
        self.assertFalse(response.content.find(b'password') == -1)
        users = User.objects.all()
        self.assertEqual(1, len(users))
        self.assertNotEqual('demo', users[0].username)

    def test_user_exists_ajax(self):
        User.objects.create_user('demo', '', 'foo')
        self.client.get('/lazy/')
        response = self.client.post('/convert/', {
            'username': 'demo',
            'password1': 'password',
            'password2': 'password',
        }, HTTP_X_REQUESTED_WITH='XMLHttpRequest')
        self.assertEqual(400, response.status_code)
        self.assertFalse(response.content.find(b'username') == -1)

    def test_convert_mismatched_no_ajax(self):
        self.client.get('/lazy/')
        response = self.client.post('/convert/', {
            'username': 'demo',
            'password1': 'password',
            'password2': 'passwordx',
        })
        self.assertEqual(200, response.status_code)
        self.assertFalse(response.content.find(b'password') == -1)
        users = User.objects.all()
        self.assertEqual(1, len(users))
        self.assertNotEqual('demo', users[0].username)

    def test_user_exists_no_ajax(self):
        User.objects.create_user('demo', '', 'foo')
        self.client.get('/lazy/')
        response = self.client.post('/convert/', {
            'username': 'demo',
            'password1': 'password',
            'password2': 'password',
        })
        self.assertEqual(200, response.status_code)
        self.assertFalse(response.content.find(b'username') == -1)

    def test_convert_existing_user_ajax(self):
        User.objects.create_user('dummy', 'dummy@dummy.com', 'dummy')
        self.client.login(username='dummy', password='dummy')
        response = self.client.post('/convert/', {
            'username': 'demo',
            'password1': 'password',
            'password2': 'password',
        }, HTTP_X_REQUESTED_WITH='XMLHttpRequest')
        self.assertEqual(400, response.status_code)

    def test_convert_existing_user_no_ajax(self):
        User.objects.create_user('dummy', 'dummy@dummy.com', 'dummy')
        self.client.login(username='dummy', password='dummy')
        response = self.client.post('/convert/', {
            'username': 'demo',
            'password1': 'password',
            'password2': 'password',
        })
        self.assertEqual(302, response.status_code)

    def test_get_convert(self):
        self.client.get('/lazy/')
        response = self.client.get('/convert/')
        self.assertEqual(200, response.status_code)

    def test_get_convert_via_ajax(self):
        # Load convert.html via AJAX
        self.client.get('/lazy/')
        response = self.client.get(reverse('lazysignup_convert'),
                                   HTTP_X_REQUESTED_WITH='XMLHttpRequest')
        self.assertEqual(200, response.status_code)

    @no_lazysignup
    def test_convert_anon(self):
        # If the Convert view gets an anonymous user, it should redirect
        # to the login page. Not much else it can do!
        response = self.client.get('/convert/')
        self.assertEqual(302, response.status_code)
        self.assertEqual('http://testserver' + settings.LOGIN_URL,
            response['location'])

    def test_conversion_keeps_same_user(self):
        self.client.get('/lazy/')
        self.client.post('/convert/', {
            'username': 'demo',
            'password1': 'password',
            'password2': 'password',
        })
        self.assertEqual(1, len(User.objects.all()))

    @no_lazysignup
    def test_no_lazysignup_decorator(self):
        response = self.client.get('/lazy/')
        self.assertEqual(500, response.status_code)

    def test_bad_custom_convert_form(self):
        # Passing a form class to the conversion view that doesn't have
        # a get_credentials method should raise an AttributeError
        self.assertRaises(AttributeError, self.client.post,
            reverse('test_bad_convert'), {
                'username': 'demo',
                'password1': 'password',
                'password2': 'password',
            })

    def test_good_custom_convert_form(self):
        self.client.get('/lazy/')
        self.client.post(reverse('test_good_convert'), {
            'username': 'foo',
            'password1': 'password',
            'password2': 'password',
        })
        users = User.objects.all()
        self.assertEqual(1, len(users))
        user = users[0]

        # The credentials returned by get_credentials should have been used
        self.assertEqual(user, authenticate(username='demo', password='demo'))

        # The user should no longer be lazy
        self.assertFalse(is_lazy_user(user))

    def test_username_not_based_on_session_key(self):
        # The generated username should not look like the session key. While
        # doing so isn't a security problem in itself, any client software
        # that blindly displays the logged-in user's username risks showing
        # most of the session key to the world.
        session_key = self.request.session.session_key
        assert session_key
        user, username = LazyUser.objects.create_lazy_user()
        self.assertFalse(session_key.startswith(username))

    def test_created_date(self):
        # Check that a lazy user has a created field.
        user, username = LazyUser.objects.create_lazy_user()
        lazy_user = LazyUser.objects.get(user=user)
        self.assertFalse(lazy_user.created is None)

    def test_decorator_order(self):
        # It used to be the case that allow_lazy_user had to be first in the
        # decorator list. This is no longer the case.
        self.request.user = AnonymousUser()
        self.request.method = 'POST'
        v = require_POST(lazy_view)

        response = v(self.request)
        self.assertEqual(200, response.status_code)

    def test_is_lazy_user_anonymous(self):
        user = AnonymousUser()
        self.assertEqual(False, is_lazy_user(user))

    def test_is_lazy_user_model_backend(self):
        user = User.objects.create_user('dummy', 'dummy@dummy.com', 'dummy')
        self.assertEqual(False, is_lazy_user(user))

    def test_is_lazy_user_unusable_password(self):
        user = User.objects.create_user('dummy', 'dummy@dummy.com')
        self.assertEqual(False, is_lazy_user(user))

    def test_is_lazy_user_lazy(self):
        self.request.user = AnonymousUser()
        lazy_view(self.request)
        self.assertEqual(True, is_lazy_user(self.request.user))

    def test_lazy_user_not_logged_in(self):
        # Check that the is_lazy_user works for users who were created
        # lazily but are not the current logged-in user
        user, username = LazyUser.objects.create_lazy_user()
        self.assertTrue(is_lazy_user(user))

    def test_anonymous_not_lazy(self):
        # Anonymous users are not lazy
        self.assertFalse(is_lazy_user(AnonymousUser()))

    def test_backend_get_user_annotates(self):
        # Check that the lazysignup backend annotates the user object
        # with the backend, mirroring what Django's does
        lazy_view(self.request)
        backend = LazySignupBackend()
        pk = User.objects.all()[0].pk
        self.assertEqual('lazysignup.backends.LazySignupBackend',
            backend.get_user(pk).backend)

    def test_bad_session_user_id(self):
        self.request.session[SESSION_KEY] = 1000
        self.request.session[BACKEND_SESSION_KEY] = \
            'lazysignup.backends.LazySignupBackend'
        lazy_view(self.request)

    def test_convert_good(self):
        # Check that the convert() method on the lazy user manager
        # correctly converts the lazy user
        user, username = LazyUser.objects.create_lazy_user()
        d = {
            'username': 'test',
            'password1': 'password',
            'password2': 'password',
        }
        form = GoodUserCreationForm(d, instance=user)
        self.assertTrue(form.is_valid())

        user = LazyUser.objects.convert(form)
        self.assertFalse(is_lazy_user(user))

    def test_convert_non_lazy(self):
        # Attempting to convert a non-lazy user should raise a TypeError
        user = User.objects.create_user('dummy', 'dummy@dummy.com', 'dummy')
        form = GoodUserCreationForm(instance=user)
        self.assertRaises(NotLazyError, LazyUser.objects.convert, form)

    def test_user_field(self):
        # We should find that our LAZSIGNUP_CUSTOM_USER setting has been
        # respected.
        self.assertEqual(CustomUser, LazyUser.get_user_class())

    def test_authenticated_user_class(self):
        # We should find that the class of request.user is that of
        # LAZSIGNUP_CUSTOM_USER
        request = HttpRequest()
        request.user = AnonymousUser()
        SessionMiddleware().process_request(request)
        lazy_view(request)
        self.assertEqual(CustomUser, type(request.user))

    def test_backend_get_custom_user_class(self):
        # The get_user method on the backend should also return instances of
        # the custom user class.
        lazy_view(self.request)
        backend = LazySignupBackend()
        user_class = LazyUser.get_user_class()
        pk = user_class.objects.all()[0].pk
        self.assertEqual(user_class, type(backend.get_user(pk)))

    def test_session_name_conflict(self):
        # Test for issue #6. If a user object exists with the same name as
        # the sha-1 hash of the session id (well, the first
        # username.max_length characters thereof) then we should not see an
        # error when the user is created. This was actually fixed by changing
        # the mechanism to associate a lazy user with a session.

        # Calling get_user triggers a session key cycle the first time. Do it
        # now, so we can grab the final session key.
        get_user(self.request)
        key = self.request.session.session_key
        username = hashlib.sha1(key.encode('ascii')).hexdigest()[:30]
        User.objects.create_user(username, '')
        r = lazy_view(self.request)
        self.assertEqual(200, r.status_code)

    def test_converted_signal(self):
        # The `converted` signal should be dispatched when a user is
        # successfully converted.
        user, username = LazyUser.objects.create_lazy_user()
        d = {
            'username': 'test',
            'password1': 'password',
            'password2': 'password',
        }
        form = GoodUserCreationForm(d, instance=user)
        # setup signal
        self.handled = False

        def handler(sender, **kwargs):
            self.assertEqual(kwargs['user'], user)
            self.handled = True
        converted.connect(handler)
        # convert user
        user = LazyUser.objects.convert(form)
        # check signal
        self.assertTrue(self.handled)

    def test_lazy_user_enters_requires_lazy_decorator(self):
        self.request.user, _ = LazyUser.objects.create_lazy_user()
        response = requires_lazy_view(self.request)
        self.assertEqual(response.status_code, 200)

    def test_lazy_user_enters_requires_nonlazy_decorator(self):
        self.request.user, _ = LazyUser.objects.create_lazy_user()
        try:
            requires_nonlazy_view(self.request)
        except NoReverseMatch:
            e = sys.exc_info()[1]
            self.assertTrue("view-for-lazy-users" in e.args[0])

    def test_nonlazy_user_enters_requires_nonlazy_decorator(self):
        self.request.user = AnonymousUser()
        response = requires_nonlazy_view(self.request)
        self.assertEqual(response.status_code, 200)

    def test_nonlazy_user_enters_requires_lazy_decorator(self):
        self.request.user = AnonymousUser()
        try:
            requires_lazy_view(self.request)
        except NoReverseMatch:
            e = sys.exc_info()[1]
            self.assertTrue("view-for-nonlazy-users" in e.args[0])

########NEW FILE########
__FILENAME__ = urls
try:
    from django.conf.urls import patterns, url
except ImportError:
    from django.conf.urls.defaults import patterns, url

from django.views.generic import TemplateView

# URL patterns for lazysignup

urlpatterns = patterns('lazysignup.views',
    url(r'^$', 'convert', name='lazysignup_convert'),
    url(r'^done/$',
        TemplateView.as_view(template_name='lazysignup/done.html'),
        name='lazysignup_convert_done'),
)

########NEW FILE########
__FILENAME__ = utils
def is_lazy_user(user):
    """ Return True if the passed user is a lazy user. """
    # Anonymous users are not lazy.
    if user.is_anonymous():
        return False

    # Check the user backend. If the lazy signup backend
    # authenticated them, then the user is lazy.
    backend = getattr(user, 'backend', None)
    if backend == 'lazysignup.backends.LazySignupBackend':
        return True

    # Otherwise, we have to fall back to checking the database.
    from lazysignup.models import LazyUser
    return bool(LazyUser.objects.filter(user=user).count() > 0)

########NEW FILE########
__FILENAME__ = views
from django.conf import settings
from django.shortcuts import redirect, render_to_response
from django.http import HttpResponse
from django.http import HttpResponseRedirect
from django.http import HttpResponseBadRequest
from django.template import RequestContext
from django.utils.translation import ugettext_lazy as _

from django.contrib.auth import authenticate
from django.contrib.auth import login

from lazysignup.decorators import allow_lazy_user
from lazysignup.exceptions import NotLazyError
from lazysignup.forms import UserCreationForm
from lazysignup.models import LazyUser


@allow_lazy_user
def convert(request, form_class=UserCreationForm,
            redirect_field_name='redirect_to',
            anonymous_redirect=settings.LOGIN_URL,
            template_name='lazysignup/convert.html',
            ajax_template_name='lazysignup/convert_ajax.html'):
    """ Convert a temporary user to a real one. Reject users who don't
    appear to be temporary users (ie. they have a usable password)
    """
    redirect_to = 'lazysignup_convert_done'

    # If we've got an anonymous user, redirect to login
    if request.user.is_anonymous():
        return HttpResponseRedirect(anonymous_redirect)

    if request.method == 'POST':
        redirect_to = request.POST.get(redirect_field_name) or redirect_to
        form = form_class(request.POST, instance=request.user)
        if form.is_valid():
            try:
                LazyUser.objects.convert(form)
            except NotLazyError:
                # If the user already has a usable password, return a Bad
                # Request to an Ajax client, or just redirect back for a
                # regular client.
                if request.is_ajax():
                    return HttpResponseBadRequest(
                        content=_(u"Already converted."))
                else:
                    return redirect(redirect_to)

            # Re-log the user in, as they'll now not be authenticatable with
            # the Lazy backend
            login(request, authenticate(**form.get_credentials()))

            # If we're being called via AJAX, then we just return a 200
            # directly to the client. If not, then we redirect to a
            # confirmation page or to redirect_to, if it's set.
            if request.is_ajax():
                return HttpResponse()
            else:
                return redirect(redirect_to)

        # Invalid form, now check to see if is an ajax call
        if request.is_ajax():
            return HttpResponseBadRequest(content=str(form.errors))
    else:
        form = form_class()

    # If this is an ajax request, prepend the ajax template to the list of
    # templates to be searched.
    if request.is_ajax():
        template_name = [ajax_template_name, template_name]
    return render_to_response(template_name, {
            'form': form,
            'redirect_to': redirect_to
        }, context_instance=RequestContext(request))

########NEW FILE########
__FILENAME__ = manage
#!/usr/bin/env python
from django.core.management import execute_manager
import imp, os, sys


try:
    imp.find_module('settings') # Assumed to be in the same directory.
except ImportError:
    sys.stderr.write("Error: Can't find the file 'settings.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n" % __file__)
    sys.exit(1)

import settings

path = os.path.realpath(os.path.dirname(__file__))
sys.path.append(os.path.join(path, '..'))

if __name__ == "__main__":
    execute_manager(settings)

########NEW FILE########
__FILENAME__ = settings
# Settings to be used when running unit tests
# python manage.py test lazysignup

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3'
    }
}

INSTALLED_APPS = (
    # Put any other apps that your app depends on here
    'django.contrib.auth',
    'django.contrib.sessions',
    'django.contrib.contenttypes',
    'lazysignup',
)
SITE_ID = 1

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "lazysignup.backends.LazySignupBackend",
)

MIDDLEWARE_CLASSES = [
    "django.middleware.common.CommonMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
]

LAZYSIGNUP_USER_AGENT_BLACKLIST = [
    "^search",
]

ROOT_URLCONF = 'testproject.urls'
SECRET_KEY = 'non-empty-key'

LAZYSIGNUP_USER_MODEL = 'lazysignup.CustomUser'

########NEW FILE########
__FILENAME__ = urls
try:
    from django.conf.urls import patterns, url, include
except ImportError:
    from django.conf.urls.defaults import patterns, url, include
from django.contrib.auth.forms import UserCreationForm

from lazysignup.tests import GoodUserCreationForm

# URL test patterns for lazysignup. Use this file to ensure a consistent
# set of URL patterns are used when running unit tests.

urlpatterns = patterns('',
    (r'^convert/', include('lazysignup.urls')),
    (r'^custom_convert/', 'lazysignup.views.convert', {
        'template_name': 'lazysignup/done.html'
        }),
    (r'^custom_convert_ajax/', 'lazysignup.views.convert', {
        'ajax_template_name': 'lazysignup/done.html'
        }),
)

urlpatterns += patterns('lazysignup.tests',
    url(r'^nolazy/$', 'view', name='test_view'),
    url(r'^lazy/$', 'lazy_view', name='test_lazy_view'),
)

urlpatterns += patterns('lazysignup.views',
    url(r'^bad-custom-convert/$', 'convert', {
        'form_class': UserCreationForm}, name='test_bad_convert'),
    url(r'^good-custom-convert/$', 'convert', {
        'form_class': GoodUserCreationForm}, name='test_good_convert'),
)

########NEW FILE########
