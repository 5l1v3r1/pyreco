Author: Paul Lesiak

This directory includes three basic examples using the Python SDK.  The goal is to demonstrate proper usage of the API in modifying objects and creating application profiles programmatically.

Author: Xin Liu

This code sample demonstrates the NX-API to check connectivities on a switch.  
It uses the connectivity.json datafile as input and is intended to be run off-the-switch.

NX-API: exposes CLIs that traditionally run on the switch to the outside of the switch through HTTP/HTTPs. It is an extension to the existing CLI System on N9K. NX-API supports show commands, configurations as well as linux bash.

One can access the NXAPI through the following steps:
1. Do feature nxapi to enable NXAPI
2. Access the NXAPI sandbox page by pointing your browser to https://{mgmt-ip}
3. Refer to Documentation link for more info

We provide sample usages of NXAPI. The NXAPI sandbox page is expected to serve only as sandbox trying out the API and quickly check the API output. Users are expected to write easy scripts utilizing the HTTP transport.

The utils folder contains easy-to-use utility to use NXAPI

## NX-API Authentication with [Splunk's REST API Modular Input App](http://apps.splunk.com/app/1546/)

The NX-API authentication process can be described as follows:

 * All requests should include HTTP Web Basic Authentication - that includes requets that also have a cookie.
 * A request that does not have a cookie but does have HTTP Web Basic Authentication will cause the NX-API enabled device to go through a full authentication process using the PAM.  This is an expensive process for a network element (switch) so it should be avoided if possible.
 * Once the authentication is completed a cookie with the key `nxapi_auth` will be generated and included in the headers of the response.
 * When the client receives the response, the client should then send all requests with both HTTP Web Basic Authentication **AND** `nxapi_auth` the cookie.
 * If the NX-API enabled device sends a new cookie for any reason the client must be able to deal with that and be able to send the new cookie from that point forward.

### nx-api_authhandlers.py

nx-api_authhandlers.py - a custom authentication handler for Cisco's NX-API
to handle the nxapi_auth cookie to ensure that the cookie is loaded from a 
file and sent in a request so that basic authentication is not needed again.
Must be used in conjunction with a custom response handler that then
receives the the cookie in the response and saves it to the file.

This is accomplished by the response handler saving the cookie in a cookie
file in the (hopefully) platform agnostic way using the tempfile module to
do a tempfile.gettempdir() to find the directory and the file should be
specifically named the same as the REST API action configured on the splunk
server.

The required custom authentication handler configuration in the Rest API
action data input is as follows:

Custom Authentication Handler: ```NxApiAuthHandler```<br />
Custom Authentication Handler Required Arguments (comma separated):

    username=<username>
    password=<password>
    name=<name>

Where:

* ```username``` The username used to authenticate the user.
* ```password``` The password used to authenticate the user.
* ```name``` A unique name for the Rest API action configured as a data input, the common practice is to set this to the "Rest API Input Name" and this must match the name from the "Response Handler Arguments" configuration.

This custom authentication handler should be merged into: ```rest_ta/bin/authhandlers.py```

Tested with Splunk version 6.0 & Rest API Modular Input v1.3.2

### nx-api_responsehandlers.py

nx-api_responsehandlers.py - a custom response handler for Cisco's NX-API
to handle the nxapi_auth cookie to ensure that the cookie is saved from
the response so it can be persisted to the next request.  Must be used in
conjunction with a custom authentication handler that then retrieves the
cookie and sends it.

This is accomplished by saving the cookie in a cookie file in the
(hopefully) platform agnostic way using the tempfile module to do a 
tempfile.gettempdir() then create or overwrite a file in that directory
that is specifically named the same as the REST API action configured on
the splunk server.

The required custom response handler configuration in the Rest API action
data input is as follows:

>Custom Response Handler: ```NxApiResponseHandler```
>Custom Authentication Handler Required Arguments (comma separated):

    name=\<name> 

Where:

* ```name``` A unique name for the Rest API action configured as a data input, the common practice is to set this to the "Rest API Input Name" and this must match the name from the "Custom Authentication Handler Arguments" configuration. 

This response handler should be merged into:
    rest_ta/bin/responsehandlers.py

Tested with Splunk version 6.0 & Rest API Modular Input v1.3.2
    
### Debugging issues with this code

The only way I have found to get debugging output from Splunk and the [REST API Modular Input](http://apps.splunk.com/app/1546/) code is to set things up as follows:

 * Add the following to rest_ta/bin/rest.py and comment out the other logging code:
 ```python
 import logging
 logging.basicConfig() 
 logging.getLogger().setLevel(logging.DEBUG)
 requests_log = logging.getLogger("requests.packages.urllib3")
 requests_log.setLevel(logging.DEBUG)
 requests_log.propagate = True
 ```
 * Add the following to rest_ta/bin/authhanders.py and/or rest_ta/bin/responsehandlers.py:
 ```python
 #set up logging
 import logging
 logging.root
 logging.root.setLevel(logging.DEBUG)
 formatter = logging.Formatter('%(levelname)s %(message)s')
 #with zero args , should go to STD ERR
 handler = logging.StreamHandler()
 handler.setFormatter(formatter)
 logging.root.addHandler(handler)
 ```
 * Litter the code with:
 ```python
 logging.debug("This is a debug {0}".format("message")
 ```
 * Enable debug logging in Splunk system settings - (Splunk 6) Settings -> System -> System Settings -> System logging.  Search for ExecProcessor and change it to Debug.
 * Restart the Splunk server - Settings -> System -> Server controls: Restart Splunk
 * If you need to get more info out of exceptions you can import the traceback module into rest.py and print a traceback where `except Exception as e:` is used.

### Limitations and other information

* This is for the standalone Nexus 9000 products, it has no relation to ACI which is based on a different code and not yet available as of December 2013.
* The response handler represented here and the default response handler do not handle chunks.
* The response handler could return just the body if the response was a success but it does not for completeness.  This could be left to the user/adjusted with a nerd knob.
N9K Remote Python 

The Nexus 9000 family switches provide python objects to access switch resources. The python objects are on the switch. One can run python scripts using the objects on the switch. At the same time, we provide the capability to utilize the python objects off the switch based on NXAPI. 

Please note, the python objects on the switch access switch resources in two ways: access through cli and access through native library. We replaced the python objects that access resources through cli with NXAPI as underneath transport. For those python objects that access through native libraries, off-box is NOT supported yet.

Install instructions:
1. Make sure nxapi is running on your switch.
  
  SWITCH-1# conf
  SWITCH-1(config)# feature nxapi
  SWITCH-1(config)# show nxapi
  nxapi enabled
  Listen on port 80
  Listen on port 443

2. Obtain the Python objects in the "cisco" directory and make it a subdirectory of remote_client.  (This code will be coming to Github soon).  

Option 1: Copy them directly off the switch directly from /isan/python/scripts/cisco.  

Option 2: Download them from Cisco Developer Network.  http://developer.cisco.com/web/n9k/downloads 

3. See client_example.py for an example.  

Nexus 9000 Sample Python Scripts
------------------------

These scripts are intended to show very simple examples of what can be done with Python on the Nexus 9000 standalone switch.  Python on the Nexus 9000 standalone switch is very similar to python on just about any other Linux based system except it has some extra packages and modules to interact with NX-OS.

In addition to interact with NX-OS commands, you must import the cli module into the global name space in order to get access to the cli(), clip() and clid() functions, for example:

```python
from cli import *
clip('show version')
```

The cli functions work differently on the Nexus 9000 than they do on other NX-OS platforms.  When you execute a cli command using them, the context in which that cli command executes in is created and then destroyed for the life of the command.  So if you are doing commands that build state, go into command submodes (configuration for example) or otherwise build on top of eachother, you will need to execute the commands in a single cli function call and separate them with a space semicolon (' ;').  For example:

```python
from cli import *
cli('configure terminal ;interface loopback 231 ;ip address 10.10.10.1/24 ;shutdown')
```

The Nexus 9000 allows you to run Python scripts in many different ways:

- source scriptname : assuming the script is in bootflash:///scripts and has the proper shebang of #!/usr/bin/env python
- python scriptname : from the NX-OS commandline and Bash
- run bash python scriptname : assuming the bash shell feature is enabled and the user has permission to run bash
- run bash and then python scriptname
- run the script from an EEM policy action
- run the script from the scheduler
- run the script as a NX-OS command modifier, i.e. show version | source scriptname args
Nexus 9000 Community GitHub
=====================

Welcome to the GitHub Community for Nexus 9000.  This site is intended as a place for any users of Cisco Application-Centric Infrastructure (ACI) or NX-OS to share code and learn to build solutions.  While many of the initial contributions were created by Cisco employees, ANYONE is allowed and in fact encouraged to participate and share code.  Pull requests are monitored and reviewed by a group of administrators to maintain a level of quality and protect users consuming code as well.    

The site is structured into two sections:

- NX-OS: Focuses on the Nexus 9000 series of switches running enhanced Nexus OS.  These products include NX-API, Puppet, Chef, and shell scripts.  
- ACI: Focuses on the APIC and ACI Object Model.  This will include python, Puppet, and Chef.  Additioanlly, it will include application profiles, which are XML-based configurations that model applications, and southbound device automation scripts, which can be used to integrate 3rd party L4-7 devices.  

For detailed developer documentation, please visit http://developer.cisco.com/web/n9k.


