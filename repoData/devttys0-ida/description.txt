codatify.py
===========

Features
--------

  * Defines ASCII strings that IDA's auto analysis missed
  * Defines functions/code that IDA's auto analysis missed
  * Converts all undefined bytes in the data segment into DWORDs (thus allowing IDA to resolve function and jump table pointers)

Usage
-----

Blob of data before running codatify:

![Before codatify.py](../images/undefined_bytes.png)

Running codatify:

![Running codatify.py](../images/how_to_use_codatify.png)

Blob of data after running codatify:

![After codatify.py](../images/defined_bytes.png)

Installation
------------

Just copy codatify.py into your IDA *plugins* directory.

localxrefs.py
=============

Features
--------

  * Finds references to any selected text from within the current function

Usage
-----

Here's some MIPS code. Where does that $s2 register get set?

![Before localxrefs.py](../images/where_does_s2_get_set.png)

Running localxrefs:

![Running localxrefs.py](../images/how_to_run_localxrefs.png)

All references to $s2 in the current function are clearly listed:

![After localxrefs.py](../images/localxrefs_output.png)

And, these references can be highlighted in the disassembly view by running *localxrefs.highlight()* in IDA's Python terminal:

![Highlight localxrefs.py](../images/localxrefs_highlight.png)

(To un-highlight, run *localxrefs.unhighlight()*)

Installation
------------

Just copy localxrefs.py into your IDA *plugins* directory.

mipslocalvars.py
================

Features
--------

  * Names stack variables used by the compiler for storing registers on the stack, simplifying stack data analysis (MIPS only)

Usage
-----

A function's stack layout before running mipslocalvars:

![Before mipslocalvars.py](../images/before_mipslocalvars.png)

Running mipslocalvars:

![Running mipslocalvars.py](../images/how_to_run_mipslocalvars.png)

The function's stack layout after running mipslocalvars:

![After mipslocalvars.py](../images/after_mipslocalvars.png)

Installation
------------

Just copy mipslocalvars.py into your IDA *plugins* directory.

mipsrop.py
==========

Features
----------

  * Allows you to search for suitable ROP gadgets in MIPS executable code
  * Built-in methods to search for common ROP gadgets

Running mipsrop:

![Running mipsrop.py](../images/how_to_run_mipsrop.png)

Searching for ROP gadgets that put a stack address into the $a0 register:

![Using mipsrop.py](../images/mipsrop_find.png)

Listing a summary of marked ROP gadgets in the current IDB:

![Listing mipsrop.py](../images/mipsrop_summary.png)

Use *mipsrop.help()* to see all available options!

Installation
------------

Just copy mipsrop.py into your IDA *plugins* directory.

idapathfinder.py
================

Features
--------

  * Finds paths between two or more functions
  * Generates interactive call graphs
  * Fully scriptable

Installation
------------

Just copy idapathfinder.py into your IDA *plugins* directory, and pathfinder.py into your IDA *python* directory.

Or just use the included install.py installer.

IDA Plugins
===

Collection of IDA plugins that I've written to help with embedded RE work.
Unless otherwise specified, just drop the .py files into IDA's *plugins* directory.

codatify
--------

  * Defines ASCII strings that IDA's auto analysis missed
  * Defines functions/code that IDA's auto analysis missed
  * Converts all undefined bytes in the data segment into DWORDs (thus allowing IDA to resolve function and jump table pointers)

localxrefs
----------

  * Finds references from within the current function to any highlighted text

mipslocalvars
-------------

  * Names stack variables used by the compiler for storing registers on the stack, simplifying stack data analysis (MIPS only)

mipsrop
-------

  * Allows you to search for suitable ROP gadgets in MIPS executable code (MIPS only)

pathfinder
----------

  * Finds paths between two or more functions
  * Generates interactive call graphs
  * Fully scriptable

ida
===

Collection of IDA plugins/scripts.

