__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# django-localflavor documentation build configuration file, created by
# sphinx-quickstart on Sun Jun  2 17:56:28 2013.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.settings')

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
sys.path.insert(0, os.path.abspath('extensions'))
sys.path.insert(0, os.path.abspath('..'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.intersphinx',
              'sphinx.ext.todo', 'sphinx.ext.coverage', 'sphinx.ext.ifconfig',
              'sphinx.ext.viewcode', 'promises', 'settings']

# Add any paths that contain templates here, relative to this directory.
# templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'django-localflavor'
copyright = u'2013, Django Software Foundation and individual contributors'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
try:
    from localflavor import __version__
    # The short X.Y version.
    version = '.'.join(__version__.split('.')[:2])
    # The full version, including alpha/beta/rc tags.
    release = __version__
except ImportError:
    version = release = 'dev'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = ['_theme']

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'django-localflavordoc'


# -- Options for LaTeX output --------------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'django-localflavor.tex', u'django-localflavor Documentation',
   u'Django Software Foundation and individual contributors', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'django-localflavor', u'django-localflavor Documentation',
     [u'Django Software Foundation and individual contributors'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output ------------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'django-localflavor', u'django-localflavor Documentation',
   u'Django Software Foundation and individual contributors', 'django-localflavor', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False


# -- Options for Epub output ---------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = u'django-localflavor'
epub_author = u'Django Software Foundation and individual contributors'
epub_publisher = u'Django Software Foundation and individual contributors'
epub_copyright = u'2013, Django Software Foundation and individual contributors'

# The language of the text. It defaults to the language option
# or en if the language is not set.
#epub_language = ''

# The scheme of the identifier. Typical schemes are ISBN or URL.
#epub_scheme = ''

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#epub_identifier = ''

# A unique identification for the text.
#epub_uid = ''

# A tuple containing the cover image and cover page html template filenames.
#epub_cover = ()

# A sequence of (type, uri, title) tuples for the guide element of content.opf.
#epub_guide = ()

# HTML files that should be inserted before the pages created by sphinx.
# The format is a list of tuples containing the path and title.
#epub_pre_files = []

# HTML files shat should be inserted after the pages created by sphinx.
# The format is a list of tuples containing the path and title.
#epub_post_files = []

# A list of files that should not be packed into the epub file.
#epub_exclude_files = []

# The depth of the table of contents in toc.ncx.
#epub_tocdepth = 3

# Allow duplicate toc entries.
#epub_tocdup = True

# Fix unsupported image types using the PIL.
#epub_fix_images = False

# Scale large images.
#epub_max_image_width = 0

# If 'no', URL addresses will not be shown.
#epub_show_urls = 'inline'

# If false, no index is generated.
#epub_use_index = True


# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {
    'http://docs.python.org/': None,
    'django': ('http://docs.djangoproject.com/en/dev/',
               'http://docs.djangoproject.com/en/dev/_objects/'),
}

########NEW FILE########
__FILENAME__ = promises
try:
    from django.utils.encoding import force_unicode
except ImportError:
    # We are on Python 3, force_text is force_unicode.
    from django.utils.encoding import force_text as force_unicode

from django.utils.functional import Promise

from sphinx.util.inspect import safe_repr

list_or_tuple = lambda x: isinstance(x, (tuple, list))


def lazy_repr(obj):
    if list_or_tuple(obj):
        values = []
        for item in obj:
            values.append(lazy_repr(item))
        if isinstance(obj, tuple):
            values = tuple(values)
        return values
    else:
        if isinstance(obj, Promise):
            obj = force_unicode(obj)
        return obj


def setup(app):
    from sphinx.ext import autodoc

    def lazy_safe_repr(obj):
        items = lazy_repr(obj)
        repr_list = []

        if list_or_tuple(items):
            repr_list.append('(')
            items_length = len(items)
            for i, item in enumerate(items, 1):

                if list_or_tuple(item):
                    item_repr_list = ['(']
                    item_length = len(item)
                    for j, x in enumerate(item, 1):
                        if isinstance(x, int):
                            x_repr = '%s' % x
                        else:
                            x_repr = "'%s'" % x
                        if j == item_length:
                            item_repr_list.append("%s" % x_repr)
                        else:
                            item_repr_list.append("%s, " % x_repr)

                    if i == items_length:
                        item_repr_list.append(')')
                    else:
                        item_repr_list.append('), ')

                else:
                    if isinstance(item, int):
                        item_repr = '%s' % item
                    else:
                        item_repr = "'%s'" % item
                    item_repr_list = ["'%s'" % item_repr]

                repr_list.append(''.join(item_repr_list))

            repr_list.append(')')

            return ''.join(repr_list)

        return safe_repr(obj)

    autodoc.safe_repr = lazy_safe_repr  # noqa

########NEW FILE########
__FILENAME__ = settings
def setup(app):
    app.add_crossref_type(
        directivename="setting",
        rolename="setting",
        indextemplate="pair: %s; setting",
    )

########NEW FILE########
__FILENAME__ = ar_provinces
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.utils.translation import ugettext_lazy as _

#: A list of Argentinean provinces and autonomous cities as `choices` in a
#: formfield. From http://www.argentina.gov.ar/argentina/portal/paginas.dhtml?pagina=425
PROVINCE_CHOICES = (
    ('B', _('Buenos Aires')),
    ('K', _('Catamarca')),
    ('H', _('Chaco')),
    ('U', _('Chubut')),
    ('C', _('Ciudad Autónoma de Buenos Aires')),
    ('X', _('Córdoba')),
    ('W', _('Corrientes')),
    ('E', _('Entre Ríos')),
    ('P', _('Formosa')),
    ('Y', _('Jujuy')),
    ('L', _('La Pampa')),
    ('F', _('La Rioja')),
    ('M', _('Mendoza')),
    ('N', _('Misiones')),
    ('Q', _('Neuquén')),
    ('R', _('Río Negro')),
    ('A', _('Salta')),
    ('J', _('San Juan')),
    ('D', _('San Luis')),
    ('Z', _('Santa Cruz')),
    ('S', _('Santa Fe')),
    ('G', _('Santiago del Estero')),
    ('V', _('Tierra del Fuego, Antártida e Islas del Atlántico Sur')),
    ('T', _('Tucumán')),
)

########NEW FILE########
__FILENAME__ = forms
# -*- coding: utf-8 -*-
"""
AR-specific Form helpers.
"""

from __future__ import absolute_import, unicode_literals

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import RegexField, CharField, Select
from django.utils.translation import ugettext_lazy as _

from .ar_provinces import PROVINCE_CHOICES


class ARProvinceSelect(Select):
    """
    A Select widget that uses a list of Argentinean provinces/autonomous cities
    as its choices.
    """
    def __init__(self, attrs=None):
        super(ARProvinceSelect, self).__init__(attrs, choices=PROVINCE_CHOICES)


class ARPostalCodeField(RegexField):
    """
    A field that accepts a 'classic' NNNN Postal Code or a CPA.

    See:
        http://www.correoargentino.com.ar/cpa/que_es
        http://www.correoargentino.com.ar/cpa/como_escribirlo
    """
    default_error_messages = {
        'invalid': _("Enter a postal code in the format NNNN or ANNNNAAA."),
    }

    def __init__(self, max_length=8, min_length=4, *args, **kwargs):
        super(ARPostalCodeField, self).__init__(r'^\d{4}$|^[A-HJ-NP-Za-hj-np-z]\d{4}\D{3}$',
                                                max_length, min_length,
                                                *args, **kwargs)

    def clean(self, value):
        value = super(ARPostalCodeField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        if len(value) not in (4, 8):
            raise ValidationError(self.error_messages['invalid'])
        if len(value) == 8:
            return '%s%s%s' % (value[0].upper(), value[1:5], value[5:].upper())
        return value


class ARDNIField(CharField):
    """
    A field that validates 'Documento Nacional de Identidad' (DNI) numbers.
    """
    default_error_messages = {
        'invalid': _("This field requires only numbers."),
        'max_digits': _("This field requires 7 or 8 digits."),
    }

    def __init__(self, max_length=10, min_length=7, *args, **kwargs):
        super(ARDNIField, self).__init__(max_length, min_length,
                                         *args, **kwargs)

    def clean(self, value):
        """
        Value can be a string either in the [X]X.XXX.XXX or [X]XXXXXXX formats.
        """
        value = super(ARDNIField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        if not value.isdigit():
            value = value.replace('.', '')
        if not value.isdigit():
            raise ValidationError(self.error_messages['invalid'])
        if len(value) not in (7, 8):
            raise ValidationError(self.error_messages['max_digits'])

        return value


class ARCUITField(RegexField):
    """
    This field validates a CUIT (Código Único de Identificación Tributaria). A
    CUIT is of the form XX-XXXXXXXX-V. The last digit is a check digit.
    """
    default_error_messages = {
        'invalid': _('Enter a valid CUIT in XX-XXXXXXXX-X or XXXXXXXXXXXX format.'),
        'checksum': _("Invalid CUIT."),
        'legal_type': _('Invalid legal type. Type must be 27, 20, 23 or 30.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(ARCUITField, self).__init__(r'^\d{2}-?\d{8}-?\d$',
                                          max_length, min_length, *args, **kwargs)

    def clean(self, value):
        """
        Value can be either a string in the format XX-XXXXXXXX-X or an
        11-digit number.
        """
        value = super(ARCUITField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        value, cd = self._canon(value)
        if not value[:2] in ['27', '20', '23', '30']:
            raise ValidationError(self.error_messages['legal_type'])
        if self._calc_cd(value) != cd:
            raise ValidationError(self.error_messages['checksum'])
        return self._format(value, cd)

    def _canon(self, cuit):
        cuit = cuit.replace('-', '')
        return cuit[:-1], cuit[-1]

    def _calc_cd(self, cuit):
        # Calculation code based on:
        # http://es.wikipedia.org/wiki/C%C3%B3digo_%C3%9Anico_de_Identificaci%C3%B3n_Tributaria
        mults = (5, 4, 3, 2, 7, 6, 5, 4, 3, 2)
        tmp = sum([m * int(cuit[idx]) for idx, m in enumerate(mults)])
        result = 11 - (tmp % 11)
        if result == 11:
            result = 0
        elif result == 10:
            result = 9
        return str(result)

    def _format(self, cuit, check_digit=None):
        if check_digit is None:
            check_digit = cuit[-1]
            cuit = cuit[:-1]
        return '%s-%s-%s' % (cuit[:2], cuit[2:], check_digit)

########NEW FILE########
__FILENAME__ = at_states
# -*- coding: utf-8 -*
from django.utils.translation import ugettext_lazy as _

#: A list of Austrian states according to https://en.wikipedia.org/wiki/States_of_Austria
STATE_CHOICES = (
    ('BL', _('Burgenland')),
    ('KA', _('Carinthia')),
    ('NO', _('Lower Austria')),
    ('OO', _('Upper Austria')),
    ('SA', _('Salzburg')),
    ('ST', _('Styria')),
    ('TI', _('Tyrol')),
    ('VO', _('Vorarlberg')),
    ('WI', _('Vienna')),
)

########NEW FILE########
__FILENAME__ = forms
"""
AT-specific Form helpers
"""
from __future__ import unicode_literals
import re

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import Field, RegexField, Select
from django.utils.translation import ugettext_lazy as _

from .at_states import STATE_CHOICES


re_ssn = re.compile(r'^\d{4} \d{6}')


class ATZipCodeField(RegexField):
    """
    A form field that validates its input is an Austrian postcode.

    Accepts 4 digits (first digit must be greater than 0).
    """
    default_error_messages = {
        'invalid': _('Enter a zip code in the format XXXX.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(ATZipCodeField, self).__init__(r'^[1-9]{1}\d{3}$',
                                             max_length, min_length, *args, **kwargs)


class ATStateSelect(Select):
    """
    A ``Select`` widget that uses a list of AT states as its choices.
    """
    def __init__(self, attrs=None):
        super(ATStateSelect, self).__init__(attrs, choices=STATE_CHOICES)


class ATSocialSecurityNumberField(Field):
    """
    Austrian Social Security numbers are composed of a 4 digits and 6 digits
    field. The latter represents in most cases the person's birthdate while
    the first 4 digits represent a 3-digits counter and a one-digit checksum.

    The 6-digits field can also differ from the person's birthdate if the
    3-digits counter suffered an overflow.

    This code is based on information available on
    http://de.wikipedia.org/wiki/Sozialversicherungsnummer#.C3.96sterreich
    """
    default_error_messages = {
        'invalid': _('Enter a valid Austrian Social Security Number in XXXX XXXXXX format.'),
    }

    def clean(self, value):
        value = super(ATSocialSecurityNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ""
        if not re_ssn.search(value):
            raise ValidationError(self.error_messages['invalid'])
        sqnr, date = value.split(" ")
        sqnr, check = (sqnr[:3], (sqnr[3]))
        if int(sqnr) < 100:
            raise ValidationError(self.error_messages['invalid'])
        res = (int(sqnr[0]) * 3 + int(sqnr[1]) * 7 + int(sqnr[2]) * 9 +
               int(date[0]) * 5 + int(date[1]) * 8 + int(date[2]) * 4 +
               int(date[3]) * 2 + int(date[4]) * 1 + int(date[5]) * 6)
        res = res % 11
        if res != int(check):
            raise ValidationError(self.error_messages['invalid'])
        return '%s%s %s' % (sqnr, check, date)

########NEW FILE########
__FILENAME__ = au_states
#: An alphabetical list of states for use as `choices` in a formfield.
STATE_CHOICES = (
    ('ACT', 'Australian Capital Territory'),
    ('NSW', 'New South Wales'),
    ('NT', 'Northern Territory'),
    ('QLD', 'Queensland'),
    ('SA', 'South Australia'),
    ('TAS', 'Tasmania'),
    ('VIC', 'Victoria'),
    ('WA', 'Western Australia'),
)

########NEW FILE########
__FILENAME__ = forms
"""
Australian-specific Form helpers
"""

from __future__ import absolute_import, unicode_literals

import re

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import CharField, RegexField, Select
from django.utils.encoding import smart_text
from django.utils.translation import ugettext_lazy as _

from .au_states import STATE_CHOICES

PHONE_DIGITS_RE = re.compile(r'^(\d{10})$')


class AUPostCodeField(RegexField):
    """ Australian post code field.

    Assumed to be 4 digits.
    Northern Territory 3-digit postcodes should have leading zero.
    """
    default_error_messages = {
        'invalid': _('Enter a 4 digit postcode.'),
    }

    def __init__(self, max_length=4, min_length=None, *args, **kwargs):
        super(AUPostCodeField, self).__init__(r'^\d{4}$',
                                              max_length, min_length, *args, **kwargs)


class AUPhoneNumberField(CharField):
    """
    A form field that validates input as an Australian phone number.

    Valid numbers have ten digits.
    """
    default_error_messages = {
        'invalid': 'Phone numbers must contain 10 digits.',
    }

    def clean(self, value):
        """
        Validate a phone number. Strips parentheses, whitespace and hyphens.
        """
        super(AUPhoneNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        value = re.sub('(\(|\)|\s+|-)', '', smart_text(value))
        phone_match = PHONE_DIGITS_RE.search(value)
        if phone_match:
            return '%s' % phone_match.group(1)
        raise ValidationError(self.error_messages['invalid'])


class AUStateSelect(Select):
    """
    A Select widget that uses a list of Australian states/territories as its
    choices.
    """
    def __init__(self, attrs=None):
        super(AUStateSelect, self).__init__(attrs, choices=STATE_CHOICES)

########NEW FILE########
__FILENAME__ = models
from django.db.models.fields import CharField
from django.utils.translation import ugettext_lazy as _

from . import forms
from .au_states import STATE_CHOICES


class AUStateField(CharField):
    """
    A model field that is represented with
    :data:`~localflavor.au.au_states.STATE_CHOICES`` choices and
    stores the three-letter Australian state abbreviation in the database.
    """
    description = _("Australian State")

    def __init__(self, *args, **kwargs):
        kwargs['choices'] = STATE_CHOICES
        kwargs['max_length'] = 3
        super(AUStateField, self).__init__(*args, **kwargs)


class AUPostCodeField(CharField):
    """
    A model field that forms represent as a
    :class:`~localflavor.forms.AUPostCodeField` field and stores the
    four-digit Australian postcode in the database.
    """
    description = _("Australian Postcode")

    def __init__(self, *args, **kwargs):
        kwargs['max_length'] = 4
        super(AUPostCodeField, self).__init__(*args, **kwargs)

    def formfield(self, **kwargs):
        defaults = {'form_class': forms.AUPostCodeField}
        defaults.update(kwargs)
        return super(AUPostCodeField, self).formfield(**defaults)


class AUPhoneNumberField(CharField):
    """
    A model field that checks that the value is a valid Australian phone
    number (ten digits).
    """
    description = _("Australian Phone number")

    def __init__(self, *args, **kwargs):
        kwargs['max_length'] = 20
        super(AUPhoneNumberField, self).__init__(*args, **kwargs)

    def formfield(self, **kwargs):
        defaults = {'form_class': forms.AUPhoneNumberField}
        defaults.update(kwargs)
        return super(AUPhoneNumberField, self).formfield(**defaults)

########NEW FILE########
__FILENAME__ = be_provinces
from django.utils.translation import ugettext_lazy as _

#: ISO codes
PROVINCE_CHOICES = (
    ('VAN', _('Antwerp')),
    ('BRU', _('Brussels')),
    ('VOV', _('East Flanders')),
    ('VBR', _('Flemish Brabant')),
    ('WHT', _('Hainaut')),
    ('WLG', _('Liege')),
    ('VLI', _('Limburg')),
    ('WLX', _('Luxembourg')),
    ('WNA', _('Namur')),
    ('WBR', _('Walloon Brabant')),
    ('VWV', _('West Flanders'))
)

########NEW FILE########
__FILENAME__ = be_regions
from django.utils.translation import ugettext_lazy as _

#: ISO codes
REGION_CHOICES = (
    ('BRU', _('Brussels Capital Region')),
    ('VLG', _('Flemish Region')),
    ('WAL', _('Wallonia'))
)

########NEW FILE########
__FILENAME__ = forms
"""
Belgium-specific Form helpers
"""

from __future__ import absolute_import

from django.forms.fields import RegexField, Select
from django.utils.translation import ugettext_lazy as _

from .be_provinces import PROVINCE_CHOICES
from .be_regions import REGION_CHOICES


class BEPostalCodeField(RegexField):
    """
    A form field that validates its input as a belgium postal code.

    Belgium postal code is a 4 digits string. The first digit indicates
    the province (except for the 3ddd numbers that are shared by the
    eastern part of Flemish Brabant and Limburg and the and 1ddd that
    are shared by the Brussels Capital Region, the western part of
    Flemish Brabant and Walloon Brabant)
    """
    default_error_messages = {
        'invalid': _(
            'Enter a valid postal code in the range and format 1XXX - 9XXX.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(BEPostalCodeField, self).__init__(r'^[1-9]\d{3}$',
                                                max_length, min_length, *args, **kwargs)


class BEPhoneNumberField(RegexField):
    """
    A form field that validates its input as a belgium phone number.

    Landlines have a seven-digit subscriber number and a one-digit area code,
    while smaller cities have a six-digit subscriber number and a two-digit
    area code. Cell phones have a six-digit subscriber number and a two-digit
    area code preceeded by the number 4.
    0d ddd dd dd, 0d/ddd.dd.dd, 0d.ddd.dd.dd,
    0dddddddd - dialling a bigger city
    0dd dd dd dd, 0dd/dd.dd.dd, 0dd.dd.dd.dd,
    0dddddddd - dialling a smaller city
    04dd ddd dd dd, 04dd/ddd.dd.dd,
    04dd.ddd.dd.dd, 04ddddddddd - dialling a mobile number
    """
    default_error_messages = {
        'invalid': _('Enter a valid phone number in one of the formats '
                     '0x xxx xx xx, 0xx xx xx xx, 04xx xx xx xx, '
                     '0x/xxx.xx.xx, 0xx/xx.xx.xx, 04xx/xx.xx.xx, '
                     '0x.xxx.xx.xx, 0xx.xx.xx.xx, 04xx.xx.xx.xx, '
                     '0xxxxxxxx or 04xxxxxxxx.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(BEPhoneNumberField, self).__init__(r'^[0]\d{1}[/. ]?\d{3}[. ]\d{2}[. ]?\d{2}$|^[0]\d{2}[/. ]?\d{2}[. ]?\d{2}[. ]?\d{2}$|^[0][4]\d{2}[/. ]?\d{2}[. ]?\d{2}[. ]?\d{2}$',
                                                 max_length, min_length,
                                                 *args, **kwargs)


class BERegionSelect(Select):
    """
    A Select widget that uses a list of belgium regions as its choices.
    """
    def __init__(self, attrs=None):
        super(BERegionSelect, self).__init__(attrs, choices=REGION_CHOICES)


class BEProvinceSelect(Select):
    """
    A Select widget that uses a list of belgium provinces as its choices.
    """
    def __init__(self, attrs=None):
        super(BEProvinceSelect, self).__init__(attrs, choices=PROVINCE_CHOICES)

########NEW FILE########
__FILENAME__ = br_states
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

#: An alphabetical list of Brazilian states for use as `choices` in a formfield
STATE_CHOICES = (
    ('AC', 'Acre'),
    ('AL', 'Alagoas'),
    ('AP', 'Amapá'),
    ('AM', 'Amazonas'),
    ('BA', 'Bahia'),
    ('CE', 'Ceará'),
    ('DF', 'Distrito Federal'),
    ('ES', 'Espírito Santo'),
    ('GO', 'Goiás'),
    ('MA', 'Maranhão'),
    ('MT', 'Mato Grosso'),
    ('MS', 'Mato Grosso do Sul'),
    ('MG', 'Minas Gerais'),
    ('PA', 'Pará'),
    ('PB', 'Paraíba'),
    ('PR', 'Paraná'),
    ('PE', 'Pernambuco'),
    ('PI', 'Piauí'),
    ('RJ', 'Rio de Janeiro'),
    ('RN', 'Rio Grande do Norte'),
    ('RS', 'Rio Grande do Sul'),
    ('RO', 'Rondônia'),
    ('RR', 'Roraima'),
    ('SC', 'Santa Catarina'),
    ('SP', 'São Paulo'),
    ('SE', 'Sergipe'),
    ('TO', 'Tocantins'),
)

########NEW FILE########
__FILENAME__ = forms
# -*- coding: utf-8 -*-
"""
BR-specific Form helpers
"""

from __future__ import absolute_import, unicode_literals

import re

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import Field, RegexField, CharField, Select
from django.utils.translation import ugettext_lazy as _

try:
    from django.utils.encoding import smart_text
except ImportError:
    from django.utils.encoding import smart_unicode as smart_text

from .br_states import STATE_CHOICES

phone_digits_re = re.compile(r'^(\d{2})[-\.]?(\d{4,5})[-\.]?(\d{4})$')


class BRZipCodeField(RegexField):
    """
    A form field that validates input as a Brazilian zip code, with the format
    XXXXX-XXX.
    """
    default_error_messages = {
        'invalid': _('Enter a zip code in the format XXXXX-XXX.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(BRZipCodeField, self).__init__(r'^\d{5}-\d{3}$',
                                             max_length, min_length, *args, **kwargs)


class BRPhoneNumberField(Field):
    """
    A form field that validates input as a Brazilian phone number, that must
    be in either of the following formats: XX-XXXX-XXXX or XX-XXXXX-XXXX.
    """
    default_error_messages = {
        'invalid': _(('Phone numbers must be in either of the following '
                      'formats: XX-XXXX-XXXX or XX-XXXXX-XXXX.')),
    }

    def clean(self, value):
        super(BRPhoneNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        value = re.sub('(\(|\)|\s+)', '', smart_text(value))
        m = phone_digits_re.search(value)
        if m:
            return '%s-%s-%s' % (m.group(1), m.group(2), m.group(3))
        raise ValidationError(self.error_messages['invalid'])


class BRStateSelect(Select):
    """
    A Select widget that uses a list of Brazilian states/territories
    as its choices.
    """
    def __init__(self, attrs=None):
        super(BRStateSelect, self).__init__(attrs, choices=STATE_CHOICES)


class BRStateChoiceField(Field):

    """
    A choice field that uses a list of Brazilian states as its choices.
    """
    widget = Select
    default_error_messages = {
        'invalid': _('Select a valid brazilian state. That state is not one of the available states.'),
    }

    def __init__(self, required=True, widget=None, label=None,
                 initial=None, help_text=None):
        super(BRStateChoiceField, self).__init__(required, widget, label,
                                                 initial, help_text)
        self.widget.choices = STATE_CHOICES

    def clean(self, value):
        value = super(BRStateChoiceField, self).clean(value)
        if value in EMPTY_VALUES:
            value = ''
        value = smart_text(value)
        if value == '':
            return value
        valid_values = set([smart_text(k) for k, v in self.widget.choices])
        if value not in valid_values:
            raise ValidationError(self.error_messages['invalid'])
        return value


def DV_maker(v):
    if v >= 2:
        return 11 - v
    return 0


class BRCPFField(CharField):
    """
    A form field that validates a CPF number or a CPF string. A CPF number is
    compounded by XXX.XXX.XXX-VD. The two last digits are check digits.

    More information:
    http://en.wikipedia.org/wiki/Cadastro_de_Pessoas_F%C3%ADsicas
    """
    default_error_messages = {
        'invalid': _("Invalid CPF number."),
        'max_digits': _("This field requires at most 11 digits or 14 characters."),
        'digits_only': _("This field requires only numbers."),
    }

    def __init__(self, max_length=14, min_length=11, *args, **kwargs):
        super(BRCPFField, self).__init__(max_length, min_length, *args, **kwargs)

    def clean(self, value):
        """
        Value can be either a string in the format XXX.XXX.XXX-XX or an
        11-digit number.
        """
        value = super(BRCPFField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        orig_value = value[:]
        if not value.isdigit():
            value = re.sub("[-\. ]", "", value)
        try:
            int(value)
        except ValueError:
            raise ValidationError(self.error_messages['digits_only'])
        if len(value) != 11:
            raise ValidationError(self.error_messages['max_digits'])
        orig_dv = value[-2:]

        new_1dv = sum([i * int(value[idx])
                      for idx, i in enumerate(range(10, 1, -1))])
        new_1dv = DV_maker(new_1dv % 11)
        value = value[:-2] + str(new_1dv) + value[-1]
        new_2dv = sum([i * int(value[idx])
                      for idx, i in enumerate(range(11, 1, -1))])
        new_2dv = DV_maker(new_2dv % 11)
        value = value[:-1] + str(new_2dv)
        if value[-2:] != orig_dv:
            raise ValidationError(self.error_messages['invalid'])
        if value.count(value[0]) == 11:
            raise ValidationError(self.error_messages['invalid'])
        return orig_value


class BRCNPJField(Field):
    """
    A form field that validates input as `Brazilian CNPJ`_.

    Input can either be of the format XX.XXX.XXX/XXXX-XX or be a group of 14
    digits.

    .. _Brazilian CNPJ: http://en.wikipedia.org/wiki/National_identification_number#Brazil

    """
    default_error_messages = {
        'invalid': _("Invalid CNPJ number."),
        'digits_only': _("This field requires only numbers."),
        'max_digits': _("This field requires at least 14 digits"),
    }

    def clean(self, value):
        """
        Value can be either a string in the format XX.XXX.XXX/XXXX-XX or a
        group of 14 characters.
        """
        value = super(BRCNPJField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        orig_value = value[:]
        if not value.isdigit():
            value = re.sub("[-/\.]", "", value)
        try:
            int(value)
        except ValueError:
            raise ValidationError(self.error_messages['digits_only'])
        if len(value) != 14:
            raise ValidationError(self.error_messages['max_digits'])
        orig_dv = value[-2:]

        new_1dv = sum([i * int(value[idx]) for idx, i in enumerate(list(range(5, 1, -1)) + list(range(9, 1, -1)))])
        new_1dv = DV_maker(new_1dv % 11)
        value = value[:-2] + str(new_1dv) + value[-1]
        new_2dv = sum([i * int(value[idx]) for idx, i in enumerate(list(range(6, 1, -1)) + list(range(9, 1, -1)))])
        new_2dv = DV_maker(new_2dv % 11)
        value = value[:-1] + str(new_2dv)
        if value[-2:] != orig_dv:
            raise ValidationError(self.error_messages['invalid'])

        return orig_value

########NEW FILE########
__FILENAME__ = models
from django.utils.translation import ugettext_lazy as _
from django.db.models.fields import CharField

from .br_states import STATE_CHOICES


class BRStateField(CharField):
    """
    A model field for states of Brazil
    """
    description = _("State of Brazil (two uppercase letters)")

    def __init__(self, *args, **kwargs):
        kwargs['choices'] = STATE_CHOICES
        kwargs['max_length'] = 2
        super(BRStateField, self).__init__(*args, **kwargs)

########NEW FILE########
__FILENAME__ = ca_provinces
from django.utils.translation import ugettext_lazy as _

#: An alphabetical list of provinces and territories for use as `choices`
#: in a formfield. Source: http://www.canada.gc.ca/othergov/prov_e.html
PROVINCE_CHOICES = (
    ('AB', _('Alberta')),
    ('BC', _('British Columbia')),
    ('MB', _('Manitoba')),
    ('NB', _('New Brunswick')),
    ('NL', _('Newfoundland and Labrador')),
    ('NT', _('Northwest Territories')),
    ('NS', _('Nova Scotia')),
    ('NU', _('Nunavut')),
    ('ON', _('Ontario')),
    ('PE', _('Prince Edward Island')),
    ('QC', _('Quebec')),
    ('SK', _('Saskatchewan')),
    ('YT', _('Yukon'))
)

#: a mapping of province misspellings/abbreviations to normalized abbreviations
PROVINCES_NORMALIZED = {
    'ab': 'AB',
    'alberta': 'AB',
    'bc': 'BC',
    'b.c.': 'BC',
    'british columbia': 'BC',
    'mb': 'MB',
    'manitoba': 'MB',
    'nb': 'NB',
    'new brunswick': 'NB',
    'nf': 'NL',
    'nl': 'NL',
    'newfoundland': 'NL',
    'newfoundland and labrador': 'NL',
    'nt': 'NT',
    'northwest territories': 'NT',
    'ns': 'NS',
    'nova scotia': 'NS',
    'nu': 'NU',
    'nunavut': 'NU',
    'on': 'ON',
    'ontario': 'ON',
    'pe': 'PE',
    'pei': 'PE',
    'p.e.i.': 'PE',
    'prince edward island': 'PE',
    'pq': 'QC',
    'qc': 'QC',
    'quebec': 'QC',
    'sk': 'SK',
    'saskatchewan': 'SK',
    'yk': 'YT',
    'yt': 'YT',
    'yukon': 'YT',
    'yukon territory': 'YT',
}

########NEW FILE########
__FILENAME__ = forms
"""
Canada-specific Form helpers
"""

from __future__ import absolute_import, unicode_literals

import re

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import Field, CharField, Select
from django.utils.encoding import smart_text
from django.utils.translation import ugettext_lazy as _


phone_digits_re = re.compile(r'^(?:1-?)?(\d{3})[-\.]?(\d{3})[-\.]?(\d{4})$')
sin_re = re.compile(r"^(\d{3})-(\d{3})-(\d{3})$")


class CAPostalCodeField(CharField):
    """
    Canadian postal code form field.

    Validates against known invalid characters: D, F, I, O, Q, U
    Additionally the first character cannot be Z or W.
    For more info see:
    http://www.canadapost.ca/tools/pg/manual/PGaddress-e.asp#1402170
    """
    default_error_messages = {
        'invalid': _('Enter a postal code in the format XXX XXX.'),
    }

    postcode_regex = re.compile(
        r'^([ABCEGHJKLMNPRSTVXY]\d[ABCEGHJKLMNPRSTVWXYZ]) *(\d[ABCEGHJKLMNPRSTVWXYZ]\d)$')

    def clean(self, value):
        value = super(CAPostalCodeField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        postcode = value.upper().strip()
        m = self.postcode_regex.match(postcode)
        if not m:
            raise ValidationError(self.error_messages['invalid'])
        return "%s %s" % (m.group(1), m.group(2))


class CAPhoneNumberField(Field):
    """Canadian phone number form field."""
    default_error_messages = {
        'invalid': _('Phone numbers must be in XXX-XXX-XXXX format.'),
    }

    def clean(self, value):
        super(CAPhoneNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        value = re.sub('(\(|\)|\s+)', '', smart_text(value))
        m = phone_digits_re.search(value)
        if m:
            return '%s-%s-%s' % (m.group(1), m.group(2), m.group(3))
        raise ValidationError(self.error_messages['invalid'])


class CAProvinceField(Field):
    """
    A form field that validates its input is a Canadian province name or abbreviation.
    It normalizes the input to the standard two-leter postal service
    abbreviation for the given province.
    """
    default_error_messages = {
        'invalid': _('Enter a Canadian province or territory.'),
    }

    def clean(self, value):
        super(CAProvinceField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        try:
            value = value.strip().lower()
        except AttributeError:
            pass
        else:
            # Load data in memory only when it is required, see also #17275
            from .ca_provinces import PROVINCES_NORMALIZED
            try:
                return PROVINCES_NORMALIZED[value.strip().lower()]
            except KeyError:
                pass
        raise ValidationError(self.error_messages['invalid'])


class CAProvinceSelect(Select):
    """
    A Select widget that uses a list of Canadian provinces and
    territories as its choices.
    """
    def __init__(self, attrs=None):
        # Load data in memory only when it is required, see also #17275
        from .ca_provinces import PROVINCE_CHOICES
        super(CAProvinceSelect, self).__init__(attrs, choices=PROVINCE_CHOICES)


class CASocialInsuranceNumberField(Field):
    """
    A Canadian Social Insurance Number (SIN).

    Checks the following rules to determine whether the number is valid:

    * Conforms to the XXX-XXX-XXX format.

    * Passes the check digit process "Luhn Algorithm"
         See: http://en.wikipedia.org/wiki/Social_Insurance_Number

    """
    default_error_messages = {
        'invalid': _(
            'Enter a valid Canadian Social Insurance number in XXX-XXX-XXX format.'),
    }

    def clean(self, value):
        super(CASocialInsuranceNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        match = re.match(sin_re, value)
        if not match:
            raise ValidationError(self.error_messages['invalid'])

        number = '%s-%s-%s' % (match.group(1), match.group(2), match.group(3))
        check_number = '%s%s%s' % (
            match.group(1),
            match.group(2),
            match.group(3))
        if not self.luhn_checksum_is_valid(check_number):
            raise ValidationError(self.error_messages['invalid'])
        return number

    def luhn_checksum_is_valid(self, number):
        """
        Checks to make sure that the SIN passes a luhn mod-10 checksum
        See: http://en.wikipedia.org/wiki/Luhn_algorithm
        """

        sum = 0
        num_digits = len(number)
        oddeven = num_digits & 1

        for count in range(0, num_digits):
            digit = int(number[count])

            if not ((count & 1) ^ oddeven):
                digit = digit * 2
            if digit > 9:
                digit = digit - 9

            sum = sum + digit

        return ((sum % 10) == 0)

########NEW FILE########
__FILENAME__ = ch_states
# -*- coding: utf-8 -*
from django.utils.translation import ugettext_lazy as _

#: An alphabetical list of states
STATE_CHOICES = (
    ('AG', _('Aargau')),
    ('AI', _('Appenzell Innerrhoden')),
    ('AR', _('Appenzell Ausserrhoden')),
    ('BS', _('Basel-Stadt')),
    ('BL', _('Basel-Land')),
    ('BE', _('Berne')),
    ('FR', _('Fribourg')),
    ('GE', _('Geneva')),
    ('GL', _('Glarus')),
    ('GR', _('Graubuenden')),
    ('JU', _('Jura')),
    ('LU', _('Lucerne')),
    ('NE', _('Neuchatel')),
    ('NW', _('Nidwalden')),
    ('OW', _('Obwalden')),
    ('SH', _('Schaffhausen')),
    ('SZ', _('Schwyz')),
    ('SO', _('Solothurn')),
    ('SG', _('St. Gallen')),
    ('TG', _('Thurgau')),
    ('TI', _('Ticino')),
    ('UR', _('Uri')),
    ('VS', _('Valais')),
    ('VD', _('Vaud')),
    ('ZG', _('Zug')),
    ('ZH', _('Zurich'))
)

########NEW FILE########
__FILENAME__ = forms
"""
Swiss-specific Form helpers
"""

from __future__ import absolute_import, unicode_literals

import re

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import Field, RegexField, Select
from django.utils.encoding import smart_text
from django.utils.translation import ugettext_lazy as _

from .ch_states import STATE_CHOICES


id_re = re.compile(
    r"^(?P<idnumber>\w{8})(?P<pos9>(\d{1}|<))(?P<checksum>\d{1})$")
phone_digits_re = re.compile(r'^0([1-9]{1})\d{8}$')


class CHZipCodeField(RegexField):
    """
    A form field that validates input as a Swiss zip code. Valid codes
    consist of four digits.
    """
    default_error_messages = {
        'invalid': _('Enter a zip code in the format XXXX.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(CHZipCodeField, self).__init__(r'^\d{4}$',
                                             max_length, min_length, *args, **kwargs)


class CHPhoneNumberField(Field):
    """
    Validate local Swiss phone number (not international ones)
    The correct format is '0XX XXX XX XX'.
    '0XX.XXX.XX.XX' and '0XXXXXXXXX' validate but are corrected to
    '0XX XXX XX XX'.
    """
    default_error_messages = {
        'invalid': _('Phone numbers must be in 0XX XXX XX XX format.'),
    }

    def clean(self, value):
        super(CHPhoneNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        value = re.sub('(\.|\s|/|-)', '', smart_text(value))
        m = phone_digits_re.search(value)
        if m:
            return '%s %s %s %s' % (value[0:3], value[3:6], value[6:8], value[8:10])
        raise ValidationError(self.error_messages['invalid'])


class CHStateSelect(Select):
    """
    A Select widget that uses a list of CH states as its choices.
    """
    def __init__(self, attrs=None):
        super(CHStateSelect, self).__init__(attrs, choices=STATE_CHOICES)


class CHIdentityCardNumberField(Field):
    """
    A Swiss identity card number.

    Checks the following rules to determine whether the number is valid:

        * Conforms to the X1234567<0 or 1234567890 format.
        * Included checksums match calculated checksums

    """
    default_error_messages = {
        'invalid': _('Enter a valid Swiss identity or passport card number in X1234567<0 or 1234567890 format.'),
    }

    def has_valid_checksum(self, number):
        given_number, given_checksum = number[:-1], number[-1]
        new_number = given_number
        calculated_checksum = 0
        fragment = ""
        parameter = 7

        first = str(number[:1])
        if first.isalpha():
            num = ord(first.upper()) - 65
            if num < 0 or num > 8:
                return False
            new_number = str(num) + new_number[1:]
            new_number = new_number[:8] + '0'

        if not new_number.isdigit():
            return False

        for i in range(len(new_number)):
            fragment = int(new_number[i]) * parameter
            calculated_checksum += fragment

            if parameter == 1:
                parameter = 7
            elif parameter == 3:
                parameter = 1
            elif parameter == 7:
                parameter = 3

        return str(calculated_checksum)[-1] == given_checksum

    def clean(self, value):
        super(CHIdentityCardNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        match = re.match(id_re, value)
        if not match:
            raise ValidationError(self.error_messages['invalid'])

        result = match.groupdict()
        idnumber, pos9, checksum = result['idnumber'], result['pos9'], result['checksum']

        if (idnumber == '00000000' or
                idnumber == 'A0000000'):
            raise ValidationError(self.error_messages['invalid'])

        all_digits = "%s%s%s" % (idnumber, pos9, checksum)
        if not self.has_valid_checksum(all_digits):
            raise ValidationError(self.error_messages['invalid'])

        return '%s%s%s' % (idnumber, pos9, checksum)

########NEW FILE########
__FILENAME__ = cl_regions
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

#: A list of Chilean regions as `choices` in a formfield.
REGION_CHOICES = (
    ('RM', 'Región Metropolitana de Santiago'),
    ('I', 'Región de Tarapacá'),
    ('II', 'Región de Antofagasta'),
    ('III', 'Región de Atacama'),
    ('IV', 'Región de Coquimbo'),
    ('V', 'Región de Valparaíso'),
    ('VI', 'Región del Libertador Bernardo O\'Higgins'),
    ('VII', 'Región del Maule'),
    ('VIII', 'Región del Bío Bío'),
    ('IX', 'Región de la Araucanía'),
    ('X', 'Región de los Lagos'),
    ('XI', 'Región de Aysén del General Carlos Ibáñez del Campo'),
    ('XII', 'Región de Magallanes y la Antártica Chilena'),
    ('XIV', 'Región de Los Ríos'),
    ('XV', 'Región de Arica-Parinacota'),
)

########NEW FILE########
__FILENAME__ = forms
"""
Chile specific form helpers.
"""

from __future__ import absolute_import, unicode_literals

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import RegexField, Select
from django.utils.translation import ugettext_lazy as _
from django.utils.encoding import smart_text

from .cl_regions import REGION_CHOICES


class CLRegionSelect(Select):
    """
    A Select widget that uses a list of Chilean Regions (Regiones)
    as its choices.
    """
    def __init__(self, attrs=None):
        super(CLRegionSelect, self).__init__(attrs, choices=REGION_CHOICES)


class CLRutField(RegexField):
    """
    Chilean "Rol Unico Tributario" (RUT) field. This is the Chilean national
    identification number.

    Samples for testing are available from
    https://palena.sii.cl/cvc/dte/ee_empresas_emisoras.html
    """
    default_error_messages = {
        'invalid': _('Enter a valid Chilean RUT.'),
        'strict': _('Enter a valid Chilean RUT. The format is XX.XXX.XXX-X.'),
        'checksum': _('The Chilean RUT is not valid.'),
    }

    def __init__(self, *args, **kwargs):
        if 'strict' in kwargs:
            del kwargs['strict']
            super(CLRutField, self).__init__(r'^(\d{1,2}\.)?\d{3}\.\d{3}-[\dkK]$',
                                             error_message=self.default_error_messages['strict'],
                                             *args, **kwargs)
        else:
            # In non-strict mode, accept RUTs that validate but do not exist in
            # the real world.
            super(CLRutField, self).__init__(r'^[\d\.]{1,11}-?[\dkK]$', *args, **kwargs)

    def clean(self, value):
        """
        Check and clean the Chilean RUT.
        """
        super(CLRutField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        rut, verificador = self._canonify(value)
        if self._algorithm(rut) == verificador:
            return self._format(rut, verificador)
        else:
            raise ValidationError(self.error_messages['checksum'])

    def _algorithm(self, rut):
        """
        Takes RUT in pure canonical form, calculates the verifier digit.
        """
        suma = 0
        multi = 2
        for r in rut[::-1]:
            suma += int(r) * multi
            multi += 1
            if multi == 8:
                multi = 2
        return '0123456789K0'[11 - suma % 11]

    def _canonify(self, rut):
        """
        Turns the RUT into one normalized format. Returns a (rut, verifier)
        tuple.
        """
        rut = smart_text(rut).replace(' ', '').replace('.', '').replace('-', '')
        return rut[:-1], rut[-1].upper()

    def _format(self, code, verifier=None):
        """
        Formats the RUT from canonical form to the common string representation.
        If verifier=None, then the last digit in 'code' is the verifier.
        """
        if verifier is None:
            verifier = code[-1]
            code = code[:-1]
        while len(code) > 3 and '.' not in code[:3]:
            pos = code.find('.')
            if pos == -1:
                new_dot = -3
            else:
                new_dot = pos - 3
            code = code[:new_dot] + '.' + code[new_dot:]
        return '%s-%s' % (code, verifier)

########NEW FILE########
__FILENAME__ = cn_provinces
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

#: An alphabetical list of provinces for use as `choices` in a formfield.
#: http://en.wikipedia.org/wiki/ISO_3166-2:CN
#: http://en.wikipedia.org/wiki/Province_%28China%29
#: http://en.wikipedia.org/wiki/Direct-controlled_municipality
#: http://en.wikipedia.org/wiki/Autonomous_regions_of_China
CN_PROVINCE_CHOICES = (
    ("anhui", "安徽"),
    ("beijing", "北京"),
    ("chongqing", "重庆"),
    ("fujian", "福建"),
    ("gansu", "甘肃"),
    ("guangdong", "广东"),
    ("guangxi", "广西壮族自治区"),
    ("guizhou", "贵州"),
    ("hainan", "海南"),
    ("hebei", "河北"),
    ("heilongjiang", "黑龙江"),
    ("henan", "河南"),
    ("hongkong", "香港"),
    ("hubei", "湖北"),
    ("hunan", "湖南"),
    ("jiangsu", "江苏"),
    ("jiangxi", "江西"),
    ("jilin", "吉林"),
    ("liaoning", "辽宁"),
    ("macao", "澳门"),
    ("neimongol", "内蒙古自治区"),
    ("ningxia", "宁夏回族自治区"),
    ("qinghai", "青海"),
    ("shaanxi", "陕西"),
    ("shandong", "山东"),
    ("shanghai", "上海"),
    ("shanxi", "山西"),
    ("sichuan", "四川"),
    ("taiwan", "台湾"),
    ("tianjin", "天津"),
    ("xinjiang", "新疆维吾尔自治区"),
    ("xizang", "西藏自治区"),
    ("yunnan", "云南"),
    ("zhejiang", "浙江"),
)

########NEW FILE########
__FILENAME__ = forms
# -*- coding: utf-8 -*-

"""
Chinese-specific form helpers
"""
from __future__ import absolute_import, unicode_literals

import re

from django.forms import ValidationError
from django.forms.fields import CharField, RegexField, Select
from django.utils.translation import ugettext_lazy as _

from .cn_provinces import CN_PROVINCE_CHOICES

__all__ = (
    'CNProvinceSelect',
    'CNPostCodeField',
    'CNIDCardField',
    'CNPhoneNumberField',
    'CNCellNumberField',
)


ID_CARD_RE = r'^\d{15}(\d{2}[0-9xX])?$'
POST_CODE_RE = r'^\d{6}$'
PHONE_RE = r'^\d{3,4}-\d{7,8}(-\d+)?$'
CELL_RE = r'^1[3458]\d{9}$'

# Valid location code used in id card checking algorithm
CN_LOCATION_CODES = (
    11,  # Beijing
    12,  # Tianjin
    13,  # Hebei
    14,  # Shanxi
    15,  # Nei Mongol
    21,  # Liaoning
    22,  # Jilin
    23,  # Heilongjiang
    31,  # Shanghai
    32,  # Jiangsu
    33,  # Zhejiang
    34,  # Anhui
    35,  # Fujian
    36,  # Jiangxi
    37,  # Shandong
    41,  # Henan
    42,  # Hubei
    43,  # Hunan
    44,  # Guangdong
    45,  # Guangxi
    46,  # Hainan
    50,  # Chongqing
    51,  # Sichuan
    52,  # Guizhou
    53,  # Yunnan
    54,  # Xizang
    61,  # Shaanxi
    62,  # Gansu
    63,  # Qinghai
    64,  # Ningxia
    65,  # Xinjiang
    71,  # Taiwan
    81,  # Hong Kong
    91,  # Macao
)


class CNProvinceSelect(Select):
    """
    A select widget with list of Chinese provinces as choices.
    """
    def __init__(self, attrs=None):
        super(CNProvinceSelect, self).__init__(attrs, choices=CN_PROVINCE_CHOICES)


class CNPostCodeField(RegexField):
    """
    A form field that validates as Chinese post code.
    Valid code is XXXXXX where X is digit.
    """
    default_error_messages = {
        'invalid': _('Enter a post code in the format XXXXXX.'),
    }

    def __init__(self, *args, **kwargs):
        super(CNPostCodeField, self).__init__(POST_CODE_RE, *args, **kwargs)


class CNIDCardField(CharField):
    """
    A form field that validates as Chinese Identification Card Number.

    This field would check the following restrictions:
        * the length could only be 15 or 18.
        * if the length is 18, the last digit could be x or X.
        * has a valid checksum.(length 18 only)
        * has a valid birthdate.
        * has a valid location.

    The checksum algorithm is described in GB11643-1999.
    """
    default_error_messages = {
        'invalid': _('ID Card Number consists of 15 or 18 digits.'),
        'checksum': _('Invalid ID Card Number: Wrong checksum'),
        'birthday': _('Invalid ID Card Number: Wrong birthdate'),
        'location': _('Invalid ID Card Number: Wrong location code'),
    }

    def __init__(self, max_length=18, min_length=15, *args, **kwargs):
        super(CNIDCardField, self).__init__(max_length, min_length, *args, **kwargs)

    def clean(self, value):
        """
        Check whether the input is a valid ID Card Number.
        """
        # Check the length of the ID card number.
        super(CNIDCardField, self).clean(value)
        if not value:
            return ""
        # Check whether this ID card number has valid format
        if not re.match(ID_CARD_RE, value):
            raise ValidationError(self.error_messages['invalid'])
        # Check the birthday of the ID card number.
        if not self.has_valid_birthday(value):
            raise ValidationError(self.error_messages['birthday'])
        # Check the location of the ID card number.
        if not self.has_valid_location(value):
            raise ValidationError(self.error_messages['location'])
        # Check the checksum of the ID card number.
        value = value.upper()
        if not self.has_valid_checksum(value):
            raise ValidationError(self.error_messages['checksum'])
        return '%s' % value

    def has_valid_birthday(self, value):
        """
        This function would grab the birthdate from the ID card number and test
        whether it is a valid date.
        """
        from datetime import datetime
        if len(value) == 15:
            # 1st generation ID card
            time_string = value[6:12]
            format_string = "%y%m%d"
        else:
            # 2nd generation ID card
            time_string = value[6:14]
            format_string = "%Y%m%d"
        try:
            datetime.strptime(time_string, format_string)
            return True
        except ValueError:
            # invalid date
            return False

    def has_valid_location(self, value):
        """
        This method checks if the first two digits in the ID Card are valid.
        """
        return int(value[:2]) in CN_LOCATION_CODES

    def has_valid_checksum(self, value):
        """
        This method checks if the last letter/digit in value is valid
        according to the algorithm the ID Card follows.
        """
        # If the length of the number is not 18, then the number is a 1st
        # generation ID card number, and there is no checksum to be checked.
        if len(value) != 18:
            return True
        checksum_index = sum(
            map(lambda a, b: a * (ord(b) - ord('0')),
                (7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2),
                value[:17],),
        ) % 11
        return '10X98765432'[checksum_index] == value[-1]


class CNPhoneNumberField(RegexField):
    """
    A form field that validates as Chinese phone number

    A valid phone number could be like: 010-55555555

    Considering there might be extension phone numbers,
    so this could also be: 010-55555555-35
    """
    default_error_messages = {
        'invalid': _('Enter a valid phone number.'),
    }

    def __init__(self, *args, **kwargs):
        super(CNPhoneNumberField, self).__init__(PHONE_RE, *args, **kwargs)


class CNCellNumberField(RegexField):
    """
    A form field that validates as Chinese cell number

    A valid cell number could be like: 13012345678

    We used a rough rule here, the first digit should be 1, the second could be
    3, 5 and 8, the rest could be what so ever.
    The length of the cell number should be 11.
    """
    default_error_messages = {
        'invalid': _('Enter a valid cell number.'),
    }

    def __init__(self, *args, **kwargs):
        super(CNCellNumberField, self).__init__(CELL_RE, *args, **kwargs)

########NEW FILE########
__FILENAME__ = co_departments
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

#: A list of Colombian departaments as `choices` in a
#: formfield.
DEPARTMENT_CHOICES = (
    ('AMA', 'Amazonas'),
    ('ANT', 'Antioquia'),
    ('ARA', 'Arauca'),
    ('ATL', 'Atlántico'),
    ('DC', 'Bogotá'),
    ('BOL', 'Bolívar'),
    ('BOY', 'Boyacá'),
    ('CAL', 'Caldas'),
    ('CAQ', 'Caquetá'),
    ('CAS', 'Casanare'),
    ('CAU', 'Cauca'),
    ('CES', 'Cesar'),
    ('CHO', 'Chocó'),
    ('COR', 'Córdoba'),
    ('CUN', 'Cundinamarca'),
    ('GUA', 'Guainía'),
    ('GUV', 'Guaviare'),
    ('HUI', 'Huila'),
    ('LAG', 'La Guajira'),
    ('MAG', 'Magdalena'),
    ('MET', 'Meta'),
    ('NAR', 'Nariño'),
    ('NSA', 'Norte de Santander'),
    ('PUT', 'Putumayo'),
    ('QUI', 'Quindío'),
    ('RIS', 'Risaralda'),
    ('SAP', 'San Andrés and Providencia'),
    ('SAN', 'Santander'),
    ('SUC', 'Sucre'),
    ('TOL', 'Tolima'),
    ('VAC', 'Valle del Cauca'),
    ('VAU', 'Vaupés'),
    ('VID', 'Vichada'),
)

########NEW FILE########
__FILENAME__ = forms
"""
Colombian-specific form helpers.
"""

from __future__ import absolute_import

from django.forms.fields import Select

from .co_departments import DEPARTMENT_CHOICES


class CODepartmentSelect(Select):
    """
    A Select widget that uses a list of Colombian states as its choices.
    """
    def __init__(self, attrs=None):
        super(CODepartmentSelect, self).__init__(attrs, choices=DEPARTMENT_CHOICES)

########NEW FILE########
__FILENAME__ = cz_regions
from django.utils.translation import ugettext_lazy as _

#: Czech regions, translations get from http://www.crwflags.com/fotw/Flags/cz-re.html
REGION_CHOICES = (
    ('PR', _('Prague')),
    ('CE', _('Central Bohemian Region')),
    ('SO', _('South Bohemian Region')),
    ('PI', _('Pilsen Region')),
    ('CA', _('Carlsbad Region')),
    ('US', _('Usti Region')),
    ('LB', _('Liberec Region')),
    ('HK', _('Hradec Region')),
    ('PA', _('Pardubice Region')),
    ('VY', _('Vysocina Region')),
    ('SM', _('South Moravian Region')),
    ('OL', _('Olomouc Region')),
    ('ZL', _('Zlin Region')),
    ('MS', _('Moravian-Silesian Region')),
)

########NEW FILE########
__FILENAME__ = forms
"""
Czech-specific form helpers
"""

from __future__ import absolute_import, unicode_literals

import re

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import Select, RegexField, Field
from django.utils.translation import ugettext_lazy as _

from .cz_regions import REGION_CHOICES

birth_number = re.compile(r'^(?P<birth>\d{6})/?(?P<id>\d{3,4})$')
ic_number = re.compile(r'^(?P<number>\d{7})(?P<check>\d)$')


class CZRegionSelect(Select):
    """
    A select widget widget with list of Czech regions as choices.
    """
    def __init__(self, attrs=None):
        super(CZRegionSelect, self).__init__(attrs, choices=REGION_CHOICES)


class CZPostalCodeField(RegexField):
    """
    A form field that validates its input as Czech postal code.
    Valid form is XXXXX or XXX XX, where X represents integer.
    """
    default_error_messages = {
        'invalid': _('Enter a postal code in the format XXXXX or XXX XX.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(CZPostalCodeField, self).__init__(r'^\d{5}$|^\d{3} \d{2}$',
                                                max_length, min_length, *args, **kwargs)

    def clean(self, value):
        """
        Validates the input and returns a string that contains only numbers.
        Returns an empty string for empty values.
        """
        v = super(CZPostalCodeField, self).clean(value)
        return v.replace(' ', '')


class CZBirthNumberField(Field):
    """
    Czech birth number form field.
    """
    default_error_messages = {
        'invalid_format': _('Enter a birth number in the format XXXXXX/XXXX or XXXXXXXXXX.'),
        'invalid': _('Enter a valid birth number.'),
    }

    def clean(self, value):
        super(CZBirthNumberField, self).clean(value)

        if value in EMPTY_VALUES:
            return ''

        match = re.match(birth_number, value)
        if not match:
            raise ValidationError(self.error_messages['invalid_format'])

        birth, id = match.groupdict()['birth'], match.groupdict()['id']

        # Three digits for verification number were used until 1. january 1954
        if len(id) == 3:
            return '%s' % value

        # Birth number is in format YYMMDD. Females have month value raised by 50.
        # In case that all possible number are already used (for given date),
        # the month field is raised by 20.
        month = int(birth[2:4])
        if (not 1 <= month <= 12) and (not 21 <= month <= 32) and \
                (not 51 <= month <= 62) and (not 71 <= month <= 82):
            raise ValidationError(self.error_messages['invalid'])

        day = int(birth[4:6])
        if not (1 <= day <= 31):
            raise ValidationError(self.error_messages['invalid'])

        # Fourth digit has been added since 1. January 1954.
        # It is modulo of dividing birth number and verification number by 11.
        # If the modulo were 10, the last number was 0 (and therefore, the whole
        # birth number wasn't divisable by 11. These number are no longer used (since 1985)
        # and the condition 'modulo == 10' can be removed in 2085.

        modulo = int(birth + id[:3]) % 11

        if (modulo == int(id[-1])) or (modulo == 10 and id[-1] == '0'):
            return '%s' % value
        else:
            raise ValidationError(self.error_messages['invalid'])


class CZICNumberField(Field):
    """
    Czech IC number form field.
    """
    default_error_messages = {
        'invalid': _('Enter a valid IC number.'),
    }

    def clean(self, value):
        super(CZICNumberField, self).clean(value)

        if value in EMPTY_VALUES:
            return ''

        match = re.match(ic_number, value)
        if not match:
            raise ValidationError(self.error_messages['invalid'])

        number, check = match.groupdict()[
            'number'], int(match.groupdict()['check'])

        sum = 0
        weight = 8
        for digit in number:
            sum += int(digit) * weight
            weight -= 1

        remainder = sum % 11

        # remainder is equal:
        #  0 or 10: last digit is 1
        #  1: last digit is 0
        # in other case, last digit is 11 - remainder

        if (not remainder % 10 and check == 1) or \
            (remainder == 1 and check == 0) or \
                (check == (11 - remainder)):
            return '%s' % value

        raise ValidationError(self.error_messages['invalid'])

########NEW FILE########
__FILENAME__ = de_states
# -*- coding: utf-8 -*
from django.utils.translation import ugettext_lazy as _

#: An alphabetical list of states
STATE_CHOICES = (
    ('BW', _('Baden-Wuerttemberg')),
    ('BY', _('Bavaria')),
    ('BE', _('Berlin')),
    ('BB', _('Brandenburg')),
    ('HB', _('Bremen')),
    ('HH', _('Hamburg')),
    ('HE', _('Hessen')),
    ('MV', _('Mecklenburg-Western Pomerania')),
    ('NI', _('Lower Saxony')),
    ('NW', _('North Rhine-Westphalia')),
    ('RP', _('Rhineland-Palatinate')),
    ('SL', _('Saarland')),
    ('SN', _('Saxony')),
    ('ST', _('Saxony-Anhalt')),
    ('SH', _('Schleswig-Holstein')),
    ('TH', _('Thuringia')),
)

########NEW FILE########
__FILENAME__ = forms
"""
DE-specific Form helpers
"""

from __future__ import absolute_import, unicode_literals

import re

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import Field, RegexField, Select
from django.utils.translation import ugettext_lazy as _

from .de_states import STATE_CHOICES


id_re = re.compile(r"^(?P<residence>\d{10})(?P<origin>\w{1,3})[-\ ]?(?P<birthday>\d{7})[-\ ]?(?P<validity>\d{7})[-\ ]?(?P<checksum>\d{1})$")


class DEZipCodeField(RegexField):
    """
    A form field that validates input as a German zip code. Valid codes
    consist of five digits.
    """
    default_error_messages = {
        'invalid': _('Enter a zip code in the format XXXXX.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(DEZipCodeField, self).__init__(r'^\d{5}$',
                                             max_length, min_length, *args, **kwargs)


class DEStateSelect(Select):
    """
    A Select widget that uses a list of DE states as its choices.
    """
    def __init__(self, attrs=None):
        super(DEStateSelect, self).__init__(attrs, choices=STATE_CHOICES)


class DEIdentityCardNumberField(Field):
    """
    A German identity card number.

    Checks the following rules to determine whether the number is valid:

        * Conforms to the XXXXXXXXXXX-XXXXXXX-XXXXXXX-X format.
        * No group consists entirely of zeroes.
        * Included checksums match calculated checksums

    Algorithm is documented at http://de.wikipedia.org/wiki/Personalausweis
    """
    default_error_messages = {
        'invalid': _('Enter a valid German identity card number in XXXXXXXXXXX-XXXXXXX-XXXXXXX-X format.'),
    }

    def has_valid_checksum(self, number):
        given_number, given_checksum = number[:-1], number[-1]
        calculated_checksum = 0
        fragment = ""
        parameter = 7

        for i in range(len(given_number)):
            fragment = str(int(given_number[i]) * parameter)
            if fragment.isalnum():
                calculated_checksum += int(fragment[-1])
            if parameter == 1:
                parameter = 7
            elif parameter == 3:
                parameter = 1
            elif parameter == 7:
                parameter = 3

        return str(calculated_checksum)[-1] == given_checksum

    def clean(self, value):
        super(DEIdentityCardNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        match = re.match(id_re, value)
        if not match:
            raise ValidationError(self.error_messages['invalid'])

        gd = match.groupdict()
        residence, origin = gd['residence'], gd['origin']
        birthday, validity, checksum = gd['birthday'], gd['validity'], gd['checksum']

        if residence == '0000000000' or birthday == '0000000' or validity == '0000000':
            raise ValidationError(self.error_messages['invalid'])

        all_digits = "%s%s%s%s" % (residence, birthday, validity, checksum)
        if (not self.has_valid_checksum(residence) or
                not self.has_valid_checksum(birthday) or
                not self.has_valid_checksum(validity) or
                not self.has_valid_checksum(all_digits)):
            raise ValidationError(self.error_messages['invalid'])

        return '%s%s-%s-%s-%s' % (residence, origin, birthday, validity, checksum)

########NEW FILE########
__FILENAME__ = dk_municipalities
# coding: utf-8
from __future__ import unicode_literals
from django.utils.translation import ugettext_lazy as _

#: A list of municipalities in the Danish region Hovedstaden
#: as `choices` in a formfield.
REGION_HOVEDSTADEN = [
    ('albertslund', _('Albertslund')),
    ('alleroed', _('Allerød')),
    ('ballerup', _('Ballerup')),
    ('bornholm', _('Bornholm')),
    ('broendby', _('Brøndby')),
    ('dragoer', _('Dragør')),
    ('egedal', _('Egedal')),
    ('fredensborg', _('Fredensborg')),
    ('frederiksberg', _('Frederiksberg')),
    ('frederikssund', _('Frederikssund')),
    ('furesoe', _('Furesø')),
    ('gentofte', _('Gentofte')),
    ('gladsaxe', _('Gladsaxe')),
    ('glostrup', _('Glostrup')),
    ('gribskov', _('Gribskov')),
    ('halsnaes', _('Halsnæs')),
    ('helsingoer', _('Helsingør')),
    ('herlev', _('Herlev')),
    ('hilleroed', _('Hillerød')),
    ('hvidovre', _('Hvidovre')),
    ('hoeje-taastrup', _('Høje-Taastrup')),
    ('hoersholm', _('Hørsholm')),
    ('ishoej', _('Ishøj')),
    ('koebenhavn', _('København')),
    ('lyngby-taarbaek', _('Lyngby-Taarbæk')),
    ('rudersdal', _('Rudersdal')),
    ('roedovre', _('Rødovre')),
    ('taarnby', _('Tårnby')),
    ('vallensbaek', _('Vallensbæk')),
]

#: A list of municipalities in the Danish region Midtjylland
#: as `choices` in a formfield.
REGION_MIDTJYLLAND = [
    ('favrskov', _('Favrskov')),
    ('hedensted', _('Hedensted')),
    ('herning', _('Herning')),
    ('holstebro', _('Holstebro')),
    ('horsens', _('Horsens')),
    ('ikast-Brande', _('Ikast-Brande')),
    ('lemvig', _('Lemvig')),
    ('norddjurs', _('Norddjurs')),
    ('odder', _('Odder')),
    ('randers', _('Randers')),
    ('ringkoebing-skjern', _('Ringkøbing-Skjern')),
    ('samsoe', _('Samsø')),
    ('silkeborg', _('Silkeborg')),
    ('skanderborg', _('Skanderborg')),
    ('skive', _('Skive')),
    ('struer', _('Struer')),
    ('syddjurs', _('Syddjurs')),
    ('viborg', _('Viborg')),
    ('aarhus', _('Aarhus')),
]

#: A list of municipalities in the Danish region Nordjylland
#: as `choices` in a formfield.
REGION_NORDJYLLAND = [
    ('broenderslev', _('Brønderslev')),
    ('frederikshavn', _('Frederikshavn')),
    ('hjoerring', _('Hjørring')),
    ('jammerbugt', _('Jammerbugt')),
    ('laesoe', _('Læsø')),
    ('mariagerfjord', _('Mariagerfjord')),
    ('morsoe', _('Morsø')),
    ('rebild', _('Rebild')),
    ('thisted', _('Thisted')),
    ('vesthimmerland', _('Vesthimmerland')),
    ('aalborg', _('Aalborg')),
]

#: A list of municipalities in the Danish region Sjælland
#: as `choices` in a formfield.
REGION_SJAELLAND = [
    ('faxe', _('Faxe')),
    ('greve', _('Greve')),
    ('guldborgsund', _('Guldborgsund')),
    ('holbaek', _('Holbæk')),
    ('kalundborg', _('Kalundborg')),
    ('koege', _('Køge')),
    ('lejre', _('Lejre')),
    ('lolland', _('Lolland')),
    ('naestved', _('Næstved')),
    ('odsherred', _('Odsherred')),
    ('ringsted', _('Ringsted')),
    ('roskilde', _('Roskilde')),
    ('slagelse', _('Slagelse')),
    ('solroed', _('Solrød')),
    ('soroe', _('Sorø')),
    ('stevns', _('Stevns')),
    ('vordingborg', _('Vordingborg')),
]

#: A list of municipalities in the Danish region Syddanmark
#: as `choices` in a formfield.
REGION_SYDDANMARK = [
    ('assens', _('Assens')),
    ('billund', _('Billund')),
    ('esbjerg', _('Esbjerg')),
    ('fanoe', _('Fanø')),
    ('fredericia', _('Fredericia')),
    ('faaborg-Midtfyn', _('Faaborg-Midtfyn')),
    ('haderslev', _('Haderslev')),
    ('kerteminde', _('Kerteminde')),
    ('kolding', _('Kolding')),
    ('langeland', _('Langeland')),
    ('middelfart', _('Middelfart')),
    ('nordfyn', _('Nordfyn')),
    ('nyborg', _('Nyborg')),
    ('odense', _('Odense')),
    ('svendborg', _('Svendborg')),
    ('soenderborg', _('Sønderborg')),
    ('toender', _('Tønder')),
    ('varde', _('Varde')),
    ('vejen', _('Vejen')),
    ('vejle', _('Vejle')),
    ('aeroe', _('Ærø')),
    ('aabenraa', _('Aabenraa')),
]

#: A list of Danish municipalities grouped by region.
DK_MUNICIPALITIES = [
    (_('Region Hovedstaden'), REGION_HOVEDSTADEN),
    (_('Region Midtjylland'), REGION_MIDTJYLLAND),
    (_('Region Nordjylland'), REGION_NORDJYLLAND),
    (_('Region Sjælland'), REGION_SJAELLAND),
    (_('Region Syddanmark'), REGION_SYDDANMARK),
]

########NEW FILE########
__FILENAME__ = dk_postalcodes
# coding: utf-8
from __future__ import unicode_literals
from django.utils.translation import ugettext_lazy as _


#: A list of Danish postal codes as `choices` in a formfield.
DK_POSTALCODES = (
    ('0555', _('Scanning')),
    ('0800', _('Høje Taastrup')),
    ('0877', _('København C')),
    ('0892', _('Sjælland USF P')),
    ('0893', _('Sjælland USF B')),
    ('0894', _('Udbetaling')),
    ('0897', _('eBrevsprækken')),
    ('0899', _('Kommuneservice')),
    ('0900', _('København C')),
    ('0910', _('København C')),
    ('0917', _('Københavns Pakkecenter')),
    ('0918', _('Københavns Pakke BRC')),
    ('0919', _('Returprint BRC')),
    ('0929', _('København C')),
    ('0960', _('Internationalt Postcenter')),
    ('0999', _('København C')),
    ('1000', _('København K')),
    ('1001', _('København K')),
    ('1002', _('København K')),
    ('1003', _('København K')),
    ('1004', _('København K')),
    ('1005', _('København K')),
    ('1006', _('København K')),
    ('1007', _('København K')),
    ('1008', _('København K')),
    ('1009', _('København K')),
    ('1010', _('København K')),
    ('1011', _('København K')),
    ('1012', _('København K')),
    ('1013', _('København K')),
    ('1014', _('København K')),
    ('1015', _('København K')),
    ('1016', _('København K')),
    ('1017', _('København K')),
    ('1018', _('København K')),
    ('1019', _('København K')),
    ('1020', _('København K')),
    ('1021', _('København K')),
    ('1022', _('København K')),
    ('1023', _('København K')),
    ('1024', _('København K')),
    ('1025', _('København K')),
    ('1026', _('København K')),
    ('1045', _('København K')),
    ('1050', _('København K')),
    ('1051', _('København K')),
    ('1052', _('København K')),
    ('1053', _('København K')),
    ('1054', _('København K')),
    ('1055', _('København K')),
    ('1055', _('København K')),
    ('1056', _('København K')),
    ('1057', _('København K')),
    ('1058', _('København K')),
    ('1059', _('København K')),
    ('1060', _('København K')),
    ('1061', _('København K')),
    ('1062', _('København K')),
    ('1063', _('København K')),
    ('1064', _('København K')),
    ('1065', _('København K')),
    ('1066', _('København K')),
    ('1067', _('København K')),
    ('1068', _('København K')),
    ('1069', _('København K')),
    ('1070', _('København K')),
    ('1071', _('København K')),
    ('1072', _('København K')),
    ('1073', _('København K')),
    ('1074', _('København K')),
    ('1092', _('København K')),
    ('1093', _('København K')),
    ('1095', _('København K')),
    ('1098', _('København K')),
    ('1100', _('København K')),
    ('1101', _('København K')),
    ('1102', _('København K')),
    ('1103', _('København K')),
    ('1104', _('København K')),
    ('1105', _('København K')),
    ('1106', _('København K')),
    ('1107', _('København K')),
    ('1110', _('København K')),
    ('1111', _('København K')),
    ('1112', _('København K')),
    ('1113', _('København K')),
    ('1114', _('København K')),
    ('1115', _('København K')),
    ('1116', _('København K')),
    ('1117', _('København K')),
    ('1118', _('København K')),
    ('1119', _('København K')),
    ('1120', _('København K')),
    ('1121', _('København K')),
    ('1122', _('København K')),
    ('1123', _('København K')),
    ('1124', _('København K')),
    ('1125', _('København K')),
    ('1126', _('København K')),
    ('1127', _('København K')),
    ('1128', _('København K')),
    ('1129', _('København K')),
    ('1130', _('København K')),
    ('1131', _('København K')),
    ('1140', _('København K')),
    ('1147', _('København K')),
    ('1148', _('København K')),
    ('1150', _('København K')),
    ('1151', _('København K')),
    ('1152', _('København K')),
    ('1153', _('København K')),
    ('1154', _('København K')),
    ('1155', _('København K')),
    ('1156', _('København K')),
    ('1157', _('København K')),
    ('1158', _('København K')),
    ('1159', _('København K')),
    ('1160', _('København K')),
    ('1161', _('København K')),
    ('1162', _('København K')),
    ('1163', _('København K')),
    ('1164', _('København K')),
    ('1165', _('København K')),
    ('1165', _('København K')),
    ('1166', _('København K')),
    ('1167', _('København K')),
    ('1168', _('København K')),
    ('1169', _('København K')),
    ('1170', _('København K')),
    ('1171', _('København K')),
    ('1172', _('København K')),
    ('1173', _('København K')),
    ('1174', _('København K')),
    ('1175', _('København K')),
    ('1200', _('København K')),
    ('1201', _('København K')),
    ('1202', _('København K')),
    ('1203', _('København K')),
    ('1204', _('København K')),
    ('1205', _('København K')),
    ('1206', _('København K')),
    ('1207', _('København K')),
    ('1208', _('København K')),
    ('1209', _('København K')),
    ('1210', _('København K')),
    ('1211', _('København K')),
    ('1212', _('København K')),
    ('1213', _('København K')),
    ('1214', _('København K')),
    ('1215', _('København K')),
    ('1216', _('København K')),
    ('1217', _('København K')),
    ('1218', _('København K')),
    ('1218', _('København K')),
    ('1218', _('København K')),
    ('1218', _('København K')),
    ('1218', _('København K')),
    ('1218', _('København K')),
    ('1219', _('København K')),
    ('1220', _('København K')),
    ('1221', _('København K')),
    ('1240', _('København K')),
    ('1250', _('København K')),
    ('1251', _('København K')),
    ('1252', _('København K')),
    ('1253', _('København K')),
    ('1254', _('København K')),
    ('1255', _('København K')),
    ('1256', _('København K')),
    ('1257', _('København K')),
    ('1258', _('København K')),
    ('1259', _('København K')),
    ('1259', _('København K')),
    ('1260', _('København K')),
    ('1261', _('København K')),
    ('1263', _('København K')),
    ('1263', _('København K')),
    ('1264', _('København K')),
    ('1265', _('København K')),
    ('1266', _('København K')),
    ('1267', _('København K')),
    ('1268', _('København K')),
    ('1270', _('København K')),
    ('1271', _('København K')),
    ('1291', _('København K')),
    ('1300', _('København K')),
    ('1301', _('København K')),
    ('1302', _('København K')),
    ('1303', _('København K')),
    ('1304', _('København K')),
    ('1306', _('København K')),
    ('1307', _('København K')),
    ('1307', _('København K')),
    ('1308', _('København K')),
    ('1309', _('København K')),
    ('1310', _('København K')),
    ('1311', _('København K')),
    ('1312', _('København K')),
    ('1313', _('København K')),
    ('1314', _('København K')),
    ('1315', _('København K')),
    ('1316', _('København K')),
    ('1317', _('København K')),
    ('1318', _('København K')),
    ('1319', _('København K')),
    ('1320', _('København K')),
    ('1321', _('København K')),
    ('1322', _('København K')),
    ('1323', _('København K')),
    ('1324', _('København K')),
    ('1325', _('København K')),
    ('1326', _('København K')),
    ('1327', _('København K')),
    ('1328', _('København K')),
    ('1329', _('København K')),
    ('1349', _('København K')),
    ('1350', _('København K')),
    ('1352', _('København K')),
    ('1353', _('København K')),
    ('1354', _('København K')),
    ('1355', _('København K')),
    ('1356', _('København K')),
    ('1357', _('København K')),
    ('1358', _('København K')),
    ('1359', _('København K')),
    ('1359', _('København K')),
    ('1360', _('København K')),
    ('1361', _('København K')),
    ('1361', _('København K')),
    ('1362', _('København K')),
    ('1363', _('København K')),
    ('1364', _('København K')),
    ('1365', _('København K')),
    ('1366', _('København K')),
    ('1367', _('København K')),
    ('1368', _('København K')),
    ('1369', _('København K')),
    ('1370', _('København K')),
    ('1371', _('København K')),
    ('1400', _('København K')),
    ('1400', _('København K')),
    ('1401', _('København K')),
    ('1402', _('København K')),
    ('1402', _('København K')),
    ('1402', _('København K')),
    ('1402', _('København K')),
    ('1402', _('København K')),
    ('1403', _('København K')),
    ('1404', _('København K')),
    ('1406', _('København K')),
    ('1407', _('København K')),
    ('1408', _('København K')),
    ('1409', _('København K')),
    ('1410', _('København K')),
    ('1411', _('København K')),
    ('1411', _('København K')),
    ('1412', _('København K')),
    ('1413', _('København K')),
    ('1414', _('København K')),
    ('1415', _('København K')),
    ('1416', _('København K')),
    ('1417', _('København K')),
    ('1418', _('København K')),
    ('1419', _('København K')),
    ('1420', _('København K')),
    ('1421', _('København K')),
    ('1422', _('København K')),
    ('1423', _('København K')),
    ('1424', _('København K')),
    ('1425', _('København K')),
    ('1426', _('København K')),
    ('1427', _('København K')),
    ('1428', _('København K')),
    ('1429', _('København K')),
    ('1430', _('København K')),
    ('1431', _('København K')),
    ('1432', _('København K')),
    ('1432', _('København K')),
    ('1432', _('København K')),
    ('1433', _('København K')),
    ('1433', _('København K')),
    ('1433', _('København K')),
    ('1433', _('København K')),
    ('1433', _('København K')),
    ('1433', _('København K')),
    ('1433', _('København K')),
    ('1434', _('København K')),
    ('1435', _('København K')),
    ('1436', _('København K')),
    ('1436', _('København K')),
    ('1436', _('København K')),
    ('1436', _('København K')),
    ('1436', _('København K')),
    ('1436', _('København K')),
    ('1436', _('København K')),
    ('1437', _('København K')),
    ('1437', _('København K')),
    ('1437', _('København K')),
    ('1437', _('København K')),
    ('1437', _('København K')),
    ('1437', _('København K')),
    ('1437', _('København K')),
    ('1437', _('København K')),
    ('1437', _('København K')),
    ('1437', _('København K')),
    ('1437', _('København K')),
    ('1437', _('København K')),
    ('1438', _('København K')),
    ('1438', _('København K')),
    ('1438', _('København K')),
    ('1438', _('København K')),
    ('1438', _('København K')),
    ('1439', _('København K')),
    ('1439', _('København K')),
    ('1439', _('København K')),
    ('1439', _('København K')),
    ('1439', _('København K')),
    ('1439', _('København K')),
    ('1439', _('København K')),
    ('1439', _('København K')),
    ('1439', _('København K')),
    ('1439', _('København K')),
    ('1439', _('København K')),
    ('1439', _('København K')),
    ('1439', _('København K')),
    ('1439', _('København K')),
    ('1439', _('København K')),
    ('1440', _('København K')),
    ('1440', _('København K')),
    ('1440', _('København K')),
    ('1440', _('København K')),
    ('1440', _('København K')),
    ('1440', _('København K')),
    ('1440', _('København K')),
    ('1440', _('København K')),
    ('1440', _('København K')),
    ('1440', _('København K')),
    ('1440', _('København K')),
    ('1441', _('København K')),
    ('1441', _('København K')),
    ('1441', _('København K')),
    ('1448', _('København K')),
    ('1450', _('København K')),
    ('1451', _('København K')),
    ('1452', _('København K')),
    ('1453', _('København K')),
    ('1454', _('København K')),
    ('1455', _('København K')),
    ('1456', _('København K')),
    ('1457', _('København K')),
    ('1458', _('København K')),
    ('1459', _('København K')),
    ('1460', _('København K')),
    ('1461', _('København K')),
    ('1462', _('København K')),
    ('1463', _('København K')),
    ('1464', _('København K')),
    ('1465', _('København K')),
    ('1466', _('København K')),
    ('1467', _('København K')),
    ('1468', _('København K')),
    ('1470', _('København K')),
    ('1471', _('København K')),
    ('1472', _('København K')),
    ('1473', _('København K')),
    ('1500', _('København V')),
    ('1501', _('København V')),
    ('1502', _('København V')),
    ('1503', _('København V')),
    ('1504', _('København V')),
    ('1505', _('København V')),
    ('1506', _('København V')),
    ('1507', _('København V')),
    ('1508', _('København V')),
    ('1509', _('København V')),
    ('1510', _('København V')),
    ('1512', _('Returpost')),
    ('1513', _('Centraltastning')),
    ('1532', _('København V')),
    ('1533', _('København V')),
    ('1550', _('København V')),
    ('1550', _('København V')),
    ('1551', _('København V')),
    ('1552', _('København V')),
    ('1553', _('København V')),
    ('1553', _('København V')),
    ('1554', _('København V')),
    ('1555', _('København V')),
    ('1556', _('København V')),
    ('1557', _('København V')),
    ('1558', _('København V')),
    ('1559', _('København V')),
    ('1560', _('København V')),
    ('1561', _('København V')),
    ('1561', _('København V')),
    ('1562', _('København V')),
    ('1563', _('København V')),
    ('1564', _('København V')),
    ('1566', _('København V')),
    ('1567', _('København V')),
    ('1568', _('København V')),
    ('1569', _('København V')),
    ('1570', _('København V')),
    ('1570', _('København V')),
    ('1571', _('København V')),
    ('1572', _('København V')),
    ('1573', _('København V')),
    ('1574', _('København V')),
    ('1575', _('København V')),
    ('1576', _('København V')),
    ('1577', _('København V')),
    ('1577', _('København V')),
    ('1577', _('København V')),
    ('1592', _('København V')),
    ('1599', _('København V')),
    ('1600', _('København V')),
    ('1601', _('København V')),
    ('1602', _('København V')),
    ('1603', _('København V')),
    ('1604', _('København V')),
    ('1605', _('København V')),
    ('1606', _('København V')),
    ('1607', _('København V')),
    ('1608', _('København V')),
    ('1609', _('København V')),
    ('1610', _('København V')),
    ('1611', _('København V')),
    ('1612', _('København V')),
    ('1613', _('København V')),
    ('1614', _('København V')),
    ('1615', _('København V')),
    ('1616', _('København V')),
    ('1617', _('København V')),
    ('1618', _('København V')),
    ('1619', _('København V')),
    ('1620', _('København V')),
    ('1620', _('København V')),
    ('1621', _('København V')),
    ('1622', _('København V')),
    ('1623', _('København V')),
    ('1624', _('København V')),
    ('1630', _('København V')),
    ('1631', _('København V')),
    ('1632', _('København V')),
    ('1633', _('København V')),
    ('1634', _('København V')),
    ('1635', _('København V')),
    ('1640', _('København V')),
    ('1650', _('København V')),
    ('1651', _('København V')),
    ('1652', _('København V')),
    ('1653', _('København V')),
    ('1654', _('København V')),
    ('1655', _('København V')),
    ('1656', _('København V')),
    ('1657', _('København V')),
    ('1658', _('København V')),
    ('1659', _('København V')),
    ('1660', _('København V')),
    ('1660', _('København V')),
    ('1661', _('København V')),
    ('1662', _('København V')),
    ('1663', _('København V')),
    ('1664', _('København V')),
    ('1665', _('København V')),
    ('1666', _('København V')),
    ('1667', _('København V')),
    ('1668', _('København V')),
    ('1669', _('København V')),
    ('1670', _('København V')),
    ('1671', _('København V')),
    ('1671', _('København V')),
    ('1672', _('København V')),
    ('1673', _('København V')),
    ('1674', _('København V')),
    ('1675', _('København V')),
    ('1676', _('København V')),
    ('1677', _('København V')),
    ('1699', _('København V')),
    ('1700', _('København V')),
    ('1701', _('København V')),
    ('1702', _('København V')),
    ('1703', _('København V')),
    ('1704', _('København V')),
    ('1705', _('København V')),
    ('1706', _('København V')),
    ('1707', _('København V')),
    ('1708', _('København V')),
    ('1709', _('København V')),
    ('1710', _('København V')),
    ('1711', _('København V')),
    ('1711', _('København V')),
    ('1712', _('København V')),
    ('1713', _('København V')),
    ('1714', _('København V')),
    ('1715', _('København V')),
    ('1716', _('København V')),
    ('1717', _('København V')),
    ('1718', _('København V')),
    ('1719', _('København V')),
    ('1720', _('København V')),
    ('1721', _('København V')),
    ('1722', _('København V')),
    ('1723', _('København V')),
    ('1724', _('København V')),
    ('1725', _('København V')),
    ('1726', _('København V')),
    ('1727', _('København V')),
    ('1728', _('København V')),
    ('1729', _('København V')),
    ('1730', _('København V')),
    ('1731', _('København V')),
    ('1732', _('København V')),
    ('1733', _('København V')),
    ('1734', _('København V')),
    ('1735', _('København V')),
    ('1736', _('København V')),
    ('1737', _('København V')),
    ('1738', _('København V')),
    ('1739', _('København V')),
    ('1749', _('København V')),
    ('1750', _('København V')),
    ('1751', _('København V')),
    ('1752', _('København V')),
    ('1753', _('København V')),
    ('1754', _('København V')),
    ('1755', _('København V')),
    ('1756', _('København V')),
    ('1757', _('København V')),
    ('1758', _('København V')),
    ('1759', _('København V')),
    ('1760', _('København V')),
    ('1761', _('København V')),
    ('1762', _('København V')),
    ('1763', _('København V')),
    ('1764', _('København V')),
    ('1765', _('København V')),
    ('1766', _('København V')),
    ('1770', _('København V')),
    ('1771', _('København V')),
    ('1772', _('København V')),
    ('1773', _('København V')),
    ('1774', _('København V')),
    ('1775', _('København V')),
    ('1777', _('København V')),
    ('1780', _('København V')),
    ('1782', _('København V')),
    ('1785', _('København V')),
    ('1786', _('København V')),
    ('1787', _('København V')),
    ('1790', _('København V')),
    ('1799', _('København V')),
    ('1799', _('København V')),
    ('1799', _('København V')),
    ('1799', _('København V')),
    ('1799', _('København V')),
    ('1799', _('København V')),
    ('1799', _('København V')),
    ('1799', _('København V')),
    ('1799', _('København V')),
    ('1799', _('København V')),
    ('1799', _('København V')),
    ('1799', _('København V')),
    ('1800', _('Frederiksberg C')),
    ('1801', _('Frederiksberg C')),
    ('1802', _('Frederiksberg C')),
    ('1803', _('Frederiksberg C')),
    ('1804', _('Frederiksberg C')),
    ('1805', _('Frederiksberg C')),
    ('1806', _('Frederiksberg C')),
    ('1807', _('Frederiksberg C')),
    ('1808', _('Frederiksberg C')),
    ('1809', _('Frederiksberg C')),
    ('1810', _('Frederiksberg C')),
    ('1811', _('Frederiksberg C')),
    ('1812', _('Frederiksberg C')),
    ('1813', _('Frederiksberg C')),
    ('1814', _('Frederiksberg C')),
    ('1815', _('Frederiksberg C')),
    ('1816', _('Frederiksberg C')),
    ('1817', _('Frederiksberg C')),
    ('1818', _('Frederiksberg C')),
    ('1819', _('Frederiksberg C')),
    ('1820', _('Frederiksberg C')),
    ('1822', _('Frederiksberg C')),
    ('1823', _('Frederiksberg C')),
    ('1824', _('Frederiksberg C')),
    ('1825', _('Frederiksberg C')),
    ('1826', _('Frederiksberg C')),
    ('1827', _('Frederiksberg C')),
    ('1828', _('Frederiksberg C')),
    ('1829', _('Frederiksberg C')),
    ('1835', _('Frederiksberg C')),
    ('1850', _('Frederiksberg C')),
    ('1851', _('Frederiksberg C')),
    ('1852', _('Frederiksberg C')),
    ('1853', _('Frederiksberg C')),
    ('1854', _('Frederiksberg C')),
    ('1855', _('Frederiksberg C')),
    ('1856', _('Frederiksberg C')),
    ('1857', _('Frederiksberg C')),
    ('1860', _('Frederiksberg C')),
    ('1861', _('Frederiksberg C')),
    ('1862', _('Frederiksberg C')),
    ('1863', _('Frederiksberg C')),
    ('1864', _('Frederiksberg C')),
    ('1865', _('Frederiksberg C')),
    ('1866', _('Frederiksberg C')),
    ('1867', _('Frederiksberg C')),
    ('1868', _('Frederiksberg C')),
    ('1870', _('Frederiksberg C')),
    ('1871', _('Frederiksberg C')),
    ('1872', _('Frederiksberg C')),
    ('1873', _('Frederiksberg C')),
    ('1874', _('Frederiksberg C')),
    ('1875', _('Frederiksberg C')),
    ('1876', _('Frederiksberg C')),
    ('1877', _('Frederiksberg C')),
    ('1878', _('Frederiksberg C')),
    ('1879', _('Frederiksberg C')),
    ('1900', _('Frederiksberg C')),
    ('1901', _('Frederiksberg C')),
    ('1902', _('Frederiksberg C')),
    ('1903', _('Frederiksberg C')),
    ('1904', _('Frederiksberg C')),
    ('1905', _('Frederiksberg C')),
    ('1906', _('Frederiksberg C')),
    ('1908', _('Frederiksberg C')),
    ('1909', _('Frederiksberg C')),
    ('1910', _('Frederiksberg C')),
    ('1911', _('Frederiksberg C')),
    ('1912', _('Frederiksberg C')),
    ('1913', _('Frederiksberg C')),
    ('1914', _('Frederiksberg C')),
    ('1915', _('Frederiksberg C')),
    ('1916', _('Frederiksberg C')),
    ('1917', _('Frederiksberg C')),
    ('1920', _('Frederiksberg C')),
    ('1921', _('Frederiksberg C')),
    ('1922', _('Frederiksberg C')),
    ('1923', _('Frederiksberg C')),
    ('1924', _('Frederiksberg C')),
    ('1925', _('Frederiksberg C')),
    ('1926', _('Frederiksberg C')),
    ('1927', _('Frederiksberg C')),
    ('1928', _('Frederiksberg C')),
    ('1931', _('Frederiksberg C')),
    ('1950', _('Frederiksberg C')),
    ('1951', _('Frederiksberg C')),
    ('1952', _('Frederiksberg C')),
    ('1953', _('Frederiksberg C')),
    ('1954', _('Frederiksberg C')),
    ('1955', _('Frederiksberg C')),
    ('1956', _('Frederiksberg C')),
    ('1957', _('Frederiksberg C')),
    ('1958', _('Frederiksberg C')),
    ('1959', _('Frederiksberg C')),
    ('1960', _('Frederiksberg C')),
    ('1961', _('Frederiksberg C')),
    ('1962', _('Frederiksberg C')),
    ('1963', _('Frederiksberg C')),
    ('1964', _('Frederiksberg C')),
    ('1965', _('Frederiksberg C')),
    ('1966', _('Frederiksberg C')),
    ('1967', _('Frederiksberg C')),
    ('1970', _('Frederiksberg C')),
    ('1971', _('Frederiksberg C')),
    ('1972', _('Frederiksberg C')),
    ('1973', _('Frederiksberg C')),
    ('1974', _('Frederiksberg C')),
    ('2000', _('Frederiksberg')),
    ('2100', _('København Ø')),
    ('2150', _('Nordhavn')),
    ('2200', _('København N')),
    ('2300', _('København S')),
    ('2400', _('København NV')),
    ('2450', _('København SV')),
    ('2500', _('Valby')),
    ('2600', _('Glostrup')),
    ('2605', _('Brøndby')),
    ('2610', _('Rødovre')),
    ('2620', _('Albertslund')),
    ('2625', _('Vallensbæk')),
    ('2630', _('Taastrup')),
    ('2635', _('Ishøj')),
    ('2640', _('Hedehusene')),
    ('2650', _('Hvidovre')),
    ('2660', _('Brøndby Strand')),
    ('2665', _('Vallensbæk Strand')),
    ('2670', _('Greve')),
    ('2680', _('Solrød Strand')),
    ('2690', _('Karlslunde')),
    ('2700', _('Brønshøj')),
    ('2720', _('Vanløse')),
    ('2730', _('Herlev')),
    ('2740', _('Skovlunde')),
    ('2750', _('Ballerup')),
    ('2760', _('Måløv')),
    ('2765', _('Smørum')),
    ('2770', _('Kastrup')),
    ('2791', _('Dragør')),
    ('2800', _('Kongens Lyngby')),
    ('2820', _('Gentofte')),
    ('2830', _('Virum')),
    ('2840', _('Holte')),
    ('2850', _('Nærum')),
    ('2860', _('Søborg')),
    ('2870', _('Dyssegård')),
    ('2880', _('Bagsværd')),
    ('2900', _('Hellerup')),
    ('2920', _('Charlottenlund')),
    ('2930', _('Klampenborg')),
    ('2942', _('Skodsborg')),
    ('2950', _('Vedbæk')),
    ('2960', _('Rungsted Kyst')),
    ('2970', _('Hørsholm')),
    ('2980', _('Kokkedal')),
    ('2990', _('Nivå')),
    ('3000', _('Helsingør')),
    ('3050', _('Humlebæk')),
    ('3060', _('Espergærde')),
    ('3070', _('Snekkersten')),
    ('3080', _('Tikøb')),
    ('3100', _('Hornbæk')),
    ('3120', _('Dronningmølle')),
    ('3140', _('Ålsgårde')),
    ('3150', _('Hellebæk')),
    ('3200', _('Helsinge')),
    ('3210', _('Vejby')),
    ('3220', _('Tisvildeleje')),
    ('3230', _('Græsted')),
    ('3250', _('Gilleleje')),
    ('3300', _('Frederiksværk')),
    ('3310', _('Ølsted')),
    ('3320', _('Skævinge')),
    ('3330', _('Gørløse')),
    ('3360', _('Liseleje')),
    ('3370', _('Melby')),
    ('3390', _('Hundested')),
    ('3400', _('Hillerød')),
    ('3450', _('Allerød')),
    ('3460', _('Birkerød')),
    ('3480', _('Fredensborg')),
    ('3490', _('Kvistgård')),
    ('3500', _('Værløse')),
    ('3520', _('Farum')),
    ('3540', _('Lynge')),
    ('3550', _('Slangerup')),
    ('3600', _('Frederikssund')),
    ('3630', _('Jægerspris')),
    ('3650', _('Ølstykke')),
    ('3660', _('Stenløse')),
    ('3670', _('Veksø Sjælland')),
    ('3700', _('Rønne')),
    ('3720', _('Aakirkeby')),
    ('3730', _('Nexø')),
    ('3740', _('Svaneke')),
    ('3751', _('Østermarie')),
    ('3760', _('Gudhjem')),
    ('3770', _('Allinge')),
    ('3782', _('Klemensker')),
    ('3790', _('Hasle')),
    ('4000', _('Roskilde')),
    ('4030', _('Tune')),
    ('4040', _('Jyllinge')),
    ('4050', _('Skibby')),
    ('4060', _('Kirke Såby')),
    ('4070', _('Kirke Hyllinge')),
    ('4100', _('Ringsted')),
    ('4129', _('Ringsted')),
    ('4130', _('Viby Sjælland')),
    ('4140', _('Borup')),
    ('4160', _('Herlufmagle')),
    ('4171', _('Glumsø')),
    ('4173', _('Fjenneslev')),
    ('4174', _('Jystrup Midtsj')),
    ('4180', _('Sorø')),
    ('4190', _('Munke Bjergby')),
    ('4200', _('Slagelse')),
    ('4220', _('Korsør')),
    ('4230', _('Skælskør')),
    ('4241', _('Vemmelev')),
    ('4242', _('Boeslunde')),
    ('4243', _('Rude')),
    ('4250', _('Fuglebjerg')),
    ('4261', _('Dalmose')),
    ('4262', _('Sandved')),
    ('4270', _('Høng')),
    ('4281', _('Gørlev')),
    ('4291', _('Ruds Vedby')),
    ('4293', _('Dianalund')),
    ('4295', _('Stenlille')),
    ('4296', _('Nyrup')),
    ('4300', _('Holbæk')),
    ('4320', _('Lejre')),
    ('4330', _('Hvalsø')),
    ('4340', _('Tølløse')),
    ('4350', _('Ugerløse')),
    ('4360', _('Kirke Eskilstrup')),
    ('4370', _('Store Merløse')),
    ('4390', _('Vipperød')),
    ('4400', _('Kalundborg')),
    ('4420', _('Regstrup')),
    ('4440', _('Mørkøv')),
    ('4450', _('Jyderup')),
    ('4460', _('Snertinge')),
    ('4470', _('Svebølle')),
    ('4480', _('Store Fuglede')),
    ('4490', _('Jerslev Sjælland')),
    ('4500', _('Nykøbing Sj')),
    ('4520', _('Svinninge')),
    ('4532', _('Gislinge')),
    ('4534', _('Hørve')),
    ('4540', _('Fårevejle')),
    ('4550', _('Asnæs')),
    ('4560', _('Vig')),
    ('4571', _('Grevinge')),
    ('4572', _('Nørre Asmindrup')),
    ('4573', _('Højby')),
    ('4581', _('Rørvig')),
    ('4583', _('Sjællands Odde')),
    ('4591', _('Føllenslev')),
    ('4592', _('Sejerø')),
    ('4593', _('Eskebjerg')),
    ('4600', _('Køge')),
    ('4621', _('Gadstrup')),
    ('4622', _('Havdrup')),
    ('4623', _('Lille Skensved')),
    ('4632', _('Bjæverskov')),
    ('4640', _('Faxe')),
    ('4652', _('Hårlev')),
    ('4653', _('Karise')),
    ('4654', _('Faxe Ladeplads')),
    ('4660', _('Store Heddinge')),
    ('4671', _('Strøby')),
    ('4672', _('Klippinge')),
    ('4673', _('Rødvig Stevns')),
    ('4681', _('Herfølge')),
    ('4682', _('Tureby')),
    ('4683', _('Rønnede')),
    ('4684', _('Holmegaard')),
    ('4690', _('Haslev')),
    ('4700', _('Næstved')),
    ('4720', _('Præstø')),
    ('4733', _('Tappernøje')),
    ('4735', _('Mern')),
    ('4736', _('Karrebæksminde')),
    ('4750', _('Lundby')),
    ('4760', _('Vordingborg')),
    ('4771', _('Kalvehave')),
    ('4772', _('Langebæk')),
    ('4773', _('Stensved')),
    ('4780', _('Stege')),
    ('4791', _('Borre')),
    ('4792', _('Askeby')),
    ('4793', _('Bogø By')),
    ('4800', _('Nykøbing F')),
    ('4840', _('Nørre Alslev')),
    ('4850', _('Stubbekøbing')),
    ('4862', _('Guldborg')),
    ('4863', _('Eskilstrup')),
    ('4871', _('Horbelev')),
    ('4872', _('Idestrup')),
    ('4873', _('Væggerløse')),
    ('4874', _('Gedser')),
    ('4880', _('Nysted')),
    ('4891', _('Toreby L')),
    ('4892', _('Kettinge')),
    ('4894', _('Øster Ulslev')),
    ('4895', _('Errindlev')),
    ('4900', _('Nakskov')),
    ('4912', _('Harpelunde')),
    ('4913', _('Horslunde')),
    ('4920', _('Søllested')),
    ('4930', _('Maribo')),
    ('4941', _('Bandholm')),
    ('4943', _('Torrig L')),
    ('4944', _('Fejø')),
    ('4951', _('Nørreballe')),
    ('4952', _('Stokkemarke')),
    ('4953', _('Vesterborg')),
    ('4960', _('Holeby')),
    ('4970', _('Rødby')),
    ('4983', _('Dannemare')),
    ('4990', _('Sakskøbing')),
    ('4992', _('Midtsjælland USF P')),
    ('5000', _('Odense C')),
    ('5029', _('Odense C')),
    ('5100', _('Odense C')),
    ('5200', _('Odense V')),
    ('5210', _('Odense NV')),
    ('5220', _('Odense SØ')),
    ('5230', _('Odense M')),
    ('5240', _('Odense NØ')),
    ('5250', _('Odense SV')),
    ('5260', _('Odense S')),
    ('5270', _('Odense N')),
    ('5290', _('Marslev')),
    ('5300', _('Kerteminde')),
    ('5320', _('Agedrup')),
    ('5330', _('Munkebo')),
    ('5350', _('Rynkeby')),
    ('5370', _('Mesinge')),
    ('5380', _('Dalby')),
    ('5390', _('Martofte')),
    ('5400', _('Bogense')),
    ('5450', _('Otterup')),
    ('5462', _('Morud')),
    ('5463', _('Harndrup')),
    ('5464', _('Brenderup Fyn')),
    ('5466', _('Asperup')),
    ('5471', _('Søndersø')),
    ('5474', _('Veflinge')),
    ('5485', _('Skamby')),
    ('5491', _('Blommenslyst')),
    ('5492', _('Vissenbjerg')),
    ('5500', _('Middelfart')),
    ('5540', _('Ullerslev')),
    ('5550', _('Langeskov')),
    ('5560', _('Aarup')),
    ('5580', _('Nørre Aaby')),
    ('5591', _('Gelsted')),
    ('5592', _('Ejby')),
    ('5600', _('Faaborg')),
    ('5610', _('Assens')),
    ('5620', _('Glamsbjerg')),
    ('5631', _('Ebberup')),
    ('5642', _('Millinge')),
    ('5672', _('Broby')),
    ('5683', _('Haarby')),
    ('5690', _('Tommerup')),
    ('5700', _('Svendborg')),
    ('5750', _('Ringe')),
    ('5762', _('Vester Skerninge')),
    ('5771', _('Stenstrup')),
    ('5772', _('Kværndrup')),
    ('5792', _('Årslev')),
    ('5800', _('Nyborg')),
    ('5853', _('Ørbæk')),
    ('5854', _('Gislev')),
    ('5856', _('Ryslinge')),
    ('5863', _('Ferritslev Fyn')),
    ('5871', _('Frørup')),
    ('5874', _('Hesselager')),
    ('5881', _('Skårup Fyn')),
    ('5882', _('Vejstrup')),
    ('5883', _('Oure')),
    ('5884', _('Gudme')),
    ('5892', _('Gudbjerg Sydfyn')),
    ('5900', _('Rudkøbing')),
    ('5932', _('Humble')),
    ('5935', _('Bagenkop')),
    ('5953', _('Tranekær')),
    ('5960', _('Marstal')),
    ('5970', _('Ærøskøbing')),
    ('5985', _('Søby Ærø')),
    ('6000', _('Kolding')),
    ('6040', _('Egtved')),
    ('6051', _('Almind')),
    ('6052', _('Viuf')),
    ('6064', _('Jordrup')),
    ('6070', _('Christiansfeld')),
    ('6091', _('Bjert')),
    ('6092', _('Sønder Stenderup')),
    ('6093', _('Sjølund')),
    ('6094', _('Hejls')),
    ('6100', _('Haderslev')),
    ('6200', _('Aabenraa')),
    ('6230', _('Rødekro')),
    ('6240', _('Løgumkloster')),
    ('6261', _('Bredebro')),
    ('6270', _('Tønder')),
    ('6280', _('Højer')),
    ('6300', _('Gråsten')),
    ('6310', _('Broager')),
    ('6320', _('Egernsund')),
    ('6330', _('Padborg')),
    ('6340', _('Kruså')),
    ('6360', _('Tinglev')),
    ('6372', _('Bylderup-Bov')),
    ('6392', _('Bolderslev')),
    ('6400', _('Sønderborg')),
    ('6430', _('Nordborg')),
    ('6440', _('Augustenborg')),
    ('6470', _('Sydals')),
    ('6500', _('Vojens')),
    ('6510', _('Gram')),
    ('6520', _('Toftlund')),
    ('6534', _('Agerskov')),
    ('6535', _('Branderup J')),
    ('6541', _('Bevtoft')),
    ('6560', _('Sommersted')),
    ('6580', _('Vamdrup')),
    ('6600', _('Vejen')),
    ('6621', _('Gesten')),
    ('6622', _('Bække')),
    ('6623', _('Vorbasse')),
    ('6630', _('Rødding')),
    ('6640', _('Lunderskov')),
    ('6650', _('Brørup')),
    ('6660', _('Lintrup')),
    ('6670', _('Holsted')),
    ('6682', _('Hovborg')),
    ('6683', _('Føvling')),
    ('6690', _('Gørding')),
    ('6700', _('Esbjerg')),
    ('6701', _('Esbjerg')),
    ('6705', _('Esbjerg Ø')),
    ('6710', _('Esbjerg V')),
    ('6715', _('Esbjerg N')),
    ('6720', _('Fanø')),
    ('6731', _('Tjæreborg')),
    ('6740', _('Bramming')),
    ('6752', _('Glejbjerg')),
    ('6753', _('Agerbæk')),
    ('6760', _('Ribe')),
    ('6771', _('Gredstedbro')),
    ('6780', _('Skærbæk')),
    ('6792', _('Rømø')),
    ('6800', _('Varde')),
    ('6818', _('Årre')),
    ('6823', _('Ansager')),
    ('6830', _('Nørre Nebel')),
    ('6840', _('Oksbøl')),
    ('6851', _('Janderup Vestj')),
    ('6852', _('Billum')),
    ('6853', _('Vejers Strand')),
    ('6854', _('Henne')),
    ('6855', _('Outrup')),
    ('6857', _('Blåvand')),
    ('6862', _('Tistrup')),
    ('6870', _('Ølgod')),
    ('6880', _('Tarm')),
    ('6893', _('Hemmet')),
    ('6900', _('Skjern')),
    ('6920', _('Videbæk')),
    ('6933', _('Kibæk')),
    ('6940', _('Lem St')),
    ('6950', _('Ringkøbing')),
    ('6960', _('Hvide Sande')),
    ('6971', _('Spjald')),
    ('6973', _('Ørnhøj')),
    ('6980', _('Tim')),
    ('6990', _('Ulfborg')),
    ('7000', _('Fredericia')),
    ('7007', _('Fredericia')),
    ('7017', _('Taulov Pakkecenter')),
    ('7018', _('Pakker TLP')),
    ('7029', _('Fredericia')),
    ('7080', _('Børkop')),
    ('7100', _('Vejle')),
    ('7120', _('Vejle Øst')),
    ('7130', _('Juelsminde')),
    ('7140', _('Stouby')),
    ('7150', _('Barrit')),
    ('7160', _('Tørring')),
    ('7171', _('Uldum')),
    ('7173', _('Vonge')),
    ('7182', _('Bredsten')),
    ('7183', _('Randbøl')),
    ('7184', _('Vandel')),
    ('7190', _('Billund')),
    ('7200', _('Grindsted')),
    ('7250', _('Hejnsvig')),
    ('7260', _('Sønder Omme')),
    ('7270', _('Stakroge')),
    ('7280', _('Sønder Felding')),
    ('7300', _('Jelling')),
    ('7321', _('Gadbjerg')),
    ('7323', _('Give')),
    ('7330', _('Brande')),
    ('7361', _('Ejstrupholm')),
    ('7362', _('Hampen')),
    ('7400', _('Herning')),
    ('7429', _('Herning')),
    ('7430', _('Ikast')),
    ('7441', _('Bording')),
    ('7442', _('Engesvang')),
    ('7451', _('Sunds')),
    ('7470', _('Karup J')),
    ('7480', _('Vildbjerg')),
    ('7490', _('Aulum')),
    ('7500', _('Holstebro')),
    ('7540', _('Haderup')),
    ('7550', _('Sørvad')),
    ('7560', _('Hjerm')),
    ('7570', _('Vemb')),
    ('7600', _('Struer')),
    ('7620', _('Lemvig')),
    ('7650', _('Bøvlingbjerg')),
    ('7660', _('Bækmarksbro')),
    ('7673', _('Harboøre')),
    ('7680', _('Thyborøn')),
    ('7700', _('Thisted')),
    ('7730', _('Hanstholm')),
    ('7741', _('Frøstrup')),
    ('7742', _('Vesløs')),
    ('7752', _('Snedsted')),
    ('7755', _('Bedsted Thy')),
    ('7760', _('Hurup Thy')),
    ('7770', _('Vestervig')),
    ('7790', _('Thyholm')),
    ('7800', _('Skive')),
    ('7830', _('Vinderup')),
    ('7840', _('Højslev')),
    ('7850', _('Stoholm Jyll')),
    ('7860', _('Spøttrup')),
    ('7870', _('Roslev')),
    ('7884', _('Fur')),
    ('7900', _('Nykøbing M')),
    ('7950', _('Erslev')),
    ('7960', _('Karby')),
    ('7970', _('Redsted M')),
    ('7980', _('Vils')),
    ('7990', _('Øster Assels')),
    ('7992', _('Sydjylland/Fyn USF P')),
    ('7993', _('Sydjylland/Fyn USF B')),
    ('7996', _('Fakturaservice')),
    ('7997', _('Fakturascanning')),
    ('7998', _('Statsservice')),
    ('7999', _('Kommunepost')),
    ('8000', _('Aarhus C')),
    ('8100', _('Aarhus C')),
    ('8200', _('Aarhus N')),
    ('8210', _('Aarhus V')),
    ('8220', _('Brabrand')),
    ('8229', _('Risskov Ø')),
    ('8230', _('Åbyhøj')),
    ('8240', _('Risskov')),
    ('8245', _('Risskov Ø')),
    ('8250', _('Egå')),
    ('8260', _('Viby J')),
    ('8270', _('Højbjerg')),
    ('8300', _('Odder')),
    ('8305', _('Samsø')),
    ('8310', _('Tranbjerg J')),
    ('8320', _('Mårslet')),
    ('8330', _('Beder')),
    ('8340', _('Malling')),
    ('8350', _('Hundslund')),
    ('8355', _('Solbjerg')),
    ('8361', _('Hasselager')),
    ('8362', _('Hørning')),
    ('8370', _('Hadsten')),
    ('8380', _('Trige')),
    ('8381', _('Tilst')),
    ('8382', _('Hinnerup')),
    ('8400', _('Ebeltoft')),
    ('8410', _('Rønde')),
    ('8420', _('Knebel')),
    ('8444', _('Balle')),
    ('8450', _('Hammel')),
    ('8462', _('Harlev J')),
    ('8464', _('Galten')),
    ('8471', _('Sabro')),
    ('8472', _('Sporup')),
    ('8500', _('Grenaa')),
    ('8520', _('Lystrup')),
    ('8530', _('Hjortshøj')),
    ('8541', _('Skødstrup')),
    ('8543', _('Hornslet')),
    ('8544', _('Mørke')),
    ('8550', _('Ryomgård')),
    ('8560', _('Kolind')),
    ('8570', _('Trustrup')),
    ('8581', _('Nimtofte')),
    ('8585', _('Glesborg')),
    ('8586', _('Ørum Djurs')),
    ('8592', _('Anholt')),
    ('8600', _('Silkeborg')),
    ('8620', _('Kjellerup')),
    ('8632', _('Lemming')),
    ('8641', _('Sorring')),
    ('8643', _('Ans By')),
    ('8653', _('Them')),
    ('8654', _('Bryrup')),
    ('8660', _('Skanderborg')),
    ('8670', _('Låsby')),
    ('8680', _('Ry')),
    ('8700', _('Horsens')),
    ('8721', _('Daugård')),
    ('8722', _('Hedensted')),
    ('8723', _('Løsning')),
    ('8732', _('Hovedgård')),
    ('8740', _('Brædstrup')),
    ('8751', _('Gedved')),
    ('8752', _('Østbirk')),
    ('8762', _('Flemming')),
    ('8763', _('Rask Mølle')),
    ('8765', _('Klovborg')),
    ('8766', _('Nørre Snede')),
    ('8781', _('Stenderup')),
    ('8783', _('Hornsyld')),
    ('8800', _('Viborg')),
    ('8830', _('Tjele')),
    ('8831', _('Løgstrup')),
    ('8832', _('Skals')),
    ('8840', _('Rødkærsbro')),
    ('8850', _('Bjerringbro')),
    ('8860', _('Ulstrup')),
    ('8870', _('Langå')),
    ('8881', _('Thorsø')),
    ('8882', _('Fårvang')),
    ('8883', _('Gjern')),
    ('8900', _('Randers C')),
    ('8920', _('Randers NV')),
    ('8930', _('Randers NØ')),
    ('8940', _('Randers SV')),
    ('8950', _('Ørsted')),
    ('8960', _('Randers SØ')),
    ('8961', _('Allingåbro')),
    ('8963', _('Auning')),
    ('8970', _('Havndal')),
    ('8981', _('Spentrup')),
    ('8983', _('Gjerlev J')),
    ('8990', _('Fårup')),
    ('9000', _('Aalborg')),
    ('9029', _('Aalborg')),
    ('9100', _('Aalborg')),
    ('9200', _('Aalborg SV')),
    ('9210', _('Aalborg SØ')),
    ('9220', _('Aalborg Øst')),
    ('9230', _('Svenstrup J')),
    ('9240', _('Nibe')),
    ('9260', _('Gistrup')),
    ('9270', _('Klarup')),
    ('9280', _('Storvorde')),
    ('9293', _('Kongerslev')),
    ('9300', _('Sæby')),
    ('9310', _('Vodskov')),
    ('9320', _('Hjallerup')),
    ('9330', _('Dronninglund')),
    ('9340', _('Asaa')),
    ('9352', _('Dybvad')),
    ('9362', _('Gandrup')),
    ('9370', _('Hals')),
    ('9380', _('Vestbjerg')),
    ('9381', _('Sulsted')),
    ('9382', _('Tylstrup')),
    ('9400', _('Nørresundby')),
    ('9430', _('Vadum')),
    ('9440', _('Aabybro')),
    ('9460', _('Brovst')),
    ('9480', _('Løkken')),
    ('9490', _('Pandrup')),
    ('9492', _('Blokhus')),
    ('9493', _('Saltum')),
    ('9500', _('Hobro')),
    ('9510', _('Arden')),
    ('9520', _('Skørping')),
    ('9530', _('Støvring')),
    ('9541', _('Suldrup')),
    ('9550', _('Mariager')),
    ('9560', _('Hadsund')),
    ('9574', _('Bælum')),
    ('9575', _('Terndrup')),
    ('9600', _('Aars')),
    ('9610', _('Nørager')),
    ('9620', _('Aalestrup')),
    ('9631', _('Gedsted')),
    ('9632', _('Møldrup')),
    ('9640', _('Farsø')),
    ('9670', _('Løgstør')),
    ('9681', _('Ranum')),
    ('9690', _('Fjerritslev')),
    ('9700', _('Brønderslev')),
    ('9740', _('Jerslev J')),
    ('9750', _('Østervrå')),
    ('9760', _('Vrå')),
    ('9800', _('Hjørring')),
    ('9830', _('Tårs')),
    ('9850', _('Hirtshals')),
    ('9870', _('Sindal')),
    ('9881', _('Bindslev')),
    ('9900', _('Frederikshavn')),
    ('9940', _('Læsø')),
    ('9970', _('Strandby')),
    ('9981', _('Jerup')),
    ('9982', _('Ålbæk')),
    ('9990', _('Skagen')),
    ('9992', _('Jylland USF P')),
    ('9993', _('Jylland USF B')),
    ('9996', _('Fakturaservice')),
    ('9997', _('Fakturascanning')),
    ('9998', _('Borgerservice')),
    ('2412', _('Santa Claus/Julemanden')),
    ('3900', _('Nuuk')),
    ('3905', _('Nuussuaq')),
    ('3910', _('Kangerlussuaq')),
    ('3911', _('Sisimiut')),
    ('3912', _('Maniitsoq')),
    ('3913', _('Tasiilaq')),
    ('3915', _('Kulusuk')),
    ('3919', _('Alluitsup Paa')),
    ('3920', _('Qaqortoq')),
    ('3921', _('Narsaq')),
    ('3922', _('Nanortalik')),
    ('3923', _('Narsarsuaq')),
    ('3924', _('Ikerasassuaq')),
    ('3930', _('Kangilinnguit')),
    ('3932', _('Arsuk')),
    ('3940', _('Paamiut')),
    ('3950', _('Aasiaat')),
    ('3951', _('Qasigiannguit')),
    ('3952', _('Ilulissat')),
    ('3953', _('Qeqertarsuaq')),
    ('3955', _('Kangaatsiaq')),
    ('3961', _('Uummannaq')),
    ('3962', _('Upernavik')),
    ('3964', _('Qaarsut')),
    ('3970', _('Pituffik')),
    ('3971', _('Qaanaaq')),
    ('3972', _('Station Nord')),
    ('3980', _('Ittoqqortoormiit')),
    ('3982', _('Mestersvig')),
    ('3984', _('Danmarkshavn')),
    ('3985', _('Constable Pynt')),
    ('3992', _('Slædepatrulje Sirius')),
    ('100', _('Tórshavn')),
    ('110', _('Tórshavn')),
    ('160', _('Argir')),
    ('165', _('Argir')),
    ('175', _('Kirkjubøur')),
    ('176', _('Velbastadur')),
    ('177', _('"Sydradalur, Streymoy"')),
    ('178', _('Nordradalur')),
    ('180', _('Kaldbak')),
    ('185', _('Kaldbaksbotnur')),
    ('186', _('Sund')),
    ('187', _('Hvitanes')),
    ('188', _('Hoyvík')),
    ('210', _('Sandur')),
    ('215', _('Sandur')),
    ('220', _('Skálavík')),
    ('230', _('Húsavík')),
    ('235', _('Dalur')),
    ('236', _('Skarvanes')),
    ('240', _('Skopun')),
    ('260', _('Skúvoy')),
    ('270', _('Nólsoy')),
    ('280', _('Hestur')),
    ('285', _('Koltur')),
    ('286', _('Stóra Dimun')),
    ('330', _('Stykkid')),
    ('335', _('Leynar')),
    ('336', _('Skællingur')),
    ('340', _('Kvívík')),
    ('350', _('Vestmanna')),
    ('355', _('Vestmanna')),
    ('358', _('Válur')),
    ('360', _('Sandavágur')),
    ('370', _('Midvágur')),
    ('375', _('Midvágur')),
    ('380', _('Sørvágur')),
    ('385', _('Vatnsoyrar')),
    ('386', _('Bøur')),
    ('387', _('Gásadalur')),
    ('388', _('Mykines')),
    ('400', _('Oyrarbakki')),
    ('405', _('Oyrarbakki')),
    ('410', _('Kollafjørdur')),
    ('415', _('Oyrareingir')),
    ('416', _('Signabøur')),
    ('420', _('Hósvík')),
    ('430', _('Hvalvík')),
    ('435', _('Streymnes')),
    ('436', _('Saksun')),
    ('437', _('Nesvík')),
    ('438', _('Langasandur')),
    ('440', _('Haldarsvík')),
    ('445', _('Tjørnuvík')),
    ('450', _('Oyri')),
    ('460', _('Nordskáli')),
    ('465', _('Svináir')),
    ('466', _('Ljósá')),
    ('470', _('Eidi')),
    ('475', _('Funningur')),
    ('476', _('Gjógv')),
    ('477', _('Funningsfjørdur')),
    ('478', _('Elduvík')),
    ('480', _('Skáli')),
    ('485', _('Skálafjørdur')),
    ('490', _('Strendur')),
    ('494', _('Innan Glyvur')),
    ('495', _('Kolbanargjógv')),
    ('496', _('Morskranes')),
    ('497', _('Selatrad')),
    ('510', _('Gøta')),
    ('511', _('Gøtugjógv')),
    ('512', _('Nordragøta')),
    ('513', _('Sydrugøta')),
    ('515', _('Gøta')),
    ('520', _('Leirvík')),
    ('530', _('Fuglafjørdur')),
    ('535', _('Fuglafjørdur')),
    ('600', _('Saltangará')),
    ('610', _('Saltangará')),
    ('620', _('Runavík')),
    ('625', _('Glyvrar')),
    ('626', _('Lambareidi')),
    ('627', _('Lambi')),
    ('640', _('Rituvík')),
    ('645', _('Æduvík')),
    ('650', _('Toftir')),
    ('655', _('"Nes, Eysturoy"')),
    ('656', _('Saltnes')),
    ('660', _('Søldarfjørdur')),
    ('665', _('Skipanes')),
    ('666', _('Gøtueidi')),
    ('690', _('Oyndarfjørdur')),
    ('695', _('Hellur')),
    ('700', _('Klaksvík')),
    ('710', _('Klaksvík')),
    ('725', _('Nordoyri')),
    ('726', _('Ánir')),
    ('727', _('Árnafjørdur')),
    ('730', _('Norddepil')),
    ('735', _('Depil')),
    ('736', _('Nordtoftir')),
    ('737', _('Múli')),
    ('740', _('Hvannasund')),
    ('750', _('Vidareidi')),
    ('765', _('Svinoy')),
    ('766', _('Kirkja')),
    ('767', _('Hattarvík')),
    ('780', _('Kunoy')),
    ('785', _('Haraldssund')),
    ('795', _('"Sydradalur, Kalsoy"')),
    ('796', _('Húsar')),
    ('797', _('Mikladalur')),
    ('798', _('Trøllanes')),
    ('800', _('Tvøroyri')),
    ('810', _('Tvøroyri')),
    ('825', _('Frodba')),
    ('826', _('Trongisvágur')),
    ('827', _('Øravík')),
    ('850', _('Hvalba')),
    ('860', _('Sandvík')),
    ('870', _('Fámjin')),
    ('900', _('Vágur')),
    ('910', _('Vágur')),
    ('925', _('"Nes, Vágur"')),
    ('926', _('Lopra')),
    ('927', _('Akrar')),
    ('928', _('Vikarbyrgi')),
    ('950', _('Porkeri')),
    ('960', _('Hov')),
    ('970', _('Sumba'))
)

########NEW FILE########
__FILENAME__ = forms
"""
Denmark specific Form helpers.
"""

from __future__ import absolute_import, unicode_literals
from django.core.exceptions import ValidationError
from django.utils.translation import ugettext_lazy as _
from django.forms import widgets, fields

from .dk_postalcodes import DK_POSTALCODES
from .dk_municipalities import DK_MUNICIPALITIES


def postal_code_validator(value):
    if value not in [zip for zip, city in DK_POSTALCODES]:
        raise ValidationError(_('Enter a postal code in the format XXXX.'))


class DKPostalCodeField(fields.CharField):
    """
    An Input widget that uses a list of Danish postal codes as valid input.
    """
    default_validators = [postal_code_validator]


class DKMunicipalitySelect(widgets.Select):
    """
    A Select widget that uses a list of Danish municipalities (kommuner)
    as its choices.
    """
    def __init__(self, attrs=None, *args, **kwargs):
        super(DKMunicipalitySelect, self).__init__(
            attrs,
            choices=DK_MUNICIPALITIES,
            *args,
            **kwargs
        )


class DKPhoneNumberField(fields.RegexField):
    """
    Field with phone number validation. Requires a phone number with
    8 digits and optional country code
    """
    default_error_messages = {
        'invalid': _(
            'A phone number must be 8 digits and may have country code'
        ),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(DKPhoneNumberField, self).__init__(
            r'^(?:\+45)? ?(\d{2}\s?\d{2}\s?\d{2}\s?\d{2})$',
            max_length,
            min_length,
            *args,
            **kwargs
        )

########NEW FILE########
__FILENAME__ = ec_provinces
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

#: A list of Ecuador departaments as `choices` in a formfield.
PROVINCE_CHOICES = (
    ('A', 'Azuay'),
    ('B', 'Bolívar'),
    ('F', 'Cañar'),
    ('C', 'Carchi'),
    ('H', 'Chimborazo'),
    ('X', 'Cotopaxi'),
    ('O', 'El Oro'),
    ('E', 'Esmeraldas'),
    ('W', 'Galápagos'),
    ('G', 'Guayas'),
    ('I', 'Imbabura'),
    ('L', 'Loja'),
    ('R', 'Los Ríos'),
    ('M', 'Manabí'),
    ('S', 'Morona Santiago'),
    ('N', 'Napo'),
    ('D', 'Orellana'),
    ('Y', 'Pastaza'),
    ('P', 'Pichincha'),
    ('SE', 'Santa Elena'),
    ('SD', 'Santo Domingo de los Tsáchilas'),
    ('U', 'Sucumbíos'),
    ('T', 'Tungurahua'),
    ('Z', 'Zamora Chinchipe'),
)

########NEW FILE########
__FILENAME__ = forms
"""
Ecuador-specific form helpers.
"""
from __future__ import absolute_import

from django.forms.fields import Select

from .ec_provinces import PROVINCE_CHOICES


class ECProvinceSelect(Select):
    """
    A Select widget that uses a list of Ecuador provinces as its choices.
    """
    def __init__(self, attrs=None):
        super(ECProvinceSelect, self).__init__(attrs, choices=PROVINCE_CHOICES)

########NEW FILE########
__FILENAME__ = ee_counties
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.utils.translation import ugettext_lazy as _

#: A list of Estonian counties as `choices` in a formfield.
#: Identifiers based on ISO 3166-2:EE. https://en.wikipedia.org/wiki/ISO_3166-2:EE
COUNTY_CHOICES = (
    ('37', _('Harju County')),
    ('39', _('Hiiu County')),
    ('44', _('Ida-Viru County')),
    ('49', _('Jõgeva County')),
    ('51', _('Järva County')),
    ('57', _('Lääne County')),
    ('59', _('Lääne-Viru County')),
    ('65', _('Põlva County')),
    ('67', _('Pärnu County')),
    ('70', _('Rapla County')),
    ('74', _('Saare County')),
    ('78', _('Tartu County')),
    ('82', _('Valga County')),
    ('84', _('Viljandi County')),
    ('86', _('Võru County')),
)

########NEW FILE########
__FILENAME__ = forms
from __future__ import absolute_import, unicode_literals

import re
from datetime import date

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import Field, RegexField, Select
from django.utils.translation import ugettext_lazy as _

from .ee_counties import COUNTY_CHOICES


idcode = re.compile(r'^([1-6])(\d\d)(\d\d)(\d\d)(?:\d{3})(\d)$')
zipcode = re.compile(r'^[1-9]\d{4}$')


class EEZipCodeField(RegexField):
    """
    A form field that validates input as a Estonian zip code. Valid codes
    consist of five digits; first digit cannot be 0.
    """
    default_error_messages = {
        'invalid': _('Enter a zip code in the format XXXXX.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(EEZipCodeField, self).__init__(zipcode, max_length, min_length, *args, **kwargs)


class EECountySelect(Select):
    """
    A Select widget that uses a list of Estonian counties as its choices.
    """
    def __init__(self, attrs=None):
        super(EECountySelect, self).__init__(attrs, choices=COUNTY_CHOICES)


class EEPersonalIdentificationCode(Field):
    """A form field that validates input as a Estonian personal identification code.

    See: https://www.riigiteataja.ee/akt/106032012004
    """
    default_error_messages = {
        'invalid_format': _('Enter an 11-digit Estonian personal identification code.'),
        'invalid': _('Enter a valid Estonian personal identification code.'),
    }

    @staticmethod
    def ee_checksum(value):
        """Takes a string of 10 digits as input, returns check digit."""

        for i in (1, 3):
            check = 0
            for c in value:
                check += i * int(c)
                i = (i % 9) + 1
            check %= 11
            if check < 10:
                return check
            # If check==10 then we do another loop starting at i=3

        return check % 10

    def clean(self, value):
        super(EEPersonalIdentificationCode, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        match = re.match(idcode, value)
        if not match:
            raise ValidationError(self.error_messages['invalid_format'])

        century, year, month, day, check = map(int, match.groups())

        if check != self.ee_checksum(value[:10]):
            raise ValidationError(self.error_messages['invalid'])

        # Century digit also encodes gender:
        # 1 - male born in 18xx
        # 2 - female born in 18xx
        # 3 - male born in 19xx
        # ...
        year += 1800 + 100 * ((century - 1) // 2)
        try:
            date(year, month, day)
        except ValueError:
            raise ValidationError(self.error_messages['invalid'])

        return value

########NEW FILE########
__FILENAME__ = es_provinces
# -*- coding: utf-8 -*-
from django.utils.translation import ugettext_lazy as _

#: An alphabetical list of provinces
PROVINCE_CHOICES = (
    ('01', _('Araba')),
    ('02', _('Albacete')),
    ('03', _('Alacant')),
    ('04', _('Almeria')),
    ('05', _('Avila')),
    ('06', _('Badajoz')),
    ('07', _('Illes Balears')),
    ('08', _('Barcelona')),
    ('09', _('Burgos')),
    ('10', _('Caceres')),
    ('11', _('Cadiz')),
    ('12', _('Castello')),
    ('13', _('Ciudad Real')),
    ('14', _('Cordoba')),
    ('15', _('A Coruna')),
    ('16', _('Cuenca')),
    ('17', _('Girona')),
    ('18', _('Granada')),
    ('19', _('Guadalajara')),
    ('20', _('Guipuzkoa')),
    ('21', _('Huelva')),
    ('22', _('Huesca')),
    ('23', _('Jaen')),
    ('24', _('Leon')),
    ('25', _('Lleida')),
    ('26', _('La Rioja')),
    ('27', _('Lugo')),
    ('28', _('Madrid')),
    ('29', _('Malaga')),
    ('30', _('Murcia')),
    ('31', _('Navarre')),
    ('32', _('Ourense')),
    ('33', _('Asturias')),
    ('34', _('Palencia')),
    ('35', _('Las Palmas')),
    ('36', _('Pontevedra')),
    ('37', _('Salamanca')),
    ('38', _('Santa Cruz de Tenerife')),
    ('39', _('Cantabria')),
    ('40', _('Segovia')),
    ('41', _('Seville')),
    ('42', _('Soria')),
    ('43', _('Tarragona')),
    ('44', _('Teruel')),
    ('45', _('Toledo')),
    ('46', _('Valencia')),
    ('47', _('Valladolid')),
    ('48', _('Bizkaia')),
    ('49', _('Zamora')),
    ('50', _('Zaragoza')),
    ('51', _('Ceuta')),
    ('52', _('Melilla')),
)

########NEW FILE########
__FILENAME__ = es_regions
# -*- coding: utf-8 -*-
from django.utils.translation import ugettext_lazy as _

#: An alphabetical list of regions
REGION_CHOICES = (
    ('AN', _('Andalusia')),
    ('AR', _('Aragon')),
    ('O', _('Principality of Asturias')),
    ('IB', _('Balearic Islands')),
    ('PV', _('Basque Country')),
    ('CN', _('Canary Islands')),
    ('S', _('Cantabria')),
    ('CM', _('Castile-La Mancha')),
    ('CL', _('Castile and Leon')),
    ('CT', _('Catalonia')),
    ('EX', _('Extremadura')),
    ('GA', _('Galicia')),
    ('LO', _('La Rioja')),
    ('M', _('Madrid')),
    ('MU', _('Region of Murcia')),
    ('NA', _('Foral Community of Navarre')),
    ('VC', _('Valencian Community')),
    ('CE', _('Autonomous city of Ceuta')),
    ('ML', _('Autonomous city of Mellila')),
)

########NEW FILE########
__FILENAME__ = forms
# -*- coding: utf-8 -*-
"""
Spanish-specific Form helpers
"""

from __future__ import absolute_import, unicode_literals

import re

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import RegexField, Select
from django.utils.translation import ugettext_lazy as _

from .es_provinces import PROVINCE_CHOICES
from .es_regions import REGION_CHOICES


class ESPostalCodeField(RegexField):
    """
    A form field that validates its input as a spanish postal code.

    Spanish postal code is a five digits string, with two first digits
    between 01 and 52, assigned to provinces code.
    """
    default_error_messages = {
        'invalid': _('Enter a valid postal code in the range and format 01XXX - 52XXX.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(ESPostalCodeField, self).__init__(
            r'^(0[1-9]|[1-4][0-9]|5[0-2])\d{3}$',
            max_length, min_length, *args, **kwargs)


class ESPhoneNumberField(RegexField):
    """
    A form field that validates its input as a Spanish phone number.
    Information numbers are ommited.

    Spanish phone numbers are nine digit numbers, where first digit is 6 (for
    cell phones), 8 (for special phones), or 9 (for landlines and special
    phones)

    TODO: accept and strip characters like dot, hyphen... in phone number
    """
    default_error_messages = {
        'invalid': _('Enter a valid phone number in one of the formats 6XXXXXXXX, 8XXXXXXXX or 9XXXXXXXX.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(ESPhoneNumberField, self).__init__(r'^(6|7|8|9)\d{8}$',
                                                 max_length, min_length, *args, **kwargs)


class ESIdentityCardNumberField(RegexField):
    """
    Spanish NIF/NIE/CIF (Fiscal Identification Number) code.

    Validates three diferent formats:

        NIF (individuals): 12345678A
        CIF (companies): A12345678
        NIE (foreigners): X12345678A

    according to a couple of simple checksum algorithms.

    Value can include a space or hyphen separator between number and letters.
    Number length is not checked for NIF (or NIE), old values start with a 1,
    and future values can contain digits greater than 8. The CIF control digit
    can be a number or a letter depending on company type. Algorithm is not
    public, and different authors have different opinions on which ones allows
    letters, so both validations are assumed true for all types.
    """
    default_error_messages = {
        'invalid': _('Please enter a valid NIF, NIE, or CIF.'),
        'invalid_only_nif': _('Please enter a valid NIF or NIE.'),
        'invalid_nif': _('Invalid checksum for NIF.'),
        'invalid_nie': _('Invalid checksum for NIE.'),
        'invalid_cif': _('Invalid checksum for CIF.'),
    }

    def __init__(self, only_nif=False, max_length=None, min_length=None, *args, **kwargs):
        self.only_nif = only_nif
        self.nif_control = 'TRWAGMYFPDXBNJZSQVHLCKE'
        self.cif_control = 'JABCDEFGHI'
        self.cif_types = 'ABCDEFGHJKLMNPQS'
        self.nie_types = 'XT'
        id_card_re = re.compile(r'^([%s]?)[ -]?(\d+)[ -]?([%s]?)$' % (self.cif_types + self.nie_types, self.nif_control + self.cif_control), re.IGNORECASE)
        super(ESIdentityCardNumberField, self).__init__(
            id_card_re, max_length, min_length,
            error_message=self.default_error_messages['invalid%s' % (self.only_nif and '_only_nif' or '')], *args, **kwargs)

    def clean(self, value):
        super(ESIdentityCardNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        nif_get_checksum = lambda d: self.nif_control[int(d) % 23]

        value = value.upper().replace(' ', '').replace('-', '')
        m = re.match(r'^([%s]?)[ -]?(\d+)[ -]?([%s]?)$' % (self.cif_types + self.nie_types, self.nif_control + self.cif_control), value)
        letter1, number, letter2 = m.groups()

        if not letter1 and letter2:
            # NIF
            if letter2 == nif_get_checksum(number):
                return value
            else:
                raise ValidationError(self.error_messages['invalid_nif'])
        elif letter1 in self.nie_types and letter2:
            # NIE
            if letter2 == nif_get_checksum(number):
                return value
            else:
                raise ValidationError(self.error_messages['invalid_nie'])
        elif not self.only_nif and letter1 in self.cif_types and len(number) in [7, 8]:
            # CIF
            if not letter2:
                number, letter2 = number[:-1], int(number[-1])
            checksum = cif_get_checksum(number)
            if letter2 in (checksum, self.cif_control[checksum]):
                return value
            else:
                raise ValidationError(self.error_messages['invalid_cif'])
        else:
            raise ValidationError(self.error_messages['invalid'])


class ESCCCField(RegexField):
    """
    A form field that validates its input as a Spanish bank account or CCC
    (Codigo Cuenta Cliente).

        Spanish CCC is in format EEEE-OOOO-CC-AAAAAAAAAA where:

            E = entity
            O = office
            C = checksum
            A = account

        It's also valid to use a space as delimiter, or to use no delimiter.

        First checksum digit validates entity and office, and last one
        validates account. Validation is done multiplying every digit of 10
        digit value (with leading 0 if necessary) by number in its position in
        string 1, 2, 4, 8, 5, 10, 9, 7, 3, 6. Sum resulting numbers and extract
        it from 11.  Result is checksum except when 10 then is 1, or when 11
        then is 0.

        TODO: allow IBAN validation too
    """
    default_error_messages = {
        'invalid': _('Please enter a valid bank account number in format XXXX-XXXX-XX-XXXXXXXXXX.'),
        'checksum': _('Invalid checksum for bank account number.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(ESCCCField, self).__init__(r'^\d{4}[ -]?\d{4}[ -]?\d{2}[ -]?\d{10}$',
                                         max_length, min_length, *args, **kwargs)

    def clean(self, value):
        super(ESCCCField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        control_str = [1, 2, 4, 8, 5, 10, 9, 7, 3, 6]
        m = re.match(r'^(\d{4})[ -]?(\d{4})[ -]?(\d{2})[ -]?(\d{10})$', value)
        entity, office, checksum, account = m.groups()
        get_checksum = lambda d: str(11 - sum([int(digit) * int(control) for digit, control in zip(d, control_str)]) % 11).replace('10', '1').replace('11', '0')
        if get_checksum('00' + entity + office) + get_checksum(account) == checksum:
            return value
        else:
            raise ValidationError(self.error_messages['checksum'])


class ESRegionSelect(Select):
    """
    A Select widget that uses a list of spanish regions as its choices.
    """
    def __init__(self, attrs=None):
        super(ESRegionSelect, self).__init__(attrs, choices=REGION_CHOICES)


class ESProvinceSelect(Select):
    """
    A Select widget that uses a list of spanish provinces as its choices.
    """
    def __init__(self, attrs=None):
        super(ESProvinceSelect, self).__init__(attrs, choices=PROVINCE_CHOICES)


def cif_get_checksum(number):
    s1 = sum([int(digit) for pos, digit in enumerate(number) if int(pos) % 2])
    s2 = sum([sum([int(unit) for unit in str(int(digit) * 2)])
             for pos, digit in enumerate(number) if not int(pos) % 2])
    return (10 - ((s1 + s2) % 10)) % 10

########NEW FILE########
__FILENAME__ = fi_municipalities
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

#: An alphabetical list of Finnish municipalities for use as `choices` in a formfield.
MUNICIPALITY_CHOICES = (
    ('akaa', "Akaa"),
    ('alajarvi', "Alajärvi"),
    ('alavieska', "Alavieska"),
    ('alavus', "Alavus"),
    ('artjarvi', "Artjärvi"),
    ('asikkala', "Asikkala"),
    ('askola', "Askola"),
    ('aura', "Aura"),
    ('brando', "Brändö"),
    ('eckero', "Eckerö"),
    ('enonkoski', "Enonkoski"),
    ('enontekio', "Enontekiö"),
    ('espoo', "Espoo"),
    ('eura', "Eura"),
    ('eurajoki', "Eurajoki"),
    ('evijarvi', "Evijärvi"),
    ('finstrom', "Finström"),
    ('forssa', "Forssa"),
    ('foglo', "Föglö"),
    ('geta', "Geta"),
    ('haapajarvi', "Haapajärvi"),
    ('haapavesi', "Haapavesi"),
    ('hailuoto', "Hailuoto"),
    ('halsua', "Halsua"),
    ('hamina', "Hamina"),
    ('hammarland', "Hammarland"),
    ('hankasalmi', "Hankasalmi"),
    ('hanko', "Hanko"),
    ('harjavalta', "Harjavalta"),
    ('hartola', "Hartola"),
    ('hattula', "Hattula"),
    ('haukipudas', "Haukipudas"),
    ('hausjarvi', "Hausjärvi"),
    ('heinola', "Heinola"),
    ('heinavesi', "Heinävesi"),
    ('helsinki', "Helsinki"),
    ('hirvensalmi', "Hirvensalmi"),
    ('hollola', "Hollola"),
    ('honkajoki', "Honkajoki"),
    ('huittinen', "Huittinen"),
    ('humppila', "Humppila"),
    ('hyrynsalmi', "Hyrynsalmi"),
    ('hyvinkaa', "Hyvinkää"),
    ('hameenkoski', "Hämeenkoski"),
    ('hameenkyro', "Hämeenkyrö"),
    ('hameenlinna', "Hämeenlinna"),
    ('ii', "Ii"),
    ('iisalmi', "Iisalmi"),
    ('iitti', "Iitti"),
    ('ikaalinen', "Ikaalinen"),
    ('ilmajoki', "Ilmajoki"),
    ('ilomantsi', "Ilomantsi"),
    ('imatra', "Imatra"),
    ('inari', "Inari"),
    ('inkoo', "Inkoo"),
    ('isojoki', "Isojoki"),
    ('isokyro', "Isokyrö"),
    ('jalasjarvi', "Jalasjärvi"),
    ('janakkala', "Janakkala"),
    ('joensuu', "Joensuu"),
    ('jokioinen', "Jokioinen"),
    ('jomala', "Jomala"),
    ('joroinen', "Joroinen"),
    ('joutsa', "Joutsa"),
    ('juankoski', "Juankoski"),
    ('juuka', "Juuka"),
    ('juupajoki', "Juupajoki"),
    ('juva', "Juva"),
    ('jyvaskyla', "Jyväskylä"),
    ('jamijarvi', "Jämijärvi"),
    ('jamsa', "Jämsä"),
    ('jarvenpaa', "Järvenpää"),
    ('kaarina', "Kaarina"),
    ('kaavi', "Kaavi"),
    ('kajaani', "Kajaani"),
    ('kalajoki', "Kalajoki"),
    ('kangasala', "Kangasala"),
    ('kangasniemi', "Kangasniemi"),
    ('kankaanpaa', "Kankaanpää"),
    ('kannonkoski', "Kannonkoski"),
    ('kannus', "Kannus"),
    ('karijoki', "Karijoki"),
    ('karjalohja', "Karjalohja"),
    ('karkkila', "Karkkila"),
    ('karstula', "Karstula"),
    ('karttula', "Karttula"),
    ('karvia', "Karvia"),
    ('kaskinen', "Kaskinen"),
    ('kauhajoki', "Kauhajoki"),
    ('kauhava', "Kauhava"),
    ('kauniainen', "Kauniainen"),
    ('kaustinen', "Kaustinen"),
    ('keitele', "Keitele"),
    ('kemi', "Kemi"),
    ('kemijarvi', "Kemijärvi"),
    ('keminmaa', "Keminmaa"),
    ('kemionsaari', "Kemiönsaari"),
    ('kempele', "Kempele"),
    ('kerava', "Kerava"),
    ('kerimaki', "Kerimäki"),
    ('kesalahti', "Kesälahti"),
    ('keuruu', "Keuruu"),
    ('kihnio', "Kihniö"),
    ('kiikoinen', "Kiikoinen"),
    ('kiiminki', "Kiiminki"),
    ('kinnula', "Kinnula"),
    ('kirkkonummi', "Kirkkonummi"),
    ('kitee', "Kitee"),
    ('kittila', "Kittilä"),
    ('kiuruvesi', "Kiuruvesi"),
    ('kivijarvi', "Kivijärvi"),
    ('kokemaki', "Kokemäki"),
    ('kokkola', "Kokkola"),
    ('kolari', "Kolari"),
    ('konnevesi', "Konnevesi"),
    ('kontiolahti', "Kontiolahti"),
    ('korsnas', "Korsnäs"),
    ('koskitl', "Koski Tl"),
    ('kotka', "Kotka"),
    ('kouvola', "Kouvola"),
    ('kristiinankaupunki', "Kristiinankaupunki"),
    ('kruunupyy', "Kruunupyy"),
    ('kuhmalahti', "Kuhmalahti"),
    ('kuhmo', "Kuhmo"),
    ('kuhmoinen', "Kuhmoinen"),
    ('kumlinge', "Kumlinge"),
    ('kuopio', "Kuopio"),
    ('kuortane', "Kuortane"),
    ('kurikka', "Kurikka"),
    ('kustavi', "Kustavi"),
    ('kuusamo', "Kuusamo"),
    ('kylmakoski', "Kylmäkoski"),
    ('kyyjarvi', "Kyyjärvi"),
    ('karkola', "Kärkölä"),
    ('karsamaki', "Kärsämäki"),
    ('kokar', "Kökar"),
    ('koylio', "Köyliö"),
    ('lahti', "Lahti"),
    ('laihia', "Laihia"),
    ('laitila', "Laitila"),
    ('lapinjarvi', "Lapinjärvi"),
    ('lapinlahti', "Lapinlahti"),
    ('lappajarvi', "Lappajärvi"),
    ('lappeenranta', "Lappeenranta"),
    ('lapua', "Lapua"),
    ('laukaa', "Laukaa"),
    ('lavia', "Lavia"),
    ('lemi', "Lemi"),
    ('lemland', "Lemland"),
    ('lempaala', "Lempäälä"),
    ('leppavirta', "Leppävirta"),
    ('lestijarvi', "Lestijärvi"),
    ('lieksa', "Lieksa"),
    ('lieto', "Lieto"),
    ('liminka', "Liminka"),
    ('liperi', "Liperi"),
    ('lohja', "Lohja"),
    ('loimaa', "Loimaa"),
    ('loppi', "Loppi"),
    ('loviisa', "Loviisa"),
    ('luhanka', "Luhanka"),
    ('lumijoki', "Lumijoki"),
    ('lumparland', "Lumparland"),
    ('luoto', "Luoto"),
    ('luumaki', "Luumäki"),
    ('luvia', "Luvia"),
    ('lansi-turunmaa', "Länsi-Turunmaa"),
    ('maalahti', "Maalahti"),
    ('maaninka', "Maaninka"),
    ('maarianhamina', "Maarianhamina"),
    ('marttila', "Marttila"),
    ('masku', "Masku"),
    ('merijarvi', "Merijärvi"),
    ('merikarvia', "Merikarvia"),
    ('miehikkala', "Miehikkälä"),
    ('mikkeli', "Mikkeli"),
    ('muhos', "Muhos"),
    ('multia', "Multia"),
    ('muonio', "Muonio"),
    ('mustasaari', "Mustasaari"),
    ('muurame', "Muurame"),
    ('mynamaki', "Mynämäki"),
    ('myrskyla', "Myrskylä"),
    ('mantsala', "Mäntsälä"),
    ('mantta-vilppula', "Mänttä-Vilppula"),
    ('mantyharju', "Mäntyharju"),
    ('naantali', "Naantali"),
    ('nakkila', "Nakkila"),
    ('nastola', "Nastola"),
    ('nilsia', "Nilsiä"),
    ('nivala', "Nivala"),
    ('nokia', "Nokia"),
    ('nousiainen', "Nousiainen"),
    ('nummi-pusula', "Nummi-Pusula"),
    ('nurmes', "Nurmes"),
    ('nurmijarvi', "Nurmijärvi"),
    ('narpio', "Närpiö"),
    ('oravainen', "Oravainen"),
    ('orimattila', "Orimattila"),
    ('oripaa', "Oripää"),
    ('orivesi', "Orivesi"),
    ('oulainen', "Oulainen"),
    ('oulu', "Oulu"),
    ('oulunsalo', "Oulunsalo"),
    ('outokumpu', "Outokumpu"),
    ('padasjoki', "Padasjoki"),
    ('paimio', "Paimio"),
    ('paltamo', "Paltamo"),
    ('parikkala', "Parikkala"),
    ('parkano', "Parkano"),
    ('pedersore', "Pedersöre"),
    ('pelkosenniemi', "Pelkosenniemi"),
    ('pello', "Pello"),
    ('perho', "Perho"),
    ('pertunmaa', "Pertunmaa"),
    ('petajavesi', "Petäjävesi"),
    ('pieksamaki', "Pieksämäki"),
    ('pielavesi', "Pielavesi"),
    ('pietarsaari', "Pietarsaari"),
    ('pihtipudas', "Pihtipudas"),
    ('pirkkala', "Pirkkala"),
    ('polvijarvi', "Polvijärvi"),
    ('pomarkku', "Pomarkku"),
    ('pori', "Pori"),
    ('pornainen', "Pornainen"),
    ('porvoo', "Porvoo"),
    ('posio', "Posio"),
    ('pudasjarvi', "Pudasjärvi"),
    ('pukkila', "Pukkila"),
    ('punkaharju', "Punkaharju"),
    ('punkalaidun', "Punkalaidun"),
    ('puolanka', "Puolanka"),
    ('puumala', "Puumala"),
    ('pyhtaa', "Pyhtää"),
    ('pyhajoki', "Pyhäjoki"),
    ('pyhajarvi', "Pyhäjärvi"),
    ('pyhanta', "Pyhäntä"),
    ('pyharanta', "Pyhäranta"),
    ('palkane', "Pälkäne"),
    ('poytya', "Pöytyä"),
    ('raahe', "Raahe"),
    ('raasepori', "Raasepori"),
    ('raisio', "Raisio"),
    ('rantasalmi', "Rantasalmi"),
    ('ranua', "Ranua"),
    ('rauma', "Rauma"),
    ('rautalampi', "Rautalampi"),
    ('rautavaara', "Rautavaara"),
    ('rautjarvi', "Rautjärvi"),
    ('reisjarvi', "Reisjärvi"),
    ('riihimaki', "Riihimäki"),
    ('ristiina', "Ristiina"),
    ('ristijarvi', "Ristijärvi"),
    ('rovaniemi', "Rovaniemi"),
    ('ruokolahti', "Ruokolahti"),
    ('ruovesi', "Ruovesi"),
    ('rusko', "Rusko"),
    ('raakkyla', "Rääkkylä"),
    ('saarijarvi', "Saarijärvi"),
    ('salla', "Salla"),
    ('salo', "Salo"),
    ('saltvik', "Saltvik"),
    ('sastamala', "Sastamala"),
    ('sauvo', "Sauvo"),
    ('savitaipale', "Savitaipale"),
    ('savonlinna', "Savonlinna"),
    ('savukoski', "Savukoski"),
    ('seinajoki', "Seinäjoki"),
    ('sievi', "Sievi"),
    ('siikainen', "Siikainen"),
    ('siikajoki', "Siikajoki"),
    ('siikalatva', "Siikalatva"),
    ('siilinjarvi', "Siilinjärvi"),
    ('simo', "Simo"),
    ('sipoo', "Sipoo"),
    ('siuntio', "Siuntio"),
    ('sodankyla', "Sodankylä"),
    ('soini', "Soini"),
    ('somero', "Somero"),
    ('sonkajarvi', "Sonkajärvi"),
    ('sotkamo', "Sotkamo"),
    ('sottunga', "Sottunga"),
    ('sulkava', "Sulkava"),
    ('sund', "Sund"),
    ('suomenniemi', "Suomenniemi"),
    ('suomussalmi', "Suomussalmi"),
    ('suonenjoki', "Suonenjoki"),
    ('sysma', "Sysmä"),
    ('sakyla', "Säkylä"),
    ('taipalsaari', "Taipalsaari"),
    ('taivalkoski', "Taivalkoski"),
    ('taivassalo', "Taivassalo"),
    ('tammela', "Tammela"),
    ('tampere', "Tampere"),
    ('tarvasjoki', "Tarvasjoki"),
    ('tervo', "Tervo"),
    ('tervola', "Tervola"),
    ('teuva', "Teuva"),
    ('tohmajarvi', "Tohmajärvi"),
    ('toholampi', "Toholampi"),
    ('toivakka', "Toivakka"),
    ('tornio', "Tornio"),
    ('turku', "Turku"),
    ('tuusniemi', "Tuusniemi"),
    ('tuusula', "Tuusula"),
    ('tyrnava', "Tyrnävä"),
    ('toysa', "Töysä"),
    ('ulvila', "Ulvila"),
    ('urjala', "Urjala"),
    ('utajarvi', "Utajärvi"),
    ('utsjoki', "Utsjoki"),
    ('uurainen', "Uurainen"),
    ('uusikaarlepyy', "Uusikaarlepyy"),
    ('uusikaupunki', "Uusikaupunki"),
    ('vaala', "Vaala"),
    ('vaasa', "Vaasa"),
    ('valkeakoski', "Valkeakoski"),
    ('valtimo', "Valtimo"),
    ('vantaa', "Vantaa"),
    ('varkaus', "Varkaus"),
    ('varpaisjarvi', "Varpaisjärvi"),
    ('vehmaa', "Vehmaa"),
    ('vesanto', "Vesanto"),
    ('vesilahti', "Vesilahti"),
    ('veteli', "Veteli"),
    ('vierema', "Vieremä"),
    ('vihanti', "Vihanti"),
    ('vihti', "Vihti"),
    ('viitasaari', "Viitasaari"),
    ('vimpeli', "Vimpeli"),
    ('virolahti', "Virolahti"),
    ('virrat', "Virrat"),
    ('vardo', "Vårdö"),
    ('vahakyro', "Vähäkyrö"),
    ('voyri-maksamaa', "Vöyri-Maksamaa"),
    ('yli-ii', "Yli-Ii"),
    ('ylitornio', "Ylitornio"),
    ('ylivieska', "Ylivieska"),
    ('ylojarvi', "Ylöjärvi"),
    ('ypaja', "Ypäjä"),
    ('ahtari', "Ähtäri"),
    ('aanekoski', "Äänekoski")
)

########NEW FILE########
__FILENAME__ = forms
"""
FI-specific Form helpers
"""

from __future__ import absolute_import, unicode_literals

import re

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import Field, RegexField, Select
from django.utils.translation import ugettext_lazy as _

from .fi_municipalities import MUNICIPALITY_CHOICES


class FIZipCodeField(RegexField):
    """
    A form field that validates input as a Finnish zip code. Valid codes
    consist of five digits.
    """
    default_error_messages = {
        'invalid': _('Enter a zip code in the format XXXXX.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(FIZipCodeField, self).__init__(r'^\d{5}$',
                                             max_length, min_length, *args, **kwargs)


class FIMunicipalitySelect(Select):
    """
    A Select widget that uses a list of Finnish municipalities as its choices.
    """
    def __init__(self, attrs=None):
        super(FIMunicipalitySelect, self).__init__(attrs, choices=MUNICIPALITY_CHOICES)


class FISocialSecurityNumber(Field):
    """A form field that validates input as a Finnish social security number."""
    default_error_messages = {
        'invalid': _('Enter a valid Finnish social security number.'),
    }

    def clean(self, value):
        super(FISocialSecurityNumber, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        checkmarks = "0123456789ABCDEFHJKLMNPRSTUVWXY"
        result = re.match(r"""^
            (?P<date>([0-2]\d|3[01])
            (0\d|1[012])
            (\d{2}))
            [A+-]
            (?P<serial>(\d{3}))
            (?P<checksum>[%s])$""" % checkmarks, value, re.VERBOSE | re.IGNORECASE)
        if not result:
            raise ValidationError(self.error_messages['invalid'])
        gd = result.groupdict()
        checksum = int(gd['date'] + gd['serial'])
        if checkmarks[checksum % len(checkmarks)] == gd['checksum'].upper():
            return '%s' % value.upper()
        raise ValidationError(self.error_messages['invalid'])

########NEW FILE########
__FILENAME__ = forms
"""
FR-specific Form helpers
"""
from __future__ import absolute_import, unicode_literals

import re

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import CharField, RegexField, Select
from django.utils.encoding import smart_text
from django.utils.translation import ugettext_lazy as _

from .fr_department import DEPARTMENT_CHOICES_PER_REGION
from .fr_region import REGION_CHOICES


nin_re = re.compile(r'^(?P<gender>[1278])(?P<year_of_birth>\d{2})(?P<month_of_birth>0[1-9]|1[0-2]|20)' +
                    '(?P<department_of_origin>\d{2}|2[AB])(?P<commune_of_origin>\d{3})(?P<person_unique_number>\d{3})' +
                    '(?P<control_key>\d{2})$')


class FRZipCodeField(RegexField):
    """
    Validate local French zip code.
    The correct format is 'XXXXX'.
    """
    default_error_messages = {
        'invalid': _('Enter a zip code in the format XXXXX.'),
    }

    def __init__(self, max_length=5, min_length=5, *args, **kwargs):
        kwargs['label'] = _('Zip code')
        kwargs['max_length'] = max_length
        kwargs['min_length'] = min_length
        super(FRZipCodeField, self).__init__(
            r'^\d{5}$', *args, **kwargs)


class FRPhoneNumberField(CharField):
    """
    Validate local French phone number (not international ones)
    The correct format is '0X XX XX XX XX'.
    '0X.XX.XX.XX.XX' and '0XXXXXXXXX' validate but are corrected to
    '0X XX XX XX XX'.
    """
    phone_digits_re = re.compile(r'^0\d(\s|\.)?(\d{2}(\s|\.)?){3}\d{2}$')

    default_error_messages = {
        'invalid': _('Phone numbers must be in 0X XX XX XX XX format.'),
    }

    def __init__(self, max_length=14, min_length=10, *args, **kwargs):
        kwargs['label'] = _('Phone number')
        kwargs['max_length'] = max_length
        kwargs['min_length'] = min_length
        super(FRPhoneNumberField, self).__init__(*args, **kwargs)

    def clean(self, value):
        value = super(FRPhoneNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        value = re.sub('(\.|\s)', '', smart_text(value))
        m = self.phone_digits_re.search(value)
        if m:
            return '%s %s %s %s %s' % (
                value[0:2],
                value[2:4],
                value[4:6],
                value[6:8],
                value[8:10]
            )
        raise ValidationError(self.error_messages['invalid'])


class FRDepartmentSelect(Select):
    """
    A Select widget that uses a list of FR departments as its choices.
    """
    def __init__(self, attrs=None):
        choices = [
            (dep[0], '%s - %s' % (dep[0], dep[1]))
            for dep in DEPARTMENT_CHOICES_PER_REGION
        ]
        super(FRDepartmentSelect, self).__init__(
            attrs,
            choices=choices
        )


class FRRegionSelect(Select):
    """
    A Select widget that uses a list of FR Regions as its choices.
    """
    def __init__(self, attrs=None):
        choices = [
            (dep[0], '%s - %s' % (dep[0], dep[1]))
            for dep in REGION_CHOICES
        ]
        super(FRRegionSelect, self).__init__(
            attrs,
            choices=choices
        )


class FRDepartmentField(CharField):
    """
    A Select Field that uses a FRDepartmentSelect widget.
    """
    widget = FRDepartmentSelect

    def __init__(self, *args, **kwargs):
        kwargs['label'] = _('Select Department')
        super(FRDepartmentField, self).__init__(*args, **kwargs)


class FRRegionField(CharField):
    """
    A Select Field that uses a FRRegionSelect widget.
    """
    widget = FRRegionSelect

    def __init__(self, *args, **kwargs):
        kwargs['label'] = _('Select Region')
        super(FRRegionField, self).__init__(*args, **kwargs)


class FRNationalIdentificationNumber(CharField):
    """
    Validates input as a French National Identification number.
    Validation of the Number, and checksum calculation is detailed at http://en.wikipedia.org/wiki/INSEE_code

    .. versionadded:: 1.1
    """
    default_error_messages = {
        'invalid': _('Enter a valid French French National Identification number.'),
    }

    def clean(self, value):
        super(FRNationalIdentificationNumber, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        value = value.replace(' ', '').replace('-', '')

        match = nin_re.match(value)
        if not match:
            raise ValidationError(self.error_messages['invalid'])

        # Extract all parts of social number
        gender = match.group('gender')
        year_of_birth = match.group('year_of_birth')
        month_of_birth = match.group('month_of_birth')
        department_of_origin = match.group('department_of_origin')
        commune_of_origin = match.group('commune_of_origin')
        person_unique_number = match.group('person_unique_number')
        control_key = int(match.group('control_key'))

        # Department number 98 is for Monaco, 20 doesn't exist
        if department_of_origin in ['98', '20']:
            raise ValidationError(self.error_messages['invalid'])

        # Overseas department numbers starts with 97 and are 3 digits long
        if department_of_origin == '97':
            department_of_origin += commune_of_origin[:1]
            if int(department_of_origin) not in range(971, 976):
                raise ValidationError(self.error_messages['invalid'])
            commune_of_origin = commune_of_origin[1:]
            if int(commune_of_origin) < 1 or int(commune_of_origin) > 90:
                raise ValidationError(self.error_messages['invalid'])
        elif int(commune_of_origin) < 1 or int(commune_of_origin) > 990:
            raise ValidationError(self.error_messages['invalid'])

        if person_unique_number == '000':
            raise ValidationError(self.error_messages['invalid'])

        if control_key > 97:
            raise ValidationError(self.error_messages['invalid'])

        control_number = int(gender + year_of_birth + month_of_birth +
                             department_of_origin.replace('A', '0').replace('B', '0')
                             + commune_of_origin + person_unique_number)
        if (97 - control_number % 97) == control_key:
            return value
        else:
            raise ValidationError(self.error_messages['invalid'])

########NEW FILE########
__FILENAME__ = fr_department
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

#: See the "Code officiel géographique" on the INSEE website <www.insee.fr>.
DEPARTMENT_CHOICES_PER_REGION = (
    # Metropolitan departments
    ('01', 'Ain', '82'),
    ('02', 'Aisne', '22'),
    ('03', 'Allier', '83'),
    ('04', 'Alpes-de-Haute-Provence', '93'),
    ('05', 'Hautes-Alpes', '93'),
    ('06', 'Alpes-Maritimes', '93'),
    ('07', 'Ardèche', '82'),
    ('08', 'Ardennes', '21'),
    ('09', 'Ariège', '73'),
    ('10', 'Aube', '21'),
    ('11', 'Aude', '91'),
    ('12', 'Aveyron', '73'),
    ('13', 'Bouches-du-Rhône', '93'),
    ('14', 'Calvados', '25'),
    ('15', 'Cantal', '83'),
    ('16', 'Charente', '54'),
    ('17', 'Charente-Maritime', '54'),
    ('18', 'Cher', '24'),
    ('19', 'Corrèze', '74'),
    ('2A', 'Corse-du-Sud', '94'),
    ('2B', 'Haute-Corse', '94'),
    ('21', 'Côte-d\'Or', '26'),
    ('22', 'Côtes-d\'Armor', '53'),
    ('23', 'Creuse', '74'),
    ('24', 'Dordogne', '72'),
    ('25', 'Doubs', '43'),
    ('26', 'Drôme', '82'),
    ('27', 'Eure', '23'),
    ('28', 'Eure-et-Loir', '24'),
    ('29', 'Finistère', '53'),
    ('30', 'Gard', '91'),
    ('31', 'Haute-Garonne', '73'),
    ('32', 'Gers', '73'),
    ('33', 'Gironde', '72'),
    ('34', 'Hérault', '91'),
    ('35', 'Ille-et-Vilaine', '53'),
    ('36', 'Indre', '24'),
    ('37', 'Indre-et-Loire', '24'),
    ('38', 'Isère', '82'),
    ('39', 'Jura', '43'),
    ('40', 'Landes', '72'),
    ('41', 'Loir-et-Cher', '24'),
    ('42', 'Loire', '82'),
    ('43', 'Haute-Loire', '83'),
    ('44', 'Loire-Atlantique', '52'),
    ('45', 'Loiret', '24'),
    ('46', 'Lot', '73'),
    ('47', 'Lot-et-Garonne', '72'),
    ('48', 'Lozère', '91'),
    ('49', 'Maine-et-Loire', '52'),
    ('50', 'Manche', '25'),
    ('51', 'Marne', '21'),
    ('52', 'Haute-Marne', '21'),
    ('53', 'Mayenne', '52'),
    ('54', 'Meurthe-et-Moselle', '41'),
    ('55', 'Meuse', '41'),
    ('56', 'Morbihan', '53'),
    ('57', 'Moselle', '41'),
    ('58', 'Nièvre', '26'),
    ('59', 'Nord', '31'),
    ('60', 'Oise', '22'),
    ('61', 'Orne', '25'),
    ('62', 'Pas-de-Calais', '31'),
    ('63', 'Puy-de-Dôme', '83'),
    ('64', 'Pyrénées-Atlantiques', '72'),
    ('65', 'Hautes-Pyrénées', '73'),
    ('66', 'Pyrénées-Orientales', '91'),
    ('67', 'Bas-Rhin', '42'),
    ('68', 'Haut-Rhin', '42'),
    ('69', 'Rhône', '82'),
    ('70', 'Haute-Saône', '43'),
    ('71', 'Saône-et-Loire', '26'),
    ('72', 'Sarthe', '52'),
    ('73', 'Savoie', '82'),
    ('74', 'Haute-Savoie', '82'),
    ('75', 'Paris', '11'),
    ('76', 'Seine-Maritime', '23'),
    ('77', 'Seine-et-Marne', '11'),
    ('78', 'Yvelines', '11'),
    ('79', 'Deux-Sèvres', '54'),
    ('80', 'Somme', '22'),
    ('81', 'Tarn', '73'),
    ('82', 'Tarn-et-Garonne', '73'),
    ('83', 'Var', '93'),
    ('84', 'Vaucluse', '93'),
    ('85', 'Vendée', '52'),
    ('86', 'Vienne', '54'),
    ('87', 'Haute-Vienne', '74'),
    ('88', 'Vosges', '41'),
    ('89', 'Yonne', '26'),
    ('90', 'Territoire de Belfort', '43'),
    ('91', 'Essonne', '11'),
    ('92', 'Hauts-de-Seine', '11'),
    ('93', 'Seine-Saint-Denis', '11'),
    ('94', 'Val-de-Marne', '11'),
    ('95', 'Val-d\'Oise', '11'),
    # Overseas departments, communities, and other territories
    ('971', 'Guadeloupe', '01'),
    ('972', 'Martinique', '02'),
    ('973', 'Guyane', '03'),
    ('974', 'La Réunion', '04'),
    ('975', 'Saint-Pierre-et-Miquelon', None),
    ('976', 'Mayotte', '05'),
    ('977', 'Saint-Barthélemy', None),
    ('978', 'Saint-Martin', None),
    ('984', 'Terres australes et antarctiques françaises', None),
    ('986', 'Wallis et Futuna', None),
    ('987', 'Polynésie française', None),
    ('988', 'Nouvelle-Calédonie', None),
    ('989', 'Île de Clipperton', None),
)

#: A list of departments
DEPARTMENT_CHOICES = tuple([
    (dep[0], '%s - %s' % (dep[0], dep[1]),)
    for dep in DEPARTMENT_CHOICES_PER_REGION
])

########NEW FILE########
__FILENAME__ = fr_region
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

#: See the "Code officiel géographique" on the INSEE website <www.insee.fr>.
REGION_CHOICES = (
    # Overseas regions
    ('01', 'Guadeloupe'),
    ('02', 'Martinique'),
    ('03', 'Guyane'),
    ('04', 'La Réunion'),
    ('05', 'Mayotte'),
    # Metropolitan regions
    ('11', 'Île-de-France'),
    ('21', 'Champagne-Ardenne'),
    ('22', 'Picardie'),
    ('23', 'Haute-Normandie'),
    ('24', 'Centre'),
    ('25', 'Basse-Normandie'),
    ('26', 'Bourgogne'),
    ('31', 'Nord-Pas-de-Calais'),
    ('41', 'Lorraine'),
    ('42', 'Alsace'),
    ('43', 'Franche-Comté'),
    ('52', 'Pays de la Loire'),
    ('53', 'Bretagne'),
    ('54', 'Poitou-Charentes'),
    ('72', 'Aquitaine'),
    ('73', 'Midi-Pyrénées'),
    ('74', 'Limousin'),
    ('82', 'Rhône-Alpes'),
    ('83', 'Auvergne'),
    ('91', 'Languedoc-Roussillon'),
    ('93', 'Provence-Alpes-Côte d\'Azur'),
    ('94', 'Corse')
)

########NEW FILE########
__FILENAME__ = forms
"""
GB-specific Form helpers
"""

from __future__ import absolute_import, unicode_literals

import re

from django.forms.fields import CharField, Select
from django.forms import ValidationError
from django.utils.translation import ugettext_lazy as _

from .gb_regions import GB_NATIONS_CHOICES, GB_REGION_CHOICES


class GBPostcodeField(CharField):
    """
    A form field that validates its input is a UK postcode.

    The regular expression used is sourced from the schema for British Standard
    BS7666 address types: http://www.govtalk.gov.uk/gdsc/schemas/bs7666-v2-0.xsd

    The value is uppercased and a space added in the correct place, if required.
    """
    default_error_messages = {
        'invalid': _('Enter a valid postcode.'),
    }
    outcode_pattern = '[A-PR-UWYZ]([0-9]{1,2}|([A-HIK-Y][0-9](|[0-9]|[ABEHMNPRVWXY]))|[0-9][A-HJKSTUW])'
    incode_pattern = '[0-9][ABD-HJLNP-UW-Z]{2}'
    postcode_regex = re.compile(r'^(GIR 0AA|%s %s)$' % (outcode_pattern, incode_pattern))
    space_regex = re.compile(r' *(%s)$' % incode_pattern)

    def clean(self, value):
        value = super(GBPostcodeField, self).clean(value)
        if value == '':
            return value
        postcode = value.upper().strip()
        # Put a single space before the incode (second part).
        postcode = self.space_regex.sub(r' \1', postcode)
        if not self.postcode_regex.search(postcode):
            raise ValidationError(self.error_messages['invalid'])
        return postcode


class GBCountySelect(Select):
    """
    A Select widget that uses a list of UK Counties/Regions as its choices.
    """
    def __init__(self, attrs=None):
        super(GBCountySelect, self).__init__(attrs, choices=GB_REGION_CHOICES)


class GBNationSelect(Select):
    """
    A Select widget that uses a list of UK Nations as its choices.
    """
    def __init__(self, attrs=None):
        super(GBNationSelect, self).__init__(attrs, choices=GB_NATIONS_CHOICES)

########NEW FILE########
__FILENAME__ = gb_regions
from django.utils.translation import ugettext_lazy as _

#: English regions http://en.wikipedia.org/wiki/List_of_ceremonial_counties_of_England
ENGLAND_REGION_CHOICES = (
    ("Bedfordshire", _("Bedfordshire")),
    ("Berkshire", _("Berkshire")),
    ("Bristol", _("Bristol")),
    ("Buckinghamshire", _("Buckinghamshire")),
    ("Cambridgeshire", _("Cambridgeshire")),
    ("Cheshire", _("Cheshire")),
    ("City of London", _("City of London")),
    ("Cornwall", _("Cornwall")),
    ("County Durham", _("County Durham")),
    ("Cumbria", _("Cumbria")),
    ("Derbyshire", _("Derbyshire")),
    ("Devon", _("Devon")),
    ("Dorset", _("Dorset")),
    ("East Riding of Yorkshire", _("East Riding of Yorkshire")),
    ("East Sussex", _("East Sussex")),
    ("Essex", _("Essex")),
    ("Gloucestershire", _("Gloucestershire")),
    ("Greater London", _("Greater London")),
    ("Greater Manchester", _("Greater Manchester")),
    ("Hampshire", _("Hampshire")),
    ("Herefordshire", _("Herefordshire")),
    ("Hertfordshire", _("Hertfordshire")),
    ("Isle of Wight", _("Isle of Wight")),
    ("Kent", _("Kent")),
    ("Lancashire", _("Lancashire")),
    ("Leicestershire", _("Leicestershire")),
    ("Lincolnshire", _("Lincolnshire")),
    ("Merseyside", _("Merseyside")),
    ("Norfolk", _("Norfolk")),
    ("North Yorkshire", _("North Yorkshire")),
    ("Northamptonshire", _("Northamptonshire")),
    ("Northumberland", _("Northumberland")),
    ("Nottinghamshire", _("Nottinghamshire")),
    ("Oxfordshire", _("Oxfordshire")),
    ("Rutland", _("Rutland")),
    ("Shropshire", _("Shropshire")),
    ("Somerset", _("Somerset")),
    ("South Yorkshire", _("South Yorkshire")),
    ("Staffordshire", _("Staffordshire")),
    ("Suffolk", _("Suffolk")),
    ("Surrey", _("Surrey")),
    ("Tyne and Wear", _("Tyne and Wear")),
    ("Warwickshire", _("Warwickshire")),
    ("West Midlands", _("West Midlands")),
    ("West Sussex", _("West Sussex")),
    ("West Yorkshire", _("West Yorkshire")),
    ("Wiltshire", _("Wiltshire")),
    ("Worcestershire", _("Worcestershire"))
)

#: Northern Ireland regions: http://en.wikipedia.org/wiki/List_of_Irish_counties_by_area
NORTHERN_IRELAND_REGION_CHOICES = (
    ("County Antrim", _("County Antrim")),
    ("County Armagh", _("County Armagh")),
    ("County Down", _("County Down")),
    ("County Fermanagh", _("County Fermanagh")),
    ("County Londonderry", _("County Londonderry")),
    ("County Tyrone", _("County Tyrone")),
)

#: Welsh regions: http://en.wikipedia.org/wiki/Preserved_counties_of_Wales
WALES_REGION_CHOICES = (
    ("Clwyd", _("Clwyd")),
    ("Dyfed", _("Dyfed")),
    ("Gwent", _("Gwent")),
    ("Gwynedd", _("Gwynedd")),
    ("Mid Glamorgan", _("Mid Glamorgan")),
    ("Powys", _("Powys")),
    ("South Glamorgan", _("South Glamorgan")),
    ("West Glamorgan", _("West Glamorgan")),
)

#: Scottish regions: http://en.wikipedia.org/wiki/Regions_and_districts_of_Scotland
SCOTTISH_REGION_CHOICES = (
    ("Borders", _("Borders")),
    ("Central Scotland", _("Central Scotland")),
    ("Dumfries and Galloway", _("Dumfries and Galloway")),
    ("Fife", _("Fife")),
    ("Grampian", _("Grampian")),
    ("Highland", _("Highland")),
    ("Lothian", _("Lothian")),
    ("Orkney Islands", _("Orkney Islands")),
    ("Shetland Islands", _("Shetland Islands")),
    ("Strathclyde", _("Strathclyde")),
    ("Tayside", _("Tayside")),
    ("Western Isles", _("Western Isles")),
)

#: Great Britain nations
GB_NATIONS_CHOICES = (
    ("England", _("England")),
    ("Northern Ireland", _("Northern Ireland")),
    ("Scotland", _("Scotland")),
    ("Wales", _("Wales")),
)

#: All regions of Great Britain
GB_REGION_CHOICES = (ENGLAND_REGION_CHOICES +
                     NORTHERN_IRELAND_REGION_CHOICES +
                     WALES_REGION_CHOICES +
                     SCOTTISH_REGION_CHOICES)

########NEW FILE########
__FILENAME__ = forms
from django import forms

from .validators import IBANValidator, IBAN_COUNTRY_CODE_LENGTH


DEFAULT_DATE_INPUT_FORMATS = (
    '%Y-%m-%d', '%d/%m/%Y', '%d/%m/%y',  # '2006-10-25', '25/10/2006', '25/10/06'
    '%b %d %Y', '%b %d, %Y',             # 'Oct 25 2006', 'Oct 25, 2006'
    '%d %b %Y', '%d %b, %Y',             # '25 Oct 2006', '25 Oct, 2006'
    '%B %d %Y', '%B %d, %Y',             # 'October 25 2006', 'October 25, 2006'
    '%d %B %Y', '%d %B, %Y',             # '25 October 2006', '25 October, 2006'
)

DEFAULT_DATETIME_INPUT_FORMATS = (
    '%Y-%m-%d %H:%M:%S',     # '2006-10-25 14:30:59'
    '%Y-%m-%d %H:%M',        # '2006-10-25 14:30'
    '%Y-%m-%d',              # '2006-10-25'
    '%d/%m/%Y %H:%M:%S',     # '25/10/2006 14:30:59'
    '%d/%m/%Y %H:%M',        # '25/10/2006 14:30'
    '%d/%m/%Y',              # '25/10/2006'
    '%d/%m/%y %H:%M:%S',     # '25/10/06 14:30:59'
    '%d/%m/%y %H:%M',        # '25/10/06 14:30'
    '%d/%m/%y',              # '25/10/06'
)

IBAN_MIN_LENGTH = min(IBAN_COUNTRY_CODE_LENGTH.values())


class DateField(forms.DateField):
    """
    A date input field which uses non-US date input formats by default.
    """
    def __init__(self, input_formats=None, *args, **kwargs):
        input_formats = input_formats or DEFAULT_DATE_INPUT_FORMATS
        super(DateField, self).__init__(input_formats=input_formats, *args, **kwargs)


class DateTimeField(forms.DateTimeField):
    """
    A date and time input field which uses non-US date and time input formats
    by default.
    """
    def __init__(self, input_formats=None, *args, **kwargs):
        input_formats = input_formats or DEFAULT_DATETIME_INPUT_FORMATS
        super(DateTimeField, self).__init__(input_formats=input_formats, *args, **kwargs)


class SplitDateTimeField(forms.SplitDateTimeField):
    """
    Split date and time input fields which use non-US date and time input
    formats by default.
    """
    def __init__(self, input_date_formats=None, input_time_formats=None, *args, **kwargs):
        input_date_formats = input_date_formats or DEFAULT_DATE_INPUT_FORMATS
        super(SplitDateTimeField, self).__init__(input_date_formats=input_date_formats,
                                                 input_time_formats=input_time_formats, *args, **kwargs)


class IBANFormField(forms.CharField):
    """
    An IBAN consists of up to 34 alphanumeric characters.

    To limit validation to specific countries, set the 'include_countries' argument with a tuple or list of ISO 3166-1
    alpha-2 codes. For example, `include_countries=('NL', 'BE, 'LU')`.

    A list of countries that use IBANs as part of SEPA is included for convenience. To use this feature, set
    `include_countries=IBAN_SEPA_COUNTRIES` as an argument to the field.

    Example:

    .. code-block:: python

        from django import forms
        from localflavor.generic.forms import IBANFormField
        from localflavor.generic.sepa_countries import IBAN_SEPA_COUNTRIES

        class MyForm(forms.Form):
            iban = IBANFormField(include_countries=IBAN_SEPA_COUNTRIES)

    In addition to validating official IBANs, this field can optionally validate unofficial IBANs that have been
    catalogued by Nordea by setting the `use_nordea_extensions` argument to True.

    https://en.wikipedia.org/wiki/International_Bank_Account_Number

    .. versionadded:: 1.1
    """
    def __init__(self, use_nordea_extensions=False, include_countries=None, *args, **kwargs):
        kwargs.setdefault('min_length', IBAN_MIN_LENGTH)
        kwargs.setdefault('max_length', 34)
        self.default_validators = [IBANValidator(use_nordea_extensions, include_countries)]
        super(IBANFormField, self).__init__(*args, **kwargs)

    def to_python(self, value):
        value = super(IBANFormField, self).to_python(value)
        if value is not None:
            return value.replace(' ', '').replace('-', '')
        return value

    def prepare_value(self, value):
        """ The display format for IBAN has a space every 4 characters. """
        grouping = 4
        return ' '.join(value[i:i + grouping] for i in range(0, len(value), grouping))

########NEW FILE########
__FILENAME__ = models
from django.db import models
from django.utils.translation import ugettext_lazy as _

from .forms import IBANFormField
from .validators import IBANValidator


class IBANField(models.CharField):
    """
    An IBAN consists of up to 34 alphanumeric characters.

    To limit validation to specific countries, set the 'include_countries' argument with a tuple or list of ISO 3166-1
    alpha-2 codes. For example, `include_countries=('NL', 'BE, 'LU')`.

    A list of countries that use IBANs as part of SEPA is included for convenience. To use this feature, set
    `include_countries=IBAN_SEPA_COUNTRIES` as an argument to the field.

    Example:

    .. code-block:: python

        from django.db import models
        from localflavor.generic.models import IBANField
        from localflavor.generic.sepa_countries import IBAN_SEPA_COUNTRIES

        class MyModel(models.Model):
            iban = IBANField(include_countries=IBAN_SEPA_COUNTRIES)

    In addition to validating official IBANs, this field can optionally validate unofficial IBANs that have been
    catalogued by Nordea by setting the `use_nordea_extensions` argument to True.

    https://en.wikipedia.org/wiki/International_Bank_Account_Number

    .. versionadded:: 1.1
    """
    description = _('An International Bank Account Number')

    def __init__(self, use_nordea_extensions=False, include_countries=None, *args, **kwargs):
        kwargs.setdefault('max_length', 34)
        super(IBANField, self).__init__(*args, **kwargs)
        self.validators.append(IBANValidator(use_nordea_extensions, include_countries))

    def to_python(self, value):
        value = super(IBANField, self).to_python(value)
        if value is not None:
            return value.replace(' ', '').replace('-', '')
        return value

    def formfield(self, **kwargs):
        defaults = {'form_class': IBANFormField}
        defaults.update(kwargs)
        return super(IBANField, self).formfield(**defaults)

########NEW FILE########
__FILENAME__ = sepa_countries
# -*- coding: utf-8 -*-

#: European Payments Council list of SEPA scheme countries as of 23 Jan 2014.
#: http://www.europeanpaymentscouncil.eu/index.cfm/knowledge-bank/epc-documents/epc-list-of-sepa-scheme-countries/
IBAN_SEPA_COUNTRIES = (
    'AT',  # Austria
    'BE',  # Belgium
    'BG',  # Bulgaria
    'ES',  # Canary Islands
    'HR',  # Croatia
    'CH',  # Switzerland
    'CY',  # Cyprus
    'CZ',  # Czech Republic
    'DE',  # Germany
    'DK',  # Denmark
    'EE',  # Estonia
    'ES',  # Spain
    'FI',  # Finland + Åland Islands
    'FR',  # France +  French Guiana, Guadeloupe, Martinique, Mayotte, Réunion, Saint Barthélemy,
           #           Saint Martin (French part), Saint Pierre and Miquelon
           #
    'GB',  # United Kingdom
    'GI',  # Gibraltar
    'GR',  # Greece
    'HU',  # Hungary
    'IE',  # Ireland
    'IS',  # Iceland
    'IT',  # Italy
    'LV',  # Latvia
    'LI',  # Liechtenstein
    'LT',  # Lithuania
    'LU',  # Luxembourg
    'MC',  # Monaco
    'MT',  # Malta
    'NL',  # Netherlands
    'NO',  # Norway
    'PL',  # Poland
    'PT',  # Portugal + Azores + Madeira
    'RO',  # Romania
    'SE',  # Sweden
    'SI',  # Slovenia
    'SK',  # Slovakia
    'SM',  # San Marino
)

########NEW FILE########
__FILENAME__ = validators
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.core.exceptions import ValidationError, ImproperlyConfigured
from django.utils.translation import ugettext_lazy as _

# Dictionary of ISO country code to IBAN length.
#
# References:
# https://en.wikipedia.org/wiki/International_Bank_Account_Number#IBAN_formats_by_country
# http://www.ecbs.org/iban/france-bank-account-number.html
# https://www.nordea.com/V%C3%A5ra+tj%C3%A4nster/Internationella+produkter+och+tj%C3%A4nster/Cash+Management/IBAN+countries/908472.html

IBAN_COUNTRY_CODE_LENGTH = {'AL': 28,  # Albania
                            'AD': 24,  # Andorra
                            'AE': 23,  # United Arab Emirates
                            'AT': 20,  # Austria
                            'AZ': 28,  # Azerbaijan
                            'BA': 20,  # Bosnia and Herzegovina
                            'BE': 16,  # Belgium
                            'BG': 22,  # Bulgaria
                            'BH': 22,  # Bahrain
                            'BR': 29,  # Brazil
                            'CH': 21,  # Switzerland
                            'CR': 21,  # Costa Rica
                            'CY': 28,  # Cyprus
                            'CZ': 24,  # Czech Republic
                            'DE': 22,  # Germany
                            'DK': 18,  # Denmark
                            'DO': 28,  # Dominican Republic
                            'EE': 20,  # Estonia
                            'ES': 24,  # Spain
                            'FI': 18,  # Finland
                            'FO': 18,  # Faroe Islands
                            'FR': 27,  # France + Central African Republic, French Guiana, French Polynesia, Guadeloupe,
                                       #          Martinique, Réunion, Saint-Pierre and Miquelon, New Caledonia,
                                       #          Wallis and Futuna
                            'GB': 22,  # United Kingdom + Guernsey, Isle of Man, Jersey
                            'GE': 22,  # Georgia
                            'GI': 23,  # Gibraltar
                            'GL': 18,  # Greenland
                            'GR': 27,  # Greece
                            'GT': 28,  # Guatemala
                            'HR': 21,  # Croatia
                            'HU': 28,  # Hungary
                            'IE': 22,  # Ireland
                            'IL': 23,  # Israel
                            'IS': 26,  # Iceland
                            'IT': 27,  # Italy
                            'JO': 30,  # Jordan
                            'KZ': 20,  # Kazakhstan
                            'KW': 30,  # Kuwait
                            'LB': 28,  # Lebanon
                            'LI': 21,  # Liechtenstein
                            'LT': 20,  # Lithuania
                            'LU': 20,  # Luxembourg
                            'LV': 21,  # Latvia
                            'MC': 27,  # Monaco
                            'MD': 24,  # Moldova
                            'ME': 22,  # Montenegro
                            'MK': 19,  # Macedonia
                            'MT': 31,  # Malta
                            'MR': 27,  # Mauritania
                            'MU': 30,  # Mauritius
                            'NL': 18,  # Netherlands
                            'NO': 15,  # Norway
                            'PS': 29,  # Palestine
                            'PK': 24,  # Pakistan
                            'PL': 28,  # Poland
                            'PT': 25,  # Portugal + Sao Tome and Principe
                            'QA': 29,  # Qatar
                            'RO': 24,  # Romania
                            'RS': 22,  # Serbia
                            'SA': 24,  # Saudi Arabia
                            'SE': 24,  # Sweden
                            'SI': 19,  # Slovenia
                            'SK': 24,  # Slovakia
                            'SM': 27,  # San Marino
                            'TN': 24,  # Tunisia
                            'TR': 26,  # Turkey
                            'VG': 24}  # British Virgin Islands


# Nordea has catalogued IBANs for some additional countries but they are not part of the office IBAN network yet.
#
# Reference:
# https://www.nordea.com/V%C3%A5ra+tj%C3%A4nster/Internationella+produkter+och+tj%C3%A4nster/Cash+Management/IBAN+countries/908472.html

NORDEA_COUNTRY_CODE_LENGTH = {'AO': 25,  # Angola
                              'BJ': 28,  # Benin
                              'BF': 27,  # Burkina Faso
                              'BI': 16,  # Burundi
                              'CI': 28,  # Ivory Coast
                              'CG': 27,  # Congo
                              'CM': 27,  # Cameroon
                              'CV': 25,  # Cape Verde
                              'DZ': 24,  # Algeria
                              'EG': 27,  # Egypt
                              'GA': 27,  # Gabon
                              'IR': 26,  # Iran
                              'MG': 27,  # Madagascar
                              'ML': 28,  # Mali
                              'MZ': 25,  # Mozambique
                              'UA': 29,  # Ukraine
                              'SN': 28}  # Senegal


class IBANValidator(object):
    """ A validator for International Bank Account Numbers (IBAN - ISO 13616-1:2007). """

    def __init__(self, use_nordea_extensions=False, include_countries=None):
        self.validation_countries = IBAN_COUNTRY_CODE_LENGTH.copy()
        if use_nordea_extensions:
            self.validation_countries.update(NORDEA_COUNTRY_CODE_LENGTH)

        self.include_countries = include_countries
        if self.include_countries:
            for country_code in include_countries:
                if country_code not in self.validation_countries:
                    raise ImproperlyConfigured(_('Explicitly requested country code {0} is not part of the configured IBAN validation set.'
                                                 ''.format(country_code)))

    def __call__(self, value):
        """
        Validates the IBAN value using the official IBAN validation algorithm.

        https://en.wikipedia.org/wiki/International_Bank_Account_Number#Validating_the_IBAN
        """
        if value is None:
            return value

        value = value.replace(' ', '').replace('-', '')

        # 1. Check that the total IBAN length is correct as per the country. If not, the IBAN is invalid.
        country_code = value[:2]
        if country_code in self.validation_countries:
            if self.validation_countries[country_code] != len(value):
                raise ValidationError(_('{0} IBANs must contain {1} characters.'
                                        ''.format(country_code, self.validation_countries[country_code])))

        else:
            raise ValidationError(_('{0} is not a valid country code for IBAN.'.format(country_code)))

        if self.include_countries and country_code not in self.include_countries:
            raise ValidationError(_('{0} IBANs are not allowed in this field.'.format(country_code)))

        # 2. Move the four initial characters to the end of the string.
        value = value[4:] + value[:4]

        # 3. Replace each letter in the string with two digits, thereby expanding the string, where
        #    A = 10, B = 11, ..., Z = 35.
        value_digits = ''
        for x in value:
            ord_value = ord(x)
            if 48 <= ord_value <= 57:  # 0 - 9
                value_digits += x
            elif 65 <= ord_value <= 90:  # A - Z
                value_digits += str(ord_value - 55)
            else:
                raise ValidationError(_('{0} is not a valid character for IBAN.'.format(x)))

        # 4. Interpret the string as a decimal integer and compute the remainder of that number on division by 97.
        if int(value_digits) % 97 != 1:
            raise ValidationError(_('Not a valid IBAN.'))

########NEW FILE########
__FILENAME__ = forms
"""
Greek-specific forms helpers
"""
import re

from django.forms.fields import RegexField, Field
from django.utils.translation import ugettext_lazy as _

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError

try:
    from django.utils.encoding import smart_text
except ImportError:
    from django.utils.encoding import smart_unicode as smart_text


NUMERIC_RE = re.compile('^\d+$')


class GRPostalCodeField(RegexField):
    """
    Greek Postal code field.
    Format: XXXXX, where X is any digit, and first digit is not 0 or 9.
    """
    default_error_messages = {
        'invalid': _('Enter a valid 5-digit greek postal code.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(GRPostalCodeField, self).__init__(r'^[12345678]\d{4}$',
                                                max_length, min_length, *args, **kwargs)


class GRTaxNumberCodeField(Field):
    """
    Greek tax number field.
    The allow_test_value option can be used to enable the usage of the
    non valid 000000000 value for testing and development
    """
    default_error_messages = {
        'invalid': _('Enter a valid greek tax number (9 digits).'),
    }

    def __init__(self, allow_test_value=False, *args, **kwargs):
        self.allow_test_value = allow_test_value
        super(GRTaxNumberCodeField, self).__init__(*args, **kwargs)

    def clean(self, value):
        super(GRTaxNumberCodeField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        val = re.sub('[\-\s\(\)]', '', smart_text(value))
        if(len(val) < 9):
            raise ValidationError(self.error_messages['invalid'])
        if not self.allow_test_value and val == '000000000':
            raise ValidationError(self.error_messages['invalid'])
        digits = list(map(int, val))
        digits1 = digits[:-1]
        digits1.reverse()
        check = digits[-1]
        mod = sum([d * pow(2, i + 1) for i, d in enumerate(digits1)]) % 11
        if mod == 10:
            mod = 0
        if mod != check:
            raise ValidationError(self.error_messages['invalid'])
        return val


class GRPhoneNumberField(Field):
    """
    Greek general phone field - 10 digits (can also start with +30
    which is the country-code foor greece)
    """
    default_error_messages = {
        'invalid': _('Enter a 10-digit greek phone number.'),
    }

    def clean(self, value):
        super(GRPhoneNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        phone_nr = re.sub('[\-\s\(\)]', '', smart_text(value))

        if len(phone_nr) == 10 and NUMERIC_RE.search(phone_nr):
            return value

        if phone_nr[:3] == '+30' and len(phone_nr) == 13 and NUMERIC_RE.search(phone_nr[3:]):
            return value

        raise ValidationError(self.error_messages['invalid'])


class GRMobilePhoneNumberField(Field):
    """
    Greek mobile phone field - 10 digits starting with 69
    (could also start with +30 which is the country-code foor greece)
    """
    default_error_messages = {
        'invalid': _('Enter a greek mobile phone number starting with 69.'),
    }

    def clean(self, value):
        super(GRMobilePhoneNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        phone_nr = re.sub('[\-\s\(\)]', '', smart_text(value))

        if len(phone_nr) == 10 and NUMERIC_RE.search(phone_nr) and phone_nr.startswith('69'):
            return value

        if phone_nr[:3] == '+30' and len(phone_nr) == 13 and NUMERIC_RE.search(phone_nr[3:]) and phone_nr[3:].startswith('69'):
            return value

        raise ValidationError(self.error_messages['invalid'])

########NEW FILE########
__FILENAME__ = forms
"""
Hong Kong specific Form helpers
"""
from __future__ import absolute_import, unicode_literals

import re

from django.core.validators import EMPTY_VALUES
from django.forms import CharField
from django.forms import ValidationError
from django.utils.encoding import smart_text
from django.utils.translation import ugettext_lazy as _


hk_phone_digits_re = re.compile(r'^(?:852-?)?(\d{4})[-\.]?(\d{4})$')
hk_special_numbers = ('999', '992', '112')
hk_phone_prefixes = ('2', '3', '5', '6', '8', '9')
hk_formats = ['XXXX-XXXX', '852-XXXX-XXXX', '(+852) XXXX-XXXX',
              'XXXX XXXX', 'XXXXXXXX']


class HKPhoneNumberField(CharField):
    """
    A form field that validates Hong Kong phone numbers.

    The input format can be either one of the followings:
    'XXXX-XXXX', '852-XXXX-XXXX', '(+852) XXXX-XXXX',
    'XXXX XXXX', or 'XXXXXXXX'.
    The output format is 'XXXX-XXXX'.

    Note: The phone number shall not start with 999, 992, or 112.
          And, it should start with either 2, 3, 5, 6, 8, or 9.

    http://en.wikipedia.org/wiki/Telephone_numbers_in_Hong_Kong
    """
    default_error_messages = {
        'disguise': _('Phone number should not start with '
                      'one of the followings: %s.' %
                      ', '.join(hk_special_numbers)),
        'invalid': _('Phone number must be in one of the following formats: '
                     '%s.' % ', '.join(hk_formats)),
        'prefix': _('Phone number should start with '
                    'one of the followings: %s.' %
                    ', '.join(hk_phone_prefixes)),
    }

    def __init__(self, *args, **kwargs):
        super(HKPhoneNumberField, self).__init__(*args, **kwargs)

    def clean(self, value):
        super(HKPhoneNumberField, self).clean(value)

        if value in EMPTY_VALUES:
            return ''

        value = re.sub('(\(|\)|\s+|\+)', '', smart_text(value))
        m = hk_phone_digits_re.search(value)
        if not m:
            raise ValidationError(self.error_messages['invalid'])

        value = '%s-%s' % (m.group(1), m.group(2))
        for special in hk_special_numbers:
            if value.startswith(special):
                raise ValidationError(self.error_messages['disguise'])

        prefix_found = map(lambda prefix: value.startswith(prefix),
                           hk_phone_prefixes)
        if not any(prefix_found):
            raise ValidationError(self.error_messages['prefix'])

        return value

########NEW FILE########
__FILENAME__ = forms
# -*- coding: utf-8 -*-
"""
HR-specific Form helpers
"""
from __future__ import absolute_import, unicode_literals

import datetime
import re

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import Field, Select, RegexField
from django.utils.encoding import smart_text
from django.utils.translation import ugettext_lazy as _

from .hr_choices import (HR_LICENSE_PLATE_PREFIX_CHOICES, HR_COUNTY_CHOICES,
                         HR_PHONE_NUMBER_PREFIX_CHOICES)


jmbg_re = re.compile(r'^(?P<dd>\d{2})(?P<mm>\d{2})(?P<yyy>\d{3})' +
                     r'(?P<rr>\d{2})(?P<bbb>\d{3})(?P<k>\d{1})$')
oib_re = re.compile(r'^\d{11}$')
plate_re = re.compile(r'^(?P<prefix>[A-ZČŠŽ]{2})' +
                      r'(?P<number>\d{3,4})' +
                      r'(?P<suffix>[ABCDEFGHIJKLMNOPRSTUVZ]{1,2})$')
postal_code_re = re.compile(r'^\d{5}$')
phone_re = re.compile(r'^(\+385|00385|0)(?P<prefix>\d{2})(?P<number>\d{6,7})$')
jmbag_re = re.compile(r'^601983(?P<copy>\d{1})1(?P<jmbag>\d{10})(?P<k>\d{1})$')


class HRCountySelect(Select):
    """
    A Select widget that uses a list of counties of Croatia as its choices.
    """
    def __init__(self, attrs=None):
        super(HRCountySelect, self).__init__(attrs, choices=HR_COUNTY_CHOICES)


class HRLicensePlatePrefixSelect(Select):
    """
    A Select widget that uses a list of vehicle license plate prefixes of
    Croatia as its choices.
    """
    def __init__(self, attrs=None):
        super(HRLicensePlatePrefixSelect, self).__init__(attrs,
                                                         choices=HR_LICENSE_PLATE_PREFIX_CHOICES)


class HRPhoneNumberPrefixSelect(Select):
    """
    A Select widget that uses a list of phone number prefixes of Croatia as its
    choices.
    """
    def __init__(self, attrs=None):
        super(HRPhoneNumberPrefixSelect, self).__init__(attrs,
                                                        choices=HR_PHONE_NUMBER_PREFIX_CHOICES)


class HRJMBGField(Field):
    """
    Unique Master Citizen Number (JMBG) field.
    The number is still in use in Croatia, but it is being replaced by OIB.

    Source: http://en.wikipedia.org/wiki/Unique_Master_Citizen_Number

    For who might be reimplementing:
    The "area" regular expression group is used to calculate the region where a
    person was registered. Additional validation can be implemented in
    accordance with it, however this could result in exclusion of legit
    immigrated citizens. Therefore, this field works for any ex-Yugoslavia
    country.
    """
    default_error_messages = {
        'invalid': _('Enter a valid 13 digit JMBG'),
        'date': _('Error in date segment'),
    }

    def clean(self, value):
        super(HRJMBGField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        value = value.strip()

        matches = jmbg_re.search(value)
        if matches is None:
            raise ValidationError(self.error_messages['invalid'])

        # Make sure the date part is correct.
        dd = int(matches.group('dd'))
        mm = int(matches.group('mm'))
        yyy = int(matches.group('yyy'))
        try:
            datetime.date(yyy, mm, dd)
        except ValueError:
            raise ValidationError(self.error_messages['date'])

        # Validate checksum.
        k = matches.group('k')
        checksum = 0
        for i, j in zip(range(7, 1, -1), range(6)):
            checksum += i * (int(value[j]) + int(value[13 - i]))
        m = 11 - checksum % 11
        if m == 10:
            raise ValidationError(self.error_messages['invalid'])
        if m == 11 and k != '0':
            raise ValidationError(self.error_messages['invalid'])
        if not str(m) == k:
            raise ValidationError(self.error_messages['invalid'])

        return '%s' % (value, )


class HROIBField(RegexField):
    """
    Personal Identification Number of Croatia (OIB) field.

    http://www.oib.hr/
    """
    default_error_messages = {
        'invalid': _('Enter a valid 11 digit OIB'),
    }

    def __init__(self, min_length=11, max_length=11, *args, **kwargs):
        super(HROIBField, self).__init__(r'^\d{11}$',
                                         min_length, max_length, *args, **kwargs)

    def clean(self, value):
        super(HROIBField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        return '%s' % (value, )


class HRLicensePlateField(Field):
    """
    Vehicle license plate of Croatia field. Normalizes to the specific format
    below. Suffix is constructed from the shared letters of the Croatian and
    English alphabets.

    Format examples:
        SB 123-A
        (but also supports more characters)
        ZG 1234-AA

    Used for standardized license plates only.
    """
    default_error_messages = {
        'invalid': _('Enter a valid vehicle license plate number'),
        'area': _('Enter a valid location code'),
        'number': _('Number part cannot be zero'),
    }

    def clean(self, value):
        super(HRLicensePlateField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        value = re.sub(r'[\s\-]+', '', smart_text(value.strip())).upper()

        matches = plate_re.search(value)
        if matches is None:
            raise ValidationError(self.error_messages['invalid'])

        # Make sure the prefix is in the list of known codes.
        prefix = matches.group('prefix')
        if prefix not in [choice[0] for choice in HR_LICENSE_PLATE_PREFIX_CHOICES]:
            raise ValidationError(self.error_messages['area'])

        # Make sure the number portion is not zero.
        number = matches.group('number')
        if int(number) == 0:
            raise ValidationError(self.error_messages['number'])

        return '%s %s-%s' % (prefix, number, matches.group('suffix'))


class HRPostalCodeField(Field):
    """
    Postal code of Croatia field.
    It consists of exactly five digits ranging from 10000 to possibly less than
    60000.

    http://www.posta.hr/main.aspx?id=66
    """
    default_error_messages = {
        'invalid': _('Enter a valid 5 digit postal code'),
    }

    def clean(self, value):
        super(HRPostalCodeField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        value = value.strip()
        if not postal_code_re.search(value):
            raise ValidationError(self.error_messages['invalid'])

        # Make sure the number is in valid range.
        if not 9999 < int(value) < 60000:
            raise ValidationError(self.error_messages['invalid'])

        return '%s' % value


class HRPhoneNumberField(Field):
    """
    Phone number of Croatia field.
    Format: Complete country code or leading zero, area code prefix, 6 or 7
    digit number.
    Validates fixed, mobile and FGSM numbers. Normalizes to a full number with
    country code (+385 prefix).
    """
    default_error_messages = {
        'invalid': _('Enter a valid phone number'),
        'area': _('Enter a valid area or mobile network code'),
        'number': _('The phone number is too long'),
    }

    def clean(self, value):
        super(HRPhoneNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        value = re.sub(r'[\-\s\(\)]', '', smart_text(value))

        matches = phone_re.search(value)
        if matches is None:
            raise ValidationError(self.error_messages['invalid'])

        # Make sure the prefix is in the list of known codes.
        prefix = matches.group('prefix')
        number = matches.group('number')
        if prefix[0] == '1':
            number = prefix[1] + number
            prefix = prefix[0]
        if prefix not in [choice[0] for choice in HR_PHONE_NUMBER_PREFIX_CHOICES]:
            raise ValidationError(self.error_messages['area'])

        # Make sure the number is of adequate length.
        if prefix == '1' and len(number) != 7:
            raise ValidationError(self.error_messages['number'])

        return '%s%s%s' % ('+385', prefix, number)


class HRJMBAGField(Field):
    """
    Unique Master Academic Citizen Number of Croatia (JMBAG) field.
    This number is used by college students and professors in Croatia.

    http://www.cap.srce.hr/IzgledX.aspx
    """
    default_error_messages = {
        'invalid': _('Enter a valid 19 digit JMBAG starting with 601983'),
        'copy': _('Card issue number cannot be zero'),
    }

    def clean(self, value):
        super(HRJMBAGField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        value = re.sub(r'[\-\s]', '', value.strip())

        matches = jmbag_re.search(value)
        if matches is None:
            raise ValidationError(self.error_messages['invalid'])

        # Make sure the issue number is not zero.
        if matches.group('copy') == '0':
            raise ValidationError(self.error_messages['copy'])

        # Validate checksum using Luhn algorithm.
        num = [int(x) for x in value]
        if not sum(num[::-2] + [sum(divmod(d * 2, 10)) for d in num[-2::-2]]) % 10 == 0:
            raise ValidationError(self.error_messages['invalid'])

        return '%s' % value

########NEW FILE########
__FILENAME__ = hr_choices
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.utils.translation import ugettext_lazy as _

#: Croatian Counties: http://en.wikipedia.org/wiki/ISO_3166-2:HR
#: Croatia doesn't have official abbreviations for counties. The ones provided are in common use.
HR_COUNTY_CHOICES = (
    ('GZG', _('Grad Zagreb')),
    ('BBŽ', _('Bjelovarsko-bilogorska županija')),
    ('BPŽ', _('Brodsko-posavska županija')),
    ('DNŽ', _('Dubrovačko-neretvanska županija')),
    ('IŽ', _('Istarska županija')),
    ('KŽ', _('Karlovačka županija')),
    ('KKŽ', _('Koprivničko-križevačka županija')),
    ('KZŽ', _('Krapinsko-zagorska županija')),
    ('LSŽ', _('Ličko-senjska županija')),
    ('MŽ', _('Međimurska županija')),
    ('OBŽ', _('Osječko-baranjska županija')),
    ('PSŽ', _('Požeško-slavonska županija')),
    ('PGŽ', _('Primorsko-goranska županija')),
    ('SMŽ', _('Sisačko-moslavačka županija')),
    ('SDŽ', _('Splitsko-dalmatinska županija')),
    ('ŠKŽ', _('Šibensko-kninska županija')),
    ('VŽ', _('Varaždinska županija')),
    ('VPŽ', _('Virovitičko-podravska županija')),
    ('VSŽ', _('Vukovarsko-srijemska županija')),
    ('ZDŽ', _('Zadarska županija')),
    ('ZGŽ', _('Zagrebačka županija')),
)

#: Only common license plate prefixes are provided. Special cases and obsolete prefixes are omitted.
#: http://hr.wikipedia.org/wiki/Dodatak:Popis_registracijskih_oznaka_za_cestovna_vozila_u_Hrvatskoj
HR_LICENSE_PLATE_PREFIX_CHOICES = (
    ('BJ', 'BJ'),
    ('BM', 'BM'),
    ('ČK', 'ČK'),
    ('DA', 'DA'),
    ('DE', 'DE'),
    ('DJ', 'DJ'),
    ('DU', 'DU'),
    ('GS', 'GS'),
    ('IM', 'IM'),
    ('KA', 'KA'),
    ('KC', 'KC'),
    ('KR', 'KR'),
    ('KT', 'KT'),
    ('KŽ', 'KŽ'),
    ('MA', 'MA'),
    ('NA', 'NA'),
    ('NG', 'NG'),
    ('OG', 'OG'),
    ('OS', 'OS'),
    ('PU', 'PU'),
    ('PŽ', 'PŽ'),
    ('RI', 'RI'),
    ('SB', 'SB'),
    ('SK', 'SK'),
    ('SL', 'SL'),
    ('ST', 'ST'),
    ('ŠI', 'ŠI'),
    ('VK', 'VK'),
    ('VT', 'VT'),
    ('VU', 'VU'),
    ('VŽ', 'VŽ'),
    ('ZD', 'ZD'),
    ('ZG', 'ZG'),
    ('ŽU', 'ŽU'),
)

#: The list includes county and cellular network phone number prefixes.
HR_PHONE_NUMBER_PREFIX_CHOICES = (
    ('1', '01'),
    ('20', '020'),
    ('21', '021'),
    ('22', '022'),
    ('23', '023'),
    ('31', '031'),
    ('32', '032'),
    ('33', '033'),
    ('34', '034'),
    ('35', '035'),
    ('40', '040'),
    ('42', '042'),
    ('43', '043'),
    ('44', '044'),
    ('47', '047'),
    ('48', '048'),
    ('49', '049'),
    ('51', '051'),
    ('52', '052'),
    ('53', '053'),
    ('91', '091'),
    ('92', '092'),
    ('95', '095'),
    ('97', '097'),
    ('98', '098'),
    ('99', '099'),
)

########NEW FILE########
__FILENAME__ = forms
"""
ID-specific Form helpers
"""

from __future__ import absolute_import, unicode_literals

import re
import time

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import Field, Select
from django.utils.translation import ugettext_lazy as _
from django.utils.encoding import smart_text


postcode_re = re.compile(r'^[1-9]\d{4}$')
phone_re = re.compile(r'^(\+62|0)[2-9]\d{7,10}$')
plate_re = re.compile(r'^(?P<prefix>[A-Z]{1,2}) ' +
                      r'(?P<number>\d{1,5})( (?P<suffix>([A-Z]{1,3}|[1-9][0-9]{,2})))?$')
nik_re = re.compile(r'^\d{16}$')


class IDPostCodeField(Field):
    """
    An Indonesian post code field.

    http://id.wikipedia.org/wiki/Kode_pos
    """
    default_error_messages = {
        'invalid': _('Enter a valid post code'),
    }

    def clean(self, value):
        super(IDPostCodeField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        value = value.strip()
        if not postcode_re.search(value):
            raise ValidationError(self.error_messages['invalid'])

        if int(value) < 10110:
            raise ValidationError(self.error_messages['invalid'])

        # 1xxx0
        if value[0] == '1' and value[4] != '0':
            raise ValidationError(self.error_messages['invalid'])

        return '%s' % (value, )


class IDProvinceSelect(Select):
    """
    A Select widget that uses a list of provinces of Indonesia as its
    choices.
    """

    def __init__(self, attrs=None):
        # Load data in memory only when it is required, see also #17275
        from .id_choices import PROVINCE_CHOICES
        super(IDProvinceSelect, self).__init__(attrs, choices=PROVINCE_CHOICES)


class IDPhoneNumberField(Field):
    """
    An Indonesian telephone number field.

    http://id.wikipedia.org/wiki/Daftar_kode_telepon_di_Indonesia
    """
    default_error_messages = {
        'invalid': _('Enter a valid phone number'),
    }

    def clean(self, value):
        super(IDPhoneNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        phone_number = re.sub(r'[\-\s\(\)]', '', smart_text(value))

        if phone_re.search(phone_number):
            return smart_text(value)

        raise ValidationError(self.error_messages['invalid'])


class IDLicensePlatePrefixSelect(Select):
    """
    A Select widget that uses a list of vehicle license plate prefix code
    of Indonesia as its choices.

    http://id.wikipedia.org/wiki/Tanda_Nomor_Kendaraan_Bermotor
    """

    def __init__(self, attrs=None):
        # Load data in memory only when it is required, see also #17275
        from .id_choices import LICENSE_PLATE_PREFIX_CHOICES
        super(IDLicensePlatePrefixSelect, self).__init__(attrs,
                                                         choices=LICENSE_PLATE_PREFIX_CHOICES)


class IDLicensePlateField(Field):
    """
    An Indonesian vehicle license plate field.

    http://id.wikipedia.org/wiki/Tanda_Nomor_Kendaraan_Bermotor

    Plus: "B 12345 12"
    """
    default_error_messages = {
        'invalid': _('Enter a valid vehicle license plate number'),
    }

    def clean(self, value):
        # Load data in memory only when it is required, see also #17275
        from .id_choices import LICENSE_PLATE_PREFIX_CHOICES
        super(IDLicensePlateField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        plate_number = re.sub(r'\s+', ' ',
                              smart_text(value.strip())).upper()

        matches = plate_re.search(plate_number)
        if matches is None:
            raise ValidationError(self.error_messages['invalid'])

        # Make sure prefix is in the list of known codes.
        prefix = matches.group('prefix')
        if prefix not in [choice[0] for choice in LICENSE_PLATE_PREFIX_CHOICES]:
            raise ValidationError(self.error_messages['invalid'])

        # Only Jakarta (prefix B) can have 3 letter suffix.
        suffix = matches.group('suffix')
        if suffix is not None and len(suffix) == 3 and prefix != 'B':
            raise ValidationError(self.error_messages['invalid'])

        # RI plates don't have suffix.
        if prefix == 'RI' and suffix is not None and suffix != '':
            raise ValidationError(self.error_messages['invalid'])

        # Number can't be zero.
        number = matches.group('number')
        if number == '0':
            raise ValidationError(self.error_messages['invalid'])

        # CD, CC and B 12345 12
        if len(number) == 5 or prefix in ('CD', 'CC'):
            # suffix must be numeric and non-empty
            if re.match(r'^\d+$', suffix) is None:
                raise ValidationError(self.error_messages['invalid'])

            # Known codes range is 12-124
            if prefix in ('CD', 'CC') and not (12 <= int(number) <= 124):
                raise ValidationError(self.error_messages['invalid'])
            if len(number) == 5 and not (12 <= int(suffix) <= 124):
                raise ValidationError(self.error_messages['invalid'])
        else:
            # suffix must be non-numeric
            if suffix is not None and re.match(r'^[A-Z]{,3}$', suffix) is None:
                raise ValidationError(self.error_messages['invalid'])

        return plate_number


class IDNationalIdentityNumberField(Field):
    """
    An Indonesian national identity number (NIK/KTP#) field.

    http://id.wikipedia.org/wiki/Nomor_Induk_Kependudukan

    xx.xxxx.ddmmyy.xxxx - 16 digits (excl. dots)
    """
    default_error_messages = {
        'invalid': _('Enter a valid NIK/KTP number'),
    }

    def clean(self, value):
        super(IDNationalIdentityNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        value = re.sub(r'[\s.]', '', smart_text(value))

        if not nik_re.search(value):
            raise ValidationError(self.error_messages['invalid'])

        if int(value) == 0:
            raise ValidationError(self.error_messages['invalid'])

        def valid_nik_date(year, month, day):
            try:
                t1 = (int(year), int(month), int(day), 0, 0, 0, 0, 0, -1)
                d = time.mktime(t1)
                t2 = time.localtime(d)
                if t1[:3] != t2[:3]:
                    return False
                else:
                    return True
            except (OverflowError, ValueError):
                return False

        year = int(value[10:12])
        month = int(value[8:10])
        day = int(value[6:8])
        current_year = time.localtime().tm_year
        if year < int(str(current_year)[-2:]):
            if not valid_nik_date(2000 + int(year), month, day):
                raise ValidationError(self.error_messages['invalid'])
        elif not valid_nik_date(1900 + int(year), month, day):
            raise ValidationError(self.error_messages['invalid'])

        if value[:6] == '000000' or value[12:] == '0000':
            raise ValidationError(self.error_messages['invalid'])

        return '%s.%s.%s.%s' % (value[:2], value[2:6], value[6:12], value[12:])

########NEW FILE########
__FILENAME__ = id_choices
from django.utils.translation import ugettext_lazy as _

#: Indonesia does not have an official Province code standard.
#: I decided to use unambiguous and consistent (some are common) 3-letter codes.
#: http://id.wikipedia.org/wiki/Daftar_provinsi_Indonesia
PROVINCE_CHOICES = (
    ('ACE', _('Aceh')),
    ('BLI', _('Bali')),
    ('BTN', _('Banten')),
    ('BKL', _('Bengkulu')),
    ('DIY', _('Yogyakarta')),
    ('JKT', _('Jakarta')),
    ('GOR', _('Gorontalo')),
    ('JMB', _('Jambi')),
    ('JBR', _('Jawa Barat')),
    ('JTG', _('Jawa Tengah')),
    ('JTM', _('Jawa Timur')),
    ('KBR', _('Kalimantan Barat')),
    ('KSL', _('Kalimantan Selatan')),
    ('KTG', _('Kalimantan Tengah')),
    ('KTM', _('Kalimantan Timur')),
    ('BBL', _('Kepulauan Bangka-Belitung')),
    ('KRI', _('Kepulauan Riau')),
    ('LPG', _('Lampung')),
    ('MLK', _('Maluku')),
    ('MUT', _('Maluku Utara')),
    ('NTB', _('Nusa Tenggara Barat')),
    ('NTT', _('Nusa Tenggara Timur')),
    ('PPA', _('Papua')),
    ('PPB', _('Papua Barat')),
    ('RIU', _('Riau')),
    ('SLB', _('Sulawesi Barat')),
    ('SLS', _('Sulawesi Selatan')),
    ('SLT', _('Sulawesi Tengah')),
    ('SLR', _('Sulawesi Tenggara')),
    ('SLU', _('Sulawesi Utara')),
    ('SMB', _('Sumatera Barat')),
    ('SMS', _('Sumatera Selatan')),
    ('SMU', _('Sumatera Utara')),
)

#: License plate prefixes
LICENSE_PLATE_PREFIX_CHOICES = (
    ('A', _('Banten')),
    ('AA', _('Magelang')),
    ('AB', _('Yogyakarta')),
    ('AD', _('Surakarta - Solo')),
    ('AE', _('Madiun')),
    ('AG', _('Kediri')),
    ('B', _('Jakarta')),
    ('BA', _('Sumatera Barat')),
    ('BB', _('Tapanuli')),
    ('BD', _('Bengkulu')),
    ('BE', _('Lampung')),
    ('BG', _('Sumatera Selatan')),
    ('BH', _('Jambi')),
    ('BK', _('Sumatera Utara')),
    ('BL', _('Nanggroe Aceh Darussalam')),
    ('BM', _('Riau')),
    ('BN', _('Kepulauan Bangka Belitung')),
    ('BP', _('Kepulauan Riau')),
    ('CC', _('Corps Consulate')),
    ('CD', _('Corps Diplomatic')),
    ('D', _('Bandung')),
    ('DA', _('Kalimantan Selatan')),
    ('DB', _('Sulawesi Utara Daratan')),
    ('DC', _('Sulawesi Barat')),
    ('DD', _('Sulawesi Selatan')),
    ('DE', _('Maluku')),
    ('DG', _('Maluku Utara')),
    ('DH', _('NTT - Timor')),
    ('DK', _('Bali')),
    ('DL', _('Sulawesi Utara Kepulauan')),
    ('DM', _('Gorontalo')),
    ('DN', _('Sulawesi Tengah')),
    ('DR', _('NTB - Lombok')),
    ('DS', _('Papua dan Papua Barat')),
    ('DT', _('Sulawesi Tenggara')),
    ('E', _('Cirebon')),
    ('EA', _('NTB - Sumbawa')),
    ('EB', _('NTT - Flores')),
    ('ED', _('NTT - Sumba')),
    ('F', _('Bogor')),
    ('G', _('Pekalongan')),
    ('H', _('Semarang')),
    ('K', _('Pati')),
    ('KB', _('Kalimantan Barat')),
    ('KH', _('Kalimantan Tengah')),
    ('KT', _('Kalimantan Timur')),
    ('L', _('Surabaya')),
    ('M', _('Madura')),
    ('N', _('Malang')),
    ('P', _('Jember')),
    ('R', _('Banyumas')),
    ('RI', _('Federal Government')),
    ('S', _('Bojonegoro')),
    ('T', _('Purwakarta')),
    ('W', _('Sidoarjo')),
    ('Z', _('Garut')),
)

########NEW FILE########
__FILENAME__ = forms
"""
UK-specific Form helpers
"""

from __future__ import absolute_import

from django.forms.fields import Select

from .ie_counties import IE_COUNTY_CHOICES


class IECountySelect(Select):
    """
    A Select widget that uses a list of Irish Counties as its choices.
    """
    def __init__(self, attrs=None):
        super(IECountySelect, self).__init__(attrs, choices=IE_COUNTY_CHOICES)

########NEW FILE########
__FILENAME__ = ie_counties
from django.utils.translation import ugettext_lazy as _

#: Irish Counties: http://en.wikipedia.org/wiki/Counties_of_Ireland
IE_COUNTY_CHOICES = (
    ('carlow', _('Carlow')),
    ('cavan', _('Cavan')),
    ('clare', _('Clare')),
    ('cork', _('Cork')),
    ('donegal', _('Donegal')),
    ('dublin', _('Dublin')),
    ('galway', _('Galway')),
    ('kerry', _('Kerry')),
    ('kildare', _('Kildare')),
    ('kilkenny', _('Kilkenny')),
    ('laois', _('Laois')),
    ('leitrim', _('Leitrim')),
    ('limerick', _('Limerick')),
    ('longford', _('Longford')),
    ('louth', _('Louth')),
    ('mayo', _('Mayo')),
    ('meath', _('Meath')),
    ('monaghan', _('Monaghan')),
    ('offaly', _('Offaly')),
    ('roscommon', _('Roscommon')),
    ('sligo', _('Sligo')),
    ('tipperary', _('Tipperary')),
    ('waterford', _('Waterford')),
    ('westmeath', _('Westmeath')),
    ('wexford', _('Wexford')),
    ('wicklow', _('Wicklow')),
)

########NEW FILE########
__FILENAME__ = forms
"""
Israeli-specific form helpers
"""
from __future__ import unicode_literals
import re

from django.core.exceptions import ValidationError
from django.core.validators import EMPTY_VALUES
from django.forms.fields import RegexField, Field
from django.utils.checksums import luhn
from django.utils.translation import ugettext_lazy as _

id_number_re = re.compile(r'^(?P<number>\d{1,8})-?(?P<check>\d)$')
mobile_phone_number_re = re.compile(r'^(\()?0?(5[02-9])(?(1)\))-?\d{7}$')  # including palestinian mobile carriers


class ILPostalCodeField(RegexField):
    """
    A form field that validates its input as an Israeli postal code.
    Valid form is XXXXX where X represents integer.
    """
    default_error_messages = {
        'invalid': _('Enter a postal code in the format XXXXXXX (or XXXXX) - digits only'),
    }

    def __init__(self, *args, **kwargs):
        super(ILPostalCodeField, self).__init__(r'^\d{5}$|^\d{7}$', *args, **kwargs)

    def clean(self, value):
        if value not in EMPTY_VALUES:
            value = value.replace(" ", "")
        return super(ILPostalCodeField, self).clean(value)


class ILIDNumberField(Field):
    """
    A form field that validates its input as an Israeli identification number.
    Valid form is per the Israeli ID specification.

    Israeli ID numbers consist of up to 8 digits followed by a checksum digit.
    Numbers which are shorter than 8 digits are effectively left-zero-padded.
    The checksum digit is occasionally separated from the number by a hyphen,
    and is calculated using the luhn algorithm.

    Relevant references (in Hewbrew):

    http://he.wikipedia.org/wiki/%D7%9E%D7%A1%D7%A4%D7%A8_%D7%96%D7%94%D7%95%D7%AA_(%D7%99%D7%A9%D7%A8%D7%90%D7%9C)
    http://he.wikipedia.org/wiki/%D7%A1%D7%A4%D7%A8%D7%AA_%D7%91%D7%99%D7%A7%D7%95%D7%A8%D7%AA
    http://he.wikipedia.org/wiki/%D7%A7%D7%99%D7%93%D7%95%D7%9E%D7%AA_%D7%98%D7%9C%D7%A4%D7%95%D7%9F_%D7%91%D7%99%D7%A9%D7%A8%D7%90%D7%9C#.D7.A7.D7.99.D7.93.D7.95.D7.9E.D7.95.D7.AA_.D7.91.D7.99.D7.A9.D7.A8.D7.90.D7.9C_.D7.9C.D7.A4.D7.99_.D7.9E.D7.A4.D7.A2.D7.99.D7.9C.D7.99.D7.9D_.D7.95.D7.97.D7.9C.D7.95.D7.A7.D7.94_.D7.92.D7.90.D7.95.D7.92.D7.A8.D7.A4.D7.99.D7.AA
    """

    default_error_messages = {
        'invalid': _('Enter a valid ID number.'),
    }

    def clean(self, value):
        value = super(ILIDNumberField, self).clean(value)

        if value in EMPTY_VALUES:
            return ''

        match = id_number_re.match(value)
        if not match:
            raise ValidationError(self.error_messages['invalid'])

        value = match.group('number') + match.group('check')
        if not luhn(value):
            raise ValidationError(self.error_messages['invalid'])
        return value


class ILMobilePhoneNumberField(RegexField):
    """
    A form field that validates its input as an Israeli Mobile phone number.
    """

    default_error_messages = {
        'invalid': _('Enter a valid Mobile Number.'),
    }

    def __init__(self, *args, **kwargs):
        super(ILMobilePhoneNumberField, self).__init__(mobile_phone_number_re, *args, **kwargs)

########NEW FILE########
__FILENAME__ = forms
"""
India-specific Form helpers.
"""

from __future__ import absolute_import, unicode_literals

import re

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import Field, RegexField, CharField, Select
from django.utils.encoding import smart_text
from django.utils.translation import ugettext_lazy as _

from .in_states import STATES_NORMALIZED, STATE_CHOICES


phone_digits_re = re.compile(r"""
(
    (?P<std_code>                   # the std-code group
        ^0                          # all std-codes start with 0
        (
            (?P<twodigit>\d{2})   | # either two, three or four digits
            (?P<threedigit>\d{3}) | # following the 0
            (?P<fourdigit>\d{4})
        )
    )
    [-\s]                           # space or -
    (?P<phone_no>                   # the phone number group
        [1-6]                       # first digit of phone number
        (
            (?(twodigit)\d{7})   |  # 7 more phone digits for 3 digit stdcode
            (?(threedigit)\d{6}) |  # 6 more phone digits for 4 digit stdcode
            (?(fourdigit)\d{5})     # 5 more phone digits for 5 digit stdcode
        )
    )
)$""", re.VERBOSE)

aadhaar_re = re.compile(r"^(?P<part1>\d{4})[-\ ]?(?P<part2>\d{4})[-\ ]?(?P<part3>\d{4})$")


class INZipCodeField(RegexField):
    """
    A form field that validates input as an Indian zip code, with the
    format XXXXXXX.
    """
    default_error_messages = {
        'invalid': _('Enter a zip code in the format XXXXXX or XXX XXX.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(INZipCodeField, self).__init__(r'^\d{3}\s?\d{3}$',
                                             max_length, min_length, *args, **kwargs)

    def clean(self, value):
        value = super(INZipCodeField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        # Convert to "NNNNNN" if "NNN NNN" given
        value = re.sub(r'^(\d{3})\s(\d{3})$', r'\1\2', value)
        return value


class INStateField(Field):
    """
    A form field that validates its input is a Indian state name or
    abbreviation. It normalizes the input to the standard two-letter vehicle
    registration abbreviation for the given state or union territory
    """
    default_error_messages = {
        'invalid': _('Enter an Indian state or territory.'),
    }

    def clean(self, value):
        value = super(INStateField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        try:
            value = value.strip().lower()
        except AttributeError:
            pass
        else:
            try:
                return smart_text(STATES_NORMALIZED[value.strip().lower()])
            except KeyError:
                pass
        raise ValidationError(self.error_messages['invalid'])


class INAadhaarNumberField(Field):
    """
    A form field for Aadhaar number issued by
    Unique Identification Authority of India (UIDAI).

    Checks the following rules to determine whether the number is valid:

        * Conforms to the XXXX XXXX XXXX format.
        * No group consists entirely of zeroes.

    Important information:

        * Aadhaar number is a proof of identity but not of citizenship.
        * Aadhaar number is issued to every resident of India including
          foreign citizens.
        * Aadhaar number is not mandatory.

    More information can be found at
    http://uidai.gov.in/what-is-aadhaar-number.html
    """
    default_error_messages = {
        'invalid': _('Enter a valid Aadhaar number in XXXX XXXX XXXX or '
                     'XXXX-XXXX-XXXX format.'),
    }

    def clean(self, value):
        value = super(INAadhaarNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        match = re.match(aadhaar_re, value)
        if not match:
            raise ValidationError(self.error_messages['invalid'])
        part1, part2, part3 = match.groupdict()['part1'], match.groupdict()['part2'], match.groupdict()['part3']

        # all the parts can't be zero
        if part1 == '0000' and part2 == '0000' and part3 == '0000':
            raise ValidationError(self.error_messages['invalid'])

        return '%s %s %s' % (part1, part2, part3)


class INStateSelect(Select):
    """
    A Select widget that uses a list of Indian states/territories as its
    choices.
    """
    def __init__(self, attrs=None):
        super(INStateSelect, self).__init__(attrs, choices=STATE_CHOICES)


class INPhoneNumberField(CharField):
    """
    INPhoneNumberField validates that the data is a valid Indian phone number,
    including the STD code. It's normalised to 0XXX-XXXXXXX or 0XXX XXXXXXX
    format. The first string is the STD code which is a '0' followed by 2-4
    digits. The second string is 8 digits if the STD code is 3 digits, 7
    digits if the STD code is 4 digits and 6 digits if the STD code is 5
    digits. The second string will start with numbers between 1 and 6. The
    separator is either a space or a hyphen.
    """
    default_error_messages = {
        'invalid': _('Phone numbers must be in 02X-8X or 03X-7X or 04X-6X format.'),
    }

    def clean(self, value):
        value = super(INPhoneNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        value = smart_text(value)
        m = phone_digits_re.match(value)
        if m:
            return '%s' % (value)
        raise ValidationError(self.error_messages['invalid'])

########NEW FILE########
__FILENAME__ = in_states
#: A list of states
STATE_CHOICES = (
    ('KA', 'Karnataka'),
    ('AP', 'Andhra Pradesh'),
    ('KL', 'Kerala'),
    ('TN', 'Tamil Nadu'),
    ('MH', 'Maharashtra'),
    ('UP', 'Uttar Pradesh'),
    ('GA', 'Goa'),
    ('GJ', 'Gujarat'),
    ('RJ', 'Rajasthan'),
    ('HP', 'Himachal Pradesh'),
    ('JK', 'Jammu and Kashmir'),
    ('AR', 'Arunachal Pradesh'),
    ('AS', 'Assam'),
    ('BR', 'Bihar'),
    ('CG', 'Chattisgarh'),
    ('HR', 'Haryana'),
    ('JH', 'Jharkhand'),
    ('MP', 'Madhya Pradesh'),
    ('MN', 'Manipur'),
    ('ML', 'Meghalaya'),
    ('MZ', 'Mizoram'),
    ('NL', 'Nagaland'),
    ('OR', 'Orissa'),
    ('PB', 'Punjab'),
    ('SK', 'Sikkim'),
    ('TR', 'Tripura'),
    ('UA', 'Uttarakhand'),
    ('WB', 'West Bengal'),

    # Union Territories
    ('AN', 'Andaman and Nicobar'),
    ('CH', 'Chandigarh'),
    ('DN', 'Dadra and Nagar Haveli'),
    ('DD', 'Daman and Diu'),
    ('DL', 'Delhi'),
    ('LD', 'Lakshadweep'),
    ('PY', 'Pondicherry'),
)

#: Normalized state names
STATES_NORMALIZED = {
    'an': 'AN',
    'andaman and nicobar': 'AN',
    'andra pradesh': 'AP',
    'andrapradesh': 'AP',
    'andhrapradesh': 'AP',
    'ap': 'AP',
    'andhra pradesh': 'AP',
    'ar': 'AR',
    'arunachal pradesh': 'AR',
    'assam': 'AS',
    'as': 'AS',
    'bihar': 'BR',
    'br': 'BR',
    'cg': 'CG',
    'chattisgarh': 'CG',
    'ch': 'CH',
    'chandigarh': 'CH',
    'daman and diu': 'DD',
    'dd': 'DD',
    'dl': 'DL',
    'delhi': 'DL',
    'dn': 'DN',
    'dadra and nagar haveli': 'DN',
    'ga': 'GA',
    'goa': 'GA',
    'gj': 'GJ',
    'gujarat': 'GJ',
    'himachal pradesh': 'HP',
    'hp': 'HP',
    'hr': 'HR',
    'haryana': 'HR',
    'jharkhand': 'JH',
    'jh': 'JH',
    'jammu and kashmir': 'JK',
    'jk': 'JK',
    'karnataka': 'KA',
    'karnatka': 'KA',
    'ka': 'KA',
    'kerala': 'KL',
    'kl': 'KL',
    'ld': 'LD',
    'lakshadweep': 'LD',
    'maharastra': 'MH',
    'mh': 'MH',
    'maharashtra': 'MH',
    'meghalaya': 'ML',
    'ml': 'ML',
    'mn': 'MN',
    'manipur': 'MN',
    'madhya pradesh': 'MP',
    'mp': 'MP',
    'mizoram': 'MZ',
    'mizo': 'MZ',
    'mz': 'MZ',
    'nl': 'NL',
    'nagaland': 'NL',
    'orissa': 'OR',
    'odisa': 'OR',
    'orisa': 'OR',
    'or': 'OR',
    'pb': 'PB',
    'punjab': 'PB',
    'py': 'PY',
    'pondicherry': 'PY',
    'rajasthan': 'RJ',
    'rajastan': 'RJ',
    'rj': 'RJ',
    'sikkim': 'SK',
    'sk': 'SK',
    'tamil nadu': 'TN',
    'tn': 'TN',
    'tamilnadu': 'TN',
    'tamilnad': 'TN',
    'tr': 'TR',
    'tripura': 'TR',
    'ua': 'UA',
    'uttarakhand': 'UA',
    'up': 'UP',
    'uttar pradesh': 'UP',
    'westbengal': 'WB',
    'bengal': 'WB',
    'wb': 'WB',
    'west bengal': 'WB'
}

########NEW FILE########
__FILENAME__ = models
from django.utils.translation import ugettext_lazy as _
from django.db.models.fields import CharField

from .in_states import STATE_CHOICES


class INStateField(CharField):
    """
    A model field that forms represent as a ``forms.INStateField`` field and
    stores the two-letter Indian state abbreviation in the database.
    """
    description = _("Indian state (two uppercase letters)")

    def __init__(self, *args, **kwargs):
        kwargs['choices'] = STATE_CHOICES
        kwargs['max_length'] = 2
        super(INStateField, self).__init__(*args, **kwargs)

########NEW FILE########
__FILENAME__ = forms
"""
Iceland specific form helpers.
"""

from __future__ import absolute_import, unicode_literals

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import RegexField
from django.forms.widgets import Select

try:
    from django.utils.encoding import smart_text
except ImportError:
    # Attempt to import from a lesser version
    from django.utils.encoding import smart_unicode as smart_text

from django.utils.translation import ugettext_lazy as _

from .is_postalcodes import IS_POSTALCODES


class ISIdNumberField(RegexField):
    """
    Icelandic identification number (kennitala). This is a number every citizen
    of Iceland has.
    """
    default_error_messages = {
        'invalid': _('Enter a valid Icelandic identification number. The format is XXXXXX-XXXX.'),
        'checksum': _('The Icelandic identification number is not valid.'),
    }

    def __init__(self, max_length=11, min_length=10, *args, **kwargs):
        super(ISIdNumberField, self).__init__(r'^\d{6}(-| )?\d{4}$',
                                              max_length, min_length, *args, **kwargs)

    def clean(self, value):
        value = super(ISIdNumberField, self).clean(value)

        if value in EMPTY_VALUES:
            return ''

        value = self._canonify(value)
        if self._validate(value):
            return self._format(value)
        else:
            raise ValidationError(self.error_messages['checksum'])

    def _canonify(self, value):
        """
        Returns the value as only digits.
        """
        return value.replace('-', '').replace(' ', '')

    def _validate(self, value):
        """
        Takes in the value in canonical form and checks the verifier digit. The
        method is modulo 11.
        """
        check = [3, 2, 7, 6, 5, 4, 3, 2, 1, 0]
        return sum([int(value[i]) * check[i] for i in range(10)]) % 11 == 0

    def _format(self, value):
        """
        Takes in the value in canonical form and returns it in the common
        display format.
        """
        return smart_text(value[:6] + '-' + value[6:])


class ISPhoneNumberField(RegexField):
    """
    Icelandic phone number. Seven digits with an optional hyphen or space after
    the first three digits.
    """
    def __init__(self, max_length=8, min_length=7, *args, **kwargs):
        super(ISPhoneNumberField, self).__init__(r'^\d{3}(-| )?\d{4}$',
                                                 max_length, min_length, *args, **kwargs)

    def clean(self, value):
        value = super(ISPhoneNumberField, self).clean(value)

        if value in EMPTY_VALUES:
            return ''

        return value.replace('-', '').replace(' ', '')


class ISPostalCodeSelect(Select):
    """
    A Select widget that uses a list of Icelandic postal codes as its choices.
    """
    def __init__(self, attrs=None):
        super(ISPostalCodeSelect, self).__init__(attrs, choices=IS_POSTALCODES)

########NEW FILE########
__FILENAME__ = is_postalcodes
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

#: A list of Icelandic postal codes
IS_POSTALCODES = (
    ('101', '101 Reykjavík'),
    ('103', '103 Reykjavík'),
    ('104', '104 Reykjavík'),
    ('105', '105 Reykjavík'),
    ('107', '107 Reykjavík'),
    ('108', '108 Reykjavík'),
    ('109', '109 Reykjavík'),
    ('110', '110 Reykjavík'),
    ('111', '111 Reykjavík'),
    ('112', '112 Reykjavík'),
    ('113', '113 Reykjavík'),
    ('116', '116 Kjalarnes'),
    ('121', '121 Reykjavík'),
    ('123', '123 Reykjavík'),
    ('124', '124 Reykjavík'),
    ('125', '125 Reykjavík'),
    ('127', '127 Reykjavík'),
    ('128', '128 Reykjavík'),
    ('129', '129 Reykjavík'),
    ('130', '130 Reykjavík'),
    ('132', '132 Reykjavík'),
    ('150', '150 Reykjavík'),
    ('155', '155 Reykjavík'),
    ('170', '170 Seltjarnarnes'),
    ('172', '172 Seltjarnarnes'),
    ('190', '190 Vogar'),
    ('200', '200 Kópavogur'),
    ('201', '201 Kópavogur'),
    ('202', '202 Kópavogur'),
    ('203', '203 Kópavogur'),
    ('210', '210 Garðabær'),
    ('212', '212 Garðabær'),
    ('220', '220 Hafnarfjörður'),
    ('221', '221 Hafnarfjörður'),
    ('222', '222 Hafnarfjörður'),
    ('225', '225 Álftanes'),
    ('230', '230 Reykjanesbær'),
    ('232', '232 Reykjanesbær'),
    ('233', '233 Reykjanesbær'),
    ('235', '235 Keflavíkurflugvöllur'),
    ('240', '240 Grindavík'),
    ('245', '245 Sandgerði'),
    ('250', '250 Garður'),
    ('260', '260 Reykjanesbær'),
    ('270', '270 Mosfellsbær'),
    ('271', '271 Mosfellsbær'),
    ('276', '276 Mosfellsbær'),
    ('300', '300 Akranes'),
    ('301', '301 Akranes'),
    ('302', '302 Akranes'),
    ('310', '310 Borgarnes'),
    ('311', '311 Borgarnes'),
    ('320', '320 Reykholt í Borgarfirði'),
    ('340', '340 Stykkishólmur'),
    ('345', '345 Flatey á Breiðafirði'),
    ('350', '350 Grundarfjörður'),
    ('355', '355 Ólafsvík'),
    ('356', '356 Snæfellsbær'),
    ('360', '360 Hellissandur'),
    ('370', '370 Búðardalur'),
    ('371', '371 Búðardalur'),
    ('380', '380 Reykhólahreppur'),
    ('400', '400 Ísafjörður'),
    ('401', '401 Ísafjörður'),
    ('410', '410 Hnífsdalur'),
    ('415', '415 Bolungarvík'),
    ('420', '420 Súðavík'),
    ('425', '425 Flateyri'),
    ('430', '430 Suðureyri'),
    ('450', '450 Patreksfjörður'),
    ('451', '451 Patreksfjörður'),
    ('460', '460 Tálknafjörður'),
    ('465', '465 Bíldudalur'),
    ('470', '470 Þingeyri'),
    ('471', '471 Þingeyri'),
    ('500', '500 Staður'),
    ('510', '510 Hólmavík'),
    ('512', '512 Hólmavík'),
    ('520', '520 Drangsnes'),
    ('522', '522 Kjörvogur'),
    ('523', '523 Bær'),
    ('524', '524 Norðurfjörður'),
    ('530', '530 Hvammstangi'),
    ('531', '531 Hvammstangi'),
    ('540', '540 Blönduós'),
    ('541', '541 Blönduós'),
    ('545', '545 Skagaströnd'),
    ('550', '550 Sauðárkrókur'),
    ('551', '551 Sauðárkrókur'),
    ('560', '560 Varmahlíð'),
    ('565', '565 Hofsós'),
    ('566', '566 Hofsós'),
    ('570', '570 Fljót'),
    ('580', '580 Siglufjörður'),
    ('600', '600 Akureyri'),
    ('601', '601 Akureyri'),
    ('602', '602 Akureyri'),
    ('603', '603 Akureyri'),
    ('610', '610 Grenivík'),
    ('611', '611 Grímsey'),
    ('620', '620 Dalvík'),
    ('621', '621 Dalvík'),
    ('625', '625 Ólafsfjörður'),
    ('630', '630 Hrísey'),
    ('640', '640 Húsavík'),
    ('641', '641 Húsavík'),
    ('645', '645 Fosshóll'),
    ('650', '650 Laugar'),
    ('660', '660 Mývatn'),
    ('670', '670 Kópasker'),
    ('671', '671 Kópasker'),
    ('675', '675 Raufarhöfn'),
    ('680', '680 Þórshöfn'),
    ('681', '681 Þórshöfn'),
    ('685', '685 Bakkafjörður'),
    ('690', '690 Vopnafjörður'),
    ('700', '700 Egilsstaðir'),
    ('701', '701 Egilsstaðir'),
    ('710', '710 Seyðisfjörður'),
    ('715', '715 Mjóifjörður'),
    ('720', '720 Borgarfjörður eystri'),
    ('730', '730 Reyðarfjörður'),
    ('735', '735 Eskifjörður'),
    ('740', '740 Neskaupstaður'),
    ('750', '750 Fáskrúðsfjörður'),
    ('755', '755 Stöðvarfjörður'),
    ('760', '760 Breiðdalsvík'),
    ('765', '765 Djúpivogur'),
    ('780', '780 Höfn í Hornafirði'),
    ('781', '781 Höfn í Hornafirði'),
    ('785', '785 Öræfi'),
    ('800', '800 Selfoss'),
    ('801', '801 Selfoss'),
    ('802', '802 Selfoss'),
    ('810', '810 Hveragerði'),
    ('815', '815 Þorlákshöfn'),
    ('816', '816 Ölfus'),
    ('820', '820 Eyrarbakki'),
    ('825', '825 Stokkseyri'),
    ('840', '840 Laugarvatn'),
    ('845', '845 Flúðir'),
    ('850', '850 Hella'),
    ('851', '851 Hella'),
    ('860', '860 Hvolsvöllur'),
    ('861', '861 Hvolsvöllur'),
    ('870', '870 Vík'),
    ('871', '871 Vík'),
    ('880', '880 Kirkjubæjarklaustur'),
    ('900', '900 Vestmannaeyjar'),
    ('902', '902 Vestmannaeyjar')
)

########NEW FILE########
__FILENAME__ = forms
"""
IT-specific Form helpers
"""

from __future__ import absolute_import, unicode_literals

import re

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import Field, RegexField, Select, CharField
from django.utils.encoding import smart_text
from django.utils.translation import ugettext_lazy as _

from .it_province import PROVINCE_CHOICES
from .it_region import REGION_CHOICES
from .util import vat_number_validation, ssn_validation


phone_digits_re = re.compile(r'^(?:\+?39)?((0\d{1,3})(\d{4,8})|(3\d{2})(\d{6,8}))$')


class ITZipCodeField(RegexField):
    """
    A form field that validates input as an Italian zip code. Valid codes
    must have five digits.
    """
    default_error_messages = {
        'invalid': _('Enter a valid zip code.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(ITZipCodeField, self).__init__(r'^\d{5}$',
                                             max_length, min_length, *args, **kwargs)


class ITRegionSelect(Select):
    """
    A Select widget that uses a list of IT regions as its choices.
    """
    def __init__(self, attrs=None):
        super(ITRegionSelect, self).__init__(attrs, choices=REGION_CHOICES)


class ITProvinceSelect(Select):
    """
    A Select widget that uses a list of IT provinces as its choices.
    """
    def __init__(self, attrs=None):
        super(ITProvinceSelect, self).__init__(attrs, choices=PROVINCE_CHOICES)


class ITSocialSecurityNumberField(RegexField):
    """
    A form field that validates Italian Social Security numbers (codice fiscale) for
    both persons and entities.

    For reference see http://www.agenziaentrate.it/ and search for:

    * 'Informazioni sulla codificazione delle persone fisiche' for persons' SSN
    * 'Codice fiscale Modello AA5/6' for entities' SSN

    .. versionchanged:: 1.1

    The ``ITSocialSecurityNumberField`` now also accepts SSN values for
    entities (numeric-only form).
    """
    default_error_messages = {
        'invalid': _('Enter a valid Social Security number.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(ITSocialSecurityNumberField, self).__init__(r'^\w{3}\s*\w{3}\s*\w{5}\s*\w{5}$|\d{10}',
                                                          max_length, min_length,
                                                          *args, **kwargs)

    def clean(self, value):
        value = super(ITSocialSecurityNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        value = re.sub('\s', '', value).upper()
        # Entities SSN are numeric-only
        if value.isdigit():
            try:
                return vat_number_validation(value)
            except ValueError:
                raise ValidationError(self.error_messages['invalid'])
        # Person SSN
        else:
            try:
                return ssn_validation(value)
            except (ValueError, IndexError):
                raise ValidationError(self.error_messages['invalid'])


class ITVatNumberField(Field):
    """
    A form field that validates Italian VAT numbers (partita IVA).
    """
    default_error_messages = {
        'invalid': _('Enter a valid VAT number.'),
    }

    def clean(self, value):
        value = super(ITVatNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        try:
            return vat_number_validation(value)
        except ValueError:
            raise ValidationError(self.error_messages['invalid'])


class ITPhoneNumberField(CharField):
    """
    A form field that validates input as an Italian phone number. Will strip
    any +39 country prefix from the number.

    .. versionadded:: 1.1
    """
    default_error_messages = {
        'invalid': _('Enter a valid Italian phone number.'),
    }

    def clean(self, value):
        super(ITPhoneNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        value = re.sub(r'[^\+\d]', '', smart_text(value))
        m = phone_digits_re.match(value)
        if m:
            return '%s %s' % tuple(group for group in m.groups()[1:] if group)
        raise ValidationError(self.error_messages['invalid'])

########NEW FILE########
__FILENAME__ = it_province
# -*- coding: utf-8 -*
from __future__ import unicode_literals

#: An alphabetical list of provinces
PROVINCE_CHOICES = (
    ('AG', 'Agrigento'),
    ('AL', 'Alessandria'),
    ('AN', 'Ancona'),
    ('AO', 'Aosta'),
    ('AR', 'Arezzo'),
    ('AP', 'Ascoli Piceno'),
    ('AT', 'Asti'),
    ('AV', 'Avellino'),
    ('BA', 'Bari'),
    ('BT', 'Barletta-Andria-Trani'),  # active starting from 2009
    ('BL', 'Belluno'),
    ('BN', 'Benevento'),
    ('BG', 'Bergamo'),
    ('BI', 'Biella'),
    ('BO', 'Bologna'),
    ('BZ', 'Bolzano/Bozen'),
    ('BS', 'Brescia'),
    ('BR', 'Brindisi'),
    ('CA', 'Cagliari'),
    ('CL', 'Caltanissetta'),
    ('CB', 'Campobasso'),
    ('CI', 'Carbonia-Iglesias'),
    ('CE', 'Caserta'),
    ('CT', 'Catania'),
    ('CZ', 'Catanzaro'),
    ('CH', 'Chieti'),
    ('CO', 'Como'),
    ('CS', 'Cosenza'),
    ('CR', 'Cremona'),
    ('KR', 'Crotone'),
    ('CN', 'Cuneo'),
    ('EN', 'Enna'),
    ('FM', 'Fermo'),  # active starting from 2009
    ('FE', 'Ferrara'),
    ('FI', 'Firenze'),
    ('FG', 'Foggia'),
    ('FC', 'Forlì-Cesena'),
    ('FR', 'Frosinone'),
    ('GE', 'Genova'),
    ('GO', 'Gorizia'),
    ('GR', 'Grosseto'),
    ('IM', 'Imperia'),
    ('IS', 'Isernia'),
    ('SP', 'La Spezia'),
    ('AQ', 'L’Aquila'),
    ('LT', 'Latina'),
    ('LE', 'Lecce'),
    ('LC', 'Lecco'),
    ('LI', 'Livorno'),
    ('LO', 'Lodi'),
    ('LU', 'Lucca'),
    ('MC', 'Macerata'),
    ('MN', 'Mantova'),
    ('MS', 'Massa-Carrara'),
    ('MT', 'Matera'),
    ('VS', 'Medio Campidano'),
    ('ME', 'Messina'),
    ('MI', 'Milano'),
    ('MO', 'Modena'),
    ('MB', 'Monza e Brianza'),  # active starting from 2009
    ('NA', 'Napoli'),
    ('NO', 'Novara'),
    ('NU', 'Nuoro'),
    ('OG', 'Ogliastra'),
    ('OT', 'Olbia-Tempio'),
    ('OR', 'Oristano'),
    ('PD', 'Padova'),
    ('PA', 'Palermo'),
    ('PR', 'Parma'),
    ('PV', 'Pavia'),
    ('PG', 'Perugia'),
    ('PU', 'Pesaro e Urbino'),
    ('PE', 'Pescara'),
    ('PC', 'Piacenza'),
    ('PI', 'Pisa'),
    ('PT', 'Pistoia'),
    ('PN', 'Pordenone'),
    ('PZ', 'Potenza'),
    ('PO', 'Prato'),
    ('RG', 'Ragusa'),
    ('RA', 'Ravenna'),
    ('RC', 'Reggio Calabria'),
    ('RE', 'Reggio Emilia'),
    ('RI', 'Rieti'),
    ('RN', 'Rimini'),
    ('RM', 'Roma'),
    ('RO', 'Rovigo'),
    ('SA', 'Salerno'),
    ('SS', 'Sassari'),
    ('SV', 'Savona'),
    ('SI', 'Siena'),
    ('SR', 'Siracusa'),
    ('SO', 'Sondrio'),
    ('TA', 'Taranto'),
    ('TE', 'Teramo'),
    ('TR', 'Terni'),
    ('TO', 'Torino'),
    ('TP', 'Trapani'),
    ('TN', 'Trento'),
    ('TV', 'Treviso'),
    ('TS', 'Trieste'),
    ('UD', 'Udine'),
    ('VA', 'Varese'),
    ('VE', 'Venezia'),
    ('VB', 'Verbano Cusio Ossola'),
    ('VC', 'Vercelli'),
    ('VR', 'Verona'),
    ('VV', 'Vibo Valentia'),
    ('VI', 'Vicenza'),
    ('VT', 'Viterbo'),
)

########NEW FILE########
__FILENAME__ = it_region
# -*- coding: utf-8 -*
from __future__ import unicode_literals

#: An alphabetical list of regions
REGION_CHOICES = (
    ('ABR', 'Abruzzo'),
    ('BAS', 'Basilicata'),
    ('CAL', 'Calabria'),
    ('CAM', 'Campania'),
    ('EMR', 'Emilia-Romagna'),
    ('FVG', 'Friuli-Venezia Giulia'),
    ('LAZ', 'Lazio'),
    ('LIG', 'Liguria'),
    ('LOM', 'Lombardia'),
    ('MAR', 'Marche'),
    ('MOL', 'Molise'),
    ('PMN', 'Piemonte'),
    ('PUG', 'Puglia'),
    ('SAR', 'Sardegna'),
    ('SIC', 'Sicilia'),
    ('TOS', 'Toscana'),
    ('TAA', 'Trentino-Alto Adige'),
    ('UMB', 'Umbria'),
    ('VAO', 'Valle d’Aosta'),
    ('VEN', 'Veneto'),
)

########NEW FILE########
__FILENAME__ = util
from django.utils.encoding import smart_text
from django.utils.translation import ugettext_lazy as _


def ssn_check_digit(value):
    "Calculate Italian social security number check digit."
    ssn_even_chars = {
        '0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8,
        '9': 9, 'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6, 'H': 7,
        'I': 8, 'J': 9, 'K': 10, 'L': 11, 'M': 12, 'N': 13, 'O': 14, 'P': 15,
        'Q': 16, 'R': 17, 'S': 18, 'T': 19, 'U': 20, 'V': 21, 'W': 22, 'X': 23,
        'Y': 24, 'Z': 25
    }
    ssn_odd_chars = {
        '0': 1, '1': 0, '2': 5, '3': 7, '4': 9, '5': 13, '6': 15, '7': 17, '8':
        19, '9': 21, 'A': 1, 'B': 0, 'C': 5, 'D': 7, 'E': 9, 'F': 13, 'G': 15,
        'H': 17, 'I': 19, 'J': 21, 'K': 2, 'L': 4, 'M': 18, 'N': 20, 'O': 11,
        'P': 3, 'Q': 6, 'R': 8, 'S': 12, 'T': 14, 'U': 16, 'V': 10, 'W': 22,
        'X': 25, 'Y': 24, 'Z': 23
    }
    # Chars from 'A' to 'Z'
    ssn_check_digits = [chr(x) for x in range(65, 91)]

    ssn = value.upper()
    total = 0
    for i in range(0, 15):
        try:
            if i % 2 == 0:
                total += ssn_odd_chars[ssn[i]]
            else:
                total += ssn_even_chars[ssn[i]]
        except KeyError:
            msg = "Character '%(char)s' is not allowed." % {'char': ssn[i]}
            raise ValueError(msg)
    return ssn_check_digits[total % 26]


def ssn_validation(ssn_value):
    """
    Validate Italian SSN for persons

    ``ValueError`` is raised if validation fails.
    """
    check_digit = ssn_check_digit(ssn_value)
    if ssn_value[15] != check_digit:
        raise ValueError(_('Check digit does not match.'))
    return ssn_value


def vat_number_validation(vat_number):
    """
    Validate Italian VAT number. Used also for entities SSN validation.

    ``ValueError`` is raised if validation fails.
    """
    vat_number = str(int(vat_number)).zfill(11)
    check_digit = vat_number_check_digit(vat_number[0:10])
    if vat_number[10] != check_digit:
        raise ValueError(_('Check digit does not match.'))
    return smart_text(vat_number)


def vat_number_check_digit(vat_number):
    "Calculate Italian VAT number check digit."
    normalized_vat_number = smart_text(vat_number).zfill(10)
    total = 0
    for i in range(0, 10, 2):
        total += int(normalized_vat_number[i])
    for i in range(1, 11, 2):
        quotient, remainder = divmod(int(normalized_vat_number[i]) * 2, 10)
        total += quotient + remainder
    return smart_text((10 - total % 10) % 10)

########NEW FILE########
__FILENAME__ = forms
"""
JP-specific Form helpers
"""

from __future__ import absolute_import

from .jp_prefectures import JP_PREFECTURES, JP_PREFECTURE_CODES
from django.forms.fields import RegexField, Select
from django.utils.translation import ugettext_lazy as _


class JPPostalCodeField(RegexField):
    """
    A form field that validates its input is a Japanese postcode.

    Accepts 7 digits, with or without a hyphen.
    """
    default_error_messages = {
        'invalid': _('Enter a postal code in the format XXXXXXX or XXX-XXXX.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(JPPostalCodeField, self).__init__(r'^\d{3}-\d{4}$|^\d{7}$',
                                                max_length, min_length, *args, **kwargs)

    def clean(self, value):
        """
        Validates the input and returns a string that contains only numbers.
        Returns an empty string for empty values.
        """
        value = super(JPPostalCodeField, self).clean(value)
        return value.replace('-', '')


class JPPrefectureSelect(Select):
    """
    A Select widget that uses a list of Japanese prefectures as its choices.
    """
    def __init__(self, attrs=None):
        super(JPPrefectureSelect, self).__init__(attrs, choices=JP_PREFECTURES)


class JPPrefectureCodeSelect(Select):
    """
    A Select widget that uses a list of Japanese prefectures as its choices
    and the prefectures code as the post value.
    """
    def __init__(self, attrs=None):
        super(JPPrefectureCodeSelect, self).__init__(attrs, choices=JP_PREFECTURE_CODES)

########NEW FILE########
__FILENAME__ = jp_prefectures
"""
Prefectures ordered to conform with the Japanese entry
of ISO-3166 as this ordering is widely used in Japan.

See:
http://en.wikipedia.org/wiki/ISO_3166-2:JP
"""
from django.utils.translation import ugettext_lazy as _

#: A list of prefectures
JP_PREFECTURES = (
    ('hokkaido', _('Hokkaido'),),
    ('aomori', _('Aomori'),),
    ('iwate', _('Iwate'),),
    ('miyagi', _('Miyagi'),),
    ('akita', _('Akita'),),
    ('yamagata', _('Yamagata'),),
    ('fukushima', _('Fukushima'),),
    ('ibaraki', _('Ibaraki'),),
    ('tochigi', _('Tochigi'),),
    ('gunma', _('Gunma'),),
    ('saitama', _('Saitama'),),
    ('chiba', _('Chiba'),),
    ('tokyo', _('Tokyo'),),
    ('kanagawa', _('Kanagawa'),),
    ('niigata', _('Niigata'),),
    ('toyama', _('Toyama'),),
    ('ishikawa', _('Ishikawa'),),
    ('fukui', _('Fukui'),),
    ('yamanashi', _('Yamanashi'),),
    ('nagano', _('Nagano'),),
    ('gifu', _('Gifu'),),
    ('shizuoka', _('Shizuoka'),),
    ('aichi', _('Aichi'),),
    ('mie', _('Mie'),),
    ('shiga', _('Shiga'),),
    ('kyoto', _('Kyoto'),),
    ('osaka', _('Osaka'),),
    ('hyogo', _('Hyogo'),),
    ('nara', _('Nara'),),
    ('wakayama', _('Wakayama'),),
    ('tottori', _('Tottori'),),
    ('shimane', _('Shimane'),),
    ('okayama', _('Okayama'),),
    ('hiroshima', _('Hiroshima'),),
    ('yamaguchi', _('Yamaguchi'),),
    ('tokushima', _('Tokushima'),),
    ('kagawa', _('Kagawa'),),
    ('ehime', _('Ehime'),),
    ('kochi', _('Kochi'),),
    ('fukuoka', _('Fukuoka'),),
    ('saga', _('Saga'),),
    ('nagasaki', _('Nagasaki'),),
    ('kumamoto', _('Kumamoto'),),
    ('oita', _('Oita'),),
    ('miyazaki', _('Miyazaki'),),
    ('kagoshima', _('Kagoshima'),),
    ('okinawa', _('Okinawa'),),
)


#: A list of prefectures, the prefectures code as the first element.
JP_PREFECTURE_CODES = (
    ('01', _('Hokkaido'),),
    ('02', _('Aomori'),),
    ('03', _('Iwate'),),
    ('04', _('Miyagi'),),
    ('05', _('Akita'),),
    ('06', _('Yamagata'),),
    ('07', _('Fukushima'),),
    ('08', _('Ibaraki'),),
    ('09', _('Tochigi'),),
    ('10', _('Gunma'),),
    ('11', _('Saitama'),),
    ('12', _('Chiba'),),
    ('13', _('Tokyo'),),
    ('14', _('Kanagawa'),),
    ('15', _('Niigata'),),
    ('16', _('Toyama'),),
    ('17', _('Ishikawa'),),
    ('18', _('Fukui'),),
    ('19', _('Yamanashi'),),
    ('20', _('Nagano'),),
    ('21', _('Gifu'),),
    ('22', _('Shizuoka'),),
    ('23', _('Aichi'),),
    ('24', _('Mie'),),
    ('25', _('Shiga'),),
    ('26', _('Kyoto'),),
    ('27', _('Osaka'),),
    ('28', _('Hyogo'),),
    ('29', _('Nara'),),
    ('30', _('Wakayama'),),
    ('31', _('Tottori'),),
    ('32', _('Shimane'),),
    ('33', _('Okayama'),),
    ('34', _('Hiroshima'),),
    ('35', _('Yamaguchi'),),
    ('36', _('Tokushima'),),
    ('37', _('Kagawa'),),
    ('38', _('Ehime'),),
    ('39', _('Kochi'),),
    ('40', _('Fukuoka'),),
    ('41', _('Saga'),),
    ('42', _('Nagasaki'),),
    ('43', _('Kumamoto'),),
    ('44', _('Oita'),),
    ('45', _('Miyazaki'),),
    ('46', _('Kagoshima'),),
    ('47', _('Okinawa'),),
)

########NEW FILE########
__FILENAME__ = forms
"""
Kuwait-specific Form helpers
"""
from __future__ import unicode_literals

import re
from datetime import date

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import Field
from django.utils.translation import gettext as _

id_re = re.compile(r'^(?P<initial>\d{1})(?P<yy>\d\d)(?P<mm>\d\d)(?P<dd>\d\d)(?P<mid>\d{4})(?P<checksum>\d{1})')


class KWCivilIDNumberField(Field):
    """
    Kuwaiti Civil ID numbers are 12 digits, second to seventh digits
    represents the person's birthdate.

    Checks the following rules to determine the validty of the number:
        * The number consist of 12 digits.
        * The birthdate of the person is a valid date.
        * The calculated checksum equals to the last digit of the Civil ID.
    """
    default_error_messages = {
        'invalid': _('Enter a valid Kuwaiti Civil ID number'),
    }

    def has_valid_checksum(self, value):
        weight = (2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2)
        calculated_checksum = 0
        for i in range(11):
            calculated_checksum += int(value[i]) * weight[i]

        remainder = calculated_checksum % 11
        checkdigit = 11 - remainder
        if checkdigit != int(value[11]):
            return False
        return True

    def clean(self, value):
        super(KWCivilIDNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        if not re.match(r'^\d{12}$', value):
            raise ValidationError(self.error_messages['invalid'])

        match = re.match(id_re, value)

        if not match:
            raise ValidationError(self.error_messages['invalid'])

        gd = match.groupdict()

        try:
            date(int(gd['yy']), int(gd['mm']), int(gd['dd']))
        except ValueError:
            raise ValidationError(self.error_messages['invalid'])

        if not self.has_valid_checksum(value):
            raise ValidationError(self.error_messages['invalid'])

        return value

########NEW FILE########
__FILENAME__ = forms
from __future__ import unicode_literals
from datetime import date
import re

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import Select, RegexField, Field
from django.utils.translation import ugettext_lazy as _
from django.utils.six import text_type

from .lt_choices import COUNTY_CHOICES, MUNICIPALITY_CHOICES


postalcode = re.compile(r'^(LT\s?-\s?)?(?P<code>\d{5})$', re.IGNORECASE)


class LTCountySelect(Select):
    """A select field with the Lithuanian counties as choices"""

    def __init__(self, attrs=None):
        super(LTCountySelect, self).__init__(attrs, choices=COUNTY_CHOICES)


class LTMunicipalitySelect(Select):
    """A select field with the Lithuanian municipalities as choices"""

    def __init__(self, attrs=None):
        super(LTMunicipalitySelect, self).__init__(attrs,
                                                   choices=MUNICIPALITY_CHOICES)


class LTIDCodeField(RegexField):
    """
    A form field that validates as Lithuanian ID Code.

    Checks:
        * Made of exactly 11 decimal numbers.
        * Checksum is correct.
        * ID contains valid date.
    """
    default_error_messages = {
        'invalid': _('ID Code consists of exactly 11 decimal digits.'),
        'checksum': _('Wrong ID Code checksum.'),
        'date': _('ID Code contains invalid date.')
    }

    def __init__(self, *args, **kwargs):
        super(LTIDCodeField, self).__init__(r'^\d{11}$', *args, **kwargs)

    def clean(self, value):
        super(LTIDCodeField, self).clean(value)

        if value in EMPTY_VALUES:
            return ''

        if not self.valid_date(value):
            raise ValidationError(self.error_messages['date'])

        if not self.valid_checksum(value):
            raise ValidationError(self.error_messages['checksum'])
        return value

    def valid_checksum(self, value):
        first_sum = 0
        second_sum = 0

        for i in range(10):
            first_sum += int(value[i]) * (i % 9 + 1)
            second_sum += int(value[i]) * ((i + 2) % 9 + 1)

        k = first_sum % 11
        if k == 10:
            k = second_sum % 11
            k = 0 if k == 10 else k

        return True if k == int(value[-1]) else False

    def valid_date(self, value):
        """Check if date in ID code is valid.
        We won't check for dates in future as it would become too restrictive.
        """
        try:
            year = {'1': 1800, '2': 1800, '3': 1900, '4': 1900, '5': 2000,
                    '6': 2000}[value[0]] + int(value[1:3])
            date(year, int(value[3:5]), int(value[5:7]))
            return True
        except (ValueError, KeyError):
            return False


class LTPostalCodeField(Field):
    """
    A form field that validates and normalizes Lithanuan postal codes.

    Lithuanian postal codes in following forms accepted:
        * XXXXX
        * LT-XXXXX
    """
    default_error_messages = {
        'invalid': _('Enter a postal code in the format XXXXX or LT-XXXXX.'),
    }

    def clean(self, value):
        value = super(LTPostalCodeField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        match = re.match(postalcode, value)
        if not match:
            raise ValidationError(self.error_messages['invalid'])

        return 'LT-' + match.group('code')


class LTPhoneField(Field):
    """
    Form field that validates as Lithuanian phone number

    You can accept any permutation of following phone numbers:

        * Emergency (01, 02, 03, 04, 112)
        * Mobile (370 600 00 000)
        * Landline
        * Service numbers

    If you accept landline numbers, you can opt in to accepting local landline
    numbers too. Local landline numbers are numbers without area code.

    This field does not accept multiple numbers (as separated by /).

    The field tries its best to convert the number into one you can call to
    internationally. Currently emergency and most of landline_local numbers are
    not converted.

    .. versionadded:: 1.1
    """

    # Order dependent (shorter codes cannot go before longer ones)
    _area_codes = tuple(map(text_type,
        [425, 315, 381, 319, 450, 313, 528, 386, 349, 426, 447, 346, 427, 347,
         445, 459, 318, 343, 443, 383, 469, 421, 460, 451, 448, 319, 422, 428,
         458, 440, 345, 380, 449, 441, 382, 387, 446, 444, 528, 340, 389, 310,
         342, 386, 385, 45, 46, 41, 37, 5]))
    _stripable = re.compile(r'[\+()~ ]')
    default_error_messages = {
        'non-digit': _('Phone number can only contain digits'),
        'no-parse': _('Could not validate the phone number'),
    }

    def __init__(self, mobile=True, landline=True, emergency=False,
                 landline_local=False, service=False, **kwargs):
        self._checks = []
        if mobile:
            self._checks.append(self._clean_mobile)
        if landline:
            self._checks.append(self._clean_landline)
        if service:
            self._checks.append(self._clean_service)
        if emergency:
            self._checks.append(self._clean_emergency)

        if landline_local and not landline:
            raise ValueError("Cannot accept local landline numbers if " +
                             "regular landline numbers are not accepted")
        elif landline_local:
            self._checks.append(self._clean_landline_local)

        super(LTPhoneField, self).__init__(**kwargs)

    def clean(self, value):
        value = super(LTPhoneField, self).clean(value)

        if value in EMPTY_VALUES:
            return ''

        value = self._stripable.sub('', value.strip())
        if not value.isdigit():
            raise ValidationError(self.error_messages['non-digit'],
                                  code='invalid')

        results = list(filter(lambda x: x is not None,
                              map(lambda fn: fn(value), self._checks)))
        if results:
            # TODO: More than one result means code error, check for it.
            return results[0]
        raise ValidationError(self.error_messages['no-parse'], code='invalid')

    def _clean_emergency(self, value):
        if value in ["112", "01", "02", "03", "04"]:
            return value

    def _clean_mobile(self, value):
        if len(value) == 9 and value[:2] == "86":
            return "+370" + value[1:]
        elif len(value) == 11 and value[:4] == "3706":
            return "+" + value

    def _clean_service(self, value):
        if len(value) == 9 and value[:4] == "8800":
            return "+370" + value[1:]
        elif len(value) == 11 and value[:6] == "370800":
            return "+" + value

    # Now these two are most complex ones.
    def _clean_landline_local(self, value):
        # The landline phone number must always be 8 digits in length when the
        # number contains an area code. Now area codes can range from 1 to 3
        # digits (ex. 5 for Vilnius district or 389 for Utena). For local
        # (in district) calling you don't have to include the area code,
        # therefore local numbers can range from 5 to 7 digits in length.
        #
        # We cannot prepend area code or country code to those numbers because
        # there's more than one possibility in almost all cases with a
        # single exception being Vilnius district. As Vilnius is the only
        # district that has a single digit code, we can safely assume the
        # number is for Vilnius.

        if 5 <= len(value) <= 6:
            return value
        elif len(value) == 7:
            return "+3705" + value

    def _clean_landline(self, value):
        if len(value) == 9 and value[0] == "8":
            number = value[1:]
        elif len(value) == 11 and value[:3] == "370":
            number = value[3:]
        else:
            return None
        if number.startswith(self._area_codes):
            return "+370" + number

########NEW FILE########
__FILENAME__ = lt_choices
# -*- coding: utf-8 -*-
from __future__ import unicode_literals
from django.utils.translation import ugettext_lazy as _

#: Alphabetically sorted list of Lithuanian counties.
COUNTY_CHOICES = (
    ('alytus', _('Alytus')),
    ('kaunas', _('Kaunas')),
    ('klaipeda', _('Klaipėda')),
    ('mariampole', _('Mariampolė')),
    ('panevezys', _('Panevėžys')),
    ('siauliai', _('Šiauliai')),
    ('taurage', _('Tauragė')),
    ('telsiai', _('Telšiai')),
    ('utena', _('Utena')),
    ('vilnius', _('Vilnius')),
)

#: Alphabetically sorted lists of Lithuanian municipalities.
MUNICIPALITY_CHOICES = (
    ('akmene', _('Akmenė district')),
    ('alytus_c', _('Alytus city')),
    ('alytus', _('Alytus district')),
    ('anyksciai', _('Anykščiai district')),
    ('birstonas', _('Birštonas')),
    ('birzai', _('Biržai district')),
    ('druskininkai', _('Druskininkai')),
    ('elektrenai', _('Elektrėnai')),
    ('ignalina', _('Ignalina district')),
    ('jonava', _('Jonava district')),
    ('joniskis', _('Joniškis district')),
    ('jurbarkas', _('Jurbarkas district')),
    ('kaisiadorys', _('Kaišiadorys district')),
    ('kalvarija', _('Kalvarija')),
    ('kaunas_c', _('Kaunas city')),
    ('kaunas', _('Kaunas district')),
    ('kazluruda', _('Kazlų Rūda')),
    ('kedainiai', _('Kėdainiai district')),
    ('kelme', _('Kelmė district')),
    ('klaipeda_c', _('Klaipėda city')),
    ('klaipeda', _('Klaipėda district')),
    ('kretinga', _('Kretinga district')),
    ('kupiskis', _('Kupiškis district')),
    ('lazdijai', _('Lazdijai district')),
    ('marijampole', _('Marijampolė')),
    ('mazeikiai', _('Mažeikiai district')),
    ('moletai', _('Molėtai district')),
    ('neringa', _('Neringa')),
    ('pagegiai', _('Pagėgiai')),
    ('pakruojis', _('Pakruojis district')),
    ('palanga', _('Palanga city')),
    ('panevezys_c', _('Panevėžys city')),
    ('panevezys', _('Panevėžys district')),
    ('pasvalys', _('Pasvalys district')),
    ('plunge', _('Plungė district')),
    ('prienai', _('Prienai district')),
    ('radviliskis', _('Radviliškis district')),
    ('raseiniai', _('Raseiniai district')),
    ('rietavas', _('Rietavas')),
    ('rokiskis', _('Rokiškis district')),
    ('skuodas', _('Skuodas district')),
    ('sakiai', _('Šakiai district')),
    ('salcininkai', _('Šalčininkai district')),
    ('siauliai_c', _('Šiauliai city')),
    ('siauliai', _('Šiauliai district')),
    ('silale', _('Šilalė district')),
    ('silute', _('Šilutė district')),
    ('sirvintos', _('Širvintos district')),
    ('svencionys', _('Švenčionys district')),
    ('taurage', _('Tauragė district')),
    ('telsiai', _('Telšiai district')),
    ('trakai', _('Trakai district')),
    ('ukmerge', _('Ukmergė district')),
    ('utena', _('Utena district')),
    ('varena', _('Varėna district')),
    ('vilkaviskis', _('Vilkaviškis district')),
    ('vilnius_c', _('Vilnius city')),
    ('vilnius', _('Vilnius district')),
    ('visaginas', _('Visaginas')),
    ('zarasai', _('Zarasai district')),
)

########NEW FILE########
__FILENAME__ = forms
from __future__ import unicode_literals

import re
from datetime import date

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import Field, Select
from django.utils.translation import ugettext_lazy as _

from .lv_choices import MUNICIPALITY_CHOICES


zipcode = re.compile(r'^(LV\s?-\s?)?(?P<code>[1-5]\d{3})$', re.IGNORECASE)
idcode = re.compile(r'^(\d\d)(\d\d)(\d\d)-([0-2])(?:\d{3})(\d)$')


class LVPostalCodeField(Field):
    """
    A form field that validates and normalizes Latvian postal codes.

    Latvian postal codes in following forms accepted:
        * XXXX
        * LV-XXXX
    """
    default_error_messages = {
        'invalid': _('Enter a postal code in the format XXXX or LV-XXXX.'),
    }

    def clean(self, value):
        value = super(LVPostalCodeField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        match = re.match(zipcode, value)
        if not match:
            raise ValidationError(self.error_messages['invalid'])

        return 'LV-' + match.group('code')


class LVMunicipalitySelect(Select):
    """A select field of Latvian municipalities."""

    def __init__(self, attrs=None):
        super(LVMunicipalitySelect, self).__init__(attrs, choices=MUNICIPALITY_CHOICES)


class LVPersonalCodeField(Field):
    """A form field that validates input as a Latvian personal code."""
    default_error_messages = {
        'invalid_format': _('Enter a Latvian personal code in format XXXXXX-XXXXX.'),
        'invalid': _('Enter a valid Latvian personal code.'),
    }

    @staticmethod
    def lv_checksum(value):
        """Takes a string of 10 digits as input, returns check digit."""

        multipliers = (1, 6, 3, 7, 9, 10, 5, 8, 4, 2)

        check = sum(mult * int(c) for mult, c in zip(multipliers, value))
        return ((1 - check) % 11) % 10

    def clean(self, value):
        super(LVPersonalCodeField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        match = re.match(idcode, value)
        if not match:
            raise ValidationError(self.error_messages['invalid_format'])

        day, month, year, century, check = map(int, match.groups())

        if check != self.lv_checksum(value[0:6] + value[7:11]):
            raise ValidationError(self.error_messages['invalid'])

        year += 1800 + 100 * century
        try:
            date(year, month, day)
        except ValueError:
            raise ValidationError(self.error_messages['invalid'])

        return value

########NEW FILE########
__FILENAME__ = lv_choices
# -*- coding: utf-8 -*-
from __future__ import unicode_literals
from django.utils.translation import ugettext_lazy as _

#: A list of Latvian municipalities and republican cities.
#: Identifiers based on ISO 3166-2:LV. https://en.wikipedia.org/wiki/ISO_3166-2:LV
MUNICIPALITY_CHOICES = (
    # Republican cities (not part of any municipality)
    ('DGV', _('Daugavpils')),
    ('JEL', _('Jelgava')),
    ('JKB', _('Jēkabpils')),
    ('JUR', _('Jūrmala')),
    ('LPX', _('Liepāja')),
    ('REZ', _('Rēzekne')),
    ('RIX', _('Riga')),
    ('VMR', _('Valmiera')),
    ('VEN', _('Ventspils')),
    # Municipalities
    ('001', _('Aglona municipality')),
    ('002', _('Aizkraukle municipality')),
    ('003', _('Aizpute municipality')),
    ('004', _('Aknīste municipality')),
    ('005', _('Aloja municipality')),
    ('006', _('Alsunga municipality')),
    ('007', _('Alūksne municipality')),
    ('008', _('Amata municipality')),
    ('009', _('Ape municipality')),
    ('010', _('Auce municipality')),
    ('011', _('Ādaži municipality')),
    ('012', _('Babīte municipality')),
    ('013', _('Baldone municipality')),
    ('014', _('Baltinava municipality')),
    ('015', _('Balvi municipality')),
    ('016', _('Bauska municipality')),
    ('017', _('Beverīna municipality')),
    ('018', _('Brocēni municipality')),
    ('019', _('Burtnieki municipality')),
    ('020', _('Carnikava municipality')),
    ('021', _('Cesvaine municipality')),
    ('022', _('Cēsis municipality')),
    ('023', _('Cibla municipality')),
    ('024', _('Dagda municipality')),
    ('025', _('Daugavpils municipality')),
    ('026', _('Dobele municipality')),
    ('027', _('Dundaga municipality')),
    ('028', _('Durbe municipality')),
    ('029', _('Engure municipality')),
    ('030', _('Ērgļi municipality')),
    ('031', _('Garkalne municipality')),
    ('032', _('Grobiņa municipality')),
    ('033', _('Gulbene municipality')),
    ('034', _('Iecava municipality')),
    ('035', _('Ikšķile municipality')),
    ('036', _('Ilūkste municipality')),
    ('037', _('Inčukalns municipality')),
    ('038', _('Jaunjelgava municipality')),
    ('039', _('Jaunpiebalga municipality')),
    ('040', _('Jaunpils municipality')),
    ('041', _('Jelgava municipality')),
    ('042', _('Jēkabpils municipality')),
    ('043', _('Kandava municipality')),
    ('044', _('Kārsava municipality')),
    ('045', _('Kocēni municipality')),
    ('046', _('Koknese municipality')),
    ('047', _('Krāslava municipality')),
    ('048', _('Krimulda municipality')),
    ('049', _('Krustpils municipality')),
    ('050', _('Kuldīga municipality')),
    ('051', _('Ķegums municipality')),
    ('052', _('Ķekava municipality')),
    ('053', _('Lielvārde municipality')),
    ('054', _('Limbaži municipality')),
    ('055', _('Līgatne municipality')),
    ('056', _('Līvāni municipality')),
    ('057', _('Lubāna municipality')),
    ('058', _('Ludza municipality')),
    ('059', _('Madona municipality')),
    ('060', _('Mazsalaca municipality')),
    ('061', _('Mālpils municipality')),
    ('062', _('Mārupe municipality')),
    ('063', _('Mērsrags municipality')),
    ('064', _('Naukšēni municipality')),
    ('065', _('Nereta municipality')),
    ('066', _('Nīca municipality')),
    ('067', _('Ogre municipality')),
    ('068', _('Olaine municipality')),
    ('069', _('Ozolnieki municipality')),
    ('070', _('Pārgauja municipality')),
    ('071', _('Pāvilosta municipality')),
    ('072', _('Pļaviņas municipality')),
    ('073', _('Preiļi municipality')),
    ('074', _('Priekule municipality')),
    ('075', _('Priekuļi municipality')),
    ('076', _('Rauna municipality')),
    ('077', _('Rēzekne municipality')),
    ('078', _('Riebiņi municipality')),
    ('079', _('Roja municipality')),
    ('080', _('Ropaži municipality')),
    ('081', _('Rucava municipality')),
    ('082', _('Rugāji municipality')),
    ('083', _('Rundāle municipality')),
    ('084', _('Rūjiena municipality')),
    ('085', _('Sala municipality')),
    ('086', _('Salacgrīva municipality')),
    ('087', _('Salaspils municipality')),
    ('088', _('Saldus municipality')),
    ('089', _('Saulkrasti municipality')),
    ('090', _('Sēja municipality')),
    ('091', _('Sigulda municipality')),
    ('092', _('Skrīveri municipality')),
    ('093', _('Skrunda municipality')),
    ('094', _('Smiltene municipality')),
    ('095', _('Stopiņi municipality')),
    ('096', _('Strenči municipality')),
    ('097', _('Talsi municipality')),
    ('098', _('Tērvete municipality')),
    ('099', _('Tukums municipality')),
    ('100', _('Vaiņode municipality')),
    ('101', _('Valka municipality')),
    ('102', _('Varakļāni municipality')),
    ('103', _('Vārkava municipality')),
    ('104', _('Vecpiebalga municipality')),
    ('105', _('Vecumnieki municipality')),
    ('106', _('Ventspils municipality')),
    ('107', _('Viesīte municipality')),
    ('108', _('Viļaka municipality')),
    ('109', _('Viļāni municipality')),
    ('110', _('Zilupe municipality')),
)

########NEW FILE########
__FILENAME__ = forms
from __future__ import absolute_import, unicode_literals

import datetime

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import RegexField, Select
from django.utils.translation import ugettext_lazy as _

from .mk_choices import MK_MUNICIPALITIES


class MKIdentityCardNumberField(RegexField):
    """
    A Macedonian ID card number. Accepts both old and new format.
    """
    default_error_messages = {
        'invalid': _('Identity card numbers must contain'
                     ' either 4 to 7 digits or an uppercase letter and 7 digits.'),
    }

    def __init__(self, *args, **kwargs):
        kwargs['min_length'] = None
        kwargs['max_length'] = 8
        regex = r'(^[A-Z]{1}\d{7}$)|(^\d{4,7}$)'
        super(MKIdentityCardNumberField, self).__init__(regex, *args, **kwargs)


class MKMunicipalitySelect(Select):
    """
    A form ``Select`` widget that uses a list of Macedonian municipalities as
    choices. The label is the name of the municipality and the value
    is a 2 character code for the municipality.
    """

    def __init__(self, attrs=None):
        super(MKMunicipalitySelect, self).__init__(attrs, choices=MK_MUNICIPALITIES)


class UMCNField(RegexField):
    """
    A form field that validates input as a unique master citizen
    number.

    The format of the unique master citizen number has been kept the same from
    Yugoslavia. It is still in use in other countries as well, it is not applicable
    solely in Macedonia. For more information see:
    https://secure.wikimedia.org/wikipedia/en/wiki/Unique_Master_Citizen_Number

    A value will pass validation if it complies to the following rules:

    * Consists of exactly 13 digits
    * The first 7 digits represent a valid past date in the format DDMMYYY
    * The last digit of the UMCN passes a checksum test
    """
    default_error_messages = {
        'invalid': _('This field should contain exactly 13 digits.'),
        'date': _('The first 7 digits of the UMCN must represent a valid past date.'),
        'checksum': _('The UMCN is not valid.'),
    }

    def __init__(self, *args, **kwargs):
        kwargs['min_length'] = None
        kwargs['max_length'] = 13
        super(UMCNField, self).__init__(r'^\d{13}$', *args, **kwargs)

    def clean(self, value):
        value = super(UMCNField, self).clean(value)

        if value in EMPTY_VALUES:
            return ''

        if not self._validate_date_part(value):
            raise ValidationError(self.error_messages['date'])
        if self._validate_checksum(value):
            return value
        else:
            raise ValidationError(self.error_messages['checksum'])

    def _validate_checksum(self, value):
        a, b, c, d, e, f, g, h, i, j, k, l, K = [
            int(digit) for digit in value]
        m = 11 - ((7 * (a + g) + 6 * (b + h) + 5 * (
            c + i) + 4 * (d + j) + 3 * (e + k) + 2 * (f + l)) % 11)
        if (m >= 1 and m <= 9) and K == m:
            return True
        elif m == 11 and K == 0:
            return True
        else:
            return False

    def _validate_date_part(self, value):
        daypart, monthpart, yearpart = int(value[:2]), int(value[2:4]), int(value[4:7])
        if yearpart >= 800:
            yearpart += 1000
        else:
            yearpart += 2000
        try:
            date = datetime.datetime(year=yearpart, month=monthpart, day=daypart).date()
        except ValueError:
            return False
        if date >= datetime.datetime.now().date():
            return False
        return True

########NEW FILE########
__FILENAME__ = mk_choices
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.utils.translation import ugettext_lazy as _

#: Macedonian municipalities per the reorganization from 2004.
MK_MUNICIPALITIES = (
    ('AD', _('Aerodrom')),
    ('AR', _('Aračinovo')),
    ('BR', _('Berovo')),
    ('TL', _('Bitola')),
    ('BG', _('Bogdanci')),
    ('VJ', _('Bogovinje')),
    ('BS', _('Bosilovo')),
    ('BN', _('Brvenica')),
    ('BU', _('Butel')),
    ('VA', _('Valandovo')),
    ('VL', _('Vasilevo')),
    ('VV', _('Vevčani')),
    ('VE', _('Veles')),
    ('NI', _('Vinica')),
    ('VC', _('Vraneštica')),
    ('VH', _('Vrapčište')),
    ('GB', _('Gazi Baba')),
    ('GV', _('Gevgelija')),
    ('GT', _('Gostivar')),
    ('GR', _('Gradsko')),
    ('DB', _('Debar')),
    ('DA', _('Debarca')),
    ('DL', _('Delčevo')),
    ('DK', _('Demir Kapija')),
    ('DM', _('Demir Hisar')),
    ('DE', _('Dolneni')),
    ('DR', _('Drugovo')),
    ('GP', _('Gjorče Petrov')),
    ('ZE', _('Želino')),
    ('ZA', _('Zajas')),
    ('ZK', _('Zelenikovo')),
    ('ZR', _('Zrnovci')),
    ('IL', _('Ilinden')),
    ('JG', _('Jegunovce')),
    ('AV', _('Kavadarci')),
    ('KB', _('Karbinci')),
    ('KX', _('Karpoš')),
    ('VD', _('Kisela Voda')),
    ('KH', _('Kičevo')),
    ('KN', _('Konče')),
    ('OC', _('Koćani')),
    ('KY', _('Kratovo')),
    ('KZ', _('Kriva Palanka')),
    ('KG', _('Krivogaštani')),
    ('KS', _('Kruševo')),
    ('UM', _('Kumanovo')),
    ('LI', _('Lipkovo')),
    ('LO', _('Lozovo')),
    ('MR', _('Mavrovo i Rostuša')),
    ('MK', _('Makedonska Kamenica')),
    ('MD', _('Makedonski Brod')),
    ('MG', _('Mogila')),
    ('NG', _('Negotino')),
    ('NV', _('Novaci')),
    ('NS', _('Novo Selo')),
    ('OS', _('Oslomej')),
    ('OD', _('Ohrid')),
    ('PE', _('Petrovec')),
    ('PH', _('Pehčevo')),
    ('PN', _('Plasnica')),
    ('PP', _('Prilep')),
    ('PT', _('Probištip')),
    ('RV', _('Radoviš')),
    ('RN', _('Rankovce')),
    ('RE', _('Resen')),
    ('RO', _('Rosoman')),
    ('AJ', _('Saraj')),
    ('SL', _('Sveti Nikole')),
    ('SS', _('Sopište')),
    ('SD', _('Star Dojran')),
    ('NA', _('Staro Nagoričane')),
    ('UG', _('Struga')),
    ('RU', _('Strumica')),
    ('SU', _('Studeničani')),
    ('TR', _('Tearce')),
    ('ET', _('Tetovo')),
    ('CE', _('Centar')),
    ('CZ', _('Centar-Župa')),
    ('CI', _('Čair')),
    ('CA', _('Čaška')),
    ('CH', _('Češinovo-Obleševo')),
    ('CS', _('Čučer-Sandevo')),
    ('ST', _('Štip')),
    ('SO', _('Šuto Orizari')),
)

########NEW FILE########
__FILENAME__ = models
from django.db.models.fields import CharField
from django.utils.translation import ugettext_lazy as _

from .mk_choices import MK_MUNICIPALITIES
from .forms import (UMCNField as UMCNFormField,
                    MKIdentityCardNumberField as MKIdentityCardNumberFormField)


class MKIdentityCardNumberField(CharField):
    """
    A form field that validates input as a Macedonian identity card number.
    Both old and new identity card numbers are supported.
    """
    description = _("Macedonian identity card number")

    def __init__(self, *args, **kwargs):
        kwargs['max_length'] = 8
        super(MKIdentityCardNumberField, self).__init__(*args, **kwargs)

    def formfield(self, **kwargs):
        defaults = {'form_class': MKIdentityCardNumberFormField}
        defaults.update(kwargs)
        return super(MKIdentityCardNumberField, self).formfield(**defaults)


class MKMunicipalityField(CharField):
    """
    A form field that validates input as a Macedonian identity card number.
    Both old and new identity card numbers are supported.
    """
    description = _("A Macedonian municipality (2 character code)")

    def __init__(self, *args, **kwargs):
        kwargs['choices'] = MK_MUNICIPALITIES
        kwargs['max_length'] = 2
        super(MKMunicipalityField, self).__init__(*args, **kwargs)


class UMCNField(CharField):
    """
    A form field that validates input as a unique master citizen number.

    The format of the unique master citizen number is not unique
    to Macedonia. For more information see:
    https://secure.wikimedia.org/wikipedia/en/wiki/Unique_Master_Citizen_Number

    A value will pass validation if it complies to the following rules:

    * Consists of exactly 13 digits
    * The first 7 digits represent a valid past date in the format DDMMYYY
    * The last digit of the UMCN passes a checksum test
    """
    description = _("Unique master citizen number (13 digits)")

    def __init__(self, *args, **kwargs):
        kwargs['max_length'] = 13
        super(UMCNField, self).__init__(*args, **kwargs)

    def formfield(self, **kwargs):
        defaults = {'form_class': UMCNFormField}
        defaults.update(kwargs)
        return super(UMCNField, self).formfield(**defaults)

########NEW FILE########
__FILENAME__ = models
# Add South introspection rules
try:
    from south.modelsinspector import add_introspection_rules
except ImportError:
    pass
else:
    add_introspection_rules([], ["^localflavor"])

########NEW FILE########
__FILENAME__ = forms
# -*- coding: utf-8 -*-
"""
Maltese-specific Form helpers.
"""
from __future__ import absolute_import, unicode_literals

from django.forms.fields import RegexField
from django.utils.translation import ugettext_lazy as _


class MTPostalCodeField(RegexField):
    """
    A form field that validates its input as a Maltese postal code.

    Maltese postal code is a seven digits string, with first three
    being letters and the final four numbers.
    """
    default_error_messages = {
        'invalid': _('Enter a valid postal code in format AAA 0000.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(MTPostalCodeField, self).__init__(
            r'^[A-Z]{3}\ \d{4}$',
            max_length, min_length, *args, **kwargs)

########NEW FILE########
__FILENAME__ = forms
# -*- coding: utf-8 -*-
"""
Mexican-specific form helpers.
"""
from __future__ import unicode_literals
import re

from django.forms import ValidationError
from django.forms.fields import Select, RegexField
from django.utils import six
from django.utils.translation import ugettext_lazy as _
from django.core.validators import EMPTY_VALUES

from .mx_states import STATE_CHOICES

DATE_RE = r'\d{2}((01|03|05|07|08|10|12)(0[1-9]|[12]\d|3[01])|02(0[1-9]|[12]\d)|(04|06|09|11)(0[1-9]|[12]\d|30))'


#: This is the list of inconvenient words according to the `Anexo IV` of the
#: document described in the next link:
#: http://www.sisi.org.mx/jspsi/documentos/2005/seguimiento/06101/0610100162005_065.doc
RFC_INCONVENIENT_WORDS = [
    'BUEI', 'BUEY', 'CACA', 'CACO', 'CAGA', 'CAGO', 'CAKA', 'CAKO',
    'COGE', 'COJA', 'COJE', 'COJI', 'COJO', 'CULO', 'FETO', 'GUEY',
    'JOTO', 'KACA', 'KACO', 'KAGA', 'KAGO', 'KOGE', 'KOJO', 'KAKA',
    'KULO', 'MAME', 'MAMO', 'MEAR', 'MEAS', 'MEON', 'MION', 'MOCO',
    'MULA', 'PEDA', 'PEDO', 'PENE', 'PUTA', 'PUTO', 'QULO', 'RATA',
    'RUIN',
]

#: This is the list of inconvenient words according to the `Anexo 2` of the
#: document described in the next link:
#: http://portal.veracruz.gob.mx/pls/portal/url/ITEM/444112558A57C6E0E040A8C02E00695C
CURP_INCONVENIENT_WORDS = [
    'BACA', 'BAKA', 'BUEI', 'BUEY', 'CACA', 'CACO', 'CAGA', 'CAGO',
    'CAKA', 'CAKO', 'COGE', 'COGI', 'COJA', 'COJE', 'COJI', 'COJO',
    'COLA', 'CULO', 'FALO', 'FETO', 'GETA', 'GUEI', 'GUEY', 'JETA',
    'JOTO', 'KACA', 'KACO', 'KAGA', 'KAGO', 'KAKA', 'KAKO', 'KOGE',
    'KOGI', 'KOJA', 'KOJE', 'KOJI', 'KOJO', 'KOLA', 'KULO', 'LILO',
    'LOCA', 'LOCO', 'LOKA', 'LOKO', 'MAME', 'MAMO', 'MEAR', 'MEAS',
    'MEON', 'MIAR', 'MION', 'MOCO', 'MOKO', 'MULA', 'MULO', 'NACA',
    'NACO', 'PEDA', 'PEDO', 'PENE', 'PIPI', 'PITO', 'POPO', 'PUTA',
    'PUTO', 'QULO', 'RATA', 'ROBA', 'ROBE', 'ROBO', 'RUIN', 'SENO',
    'TETA', 'VACA', 'VAGA', 'VAGO', 'VAKA', 'VUEI', 'VUEY', 'WUEI',
    'WUEY',
]


class MXStateSelect(Select):
    """
    A Select widget that uses a list of Mexican states as its choices.
    """
    def __init__(self, attrs=None):
        super(MXStateSelect, self).__init__(attrs, choices=STATE_CHOICES)


class MXZipCodeField(RegexField):
    """
    A form field that accepts a Mexican Zip Code.

    More info about this:
        http://en.wikipedia.org/wiki/List_of_postal_codes_in_Mexico
    """
    default_error_messages = {
        'invalid': _('Enter a valid zip code in the format XXXXX.'),
    }

    def __init__(self, *args, **kwargs):
        zip_code_re = r'^(0[1-9]|[1][0-6]|[2-9]\d)(\d{3})$'
        super(MXZipCodeField, self).__init__(zip_code_re, *args, **kwargs)


class MXRFCField(RegexField):
    """
    A form field that validates a Mexican *Registro Federal de Contribuyentes*
    for either `Persona física` or `Persona moral`.

    The Persona física RFC string is integrated by a juxtaposition of
    characters following the next pattern:

        =====  ======  ===========================================
        Index  Format  Accepted Characters
        =====  ======  ===========================================
        1      X       Any letter
        2      X       Any vowel
        3-4    XX      Any letter
        5-10   YYMMDD  Any valid date
        11-12  XX      Any letter or number between 0 and 9
        13     X       Any digit between 0 and 9 or the letter *A*
        =====  ======  ===========================================

    The Persona moral RFC string is integrated by a juxtaposition of
    characters following the next pattern:

        =====  ======  ============================================
        Index  Format  Accepted Characters
        =====  ======  ============================================
        1-3    XXX     Any letter including *&* and *Ñ* chars
        4-9    YYMMDD  Any valid date
        10-11  XX      Any letter or number between 0 and 9
        12     X       Any number between 0 and 9 or the letter *A*
        =====  ======  ============================================

    More info about this:
        http://es.wikipedia.org/wiki/Registro_Federal_de_Contribuyentes_(M%C3%A9xico)
    """
    default_error_messages = {
        'invalid': _('Enter a valid RFC.'),
        'invalid_checksum': _('Invalid checksum for RFC.'),
    }

    def __init__(self, min_length=9, max_length=13, *args, **kwargs):
        rfc_re = re.compile(r'^([A-Z&Ññ]{3}|[A-Z][AEIOU][A-Z]{2})%s([A-Z0-9]{2}[0-9A])?$' % DATE_RE,
                            re.IGNORECASE)
        super(MXRFCField, self).__init__(rfc_re, min_length=min_length,
                                         max_length=max_length, *args, **kwargs)

    def clean(self, value):
        value = super(MXRFCField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        value = value.upper()
        if self._has_homoclave(value):
            if not value[-1] == self._checksum(value[:-1]):
                raise ValidationError(self.error_messages['invalid_checksum'])
        if self._has_inconvenient_word(value):
            raise ValidationError(self.error_messages['invalid'])
        return value

    def _has_homoclave(self, rfc):
        """
        This check is done due to the existance of RFCs without a *homoclave*
        since the current algorithm to calculate it had not been created for
        the first RFCs ever in Mexico.
        """
        rfc_without_homoclave_re = re.compile(r'^[A-Z&Ññ]{3,4}%s$' % DATE_RE,
                                              re.IGNORECASE)
        return not rfc_without_homoclave_re.match(rfc)

    def _checksum(self, rfc):
        """
        More info about this procedure:
            www.sisi.org.mx/jspsi/documentos/2005/seguimiento/06101/0610100162005_065.doc
        """
        chars = '0123456789ABCDEFGHIJKLMN&OPQRSTUVWXYZ-Ñ'
        if len(rfc) == 11:
            rfc = '-' + rfc

        sum_ = sum(i * chars.index(c)
                   for i, c in zip(reversed(range(14)), rfc))
        checksum = 11 - sum_ % 11

        if checksum == 10:
            return 'A'
        elif checksum == 11:
            return '0'

        return six.text_type(checksum)

    def _has_inconvenient_word(self, rfc):
        first_four = rfc[:4]
        return first_four in RFC_INCONVENIENT_WORDS


class MXCURPField(RegexField):
    """
    A field that validates a Mexican Clave Única de Registro de Población.

    The CURP is integrated by a juxtaposition of characters following the next
    pattern:

        =====  ======  ===================================================
        Index  Format  Accepted Characters
        =====  ======  ===================================================
        1      X       Any letter
        2      X       Any vowel
        3-4    XX      Any letter
        5-10   YYMMDD  Any valid date
        11     X       Either `H` or `M`, depending on the person's gender
        12-13  XX      Any valid acronym for a state in Mexico
        14-16  XXX     Any consonant
        17     X       Any number between 0 and 9 or any letter
        18     X       Any number between 0 and 9
        =====  ======  ===================================================

    More info about this:
        http://www.condusef.gob.mx/index.php/clave-unica-de-registro-de-poblacion-curp
    """
    default_error_messages = {
        'invalid': _('Enter a valid CURP.'),
        'invalid_checksum': _('Invalid checksum for CURP.'),
    }

    def __init__(self, min_length=18, max_length=18, *args, **kwargs):
        states_re = r'(AS|BC|BS|CC|CL|CM|CS|CH|DF|DG|GT|GR|HG|JC|MC|MN|MS|NT|NL|OC|PL|QT|QR|SP|SL|SR|TC|TS|TL|VZ|YN|ZS|NE)'
        consonants_re = r'[B-DF-HJ-NP-TV-Z]'
        curp_re = (r'^[A-Z][AEIOU][A-Z]{2}%s[HM]%s%s{3}[0-9A-Z]\d$' %
                   (DATE_RE, states_re, consonants_re))
        curp_re = re.compile(curp_re, re.IGNORECASE)
        super(MXCURPField, self).__init__(curp_re, min_length=min_length,
                                          max_length=max_length, *args, **kwargs)

    def clean(self, value):
        value = super(MXCURPField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        value = value.upper()
        if value[-1] != self._checksum(value[:-1]):
            raise ValidationError(self.error_messages['invalid_checksum'])
        if self._has_inconvenient_word(value):
            raise ValidationError(self.error_messages['invalid'])
        return value

    def _checksum(self, value):
        chars = '0123456789ABCDEFGHIJKLMN&OPQRSTUVWXYZ'

        s = sum(i * chars.index(c) for i, c in zip(reversed(range(19)), value))
        checksum = 10 - s % 10

        if checksum == 10:
            return '0'
        return six.text_type(checksum)

    def _has_inconvenient_word(self, curp):
        first_four = curp[:4]
        return first_four in CURP_INCONVENIENT_WORDS


class MXSocialSecurityNumberField(RegexField):
    """
    A field that validates a Mexican Social Security Number.

    The Social Security Number is integrated by a juxtaposition of digits
    following the next pattern:

    =====  ==================================================================
    Index  Required numbers
    =====  ==================================================================
    1-2    The number of the branch office where the Social Security Number
           was designated.
    3-4    The year of inscription to the Social Security.
    5-6    The year of birth of the Social Security Number owner.
    7-10   The progressive number of procedure for the IMSS.
           (This digit is provided exclusively by the Institute as it regards
           the Folio number of such procedure).
    11     The verification digit.
    =====  ==================================================================

    """
    default_error_messages = {
        'invalid': _('Enter a valid Social Security Number.'),
        'invalid_checksum': _('Invalid checksum for Social Security Number.'),
    }

    def __init__(self, min_length=11, max_length=11, *args, **kwargs):
        ssn_re = r'^\d{11}$'
        ssn_re = re.compile(ssn_re)
        super(MXSocialSecurityNumberField, self).__init__(ssn_re,
                                                          min_length=min_length,
                                                          max_length=max_length,
                                                          *args, **kwargs)

    def clean(self, value):
        value = super(MXSocialSecurityNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        if value[-1] != self.__checksum(value[:-1]):
            raise ValidationError(self.error_messages['invalid_checksum'])
        return value

    def __checksum(self, value):
        multipliers = [1 if i % 2 == 0 else 2 for i in range(10)]

        s = [int(v) * m for v, m in zip(value, multipliers)]
        s = sum(map(int, ''.join(map(str, s))))
        checksum = 10 - s % 10

        if checksum == 10:
            return '0'
        return six.text_type(checksum)

########NEW FILE########
__FILENAME__ = models
from django.utils.translation import ugettext_lazy as _
from django.db.models.fields import CharField

from .mx_states import STATE_CHOICES
from .forms import (MXRFCField as MXRFCFormField,
                    MXZipCodeField as MXZipCodeFormField, MXCURPField as MXCURPFormField,
                    MXSocialSecurityNumberField as MXSocialSecurityNumberFormField)


class MXStateField(CharField):
    """
    A model field that stores the three-letter Mexican state abbreviation in the
    database.
    """
    description = _("Mexico state (three uppercase letters)")

    def __init__(self, *args, **kwargs):
        kwargs['choices'] = STATE_CHOICES
        kwargs['max_length'] = 3
        super(MXStateField, self).__init__(*args, **kwargs)


class MXZipCodeField(CharField):
    """
    A model field that forms represent as a forms.MXZipCodeField field and
    stores the five-digit Mexican zip code.
    """
    description = _("Mexico zip code")

    def __init__(self, *args, **kwargs):
        kwargs['max_length'] = 5
        super(MXZipCodeField, self).__init__(*args, **kwargs)

    def formfield(self, **kwargs):
        defaults = {'form_class': MXZipCodeFormField}
        defaults.update(kwargs)
        return super(MXZipCodeField, self).formfield(**defaults)


class MXRFCField(CharField):
    """
    A model field that forms represent as a forms.MXRFCField field and
    stores the value of a valid Mexican RFC.
    """
    description = _("Mexican RFC")

    def __init__(self, *args, **kwargs):
        kwargs['max_length'] = 13
        super(MXRFCField, self).__init__(*args, **kwargs)

    def formfield(self, **kwargs):
        defaults = {'form_class': MXRFCFormField}
        defaults.update(kwargs)
        return super(MXRFCField, self).formfield(**defaults)


class MXCURPField(CharField):
    """
    A model field that forms represent as a forms.MXCURPField field and
    stores the value of a valid Mexican CURP.
    """
    description = _("Mexican CURP")

    def __init__(self, *args, **kwargs):
        kwargs['max_length'] = 18
        super(MXCURPField, self).__init__(*args, **kwargs)

    def formfield(self, **kwargs):
        defaults = {'form_class': MXCURPFormField}
        defaults.update(kwargs)
        return super(MXCURPField, self).formfield(**defaults)


class MXSocialSecurityNumberField(CharField):
    """
    A model field that forms represent as a forms.MXSocialSecurityNumberField
    field and stores the value of a valid Mexican Social Security Number.
    """
    description = _("Mexican Social Security Number")

    def __init__(self, *args, **kwargs):
        kwargs['max_length'] = 11
        super(MXSocialSecurityNumberField, self).__init__(*args, **kwargs)

    def formfield(self, **kwargs):
        defaults = {'form_class': MXSocialSecurityNumberFormField}
        defaults.update(kwargs)
        return super(MXSocialSecurityNumberField, self).formfield(**defaults)

########NEW FILE########
__FILENAME__ = mx_states
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.utils.translation import ugettext_lazy as _

#: All 31 states, plus the `Distrito Federal`.
STATE_CHOICES = (
    ('AGU', _('Aguascalientes')),
    ('BCN', _('Baja California')),
    ('BCS', _('Baja California Sur')),
    ('CAM', _('Campeche')),
    ('CHH', _('Chihuahua')),
    ('CHP', _('Chiapas')),
    ('COA', _('Coahuila')),
    ('COL', _('Colima')),
    ('DIF', _('Distrito Federal')),
    ('DUR', _('Durango')),
    ('GRO', _('Guerrero')),
    ('GUA', _('Guanajuato')),
    ('HID', _('Hidalgo')),
    ('JAL', _('Jalisco')),
    ('MEX', _('Estado de México')),
    ('MIC', _('Michoacán')),
    ('MOR', _('Morelos')),
    ('NAY', _('Nayarit')),
    ('NLE', _('Nuevo León')),
    ('OAX', _('Oaxaca')),
    ('PUE', _('Puebla')),
    ('QUE', _('Querétaro')),
    ('ROO', _('Quintana Roo')),
    ('SIN', _('Sinaloa')),
    ('SLP', _('San Luis Potosí')),
    ('SON', _('Sonora')),
    ('TAB', _('Tabasco')),
    ('TAM', _('Tamaulipas')),
    ('TLA', _('Tlaxcala')),
    ('VER', _('Veracruz')),
    ('YUC', _('Yucatán')),
    ('ZAC', _('Zacatecas')),
)

########NEW FILE########
__FILENAME__ = forms
"""
NL-specific Form helpers
"""

from __future__ import absolute_import, unicode_literals

import re

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import Field, Select
from django.utils.encoding import smart_text
from django.utils.translation import ugettext_lazy as _

from .nl_provinces import PROVINCE_CHOICES


pc_re = re.compile('^\d{4}[A-Z]{2}$')
sofi_re = re.compile('^\d{9}$')
numeric_re = re.compile('^\d+$')


class NLZipCodeField(Field):
    """
    A Dutch postal code field.
    """
    default_error_messages = {
        'invalid': _('Enter a valid postal code'),
    }

    def clean(self, value):
        super(NLZipCodeField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        value = value.strip().upper().replace(' ', '')
        if not pc_re.search(value):
            raise ValidationError(self.error_messages['invalid'])

        if int(value[:4]) < 1000:
            raise ValidationError(self.error_messages['invalid'])

        return '%s %s' % (value[:4], value[4:])


class NLProvinceSelect(Select):
    """
    A Select widget that uses a list of provinces of the Netherlands as its
    choices.
    """
    def __init__(self, attrs=None):
        super(NLProvinceSelect, self).__init__(attrs, choices=PROVINCE_CHOICES)


class NLPhoneNumberField(Field):
    """
    A Dutch telephone number field.
    """
    default_error_messages = {
        'invalid': _('Enter a valid phone number'),
    }

    def clean(self, value):
        super(NLPhoneNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        phone_nr = re.sub('[\-\s\(\)]', '', smart_text(value))

        if len(phone_nr) == 10 and numeric_re.search(phone_nr):
            return value

        if phone_nr[:3] == '+31' and len(phone_nr) == 12 and \
                numeric_re.search(phone_nr[3:]):
            return value

        raise ValidationError(self.error_messages['invalid'])


class NLSoFiNumberField(Field):
    """
    A Dutch social security number (SoFi/BSN) field.

    http://nl.wikipedia.org/wiki/Sofinummer
    """
    default_error_messages = {
        'invalid': _('Enter a valid SoFi number'),
    }

    def clean(self, value):
        super(NLSoFiNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        if not sofi_re.search(value):
            raise ValidationError(self.error_messages['invalid'])

        if int(value) == 0:
            raise ValidationError(self.error_messages['invalid'])

        checksum = 0
        for i in range(9, 1, -1):
            checksum += int(value[9 - i]) * i
        checksum -= int(value[-1])

        if checksum % 11 != 0:
            raise ValidationError(self.error_messages['invalid'])

        return value

########NEW FILE########
__FILENAME__ = models
import re
from django.core.exceptions import ValidationError
from django.core.validators import RegexValidator
from django.db import models
from django.utils.translation import ugettext as _


class NLBankAccountNumberFieldValidator(RegexValidator):
    """
    Validation for Dutch bank accounts.

    Validation references:
    http://www.mobilefish.com/services/elfproef/elfproef.php
    http://www.credit-card.be/BankAccount/ValidationRules.htm#NL_Validation

    .. versionadded:: 1.1
    """
    default_error_messages = {
        'invalid': _('Enter a valid bank account number'),
        'wrong_length': _('Bank account numbers have 1 - 7, 9 or 10 digits'),
    }

    def __init__(self, regex=None, message=None, code=None):
        super(NLBankAccountNumberFieldValidator, self).__init__(regex='^[0-9]+$',
                                                                message=self.default_error_messages['invalid'])
        self.no_leading_zeros_regex = re.compile('[1-9]+')

    def __call__(self, value):
        super(NLBankAccountNumberFieldValidator, self).__call__(value)

        # Need to check for values over the field's max length before the zero are stripped.
        # This check is needed to allow this validator to be used without Django's MaxLengthValidator.
        if len(value) > 10:
            raise ValidationError(self.default_error_messages['wrong_length'])

        # Strip the leading zeros.
        m = re.search(self.no_leading_zeros_regex, value)
        if not m:
            raise ValidationError(self.default_error_messages['invalid'])
        value = value[m.start():]

        if len(value) != 9 and len(value) != 10 and not 1 <= len(value) <= 7:
            raise ValidationError(self.default_error_messages['wrong_length'])

        # Perform the eleven test validation on non-PostBank numbers.
        if len(value) == 9 or len(value) == 10:
            if len(value) == 9:
                value = "0" + value

            eleven_test_sum = sum([int(a) * b for a, b in zip(value, range(1, 11))])
            if eleven_test_sum % 11 != 0:
                raise ValidationError(self.default_error_messages['invalid'])


class NLBankAccountNumberField(models.CharField):
    """
    A Dutch bank account model field.

    This model field uses :class:`.NLBankAccountNumberFieldValidator` for validation.

    .. versionadded:: 1.1
    """
    def __init__(self, *args, **kwargs):
        kwargs.setdefault('max_length', 10)
        super(NLBankAccountNumberField, self).__init__(*args, **kwargs)
        # Ensure that only the NLBankAccountNumberFieldValidator is set.
        self.validators = [NLBankAccountNumberFieldValidator()]

########NEW FILE########
__FILENAME__ = nl_provinces
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.utils.translation import ugettext_lazy as _

#: An alphabetical list of provinces
PROVINCE_CHOICES = (
    ('DR', _('Drenthe')),
    ('FL', _('Flevoland')),
    ('FR', _('Fryslân')),
    ('GL', _('Gelderland')),
    ('GR', _('Groningen')),
    ('LB', _('Limburg')),
    ('NB', _('Noord-Brabant')),
    ('NH', _('Noord-Holland')),
    ('OV', _('Overijssel')),
    ('UT', _('Utrecht')),
    ('ZE', _('Zeeland')),
    ('ZH', _('Zuid-Holland')),
)

########NEW FILE########
__FILENAME__ = forms
"""
Norwegian-specific Form helpers
"""

from __future__ import absolute_import, unicode_literals

import re
import datetime

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import Field, RegexField, Select
from django.utils.translation import ugettext_lazy as _

from .no_municipalities import MUNICIPALITY_CHOICES


class NOZipCodeField(RegexField):
    """
    A form field that validates input as a Norwegian zip code. Valid codes
    have four digits.
    """
    default_error_messages = {
        'invalid': _('Enter a zip code in the format XXXX.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(NOZipCodeField, self).__init__(r'^\d{4}$',
                                             max_length, min_length, *args, **kwargs)


class NOMunicipalitySelect(Select):
    """
    A Select widget that uses a list of Norwegian municipalities (fylker)
    as its choices.
    """
    def __init__(self, attrs=None):
        super(NOMunicipalitySelect, self).__init__(attrs, choices=MUNICIPALITY_CHOICES)


class NOSocialSecurityNumber(Field):
    """
    Algorithm is documented at http://no.wikipedia.org/wiki/Personnummer
    """
    default_error_messages = {
        'invalid': _('Enter a valid Norwegian social security number.'),
    }

    def clean(self, value):
        super(NOSocialSecurityNumber, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        if not re.match(r'^\d{11}$', value):
            raise ValidationError(self.error_messages['invalid'])

        day = int(value[:2])
        month = int(value[2:4])
        year2 = int(value[4:6])

        inum = int(value[6:9])
        self.birthday = None
        try:
            if 000 <= inum < 500:
                self.birthday = datetime.date(1900 + year2, month, day)
            if 500 <= inum < 750 and year2 > 54:
                self.birthday = datetime.date(1800 + year2, month, day)
            if 500 <= inum < 1000 and year2 < 40:
                self.birthday = datetime.date(2000 + year2, month, day)
            if 900 <= inum < 1000 and year2 > 39:
                self.birthday = datetime.date(1900 + year2, month, day)
        except ValueError:
            raise ValidationError(self.error_messages['invalid'])

        sexnum = int(value[8])
        if sexnum % 2 == 0:
            self.gender = 'F'
        else:
            self.gender = 'M'

        digits = map(int, list(value))
        weight_1 = [3, 7, 6, 1, 8, 9, 4, 5, 2, 1, 0]
        weight_2 = [5, 4, 3, 2, 7, 6, 5, 4, 3, 2, 1]

        def multiply_reduce(aval, bval):
            return sum([(a * b) for (a, b) in zip(aval, bval)])

        if multiply_reduce(digits, weight_1) % 11 != 0:
            raise ValidationError(self.error_messages['invalid'])
        if multiply_reduce(digits, weight_2) % 11 != 0:
            raise ValidationError(self.error_messages['invalid'])

        return value


class NOPhoneNumberField(RegexField):
    """
    Field with phonenumber validation. Requires a phone number with
    8 digits and optional country code
    """
    default_error_messages = {
        'invalid': _('A phone number must be 8 digits and may have country code'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(NOPhoneNumberField, self).__init__(r'^(?:\+47)? ?(\d{3}\s?\d{2}\s?\d{3}|\d{2}\s?\d{2}\s?\d{2}\s?\d{2})$',
                                                 max_length, min_length, *args, **kwargs)

########NEW FILE########
__FILENAME__ = no_municipalities
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

#: An alphabetical list of Norwegian municipalities (fylker) for
#: use as `choices` in a formfield.
MUNICIPALITY_CHOICES = (
    ('akershus', 'Akershus'),
    ('austagder', 'Aust-Agder'),
    ('buskerud', 'Buskerud'),
    ('finnmark', 'Finnmark'),
    ('hedmark', 'Hedmark'),
    ('hordaland', 'Hordaland'),
    ('janmayen', 'Jan Mayen'),
    ('moreogromsdal', 'Møre og Romsdal'),
    ('nordtrondelag', 'Nord-Trøndelag'),
    ('nordland', 'Nordland'),
    ('oppland', 'Oppland'),
    ('oslo', 'Oslo'),
    ('rogaland', 'Rogaland'),
    ('sognogfjordane', 'Sogn og Fjordane'),
    ('svalbard', 'Svalbard'),
    ('sortrondelag', 'Sør-Trøndelag'),
    ('telemark', 'Telemark'),
    ('troms', 'Troms'),
    ('vestagder', 'Vest-Agder'),
    ('vestfold', 'Vestfold'),
    ('ostfold', 'Østfold')
)

########NEW FILE########
__FILENAME__ = forms
# -*- coding: utf-8 -*-
"""
PE-specific Form helpers.
"""

from __future__ import absolute_import, unicode_literals

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import RegexField, CharField, Select
from django.utils.translation import ugettext_lazy as _

from .pe_region import REGION_CHOICES


class PERegionSelect(Select):
    """
    A Select widget that uses a list of Peruvian Regions as its choices.
    """
    def __init__(self, attrs=None):
        super(PERegionSelect, self).__init__(attrs, choices=REGION_CHOICES)


class PEDNIField(CharField):
    """
    A field that validates Documento Nacional de Identidad (DNI) numbers.
    """
    default_error_messages = {
        'invalid': _("This field requires only numbers."),
        'max_digits': _("This field requires 8 digits."),
    }

    def __init__(self, max_length=8, min_length=8, *args, **kwargs):
        super(PEDNIField, self).__init__(max_length, min_length, *args,
                                         **kwargs)

    def clean(self, value):
        """
        Value must be a string in the XXXXXXXX formats.
        """
        value = super(PEDNIField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        if not value.isdigit():
            raise ValidationError(self.error_messages['invalid'])
        if len(value) != 8:
            raise ValidationError(self.error_messages['max_digits'])

        return value


class PERUCField(RegexField):
    """
    This field validates a RUC (Registro Unico de Contribuyentes). A RUC is of
    the form XXXXXXXXXXX.
    """
    default_error_messages = {
        'invalid': _("This field requires only numbers."),
        'max_digits': _("This field requires 11 digits."),
    }

    def __init__(self, max_length=11, min_length=11, *args, **kwargs):
        super(PERUCField, self).__init__(max_length, min_length, *args,
                                         **kwargs)

    def clean(self, value):
        """
        Value must be an 11-digit number.
        """
        value = super(PERUCField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        if not value.isdigit():
            raise ValidationError(self.error_messages['invalid'])
        if len(value) != 11:
            raise ValidationError(self.error_messages['max_digits'])
        return value

########NEW FILE########
__FILENAME__ = pe_region
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

#: A list of Peru regions as `choices` in a formfield.
REGION_CHOICES = (
    ('AMA', 'Amazonas'),
    ('ANC', 'Ancash'),
    ('APU', 'Apurímac'),
    ('ARE', 'Arequipa'),
    ('AYA', 'Ayacucho'),
    ('CAJ', 'Cajamarca'),
    ('CAL', 'Callao'),
    ('CUS', 'Cusco'),
    ('HUV', 'Huancavelica'),
    ('HUC', 'Huánuco'),
    ('ICA', 'Ica'),
    ('JUN', 'Junín'),
    ('LAL', 'La Libertad'),
    ('LAM', 'Lambayeque'),
    ('LIM', 'Lima'),
    ('LOR', 'Loreto'),
    ('MDD', 'Madre de Dios'),
    ('MOQ', 'Moquegua'),
    ('PAS', 'Pasco'),
    ('PIU', 'Piura'),
    ('PUN', 'Puno'),
    ('SAM', 'San Martín'),
    ('TAC', 'Tacna'),
    ('TUM', 'Tumbes'),
    ('UCA', 'Ucayali'),
)

########NEW FILE########
__FILENAME__ = forms
"""
Pakistani-specific Form helpers
"""

from __future__ import absolute_import, unicode_literals
import re

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import CharField, RegexField, Select
from django.utils.encoding import smart_text
from django.utils.translation import ugettext_lazy as _

from .pk_states import STATE_CHOICES

POSTCODE_DIGITS_RE = re.compile(r'^(\d{5})$')
PHONE_DIGITS_RE = re.compile(r'^(\d{9,11})$')


class PKPostCodeField(RegexField):
    """ Pakistani post code field.

    Assumed to be 5 digits.
    """
    default_error_messages = {
        'invalid': _('Enter a 5 digit postcode.'),
    }

    def __init__(self, *args, **kwargs):
        super(PKPostCodeField, self).__init__(POSTCODE_DIGITS_RE, *args, **kwargs)


class PKPhoneNumberField(CharField):
    """
    A form field that validates input as an Pakistani phone number.

    Valid numbers have nine to eleven digits.
    """
    default_error_messages = {
        'invalid': _('Phone numbers must contain 9, 10 or 11 digits.'),
    }

    def clean(self, value):
        """
        Validate a phone number. Strips parentheses, whitespace and hyphens.
        """
        super(PKPhoneNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        value = re.sub('(\(|\)|\s+|-)', '', smart_text(value))
        phone_match = PHONE_DIGITS_RE.search(value)
        if phone_match:
            return '%s' % phone_match.group(1)
        raise ValidationError(self.error_messages['invalid'])


class PKStateSelect(Select):
    """
    A Select widget that uses a list of Pakistani states/territories as its
    choices.
    """
    def __init__(self, attrs=None):
        super(PKStateSelect, self).__init__(attrs, choices=STATE_CHOICES)

########NEW FILE########
__FILENAME__ = models
from django.db.models.fields import CharField
from django.utils.translation import ugettext_lazy as _

from . import forms
from .pk_states import STATE_CHOICES


class PKStateField(CharField):
    """
    A model field that is represented with
    :data:`~localflavor.pk.pk_states.STATE_CHOICES`` choices and
    stores the five-letter Pakistani state abbreviation in the database.
    """
    description = _("Pakistani State")

    def __init__(self, *args, **kwargs):
        kwargs['choices'] = STATE_CHOICES
        kwargs['max_length'] = 5
        super(PKStateField, self).__init__(*args, **kwargs)


class PKPostCodeField(CharField):
    """
    A model field that forms represent as a
    :class:`~localflavor.forms.PKPostCodeField` field and stores the
    five-digit Pakistani postcode in the database.
    """
    description = _("Pakistani Postcode")

    def __init__(self, *args, **kwargs):
        kwargs['max_length'] = 5
        super(PKPostCodeField, self).__init__(*args, **kwargs)

    def formfield(self, **kwargs):
        defaults = {'form_class': forms.PKPostCodeField}
        defaults.update(kwargs)
        return super(PKPostCodeField, self).formfield(**defaults)


class PKPhoneNumberField(CharField):
    """
    A model field that checks that the value is a valid Pakistani phone
    number (nine to eleven digits).
    """
    description = _("Pakistani Phone number")

    def __init__(self, *args, **kwargs):
        kwargs['max_length'] = 20
        super(PKPhoneNumberField, self).__init__(*args, **kwargs)

    def formfield(self, **kwargs):
        defaults = {'form_class': forms.PKPhoneNumberField}
        defaults.update(kwargs)
        return super(PKPhoneNumberField, self).formfield(**defaults)

########NEW FILE########
__FILENAME__ = pk_states
from django.utils.translation import ugettext_lazy as _

#: An alphabetical list of states for use as `choices` in a formfield.
# Codes taken from http://en.wikipedia.org/wiki/ISO_3166-2:PK
STATE_CHOICES = (
    ('PK-JK', _('Azad Jammu & Kashmir')),
    ('PK-BA', _('Balochistan')),
    ('PK-TA', _('Federally Administered Tribal Areas')),
    ('PK-GB', _('Gilgit-Baltistan')),
    ('PK-IS', _('Islamabad')),
    ('PK-KP', _('Khyber Pakhtunkhwa')),
    ('PK-PB', _('Punjab')),
    ('PK-SD', _('Sindh')),
)

########NEW FILE########
__FILENAME__ = forms
"""
Polish-specific form helpers
"""

from __future__ import absolute_import, unicode_literals

import re

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import Select, RegexField
from django.utils.translation import ugettext_lazy as _

from .pl_administrativeunits import ADMINISTRATIVE_UNIT_CHOICES
from .pl_voivodeships import VOIVODESHIP_CHOICES


class PLProvinceSelect(Select):
    """
    A select widget with list of Polish administrative provinces as choices.
    """
    def __init__(self, attrs=None):
        super(PLProvinceSelect, self).__init__(attrs, choices=VOIVODESHIP_CHOICES)


class PLCountySelect(Select):
    """
    A select widget with list of Polish administrative units as choices.
    """
    def __init__(self, attrs=None):
        super(PLCountySelect, self).__init__(attrs, choices=ADMINISTRATIVE_UNIT_CHOICES)


class PLPESELField(RegexField):
    """
    A form field that validates as Polish Identification Number (PESEL).

    Checks the following rules:
        * the length consist of 11 digits
        * has a valid checksum

    The algorithm is documented at http://en.wikipedia.org/wiki/PESEL.
    """
    default_error_messages = {
        'invalid': _('National Identification Number consists of 11 digits.'),
        'checksum': _('Wrong checksum for the National Identification Number.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(PLPESELField, self).__init__(r'^\d{11}$',
                                           max_length, min_length, *args, **kwargs)

    def clean(self, value):
        super(PLPESELField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        if not self.has_valid_checksum(value):
            raise ValidationError(self.error_messages['checksum'])
        return '%s' % value

    def has_valid_checksum(self, number):
        """
        Calculates a checksum with the provided algorithm.
        """
        multiple_table = (1, 3, 7, 9, 1, 3, 7, 9, 1, 3, 1)
        result = 0
        for i in range(len(number)):
            result += int(number[i]) * multiple_table[i]
        return result % 10 == 0


class PLNationalIDCardNumberField(RegexField):
    """
    A form field that validates as Polish National ID Card Number.

    Checks the following rules:
        * the length consist of 3 letter and 6 digits
        * has a valid checksum

    The algorithm is documented at http://en.wikipedia.org/wiki/Polish_identity_card.
    """
    default_error_messages = {
        'invalid': _('National ID Card Number consists of 3 letters and 6 digits.'),
        'checksum': _('Wrong checksum for the National ID Card Number.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(PLNationalIDCardNumberField, self).__init__(r'^[A-Za-z]{3}\d{6}$',
                                                          max_length, min_length,
                                                          *args, **kwargs)

    def clean(self, value):
        super(PLNationalIDCardNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        value = value.upper()

        if not self.has_valid_checksum(value):
            raise ValidationError(self.error_messages['checksum'])
        return '%s' % value

    def has_valid_checksum(self, number):
        """
        Calculates a checksum with the provided algorithm.
        """
        letter_dict = {'A': 10, 'B': 11, 'C': 12, 'D': 13,
                       'E': 14, 'F': 15, 'G': 16, 'H': 17,
                       'I': 18, 'J': 19, 'K': 20, 'L': 21,
                       'M': 22, 'N': 23, 'O': 24, 'P': 25,
                       'Q': 26, 'R': 27, 'S': 28, 'T': 29,
                       'U': 30, 'V': 31, 'W': 32, 'X': 33,
                       'Y': 34, 'Z': 35}

        # convert letters to integer values
        int_table = [(not c.isdigit()) and letter_dict[c] or int(c)
                     for c in number]

        multiple_table = (7, 3, 1, -1, 7, 3, 1, 7, 3)
        result = 0
        for i in range(len(int_table)):
            result += int_table[i] * multiple_table[i]

        return result % 10 == 0


class PLNIPField(RegexField):
    """
    A form field that validates as Polish Tax Number (NIP).
    Valid forms are: XXX-YYY-YY-YY, XXX-YY-YY-YYY or XXXYYYYYYY.

    Checksum algorithm based on documentation at
    http://wipos.p.lodz.pl/zylla/ut/nip-rego.html
    """
    default_error_messages = {
        'invalid': _('Enter a tax number field (NIP) in the format XXX-XXX-XX-XX, XXX-XX-XX-XXX or XXXXXXXXXX.'),
        'checksum': _('Wrong checksum for the Tax Number (NIP).'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(PLNIPField, self).__init__(r'^\d{3}-\d{3}-\d{2}-\d{2}$|^\d{3}-\d{2}-\d{2}-\d{3}$|^\d{10}$',
                                         max_length, min_length,
                                         *args, **kwargs)

    def clean(self, value):
        super(PLNIPField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        value = re.sub("[-]", "", value)
        if not self.has_valid_checksum(value):
            raise ValidationError(self.error_messages['checksum'])
        return '%s' % value

    def has_valid_checksum(self, number):
        """
        Calculates a checksum with the provided algorithm.
        """
        multiple_table = (6, 5, 7, 2, 3, 4, 5, 6, 7)
        result = 0
        for i in range(len(number) - 1):
            result += int(number[i]) * multiple_table[i]

        result %= 11
        if result == int(number[-1]):
            return True
        else:
            return False


class PLREGONField(RegexField):
    """
    A form field that validates its input is a REGON number.

    Valid regon number consists of 9 or 14 digits.
    See http://www.stat.gov.pl/bip/regon_ENG_HTML.htm for more information.
    """
    default_error_messages = {
        'invalid': _('National Business Register Number (REGON) consists of 9 or 14 digits.'),
        'checksum': _('Wrong checksum for the National Business Register Number (REGON).'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(PLREGONField, self).__init__(r'^\d{9,14}$',
                                           max_length, min_length, *args, **kwargs)

    def clean(self, value):
        super(PLREGONField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        if not self.has_valid_checksum(value):
            raise ValidationError(self.error_messages['checksum'])
        return '%s' % value

    def has_valid_checksum(self, number):
        """
        Calculates a checksum with the provided algorithm.
        """
        weights = (
            (8, 9, 2, 3, 4, 5, 6, 7, -1),
            (2, 4, 8, 5, 0, 9, 7, 3, 6, 1, 2, 4, 8, -1),
            (8, 9, 2, 3, 4, 5, 6, 7, -1, 0, 0, 0, 0, 0),
        )

        weights = [table for table in weights if len(table) == len(number)]

        for table in weights:
            checksum = sum([int(n) * w for n, w in zip(number, table)])

            mod_result = checksum % 11

            if mod_result == 10 and number[-1] != '0':
                return False

            if mod_result % 10:
                return False

        return bool(weights)


class PLPostalCodeField(RegexField):
    """
    A form field that validates as Polish postal code.
    Valid code is XX-XXX where X is digit.
    """
    default_error_messages = {
        'invalid': _('Enter a postal code in the format XX-XXX.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(PLPostalCodeField, self).__init__(r'^\d{2}-\d{3}$',
                                                max_length, min_length, *args, **kwargs)

########NEW FILE########
__FILENAME__ = pl_administrativeunits
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

#: Polish administrative units as in http://pl.wikipedia.org/wiki/Podzia%C5%82_administracyjny_Polski
ADMINISTRATIVE_UNIT_CHOICES = (
    ('wroclaw', 'Wrocław'),
    ('jeleniagora', 'Jelenia Góra'),
    ('legnica', 'Legnica'),
    ('boleslawiecki', 'bolesławiecki'),
    ('dzierzoniowski', 'dzierżoniowski'),
    ('glogowski', 'głogowski'),
    ('gorowski', 'górowski'),
    ('jaworski', 'jaworski'),
    ('jeleniogorski', 'jeleniogórski'),
    ('kamiennogorski', 'kamiennogórski'),
    ('klodzki', 'kłodzki'),
    ('legnicki', 'legnicki'),
    ('lubanski', 'lubański'),
    ('lubinski', 'lubiński'),
    ('lwowecki', 'lwówecki'),
    ('milicki', 'milicki'),
    ('olesnicki', 'oleśnicki'),
    ('olawski', 'oławski'),
    ('polkowicki', 'polkowicki'),
    ('strzelinski', 'strzeliński'),
    ('sredzki', 'średzki'),
    ('swidnicki', 'świdnicki'),
    ('trzebnicki', 'trzebnicki'),
    ('walbrzyski', 'wałbrzyski'),
    ('wolowski', 'wołowski'),
    ('wroclawski', 'wrocławski'),
    ('zabkowicki', 'ząbkowicki'),
    ('zgorzelecki', 'zgorzelecki'),
    ('zlotoryjski', 'złotoryjski'),
    ('bydgoszcz', 'Bydgoszcz'),
    ('torun', 'Toruń'),
    ('wloclawek', 'Włocławek'),
    ('grudziadz', 'Grudziądz'),
    ('aleksandrowski', 'aleksandrowski'),
    ('brodnicki', 'brodnicki'),
    ('bydgoski', 'bydgoski'),
    ('chelminski', 'chełmiński'),
    ('golubsko-dobrzynski', 'golubsko-dobrzyński'),
    ('grudziadzki', 'grudziądzki'),
    ('inowroclawski', 'inowrocławski'),
    ('lipnowski', 'lipnowski'),
    ('mogilenski', 'mogileński'),
    ('nakielski', 'nakielski'),
    ('radziejowski', 'radziejowski'),
    ('rypinski', 'rypiński'),
    ('sepolenski', 'sępoleński'),
    ('swiecki', 'świecki'),
    ('torunski', 'toruński'),
    ('tucholski', 'tucholski'),
    ('wabrzeski', 'wąbrzeski'),
    ('wloclawski', 'wrocławski'),
    ('zninski', 'źniński'),
    ('lublin', 'Lublin'),
    ('biala-podlaska', 'Biała Podlaska'),
    ('chelm', 'Chełm'),
    ('zamosc', 'Zamość'),
    ('bialski', 'bialski'),
    ('bilgorajski', 'biłgorajski'),
    ('chelmski', 'chełmski'),
    ('hrubieszowski', 'hrubieszowski'),
    ('janowski', 'janowski'),
    ('krasnostawski', 'krasnostawski'),
    ('krasnicki', 'kraśnicki'),
    ('lubartowski', 'lubartowski'),
    ('lubelski', 'lubelski'),
    ('leczynski', 'łęczyński'),
    ('lukowski', 'łukowski'),
    ('opolski', 'opolski'),
    ('parczewski', 'parczewski'),
    ('pulawski', 'puławski'),
    ('radzynski', 'radzyński'),
    ('rycki', 'rycki'),
    ('swidnicki', 'świdnicki'),
    ('tomaszowski', 'tomaszowski'),
    ('wlodawski', 'włodawski'),
    ('zamojski', 'zamojski'),
    ('gorzow-wielkopolski', 'Gorzów Wielkopolski'),
    ('zielona-gora', 'Zielona Góra'),
    ('gorzowski', 'gorzowski'),
    ('krosnienski', 'krośnieński'),
    ('miedzyrzecki', 'międzyrzecki'),
    ('nowosolski', 'nowosolski'),
    ('slubicki', 'słubicki'),
    ('strzelecko-drezdenecki', 'strzelecko-drezdenecki'),
    ('sulecinski', 'suleńciński'),
    ('swiebodzinski', 'świebodziński'),
    ('wschowski', 'wschowski'),
    ('zielonogorski', 'zielonogórski'),
    ('zaganski', 'żagański'),
    ('zarski', 'żarski'),
    ('lodz', 'Łódź'),
    ('piotrkow-trybunalski', 'Piotrków Trybunalski'),
    ('skierniewice', 'Skierniewice'),
    ('belchatowski', 'bełchatowski'),
    ('brzezinski', 'brzeziński'),
    ('kutnowski', 'kutnowski'),
    ('laski', 'łaski'),
    ('leczycki', 'łęczycki'),
    ('lowicki', 'łowicki'),
    ('lodzki wschodni', 'łódzki wschodni'),
    ('opoczynski', 'opoczyński'),
    ('pabianicki', 'pabianicki'),
    ('pajeczanski', 'pajęczański'),
    ('piotrkowski', 'piotrkowski'),
    ('poddebicki', 'poddębicki'),
    ('radomszczanski', 'radomszczański'),
    ('rawski', 'rawski'),
    ('sieradzki', 'sieradzki'),
    ('skierniewicki', 'skierniewicki'),
    ('tomaszowski', 'tomaszowski'),
    ('wielunski', 'wieluński'),
    ('wieruszowski', 'wieruszowski'),
    ('zdunskowolski', 'zduńskowolski'),
    ('zgierski', 'zgierski'),
    ('krakow', 'Kraków'),
    ('tarnow', 'Tarnów'),
    ('nowy-sacz', 'Nowy Sącz'),
    ('bochenski', 'bocheński'),
    ('brzeski', 'brzeski'),
    ('chrzanowski', 'chrzanowski'),
    ('dabrowski', 'dąbrowski'),
    ('gorlicki', 'gorlicki'),
    ('krakowski', 'krakowski'),
    ('limanowski', 'limanowski'),
    ('miechowski', 'miechowski'),
    ('myslenicki', 'myślenicki'),
    ('nowosadecki', 'nowosądecki'),
    ('nowotarski', 'nowotarski'),
    ('olkuski', 'olkuski'),
    ('oswiecimski', 'oświęcimski'),
    ('proszowicki', 'proszowicki'),
    ('suski', 'suski'),
    ('tarnowski', 'tarnowski'),
    ('tatrzanski', 'tatrzański'),
    ('wadowicki', 'wadowicki'),
    ('wielicki', 'wielicki'),
    ('warszawa', 'Warszawa'),
    ('ostroleka', 'Ostrołęka'),
    ('plock', 'Płock'),
    ('radom', 'Radom'),
    ('siedlce', 'Siedlce'),
    ('bialobrzeski', 'białobrzeski'),
    ('ciechanowski', 'ciechanowski'),
    ('garwolinski', 'garwoliński'),
    ('gostyninski', 'gostyniński'),
    ('grodziski', 'grodziski'),
    ('grojecki', 'grójecki'),
    ('kozienicki', 'kozenicki'),
    ('legionowski', 'legionowski'),
    ('lipski', 'lipski'),
    ('losicki', 'łosicki'),
    ('makowski', 'makowski'),
    ('minski', 'miński'),
    ('mlawski', 'mławski'),
    ('nowodworski', 'nowodworski'),
    ('ostrolecki', 'ostrołęcki'),
    ('ostrowski', 'ostrowski'),
    ('otwocki', 'otwocki'),
    ('piaseczynski', 'piaseczyński'),
    ('plocki', 'płocki'),
    ('plonski', 'płoński'),
    ('pruszkowski', 'pruszkowski'),
    ('przasnyski', 'przasnyski'),
    ('przysuski', 'przysuski'),
    ('pultuski', 'pułtuski'),
    ('radomski', 'radomski'),
    ('siedlecki', 'siedlecki'),
    ('sierpecki', 'sierpecki'),
    ('sochaczewski', 'sochaczewski'),
    ('sokolowski', 'sokołowski'),
    ('szydlowiecki', 'szydłowiecki'),
    ('warszawski-zachodni', 'warszawski zachodni'),
    ('wegrowski', 'węgrowski'),
    ('wolominski', 'wołomiński'),
    ('wyszkowski', 'wyszkowski'),
    ('zwolenski', 'zwoleński'),
    ('zurominski', 'żuromiński'),
    ('zyrardowski', 'żyrardowski'),
    ('opole', 'Opole'),
    ('brzeski', 'brzeski'),
    ('glubczycki', 'głubczyski'),
    ('kedzierzynsko-kozielski', 'kędzierzyński-kozielski'),
    ('kluczborski', 'kluczborski'),
    ('krapkowicki', 'krapkowicki'),
    ('namyslowski', 'namysłowski'),
    ('nyski', 'nyski'),
    ('oleski', 'oleski'),
    ('opolski', 'opolski'),
    ('prudnicki', 'prudnicki'),
    ('strzelecki', 'strzelecki'),
    ('rzeszow', 'Rzeszów'),
    ('krosno', 'Krosno'),
    ('przemysl', 'Przemyśl'),
    ('tarnobrzeg', 'Tarnobrzeg'),
    ('bieszczadzki', 'bieszczadzki'),
    ('brzozowski', 'brzozowski'),
    ('debicki', 'dębicki'),
    ('jaroslawski', 'jarosławski'),
    ('jasielski', 'jasielski'),
    ('kolbuszowski', 'kolbuszowski'),
    ('krosnienski', 'krośnieński'),
    ('leski', 'leski'),
    ('lezajski', 'leżajski'),
    ('lubaczowski', 'lubaczowski'),
    ('lancucki', 'łańcucki'),
    ('mielecki', 'mielecki'),
    ('nizanski', 'niżański'),
    ('przemyski', 'przemyski'),
    ('przeworski', 'przeworski'),
    ('ropczycko-sedziszowski', 'ropczycko-sędziszowski'),
    ('rzeszowski', 'rzeszowski'),
    ('sanocki', 'sanocki'),
    ('stalowowolski', 'stalowowolski'),
    ('strzyzowski', 'strzyżowski'),
    ('tarnobrzeski', 'tarnobrzeski'),
    ('bialystok', 'Białystok'),
    ('lomza', 'Łomża'),
    ('suwalki', 'Suwałki'),
    ('augustowski', 'augustowski'),
    ('bialostocki', 'białostocki'),
    ('bielski', 'bielski'),
    ('grajewski', 'grajewski'),
    ('hajnowski', 'hajnowski'),
    ('kolnenski', 'kolneński'),
    ('łomzynski', 'łomżyński'),
    ('moniecki', 'moniecki'),
    ('sejnenski', 'sejneński'),
    ('siemiatycki', 'siematycki'),
    ('sokolski', 'sokólski'),
    ('suwalski', 'suwalski'),
    ('wysokomazowiecki', 'wysokomazowiecki'),
    ('zambrowski', 'zambrowski'),
    ('gdansk', 'Gdańsk'),
    ('gdynia', 'Gdynia'),
    ('slupsk', 'Słupsk'),
    ('sopot', 'Sopot'),
    ('bytowski', 'bytowski'),
    ('chojnicki', 'chojnicki'),
    ('czluchowski', 'człuchowski'),
    ('kartuski', 'kartuski'),
    ('koscierski', 'kościerski'),
    ('kwidzynski', 'kwidzyński'),
    ('leborski', 'lęborski'),
    ('malborski', 'malborski'),
    ('nowodworski', 'nowodworski'),
    ('gdanski', 'gdański'),
    ('pucki', 'pucki'),
    ('slupski', 'słupski'),
    ('starogardzki', 'starogardzki'),
    ('sztumski', 'sztumski'),
    ('tczewski', 'tczewski'),
    ('wejherowski', 'wejcherowski'),
    ('katowice', 'Katowice'),
    ('bielsko-biala', 'Bielsko-Biała'),
    ('bytom', 'Bytom'),
    ('chorzow', 'Chorzów'),
    ('czestochowa', 'Częstochowa'),
    ('dabrowa-gornicza', 'Dąbrowa Górnicza'),
    ('gliwice', 'Gliwice'),
    ('jastrzebie-zdroj', 'Jastrzębie Zdrój'),
    ('jaworzno', 'Jaworzno'),
    ('myslowice', 'Mysłowice'),
    ('piekary-slaskie', 'Piekary Śląskie'),
    ('ruda-slaska', 'Ruda Śląska'),
    ('rybnik', 'Rybnik'),
    ('siemianowice-slaskie', 'Siemianowice Śląskie'),
    ('sosnowiec', 'Sosnowiec'),
    ('swietochlowice', 'Świętochłowice'),
    ('tychy', 'Tychy'),
    ('zabrze', 'Zabrze'),
    ('zory', 'Żory'),
    ('bedzinski', 'będziński'),
    ('bielski', 'bielski'),
    ('bierunsko-ledzinski', 'bieruńsko-lędziński'),
    ('cieszynski', 'cieszyński'),
    ('czestochowski', 'częstochowski'),
    ('gliwicki', 'gliwicki'),
    ('klobucki', 'kłobucki'),
    ('lubliniecki', 'lubliniecki'),
    ('mikolowski', 'mikołowski'),
    ('myszkowski', 'myszkowski'),
    ('pszczynski', 'pszczyński'),
    ('raciborski', 'raciborski'),
    ('rybnicki', 'rybnicki'),
    ('tarnogorski', 'tarnogórski'),
    ('wodzislawski', 'wodzisławski'),
    ('zawiercianski', 'zawierciański'),
    ('zywiecki', 'żywiecki'),
    ('kielce', 'Kielce'),
    ('buski', 'buski'),
    ('jedrzejowski', 'jędrzejowski'),
    ('kazimierski', 'kazimierski'),
    ('kielecki', 'kielecki'),
    ('konecki', 'konecki'),
    ('opatowski', 'opatowski'),
    ('ostrowiecki', 'ostrowiecki'),
    ('pinczowski', 'pińczowski'),
    ('sandomierski', 'sandomierski'),
    ('skarzyski', 'skarżyski'),
    ('starachowicki', 'starachowicki'),
    ('staszowski', 'staszowski'),
    ('wloszczowski', 'włoszczowski'),
    ('olsztyn', 'Olsztyn'),
    ('elblag', 'Elbląg'),
    ('bartoszycki', 'bartoszycki'),
    ('braniewski', 'braniewski'),
    ('dzialdowski', 'działdowski'),
    ('elblaski', 'elbląski'),
    ('elcki', 'ełcki'),
    ('gizycki', 'giżycki'),
    ('goldapski', 'gołdapski'),
    ('ilawski', 'iławski'),
    ('ketrzynski', 'kętrzyński'),
    ('lidzbarski', 'lidzbarski'),
    ('mragowski', 'mrągowski'),
    ('nidzicki', 'nidzicki'),
    ('nowomiejski', 'nowomiejski'),
    ('olecki', 'olecki'),
    ('olsztynski', 'olsztyński'),
    ('ostrodzki', 'ostródzki'),
    ('piski', 'piski'),
    ('szczycienski', 'szczycieński'),
    ('wegorzewski', 'węgorzewski'),
    ('poznan', 'Poznań'),
    ('kalisz', 'Kalisz'),
    ('konin', 'Konin'),
    ('leszno', 'Leszno'),
    ('chodzieski', 'chodziejski'),
    ('czarnkowsko-trzcianecki', 'czarnkowsko-trzcianecki'),
    ('gnieznienski', 'gnieźnieński'),
    ('gostynski', 'gostyński'),
    ('grodziski', 'grodziski'),
    ('jarocinski', 'jarociński'),
    ('kaliski', 'kaliski'),
    ('kepinski', 'kępiński'),
    ('kolski', 'kolski'),
    ('koninski', 'koniński'),
    ('koscianski', 'kościański'),
    ('krotoszynski', 'krotoszyński'),
    ('leszczynski', 'leszczyński'),
    ('miedzychodzki', 'międzychodzki'),
    ('nowotomyski', 'nowotomyski'),
    ('obornicki', 'obornicki'),
    ('ostrowski', 'ostrowski'),
    ('ostrzeszowski', 'ostrzeszowski'),
    ('pilski', 'pilski'),
    ('pleszewski', 'pleszewski'),
    ('poznanski', 'poznański'),
    ('rawicki', 'rawicki'),
    ('slupecki', 'słupecki'),
    ('szamotulski', 'szamotulski'),
    ('sredzki', 'średzki'),
    ('sremski', 'śremski'),
    ('turecki', 'turecki'),
    ('wagrowiecki', 'wągrowiecki'),
    ('wolsztynski', 'wolsztyński'),
    ('wrzesinski', 'wrzesiński'),
    ('zlotowski', 'złotowski'),
    ('bialogardzki', 'białogardzki'),
    ('choszczenski', 'choszczeński'),
    ('drawski', 'drawski'),
    ('goleniowski', 'goleniowski'),
    ('gryficki', 'gryficki'),
    ('gryfinski', 'gryfiński'),
    ('kamienski', 'kamieński'),
    ('kolobrzeski', 'kołobrzeski'),
    ('koszalinski', 'koszaliński'),
    ('lobeski', 'łobeski'),
    ('mysliborski', 'myśliborski'),
    ('policki', 'policki'),
    ('pyrzycki', 'pyrzycki'),
    ('slawienski', 'sławieński'),
    ('stargardzki', 'stargardzki'),
    ('szczecinecki', 'szczecinecki'),
    ('swidwinski', 'świdwiński'),
    ('walecki', 'wałecki'),
)

########NEW FILE########
__FILENAME__ = pl_voivodeships
from django.utils.translation import ugettext_lazy as _

#: Polish voivodeship as in http://en.wikipedia.org/wiki/Poland#Administrative_division
VOIVODESHIP_CHOICES = (
    ('lower_silesia', _('Lower Silesian')),
    ('kuyavia-pomerania', _('Kuyavian-Pomeranian')),
    ('lublin', _('Lublin')),
    ('lubusz', _('Lubusz')),
    ('lodz', _('Lodz')),
    ('lesser_poland', _('Lesser Poland')),
    ('masovia', _('Masovian')),
    ('opole', _('Opole')),
    ('subcarpatia', _('Subcarpathian')),
    ('podlasie', _('Podlasie')),
    ('pomerania', _('Pomeranian')),
    ('silesia', _('Silesian')),
    ('swietokrzyskie', _('Swietokrzyskie')),
    ('warmia-masuria', _('Warmian-Masurian')),
    ('greater_poland', _('Greater Poland')),
    ('west_pomerania', _('West Pomeranian')),
)

########NEW FILE########
__FILENAME__ = forms
# -*- coding: utf-8 -*-


"""
django_localflavot_pt.forms
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Contains PT-specific Django form helpers.
"""


from __future__ import unicode_literals
from .pt_regions import REGION_CHOICES
from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import Field, RegexField, Select
from django.utils.encoding import smart_text
from django.utils.translation import ugettext_lazy as _
from re import compile as regex_compile, sub as regex_replace


CITIZEN_CARD_NUMBER_REGEX = regex_compile(r'^(\d{8})-?(\d[A-Z0-9]{2}\d)$')
PHONE_NUMBER_REGEX = regex_compile(r'^((00|\+)351)?\d{3,9}$')
SOCIAL_SECURITY_NUMBER_MULTIPLIERS = [29, 23, 19, 17, 13, 11, 7, 5, 3, 2]
SOCIAL_SECURITY_NUMBER_REGEX = regex_compile(r'^[12]\d{10}$')
ZIP_CODE_REGEX = regex_compile(r'^[1-9]\d{3}-\d{3}$')


class PTCitizenCardNumberField(Field):
    """
    A field which validates Portuguese Citizen Card numbers (locally CC - 'Cartão do Cidadão').

    - Citizen Card numbers have the format XXXXXXXXXYYX or XXXXXXXX-XYYX (where X is a digit and Y is an alphanumeric character).
    - Citizen Card numbers validate as per http://bit.ly/RP0BzW.
    - The input string may or may not have an hyphen separating the identity number from the document's check-digits.
    - This field does NOT validate old ID card numbers (locally BI - 'Bilhete de Identidade').
    """
    default_error_messages = {
        'badchecksum': _('The specified value is not a valid Citizen Card number.'),
        'invalid': _('Citizen Card numbers have the format XXXXXXXXXYYX or XXXXXXXX-XYYX (where X is a digit and Y is an alphanumeric character).'),
    }

    def clean(self, value):
        super(PTCitizenCardNumberField, self).clean(value)

        if value in EMPTY_VALUES:
            return ''

        match = CITIZEN_CARD_NUMBER_REGEX.match(value)

        if not match:
            raise ValidationError(self.error_messages['invalid'])

        number, checkdigits = match.groups()

        encoded = number + checkdigits
        decoded = [int(digit, 36) for digit in encoded]

        rectify = lambda value: value if value < 10 else value - 9
        compute = lambda index, value: value if index % 2 else rectify(2 * value)

        checksum = sum([compute(index, decoded_value)
                        for index, decoded_value in enumerate(decoded)])

        if not checksum % 10 == 0:
            raise ValidationError(self.error_messages['badchecksum'])

        return '{0}-{1}'.format(number, checkdigits)


class PTPhoneNumberField(Field):
    """
    A field which validates Portuguese phone numbers.

    - Phone numbers have at least 3 and at most 9 digits and may optionally be prefixed with '00351' or '+351'.
    - The input string is allowed to contain spaces (though they will be stripped).
    """
    default_error_messages = {
        'invalid': _('Phone numbers have at least 3 and at most 9 digits and may optionally be prefixed with \'00351\' or \'+351\'.'),
    }

    def clean(self, value):
        super(PTPhoneNumberField, self).clean(value)

        if value in EMPTY_VALUES:
            return ''

        value = regex_replace('(\.|\s)', '', smart_text(value))
        match = PHONE_NUMBER_REGEX.search(value)

        if not match:
            raise ValidationError(self.error_messages['invalid'])

        return '{0}'.format(value)


class PTRegionSelect(Select):
    """
    A select widget which uses a list of Portuguese regions as its choices.

    - Regions correspond to the Portuguese 'distritos' and 'regiões autónomas' as per ISO3166:2-PT.
    """
    def __init__(self, attrs=None):
        super(PTRegionSelect, self).__init__(attrs, choices=REGION_CHOICES)


class PTSocialSecurityNumberField(Field):
    """
    A field which validates Portuguese Social Security numbers (locally NISS - 'Número de Identificação na Segurança Social').

    - Social Security numbers must be in the format XYYYYYYYYYY (where X is either 1 or 2 and Y is any other digit).
    """
    default_error_messages = {
        'badchecksum': _('The specified number is not a valid Social Security number.'),
        'invalid': _('Social Security numbers must be in the format XYYYYYYYYYY (where X is either 1 or 2 and Y is any other digit).'),
    }

    def clean(self, value):
        super(PTSocialSecurityNumberField, self).clean(value)

        if value in EMPTY_VALUES:
            return ''

        match = SOCIAL_SECURITY_NUMBER_REGEX.search(value)

        if not match:
            raise ValidationError(self.error_messages['invalid'])

        digits = [int(digit) for digit in value]

        factors = list(zip(digits, SOCIAL_SECURITY_NUMBER_MULTIPLIERS))
        dotproduct = sum(p * q for p, q in factors)

        checksum = 9 - dotproduct % 10
        checkdigit = int(value[-1])

        if not checksum == checkdigit:
            raise ValidationError(self.error_messages['badchecksum'])

        return int(value)


class PTZipCodeField(RegexField):
    """
    A field which validates Portuguese zip codes.

    NOTE
    - Zip codes have the format XYYY-YYY (where X is a digit between 1 and 9 and Y is any other digit).
    """
    default_error_messages = {
        'invalid': _('Zip codes must be in the format XYYY-YYY (where X is a digit between 1 and 9 and Y is any other digit).'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(PTZipCodeField, self).__init__(ZIP_CODE_REGEX, max_length, min_length, *args, **kwargs)

########NEW FILE########
__FILENAME__ = pt_regions
# -*- coding: utf-8 -*-
from __future__ import unicode_literals
from django.utils.translation import ugettext_lazy as _

#: A tuple representing Portuguese regions (as per ISO3166:2-PT).
REGION_CHOICES = (
    ('01', _('Aveiro')),
    ('02', _('Beja')),
    ('03', _('Braga')),
    ('04', _('Bragança')),
    ('05', _('Castelo Branco')),
    ('06', _('Coimbra')),
    ('07', _('Évora')),
    ('08', _('Faro')),
    ('09', _('Guarda')),
    ('10', _('Leiria')),
    ('11', _('Lisboa')),
    ('12', _('Portalegre')),
    ('13', _('Porto')),
    ('14', _('Santarém')),
    ('15', _('Setúbal')),
    ('16', _('Viana do Castelo')),
    ('17', _('Vila Real')),
    ('18', _('Viseu')),
    ('20', _('Região Autónoma da Madeira')),
    ('30', _('Região Autónoma dos Açores'))
)

########NEW FILE########
__FILENAME__ = forms
"""
PY-specific Form helpers.
"""

from __future__ import absolute_import

from django.forms.fields import Select

from .py_department import DEPARTMENT_CHOICES, DEPARTMENT_ROMAN_CHOICES


class PyDepartmentSelect(Select):
    """
    A Select widget with a list of Paraguayan departments as choices.
    """
    def __init__(self, attrs=None):
        super(PyDepartmentSelect, self).__init__(attrs, choices=DEPARTMENT_CHOICES)


class PyNumberedDepartmentSelect(Select):
    """
    A Select widget with a roman numbered list of Paraguayan departments as choices.
    """
    def __init__(self, attrs=None):
        super(PyNumberedDepartmentSelect, self).__init__(attrs, choices=DEPARTMENT_ROMAN_CHOICES)

########NEW FILE########
__FILENAME__ = py_department
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

#: http://www.statoids.com/upy.html
DEPARTMENT_CHOICES = (
    ('AG', 'Alto Paraguay'),
    ('AA', 'Alto Paraná'),
    ('AM', 'Amambay'),
    ('AS', 'Asunción'),
    ('BQ', 'Boquerón'),
    ('CG', 'Caaguazú'),
    ('CZ', 'Caazapá'),
    ('CY', 'Canindeyú'),
    ('CE', 'Central'),
    ('CN', 'Concepción'),
    ('CR', 'Cordillera'),
    ('GU', 'Guairá'),
    ('IT', 'Itapúa'),
    ('MI', 'Misiones'),
    ('NE', 'Ñeembucú'),
    ('PG', 'Paraguarí'),
    ('PH', 'Pdte. Hayes'),
    ('SP', 'San Pedro'),
)

#: list of departments sorted by its roman number
DEPARTMENT_ROMAN_CHOICES = (
    ('CN', 'I Concepción'),
    ('SP', 'II San Pedro'),
    ('CR', 'III Cordillera'),
    ('GU', 'IV Guairá'),
    ('CG', 'V Caaguazú'),
    ('CZ', 'VI Caazapá'),
    ('IT', 'VII Itapúa'),
    ('MI', 'VIII Misiones'),
    ('PG', 'IX Paraguarí'),
    ('AA', 'X Alto Paraná'),
    ('CE', 'XI Central'),
    ('NE', 'XII Ñeembucú'),
    ('AM', 'XIII Amambay'),
    ('CY', 'XIV Canindeyú'),
    ('PH', 'XV Pdte. Hayes'),
    ('AG', 'XVI Alto Paraguay'),
    ('BQ', 'XVII Boquerón'),
    ('AS', 'XVIII Asunción'),
)

########NEW FILE########
__FILENAME__ = forms
# -*- coding: utf-8 -*-
"""
Romanian specific form helpers.
"""
from __future__ import absolute_import, unicode_literals

import datetime

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError, Field, RegexField, Select
from django.utils.translation import ugettext_lazy as _

from ..generic.forms import IBANFormField
from .ro_counties import COUNTIES_CHOICES


class ROCIFField(RegexField):
    """
    A Romanian fiscal identity code (CIF) field

    For CIF validation algorithm see http://www.validari.ro/cui.html
    """
    default_error_messages = {
        'invalid': _("Enter a valid CIF."),
    }

    def __init__(self, max_length=10, min_length=2, *args, **kwargs):
        super(ROCIFField, self).__init__(r'^(RO)?[0-9]{2,10}', max_length,
                                         min_length, *args, **kwargs)

    def clean(self, value):
        """
        CIF validation
        """
        value = super(ROCIFField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        # strip RO part
        if value[0:2] == 'RO':
            value = value[2:]
        key = '753217532'[::-1]
        value = value[::-1]
        key_iter = iter(key)
        checksum = 0
        for digit in value[1:]:
            checksum += int(digit) * int(next(key_iter))
        checksum = checksum * 10 % 11
        if checksum == 10:
            checksum = 0
        if checksum != int(value[0]):
            raise ValidationError(self.error_messages['invalid'])
        return value[::-1]


class ROCNPField(RegexField):
    """
    A Romanian personal identity code (CNP) field

    For CNP validation algorithm see http://www.validari.ro/cnp.html
    """
    default_error_messages = {
        'invalid': _("Enter a valid CNP."),
    }

    def __init__(self, max_length=13, min_length=13, *args, **kwargs):
        super(ROCNPField, self).__init__(r'^[1-9][0-9]{12}', max_length,
                                         min_length, *args, **kwargs)

    def clean(self, value):
        """
        CNP validations
        """
        value = super(ROCNPField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        # check birthdate digits
        try:
            datetime.date(int(value[1:3]), int(value[3:5]), int(value[5:7]))
        except ValueError:
            raise ValidationError(self.error_messages['invalid'])
        # checksum
        key = '279146358279'
        checksum = 0
        value_iter = iter(value)
        for digit in key:
            checksum += int(digit) * int(next(value_iter))
        checksum %= 11
        if checksum == 10:
            checksum = 1
        if checksum != int(value[12]):
            raise ValidationError(self.error_messages['invalid'])
        return value


class ROCountyField(Field):
    """
    A form field that validates its input is a Romanian county name or
    abbreviation. It normalizes the input to the standard vehicle registration
    abbreviation for the given county

    WARNING: This field will only accept names written with diacritics; consider
    using ROCountySelect if this behavior is unnaceptable for you

    Example:

        Argeş => valid
        Arges => invalid

    """
    default_error_messages = {
        'invalid': 'Enter a Romanian county code or name.',
    }

    def clean(self, value):
        super(ROCountyField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        try:
            value = value.strip().upper()
        except AttributeError:
            pass
        # search for county code
        for entry in COUNTIES_CHOICES:
            if value in entry:
                return value
        # search for county name
        normalized_CC = []
        for entry in COUNTIES_CHOICES:
            normalized_CC.append((entry[0], entry[1].upper()))
        for entry in normalized_CC:
            if entry[1] == value:
                return entry[0]
        raise ValidationError(self.error_messages['invalid'])


class ROCountySelect(Select):
    """
    A Select widget that uses a list of Romanian counties (judete) as its
    choices.
    """
    def __init__(self, attrs=None):
        super(ROCountySelect, self).__init__(attrs, choices=COUNTIES_CHOICES)


class ROIBANField(IBANFormField):
    """
    Romanian International Bank Account Number (IBAN) field

    .. versionchanged:: 1.1
        Validation error messages changed to the messages used in :class:`.IBANFormField`

    .. deprecated:: 1.1
        Use `IBANFormField` with `included_countries=('RO',)` option instead.
    """
    def __init__(self, *args, **kwargs):
        super(ROIBANField, self).__init__(use_nordea_extensions=False, include_countries=('RO',), **kwargs)


class ROPhoneNumberField(RegexField):
    """Romanian phone number field"""
    default_error_messages = {
        'invalid': _('Phone numbers must be in XXXX-XXXXXX format.'),
    }

    def __init__(self, max_length=20, min_length=10, *args, **kwargs):
        super(ROPhoneNumberField, self).__init__(r'^[0-9\-\(\)\s]{10,20}$',
                                                 max_length, min_length, *args, **kwargs)

    def clean(self, value):
        """
        Strips -, (, ) and spaces. Checks the final length.
        """
        value = super(ROPhoneNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        value = value.replace('-', '')
        value = value.replace('(', '')
        value = value.replace(')', '')
        value = value.replace(' ', '')
        if len(value) != 10:
            raise ValidationError(self.error_messages['invalid'])
        return value


class ROPostalCodeField(RegexField):
    """Romanian postal code field."""
    default_error_messages = {
        'invalid': _('Enter a valid postal code in the format XXXXXX'),
    }

    def __init__(self, max_length=6, min_length=6, *args, **kwargs):
        super(ROPostalCodeField, self).__init__(r'^[0-9][0-8][0-9]{4}$',
                                                max_length, min_length, *args, **kwargs)

########NEW FILE########
__FILENAME__ = ro_counties
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

#: A list of Romanian counties as `choices` in a formfield.
COUNTIES_CHOICES = (
    ('AB', 'Alba'),
    ('AR', 'Arad'),
    ('AG', 'Argeş'),
    ('BC', 'Bacău'),
    ('BH', 'Bihor'),
    ('BN', 'Bistriţa-Năsăud'),
    ('BT', 'Botoşani'),
    ('BV', 'Braşov'),
    ('BR', 'Brăila'),
    ('B', 'Bucureşti'),
    ('BZ', 'Buzău'),
    ('CS', 'Caraş-Severin'),
    ('CL', 'Călăraşi'),
    ('CJ', 'Cluj'),
    ('CT', 'Constanţa'),
    ('CV', 'Covasna'),
    ('DB', 'Dâmboviţa'),
    ('DJ', 'Dolj'),
    ('GL', 'Galaţi'),
    ('GR', 'Giurgiu'),
    ('GJ', 'Gorj'),
    ('HR', 'Harghita'),
    ('HD', 'Hunedoara'),
    ('IL', 'Ialomiţa'),
    ('IS', 'Iaşi'),
    ('IF', 'Ilfov'),
    ('MM', 'Maramureş'),
    ('MH', 'Mehedinţi'),
    ('MS', 'Mureş'),
    ('NT', 'Neamţ'),
    ('OT', 'Olt'),
    ('PH', 'Prahova'),
    ('SM', 'Satu Mare'),
    ('SJ', 'Sălaj'),
    ('SB', 'Sibiu'),
    ('SV', 'Suceava'),
    ('TR', 'Teleorman'),
    ('TM', 'Timiş'),
    ('TL', 'Tulcea'),
    ('VS', 'Vaslui'),
    ('VL', 'Vâlcea'),
    ('VN', 'Vrancea'),
)

########NEW FILE########
__FILENAME__ = forms
"""
Russian-specific forms helpers
"""
from __future__ import absolute_import, unicode_literals

import re

from django.forms.fields import RegexField, Select
from django.utils.translation import ugettext_lazy as _

from .ru_regions import RU_COUNTY_CHOICES, RU_REGIONS_CHOICES


phone_digits_re = re.compile(r'^(?:[78]-?)?(\d{3})[-\.]?(\d{3})[-\.]?(\d{4})$')


class RUCountySelect(Select):
    """
    A Select widget that uses a list of Russian Counties as its choices.
    """
    def __init__(self, attrs=None):
        super(RUCountySelect, self).__init__(attrs, choices=RU_COUNTY_CHOICES)


class RURegionSelect(Select):
    """
    A Select widget that uses a list of Russian Regions as its choices.
    """
    def __init__(self, attrs=None):
        super(RURegionSelect, self).__init__(attrs, choices=RU_REGIONS_CHOICES)


class RUPostalCodeField(RegexField):
    """
    Russian Postal code field.
    Format: XXXXXX, where X is any digit, and first digit is not zero.
    """
    default_error_messages = {
        'invalid': _('Enter a postal code in the format XXXXXX.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(RUPostalCodeField, self).__init__(r'^\d{6}$',
                                                max_length, min_length, *args, **kwargs)


class RUPassportNumberField(RegexField):
    """
    Russian internal passport number format:
    XXXX XXXXXX where X - any digit.
    """
    default_error_messages = {
        'invalid': _('Enter a passport number in the format XXXX XXXXXX.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(RUPassportNumberField, self).__init__(r'^\d{4} \d{6}$',
                                                    max_length, min_length, *args, **kwargs)


class RUAlienPassportNumberField(RegexField):
    """
    Russian alien's passport number format:
    XX XXXXXXX where X - any digit.
    """
    default_error_messages = {
        'invalid': _('Enter a passport number in the format XX XXXXXXX.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(RUAlienPassportNumberField, self).__init__(r'^\d{2} \d{7}$',
                                                         max_length, min_length, *args, **kwargs)

########NEW FILE########
__FILENAME__ = ru_regions
# -*- encoding: utf-8 -*-
from django.utils.translation import ugettext_lazy as _

#: http://ru.wikipedia.org/wiki/Коды_субъектов_Российской_Федерации
RU_COUNTY_CHOICES = (
    ("Central Federal County", _("Central Federal County")),
    ("South Federal County", _("South Federal County")),
    ("North-West Federal County", _("North-West Federal County")),
    ("Far-East Federal County", _("Far-East Federal County")),
    ("Siberian Federal County", _("Siberian Federal County")),
    ("Ural Federal County", _("Ural Federal County")),
    ("Privolzhsky Federal County", _("Privolzhsky Federal County")),
    ("North-Caucasian Federal County", _("North-Caucasian Federal County"))
)

#: http://ru.wikipedia.org/wiki/Федеральные_округа_Российской_Федерации
RU_REGIONS_CHOICES = (
    ("77", _("Moskva")),
    ("78", _("Saint-Peterburg")),
    ("50", _("Moskovskaya oblast'")),
    ("01", _("Adygeya, Respublika")),
    ("02", _("Bashkortostan, Respublika")),
    ("03", _("Buryatia, Respublika")),
    ("04", _("Altay, Respublika")),
    ("05", _("Dagestan, Respublika")),
    ("06", _("Ingushskaya Respublika")),
    ("07", _("Kabardino-Balkarskaya Respublika")),
    ("08", _("Kalmykia, Respublika")),
    ("09", _("Karachaevo-Cherkesskaya Respublika")),
    ("10", _("Karelia, Respublika")),
    ("11", _("Komi, Respublika")),
    ("12", _("Mariy Ehl, Respublika")),
    ("13", _("Mordovia, Respublika")),
    ("14", _("Sakha, Respublika (Yakutiya)")),
    ("15", _("Severnaya Osetia, Respublika (Alania)")),
    ("16", _("Tatarstan, Respublika")),
    ("17", _("Tyva, Respublika (Tuva)")),
    ("18", _("Udmurtskaya Respublika")),
    ("19", _("Khakassiya, Respublika")),
    ("95", _("Chechenskaya Respublika")),
    ("21", _("Chuvashskaya Respublika")),
    ("22", _("Altayskiy Kray")),
    ("80", _("Zabaykalskiy Kray")),
    ("82", _("Kamchatskiy Kray")),
    ("23", _("Krasnodarskiy Kray")),
    ("24", _("Krasnoyarskiy Kray")),
    ("81", _("Permskiy Kray")),
    ("25", _("Primorskiy Kray")),
    ("26", _("Stavropol'siyy Kray")),
    ("27", _("Khabarovskiy Kray")),
    ("28", _("Amurskaya oblast'")),
    ("29", _("Arkhangel'skaya oblast'")),
    ("30", _("Astrakhanskaya oblast'")),
    ("31", _("Belgorodskaya oblast'")),
    ("32", _("Bryanskaya oblast'")),
    ("33", _("Vladimirskaya oblast'")),
    ("34", _("Volgogradskaya oblast'")),
    ("35", _("Vologodskaya oblast'")),
    ("36", _("Voronezhskaya oblast'")),
    ("37", _("Ivanovskaya oblast'")),
    ("38", _("Irkutskaya oblast'")),
    ("39", _("Kaliningradskaya oblast'")),
    ("40", _("Kaluzhskaya oblast'")),
    ("42", _("Kemerovskaya oblast'")),
    ("43", _("Kirovskaya oblast'")),
    ("44", _("Kostromskaya oblast'")),
    ("45", _("Kurganskaya oblast'")),
    ("46", _("Kurskaya oblast'")),
    ("47", _("Leningradskaya oblast'")),
    ("48", _("Lipeckaya oblast'")),
    ("49", _("Magadanskaya oblast'")),
    ("51", _("Murmanskaya oblast'")),
    ("52", _("Nizhegorodskaja oblast'")),
    ("53", _("Novgorodskaya oblast'")),
    ("54", _("Novosibirskaya oblast'")),
    ("55", _("Omskaya oblast'")),
    ("56", _("Orenburgskaya oblast'")),
    ("57", _("Orlovskaya oblast'")),
    ("58", _("Penzenskaya oblast'")),
    ("60", _("Pskovskaya oblast'")),
    ("61", _("Rostovskaya oblast'")),
    ("62", _("Rjazanskaya oblast'")),
    ("63", _("Samarskaya oblast'")),
    ("64", _("Saratovskaya oblast'")),
    ("65", _("Sakhalinskaya oblast'")),
    ("66", _("Sverdlovskaya oblast'")),
    ("67", _("Smolenskaya oblast'")),
    ("68", _("Tambovskaya oblast'")),
    ("69", _("Tverskaya oblast'")),
    ("70", _("Tomskaya oblast'")),
    ("71", _("Tul'skaya oblast'")),
    ("72", _("Tyumenskaya oblast'")),
    ("73", _("Ul'ianovskaya oblast'")),
    ("74", _("Chelyabinskaya oblast'")),
    ("76", _("Yaroslavskaya oblast'")),
    ("79", _("Evreyskaya avtonomnaja oblast'")),
    ("83", _("Neneckiy autonomnyy okrug")),
    ("86", _("Khanty-Mansiyskiy avtonomnyy okrug - Yugra")),
    ("87", _("Chukotskiy avtonomnyy okrug")),
    ("89", _("Yamalo-Neneckiy avtonomnyy okrug"))
)

########NEW FILE########
__FILENAME__ = forms
# -*- coding: utf-8 -*-
"""
Swedish specific Form helpers
"""
from __future__ import absolute_import, unicode_literals

import re

from django import forms
from django.utils.translation import ugettext_lazy as _
from django.core.validators import EMPTY_VALUES
from .se_counties import COUNTY_CHOICES
from .utils import (id_number_checksum, validate_id_birthday,
                    format_personal_id_number, valid_organisation, format_organisation_number)


__all__ = ('SECountySelect', 'SEOrganisationNumberField',
           'SEPersonalIdentityNumberField', 'SEPostalCodeField')

SWEDISH_ID_NUMBER = re.compile(r'^(?P<century>\d{2})?(?P<year>\d{2})(?P<month>\d{2})(?P<day>\d{2})(?P<sign>[\-+])?(?P<serial>\d{3})(?P<checksum>\d)$')
SE_POSTAL_CODE = re.compile(r'^[1-9]\d{2} ?\d{2}$')


class SECountySelect(forms.Select):
    """
    A Select form widget that uses a list of the Swedish counties (län) as its
    choices.

    The cleaned value is the official county code -- see
    http://en.wikipedia.org/wiki/Counties_of_Sweden for a list.
    """

    def __init__(self, attrs=None):
        super(SECountySelect, self).__init__(attrs=attrs,
                                             choices=COUNTY_CHOICES)


class SEOrganisationNumberField(forms.CharField):
    """
    A form field that validates input as a Swedish organisation number
    (organisationsnummer).

    It accepts the same input as SEPersonalIdentityField (for sole
    proprietorships (enskild firma). However, co-ordination numbers are not
    accepted.

    It also accepts ordinary Swedish organisation numbers with the format
    NNNNNNNNNN.

    The return value will be YYYYMMDDXXXX for sole proprietors, and NNNNNNNNNN
    for other organisations.
    """

    default_error_messages = {
        'invalid': _('Enter a valid Swedish organisation number.'),
    }

    def clean(self, value):
        value = super(SEOrganisationNumberField, self).clean(value)

        if value in EMPTY_VALUES:
            return ''

        match = SWEDISH_ID_NUMBER.match(value)
        if not match:
            raise forms.ValidationError(self.error_messages['invalid'])

        gd = match.groupdict()

        # Compare the calculated value with the checksum
        if id_number_checksum(gd) != int(gd['checksum']):
            raise forms.ValidationError(self.error_messages['invalid'])

        # First: check if this is a real organisation_number
        if valid_organisation(gd):
            return format_organisation_number(gd)

        # Is this a single properitor (enskild firma)?
        try:
            birth_day = validate_id_birthday(gd, False)
            return format_personal_id_number(birth_day, gd)
        except ValueError:
            raise forms.ValidationError(self.error_messages['invalid'])


class SEPersonalIdentityNumberField(forms.CharField):
    """
    A form field that validates input as a Swedish personal identity number
    (personnummer).

    The correct formats are YYYYMMDD-XXXX, YYYYMMDDXXXX, YYMMDD-XXXX,
    YYMMDDXXXX and YYMMDD+XXXX.

    A + indicates that the person is older than 100 years, which will be taken
    into consideration when the date is validated.

    The checksum will be calculated and checked. The birth date is checked to
    be a valid date.

    By default, co-ordination numbers (samordningsnummer) will be accepted. To
    only allow real personal identity numbers, pass the keyword argument
    coordination_number=False to the constructor.

    The cleaned value will always have the format YYYYMMDDXXXX.
    """

    def __init__(self, coordination_number=True, *args, **kwargs):
        self.coordination_number = coordination_number
        super(SEPersonalIdentityNumberField, self).__init__(*args, **kwargs)

    default_error_messages = {
        'invalid': _('Enter a valid Swedish personal identity number.'),
        'coordination_number': _('Co-ordination numbers are not allowed.'),
    }

    def clean(self, value):
        value = super(SEPersonalIdentityNumberField, self).clean(value)

        if value in EMPTY_VALUES:
            return ''

        match = SWEDISH_ID_NUMBER.match(value)
        if match is None:
            raise forms.ValidationError(self.error_messages['invalid'])

        gd = match.groupdict()

        # compare the calculated value with the checksum
        if id_number_checksum(gd) != int(gd['checksum']):
            raise forms.ValidationError(self.error_messages['invalid'])

        # check for valid birthday
        try:
            birth_day = validate_id_birthday(gd)
        except ValueError:
            raise forms.ValidationError(self.error_messages['invalid'])

        # make sure that co-ordination numbers do not pass if not allowed
        if not self.coordination_number and int(gd['day']) > 60:
            raise forms.ValidationError(self.error_messages['coordination_number'])

        return format_personal_id_number(birth_day, gd)


class SEPostalCodeField(forms.RegexField):
    """
    A form field that validates input as a Swedish postal code (postnummer).
    Valid codes consist of five digits (XXXXX). The number can optionally be
    formatted with a space after the third digit (XXX XX).

    The cleaned value will never contain the space.
    """

    default_error_messages = {
        'invalid': _('Enter a Swedish postal code in the format XXXXX.'),
    }

    def __init__(self, *args, **kwargs):
        super(SEPostalCodeField, self).__init__(SE_POSTAL_CODE, *args, **kwargs)

    def clean(self, value):
        return super(SEPostalCodeField, self).clean(value).replace(' ', '')

########NEW FILE########
__FILENAME__ = se_counties
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.utils.translation import ugettext_lazy as _

#: An alphabetical list of Swedish counties, sorted by codes.
#: http://en.wikipedia.org/wiki/Counties_of_Sweden
COUNTY_CHOICES = (
    ('AB', _('Stockholm')),
    ('AC', _('Västerbotten')),
    ('BD', _('Norrbotten')),
    ('C', _('Uppsala')),
    ('D', _('Södermanland')),
    ('E', _('Östergötland')),
    ('F', _('Jönköping')),
    ('G', _('Kronoberg')),
    ('H', _('Kalmar')),
    ('I', _('Gotland')),
    ('K', _('Blekinge')),
    ('M', _('Skåne')),
    ('N', _('Halland')),
    ('O', _('Västra Götaland')),
    ('S', _('Värmland')),
    ('T', _('Örebro')),
    ('U', _('Västmanland')),
    ('W', _('Dalarna')),
    ('X', _('Gävleborg')),
    ('Y', _('Västernorrland')),
    ('Z', _('Jämtland')),
)

########NEW FILE########
__FILENAME__ = utils
import datetime
from django.utils import six


def id_number_checksum(gd):
    """
    Calculates a Swedish ID number checksum, using the
    "Luhn"-algoritm
    """
    n = s = 0
    for c in (gd['year'] + gd['month'] + gd['day'] + gd['serial']):
        tmp = ((n % 2) and 1 or 2) * int(c)

        if tmp > 9:
            tmp = sum([int(i) for i in str(tmp)])

        s += tmp
        n += 1

    if (s % 10) == 0:
        return 0

    return (((s // 10) + 1) * 10) - s


def validate_id_birthday(gd, fix_coordination_number_day=True):
    """
    Validates the birth_day and returns the datetime.date object for
    the birth_day.

    If the date is an invalid birth day, a ValueError will be raised.
    """

    today = datetime.date.today()

    day = int(gd['day'])
    if fix_coordination_number_day and day > 60:
        day -= 60

    if gd['century'] is None:

        # The century was not specified, and need to be calculated from todays date
        year = int(today.strftime('%Y')) - int(today.strftime('%y')) + int(gd['year'])

        if ('%s%s%02d' % (gd['year'], gd['month'], day)) > today.strftime('%y%m%d'):
            year -= 100

        # If the person is older than 100 years
        if gd['sign'] == '+':
            year -= 100
    else:
        year = int(gd['century'] + gd['year'])

        # Make sure the year is valid
        # There are no swedish personal identity numbers where year < 1800
        if year < 1800:
            raise ValueError

    # ValueError will be raise for invalid dates
    birth_day = datetime.date(year, int(gd['month']), day)

    # birth_day must not be in the future
    if birth_day > today:
        raise ValueError

    return birth_day


def format_personal_id_number(birth_day, gd):
    # birth_day.strftime cannot be used, since it does not support dates < 1900
    return six.text_type(str(birth_day.year) + gd['month'] + gd['day'] + gd['serial'] + gd['checksum'])


def format_organisation_number(gd):
    if gd['century'] is None:
        century = ''
    else:
        century = gd['century']

    return six.text_type(century + gd['year'] + gd['month'] + gd['day'] + gd['serial'] + gd['checksum'])


def valid_organisation(gd):
    return gd['century'] in (None, 16) and \
        int(gd['month']) >= 20 and \
        gd['sign'] in (None, '-') and \
        gd['year'][0] in ('2', '5', '7', '8', '9')  # group identifier

########NEW FILE########
__FILENAME__ = forms
"""
Slovenian specific form helpers.
"""

from __future__ import absolute_import, unicode_literals

import datetime
import re

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import CharField, Select, ChoiceField
from django.utils.translation import ugettext_lazy as _

from .si_postalcodes import SI_POSTALCODES_CHOICES


class SIEMSOField(CharField):
    """
    A form for validating Slovenian personal identification number.

    Additionally stores gender, nationality and birthday to self.info dictionary.
    """

    default_error_messages = {
        'invalid': _('This field should contain exactly 13 digits.'),
        'date': _('The first 7 digits of the EMSO must represent a valid past date.'),
        'checksum': _('The EMSO is not valid.'),
    }
    emso_regex = re.compile('^(\d{2})(\d{2})(\d{3})(\d{2})(\d{3})(\d)$')

    def clean(self, value):
        super(SIEMSOField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        value = value.strip()

        m = self.emso_regex.match(value)
        if m is None:
            raise ValidationError(self.error_messages['invalid'])

        # Validate EMSO
        s = 0
        int_values = [int(i) for i in value]
        for a, b in zip(int_values, list(range(7, 1, -1)) * 2):
            s += a * b
        chk = s % 11
        if chk == 0:
            K = 0
        else:
            K = 11 - chk

        if K == 10 or int_values[-1] != K:
            raise ValidationError(self.error_messages['checksum'])

        # Extract extra info in the identification number
        day, month, year, nationality, gender, chksum = [int(i) for i in m.groups()]

        if year < 890:
            year += 2000
        else:
            year += 1000

        # validate birthday
        try:
            birthday = datetime.date(year, month, day)
        except ValueError:
            raise ValidationError(self.error_messages['date'])
        if datetime.date.today() < birthday:
            raise ValidationError(self.error_messages['date'])

        self.info = {
            'gender': gender < 500 and 'male' or 'female',
            'birthdate': birthday,
            'nationality': nationality,
        }
        return value


class SITaxNumberField(CharField):
    """
    Slovenian tax number field.

    Valid input is SIXXXXXXXX or XXXXXXXX where X is a number.
    """

    default_error_messages = {
        'invalid': _('Enter a valid tax number in form SIXXXXXXXX'),
    }
    sitax_regex = re.compile('^(?:SI)?([1-9]\d{7})$')

    def clean(self, value):
        super(SITaxNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        value = value.strip()

        m = self.sitax_regex.match(value)
        if m is None:
            raise ValidationError(self.error_messages['invalid'])
        value = m.groups()[0]

        # Validate Tax number
        s = 0
        int_values = [int(i) for i in value]
        for a, b in zip(int_values, range(8, 1, -1)):
            s += a * b
        chk = 11 - (s % 11)
        if chk == 10:
            chk = 0

        if int_values[-1] != chk:
            raise ValidationError(self.error_messages['invalid'])

        return value


class SIPostalCodeField(ChoiceField):
    """
    Slovenian post codes field.
    """
    def __init__(self, *args, **kwargs):
        kwargs.setdefault('choices', SI_POSTALCODES_CHOICES)
        super(SIPostalCodeField, self).__init__(*args, **kwargs)


class SIPostalCodeSelect(Select):
    """
    A Select widget that uses Slovenian postal codes as its choices.
    """
    def __init__(self, attrs=None):
        super(SIPostalCodeSelect, self).__init__(attrs,
                                                 choices=SI_POSTALCODES_CHOICES)


class SIPhoneNumberField(CharField):
    """
    Slovenian phone number field.

    Phone number must contain at least local area code.
    Country code can be present.

    Examples:

    * +38640XXXXXX
    * 0038640XXXXXX
    * 040XXXXXX
    * 01XXXXXX
    * 0590XXXXX

    """

    default_error_messages = {
        'invalid': _('Enter phone number in form +386XXXXXXXX or 0XXXXXXXX.'),
    }
    phone_regex = re.compile('^(?:(?:00|\+)386|0)(\d{7,8})$')

    def clean(self, value):
        super(SIPhoneNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''

        value = value.replace(' ', '').replace('-', '').replace('/', '')
        m = self.phone_regex.match(value)

        if m is None:
            raise ValidationError(self.error_messages['invalid'])
        return m.groups()[0]

########NEW FILE########
__FILENAME__ = si_postalcodes
# *-* coding: utf-8 *-*
from __future__ import unicode_literals

#: A list of Slovenian postal codes
SI_POSTALCODES = [
    (1000, 'Ljubljana'),
    (1215, 'Medvode'),
    (1216, 'Smlednik'),
    (1217, 'Vodice'),
    (1218, 'Komenda'),
    (1219, 'Laze v Tuhinju'),
    (1221, 'Motnik'),
    (1222, 'Trojane'),
    (1223, 'Blagovica'),
    (1225, 'Lukovica'),
    (1230, 'Dom\u017eale'),
    (1233, 'Dob'),
    (1234, 'Menge\u0161'),
    (1235, 'Radomlje'),
    (1236, 'Trzin'),
    (1241, 'Kamnik'),
    (1242, 'Stahovica'),
    (1251, 'Morav\u010de'),
    (1252, 'Va\u010de'),
    (1262, 'Dol pri Ljubljani'),
    (1270, 'Litija'),
    (1272, 'Pol\u0161nik'),
    (1273, 'Dole pri Litiji'),
    (1274, 'Gabrovka'),
    (1275, '\u0160martno pri Litiji'),
    (1276, 'Primskovo'),
    (1281, 'Kresnice'),
    (1282, 'Sava'),
    (1290, 'Grosuplje'),
    (1291, '\u0160kofljica'),
    (1292, 'Ig'),
    (1293, '\u0160marje - Sap'),
    (1294, 'Vi\u0161nja Gora'),
    (1295, 'Ivan\u010dna Gorica'),
    (1296, '\u0160entvid pri Sti\u010dni'),
    (1301, 'Krka'),
    (1303, 'Zagradec'),
    (1310, 'Ribnica'),
    (1311, 'Turjak'),
    (1312, 'Videm - Dobrepolje'),
    (1313, 'Struge'),
    (1314, 'Rob'),
    (1315, 'Velike La\u0161\u010de'),
    (1316, 'Ortnek'),
    (1317, 'Sodra\u017eica'),
    (1318, 'Lo\u0161ki Potok'),
    (1319, 'Draga'),
    (1330, 'Ko\u010devje'),
    (1331, 'Dolenja vas'),
    (1332, 'Stara Cerkev'),
    (1336, 'Kostel'),
    (1337, 'Osilnica'),
    (1338, 'Ko\u010devska Reka'),
    (1351, 'Brezovica pri Ljubljani'),
    (1352, 'Preserje'),
    (1353, 'Borovnica'),
    (1354, 'Horjul'),
    (1355, 'Polhov Gradec'),
    (1356, 'Dobrova'),
    (1357, 'Notranje Gorice'),
    (1358, 'Log pri Brezovici'),
    (1360, 'Vrhnika'),
    (1370, 'Logatec'),
    (1372, 'Hotedr\u0161ica'),
    (1373, 'Rovte'),
    (1380, 'Cerknica'),
    (1381, 'Rakek'),
    (1382, 'Begunje pri Cerknici'),
    (1384, 'Grahovo'),
    (1385, 'Nova vas'),
    (1386, 'Stari trg pri Lo\u017eu'),
    (1410, 'Zagorje ob Savi'),
    (1411, 'Izlake'),
    (1412, 'Kisovec'),
    (1413, '\u010cem\u0161enik'),
    (1414, 'Podkum'),
    (1420, 'Trbovlje'),
    (1423, 'Dobovec'),
    (1430, 'Hrastnik'),
    (1431, 'Dol pri Hrastniku'),
    (1432, 'Zidani Most'),
    (1433, 'Rade\u010de'),
    (1434, 'Loka pri Zidanem Mostu'),
    (2000, 'Maribor'),
    (2201, 'Zgornja Kungota'),
    (2204, 'Miklav\u017e na Dravskem polju'),
    (2205, 'Star\u0161e'),
    (2206, 'Marjeta na Dravskem polju'),
    (2208, 'Pohorje'),
    (2211, 'Pesnica pri Mariboru'),
    (2212, '\u0160entilj v Slovenskih goricah'),
    (2213, 'Zgornja Velka'),
    (2214, 'Sladki vrh'),
    (2215, 'Cer\u0161ak'),
    (2221, 'Jarenina'),
    (2222, 'Jakobski Dol'),
    (2223, 'Jurovski Dol'),
    (2229, 'Male\u010dnik'),
    (2230, 'Lenart v Slovenskih goricah'),
    (2231, 'Pernica'),
    (2232, 'Voli\u010dina'),
    (2233, 'Sveta Ana v Slovenskih goricah'),
    (2234, 'Benedikt'),
    (2235, 'Sveta Trojica v Slovenskih goricah'),
    (2236, 'Cerkvenjak'),
    (2241, 'Spodnji Duplek'),
    (2242, 'Zgornja Korena'),
    (2250, 'Ptuj'),
    (2252, 'Dornava'),
    (2253, 'Destrnik'),
    (2254, 'Trnovska vas'),
    (2255, 'Vitomarci'),
    (2256, 'Jur\u0161inci'),
    (2257, 'Polen\u0161ak'),
    (2258, 'Sveti Toma\u017e'),
    (2259, 'Ivanjkovci'),
    (2270, 'Ormo\u017e'),
    (2272, 'Gori\u0161nica'),
    (2273, 'Podgorci'),
    (2274, 'Velika Nedelja'),
    (2275, 'Miklav\u017e pri Ormo\u017eu'),
    (2276, 'Kog'),
    (2277, 'Sredi\u0161\u010de ob Dravi'),
    (2281, 'Markovci'),
    (2282, 'Cirkulane'),
    (2283, 'Zavr\u010d'),
    (2284, 'Videm pri Ptuju'),
    (2285, 'Zgornji Leskovec'),
    (2286, 'Podlehnik'),
    (2287, '\u017detale'),
    (2288, 'Hajdina'),
    (2289, 'Stoperce'),
    (2310, 'Slovenska Bistrica'),
    (2311, 'Ho\u010de'),
    (2312, 'Orehova vas'),
    (2313, 'Fram'),
    (2314, 'Zgornja Polskava'),
    (2315, '\u0160martno na Pohorju'),
    (2316, 'Zgornja Lo\u017enica'),
    (2317, 'Oplotnica'),
    (2318, 'Laporje'),
    (2319, 'Polj\u010dane'),
    (2321, 'Makole'),
    (2322, 'Maj\u0161perk'),
    (2323, 'Ptujska Gora'),
    (2324, 'Lovrenc na Dravskem polju'),
    (2325, 'Kidri\u010devo'),
    (2326, 'Cirkovce'),
    (2327, 'Ra\u010de'),
    (2331, 'Pragersko'),
    (2341, 'Limbu\u0161'),
    (2342, 'Ru\u0161e'),
    (2343, 'Fala'),
    (2344, 'Lovrenc na Pohorju'),
    (2345, 'Bistrica ob Dravi'),
    (2351, 'Kamnica'),
    (2352, 'Selnica ob Dravi'),
    (2353, 'Sv. Duh na Ostrem Vrhu'),
    (2354, 'Bresternica'),
    (2360, 'Radlje ob Dravi'),
    (2361, 'O\u017ebalt'),
    (2362, 'Kapla'),
    (2363, 'Podvelka'),
    (2364, 'Ribnica na Pohorju'),
    (2365, 'Vuhred'),
    (2366, 'Muta'),
    (2367, 'Vuzenica'),
    (2370, 'Dravograd'),
    (2371, 'Trbonje'),
    (2372, 'Libeli\u010de'),
    (2373, '\u0160entjan\u017e pri Dravogradu'),
    (2380, 'Slovenj Gradec'),
    (2381, 'Podgorje pri Slovenj Gradcu'),
    (2382, 'Mislinja'),
    (2383, '\u0160martno pri Slovenj Gradcu'),
    (2390, 'Ravne na Koro\u0161kem'),
    (2391, 'Prevalje'),
    (2392, 'Me\u017eica'),
    (2393, '\u010crna na Koro\u0161kem'),
    (2394, 'Kotlje'),
    (3000, 'Celje'),
    (3201, '\u0160martno v Ro\u017eni dolini'),
    (3202, 'Ljube\u010dna'),
    (3203, 'Nova Cerkev'),
    (3204, 'Dobrna'),
    (3205, 'Vitanje'),
    (3206, 'Stranice'),
    (3210, 'Slovenske Konjice'),
    (3211, '\u0160kofja vas'),
    (3212, 'Vojnik'),
    (3213, 'Frankolovo'),
    (3214, 'Zre\u010de'),
    (3215, 'Lo\u010de'),
    (3220, '\u0160tore'),
    (3221, 'Teharje'),
    (3222, 'Dramlje'),
    (3223, 'Loka pri \u017dusmu'),
    (3224, 'Dobje pri Planini'),
    (3225, 'Planina pri Sevnici'),
    (3230, '\u0160entjur'),
    (3231, 'Grobelno'),
    (3232, 'Ponikva'),
    (3233, 'Kalobje'),
    (3240, '\u0160marje pri Jel\u0161ah'),
    (3241, 'Podplat'),
    (3250, 'Roga\u0161ka Slatina'),
    (3252, 'Rogatec'),
    (3253, 'Pristava pri Mestinju'),
    (3254, 'Pod\u010detrtek'),
    (3255, 'Bu\u010de'),
    (3256, 'Bistrica ob Sotli'),
    (3257, 'Podsreda'),
    (3260, 'Kozje'),
    (3261, 'Lesi\u010dno'),
    (3262, 'Prevorje'),
    (3263, 'Gorica pri Slivnici'),
    (3264, 'Sveti \u0160tefan'),
    (3270, 'La\u0161ko'),
    (3271, '\u0160entrupert'),
    (3272, 'Rimske Toplice'),
    (3273, 'Jurklo\u0161ter'),
    (3301, 'Petrov\u010de'),
    (3302, 'Gri\u017ee'),
    (3303, 'Gomilsko'),
    (3304, 'Tabor'),
    (3305, 'Vransko'),
    (3310, '\u017dalec'),
    (3311, '\u0160empeter v Savinjski dolini'),
    (3312, 'Prebold'),
    (3313, 'Polzela'),
    (3314, 'Braslov\u010de'),
    (3320, 'Velenje - dostava'),
    (3322, 'Velenje - po\u0161tni predali'),
    (3325, '\u0160o\u0161tanj'),
    (3326, 'Topol\u0161ica'),
    (3327, '\u0160martno ob Paki'),
    (3330, 'Mozirje'),
    (3331, 'Nazarje'),
    (3332, 'Re\u010dica ob Savinji'),
    (3333, 'Ljubno ob Savinji'),
    (3334, 'Lu\u010de'),
    (3335, 'Sol\u010dava'),
    (3341, '\u0160martno ob Dreti'),
    (3342, 'Gornji Grad'),
    (4000, 'Kranj'),
    (4201, 'Zgornja Besnica'),
    (4202, 'Naklo'),
    (4203, 'Duplje'),
    (4204, 'Golnik'),
    (4205, 'Preddvor'),
    (4206, 'Zgornje Jezersko'),
    (4207, 'Cerklje na Gorenjskem'),
    (4208, '\u0160en\u010dur'),
    (4209, '\u017dabnica'),
    (4210, 'Brnik - aerodrom'),
    (4211, 'Mav\u010di\u010de'),
    (4212, 'Visoko'),
    (4220, '\u0160kofja Loka'),
    (4223, 'Poljane nad \u0160kofjo Loko'),
    (4224, 'Gorenja vas'),
    (4225, 'Sovodenj'),
    (4226, '\u017diri'),
    (4227, 'Selca'),
    (4228, '\u017delezniki'),
    (4229, 'Sorica'),
    (4240, 'Radovljica'),
    (4243, 'Brezje'),
    (4244, 'Podnart'),
    (4245, 'Kropa'),
    (4246, 'Kamna Gorica'),
    (4247, 'Zgornje Gorje'),
    (4248, 'Lesce'),
    (4260, 'Bled'),
    (4263, 'Bohinjska Bela'),
    (4264, 'Bohinjska Bistrica'),
    (4265, 'Bohinjsko jezero'),
    (4267, 'Srednja vas v Bohinju'),
    (4270, 'Jesenice'),
    (4273, 'Blejska Dobrava'),
    (4274, '\u017dirovnica'),
    (4275, 'Begunje na Gorenjskem'),
    (4276, 'Hru\u0161ica'),
    (4280, 'Kranjska Gora'),
    (4281, 'Mojstrana'),
    (4282, 'Gozd Martuljek'),
    (4283, 'Rate\u010de - Planica'),
    (4290, 'Tr\u017ei\u010d'),
    (4294, 'Kri\u017ee'),
    (5000, 'Nova Gorica'),
    (5210, 'Deskle'),
    (5211, 'Kojsko'),
    (5212, 'Dobrovo v Brdih'),
    (5213, 'Kanal'),
    (5214, 'Kal nad Kanalom'),
    (5215, 'Ro\u010dinj'),
    (5216, 'Most na So\u010di'),
    (5220, 'Tolmin'),
    (5222, 'Kobarid'),
    (5223, 'Breginj'),
    (5224, 'Srpenica'),
    (5230, 'Bovec'),
    (5231, 'Log pod Mangartom'),
    (5232, 'So\u010da'),
    (5242, 'Grahovo ob Ba\u010di'),
    (5243, 'Podbrdo'),
    (5250, 'Solkan'),
    (5251, 'Grgar'),
    (5252, 'Trnovo pri Gorici'),
    (5253, '\u010cepovan'),
    (5261, '\u0160empas'),
    (5262, '\u010crni\u010de'),
    (5263, 'Dobravlje'),
    (5270, 'Ajdov\u0161\u010dina'),
    (5271, 'Vipava'),
    (5272, 'Podnanos'),
    (5273, 'Col'),
    (5274, '\u010crni Vrh nad Idrijo'),
    (5275, 'Godovi\u010d'),
    (5280, 'Idrija'),
    (5281, 'Spodnja Idrija'),
    (5282, 'Cerkno'),
    (5283, 'Slap ob Idrijci'),
    (5290, '\u0160empeter pri Gorici'),
    (5291, 'Miren'),
    (5292, 'Ren\u010de'),
    (5293, 'Vol\u010dja Draga'),
    (5294, 'Dornberk'),
    (5295, 'Branik'),
    (5296, 'Kostanjevica na Krasu'),
    (5297, 'Prva\u010dina'),
    (6000, 'Koper'),
    (6210, 'Se\u017eana'),
    (6215, 'Diva\u010da'),
    (6216, 'Podgorje'),
    (6217, 'Vremski Britof'),
    (6219, 'Lokev'),
    (6221, 'Dutovlje'),
    (6222, '\u0160tanjel'),
    (6223, 'Komen'),
    (6224, 'Seno\u017ee\u010de'),
    (6225, 'Hru\u0161evje'),
    (6230, 'Postojna'),
    (6232, 'Planina'),
    (6240, 'Kozina'),
    (6242, 'Materija'),
    (6243, 'Obrov'),
    (6244, 'Podgrad'),
    (6250, 'Ilirska Bistrica'),
    (6251, 'Ilirska Bistrica - Trnovo'),
    (6253, 'Kne\u017eak'),
    (6254, 'Jel\u0161ane'),
    (6255, 'Prem'),
    (6256, 'Ko\u0161ana'),
    (6257, 'Pivka'),
    (6258, 'Prestranek'),
    (6271, 'Dekani'),
    (6272, 'Gra\u010di\u0161\u010de'),
    (6273, 'Marezige'),
    (6274, '\u0160marje'),
    (6275, '\u010crni Kal'),
    (6276, 'Pobegi'),
    (6280, 'Ankaran - Ancarano'),
    (6281, '\u0160kofije'),
    (6310, 'Izola - Isola'),
    (6320, 'Portoro\u017e - Portorose'),
    (6330, 'Piran - Pirano'),
    (6333, 'Se\u010dovlje - Sicciole'),
    (8000, 'Novo mesto'),
    (8210, 'Trebnje'),
    (8211, 'Dobrni\u010d'),
    (8212, 'Velika Loka'),
    (8213, 'Veliki Gaber'),
    (8216, 'Mirna Pe\u010d'),
    (8220, '\u0160marje\u0161ke Toplice'),
    (8222, 'Oto\u010dec'),
    (8230, 'Mokronog'),
    (8231, 'Trebelno'),
    (8232, '\u0160entrupert'),
    (8233, 'Mirna'),
    (8250, 'Bre\u017eice'),
    (8251, '\u010cate\u017e ob Savi'),
    (8253, 'Arti\u010de'),
    (8254, 'Globoko'),
    (8255, 'Pi\u0161ece'),
    (8256, 'Sromlje'),
    (8257, 'Dobova'),
    (8258, 'Kapele'),
    (8259, 'Bizeljsko'),
    (8261, 'Jesenice na Dolenjskem'),
    (8262, 'Kr\u0161ka vas'),
    (8263, 'Cerklje ob Krki'),
    (8270, 'Kr\u0161ko'),
    (8272, 'Zdole'),
    (8273, 'Leskovec pri Kr\u0161kem'),
    (8274, 'Raka'),
    (8275, '\u0160kocjan'),
    (8276, 'Bu\u010dka'),
    (8280, 'Brestanica'),
    (8281, 'Senovo'),
    (8282, 'Koprivnica'),
    (8283, 'Blanca'),
    (8290, 'Sevnica'),
    (8292, 'Zabukovje'),
    (8293, 'Studenec'),
    (8294, 'Bo\u0161tanj'),
    (8295, 'Tr\u017ei\u0161\u010de'),
    (8296, 'Krmelj'),
    (8297, '\u0160entjan\u017e'),
    (8310, '\u0160entjernej'),
    (8311, 'Kostanjevica na Krki'),
    (8312, 'Podbo\u010dje'),
    (8321, 'Brusnice'),
    (8322, 'Stopi\u010de'),
    (8323, 'Ur\u0161na sela'),
    (8330, 'Metlika'),
    (8331, 'Suhor'),
    (8332, 'Gradac'),
    (8333, 'Semi\u010d'),
    (8340, '\u010crnomelj'),
    (8341, 'Adle\u0161i\u010di'),
    (8342, 'Stari trg ob Kolpi'),
    (8343, 'Dragatu\u0161'),
    (8344, 'Vinica pri \u010crnomlju'),
    (8350, 'Dolenjske Toplice'),
    (8351, 'Stra\u017ea'),
    (8360, '\u017du\u017eemberk'),
    (8361, 'Dvor'),
    (8362, 'Hinje'),
    (9000, 'Murska Sobota'),
    (9201, 'Puconci'),
    (9202, 'Ma\u010dkovci'),
    (9203, 'Petrovci'),
    (9204, '\u0160alovci'),
    (9205, 'Hodo\u0161 - Hodos'),
    (9206, 'Kri\u017eevci'),
    (9207, 'Prosenjakovci - Partosfalva'),
    (9208, 'Fokovci'),
    (9220, 'Lendava - Lendva'),
    (9221, 'Martjanci'),
    (9222, 'Bogojina'),
    (9223, 'Dobrovnik - Dobronak'),
    (9224, 'Turni\u0161\u010de'),
    (9225, 'Velika Polana'),
    (9226, 'Moravske Toplice'),
    (9227, 'Kobilje'),
    (9231, 'Beltinci'),
    (9232, '\u010cren\u0161ovci'),
    (9233, 'Odranci'),
    (9240, 'Ljutomer'),
    (9241, 'Ver\u017eej'),
    (9242, 'Kri\u017eevci pri Ljutomeru'),
    (9243, 'Mala Nedelja'),
    (9244, 'Sveti Jurij ob \u0160\u010davnici'),
    (9245, 'Spodnji Ivanjci'),
    (9250, 'Gornja Radgona'),
    (9251, 'Ti\u0161ina'),
    (9252, 'Radenci'),
    (9253, 'Apa\u010de'),
    (9261, 'Cankova'),
    (9262, 'Roga\u0161ovci'),
    (9263, 'Kuzma'),
    (9264, 'Grad'),
    (9265, 'Bodonci'),
]

SI_POSTALCODES_CHOICES = sorted(SI_POSTALCODES, key=lambda k: k[1])

########NEW FILE########
__FILENAME__ = forms
"""
Slovak-specific form helpers
"""

from __future__ import absolute_import, unicode_literals

from django.forms.fields import Select, RegexField
from django.utils.translation import ugettext_lazy as _

from .sk_districts import DISTRICT_CHOICES
from .sk_regions import REGION_CHOICES


class SKRegionSelect(Select):
    """
    A select widget widget with list of Slovak regions as choices.
    """
    def __init__(self, attrs=None):
        super(SKRegionSelect, self).__init__(attrs, choices=REGION_CHOICES)


class SKDistrictSelect(Select):
    """
    A select widget with list of Slovak districts as choices.
    """
    def __init__(self, attrs=None):
        super(SKDistrictSelect, self).__init__(attrs, choices=DISTRICT_CHOICES)


class SKPostalCodeField(RegexField):
    """
    A form field that validates its input as Slovak postal code.
    Valid form is XXXXX or XXX XX, where X represents integer.
    """
    default_error_messages = {
        'invalid': _('Enter a postal code in the format XXXXX or XXX XX.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(SKPostalCodeField, self).__init__(r'^\d{5}$|^\d{3} \d{2}$',
                                                max_length, min_length, *args, **kwargs)

    def clean(self, value):
        """
        Validates the input and returns a string that contains only numbers.
        Returns an empty string for empty values.
        """
        v = super(SKPostalCodeField, self).clean(value)
        return v.replace(' ', '')

########NEW FILE########
__FILENAME__ = sk_districts
from django.utils.translation import ugettext_lazy as _

#: http://sk.wikipedia.org/wiki/Administrat%C3%ADvne_%C4%8Dlenenie_Slovenska
DISTRICT_CHOICES = (
    ('BB', _('Banska Bystrica')),
    ('BS', _('Banska Stiavnica')),
    ('BJ', _('Bardejov')),
    ('BN', _('Banovce nad Bebravou')),
    ('BR', _('Brezno')),
    ('BA1', _('Bratislava I')),
    ('BA2', _('Bratislava II')),
    ('BA3', _('Bratislava III')),
    ('BA4', _('Bratislava IV')),
    ('BA5', _('Bratislava V')),
    ('BY', _('Bytca')),
    ('CA', _('Cadca')),
    ('DT', _('Detva')),
    ('DK', _('Dolny Kubin')),
    ('DS', _('Dunajska Streda')),
    ('GA', _('Galanta')),
    ('GL', _('Gelnica')),
    ('HC', _('Hlohovec')),
    ('HE', _('Humenne')),
    ('IL', _('Ilava')),
    ('KK', _('Kezmarok')),
    ('KN', _('Komarno')),
    ('KE1', _('Kosice I')),
    ('KE2', _('Kosice II')),
    ('KE3', _('Kosice III')),
    ('KE4', _('Kosice IV')),
    ('KEO', _('Kosice - okolie')),
    ('KA', _('Krupina')),
    ('KM', _('Kysucke Nove Mesto')),
    ('LV', _('Levice')),
    ('LE', _('Levoca')),
    ('LM', _('Liptovsky Mikulas')),
    ('LC', _('Lucenec')),
    ('MA', _('Malacky')),
    ('MT', _('Martin')),
    ('ML', _('Medzilaborce')),
    ('MI', _('Michalovce')),
    ('MY', _('Myjava')),
    ('NO', _('Namestovo')),
    ('NR', _('Nitra')),
    ('NM', _('Nove Mesto nad Vahom')),
    ('NZ', _('Nove Zamky')),
    ('PE', _('Partizanske')),
    ('PK', _('Pezinok')),
    ('PN', _('Piestany')),
    ('PT', _('Poltar')),
    ('PP', _('Poprad')),
    ('PB', _('Povazska Bystrica')),
    ('PO', _('Presov')),
    ('PD', _('Prievidza')),
    ('PU', _('Puchov')),
    ('RA', _('Revuca')),
    ('RS', _('Rimavska Sobota')),
    ('RV', _('Roznava')),
    ('RK', _('Ruzomberok')),
    ('SB', _('Sabinov')),
    ('SC', _('Senec')),
    ('SE', _('Senica')),
    ('SI', _('Skalica')),
    ('SV', _('Snina')),
    ('SO', _('Sobrance')),
    ('SN', _('Spisska Nova Ves')),
    ('SL', _('Stara Lubovna')),
    ('SP', _('Stropkov')),
    ('SK', _('Svidnik')),
    ('SA', _('Sala')),
    ('TO', _('Topolcany')),
    ('TV', _('Trebisov')),
    ('TN', _('Trencin')),
    ('TT', _('Trnava')),
    ('TR', _('Turcianske Teplice')),
    ('TS', _('Tvrdosin')),
    ('VK', _('Velky Krtis')),
    ('VT', _('Vranov nad Toplou')),
    ('ZM', _('Zlate Moravce')),
    ('ZV', _('Zvolen')),
    ('ZC', _('Zarnovica')),
    ('ZH', _('Ziar nad Hronom')),
    ('ZA', _('Zilina')),
)

########NEW FILE########
__FILENAME__ = sk_regions
from django.utils.translation import ugettext_lazy as _

#: http://sk.wikipedia.org/wiki/Administrat%C3%ADvne_%C4%8Dlenenie_Slovenska
REGION_CHOICES = (
    ('BB', _('Banska Bystrica region')),
    ('BA', _('Bratislava region')),
    ('KE', _('Kosice region')),
    ('NR', _('Nitra region')),
    ('PO', _('Presov region')),
    ('TN', _('Trencin region')),
    ('TT', _('Trnava region')),
    ('ZA', _('Zilina region')),
)

########NEW FILE########
__FILENAME__ = forms
from __future__ import absolute_import, unicode_literals

import re

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import Field, RegexField, Select, CharField
from django.utils.encoding import smart_text
from django.utils.translation import ugettext_lazy as _

from .tr_provinces import PROVINCE_CHOICES


phone_digits_re = re.compile(r'^(\+90|0)? ?(([1-9]\d{2})|\([1-9]\d{2}\)) ?([2-9]\d{2} ?\d{2} ?\d{2})$')


class TRPostalCodeField(RegexField):
    """
    A form field that validates input as a Turkish zip code. Valid codes
    consist of five digits.
    """
    default_error_messages = {
        'invalid': _('Enter a postal code in the format XXXXX.'),
    }

    def __init__(self, max_length=5, min_length=5, *args, **kwargs):
        super(TRPostalCodeField, self).__init__(r'^\d{5}$',
                                                max_length, min_length, *args, **kwargs)

    def clean(self, value):
        value = super(TRPostalCodeField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        if len(value) != 5:
            raise ValidationError(self.error_messages['invalid'])
        province_code = int(value[:2])
        if province_code == 0 or province_code > 81:
            raise ValidationError(self.error_messages['invalid'])
        return value


class TRPhoneNumberField(CharField):
    """
    A form field that validates input as a Turkish phone number. The correct
    format is 0xxx xxx xxxx. +90xxx xxx xxxx and inputs without spaces also
    validates. The result is normalized to xxx xxx xxxx format.
    """
    default_error_messages = {
        'invalid': _('Phone numbers must be in 0XXX XXX XXXX format.'),
    }

    def clean(self, value):
        super(TRPhoneNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        value = re.sub('(\(|\)|\s+)', '', smart_text(value))
        m = phone_digits_re.search(value)
        if m:
            return '%s%s' % (m.group(2), m.group(4))
        raise ValidationError(self.error_messages['invalid'])


class TRIdentificationNumberField(Field):
    """
    A Turkey Identification Number number.
    See: http://tr.wikipedia.org/wiki/T%C3%BCrkiye_Cumhuriyeti_Kimlik_Numaras%C4%B1

    Checks the following rules to determine whether the number is valid:

        * The number is 11-digits.
        * First digit is not 0.
        * Conforms to the following two formula:
          (sum(1st, 3rd, 5th, 7th, 9th)*7 - sum(2nd,4th,6th,8th)) % 10 = 10th digit
          sum(1st to 10th) % 10 = 11th digit
    """
    default_error_messages = {
        'invalid': _('Enter a valid Turkish Identification number.'),
        'not_11': _('Turkish Identification number must be 11 digits.'),
    }

    def clean(self, value):
        super(TRIdentificationNumberField, self).clean(value)

        if value in EMPTY_VALUES:
            return ''

        if len(value) != 11:
            raise ValidationError(self.error_messages['not_11'])

        if not re.match(r'^\d{11}$', value):
            raise ValidationError(self.error_messages['invalid'])

        if int(value[0]) == 0:
            raise ValidationError(self.error_messages['invalid'])

        chksum = (sum([int(value[i]) for i in range(0, 9, 2)]) * 7 -
                  sum([int(value[i]) for i in range(1, 9, 2)])) % 10

        if (chksum != int(value[9]) or
                (sum([int(value[i])
                      for i in range(10)]) % 10) != int(value[10])):
            raise ValidationError(self.error_messages['invalid'])

        return value


class TRProvinceSelect(Select):
    """
    A Select widget that uses a list of provinces in Turkey as its choices.
    """
    def __init__(self, attrs=None):
        super(TRProvinceSelect, self).__init__(attrs, choices=PROVINCE_CHOICES)

########NEW FILE########
__FILENAME__ = tr_provinces
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

#: A list of Turkish provinces
PROVINCE_CHOICES = (
    ('01', ('Adana')),
    ('02', ('Adıyaman')),
    ('03', ('Afyonkarahisar')),
    ('04', ('Ağrı')),
    ('68', ('Aksaray')),
    ('05', ('Amasya')),
    ('06', ('Ankara')),
    ('07', ('Antalya')),
    ('75', ('Ardahan')),
    ('08', ('Artvin')),
    ('09', ('Aydın')),
    ('10', ('Balıkesir')),
    ('74', ('Bartın')),
    ('72', ('Batman')),
    ('69', ('Bayburt')),
    ('11', ('Bilecik')),
    ('12', ('Bingöl')),
    ('13', ('Bitlis')),
    ('14', ('Bolu')),
    ('15', ('Burdur')),
    ('16', ('Bursa')),
    ('17', ('Çanakkale')),
    ('18', ('Çankırı')),
    ('19', ('Çorum')),
    ('20', ('Denizli')),
    ('21', ('Diyarbakır')),
    ('81', ('Düzce')),
    ('22', ('Edirne')),
    ('23', ('Elazığ')),
    ('24', ('Erzincan')),
    ('25', ('Erzurum')),
    ('26', ('Eskişehir')),
    ('27', ('Gaziantep')),
    ('28', ('Giresun')),
    ('29', ('Gümüşhane')),
    ('30', ('Hakkari')),
    ('31', ('Hatay')),
    ('76', ('Iğdır')),
    ('32', ('Isparta')),
    ('33', ('Mersin')),
    ('34', ('İstanbul')),
    ('35', ('İzmir')),
    ('78', ('Karabük')),
    ('36', ('Kars')),
    ('37', ('Kastamonu')),
    ('38', ('Kayseri')),
    ('39', ('Kırklareli')),
    ('40', ('Kırşehir')),
    ('41', ('Kocaeli')),
    ('42', ('Konya')),
    ('43', ('Kütahya')),
    ('44', ('Malatya')),
    ('45', ('Manisa')),
    ('46', ('Kahramanmaraş')),
    ('70', ('Karaman')),
    ('71', ('Kırıkkale')),
    ('79', ('Kilis')),
    ('47', ('Mardin')),
    ('48', ('Muğla')),
    ('49', ('Muş')),
    ('50', ('Nevşehir')),
    ('51', ('Niğde')),
    ('52', ('Ordu')),
    ('80', ('Osmaniye')),
    ('53', ('Rize')),
    ('54', ('Sakarya')),
    ('55', ('Samsun')),
    ('56', ('Siirt')),
    ('57', ('Sinop')),
    ('58', ('Sivas')),
    ('73', ('Şırnak')),
    ('59', ('Tekirdağ')),
    ('60', ('Tokat')),
    ('61', ('Trabzon')),
    ('62', ('Tunceli')),
    ('63', ('Şanlıurfa')),
    ('64', ('Uşak')),
    ('65', ('Van')),
    ('77', ('Yalova')),
    ('66', ('Yozgat')),
    ('67', ('Zonguldak')),
)

########NEW FILE########
__FILENAME__ = forms
"""
USA-specific Form helpers
"""

from __future__ import absolute_import, unicode_literals

import re

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import Field, RegexField, Select, CharField
from django.utils.encoding import smart_text
from django.utils.translation import ugettext_lazy as _


phone_digits_re = re.compile(r'^(?:1-?)?(\d{3})[-\.]?(\d{3})[-\.]?(\d{4})$')
ssn_re = re.compile(r"^(?P<area>\d{3})[-\ ]?(?P<group>\d{2})[-\ ]?(?P<serial>\d{4})$")


class USZipCodeField(RegexField):
    """"
    A form field that validates input as a U.S. ZIP code. Valid formats are
    XXXXX or XXXXX-XXXX.

    .. versionadded:: 1.1

    Whitespace around the ZIP code is accepted and automatically trimmed.
    """
    default_error_messages = {
        'invalid': _('Enter a zip code in the format XXXXX or XXXXX-XXXX.'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(USZipCodeField, self).__init__(r'^\d{5}(?:-\d{4})?$',
                                             max_length, min_length, *args, **kwargs)

    def to_python(self, value):
        value = super(USZipCodeField, self).to_python(value)
        return value.strip()


class USPhoneNumberField(CharField):
    """
    A form field that validates input as a U.S. phone number.
    """
    default_error_messages = {
        'invalid': _('Phone numbers must be in XXX-XXX-XXXX format.'),
    }

    def clean(self, value):
        super(USPhoneNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        value = re.sub('(\(|\)|\s+)', '', smart_text(value))
        m = phone_digits_re.search(value)
        if m:
            return '%s-%s-%s' % (m.group(1), m.group(2), m.group(3))
        raise ValidationError(self.error_messages['invalid'])


class USSocialSecurityNumberField(Field):
    """
    A United States Social Security number.

    Checks the following rules to determine whether the number is valid:

        * Conforms to the XXX-XX-XXXX format.
        * No group consists entirely of zeroes.
        * The leading group is not "666" (block "666" will never be allocated).
        * The number is not in the promotional block 987-65-4320 through
          987-65-4329, which are permanently invalid.
        * The number is not one known to be invalid due to otherwise widespread
          promotional use or distribution (e.g., the Woolworth's number or the
          1962 promotional number).
    """
    default_error_messages = {
        'invalid': _('Enter a valid U.S. Social Security number in XXX-XX-XXXX format.'),
    }

    def clean(self, value):
        super(USSocialSecurityNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        match = re.match(ssn_re, value)
        if not match:
            raise ValidationError(self.error_messages['invalid'])
        area, group, serial = match.groupdict()['area'], match.groupdict()['group'], match.groupdict()['serial']

        # First pass: no blocks of all zeroes.
        if area == '000' or group == '00' or serial == '0000':
            raise ValidationError(self.error_messages['invalid'])

        # Second pass: promotional and otherwise permanently invalid numbers.
        if (area == '666' or
                area.startswith('9') or
                value == '078-05-1120' or
                value == '219-09-9999'):
            raise ValidationError(self.error_messages['invalid'])
        return '%s-%s-%s' % (area, group, serial)


class USStateField(Field):
    """
    A form field that validates its input is a U.S. state name or abbreviation.
    It normalizes the input to the standard two-leter postal service
    abbreviation for the given state.
    """
    default_error_messages = {
        'invalid': _('Enter a U.S. state or territory.'),
    }

    def clean(self, value):
        from .us_states import STATES_NORMALIZED
        super(USStateField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        try:
            value = value.strip().lower()
        except AttributeError:
            pass
        else:
            try:
                return STATES_NORMALIZED[value.strip().lower()]
            except KeyError:
                pass
        raise ValidationError(self.error_messages['invalid'])


class USStateSelect(Select):
    """
    A Select widget that uses a list of U.S. states/territories as its choices.
    """
    def __init__(self, attrs=None):
        from .us_states import STATE_CHOICES
        super(USStateSelect, self).__init__(attrs, choices=STATE_CHOICES)


class USPSSelect(Select):
    """
    A Select widget that uses a list of US Postal Service codes as its
    choices.
    """
    def __init__(self, attrs=None):
        from .us_states import USPS_CHOICES
        super(USPSSelect, self).__init__(attrs, choices=USPS_CHOICES)

########NEW FILE########
__FILENAME__ = models
from django.utils.translation import ugettext_lazy as _
from django.db.models.fields import CharField

from .us_states import STATE_CHOICES, USPS_CHOICES


class USStateField(CharField):
    """
    A model field that forms represent as a ``forms.USStateField`` field and
    stores the two-letter U.S. state abbreviation in the database.
    """
    description = _("U.S. state (two uppercase letters)")

    def __init__(self, *args, **kwargs):
        kwargs['choices'] = STATE_CHOICES
        kwargs['max_length'] = 2
        super(USStateField, self).__init__(*args, **kwargs)


class USPostalCodeField(CharField):
    """"
    A model field that forms represent as a ``forms.USPSSelect`` field
    and stores the two-letter U.S Postal Service abbreviation in the
    database.
    """
    description = _("U.S. postal code (two uppercase letters)")

    def __init__(self, *args, **kwargs):
        kwargs['choices'] = USPS_CHOICES
        kwargs['max_length'] = 2
        super(USPostalCodeField, self).__init__(*args, **kwargs)


class PhoneNumberField(CharField):
    """
    A :class:`~django.db.models.CharField` that checks that the value
    is a valid U.S.A.-style phone number (in the format ``XXX-XXX-XXXX``).
    """
    description = _("Phone number")

    def __init__(self, *args, **kwargs):
        kwargs['max_length'] = 20
        super(PhoneNumberField, self).__init__(*args, **kwargs)

    def formfield(self, **kwargs):
        from localflavor.us.forms import USPhoneNumberField
        defaults = {'form_class': USPhoneNumberField}
        defaults.update(kwargs)
        return super(PhoneNumberField, self).formfield(**defaults)

########NEW FILE########
__FILENAME__ = us_states
"""
A mapping of state misspellings/abbreviations to normalized
abbreviations, and alphabetical lists of US states, territories,
military mail regions and non-US states to which the US provides
postal service.

This exists in this standalone file so that it's only imported into memory
when explicitly needed.
"""

#: The 48 contiguous states, plus the District of Columbia.
CONTIGUOUS_STATES = (
    ('AL', 'Alabama'),
    ('AZ', 'Arizona'),
    ('AR', 'Arkansas'),
    ('CA', 'California'),
    ('CO', 'Colorado'),
    ('CT', 'Connecticut'),
    ('DE', 'Delaware'),
    ('DC', 'District of Columbia'),
    ('FL', 'Florida'),
    ('GA', 'Georgia'),
    ('ID', 'Idaho'),
    ('IL', 'Illinois'),
    ('IN', 'Indiana'),
    ('IA', 'Iowa'),
    ('KS', 'Kansas'),
    ('KY', 'Kentucky'),
    ('LA', 'Louisiana'),
    ('ME', 'Maine'),
    ('MD', 'Maryland'),
    ('MA', 'Massachusetts'),
    ('MI', 'Michigan'),
    ('MN', 'Minnesota'),
    ('MS', 'Mississippi'),
    ('MO', 'Missouri'),
    ('MT', 'Montana'),
    ('NE', 'Nebraska'),
    ('NV', 'Nevada'),
    ('NH', 'New Hampshire'),
    ('NJ', 'New Jersey'),
    ('NM', 'New Mexico'),
    ('NY', 'New York'),
    ('NC', 'North Carolina'),
    ('ND', 'North Dakota'),
    ('OH', 'Ohio'),
    ('OK', 'Oklahoma'),
    ('OR', 'Oregon'),
    ('PA', 'Pennsylvania'),
    ('RI', 'Rhode Island'),
    ('SC', 'South Carolina'),
    ('SD', 'South Dakota'),
    ('TN', 'Tennessee'),
    ('TX', 'Texas'),
    ('UT', 'Utah'),
    ('VT', 'Vermont'),
    ('VA', 'Virginia'),
    ('WA', 'Washington'),
    ('WV', 'West Virginia'),
    ('WI', 'Wisconsin'),
    ('WY', 'Wyoming'),
)

#: All 50 states, plus the District of Columbia.
US_STATES = (
    ('AL', 'Alabama'),
    ('AK', 'Alaska'),
    ('AZ', 'Arizona'),
    ('AR', 'Arkansas'),
    ('CA', 'California'),
    ('CO', 'Colorado'),
    ('CT', 'Connecticut'),
    ('DE', 'Delaware'),
    ('DC', 'District of Columbia'),
    ('FL', 'Florida'),
    ('GA', 'Georgia'),
    ('HI', 'Hawaii'),
    ('ID', 'Idaho'),
    ('IL', 'Illinois'),
    ('IN', 'Indiana'),
    ('IA', 'Iowa'),
    ('KS', 'Kansas'),
    ('KY', 'Kentucky'),
    ('LA', 'Louisiana'),
    ('ME', 'Maine'),
    ('MD', 'Maryland'),
    ('MA', 'Massachusetts'),
    ('MI', 'Michigan'),
    ('MN', 'Minnesota'),
    ('MS', 'Mississippi'),
    ('MO', 'Missouri'),
    ('MT', 'Montana'),
    ('NE', 'Nebraska'),
    ('NV', 'Nevada'),
    ('NH', 'New Hampshire'),
    ('NJ', 'New Jersey'),
    ('NM', 'New Mexico'),
    ('NY', 'New York'),
    ('NC', 'North Carolina'),
    ('ND', 'North Dakota'),
    ('OH', 'Ohio'),
    ('OK', 'Oklahoma'),
    ('OR', 'Oregon'),
    ('PA', 'Pennsylvania'),
    ('RI', 'Rhode Island'),
    ('SC', 'South Carolina'),
    ('SD', 'South Dakota'),
    ('TN', 'Tennessee'),
    ('TX', 'Texas'),
    ('UT', 'Utah'),
    ('VT', 'Vermont'),
    ('VA', 'Virginia'),
    ('WA', 'Washington'),
    ('WV', 'West Virginia'),
    ('WI', 'Wisconsin'),
    ('WY', 'Wyoming'),
)

#: Non-state territories.
US_TERRITORIES = (
    ('AS', 'American Samoa'),
    ('GU', 'Guam'),
    ('MP', 'Northern Mariana Islands'),
    ('PR', 'Puerto Rico'),
    ('VI', 'Virgin Islands'),
)

#: Military postal "states". Note that 'AE' actually encompasses
#: Europe, Canada, Africa and the Middle East.
ARMED_FORCES_STATES = (
    ('AA', 'Armed Forces Americas'),
    ('AE', 'Armed Forces Europe'),
    ('AP', 'Armed Forces Pacific'),
)

#: Non-US locations serviced by USPS (under Compact of Free
#: Association).
COFA_STATES = (
    ('FM', 'Federated States of Micronesia'),
    ('MH', 'Marshall Islands'),
    ('PW', 'Palau'),
)

#: Obsolete abbreviations (no longer US territories/USPS service, or
#: code changed).
OBSOLETE_STATES = (
    ('CM', 'Commonwealth of the Northern Mariana Islands'),  # Is now 'MP'
    ('CZ', 'Panama Canal Zone'),                             # Reverted to Panama 1979
    ('PI', 'Philippine Islands'),                            # Philippine independence 1946
    ('TT', 'Trust Territory of the Pacific Islands'),        # Became the independent COFA states + Northern Mariana Islands 1979-1994
)


#: All US states and territories plus DC and military mail.
STATE_CHOICES = tuple(sorted(US_STATES + US_TERRITORIES + ARMED_FORCES_STATES, key=lambda obj: obj[1]))

#: All US Postal Service locations.
USPS_CHOICES = tuple(sorted(US_STATES + US_TERRITORIES + ARMED_FORCES_STATES + COFA_STATES, key=lambda obj: obj[1]))

#: Normalized versions of state names
STATES_NORMALIZED = {
    'aa': 'AA',
    'ae': 'AE',
    'ak': 'AK',
    'al': 'AL',
    'ala': 'AL',
    'alabama': 'AL',
    'alaska': 'AK',
    'ap': 'AP',
    'american samao': 'AS',
    'american samoa': 'AS',
    'ar': 'AR',
    'ariz': 'AZ',
    'arizona': 'AZ',
    'ark': 'AR',
    'arkansas': 'AR',
    'as': 'AS',
    'az': 'AZ',
    'ca': 'CA',
    'calf': 'CA',
    'calif': 'CA',
    'california': 'CA',
    'co': 'CO',
    'colo': 'CO',
    'colorado': 'CO',
    'conn': 'CT',
    'connecticut': 'CT',
    'ct': 'CT',
    'dc': 'DC',
    'de': 'DE',
    'del': 'DE',
    'delaware': 'DE',
    'deleware': 'DE',
    'district of columbia': 'DC',
    'fl': 'FL',
    'fla': 'FL',
    'florida': 'FL',
    'ga': 'GA',
    'georgia': 'GA',
    'gu': 'GU',
    'guam': 'GU',
    'hawaii': 'HI',
    'hi': 'HI',
    'ia': 'IA',
    'id': 'ID',
    'idaho': 'ID',
    'il': 'IL',
    'ill': 'IL',
    'illinois': 'IL',
    'in': 'IN',
    'ind': 'IN',
    'indiana': 'IN',
    'iowa': 'IA',
    'kan': 'KS',
    'kans': 'KS',
    'kansas': 'KS',
    'kentucky': 'KY',
    'ks': 'KS',
    'ky': 'KY',
    'la': 'LA',
    'louisiana': 'LA',
    'ma': 'MA',
    'maine': 'ME',
    'marianas islands': 'MP',
    'marianas islands of the pacific': 'MP',
    'marinas islands of the pacific': 'MP',
    'maryland': 'MD',
    'mass': 'MA',
    'massachusetts': 'MA',
    'massachussetts': 'MA',
    'md': 'MD',
    'me': 'ME',
    'mi': 'MI',
    'mich': 'MI',
    'michigan': 'MI',
    'minn': 'MN',
    'minnesota': 'MN',
    'miss': 'MS',
    'mississippi': 'MS',
    'missouri': 'MO',
    'mn': 'MN',
    'mo': 'MO',
    'mont': 'MT',
    'montana': 'MT',
    'mp': 'MP',
    'ms': 'MS',
    'mt': 'MT',
    'n d': 'ND',
    'n dak': 'ND',
    'n h': 'NH',
    'n j': 'NJ',
    'n m': 'NM',
    'n mex': 'NM',
    'nc': 'NC',
    'nd': 'ND',
    'ne': 'NE',
    'neb': 'NE',
    'nebr': 'NE',
    'nebraska': 'NE',
    'nev': 'NV',
    'nevada': 'NV',
    'new hampshire': 'NH',
    'new jersey': 'NJ',
    'new mexico': 'NM',
    'new york': 'NY',
    'nh': 'NH',
    'nj': 'NJ',
    'nm': 'NM',
    'nmex': 'NM',
    'north carolina': 'NC',
    'north dakota': 'ND',
    'northern mariana islands': 'MP',
    'nv': 'NV',
    'ny': 'NY',
    'oh': 'OH',
    'ohio': 'OH',
    'ok': 'OK',
    'okla': 'OK',
    'oklahoma': 'OK',
    'or': 'OR',
    'ore': 'OR',
    'oreg': 'OR',
    'oregon': 'OR',
    'pa': 'PA',
    'penn': 'PA',
    'pennsylvania': 'PA',
    'pr': 'PR',
    'puerto rico': 'PR',
    'rhode island': 'RI',
    'ri': 'RI',
    's dak': 'SD',
    'sc': 'SC',
    'sd': 'SD',
    'sdak': 'SD',
    'south carolina': 'SC',
    'south dakota': 'SD',
    'tenn': 'TN',
    'tennessee': 'TN',
    'territory of hawaii': 'HI',
    'tex': 'TX',
    'texas': 'TX',
    'tn': 'TN',
    'tx': 'TX',
    'us virgin islands': 'VI',
    'usvi': 'VI',
    'ut': 'UT',
    'utah': 'UT',
    'va': 'VA',
    'vermont': 'VT',
    'vi': 'VI',
    'viginia': 'VA',
    'virgin islands': 'VI',
    'virgina': 'VA',
    'virginia': 'VA',
    'vt': 'VT',
    'w va': 'WV',
    'wa': 'WA',
    'wash': 'WA',
    'washington': 'WA',
    'west virginia': 'WV',
    'wi': 'WI',
    'wis': 'WI',
    'wisc': 'WI',
    'wisconsin': 'WI',
    'wv': 'WV',
    'wva': 'WV',
    'wy': 'WY',
    'wyo': 'WY',
    'wyoming': 'WY',
}

########NEW FILE########
__FILENAME__ = forms
# -*- coding: utf-8 -*-
"""
UY-specific form helpers.
"""

from __future__ import absolute_import, unicode_literals

from django.core.validators import EMPTY_VALUES
from django.forms.fields import Select, RegexField
from django.forms import ValidationError
from django.utils.translation import ugettext_lazy as _

from .util import get_validation_digit


class UYDepartmentSelect(Select):
    """
    A Select widget that uses a list of Uruguayan departments as its choices.
    """
    def __init__(self, attrs=None):
        from .uy_departments import DEPARTMENT_CHOICES
        super(UYDepartmentSelect, self).__init__(attrs, choices=DEPARTMENT_CHOICES)


class UYCIField(RegexField):
    """
    A field that validates Uruguayan 'Cedula de identidad' (CI) numbers.
    """
    default_error_messages = {
        'invalid': _("Enter a valid CI number in X.XXX.XXX-X,"
                     "XXXXXXX-X or XXXXXXXX format."),
        'invalid_validation_digit': _("Enter a valid CI number."),
    }

    def __init__(self, *args, **kwargs):
        super(UYCIField, self).__init__(r'(?P<num>(\d{6,7}|(\d\.)?\d{3}\.\d{3}))-?(?P<val>\d)',
                                        *args, **kwargs)

    def clean(self, value):
        """
        Validates format and validation digit.

        The official format is [X.]XXX.XXX-X but usually dots and/or slash are
        omitted so, when validating, those characters are ignored if found in
        the correct place. The three typically used formats are supported:
        [X]XXXXXXX, [X]XXXXXX-X and [X.]XXX.XXX-X.
        """

        value = super(UYCIField, self).clean(value)
        if value in EMPTY_VALUES:
            return ''
        match = self.regex.match(value)
        if not match:
            raise ValidationError(self.error_messages['invalid'])

        number = int(match.group('num').replace('.', ''))
        validation_digit = int(match.group('val'))

        if not validation_digit == get_validation_digit(number):
            raise ValidationError(self.error_messages['invalid_validation_digit'])

        return value

########NEW FILE########
__FILENAME__ = util
# -*- coding: utf-8 -*-


def get_validation_digit(number):
    """ Calculates the validation digit for the given number. """
    sum = 0
    dvs = [4, 3, 6, 7, 8, 9, 2]
    number = str(number)

    for i in range(0, len(number)):
        sum = (int(number[-1 - i]) * dvs[i] + sum) % 10

    return (10 - sum) % 10

########NEW FILE########
__FILENAME__ = uy_departments
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

#: A list of Uruguayan departments as `choices` in a formfield.
DEPARTMENT_CHOICES = (
    ('G', 'Artigas'),
    ('A', 'Canelones'),
    ('E', 'Cerro Largo'),
    ('L', 'Colonia'),
    ('Q', 'Durazno'),
    ('N', 'Flores'),
    ('O', 'Florida'),
    ('P', 'Lavalleja'),
    ('B', 'Maldonado'),
    ('S', 'Montevideo'),
    ('I', 'Paysandú'),
    ('J', 'Río Negro'),
    ('F', 'Rivera'),
    ('C', 'Rocha'),
    ('H', 'Salto'),
    ('M', 'San José'),
    ('K', 'Soriano'),
    ('R', 'Tacuarembó'),
    ('D', 'Treinta y Tres'),
)

########NEW FILE########
__FILENAME__ = forms
"""
South Africa-specific Form helpers
"""
from __future__ import unicode_literals

import re
from datetime import date

from django.core.validators import EMPTY_VALUES
from django.forms import ValidationError
from django.forms.fields import CharField, RegexField, Select
from django.utils.checksums import luhn
from django.utils.translation import gettext as _

id_re = re.compile(r'^(?P<yy>\d\d)(?P<mm>\d\d)(?P<dd>\d\d)(?P<mid>\d{4})(?P<end>\d{3})')


class ZAIDField(CharField):
    """
    A form field for South African ID numbers -- the checksum is validated
    using the Luhn checksum, and uses a simlistic (read: not entirely accurate)
    check for the birthdate
    """
    default_error_messages = {
        'invalid': _('Enter a valid South African ID number'),
    }

    def clean(self, value):
        super(ZAIDField, self).clean(value)

        if value in EMPTY_VALUES:
            return ''

        # strip spaces and dashes
        value = value.strip().replace(' ', '').replace('-', '')

        match = re.match(id_re, value)

        if not match:
            raise ValidationError(self.error_messages['invalid'])

        g = match.groupdict()

        try:
            # The year 2000 is conveniently a leapyear.
            # This algorithm will break in xx00 years which aren't leap years
            # There is no way to guess the century of a ZA ID number
            date(int(g['yy']) + 2000, int(g['mm']), int(g['dd']))
        except ValueError:
            raise ValidationError(self.error_messages['invalid'])

        if not luhn(value):
            raise ValidationError(self.error_messages['invalid'])

        return value


class ZAPostCodeField(RegexField):
    """
    A form field that validates input as a South African postcode. Valid
    postcodes must have four digits.
    """
    default_error_messages = {
        'invalid': _('Enter a valid South African postal code'),
    }

    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        super(ZAPostCodeField, self).__init__(r'^\d{4}$',
                                              max_length, min_length, *args, **kwargs)


class ZAProvinceSelect(Select):
    """
    A Select widget that uses a list of South African Provinces as its choices.
    """
    def __init__(self, attrs=None):
        from .za_provinces import PROVINCE_CHOICES
        super(ZAProvinceSelect, self).__init__(attrs, choices=PROVINCE_CHOICES)

########NEW FILE########
__FILENAME__ = za_provinces
from django.utils.translation import gettext_lazy as _

#: A list of South African provinces as `choices` in a formfield.
PROVINCE_CHOICES = (
    ('EC', _('Eastern Cape')),
    ('FS', _('Free State')),
    ('GP', _('Gauteng')),
    ('KN', _('KwaZulu-Natal')),
    ('LP', _('Limpopo')),
    ('MP', _('Mpumalanga')),
    ('NC', _('Northern Cape')),
    ('NW', _('North West')),
    ('WC', _('Western Cape')),
)

########NEW FILE########
__FILENAME__ = tasks
import os
import os.path
import sys
from invoke import run, task


@task
def clean():
    run('git clean -Xfd')


@task
def test(country='all'):
    print('Python version: ' + sys.version)
    test_cmd = 'coverage run `which django-admin.py` test --settings=tests.settings'
    flake_cmd = 'flake8 --ignore=W801,E128,E501,W402'
    country = os.environ.get('COUNTRY', country)

    # Fix issue #49
    cwp = os.path.dirname(os.path.abspath(__name__))
    pythonpath = os.environ.get('PYTHONPATH', '').split(os.pathsep)
    pythonpath.append(os.path.join(cwp, 'tests'))
    os.environ['PYTHONPATH'] = os.pathsep.join(pythonpath)

    if country == 'all':
        run('{0} localflavor'.format(flake_cmd))
        run('{0} tests'.format(test_cmd))
        run('coverage report')
    elif country not in os.listdir('localflavor'):
        print('The country {0!r} is not supported yet.'.format(country))
    else:
        run('{0} localflavor/{1}'.format(flake_cmd, country))
        run('{0} tests.test_{1}'.format(test_cmd, country))
        run('coverage report -m --include=localflavor/{0}/*'.format(country))


@task
def translations(pull=False):
    if pull:
        run('tx pull -a')
    run('cd localflavor; django-admin.py makemessages -a; django-admin.py compilemessages; cd ..')


@task
def docs():
    run('cd docs; make html; cd ..')

########NEW FILE########
__FILENAME__ = settings
# -*- coding: utf-8 -*-
import os

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': ':memory:',
    }
}

INSTALLED_APPS = [
    'localflavor',
    'tests.test_au',
    'tests.test_mk',
    'tests.test_mx',
    'tests.test_us',
    'tests.test_pk',
]

import django

if django.VERSION[:2] < (1, 6):
    TEST_RUNNER = 'discover_runner.DiscoverRunner'

SECRET_KEY = 'spam-spam-spam-spam'

########NEW FILE########
__FILENAME__ = test_ar
from __future__ import absolute_import, unicode_literals

from django.test import SimpleTestCase

from localflavor.ar.forms import (ARProvinceSelect, ARPostalCodeField,
                                  ARDNIField, ARCUITField)


class ARLocalFlavorTests(SimpleTestCase):
    def test_ARProvinceSelect(self):
        f = ARProvinceSelect()
        out = '''<select name="provincias">
<option value="B">Buenos Aires</option>
<option value="K">Catamarca</option>
<option value="H">Chaco</option>
<option value="U">Chubut</option>
<option value="C">Ciudad Aut\xf3noma de Buenos Aires</option>
<option value="X">C\xf3rdoba</option>
<option value="W">Corrientes</option>
<option value="E">Entre R\xedos</option>
<option value="P">Formosa</option>
<option value="Y">Jujuy</option>
<option value="L">La Pampa</option>
<option value="F">La Rioja</option>
<option value="M">Mendoza</option>
<option value="N">Misiones</option>
<option value="Q">Neuqu\xe9n</option>
<option value="R">R\xedo Negro</option>
<option value="A" selected="selected">Salta</option>
<option value="J">San Juan</option>
<option value="D">San Luis</option>
<option value="Z">Santa Cruz</option>
<option value="S">Santa Fe</option>
<option value="G">Santiago del Estero</option>
<option value="V">Tierra del Fuego, Ant\xe1rtida e Islas del Atl\xe1ntico Sur</option>
<option value="T">Tucum\xe1n</option>
</select>'''
        self.assertHTMLEqual(f.render('provincias', 'A'), out)

    def test_ARPostalCodeField(self):
        error_format = ['Enter a postal code in the format NNNN or ANNNNAAA.']
        error_atmost = ['Ensure this value has at most 8 characters (it has 9).']
        error_atleast = ['Ensure this value has at least 4 characters (it has 3).']
        valid = {
            '5000': '5000',
            'C1064AAB': 'C1064AAB',
            'c1064AAB': 'C1064AAB',
            'C1064aab': 'C1064AAB',
            '4400': '4400',
            'C1064AAB': 'C1064AAB',
        }
        invalid = {
            'C1064AABB': error_atmost + error_format,
            'C1064AA': error_format,
            'C1064AB': error_format,
            '106AAB': error_format,
            '500': error_atleast + error_format,
            '5PPP': error_format,
        }
        self.assertFieldOutput(ARPostalCodeField, valid, invalid)

    def test_ARDNIField(self):
        error_length = ['This field requires 7 or 8 digits.']
        error_digitsonly = ['This field requires only numbers.']
        valid = {
            '20123456': '20123456',
            '20.123.456': '20123456',
            '20123456': '20123456',
            '20.123.456': '20123456',
            '20.123456': '20123456',
            '9123456': '9123456',
            '9.123.456': '9123456',
        }
        invalid = {
            '101234566': error_length,
            'W0123456': error_digitsonly,
            '10,123,456': error_digitsonly,
        }
        self.assertFieldOutput(ARDNIField, valid, invalid)

    def test_ARCUITField(self):
        error_format = ['Enter a valid CUIT in XX-XXXXXXXX-X or XXXXXXXXXXXX format.']
        error_invalid = ['Invalid CUIT.']
        error_legal_type = ['Invalid legal type. Type must be 27, 20, 23 or 30.']
        valid = {
            '20-10123456-9': '20-10123456-9',
            '20-10123456-9': '20-10123456-9',
            '27-10345678-4': '27-10345678-4',
            '20101234569': '20-10123456-9',
            '27103456784': '27-10345678-4',
            '30011111110': '30-01111111-0',
        }
        invalid = {
            '2-10123456-9': error_format,
            '210123456-9': error_format,
            '20-10123456': error_format,
            '20-10123456-': error_format,
            '20-10123456-5': error_invalid,
            '27-10345678-1': error_invalid,
            '27-10345678-1': error_invalid,
            '11211111110': error_legal_type,
        }
        self.assertFieldOutput(ARCUITField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_at
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.at.forms import (ATZipCodeField, ATStateSelect,
                                  ATSocialSecurityNumberField)


class ATLocalFlavorTests(SimpleTestCase):
    def test_ATStateSelect(self):
        f = ATStateSelect()
        out = '''<select name="bundesland">
<option value="BL">Burgenland</option>
<option value="KA">Carinthia</option>
<option value="NO">Lower Austria</option>
<option value="OO">Upper Austria</option>
<option value="SA">Salzburg</option>
<option value="ST">Styria</option>
<option value="TI">Tyrol</option>
<option value="VO">Vorarlberg</option>
<option value="WI" selected="selected">Vienna</option>
</select>'''
        self.assertHTMLEqual(f.render('bundesland', 'WI'), out)

    def test_ATZipCodeField(self):
        error_format = ['Enter a zip code in the format XXXX.']
        valid = {
            '1150': '1150',
            '4020': '4020',
            '8020': '8020',
        }
        invalid = {
            '0000': error_format,
            '0123': error_format,
            '111222': error_format,
            'eeffee': error_format,
        }
        self.assertFieldOutput(ATZipCodeField, valid, invalid)

    def test_ATSocialSecurityNumberField(self):
        error_format = ['Enter a valid Austrian Social Security Number in '
                        'XXXX XXXXXX format.']
        valid = {
            '1237 010180': '1237 010180',
        }
        invalid = {
            '1237 010181': error_format,
            '12370 010180': error_format,
        }
        self.assertFieldOutput(ATSocialSecurityNumberField, valid, invalid)

########NEW FILE########
__FILENAME__ = forms
from __future__ import absolute_import

from django.forms import ModelForm

from .models import AustralianPlace


class AustralianPlaceForm(ModelForm):
    """ Form for storing an Australian place. """
    class Meta:
        model = AustralianPlace
        fields = ('state', 'state_required', 'state_default', 'postcode', 'postcode_required', 'postcode_default',
                  'phone', 'name')

########NEW FILE########
__FILENAME__ = models
from django.db import models

from localflavor.au.models import (AUStateField, AUPostCodeField,
                                   AUPhoneNumberField)


class AustralianPlace(models.Model):
    state = AUStateField(blank=True)
    state_required = AUStateField()
    state_default = AUStateField(default="NSW", blank=True)
    postcode = AUPostCodeField(blank=True)
    postcode_required = AUPostCodeField()
    postcode_default = AUPostCodeField(default="2500", blank=True)
    phone = AUPhoneNumberField(blank=True)
    name = models.CharField(max_length=20)

########NEW FILE########
__FILENAME__ = tests
from __future__ import absolute_import, unicode_literals

import re

from django.test import TestCase

from localflavor.au.forms import (AUPostCodeField, AUPhoneNumberField,
                                  AUStateSelect)
from .forms import AustralianPlaceForm


SELECTED_OPTION_PATTERN = r'<option value="%s" selected="selected">'
BLANK_OPTION_PATTERN = r'<option value="">'
INPUT_VALUE_PATTERN = r'<input[^>]*value="%s"[^>]*>'


class AULocalflavorTests(TestCase):

    def setUp(self):
        self.form = AustralianPlaceForm(
            {'state': 'WA',
             'state_required': 'QLD',
             'name': 'dummy',
             'postcode': '1234',
             'postcode_required': '4321',
             })

    def test_get_display_methods(self):
        """ Ensure get_*_display() methods are added to model instances. """
        place = self.form.save()
        self.assertEqual(place.get_state_display(), 'Western Australia')
        self.assertEqual(place.get_state_required_display(), 'Queensland')

    def test_default_values(self):
        """ Ensure that default values are selected in forms. """
        form = AustralianPlaceForm()
        self.assertTrue(re.search(SELECTED_OPTION_PATTERN % 'NSW',
                                  str(form['state_default'])))
        self.assertTrue(re.search(INPUT_VALUE_PATTERN % '2500',
                                  str(form['postcode_default'])))

    def test_required(self):
        """ Test that required AUStateFields throw appropriate errors. """
        form = AustralianPlaceForm({'state': 'NSW', 'name': 'Wollongong'})
        self.assertFalse(form.is_valid())
        self.assertEqual(
            form.errors['state_required'], ['This field is required.'])
        self.assertEqual(
            form.errors['postcode_required'], ['This field is required.'])

    def test_field_blank_option(self):
        """ Test that the empty option is there. """
        self.assertTrue(re.search(BLANK_OPTION_PATTERN,
                                  str(self.form['state'])))

    def test_selected_values(self):
        """ Ensure selected states match the initial values provided. """
        self.assertTrue(re.search(SELECTED_OPTION_PATTERN % 'WA',
                                  str(self.form['state'])))
        self.assertTrue(re.search(SELECTED_OPTION_PATTERN % 'QLD',
                                  str(self.form['state_required'])))
        self.assertTrue(re.search(INPUT_VALUE_PATTERN % '1234',
                                  str(self.form['postcode'])))
        self.assertTrue(re.search(INPUT_VALUE_PATTERN % '4321',
                                  str(self.form['postcode_required'])))

    def test_AUStateSelect(self):
        f = AUStateSelect()
        out = '''<select name="state">
<option value="ACT">Australian Capital Territory</option>
<option value="NSW" selected="selected">New South Wales</option>
<option value="NT">Northern Territory</option>
<option value="QLD">Queensland</option>
<option value="SA">South Australia</option>
<option value="TAS">Tasmania</option>
<option value="VIC">Victoria</option>
<option value="WA">Western Australia</option>
</select>'''
        self.assertHTMLEqual(f.render('state', 'NSW'), out)

    def test_AUPostCodeField(self):
        error_format = ['Enter a 4 digit postcode.']
        valid = {
            '1234': '1234',
            '2000': '2000',
        }
        invalid = {
            'abcd': error_format,
            '20001': ['Ensure this value has at most 4 characters (it has 5).'] + error_format,
        }
        self.assertFieldOutput(AUPostCodeField, valid, invalid)

    def test_AUPhoneNumberField(self):
        error_format = ['Phone numbers must contain 10 digits.']
        valid = {
            '1234567890': '1234567890',
            '0213456789': '0213456789',
            '02 13 45 67 89': '0213456789',
            '(02) 1345 6789': '0213456789',
            '(02) 1345-6789': '0213456789',
            '(02)1345-6789': '0213456789',
            '0408 123 456': '0408123456',
        }
        invalid = {
            '123': error_format,
            '1800DJANGO': error_format,
        }
        self.assertFieldOutput(AUPhoneNumberField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_be
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.be.forms import (BEPostalCodeField, BEPhoneNumberField,
                                  BERegionSelect, BEProvinceSelect)


class BELocalFlavorTests(SimpleTestCase):
    def test_BEPostalCodeField(self):
        error_format = ['Enter a valid postal code in the range and format 1XXX - 9XXX.']
        valid = {
            '1451': '1451',
            '2540': '2540',
        }
        invalid = {
            '0287': error_format,
            '14309': error_format,
            '873': error_format,
            '35 74': error_format,
            '859A': error_format,
        }
        self.assertFieldOutput(BEPostalCodeField, valid, invalid)

    def test_BEPhoneNumberField(self):
        error_format = [
            ('Enter a valid phone number in one of the formats 0x xxx xx xx, '
                '0xx xx xx xx, 04xx xx xx xx, 0x/xxx.xx.xx, 0xx/xx.xx.xx, '
                '04xx/xx.xx.xx, 0x.xxx.xx.xx, 0xx.xx.xx.xx, 04xx.xx.xx.xx, '
                '0xxxxxxxx or 04xxxxxxxx.')
        ]
        valid = {
            '01 234 56 78': '01 234 56 78',
            '01/234.56.78': '01/234.56.78',
            '01.234.56.78': '01.234.56.78',
            '012 34 56 78': '012 34 56 78',
            '012/34.56.78': '012/34.56.78',
            '012.34.56.78': '012.34.56.78',
            '0412 34 56 78': '0412 34 56 78',
            '0412/34.56.78': '0412/34.56.78',
            '0412.34.56.78': '0412.34.56.78',
            '012345678': '012345678',
            '0412345678': '0412345678',
        }
        invalid = {
            '01234567': error_format,
            '12/345.67.89': error_format,
            '012/345.678.90': error_format,
            '012/34.56.789': error_format,
            '0123/45.67.89': error_format,
            '012/345 678 90': error_format,
            '012/34 56 789': error_format,
            '012.34 56 789': error_format,
        }
        self.assertFieldOutput(BEPhoneNumberField, valid, invalid)

    def test_BERegionSelect(self):
        f = BERegionSelect()
        out = '''<select name="regions">
<option value="BRU">Brussels Capital Region</option>
<option value="VLG" selected="selected">Flemish Region</option>
<option value="WAL">Wallonia</option>
</select>'''
        self.assertHTMLEqual(f.render('regions', 'VLG'), out)

    def test_BEProvinceSelect(self):
        f = BEProvinceSelect()
        out = '''<select name="provinces">
<option value="VAN">Antwerp</option>
<option value="BRU">Brussels</option>
<option value="VOV">East Flanders</option>
<option value="VBR">Flemish Brabant</option>
<option value="WHT">Hainaut</option>
<option value="WLG" selected="selected">Liege</option>
<option value="VLI">Limburg</option>
<option value="WLX">Luxembourg</option>
<option value="WNA">Namur</option>
<option value="WBR">Walloon Brabant</option>
<option value="VWV">West Flanders</option>
</select>'''
        self.assertHTMLEqual(f.render('provinces', 'WLG'), out)

########NEW FILE########
__FILENAME__ = test_br
# -*- encoding: utf-8 -*-
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.br.forms import (BRZipCodeField, BRCNPJField, BRCPFField,
                                  BRPhoneNumberField, BRStateSelect,
                                  BRStateChoiceField)


class BRLocalFlavorTests(SimpleTestCase):
    def test_BRZipCodeField(self):
        error_format = ['Enter a zip code in the format XXXXX-XXX.']
        valid = {
            '12345-123': '12345-123',
        }
        invalid = {
            '12345_123': error_format,
            '1234-123': error_format,
            'abcde-abc': error_format,
            '12345-': error_format,
            '-123': error_format,
        }
        self.assertFieldOutput(BRZipCodeField, valid, invalid)

    def test_BRCNPJField(self):
        error_format = ['Invalid CNPJ number.']
        error_numbersonly = ['This field requires only numbers.']
        valid = {
            '64.132.916/0001-88': '64.132.916/0001-88',
            '64-132-916/0001-88': '64-132-916/0001-88',
            '64132916/0001-88': '64132916/0001-88',
        }
        invalid = {
            '12-345-678/9012-10': error_format,
            '12.345.678/9012-10': error_format,
            '12345678/9012-10': error_format,
            '64.132.916/0001-XX': error_numbersonly,
        }
        self.assertFieldOutput(BRCNPJField, valid, invalid)

    def test_BRCPFField(self):
        error_format = ['Invalid CPF number.']
        error_numbersonly = ['This field requires only numbers.']
        error_atmost_chars = ['Ensure this value has at most 14 characters (it has 15).']
        error_atleast_chars = ['Ensure this value has at least 11 characters (it has 10).']
        error_atmost = ['This field requires at most 11 digits or 14 characters.']
        valid = {
            '663.256.017-26': '663.256.017-26',
            '66325601726': '66325601726',
            '375.788.573-20': '375.788.573-20',
            '84828509895': '84828509895',
        }
        invalid = {
            '489.294.654-54': error_format,
            '295.669.575-98': error_format,
            '111.111.111-11': error_format,
            '11111111111': error_format,
            '222.222.222-22': error_format,
            '22222222222': error_format,
            '539.315.127-22': error_format,
            '375.788.573-XX': error_numbersonly,
            '375.788.573-000': error_atmost_chars,
            '123.456.78': error_atleast_chars,
            '123456789555': error_atmost,
        }
        self.assertFieldOutput(BRCPFField, valid, invalid)

    def test_BRPhoneNumberField(self):
        error_format = [('Phone numbers must be in either of the following '
                         'formats: XX-XXXX-XXXX or XX-XXXXX-XXXX.')]
        valid = {
            '41-3562-3464': '41-3562-3464',
            '4135623464': '41-3562-3464',
            '41 3562-3464': '41-3562-3464',
            '41 3562 3464': '41-3562-3464',
            '(41) 3562 3464': '41-3562-3464',
            '41.3562.3464': '41-3562-3464',
            '41.93562.3464': '41-93562-3464',
            '41.3562-3464': '41-3562-3464',
            ' (41) 3562.3464': '41-3562-3464',
            ' (41) 98765.3464': '41-98765-3464',
            '(16) 91342-4325': '16-91342-4325',
        }
        invalid = {
            '11-914-925': error_format,
            '11-9144-43925': error_format,
            '11-91342-94325': error_format,
            '411-9134-9435': error_format,
            '+55-41-3562-3464': error_format,
            '41 3562–3464': error_format,
        }
        self.assertFieldOutput(BRPhoneNumberField, valid, invalid)

    def test_BRStateSelect(self):
        f = BRStateSelect()
        out = '''<select name="states">
<option value="AC">Acre</option>
<option value="AL">Alagoas</option>
<option value="AP">Amap\xe1</option>
<option value="AM">Amazonas</option>
<option value="BA">Bahia</option>
<option value="CE">Cear\xe1</option>
<option value="DF">Distrito Federal</option>
<option value="ES">Esp\xedrito Santo</option>
<option value="GO">Goi\xe1s</option>
<option value="MA">Maranh\xe3o</option>
<option value="MT">Mato Grosso</option>
<option value="MS">Mato Grosso do Sul</option>
<option value="MG">Minas Gerais</option>
<option value="PA">Par\xe1</option>
<option value="PB">Para\xedba</option>
<option value="PR" selected="selected">Paran\xe1</option>
<option value="PE">Pernambuco</option>
<option value="PI">Piau\xed</option>
<option value="RJ">Rio de Janeiro</option>
<option value="RN">Rio Grande do Norte</option>
<option value="RS">Rio Grande do Sul</option>
<option value="RO">Rond\xf4nia</option>
<option value="RR">Roraima</option>
<option value="SC">Santa Catarina</option>
<option value="SP">S\xe3o Paulo</option>
<option value="SE">Sergipe</option>
<option value="TO">Tocantins</option>
</select>'''
        self.assertHTMLEqual(f.render('states', 'PR'), out)

    def test_BRStateChoiceField(self):
        error_invalid = ['Select a valid brazilian state. That state is not one of the available states.']
        valid = {
            'AC': 'AC',
            'AL': 'AL',
            'AP': 'AP',
            'AM': 'AM',
            'BA': 'BA',
            'CE': 'CE',
            'DF': 'DF',
            'ES': 'ES',
            'GO': 'GO',
            'MA': 'MA',
            'MT': 'MT',
            'MS': 'MS',
            'MG': 'MG',
            'PA': 'PA',
            'PB': 'PB',
            'PR': 'PR',
            'PE': 'PE',
            'PI': 'PI',
            'RJ': 'RJ',
            'RN': 'RN',
            'RS': 'RS',
            'RO': 'RO',
            'RR': 'RR',
            'SC': 'SC',
            'SP': 'SP',
            'SE': 'SE',
            'TO': 'TO',
        }
        invalid = {
            'pr': error_invalid,
        }
        self.assertFieldOutput(BRStateChoiceField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_ca
from __future__ import unicode_literals

from django.test.testcases import SimpleTestCase
from django.utils.translation import activate, deactivate, get_language

from localflavor.ca.forms import (CAPhoneNumberField, CAPostalCodeField,
                                  CAProvinceField, CAProvinceSelect,
                                  CASocialInsuranceNumberField)


class CALocalFlavorTests(SimpleTestCase):
    def setUp(self):
        self.original_language = get_language()
        deactivate()

    def tearDown(self):
        activate(self.original_language)

    def test_CAProvinceSelect(self):
        f = CAProvinceSelect()
        out = '''<select name="province">
<option value="AB" selected="selected">Alberta</option>
<option value="BC">British Columbia</option>
<option value="MB">Manitoba</option>
<option value="NB">New Brunswick</option>
<option value="NL">Newfoundland and Labrador</option>
<option value="NT">Northwest Territories</option>
<option value="NS">Nova Scotia</option>
<option value="NU">Nunavut</option>
<option value="ON">Ontario</option>
<option value="PE">Prince Edward Island</option>
<option value="QC">Quebec</option>
<option value="SK">Saskatchewan</option>
<option value="YT">Yukon</option>
</select>'''
        self.assertHTMLEqual(f.render('province', 'AB'), out)

    def test_CAPostalCodeField(self):
        error_format = ['Enter a postal code in the format XXX XXX.']
        valid = {
            'T2S 2H7': 'T2S 2H7',
            'T2S 2W7': 'T2S 2W7',
            'T2S 2Z7': 'T2S 2Z7',
            'T2Z 2H7': 'T2Z 2H7',
            'T2S2H7': 'T2S 2H7',
            't2s 2h7': 'T2S 2H7',
            't2s2h7': 'T2S 2H7',
            't2s            2H7': 'T2S 2H7',
            '  t2s    2H7  ': 'T2S 2H7',
        }
        invalid = {
            'T2S 2H': error_format,
            '2T6 H8I': error_format,
            'T2S2H': error_format,
            't2s h8i': error_format,
            90210: error_format,
            'W2S 2H3': error_format,
            'Z2S 2H3': error_format,
            'F2S 2H3': error_format,
            'A2S 2D3': error_format,
            'A2I 2R3': error_format,
            'A2Q 2R3': error_format,
            'U2B 2R3': error_format,
            'O2B 2R3': error_format,
        }
        self.assertFieldOutput(CAPostalCodeField, valid, invalid)

    def test_CAPhoneNumberField(self):
        error_format = ['Phone numbers must be in XXX-XXX-XXXX format.']
        valid = {
            '403-555-1212': '403-555-1212',
            '4035551212': '403-555-1212',
            '403 555-1212': '403-555-1212',
            '(403) 555-1212': '403-555-1212',
            '403 555 1212': '403-555-1212',
            '403.555.1212': '403-555-1212',
            '403.555-1212': '403-555-1212',
            ' (403) 555.1212 ': '403-555-1212',
        }
        invalid = {
            '555-1212': error_format,
            '403-55-1212': error_format,
        }
        self.assertFieldOutput(CAPhoneNumberField, valid, invalid)

    def test_CAProvinceField(self):
        error_format = ['Enter a Canadian province or territory.']
        valid = {
            'ab': 'AB',
            'BC': 'BC',
            'nova scotia': 'NS',
            '  manitoba ': 'MB',
            'pq': 'QC',
        }
        invalid = {
            'T2S 2H7': error_format,
        }
        self.assertFieldOutput(CAProvinceField, valid, invalid)

    def test_CASocialInsuranceField(self):
        error_format = ['Enter a valid Canadian Social Insurance number in XXX-XXX-XXX format.']
        valid = {
            '046-454-286': '046-454-286',
        }
        invalid = {
            '046-454-287': error_format,
            '046 454 286': error_format,
            '046-44-286': error_format,
        }
        self.assertFieldOutput(CASocialInsuranceNumberField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_ch
from __future__ import unicode_literals

from django.test import SimpleTestCase
from django.utils.translation import override, ugettext as _

from localflavor.ch.forms import (CHZipCodeField, CHPhoneNumberField,
                                  CHIdentityCardNumberField, CHStateSelect)


class CHLocalFlavorTests(SimpleTestCase):

    def test_CHStateSelect(self):
        with override('en'):
            f = CHStateSelect()
            out = '''<select name="state">
<option value="AG" selected="selected">Aargau</option>
<option value="AI">Appenzell Innerrhoden</option>
<option value="AR">Appenzell Ausserrhoden</option>
<option value="BS">Basel-Stadt</option>
<option value="BL">Basel-Land</option>
<option value="BE">Berne</option>
<option value="FR">Fribourg</option>
<option value="GE">Geneva</option>
<option value="GL">Glarus</option>
<option value="GR">Graubuenden</option>
<option value="JU">Jura</option>
<option value="LU">Lucerne</option>
<option value="NE">Neuchatel</option>
<option value="NW">Nidwalden</option>
<option value="OW">Obwalden</option>
<option value="SH">Schaffhausen</option>
<option value="SZ">Schwyz</option>
<option value="SO">Solothurn</option>
<option value="SG">St. Gallen</option>
<option value="TG">Thurgau</option>
<option value="TI">Ticino</option>
<option value="UR">Uri</option>
<option value="VS">Valais</option>
<option value="VD">Vaud</option>
<option value="ZG">Zug</option>
<option value="ZH">Zurich</option>
</select>'''
            self.assertHTMLEqual(f.render('state', 'AG'), out)

    def test_CHZipCodeField(self):
        error_format = [_('Enter a zip code in the format XXXX.')]
        valid = {
            '1234': '1234',
            '0000': '0000',
        }
        invalid = {
            '800x': error_format,
            '80 00': error_format,
        }
        self.assertFieldOutput(CHZipCodeField, valid, invalid)

    def test_CHPhoneNumberField(self):
        error_format = [_('Phone numbers must be in 0XX XXX XX XX format.')]
        valid = {
            '012 345 67 89': '012 345 67 89',
            '0123456789': '012 345 67 89',
        }
        invalid = {
            '01234567890': error_format,
            '1234567890': error_format,
        }
        self.assertFieldOutput(CHPhoneNumberField, valid, invalid)

    def test_CHIdentityCardNumberField(self):
        error_format = [_('Enter a valid Swiss identity or passport card number in X1234567<0 or 1234567890 format.')]
        valid = {
            'C1234567<0': 'C1234567<0',
            '2123456700': '2123456700',
        }
        invalid = {
            'C1234567<1': error_format,
            '2123456701': error_format,
        }
        self.assertFieldOutput(CHIdentityCardNumberField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_cl
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.cl.forms import CLRutField, CLRegionSelect


class CLLocalFlavorTests(SimpleTestCase):
    def test_CLRegionSelect(self):
        f = CLRegionSelect()
        out = '''<select name="foo">
<option value="RM">Regi\xf3n Metropolitana de Santiago</option>
<option value="I">Regi\xf3n de Tarapac\xe1</option>
<option value="II">Regi\xf3n de Antofagasta</option>
<option value="III">Regi\xf3n de Atacama</option>
<option value="IV">Regi\xf3n de Coquimbo</option>
<option value="V">Regi\xf3n de Valpara\xedso</option>
<option value="VI">Regi\xf3n del Libertador Bernardo O&#39;Higgins</option>
<option value="VII">Regi\xf3n del Maule</option>
<option value="VIII">Regi\xf3n del B\xedo B\xedo</option>
<option value="IX">Regi\xf3n de la Araucan\xeda</option>
<option value="X">Regi\xf3n de los Lagos</option>
<option value="XI">Regi\xf3n de Ays\xe9n del General Carlos Ib\xe1\xf1ez del Campo</option>
<option value="XII">Regi\xf3n de Magallanes y la Ant\xe1rtica Chilena</option>
<option value="XIV">Regi\xf3n de Los R\xedos</option>
<option value="XV">Regi\xf3n de Arica-Parinacota</option>
</select>'''
        self.assertHTMLEqual(f.render('foo', 'bar'), out)

    def test_CLRutField(self):
        error_invalid = ['The Chilean RUT is not valid.']
        error_format = ['Enter a valid Chilean RUT. The format is XX.XXX.XXX-X.']
        valid = {
            '11-6': '11-6',
            '116': '11-6',
            '767484100': '76.748.410-0',
            '78.412.790-7': '78.412.790-7',
            '8.334.6043': '8.334.604-3',
            '76793310-K': '76.793.310-K',
            '76793310-k': '76.793.310-K',
        }
        invalid = {
            '11.111.111-0': error_invalid,
            '111': error_invalid,
        }
        self.assertFieldOutput(CLRutField, valid, invalid)

        # deal with special "Strict Mode".
        invalid = {
            '11-6': error_format,
            '767484100': error_format,
            '8.334.6043': error_format,
            '76793310-K': error_format,
            '11.111.111-0': error_invalid
        }
        self.assertFieldOutput(CLRutField,
                               {}, invalid, field_kwargs={"strict": True}
                               )

########NEW FILE########
__FILENAME__ = test_cn
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.cn.forms import (CNProvinceSelect, CNPostCodeField,
                                  CNIDCardField, CNPhoneNumberField,
                                  CNCellNumberField)


class CNLocalFlavorTests(SimpleTestCase):
    def test_CNProvinceSelect(self):
        f = CNProvinceSelect()
        correct_output = '''<select name="provinces">
<option value="anhui">\u5b89\u5fbd</option>
<option value="beijing">\u5317\u4eac</option>
<option value="chongqing">\u91cd\u5e86</option>
<option value="fujian">\u798f\u5efa</option>
<option value="gansu">\u7518\u8083</option>
<option value="guangdong">\u5e7f\u4e1c</option>
<option value="guangxi">\u5e7f\u897f\u58ee\u65cf\u81ea\u6cbb\u533a</option>
<option value="guizhou">\u8d35\u5dde</option>
<option value="hainan">\u6d77\u5357</option>
<option value="hebei">\u6cb3\u5317</option>
<option value="heilongjiang">\u9ed1\u9f99\u6c5f</option>
<option value="henan">\u6cb3\u5357</option>
<option value="hongkong">\u9999\u6e2f</option>
<option value="hubei" selected="selected">\u6e56\u5317</option>
<option value="hunan">\u6e56\u5357</option>
<option value="jiangsu">\u6c5f\u82cf</option>
<option value="jiangxi">\u6c5f\u897f</option>
<option value="jilin">\u5409\u6797</option>
<option value="liaoning">\u8fbd\u5b81</option>
<option value="macao">\u6fb3\u95e8</option>
<option value="neimongol">\u5185\u8499\u53e4\u81ea\u6cbb\u533a</option>
<option value="ningxia">\u5b81\u590f\u56de\u65cf\u81ea\u6cbb\u533a</option>
<option value="qinghai">\u9752\u6d77</option>
<option value="shaanxi">\u9655\u897f</option>
<option value="shandong">\u5c71\u4e1c</option>
<option value="shanghai">\u4e0a\u6d77</option>
<option value="shanxi">\u5c71\u897f</option>
<option value="sichuan">\u56db\u5ddd</option>
<option value="taiwan">\u53f0\u6e7e</option>
<option value="tianjin">\u5929\u6d25</option>
<option value="xinjiang">\u65b0\u7586\u7ef4\u543e\u5c14\u81ea\u6cbb\u533a</option>
<option value="xizang">\u897f\u85cf\u81ea\u6cbb\u533a</option>
<option value="yunnan">\u4e91\u5357</option>
<option value="zhejiang">\u6d59\u6c5f</option>
</select>'''
        self.assertHTMLEqual(f.render('provinces', 'hubei'), correct_output)

    def test_CNPostCodeField(self):
        error_format = ['Enter a post code in the format XXXXXX.']
        valid = {
            '091209': '091209'
        }
        invalid = {
            '09120': error_format,
            '09120916': error_format
        }
        self.assertFieldOutput(CNPostCodeField, valid, invalid)

    def test_CNIDCardField(self):
        valid = {
            # A valid 1st generation ID Card Number.
            '110101491001001': '110101491001001',
            # A valid 2nd generation ID Card number.
            '11010119491001001X': '11010119491001001X',
            # Another valid 2nd gen ID Number with a case change
            '11010119491001001x': '11010119491001001X'
        }

        wrong_format = ['ID Card Number consists of 15 or 18 digits.']
        wrong_location = ['Invalid ID Card Number: Wrong location code']
        wrong_bday = ['Invalid ID Card Number: Wrong birthdate']
        wrong_checksum = ['Invalid ID Card Number: Wrong checksum']

        invalid = {
            'abcdefghijklmnop': wrong_format,
            '1010101010101010': wrong_format,
            '010101491001001': wrong_location,  # 1st gen, 01 is invalid
            '110101491041001': wrong_bday,  # 1st gen. There wasn't day 41
            '92010119491001001X': wrong_location,  # 2nd gen, 92 is invalid
            '91010119491301001X': wrong_bday,
            # 2nd gen, 19491301 is invalid date
            '910101194910010014': wrong_checksum  # 2nd gen
        }
        self.assertFieldOutput(CNIDCardField, valid, invalid)

    def test_CNPhoneNumberField(self):
        error_format = ['Enter a valid phone number.']
        valid = {
            '010-12345678': '010-12345678',
            '010-1234567': '010-1234567',
            '0101-12345678': '0101-12345678',
            '0101-1234567': '0101-1234567',
            '010-12345678-020': '010-12345678-020'
        }
        invalid = {
            '01x-12345678': error_format,
            '12345678': error_format,
            '01123-12345678': error_format,
            '010-123456789': error_format,
            '010-12345678-': error_format
        }
        self.assertFieldOutput(CNPhoneNumberField, valid, invalid)

    def test_CNCellNumberField(self):
        error_format = ['Enter a valid cell number.']
        valid = {
            '13012345678': '13012345678',
            '14700010002': '14700010002',
        }
        invalid = {
            '130123456789': error_format,
            '16012345678': error_format
        }
        self.assertFieldOutput(CNCellNumberField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_co
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.co.forms import CODepartmentSelect


class COLocalFlavorTests(SimpleTestCase):
    def test_CODepartmentSelect(self):
        d = CODepartmentSelect()
        out = """<select name="department">
<option value="AMA">Amazonas</option>
<option value="ANT">Antioquia</option>
<option value="ARA">Arauca</option>
<option value="ATL">Atl\xe1ntico</option>
<option value="DC">Bogot\xe1</option>
<option value="BOL">Bol\xedvar</option>
<option value="BOY">Boyac\xe1</option>
<option value="CAL">Caldas</option>
<option value="CAQ">Caquet\xe1</option>
<option value="CAS">Casanare</option>
<option value="CAU">Cauca</option>
<option value="CES">Cesar</option>
<option value="CHO">Choc\xf3</option>
<option value="COR" selected="selected">C\xf3rdoba</option>
<option value="CUN">Cundinamarca</option>
<option value="GUA">Guain\xeda</option>
<option value="GUV">Guaviare</option>
<option value="HUI">Huila</option>
<option value="LAG">La Guajira</option>
<option value="MAG">Magdalena</option>
<option value="MET">Meta</option>
<option value="NAR">Nari\xf1o</option>
<option value="NSA">Norte de Santander</option>
<option value="PUT">Putumayo</option>
<option value="QUI">Quind\xedo</option>
<option value="RIS">Risaralda</option>
<option value="SAP">San Andr\xe9s and Providencia</option>
<option value="SAN">Santander</option>
<option value="SUC">Sucre</option>
<option value="TOL">Tolima</option>
<option value="VAC">Valle del Cauca</option>
<option value="VAU">Vaup\xe9s</option>
<option value="VID">Vichada</option>
</select>"""
        self.assertHTMLEqual(d.render('department', 'COR'), out)

########NEW FILE########
__FILENAME__ = test_cz
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.cz.forms import (CZPostalCodeField, CZRegionSelect,
                                  CZBirthNumberField, CZICNumberField)


class CZLocalFlavorTests(SimpleTestCase):
    def test_CZRegionSelect(self):
        f = CZRegionSelect()
        out = '''<select name="regions">
<option value="PR">Prague</option>
<option value="CE">Central Bohemian Region</option>
<option value="SO">South Bohemian Region</option>
<option value="PI">Pilsen Region</option>
<option value="CA">Carlsbad Region</option>
<option value="US">Usti Region</option>
<option value="LB">Liberec Region</option>
<option value="HK">Hradec Region</option>
<option value="PA">Pardubice Region</option>
<option value="VY">Vysocina Region</option>
<option value="SM">South Moravian Region</option>
<option value="OL">Olomouc Region</option>
<option value="ZL">Zlin Region</option>
<option value="MS">Moravian-Silesian Region</option>
</select>'''
        self.assertHTMLEqual(f.render('regions', 'TT'), out)

    def test_CZPostalCodeField(self):
        error_format = ['Enter a postal code in the format XXXXX or XXX XX.']
        valid = {
            '91909': '91909',
            '917 01': '91701',
            '12345': '12345',
        }
        invalid = {
            '84545x': error_format,
            '123456': error_format,
            '1234': error_format,
            '123 4': error_format,
        }
        self.assertFieldOutput(CZPostalCodeField, valid, invalid)

    def test_CZBirthNumberField(self):
        error_format = ['Enter a birth number in the format XXXXXX/XXXX or XXXXXXXXXX.']
        error_invalid = ['Enter a valid birth number.']
        valid = {
            '880523/1237': '880523/1237',
            '8805231237': '8805231237',
            '880523/000': '880523/000',
            '880523000': '880523000',
            '882101/0011': '882101/0011',
        }
        invalid = {
            '123456/12': error_format,
            '123456/12345': error_format,
            '12345612': error_format,
            '12345612345': error_format,
            '880523/1239': error_invalid,
            '8805231239': error_invalid,
            '990101/0011': error_invalid,
        }
        self.assertFieldOutput(CZBirthNumberField, valid, invalid)

    def test_CZICNumberField(self):
        error_invalid = ['Enter a valid IC number.']
        valid = {
            '12345679': '12345679',
            '12345601': '12345601',
            '12345661': '12345661',
            '12345610': '12345610',
        }
        invalid = {
            '1234567': error_invalid,
            '12345660': error_invalid,
            '12345600': error_invalid,
        }
        self.assertFieldOutput(CZICNumberField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_de
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.de.forms import (DEZipCodeField, DEStateSelect,
                                  DEIdentityCardNumberField)


class DELocalFlavorTests(SimpleTestCase):
    def test_DEStateSelect(self):
        f = DEStateSelect()
        out = '''<select name="states">
<option value="BW">Baden-Wuerttemberg</option>
<option value="BY">Bavaria</option>
<option value="BE">Berlin</option>
<option value="BB">Brandenburg</option>
<option value="HB">Bremen</option>
<option value="HH">Hamburg</option>
<option value="HE">Hessen</option>
<option value="MV">Mecklenburg-Western Pomerania</option>
<option value="NI">Lower Saxony</option>
<option value="NW">North Rhine-Westphalia</option>
<option value="RP">Rhineland-Palatinate</option>
<option value="SL">Saarland</option>
<option value="SN">Saxony</option>
<option value="ST">Saxony-Anhalt</option>
<option value="SH">Schleswig-Holstein</option>
<option value="TH" selected="selected">Thuringia</option>
</select>'''
        self.assertHTMLEqual(f.render('states', 'TH'), out)

    def test_DEZipCodeField(self):
        error_format = ['Enter a zip code in the format XXXXX.']
        valid = {
            '99423': '99423',
        }
        invalid = {
            ' 99423': error_format,
        }
        self.assertFieldOutput(DEZipCodeField, valid, invalid)

    def test_DEIdentityCardNumberField(self):
        error_format = ['Enter a valid German identity card number in XXXXXXXXXXX-XXXXXXX-XXXXXXX-X format.']
        valid = {
            '7549313035D-6004103-0903042-0': '7549313035D-6004103-0903042-0',
            '9786324830D 6104243 0910271 2': '9786324830D-6104243-0910271-2',
        }
        invalid = {
            '0434657485D-6407276-0508137-9': error_format,
        }
        self.assertFieldOutput(DEIdentityCardNumberField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_dk
# coding: utf-8
from __future__ import unicode_literals
from django.test import SimpleTestCase
from django.utils.translation import ugettext_lazy as _, override

from localflavor.dk.forms import (
    DKPhoneNumberField,
    DKPostalCodeField,
    DKMunicipalitySelect
)


class DKLocalFlavorTests(SimpleTestCase):

    def test_DKPostalCodeField(self):
        error_format = [_("Enter a postal code in the format XXXX.")]
        valid = {
            "4600": "4600",
        }
        invalid = {
            "12": error_format,  # to few digits
            "abcd": error_format,  # illegal characters
            "12345": error_format,  # to many digits
        }
        self.assertFieldOutput(DKPostalCodeField, valid, invalid)

    def test_DKPhoneNumberField(self):
        error_format = [
            _("A phone number must be 8 digits and may have country code")
        ]
        valid = {
            "12345678": "12345678",
            "12 34 56 78": "12 34 56 78",
            "+4512345678": "+4512345678",
            "+45 12345678": "+45 12345678",
            "+45 12 34 56 78": "+45 12 34 56 78",
        }
        invalid = {
            "12": error_format,  # too few digits
            "abcdefgh": error_format,  # illegal characters
            "1234567890": error_format,  # too many digits
            "+4712345678": error_format,  # wrong country code
        }
        self.assertFieldOutput(DKPhoneNumberField, valid, invalid)

    def test_DKMunicipalitySelect(self):
        with override("en"):
            f = DKMunicipalitySelect()
            out = """
<select name="municipalities">
    <optgroup label="Region Hovedstaden">
        <option value="albertslund">Albertslund</option>
        <option value="alleroed">Allerød</option>
        <option value="ballerup">Ballerup</option>
        <option value="bornholm">Bornholm</option>
        <option value="broendby">Brøndby</option>
        <option value="dragoer">Dragør</option>
        <option value="egedal">Egedal</option>
        <option value="fredensborg">Fredensborg</option>
        <option value="frederiksberg">Frederiksberg</option>
        <option value="frederikssund">Frederikssund</option>
        <option value="furesoe">Furesø</option>
        <option value="gentofte">Gentofte</option>
        <option value="gladsaxe">Gladsaxe</option>
        <option value="glostrup">Glostrup</option>
        <option value="gribskov">Gribskov</option>
        <option value="halsnaes">Halsnæs</option>
        <option value="helsingoer">Helsingør</option>
        <option value="herlev">Herlev</option>
        <option value="hilleroed">Hillerød</option>
        <option value="hvidovre">Hvidovre</option>
        <option value="hoeje-taastrup">Høje-Taastrup</option>
        <option value="hoersholm">Hørsholm</option>
        <option value="ishoej">Ishøj</option>
        <option value="koebenhavn">København</option>
        <option value="lyngby-taarbaek">Lyngby-Taarbæk</option>
        <option value="rudersdal">Rudersdal</option>
        <option value="roedovre">Rødovre</option>
        <option value="taarnby">Tårnby</option>
        <option value="vallensbaek">Vallensbæk</option>
    </optgroup>
    <optgroup label="Region Midtjylland">
        <option value="favrskov">Favrskov</option>
        <option value="hedensted">Hedensted</option>
        <option value="herning">Herning</option>
        <option value="holstebro">Holstebro</option>
        <option value="horsens">Horsens</option>
        <option value="ikast-Brande">Ikast-Brande</option>
        <option value="lemvig">Lemvig</option>
        <option value="norddjurs">Norddjurs</option>
        <option value="odder">Odder</option>
        <option value="randers">Randers</option>
        <option value="ringkoebing-skjern">Ringkøbing-Skjern</option>
        <option value="samsoe">Samsø</option>
        <option value="silkeborg">Silkeborg</option>
        <option value="skanderborg">Skanderborg</option>
        <option value="skive">Skive</option>
        <option value="struer">Struer</option>
        <option value="syddjurs">Syddjurs</option>
        <option value="viborg">Viborg</option>
        <option value="aarhus">Aarhus</option>
    </optgroup>
    <optgroup label="Region Nordjylland">
        <option value="broenderslev">Brønderslev</option>
        <option value="frederikshavn">Frederikshavn</option>
        <option value="hjoerring">Hjørring</option>
        <option value="jammerbugt">Jammerbugt</option>
        <option value="laesoe">Læsø</option>
        <option value="mariagerfjord">Mariagerfjord</option>
        <option value="morsoe">Morsø</option>
        <option value="rebild">Rebild</option>
        <option value="thisted">Thisted</option>
        <option value="vesthimmerland">Vesthimmerland</option>
        <option value="aalborg">Aalborg</option>
    </optgroup>
    <optgroup label="Region Sjælland">
        <option value="faxe">Faxe</option>
        <option value="greve">Greve</option>
        <option value="guldborgsund">Guldborgsund</option>
        <option value="holbaek">Holbæk</option>
        <option value="kalundborg">Kalundborg</option>
        <option value="koege" selected="selected">Køge</option>
        <option value="lejre">Lejre</option>
        <option value="lolland">Lolland</option>
        <option value="naestved">Næstved</option>
        <option value="odsherred">Odsherred</option>
        <option value="ringsted">Ringsted</option>
        <option value="roskilde">Roskilde</option>
        <option value="slagelse">Slagelse</option>
        <option value="solroed">Solrød</option>
        <option value="soroe">Sorø</option>
        <option value="stevns">Stevns</option>
        <option value="vordingborg">Vordingborg</option>
    </optgroup>
    <optgroup label="Region Syddanmark">
        <option value="assens">Assens</option>
        <option value="billund">Billund</option>
        <option value="esbjerg">Esbjerg</option>
        <option value="fanoe">Fanø</option>
        <option value="fredericia">Fredericia</option>
        <option value="faaborg-Midtfyn">Faaborg-Midtfyn</option>
        <option value="haderslev">Haderslev</option>
        <option value="kerteminde">Kerteminde</option>
        <option value="kolding">Kolding</option>
        <option value="langeland">Langeland</option>
        <option value="middelfart">Middelfart</option>
        <option value="nordfyn">Nordfyn</option>
        <option value="nyborg">Nyborg</option>
        <option value="odense">Odense</option>
        <option value="svendborg">Svendborg</option>
        <option value="soenderborg">Sønderborg</option>
        <option value="toender">Tønder</option>
        <option value="varde">Varde</option>
        <option value="vejen">Vejen</option>
        <option value="vejle">Vejle</option>
        <option value="aeroe">Ærø</option>
        <option value="aabenraa">Aabenraa</option>
    </optgroup>
</select>"""

        self.assertHTMLEqual(f.render("municipalities", "koege"), out)

########NEW FILE########
__FILENAME__ = test_ec
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.ec.forms import ECProvinceSelect


class ECLocalFlavorTests(SimpleTestCase):
    def test_ECProvinceSelect(self):
        p = ECProvinceSelect()
        out = """<select name="province">
<option value="A">Azuay</option>
<option value="B">Bol\xedvar</option>
<option value="F">Ca\xf1ar</option>
<option value="C">Carchi</option>
<option value="H">Chimborazo</option>
<option value="X">Cotopaxi</option>
<option value="O">El Oro</option>
<option value="E">Esmeraldas</option>
<option value="W">Gal\xe1pagos</option>
<option value="G">Guayas</option>
<option value="I">Imbabura</option>
<option value="L">Loja</option>
<option value="R">Los R\xedos</option>
<option value="M">Manab\xed</option>
<option value="S">Morona Santiago</option>
<option value="N">Napo</option>
<option value="D">Orellana</option>
<option value="Y">Pastaza</option>
<option value="P">Pichincha</option>
<option value="SE">Santa Elena</option>
<option value="SD">Santo Domingo de los Ts\xe1chilas</option>
<option value="U" selected="selected">Sucumb\xedos</option>
<option value="T">Tungurahua</option>
<option value="Z">Zamora Chinchipe</option>
</select>"""
        self.assertHTMLEqual(p.render('province', 'U'), out)

########NEW FILE########
__FILENAME__ = test_ee
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.ee.forms import (EEZipCodeField, EEPersonalIdentificationCode,
                                  EECountySelect)


class EELocalFlavorTests(SimpleTestCase):
    def test_EECountySelect(self):
        f = EECountySelect()
        out = '''<select name="county">
<option value="37" selected="selected">Harju County</option>
<option value="39">Hiiu County</option>
<option value="44">Ida-Viru County</option>
<option value="49">J\xf5geva County</option>
<option value="51">J\xe4rva County</option>
<option value="57">L\xe4\xe4ne County</option>
<option value="59">L\xe4\xe4ne-Viru County</option>
<option value="65">P\xf5lva County</option>
<option value="67">P\xe4rnu County</option>
<option value="70">Rapla County</option>
<option value="74">Saare County</option>
<option value="78">Tartu County</option>
<option value="82">Valga County</option>
<option value="84">Viljandi County</option>
<option value="86">V\xf5ru County</option>
</select>'''
        self.assertHTMLEqual(f.render('county', '37'), out)

    def test_EEZipCodeField(self):
        error_format = ['Enter a zip code in the format XXXXX.']
        valid = {
            '15165': '15165',
            '50090': '50090',
        }
        invalid = {
            '15I65': error_format,
            '999999': error_format,
            '01234': error_format,
        }
        self.assertFieldOutput(EEZipCodeField, valid, invalid)

    def test_EEPersonalIdentificationCode(self):
        invalid = ['Enter a valid Estonian personal identification code.']
        invalid_format = ['Enter an 11-digit Estonian personal identification code.']
        valid = {
            '32805100214': '32805100214',
            '61202291237': '61202291237',  # leap year
            '10001010002': '10001010002',  # checksum base 1
            '69912319998': '69912319998',  # checksum base 3
        }
        invalid = {
            '1234567890': invalid_format,
            '98765432100': invalid_format,  # invalid century
            '33333333333': invalid,  # invalid checksum
            '10102300002': invalid,  # invalid date
            '10000000001': invalid,  # invalid month/day
            '61402291232': invalid,  # not leap year
        }
        self.assertFieldOutput(EEPersonalIdentificationCode, valid, invalid)

########NEW FILE########
__FILENAME__ = test_es
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.es.forms import (ESPostalCodeField, ESPhoneNumberField,
                                  ESIdentityCardNumberField, ESCCCField,
                                  ESRegionSelect, ESProvinceSelect)


class ESLocalFlavorTests(SimpleTestCase):
    def test_ESRegionSelect(self):
        f = ESRegionSelect()
        out = '''<select name="regions">
<option value="AN">Andalusia</option>
<option value="AR">Aragon</option>
<option value="O">Principality of Asturias</option>
<option value="IB">Balearic Islands</option>
<option value="PV">Basque Country</option>
<option value="CN">Canary Islands</option>
<option value="S">Cantabria</option>
<option value="CM">Castile-La Mancha</option>
<option value="CL">Castile and Leon</option>
<option value="CT" selected="selected">Catalonia</option>
<option value="EX">Extremadura</option>
<option value="GA">Galicia</option>
<option value="LO">La Rioja</option>
<option value="M">Madrid</option>
<option value="MU">Region of Murcia</option>
<option value="NA">Foral Community of Navarre</option>
<option value="VC">Valencian Community</option>
<option value="CE">Autonomous city of Ceuta</option>
<option value="ML">Autonomous city of Mellila</option>
</select>'''
        self.assertHTMLEqual(f.render('regions', 'CT'), out)

    def test_ESProvinceSelect(self):
        f = ESProvinceSelect()
        out = '''<select name="provinces">
<option value="01">Araba</option>
<option value="02">Albacete</option>
<option value="03">Alacant</option>
<option value="04">Almeria</option>
<option value="05">Avila</option>
<option value="06">Badajoz</option>
<option value="07">Illes Balears</option>
<option value="08" selected="selected">Barcelona</option>
<option value="09">Burgos</option>
<option value="10">Caceres</option>
<option value="11">Cadiz</option>
<option value="12">Castello</option>
<option value="13">Ciudad Real</option>
<option value="14">Cordoba</option>
<option value="15">A Coruna</option>
<option value="16">Cuenca</option>
<option value="17">Girona</option>
<option value="18">Granada</option>
<option value="19">Guadalajara</option>
<option value="20">Guipuzkoa</option>
<option value="21">Huelva</option>
<option value="22">Huesca</option>
<option value="23">Jaen</option>
<option value="24">Leon</option>
<option value="25">Lleida</option>
<option value="26">La Rioja</option>
<option value="27">Lugo</option>
<option value="28">Madrid</option>
<option value="29">Malaga</option>
<option value="30">Murcia</option>
<option value="31">Navarre</option>
<option value="32">Ourense</option>
<option value="33">Asturias</option>
<option value="34">Palencia</option>
<option value="35">Las Palmas</option>
<option value="36">Pontevedra</option>
<option value="37">Salamanca</option>
<option value="38">Santa Cruz de Tenerife</option>
<option value="39">Cantabria</option>
<option value="40">Segovia</option>
<option value="41">Seville</option>
<option value="42">Soria</option>
<option value="43">Tarragona</option>
<option value="44">Teruel</option>
<option value="45">Toledo</option>
<option value="46">Valencia</option>
<option value="47">Valladolid</option>
<option value="48">Bizkaia</option>
<option value="49">Zamora</option>
<option value="50">Zaragoza</option>
<option value="51">Ceuta</option>
<option value="52">Melilla</option>
</select>'''
        self.assertHTMLEqual(f.render('provinces', '08'), out)

    def test_ESPostalCodeField(self):
        error_invalid = ['Enter a valid postal code in the range and format 01XXX - 52XXX.']
        valid = {
            '08028': '08028',
            '28080': '28080',
        }
        invalid = {
            '53001': error_invalid,
            '0801': error_invalid,
            '080001': error_invalid,
            '00999': error_invalid,
            '08 01': error_invalid,
            '08A01': error_invalid,
        }
        self.assertFieldOutput(ESPostalCodeField, valid, invalid)

    def test_ESPhoneNumberField(self):
        error_invalid = ['Enter a valid phone number in one of the formats 6XXXXXXXX, 8XXXXXXXX or 9XXXXXXXX.']
        valid = {
            '650010101': '650010101',
            '931234567': '931234567',
            '800123123': '800123123',
            '789789789': '789789789',
        }
        invalid = {
            '555555555': error_invalid,
            '489489489': error_invalid,
            '99123123': error_invalid,
            '9999123123': error_invalid,
        }
        self.assertFieldOutput(ESPhoneNumberField, valid, invalid)

    def test_ESIdentityCardNumberField(self):
        error_invalid = ['Please enter a valid NIF, NIE, or CIF.']
        error_checksum_nif = ['Invalid checksum for NIF.']
        error_checksum_nie = ['Invalid checksum for NIE.']
        error_checksum_cif = ['Invalid checksum for CIF.']
        valid = {
            '78699688J': '78699688J',
            '78699688-J': '78699688J',
            '78699688 J': '78699688J',
            '78699688 j': '78699688J',
            'X0901797J': 'X0901797J',
            'X-6124387-Q': 'X6124387Q',
            'X 0012953 G': 'X0012953G',
            'x-3287690-r': 'X3287690R',
            't-03287690r': 'T03287690R',
            'P2907500I': 'P2907500I',
            'B38790911': 'B38790911',
            'B31234560': 'B31234560',
            'B-3879091A': 'B3879091A',
            'B 38790911': 'B38790911',
            'P-3900800-H': 'P3900800H',
            'P 39008008': 'P39008008',
            'C-28795565': 'C28795565',
            'C 2879556E': 'C2879556E',
        }
        invalid = {
            '78699688T': error_checksum_nif,
            'X-03287690': error_invalid,
            'X-03287690-T': error_checksum_nie,
            'B 38790917': error_checksum_cif,
            'C28795567': error_checksum_cif,
            'I38790911': error_invalid,
            '78699688-2': error_invalid,
        }
        self.assertFieldOutput(ESIdentityCardNumberField, valid, invalid)

    def test_ESCCCField(self):
        error_invalid = ['Please enter a valid bank account number in format XXXX-XXXX-XX-XXXXXXXXXX.']
        error_checksum = ['Invalid checksum for bank account number.']
        valid = {
            '20770338793100254321': '20770338793100254321',
            '2077 0338 79 3100254321': '2077 0338 79 3100254321',
            '2077-0338-79-3100254321': '2077-0338-79-3100254321',
        }
        invalid = {
            '2077.0338.79.3100254321': error_invalid,
            '2077-0338-78-3100254321': error_checksum,
            '2077-0338-89-3100254321': error_checksum,
            '2077-03-3879-3100254321': error_invalid,
        }
        self.assertFieldOutput(ESCCCField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_fi
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.fi.forms import (FIZipCodeField, FISocialSecurityNumber,
                                  FIMunicipalitySelect)


class FILocalFlavorTests(SimpleTestCase):
    def test_FIMunicipalitySelect(self):
        f = FIMunicipalitySelect()
        out = '''<select name="municipalities">
<option value="akaa">Akaa</option>
<option value="alajarvi">Alaj\xe4rvi</option>
<option value="alavieska">Alavieska</option>
<option value="alavus">Alavus</option>
<option value="artjarvi">Artj\xe4rvi</option>
<option value="asikkala">Asikkala</option>
<option value="askola">Askola</option>
<option value="aura">Aura</option>
<option value="brando">Br\xe4nd\xf6</option>
<option value="eckero">Ecker\xf6</option>
<option value="enonkoski">Enonkoski</option>
<option value="enontekio">Enonteki\xf6</option>
<option value="espoo">Espoo</option>
<option value="eura">Eura</option>
<option value="eurajoki">Eurajoki</option>
<option value="evijarvi">Evij\xe4rvi</option>
<option value="finstrom">Finstr\xf6m</option>
<option value="forssa">Forssa</option>
<option value="foglo">F\xf6gl\xf6</option>
<option value="geta">Geta</option>
<option value="haapajarvi">Haapaj\xe4rvi</option>
<option value="haapavesi">Haapavesi</option>
<option value="hailuoto">Hailuoto</option>
<option value="halsua">Halsua</option>
<option value="hamina">Hamina</option>
<option value="hammarland">Hammarland</option>
<option value="hankasalmi">Hankasalmi</option>
<option value="hanko">Hanko</option>
<option value="harjavalta">Harjavalta</option>
<option value="hartola">Hartola</option>
<option value="hattula">Hattula</option>
<option value="haukipudas">Haukipudas</option>
<option value="hausjarvi">Hausj\xe4rvi</option>
<option value="heinola">Heinola</option>
<option value="heinavesi">Hein\xe4vesi</option>
<option value="helsinki">Helsinki</option>
<option value="hirvensalmi">Hirvensalmi</option>
<option value="hollola">Hollola</option>
<option value="honkajoki">Honkajoki</option>
<option value="huittinen">Huittinen</option>
<option value="humppila">Humppila</option>
<option value="hyrynsalmi">Hyrynsalmi</option>
<option value="hyvinkaa">Hyvink\xe4\xe4</option>
<option value="hameenkoski">H\xe4meenkoski</option>
<option value="hameenkyro">H\xe4meenkyr\xf6</option>
<option value="hameenlinna">H\xe4meenlinna</option>
<option value="ii">Ii</option>
<option value="iisalmi">Iisalmi</option>
<option value="iitti">Iitti</option>
<option value="ikaalinen">Ikaalinen</option>
<option value="ilmajoki">Ilmajoki</option>
<option value="ilomantsi">Ilomantsi</option>
<option value="imatra">Imatra</option>
<option value="inari">Inari</option>
<option value="inkoo">Inkoo</option>
<option value="isojoki">Isojoki</option>
<option value="isokyro">Isokyr\xf6</option>
<option value="jalasjarvi">Jalasj\xe4rvi</option>
<option value="janakkala">Janakkala</option>
<option value="joensuu">Joensuu</option>
<option value="jokioinen">Jokioinen</option>
<option value="jomala">Jomala</option>
<option value="joroinen">Joroinen</option>
<option value="joutsa">Joutsa</option>
<option value="juankoski">Juankoski</option>
<option value="juuka">Juuka</option>
<option value="juupajoki">Juupajoki</option>
<option value="juva">Juva</option>
<option value="jyvaskyla">Jyv\xe4skyl\xe4</option>
<option value="jamijarvi">J\xe4mij\xe4rvi</option>
<option value="jamsa">J\xe4ms\xe4</option>
<option value="jarvenpaa">J\xe4rvenp\xe4\xe4</option>
<option value="kaarina">Kaarina</option>
<option value="kaavi">Kaavi</option>
<option value="kajaani">Kajaani</option>
<option value="kalajoki">Kalajoki</option>
<option value="kangasala">Kangasala</option>
<option value="kangasniemi">Kangasniemi</option>
<option value="kankaanpaa">Kankaanp\xe4\xe4</option>
<option value="kannonkoski">Kannonkoski</option>
<option value="kannus">Kannus</option>
<option value="karijoki">Karijoki</option>
<option value="karjalohja">Karjalohja</option>
<option value="karkkila">Karkkila</option>
<option value="karstula">Karstula</option>
<option value="karttula">Karttula</option>
<option value="karvia">Karvia</option>
<option value="kaskinen">Kaskinen</option>
<option value="kauhajoki">Kauhajoki</option>
<option value="kauhava">Kauhava</option>
<option value="kauniainen">Kauniainen</option>
<option value="kaustinen">Kaustinen</option>
<option value="keitele">Keitele</option>
<option value="kemi">Kemi</option>
<option value="kemijarvi">Kemij\xe4rvi</option>
<option value="keminmaa">Keminmaa</option>
<option value="kemionsaari">Kemi\xf6nsaari</option>
<option value="kempele">Kempele</option>
<option value="kerava">Kerava</option>
<option value="kerimaki">Kerim\xe4ki</option>
<option value="kesalahti">Kes\xe4lahti</option>
<option value="keuruu">Keuruu</option>
<option value="kihnio">Kihni\xf6</option>
<option value="kiikoinen">Kiikoinen</option>
<option value="kiiminki">Kiiminki</option>
<option value="kinnula">Kinnula</option>
<option value="kirkkonummi">Kirkkonummi</option>
<option value="kitee">Kitee</option>
<option value="kittila">Kittil\xe4</option>
<option value="kiuruvesi">Kiuruvesi</option>
<option value="kivijarvi">Kivij\xe4rvi</option>
<option value="kokemaki">Kokem\xe4ki</option>
<option value="kokkola">Kokkola</option>
<option value="kolari">Kolari</option>
<option value="konnevesi">Konnevesi</option>
<option value="kontiolahti">Kontiolahti</option>
<option value="korsnas">Korsn\xe4s</option>
<option value="koskitl">Koski Tl</option>
<option value="kotka">Kotka</option>
<option value="kouvola">Kouvola</option>
<option value="kristiinankaupunki">Kristiinankaupunki</option>
<option value="kruunupyy">Kruunupyy</option>
<option value="kuhmalahti">Kuhmalahti</option>
<option value="kuhmo">Kuhmo</option>
<option value="kuhmoinen">Kuhmoinen</option>
<option value="kumlinge">Kumlinge</option>
<option value="kuopio">Kuopio</option>
<option value="kuortane">Kuortane</option>
<option value="kurikka">Kurikka</option>
<option value="kustavi">Kustavi</option>
<option value="kuusamo">Kuusamo</option>
<option value="kylmakoski">Kylm\xe4koski</option>
<option value="kyyjarvi">Kyyj\xe4rvi</option>
<option value="karkola">K\xe4rk\xf6l\xe4</option>
<option value="karsamaki">K\xe4rs\xe4m\xe4ki</option>
<option value="kokar">K\xf6kar</option>
<option value="koylio">K\xf6yli\xf6</option>
<option value="lahti">Lahti</option>
<option value="laihia">Laihia</option>
<option value="laitila">Laitila</option>
<option value="lapinjarvi">Lapinj\xe4rvi</option>
<option value="lapinlahti">Lapinlahti</option>
<option value="lappajarvi">Lappaj\xe4rvi</option>
<option value="lappeenranta">Lappeenranta</option>
<option value="lapua">Lapua</option>
<option value="laukaa">Laukaa</option>
<option value="lavia">Lavia</option>
<option value="lemi">Lemi</option>
<option value="lemland">Lemland</option>
<option value="lempaala">Lemp\xe4\xe4l\xe4</option>
<option value="leppavirta">Lepp\xe4virta</option>
<option value="lestijarvi">Lestij\xe4rvi</option>
<option value="lieksa">Lieksa</option>
<option value="lieto">Lieto</option>
<option value="liminka">Liminka</option>
<option value="liperi">Liperi</option>
<option value="lohja">Lohja</option>
<option value="loimaa">Loimaa</option>
<option value="loppi">Loppi</option>
<option value="loviisa">Loviisa</option>
<option value="luhanka">Luhanka</option>
<option value="lumijoki">Lumijoki</option>
<option value="lumparland">Lumparland</option>
<option value="luoto">Luoto</option>
<option value="luumaki">Luum\xe4ki</option>
<option value="luvia">Luvia</option>
<option value="lansi-turunmaa">L\xe4nsi-Turunmaa</option>
<option value="maalahti">Maalahti</option>
<option value="maaninka">Maaninka</option>
<option value="maarianhamina">Maarianhamina</option>
<option value="marttila">Marttila</option>
<option value="masku">Masku</option>
<option value="merijarvi">Merij\xe4rvi</option>
<option value="merikarvia">Merikarvia</option>
<option value="miehikkala">Miehikk\xe4l\xe4</option>
<option value="mikkeli">Mikkeli</option>
<option value="muhos">Muhos</option>
<option value="multia">Multia</option>
<option value="muonio">Muonio</option>
<option value="mustasaari">Mustasaari</option>
<option value="muurame">Muurame</option>
<option value="mynamaki">Myn\xe4m\xe4ki</option>
<option value="myrskyla">Myrskyl\xe4</option>
<option value="mantsala">M\xe4nts\xe4l\xe4</option>
<option value="mantta-vilppula">M\xe4ntt\xe4-Vilppula</option>
<option value="mantyharju">M\xe4ntyharju</option>
<option value="naantali">Naantali</option>
<option value="nakkila">Nakkila</option>
<option value="nastola">Nastola</option>
<option value="nilsia">Nilsi\xe4</option>
<option value="nivala">Nivala</option>
<option value="nokia">Nokia</option>
<option value="nousiainen">Nousiainen</option>
<option value="nummi-pusula">Nummi-Pusula</option>
<option value="nurmes">Nurmes</option>
<option value="nurmijarvi">Nurmij\xe4rvi</option>
<option value="narpio">N\xe4rpi\xf6</option>
<option value="oravainen">Oravainen</option>
<option value="orimattila">Orimattila</option>
<option value="oripaa">Orip\xe4\xe4</option>
<option value="orivesi">Orivesi</option>
<option value="oulainen">Oulainen</option>
<option value="oulu">Oulu</option>
<option value="oulunsalo">Oulunsalo</option>
<option value="outokumpu">Outokumpu</option>
<option value="padasjoki">Padasjoki</option>
<option value="paimio">Paimio</option>
<option value="paltamo">Paltamo</option>
<option value="parikkala">Parikkala</option>
<option value="parkano">Parkano</option>
<option value="pedersore">Peders\xf6re</option>
<option value="pelkosenniemi">Pelkosenniemi</option>
<option value="pello">Pello</option>
<option value="perho">Perho</option>
<option value="pertunmaa">Pertunmaa</option>
<option value="petajavesi">Pet\xe4j\xe4vesi</option>
<option value="pieksamaki">Pieks\xe4m\xe4ki</option>
<option value="pielavesi">Pielavesi</option>
<option value="pietarsaari">Pietarsaari</option>
<option value="pihtipudas">Pihtipudas</option>
<option value="pirkkala">Pirkkala</option>
<option value="polvijarvi">Polvij\xe4rvi</option>
<option value="pomarkku">Pomarkku</option>
<option value="pori">Pori</option>
<option value="pornainen">Pornainen</option>
<option value="porvoo">Porvoo</option>
<option value="posio">Posio</option>
<option value="pudasjarvi">Pudasj\xe4rvi</option>
<option value="pukkila">Pukkila</option>
<option value="punkaharju">Punkaharju</option>
<option value="punkalaidun">Punkalaidun</option>
<option value="puolanka">Puolanka</option>
<option value="puumala">Puumala</option>
<option value="pyhtaa">Pyht\xe4\xe4</option>
<option value="pyhajoki">Pyh\xe4joki</option>
<option value="pyhajarvi">Pyh\xe4j\xe4rvi</option>
<option value="pyhanta">Pyh\xe4nt\xe4</option>
<option value="pyharanta">Pyh\xe4ranta</option>
<option value="palkane">P\xe4lk\xe4ne</option>
<option value="poytya">P\xf6yty\xe4</option>
<option value="raahe">Raahe</option>
<option value="raasepori">Raasepori</option>
<option value="raisio">Raisio</option>
<option value="rantasalmi">Rantasalmi</option>
<option value="ranua">Ranua</option>
<option value="rauma">Rauma</option>
<option value="rautalampi">Rautalampi</option>
<option value="rautavaara">Rautavaara</option>
<option value="rautjarvi">Rautj\xe4rvi</option>
<option value="reisjarvi">Reisj\xe4rvi</option>
<option value="riihimaki">Riihim\xe4ki</option>
<option value="ristiina">Ristiina</option>
<option value="ristijarvi">Ristij\xe4rvi</option>
<option value="rovaniemi">Rovaniemi</option>
<option value="ruokolahti">Ruokolahti</option>
<option value="ruovesi">Ruovesi</option>
<option value="rusko">Rusko</option>
<option value="raakkyla">R\xe4\xe4kkyl\xe4</option>
<option value="saarijarvi">Saarij\xe4rvi</option>
<option value="salla">Salla</option>
<option value="salo">Salo</option>
<option value="saltvik">Saltvik</option>
<option value="sastamala">Sastamala</option>
<option value="sauvo">Sauvo</option>
<option value="savitaipale">Savitaipale</option>
<option value="savonlinna">Savonlinna</option>
<option value="savukoski">Savukoski</option>
<option value="seinajoki">Sein\xe4joki</option>
<option value="sievi">Sievi</option>
<option value="siikainen">Siikainen</option>
<option value="siikajoki">Siikajoki</option>
<option value="siikalatva">Siikalatva</option>
<option value="siilinjarvi">Siilinj\xe4rvi</option>
<option value="simo">Simo</option>
<option value="sipoo">Sipoo</option>
<option value="siuntio">Siuntio</option>
<option value="sodankyla">Sodankyl\xe4</option>
<option value="soini">Soini</option>
<option value="somero">Somero</option>
<option value="sonkajarvi">Sonkaj\xe4rvi</option>
<option value="sotkamo">Sotkamo</option>
<option value="sottunga">Sottunga</option>
<option value="sulkava">Sulkava</option>
<option value="sund">Sund</option>
<option value="suomenniemi">Suomenniemi</option>
<option value="suomussalmi">Suomussalmi</option>
<option value="suonenjoki">Suonenjoki</option>
<option value="sysma">Sysm\xe4</option>
<option value="sakyla">S\xe4kyl\xe4</option>
<option value="taipalsaari">Taipalsaari</option>
<option value="taivalkoski">Taivalkoski</option>
<option value="taivassalo">Taivassalo</option>
<option value="tammela">Tammela</option>
<option value="tampere">Tampere</option>
<option value="tarvasjoki">Tarvasjoki</option>
<option value="tervo">Tervo</option>
<option value="tervola">Tervola</option>
<option value="teuva">Teuva</option>
<option value="tohmajarvi">Tohmaj\xe4rvi</option>
<option value="toholampi">Toholampi</option>
<option value="toivakka">Toivakka</option>
<option value="tornio">Tornio</option>
<option value="turku" selected="selected">Turku</option>
<option value="tuusniemi">Tuusniemi</option>
<option value="tuusula">Tuusula</option>
<option value="tyrnava">Tyrn\xe4v\xe4</option>
<option value="toysa">T\xf6ys\xe4</option>
<option value="ulvila">Ulvila</option>
<option value="urjala">Urjala</option>
<option value="utajarvi">Utaj\xe4rvi</option>
<option value="utsjoki">Utsjoki</option>
<option value="uurainen">Uurainen</option>
<option value="uusikaarlepyy">Uusikaarlepyy</option>
<option value="uusikaupunki">Uusikaupunki</option>
<option value="vaala">Vaala</option>
<option value="vaasa">Vaasa</option>
<option value="valkeakoski">Valkeakoski</option>
<option value="valtimo">Valtimo</option>
<option value="vantaa">Vantaa</option>
<option value="varkaus">Varkaus</option>
<option value="varpaisjarvi">Varpaisj\xe4rvi</option>
<option value="vehmaa">Vehmaa</option>
<option value="vesanto">Vesanto</option>
<option value="vesilahti">Vesilahti</option>
<option value="veteli">Veteli</option>
<option value="vierema">Vierem\xe4</option>
<option value="vihanti">Vihanti</option>
<option value="vihti">Vihti</option>
<option value="viitasaari">Viitasaari</option>
<option value="vimpeli">Vimpeli</option>
<option value="virolahti">Virolahti</option>
<option value="virrat">Virrat</option>
<option value="vardo">V\xe5rd\xf6</option>
<option value="vahakyro">V\xe4h\xe4kyr\xf6</option>
<option value="voyri-maksamaa">V\xf6yri-Maksamaa</option>
<option value="yli-ii">Yli-Ii</option>
<option value="ylitornio">Ylitornio</option>
<option value="ylivieska">Ylivieska</option>
<option value="ylojarvi">Yl\xf6j\xe4rvi</option>
<option value="ypaja">Yp\xe4j\xe4</option>
<option value="ahtari">\xc4ht\xe4ri</option>
<option value="aanekoski">\xc4\xe4nekoski</option>
</select>'''
        self.assertHTMLEqual(f.render('municipalities', 'turku'), out)

    def test_FIZipCodeField(self):
        error_format = ['Enter a zip code in the format XXXXX.']
        valid = {
            '20540': '20540',
            '20101': '20101',
        }
        invalid = {
            '20s40': error_format,
            '205401': error_format
        }
        self.assertFieldOutput(FIZipCodeField, valid, invalid)

    def test_FISocialSecurityNumber(self):
        error_invalid = ['Enter a valid Finnish social security number.']
        valid = {
            '010101-0101': '010101-0101',
            '010101+0101': '010101+0101',
            '010101A0101': '010101A0101',
        }
        invalid = {
            '101010-0102': error_invalid,
            '10a010-0101': error_invalid,
            '101010-0\xe401': error_invalid,
            '101010b0101': error_invalid,
        }
        self.assertFieldOutput(FISocialSecurityNumber, valid, invalid)

########NEW FILE########
__FILENAME__ = test_fr
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.test import SimpleTestCase
from localflavor.fr.forms import (
    FRZipCodeField, FRPhoneNumberField,
    FRDepartmentField, FRRegionField,
    FRRegionSelect, FRDepartmentSelect,
    FRNationalIdentificationNumber
)

DEP_SELECT_OUTPUT = '''
    <select name="dep">
        <option value="01">01 - Ain</option>
        <option value="02">02 - Aisne</option>
        <option value="03">03 - Allier</option>
        <option value="04">04 - Alpes-de-Haute-Provence</option>
        <option value="05">05 - Hautes-Alpes</option>
        <option value="06">06 - Alpes-Maritimes</option>
        <option value="07">07 - Ardèche</option>
        <option value="08">08 - Ardennes</option>
        <option value="09">09 - Ariège</option>
        <option value="10">10 - Aube</option>
        <option value="11">11 - Aude</option>
        <option value="12">12 - Aveyron</option>
        <option value="13">13 - Bouches-du-Rhône</option>
        <option value="14">14 - Calvados</option>
        <option value="15">15 - Cantal</option>
        <option value="16">16 - Charente</option>
        <option value="17">17 - Charente-Maritime</option>
        <option value="18">18 - Cher</option>
        <option value="19">19 - Corrèze</option>
        <option value="2A">2A - Corse-du-Sud</option>
        <option value="2B">2B - Haute-Corse</option>
        <option value="21">21 - Côte-d&#39;Or</option>
        <option value="22">22 - Côtes-d&#39;Armor</option>
        <option value="23">23 - Creuse</option>
        <option value="24">24 - Dordogne</option>
        <option value="25">25 - Doubs</option>
        <option value="26">26 - Drôme</option>
        <option value="27">27 - Eure</option>
        <option value="28">28 - Eure-et-Loir</option>
        <option value="29">29 - Finistère</option>
        <option value="30">30 - Gard</option>
        <option value="31">31 - Haute-Garonne</option>
        <option value="32">32 - Gers</option>
        <option value="33">33 - Gironde</option>
        <option value="34">34 - Hérault</option>
        <option value="35">35 - Ille-et-Vilaine</option>
        <option value="36">36 - Indre</option>
        <option value="37">37 - Indre-et-Loire</option>
        <option value="38">38 - Isère</option>
        <option value="39">39 - Jura</option>
        <option value="40">40 - Landes</option>
        <option value="41">41 - Loir-et-Cher</option>
        <option value="42">42 - Loire</option>
        <option value="43">43 - Haute-Loire</option>
        <option value="44">44 - Loire-Atlantique</option>
        <option value="45">45 - Loiret</option>
        <option value="46">46 - Lot</option>
        <option value="47">47 - Lot-et-Garonne</option>
        <option value="48">48 - Lozère</option>
        <option value="49">49 - Maine-et-Loire</option>
        <option value="50">50 - Manche</option>
        <option value="51">51 - Marne</option>
        <option value="52">52 - Haute-Marne</option>
        <option value="53">53 - Mayenne</option>
        <option value="54">54 - Meurthe-et-Moselle</option>
        <option value="55">55 - Meuse</option>
        <option value="56">56 - Morbihan</option>
        <option value="57">57 - Moselle</option>
        <option value="58">58 - Nièvre</option>
        <option value="59">59 - Nord</option>
        <option value="60">60 - Oise</option>
        <option value="61">61 - Orne</option>
        <option value="62">62 - Pas-de-Calais</option>
        <option value="63">63 - Puy-de-Dôme</option>
        <option value="64">64 - Pyrénées-Atlantiques</option>
        <option value="65">65 - Hautes-Pyrénées</option>
        <option value="66">66 - Pyrénées-Orientales</option>
        <option value="67">67 - Bas-Rhin</option>
        <option value="68">68 - Haut-Rhin</option>
        <option value="69">69 - Rhône</option>
        <option value="70">70 - Haute-Saône</option>
        <option value="71">71 - Saône-et-Loire</option>
        <option value="72">72 - Sarthe</option>
        <option value="73">73 - Savoie</option>
        <option value="74">74 - Haute-Savoie</option>
        <option value="75" selected="selected">75 - Paris</option>
        <option value="76">76 - Seine-Maritime</option>
        <option value="77">77 - Seine-et-Marne</option>
        <option value="78">78 - Yvelines</option>
        <option value="79">79 - Deux-Sèvres</option>
        <option value="80">80 - Somme</option>
        <option value="81">81 - Tarn</option>
        <option value="82">82 - Tarn-et-Garonne</option>
        <option value="83">83 - Var</option>
        <option value="84">84 - Vaucluse</option>
        <option value="85">85 - Vendée</option>
        <option value="86">86 - Vienne</option>
        <option value="87">87 - Haute-Vienne</option>
        <option value="88">88 - Vosges</option>
        <option value="89">89 - Yonne</option>
        <option value="90">90 - Territoire de Belfort</option>
        <option value="91">91 - Essonne</option>
        <option value="92">92 - Hauts-de-Seine</option>
        <option value="93">93 - Seine-Saint-Denis</option>
        <option value="94">94 - Val-de-Marne</option>
        <option value="95">95 - Val-d&#39;Oise</option>
        <option value="971">971 - Guadeloupe</option>
        <option value="972">972 - Martinique</option>
        <option value="973">973 - Guyane</option>
        <option value="974">974 - La Réunion</option>
        <option value="975">975 - Saint-Pierre-et-Miquelon</option>
        <option value="976">976 - Mayotte</option>
        <option value="977">977 - Saint-Barthélemy</option>
        <option value="978">978 - Saint-Martin</option>
        <option value="984">
            984 - Terres australes et antarctiques françaises
        </option>
        <option value="986">986 - Wallis et Futuna</option>
        <option value="987">987 - Polynésie française</option>
        <option value="988">988 - Nouvelle-Calédonie</option>
        <option value="989">989 - Île de Clipperton</option>
    </select>
'''

REG_SELECT_OUTPUT = '''
    <select name="reg">
        <option value="01">01 - Guadeloupe</option>
        <option value="02">02 - Martinique</option>
        <option value="03">03 - Guyane</option>
        <option value="04">04 - La Réunion</option>
        <option value="05">05 - Mayotte</option>
        <option value="11">11 - Île-de-France</option>
        <option value="21">21 - Champagne-Ardenne</option>
        <option value="22">22 - Picardie</option>
        <option value="23">23 - Haute-Normandie</option>
        <option value="24">24 - Centre</option>
        <option value="25" selected="selected">25 - Basse-Normandie</option>
        <option value="26">26 - Bourgogne</option>
        <option value="31">31 - Nord-Pas-de-Calais</option>
        <option value="41">41 - Lorraine</option>
        <option value="42">42 - Alsace</option>
        <option value="43">43 - Franche-Comté</option>
        <option value="52">52 - Pays de la Loire</option>
        <option value="53">53 - Bretagne</option>
        <option value="54">54 - Poitou-Charentes</option>
        <option value="72">72 - Aquitaine</option>
        <option value="73">73 - Midi-Pyrénées</option>
        <option value="74">74 - Limousin</option>
        <option value="82">82 - Rhône-Alpes</option>
        <option value="83">83 - Auvergne</option>
        <option value="91">91 - Languedoc-Roussillon</option>
        <option value="93">93 - Provence-Alpes-Côte d&#39;Azur</option>
        <option value="94">94 - Corse</option>
    </select>
'''


class FRLocalFlavorTests(SimpleTestCase):

    def test_FRZipCodeField(self):
        error_format = ['Enter a zip code in the format XXXXX.']
        valid = {
            '75001': '75001',
            '93200': '93200',
        }
        invalid = {
            '2A200': error_format,
            '980001': ['Ensure this value has at most '
                       '5 characters (it has 6).'] + error_format,
        }
        self.assertFieldOutput(FRZipCodeField, valid, invalid)

    def test_FRPhoneNumberField(self):
        error_format = ['Phone numbers must be in 0X XX XX XX XX format.']
        valid = {
            '01 55 44 58 64': '01 55 44 58 64',
            '0155445864': '01 55 44 58 64',
            '01 5544 5864': '01 55 44 58 64',
            '01 55.44.58.64': '01 55 44 58 64',
            '01.55.44.58.64': '01 55 44 58 64',
        }
        invalid = {
            '01,55,44,58,64': error_format,
            '555 015 544': error_format,
        }
        self.assertFieldOutput(FRPhoneNumberField, valid, invalid)

    def test_FRDepartmentfield(self):
        f = FRDepartmentField()
        self.assertHTMLEqual(f.widget.render('dep', '75'), DEP_SELECT_OUTPUT)

    def test_FRRegionfield(self):
        f = FRRegionField()
        self.assertHTMLEqual(f.widget.render('reg', '25'), REG_SELECT_OUTPUT)

    def test_FRDepartmentSelect(self):
        f = FRDepartmentSelect()
        self.assertHTMLEqual(f.render('dep', '75'), DEP_SELECT_OUTPUT)

    def test_FRRegionSelect(self):
        f = FRRegionSelect()
        self.assertHTMLEqual(f.render('reg', '25'), REG_SELECT_OUTPUT)

    def test_FRNationalIdentificationNumber(self):
        error_format = ['Enter a valid French French National Identification number.']
        valid = {
            '869067543002289': '869067543002289',
            '869069713002256': '869069713002256',   # Good Overseas
        }
        invalid = {
            '369067543002289': error_format,    # Gender mismatch
            '869069873002289': error_format,    # Bad Department
            '869069773002289': error_format,    # Bad overseas Department
            '869069710002256': error_format,    # Good overseas Bad Commune
            '869067500002289': error_format,    # Bad Commune
            '869067543000009': error_format,    # Bad "Person Unique Number"
            '869067543002298': error_format,    # Bad Control key
            '869067443002289': error_format,    # Fails validation
        }
        self.assertFieldOutput(FRNationalIdentificationNumber, valid, invalid)

########NEW FILE########
__FILENAME__ = test_gb
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.gb.forms import GBPostcodeField


class GBLocalFlavorTests(SimpleTestCase):
    def test_GBPostcodeField(self):
        error_invalid = ['Enter a valid postcode.']
        valid = {
            'BT32 4PX': 'BT32 4PX',
            'GIR 0AA': 'GIR 0AA',
            'BT324PX': 'BT32 4PX',
            ' so11aa ': 'SO1 1AA',
            ' so1  1aa ': 'SO1 1AA',
            'G2 3wt': 'G2 3WT',
            'EC1A 1BB': 'EC1A 1BB',
            'Ec1a1BB': 'EC1A 1BB',
        }
        invalid = {
            '1NV 4L1D': error_invalid,
            '1NV4L1D': error_invalid,
            ' b0gUS': error_invalid,
        }
        self.assertFieldOutput(GBPostcodeField, valid, invalid)
        valid = {}
        invalid = {
            '1NV 4L1D': ['Enter a bloody postcode!'],
        }
        kwargs = {'error_messages': {'invalid': 'Enter a bloody postcode!'}}
        self.assertFieldOutput(GBPostcodeField, valid, invalid, field_kwargs=kwargs)

########NEW FILE########
__FILENAME__ = test_generic
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.core.exceptions import ValidationError, ImproperlyConfigured
from django.test import SimpleTestCase, TestCase
from django.utils import formats

from localflavor.generic.models import IBANField
from localflavor.generic.validators import IBANValidator
from localflavor.generic.forms import (DateField, DateTimeField,
                                       SplitDateTimeField, IBANFormField)


class DateTimeFieldTestCase(SimpleTestCase):

    default_date_input_formats = (
        '%Y-%m-%d', '%d/%m/%Y', '%d/%m/%y', '%b %d %Y', '%b %d, %Y',
        '%d %b %Y', '%d %b, %Y', '%B %d %Y', '%B %d, %Y', '%d %B %Y',
        '%d %B, %Y',
    )

    default_datetime_input_formats = (
        '%Y-%m-%d %H:%M:%S', '%Y-%m-%d %H:%M', '%Y-%m-%d', '%d/%m/%Y %H:%M:%S',
        '%d/%m/%Y %H:%M', '%d/%m/%Y', '%d/%m/%y %H:%M:%S', '%d/%m/%y %H:%M',
        '%d/%m/%y',
    )

    def assertInputFormats(self, field, formats):
        self.assertSequenceEqual(field.input_formats, formats)


class DateFieldTests(DateTimeFieldTestCase):

    def setUp(self):
        self.default_input_formats = self.default_date_input_formats

    def test_init_no_input_formats(self):
        field = DateField()
        self.assertInputFormats(field, self.default_input_formats)

    def test_init_empty_input_formats(self):
        field = DateField(input_formats=())
        self.assertInputFormats(field, self.default_input_formats)

    def test_init_custom_input_formats(self):
        input_formats = ('%m/%d/%Y', '%m/%d/%y')
        field = DateField(input_formats=input_formats)
        self.assertInputFormats(field, input_formats)


class DateTimeFieldTests(DateTimeFieldTestCase):

    def setUp(self):
        self.default_input_formats = self.default_datetime_input_formats

    def test_init_no_input_formats(self):
        field = DateTimeField()
        self.assertInputFormats(field, self.default_input_formats)

    def test_init_empty_input_formats(self):
        field = DateTimeField(input_formats=())
        self.assertInputFormats(field, self.default_input_formats)

    def test_init_custom_input_formats(self):
        input_formats = ('%m/%d/%Y %H:%M', '%m/%d/%y %H:%M')
        field = DateTimeField(input_formats=input_formats)
        self.assertInputFormats(field, input_formats)


class SplitDateTimeFieldTests(DateTimeFieldTestCase):

    default_time_input_formats = formats.get_format_lazy('TIME_INPUT_FORMATS')

    def test_init_no_input_formats(self):
        field = SplitDateTimeField()
        date_field, time_field = field.fields
        self.assertInputFormats(date_field, self.default_date_input_formats)
        self.assertInputFormats(time_field, self.default_time_input_formats)

    def test_init_empty_input_formats(self):
        field = SplitDateTimeField(input_date_formats=(),
                                   input_time_formats=())
        date_field, time_field = field.fields
        self.assertInputFormats(date_field, self.default_date_input_formats)
        self.assertInputFormats(time_field, ())

    def test_init_custom_input_formats(self):
        date_input_formats = ('%m/%d/%Y', '%m/%d/%y')
        time_input_formats = ('%H:%M', '%H:%M:%S')
        field = SplitDateTimeField(input_date_formats=date_input_formats,
                                   input_time_formats=time_input_formats)
        date_field, time_field = field.fields
        self.assertInputFormats(date_field, date_input_formats)
        self.assertInputFormats(time_field, time_input_formats)


class IBANTests(TestCase):
    def test_iban_validator(self):
        valid = [
            'GB82WEST12345698765432',
            'GB82 WEST 1234 5698 7654 32',

            'GR1601101250000000012300695',
            'GR16-0110-1250-0000-0001-2300-695',

            'GB29NWBK60161331926819',
            'GB29N-WB K6016-13319-26819',

            'SA0380000000608010167519',
            'SA0380 0 0000 06 0 8 0 1 0 1 6 7 519 ',

            'CH9300762011623852957',
            'IL620108000000099999999'
        ]

        invalid = {
            'GB82WEST1234569876543': 'GB IBANs must contain 22 characters.',
            'CA34CIBC123425345': 'CA is not a valid country code for IBAN.',
            'GB29ÉWBK60161331926819': 'is not a valid character for IBAN.',
            'SA0380000000608019167519': 'Not a valid IBAN.',
        }

        for iban in valid:
            IBANValidator(iban)

        for iban in invalid:
            self.assertRaisesMessage(ValidationError,  invalid[iban], IBANValidator(), iban)

    def test_iban_fields(self):
        """ Test the IBAN model and form field. """
        valid = {
            'NL02ABNA0123456789': 'NL02ABNA0123456789',
            'NL02 ABNA 0123 4567 89': 'NL02ABNA0123456789',
            'NL02-ABNA-0123-4567-89': 'NL02ABNA0123456789',

            'NL91ABNA0417164300': 'NL91ABNA0417164300',
            'NL91 ABNA 0417 1643 00': 'NL91ABNA0417164300',
            'NL91-ABNA-0417-1643-00': 'NL91ABNA0417164300',

            'MU17BOMM0101101030300200000MUR': 'MU17BOMM0101101030300200000MUR',
            'MU17 BOMM 0101 1010 3030 0200 000M UR': 'MU17BOMM0101101030300200000MUR',
            'MU 17BO MM01011010 3030-02 000-00M UR': 'MU17BOMM0101101030300200000MUR',

            'BE68539007547034': 'BE68539007547034',
            'BE68 5390 0754 7034': 'BE68539007547034',
            'BE-685390075470 34': 'BE68539007547034',
        }

        invalid = {
            'NL02ABNA012345678999': ['NL IBANs must contain 18 characters.'],
            'NL02 ABNA 0123 4567 8999': ['NL IBANs must contain 18 characters.'],

            'NL91ABNB0417164300': ['Not a valid IBAN.'],
            'NL91 ABNB 0417 1643 00': ['Not a valid IBAN.'],

            'MU17BOMM0101101030300200000MUR12345': [
                'MU IBANs must contain 30 characters.',
                'Ensure this value has at most 34 characters (it has 35).'],
            'MU17 BOMM 0101 1010 3030 0200 000M UR12 345': [
                'MU IBANs must contain 30 characters.',
                'Ensure this value has at most 34 characters (it has 35).'],

            # This IBAN should only be valid only if the Nordea extensions are turned on.
            'EG1100006001880800100014553': ['EG is not a valid country code for IBAN.'],
            'EG11 0000 6001 8808 0010 0014 553': ['EG is not a valid country code for IBAN.']
        }

        self.assertFieldOutput(IBANFormField, valid=valid, invalid=invalid)

        # Test valid inputs for model field.
        iban_model_field = IBANField()
        for input, output in valid.items():
            self.assertEqual(iban_model_field.clean(input, None), output)

        # Invalid inputs for model field.
        for input, errors in invalid.items():
            with self.assertRaises(ValidationError) as context_manager:
                iban_model_field.clean(input, None)
            # The error messages for models are in a different order.
            errors.reverse()
            self.assertEqual(context_manager.exception.messages, errors)

    def test_nordea_extensions(self):
        """ Test a valid IBAN in the Nordea extensions. """
        iban_validator = IBANValidator(use_nordea_extensions=True)
        # Run the validator to ensure there are no ValidationErrors raised.
        iban_validator('EG1100006001880800100014553')

    def test_include_countries(self):
        """ Test the IBAN model and form include_countries feature. """
        include_countries = ('NL', 'BE', 'LU')

        valid = {
            'NL02ABNA0123456789': 'NL02ABNA0123456789',
            'BE68539007547034': 'BE68539007547034',
            'LU280019400644750000': 'LU280019400644750000'
        }

        invalid = {
            # This IBAN is valid but not for the configured countries.
            'GB82WEST12345698765432': ['GB IBANs are not allowed in this field.']
        }

        self.assertFieldOutput(IBANFormField, field_kwargs={'include_countries': include_countries},
                               valid=valid, invalid=invalid)

        # Test valid inputs for model field.
        iban_model_field = IBANField(include_countries=include_countries)
        for input, output in valid.items():
            self.assertEqual(iban_model_field.clean(input, None), output)

        # Invalid inputs for model field.
        for input, errors in invalid.items():
            with self.assertRaises(ValidationError) as context_manager:
                iban_model_field.clean(input, None)
            # The error messages for models are in a different order.
            errors.reverse()
            self.assertEqual(context_manager.exception.messages, errors)

    def test_misconfigured_include_countries(self):
        """ Test that an IBAN field or model raises an error when asked to validate a country not part of IBAN.
        """
        # Test an unassigned ISO 3166-1 country code so that the tests will work even if a country joins IBAN.
        self.assertRaises(ImproperlyConfigured, IBANValidator, include_countries=('JJ',))
        self.assertRaises(ImproperlyConfigured, IBANValidator, use_nordea_extensions=True, include_countries=('JJ',))

        # Test a Nordea IBAN when Nordea extensions are turned off.
        self.assertRaises(ImproperlyConfigured, IBANValidator, include_countries=('AO',))

########NEW FILE########
__FILENAME__ = test_gr
from __future__ import absolute_import

from django.test import SimpleTestCase

from localflavor.gr.forms import (GRPhoneNumberField, GRMobilePhoneNumberField,
                                  GRTaxNumberCodeField, GRPostalCodeField)


class GRLocalFlavorTests(SimpleTestCase):

    def test_GRTaxNumberField(self):
        """ The valid tests are from greek tax numbers (AFMs) found on the internet
        with a google search. """
        error = ['Enter a valid greek tax number (9 digits).']
        valid = {
            '090051291': '090051291',
            '997881842': '997881842',
            '090220804': '090220804',
            '090000045': '090000045',
            '099757704': '099757704',

        }
        invalid = {
            '123456789': error,
            '123 32 12 3213': error,
            '32 123 5345': error,
            '0': error,
            '00000': error,
            '000000000': error,
            '1111111': error,
            '3123123': error,
            '312312334534': error,
            '999999999': error,
            '123123123': error,
            '321000123': error,
        }
        self.assertFieldOutput(GRTaxNumberCodeField, valid, invalid)

    def test_GRPostalCodeField(self):
        error = ['Enter a valid 5-digit greek postal code.']
        valid = {
            '51642': '51642',
            '21742': '21742',
            '75006': '75006',
            '85017': '85017',
        }
        invalid = {
            '12 34': error,
            '124567': error,
            '04567': error,
            '94567': error,
            '124567': error,
            '1345': error,
            '134115': error,
        }
        self.assertFieldOutput(GRPostalCodeField, valid, invalid)

    def test_GRPhoneNumberField(self):
        error = ['Enter a 10-digit greek phone number.']
        valid = {
            '2109292921': '2109292921',
            '+301109292921': '+301109292921',

        }
        invalid = {
            '12 34': error,
            '124567': error,
            '21092929211': error,
            '661232123': error,

        }
        self.assertFieldOutput(GRPhoneNumberField, valid, invalid)

    def test_GRMobilePhoneNumberField(self):
        error = ['Enter a greek mobile phone number starting with 69.']
        valid = {
            '6945555555': '6945555555',
            '6931234567': '6931234567',
            '+306971234567': '+306971234567',

        }
        invalid = {
            '12 34': error,
            '124567': error,
            '21092929211': error,
            '2102233444': error,
            '2111234567': error,

        }
        self.assertFieldOutput(GRMobilePhoneNumberField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_hk
from __future__ import absolute_import

from django.test import SimpleTestCase

from localflavor.hk.forms import HKPhoneNumberField


class HKLocalFlavorTests(SimpleTestCase):
    """Tests for Hong Kong Local Flavors"""

    def test_HKPhoneNumberField(self):
        error_msgs = HKPhoneNumberField.default_error_messages
        valid = {
            '2111-1111': '2111-1111',
            '3111 1111': '3111-1111',
            '51111111': '5111-1111',
            '852-6111-1111': '6111-1111',
            '(+852) 8111-1111': '8111-1111',
            '(+852) 9111-1111': '9111-1111',
            '85291111111': '9111-1111',
        }
        invalid = {
            '9991-1111': [error_msgs['disguise'], ],
            '9921-1111': [error_msgs['disguise'], ],
            '1121-1111': [error_msgs['disguise'], ],
            '99987654': [error_msgs['disguise'], ],
            '99287654': [error_msgs['disguise'], ],
            '11287654': [error_msgs['disguise'], ],
            '1': [error_msgs['invalid'], ],
            '2111--1111': [error_msgs['invalid'], ],
            '11111111': [error_msgs['prefix'], ],
            '00000000': [error_msgs['prefix'], ],
            '44444444': [error_msgs['prefix'], ],
            '77777777': [error_msgs['prefix'], ],
        }
        self.assertFieldOutput(HKPhoneNumberField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_hr
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.hr.forms import (HRCountySelect, HRPhoneNumberPrefixSelect,
                                  HRLicensePlatePrefixSelect,
                                  HRPhoneNumberField, HRLicensePlateField,
                                  HRPostalCodeField, HROIBField,
                                  HRJMBGField, HRJMBAGField)


class HRLocalFlavorTests(SimpleTestCase):
    def test_HRCountySelect(self):
        f = HRCountySelect()
        out = '''<select name="county">
<option value="GZG" selected="selected">Grad Zagreb</option>
<option value="BBŽ">Bjelovarsko-bilogorska županija</option>
<option value="BPŽ">Brodsko-posavska županija</option>
<option value="DNŽ">Dubrovačko-neretvanska županija</option>
<option value="IŽ">Istarska županija</option>
<option value="KŽ">Karlovačka županija</option>
<option value="KKŽ">Koprivničko-križevačka županija</option>
<option value="KZŽ">Krapinsko-zagorska županija</option>
<option value="LSŽ">Ličko-senjska županija</option>
<option value="MŽ">Međimurska županija</option>
<option value="OBŽ">Osječko-baranjska županija</option>
<option value="PSŽ">Požeško-slavonska županija</option>
<option value="PGŽ">Primorsko-goranska županija</option>
<option value="SMŽ">Sisačko-moslavačka županija</option>
<option value="SDŽ">Splitsko-dalmatinska županija</option>
<option value="ŠKŽ">Šibensko-kninska županija</option>
<option value="VŽ">Varaždinska županija</option>
<option value="VPŽ">Virovitičko-podravska županija</option>
<option value="VSŽ">Vukovarsko-srijemska županija</option>
<option value="ZDŽ">Zadarska županija</option>
<option value="ZGŽ">Zagrebačka županija</option>
</select>'''
        self.assertHTMLEqual(f.render('county', 'GZG'), out)

    def test_HRPhoneNumberPrefixSelect(self):
        f = HRPhoneNumberPrefixSelect()
        out = '''<select name="phone">
<option value="1" selected="selected">01</option>
<option value="20">020</option>
<option value="21">021</option>
<option value="22">022</option>
<option value="23">023</option>
<option value="31">031</option>
<option value="32">032</option>
<option value="33">033</option>
<option value="34">034</option>
<option value="35">035</option>
<option value="40">040</option>
<option value="42">042</option>
<option value="43">043</option>
<option value="44">044</option>
<option value="47">047</option>
<option value="48">048</option>
<option value="49">049</option>
<option value="51">051</option>
<option value="52">052</option>
<option value="53">053</option>
<option value="91">091</option>
<option value="92">092</option>
<option value="95">095</option>
<option value="97">097</option>
<option value="98">098</option>
<option value="99">099</option>
</select>'''
        self.assertHTMLEqual(f.render('phone', '1'), out)

    def test_HRLicensePlatePrefixSelect(self):
        f = HRLicensePlatePrefixSelect()
        out = '''<select name="license">
<option value="BJ" selected="selected">BJ</option>
<option value="BM">BM</option>
<option value="ČK">ČK</option>
<option value="DA">DA</option>
<option value="DE">DE</option>
<option value="DJ">DJ</option>
<option value="DU">DU</option>
<option value="GS">GS</option>
<option value="IM">IM</option>
<option value="KA">KA</option>
<option value="KC">KC</option>
<option value="KR">KR</option>
<option value="KT">KT</option>
<option value="KŽ">KŽ</option>
<option value="MA">MA</option>
<option value="NA">NA</option>
<option value="NG">NG</option>
<option value="OG">OG</option>
<option value="OS">OS</option>
<option value="PU">PU</option>
<option value="PŽ">PŽ</option>
<option value="RI">RI</option>
<option value="SB">SB</option>
<option value="SK">SK</option>
<option value="SL">SL</option>
<option value="ST">ST</option>
<option value="ŠI">ŠI</option>
<option value="VK">VK</option>
<option value="VT">VT</option>
<option value="VU">VU</option>
<option value="VŽ">VŽ</option>
<option value="ZD">ZD</option>
<option value="ZG">ZG</option>
<option value="ŽU">ŽU</option>
</select>'''
        self.assertHTMLEqual(f.render('license', 'BJ'), out)

    def test_HRPhoneNumberField(self):
        error_invalid = ['Enter a valid phone number']
        error_area = ['Enter a valid area or mobile network code']
        error_number = ['The phone number is too long']
        valid = {
            '+38511234567': '+38511234567',
            '0038511234567': '+38511234567',
            '011234567': '+38511234567',
            '+38521123456': '+38521123456',
            '0038521123456': '+38521123456',
            '021123456': '+38521123456',
        }
        invalid = {
            '123456789': error_invalid,
            '0811234567': error_area,
            '0111234567': error_number,
        }
        self.assertFieldOutput(HRPhoneNumberField, valid, invalid)

    def test_HRLicensePlateField(self):
        error_invalid = ['Enter a valid vehicle license plate number']
        error_area = ['Enter a valid location code']
        error_number = ['Number part cannot be zero']
        valid = {
            'ZG 1234-AA': 'ZG 1234-AA',
            'ZG 123-A': 'ZG 123-A',
        }
        invalid = {
            'PV12345': error_invalid,
            'PV1234AA': error_area,
            'ZG0000CC': error_number,
        }
        self.assertFieldOutput(HRLicensePlateField, valid, invalid)

    def test_HRPostalCodeField(self):
        error_invalid = ['Enter a valid 5 digit postal code']
        valid = {
            '10000': '10000',
            '35410': '35410',
        }
        invalid = {
            'ABCD': error_invalid,
            '99999': error_invalid,
        }
        self.assertFieldOutput(HRPostalCodeField, valid, invalid)

    def test_HROIBField(self):
        error_invalid = ['Enter a valid 11 digit OIB']
        valid = {
            '12345678901': '12345678901',
        }
        invalid = {
            '1234567890': ['Ensure this value has at least 11 characters (it has 10).'] + error_invalid,
            'ABCDEFGHIJK': error_invalid,
        }
        self.assertFieldOutput(HROIBField, valid, invalid)

    def test_HRJMBGField(self):
        error_invalid = ['Enter a valid 13 digit JMBG']
        error_date = ['Error in date segment']
        valid = {
            '1211984302155': '1211984302155',
            '2701984307107': '2701984307107',
        }
        invalid = {
            '1211984302156': error_invalid,
            'ABCDEFG': error_invalid,
            '9999999123456': error_date,
        }
        self.assertFieldOutput(HRJMBGField, valid, invalid)

    def test_HRJMBAGField(self):
        error_invalid = ['Enter a valid 19 digit JMBAG starting with 601983']
        error_copy = ['Card issue number cannot be zero']
        valid = {
            '601983 11 0130185856 4': '6019831101301858564',
        }
        invalid = {
            '601983 11 0130185856 5': error_invalid,
            '601983 01 0130185856 4': error_copy,
        }
        self.assertFieldOutput(HRJMBAGField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_id
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.id_.forms import (IDPhoneNumberField, IDPostCodeField,
                                   IDNationalIdentityNumberField,
                                   IDLicensePlateField,
                                   IDProvinceSelect,
                                   IDLicensePlatePrefixSelect)


class IDLocalFlavorTests(SimpleTestCase):
    def test_IDProvinceSelect(self):
        f = IDProvinceSelect()
        out = '''<select name="provinces">
<option value="ACE">Aceh</option>
<option value="BLI">Bali</option>
<option value="BTN">Banten</option>
<option value="BKL">Bengkulu</option>
<option value="DIY">Yogyakarta</option>
<option value="JKT">Jakarta</option>
<option value="GOR">Gorontalo</option>
<option value="JMB">Jambi</option>
<option value="JBR">Jawa Barat</option>
<option value="JTG">Jawa Tengah</option>
<option value="JTM">Jawa Timur</option>
<option value="KBR">Kalimantan Barat</option>
<option value="KSL">Kalimantan Selatan</option>
<option value="KTG">Kalimantan Tengah</option>
<option value="KTM">Kalimantan Timur</option>
<option value="BBL">Kepulauan Bangka-Belitung</option>
<option value="KRI">Kepulauan Riau</option>
<option value="LPG" selected="selected">Lampung</option>
<option value="MLK">Maluku</option>
<option value="MUT">Maluku Utara</option>
<option value="NTB">Nusa Tenggara Barat</option>
<option value="NTT">Nusa Tenggara Timur</option>
<option value="PPA">Papua</option>
<option value="PPB">Papua Barat</option>
<option value="RIU">Riau</option>
<option value="SLB">Sulawesi Barat</option>
<option value="SLS">Sulawesi Selatan</option>
<option value="SLT">Sulawesi Tengah</option>
<option value="SLR">Sulawesi Tenggara</option>
<option value="SLU">Sulawesi Utara</option>
<option value="SMB">Sumatera Barat</option>
<option value="SMS">Sumatera Selatan</option>
<option value="SMU">Sumatera Utara</option>
</select>'''
        self.assertHTMLEqual(f.render('provinces', 'LPG'), out)

    def test_IDLicensePlatePrefixSelect(self):
        f = IDLicensePlatePrefixSelect()
        out = '''<select name="codes">
<option value="A">Banten</option>
<option value="AA">Magelang</option>
<option value="AB">Yogyakarta</option>
<option value="AD">Surakarta - Solo</option>
<option value="AE">Madiun</option>
<option value="AG">Kediri</option>
<option value="B">Jakarta</option>
<option value="BA">Sumatera Barat</option>
<option value="BB">Tapanuli</option>
<option value="BD">Bengkulu</option>
<option value="BE" selected="selected">Lampung</option>
<option value="BG">Sumatera Selatan</option>
<option value="BH">Jambi</option>
<option value="BK">Sumatera Utara</option>
<option value="BL">Nanggroe Aceh Darussalam</option>
<option value="BM">Riau</option>
<option value="BN">Kepulauan Bangka Belitung</option>
<option value="BP">Kepulauan Riau</option>
<option value="CC">Corps Consulate</option>
<option value="CD">Corps Diplomatic</option>
<option value="D">Bandung</option>
<option value="DA">Kalimantan Selatan</option>
<option value="DB">Sulawesi Utara Daratan</option>
<option value="DC">Sulawesi Barat</option>
<option value="DD">Sulawesi Selatan</option>
<option value="DE">Maluku</option>
<option value="DG">Maluku Utara</option>
<option value="DH">NTT - Timor</option>
<option value="DK">Bali</option>
<option value="DL">Sulawesi Utara Kepulauan</option>
<option value="DM">Gorontalo</option>
<option value="DN">Sulawesi Tengah</option>
<option value="DR">NTB - Lombok</option>
<option value="DS">Papua dan Papua Barat</option>
<option value="DT">Sulawesi Tenggara</option>
<option value="E">Cirebon</option>
<option value="EA">NTB - Sumbawa</option>
<option value="EB">NTT - Flores</option>
<option value="ED">NTT - Sumba</option>
<option value="F">Bogor</option>
<option value="G">Pekalongan</option>
<option value="H">Semarang</option>
<option value="K">Pati</option>
<option value="KB">Kalimantan Barat</option>
<option value="KH">Kalimantan Tengah</option>
<option value="KT">Kalimantan Timur</option>
<option value="L">Surabaya</option>
<option value="M">Madura</option>
<option value="N">Malang</option>
<option value="P">Jember</option>
<option value="R">Banyumas</option>
<option value="RI">Federal Government</option>
<option value="S">Bojonegoro</option>
<option value="T">Purwakarta</option>
<option value="W">Sidoarjo</option>
<option value="Z">Garut</option>
</select>'''
        self.assertHTMLEqual(f.render('codes', 'BE'), out)

    def test_IDPhoneNumberField(self):
        error_invalid = ['Enter a valid phone number']
        valid = {
            '0812-3456789': '0812-3456789',
            '081234567890': '081234567890',
            '021 345 6789': '021 345 6789',
            '0213456789': '0213456789',
            '+62-21-3456789': '+62-21-3456789',
            '(021) 345 6789': '(021) 345 6789',
        }
        invalid = {
            '0123456789': error_invalid,
            '+62-021-3456789': error_invalid,
            '+62-0812-3456789': error_invalid,
            '0812345678901': error_invalid,
            'foo': error_invalid,
        }
        self.assertFieldOutput(IDPhoneNumberField, valid, invalid)

    def test_IDPostCodeField(self):
        error_invalid = ['Enter a valid post code']
        valid = {
            '12340': '12340',
            '25412': '25412',
            ' 12340 ': '12340',
        }
        invalid = {
            '12 3 4 0': error_invalid,
            '12345': error_invalid,
            '10100': error_invalid,
            '123456': error_invalid,
            'foo': error_invalid,
        }
        self.assertFieldOutput(IDPostCodeField, valid, invalid)

    def test_IDNationalIdentityNumberField(self):
        error_invalid = ['Enter a valid NIK/KTP number']
        valid = {
            ' 12.3456.010178 3456 ': '12.3456.010178.3456',
            '1234560101783456': '12.3456.010178.3456',
            '12.3456.010101.3456': '12.3456.010101.3456',
        }
        invalid = {
            '12.3456.310278.3456': error_invalid,
            '00.0000.010101.0000': error_invalid,
            '1234567890123456': error_invalid,
            'foo': error_invalid,
        }
        self.assertFieldOutput(IDNationalIdentityNumberField, valid, invalid)

    def test_IDLicensePlateField(self):
        error_invalid = ['Enter a valid vehicle license plate number']
        valid = {
            ' b 1234  ab ': 'B 1234 AB',
            'B 1234 ABC': 'B 1234 ABC',
            'A 12': 'A 12',
            'DK 12345 12': 'DK 12345 12',
            'RI 10': 'RI 10',
            'CD 12 12': 'CD 12 12',
        }
        invalid = {
            'CD 10 12': error_invalid,
            'CD 1234 12': error_invalid,
            'RI 10 AB': error_invalid,
            'B 12345 01': error_invalid,
            'N 1234 12': error_invalid,
            'A 12 XYZ': error_invalid,
            'Q 1234 AB': error_invalid,
            'foo': error_invalid,
        }
        self.assertFieldOutput(IDLicensePlateField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_ie
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.ie.forms import IECountySelect


class IELocalFlavorTests(SimpleTestCase):

    def test_IECountySelect(self):
        f = IECountySelect()
        out = '''<select name="counties">
<option value="carlow">Carlow</option>
<option value="cavan">Cavan</option>
<option value="clare">Clare</option>
<option value="cork">Cork</option>
<option value="donegal">Donegal</option>
<option value="dublin" selected="selected">Dublin</option>
<option value="galway">Galway</option>
<option value="kerry">Kerry</option>
<option value="kildare">Kildare</option>
<option value="kilkenny">Kilkenny</option>
<option value="laois">Laois</option>
<option value="leitrim">Leitrim</option>
<option value="limerick">Limerick</option>
<option value="longford">Longford</option>
<option value="louth">Louth</option>
<option value="mayo">Mayo</option>
<option value="meath">Meath</option>
<option value="monaghan">Monaghan</option>
<option value="offaly">Offaly</option>
<option value="roscommon">Roscommon</option>
<option value="sligo">Sligo</option>
<option value="tipperary">Tipperary</option>
<option value="waterford">Waterford</option>
<option value="westmeath">Westmeath</option>
<option value="wexford">Wexford</option>
<option value="wicklow">Wicklow</option>
</select>'''
        self.assertHTMLEqual(f.render('counties', 'dublin'), out)

########NEW FILE########
__FILENAME__ = test_il
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.il.forms import (ILPostalCodeField, ILIDNumberField,
                                  ILMobilePhoneNumberField)


class ILLocalFlavorTests(SimpleTestCase):
    def test_ILPostalCodeField(self):
        error_format = ['Enter a postal code in the format XXXXXXX (or XXXXX) - digits only']
        valid = {
            '69973': '69973',
            '699 73': '69973',
            '12345': '12345',
            '6665557': '6665557',
        }
        invalid = {
            '84545x': error_format,
            '123456': error_format,
            '1234': error_format,
            '123 4': error_format,
            '44455522': error_format,
        }
        self.assertFieldOutput(ILPostalCodeField, valid, invalid)

    def test_ILIDNumberField(self):
        error_invalid = ['Enter a valid ID number.']
        valid = {
            '3933742-3': '39337423',
            '39337423': '39337423',
            '039337423': '039337423',
            '03933742-3': '039337423',
            '0091': '0091',
        }
        invalid = {
            '123456789': error_invalid,
            '12345678-9': error_invalid,
            '012346578': error_invalid,
            '012346578-': error_invalid,
            '0001': error_invalid,
        }
        self.assertFieldOutput(ILIDNumberField, valid, invalid)

    def test_ILMobilePhoneNumber(self):
        error_invalid = ['Enter a valid Mobile Number.']
        valid = {
            '0500000000': '0500000000',
            '0522222222': '0522222222',
            '0533333333': '0533333333',
            '0544444444': '0544444444',
            '0555555555': '0555555555',
            '0566666666': '0566666666',
            '0577777777': '0577777777',
            '0588888888': '0588888888',
            '0599999999': '0599999999',
            '052-2222222': '052-2222222',
            '52-2222222': '52-2222222',
            '525555555': '525555555',
            '(050)-1111111': '(050)-1111111',
            '(050)1111111': '(050)1111111'
        }
        invalid = {
            '05556': error_invalid,
            '0605555555': error_invalid,
            '050)1111111': error_invalid,
            '55--2222222': error_invalid,
            '0511111111': error_invalid,
            '05777777': error_invalid,
            '05555555555': error_invalid,
            '0054673446': error_invalid,
        }
        self.assertFieldOutput(ILMobilePhoneNumberField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_in
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.in_.forms import (INZipCodeField, INStateField,
                                   INAadhaarNumberField,
                                   INStateSelect, INPhoneNumberField)


class INLocalFlavorTests(SimpleTestCase):
    def test_INPhoneNumberField(self):
        error_format = ['Phone numbers must be in 02X-8X or 03X-7X or 04X-6X format.']
        valid = {
            '0423-2443667': '0423-2443667',
            '0423 2443667': '0423 2443667',
            '04236-244366': '04236-244366',
            '040-24436678': '040-24436678',
        }
        invalid = {
            '04-2443667': error_format,
            '423-2443667': error_format,
            '0423-9442667': error_format,
            '0423-0443667': error_format,
            '0423-244366': error_format,
            '04232442667': error_format,
            '0423DJANGO': error_format,
        }
        self.assertFieldOutput(INPhoneNumberField, valid, invalid)

    def test_INPStateSelect(self):
        f = INStateSelect()
        out = '''<select name="state">
<option value="KA">Karnataka</option>
<option value="AP" selected="selected">Andhra Pradesh</option>
<option value="KL">Kerala</option>
<option value="TN">Tamil Nadu</option>
<option value="MH">Maharashtra</option>
<option value="UP">Uttar Pradesh</option>
<option value="GA">Goa</option>
<option value="GJ">Gujarat</option>
<option value="RJ">Rajasthan</option>
<option value="HP">Himachal Pradesh</option>
<option value="JK">Jammu and Kashmir</option>
<option value="AR">Arunachal Pradesh</option>
<option value="AS">Assam</option>
<option value="BR">Bihar</option>
<option value="CG">Chattisgarh</option>
<option value="HR">Haryana</option>
<option value="JH">Jharkhand</option>
<option value="MP">Madhya Pradesh</option>
<option value="MN">Manipur</option>
<option value="ML">Meghalaya</option>
<option value="MZ">Mizoram</option>
<option value="NL">Nagaland</option>
<option value="OR">Orissa</option>
<option value="PB">Punjab</option>
<option value="SK">Sikkim</option>
<option value="TR">Tripura</option>
<option value="UA">Uttarakhand</option>
<option value="WB">West Bengal</option>
<option value="AN">Andaman and Nicobar</option>
<option value="CH">Chandigarh</option>
<option value="DN">Dadra and Nagar Haveli</option>
<option value="DD">Daman and Diu</option>
<option value="DL">Delhi</option>
<option value="LD">Lakshadweep</option>
<option value="PY">Pondicherry</option>
</select>'''
        self.assertHTMLEqual(f.render('state', 'AP'), out)

    def test_INZipCodeField(self):
        error_format = ['Enter a zip code in the format XXXXXX or XXX XXX.']
        valid = {
            '360311': '360311',
            '360 311': '360311',
        }
        invalid = {
            '36 0311': error_format,
            '3603111': error_format,
            '360 31': error_format,
            '36031': error_format,
            'O2B 2R3': error_format
        }
        self.assertFieldOutput(INZipCodeField, valid, invalid)

    def test_INAadhaarNumberField(self):
        error_format = ['Enter a valid Aadhaar number in XXXX XXXX XXXX or '
                                                    'XXXX-XXXX-XXXX format.']
        valid = {
            '3603-1178-8988': '3603 1178 8988',
            '1892 3114 7727': '1892 3114 7727',
        }
        invalid = {
            '9910 182': error_format,
            '3603111': error_format,
            '000 0000 0000': error_format,
            '0000 0000 0000': error_format,
            '18888 8882 8288': error_format
        }
        self.assertFieldOutput(INAadhaarNumberField, valid, invalid)

    def test_INStateField(self):
        error_format = ['Enter an Indian state or territory.']
        valid = {
            'an': 'AN',
            'AN': 'AN',
            'andaman and nicobar': 'AN',
            'andra pradesh': 'AP',
            'andrapradesh': 'AP',
            'andhrapradesh': 'AP',
            'ap': 'AP',
            'andhra pradesh': 'AP',
            'ar': 'AR',
            'arunachal pradesh': 'AR',
            'assam': 'AS',
            'as': 'AS',
            'bihar': 'BR',
            'br': 'BR',
            'cg': 'CG',
            'chattisgarh': 'CG',
            'ch': 'CH',
            'chandigarh': 'CH',
            'daman and diu': 'DD',
            'dd': 'DD',
            'dl': 'DL',
            'delhi': 'DL',
            'dn': 'DN',
            'dadra and nagar haveli': 'DN',
            'ga': 'GA',
            'goa': 'GA',
            'gj': 'GJ',
            'gujarat': 'GJ',
            'himachal pradesh': 'HP',
            'hp': 'HP',
            'hr': 'HR',
            'haryana': 'HR',
            'jharkhand': 'JH',
            'jh': 'JH',
            'jammu and kashmir': 'JK',
            'jk': 'JK',
            'karnataka': 'KA',
            'karnatka': 'KA',
            'ka': 'KA',
            'kerala': 'KL',
            'kl': 'KL',
            'ld': 'LD',
            'lakshadweep': 'LD',
            'maharastra': 'MH',
            'mh': 'MH',
            'maharashtra': 'MH',
            'meghalaya': 'ML',
            'ml': 'ML',
            'mn': 'MN',
            'manipur': 'MN',
            'madhya pradesh': 'MP',
            'mp': 'MP',
            'mizoram': 'MZ',
            'mizo': 'MZ',
            'mz': 'MZ',
            'nl': 'NL',
            'nagaland': 'NL',
            'orissa': 'OR',
            'odisa': 'OR',
            'orisa': 'OR',
            'or': 'OR',
            'pb': 'PB',
            'punjab': 'PB',
            'py': 'PY',
            'pondicherry': 'PY',
            'rajasthan': 'RJ',
            'rajastan': 'RJ',
            'rj': 'RJ',
            'sikkim': 'SK',
            'sk': 'SK',
            'tamil nadu': 'TN',
            'tn': 'TN',
            'tamilnadu': 'TN',
            'tamilnad': 'TN',
            'tr': 'TR',
            'tripura': 'TR',
            'ua': 'UA',
            'uttarakhand': 'UA',
            'up': 'UP',
            'uttar pradesh': 'UP',
            'westbengal': 'WB',
            'bengal': 'WB',
            'wb': 'WB',
            'west bengal': 'WB'
        }
        invalid = {
            'florida': error_format,
            'FL': error_format,
        }
        self.assertFieldOutput(INStateField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_is
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.is_.forms import (ISIdNumberField, ISPhoneNumberField,
                                   ISPostalCodeSelect)


class ISLocalFlavorTests(SimpleTestCase):
    def test_ISPostalCodeSelect(self):
        f = ISPostalCodeSelect()
        out = '''<select name="foo">
<option value="101">101 Reykjav\xedk</option>
<option value="103">103 Reykjav\xedk</option>
<option value="104">104 Reykjav\xedk</option>
<option value="105">105 Reykjav\xedk</option>
<option value="107">107 Reykjav\xedk</option>
<option value="108">108 Reykjav\xedk</option>
<option value="109">109 Reykjav\xedk</option>
<option value="110">110 Reykjav\xedk</option>
<option value="111">111 Reykjav\xedk</option>
<option value="112">112 Reykjav\xedk</option>
<option value="113">113 Reykjav\xedk</option>
<option value="116">116 Kjalarnes</option>
<option value="121">121 Reykjav\xedk</option>
<option value="123">123 Reykjav\xedk</option>
<option value="124">124 Reykjav\xedk</option>
<option value="125">125 Reykjav\xedk</option>
<option value="127">127 Reykjav\xedk</option>
<option value="128">128 Reykjav\xedk</option>
<option value="129">129 Reykjav\xedk</option>
<option value="130">130 Reykjav\xedk</option>
<option value="132">132 Reykjav\xedk</option>
<option value="150">150 Reykjav\xedk</option>
<option value="155">155 Reykjav\xedk</option>
<option value="170">170 Seltjarnarnes</option>
<option value="172">172 Seltjarnarnes</option>
<option value="190">190 Vogar</option>
<option value="200">200 K\xf3pavogur</option>
<option value="201">201 K\xf3pavogur</option>
<option value="202">202 K\xf3pavogur</option>
<option value="203">203 K\xf3pavogur</option>
<option value="210">210 Gar\xf0ab\xe6r</option>
<option value="212">212 Gar\xf0ab\xe6r</option>
<option value="220">220 Hafnarfj\xf6r\xf0ur</option>
<option value="221">221 Hafnarfj\xf6r\xf0ur</option>
<option value="222">222 Hafnarfj\xf6r\xf0ur</option>
<option value="225">225 \xc1lftanes</option>
<option value="230">230 Reykjanesb\xe6r</option>
<option value="232">232 Reykjanesb\xe6r</option>
<option value="233">233 Reykjanesb\xe6r</option>
<option value="235">235 Keflav\xedkurflugv\xf6llur</option>
<option value="240">240 Grindav\xedk</option>
<option value="245">245 Sandger\xf0i</option>
<option value="250">250 Gar\xf0ur</option>
<option value="260">260 Reykjanesb\xe6r</option>
<option value="270">270 Mosfellsb\xe6r</option>
<option value="271">271 Mosfellsb\xe6r</option>
<option value="276">276 Mosfellsb\xe6r</option>
<option value="300">300 Akranes</option>
<option value="301">301 Akranes</option>
<option value="302">302 Akranes</option>
<option value="310">310 Borgarnes</option>
<option value="311">311 Borgarnes</option>
<option value="320">320 Reykholt \xed Borgarfir\xf0i</option>
<option value="340">340 Stykkish\xf3lmur</option>
<option value="345">345 Flatey \xe1 Brei\xf0afir\xf0i</option>
<option value="350">350 Grundarfj\xf6r\xf0ur</option>
<option value="355">355 \xd3lafsv\xedk</option>
<option value="356">356 Sn\xe6fellsb\xe6r</option>
<option value="360">360 Hellissandur</option>
<option value="370">370 B\xfa\xf0ardalur</option>
<option value="371">371 B\xfa\xf0ardalur</option>
<option value="380">380 Reykh\xf3lahreppur</option>
<option value="400">400 \xcdsafj\xf6r\xf0ur</option>
<option value="401">401 \xcdsafj\xf6r\xf0ur</option>
<option value="410">410 Hn\xedfsdalur</option>
<option value="415">415 Bolungarv\xedk</option>
<option value="420">420 S\xfa\xf0av\xedk</option>
<option value="425">425 Flateyri</option>
<option value="430">430 Su\xf0ureyri</option>
<option value="450">450 Patreksfj\xf6r\xf0ur</option>
<option value="451">451 Patreksfj\xf6r\xf0ur</option>
<option value="460">460 T\xe1lknafj\xf6r\xf0ur</option>
<option value="465">465 B\xedldudalur</option>
<option value="470">470 \xdeingeyri</option>
<option value="471">471 \xdeingeyri</option>
<option value="500">500 Sta\xf0ur</option>
<option value="510">510 H\xf3lmav\xedk</option>
<option value="512">512 H\xf3lmav\xedk</option>
<option value="520">520 Drangsnes</option>
<option value="522">522 Kj\xf6rvogur</option>
<option value="523">523 B\xe6r</option>
<option value="524">524 Nor\xf0urfj\xf6r\xf0ur</option>
<option value="530">530 Hvammstangi</option>
<option value="531">531 Hvammstangi</option>
<option value="540">540 Bl\xf6ndu\xf3s</option>
<option value="541">541 Bl\xf6ndu\xf3s</option>
<option value="545">545 Skagastr\xf6nd</option>
<option value="550">550 Sau\xf0\xe1rkr\xf3kur</option>
<option value="551">551 Sau\xf0\xe1rkr\xf3kur</option>
<option value="560">560 Varmahl\xed\xf0</option>
<option value="565">565 Hofs\xf3s</option>
<option value="566">566 Hofs\xf3s</option>
<option value="570">570 Flj\xf3t</option>
<option value="580">580 Siglufj\xf6r\xf0ur</option>
<option value="600">600 Akureyri</option>
<option value="601">601 Akureyri</option>
<option value="602">602 Akureyri</option>
<option value="603">603 Akureyri</option>
<option value="610">610 Greniv\xedk</option>
<option value="611">611 Gr\xedmsey</option>
<option value="620">620 Dalv\xedk</option>
<option value="621">621 Dalv\xedk</option>
<option value="625">625 \xd3lafsfj\xf6r\xf0ur</option>
<option value="630">630 Hr\xedsey</option>
<option value="640">640 H\xfasav\xedk</option>
<option value="641">641 H\xfasav\xedk</option>
<option value="645">645 Fossh\xf3ll</option>
<option value="650">650 Laugar</option>
<option value="660">660 M\xfdvatn</option>
<option value="670">670 K\xf3pasker</option>
<option value="671">671 K\xf3pasker</option>
<option value="675">675 Raufarh\xf6fn</option>
<option value="680">680 \xde\xf3rsh\xf6fn</option>
<option value="681">681 \xde\xf3rsh\xf6fn</option>
<option value="685">685 Bakkafj\xf6r\xf0ur</option>
<option value="690">690 Vopnafj\xf6r\xf0ur</option>
<option value="700">700 Egilssta\xf0ir</option>
<option value="701">701 Egilssta\xf0ir</option>
<option value="710">710 Sey\xf0isfj\xf6r\xf0ur</option>
<option value="715">715 Mj\xf3ifj\xf6r\xf0ur</option>
<option value="720">720 Borgarfj\xf6r\xf0ur eystri</option>
<option value="730">730 Rey\xf0arfj\xf6r\xf0ur</option>
<option value="735">735 Eskifj\xf6r\xf0ur</option>
<option value="740">740 Neskaupsta\xf0ur</option>
<option value="750">750 F\xe1skr\xfa\xf0sfj\xf6r\xf0ur</option>
<option value="755">755 St\xf6\xf0varfj\xf6r\xf0ur</option>
<option value="760">760 Brei\xf0dalsv\xedk</option>
<option value="765">765 Dj\xfapivogur</option>
<option value="780">780 H\xf6fn \xed Hornafir\xf0i</option>
<option value="781">781 H\xf6fn \xed Hornafir\xf0i</option>
<option value="785">785 \xd6r\xe6fi</option>
<option value="800">800 Selfoss</option>
<option value="801">801 Selfoss</option>
<option value="802">802 Selfoss</option>
<option value="810">810 Hverager\xf0i</option>
<option value="815">815 \xdeorl\xe1ksh\xf6fn</option>
<option value="816">816 \xd6lfus</option>
<option value="820">820 Eyrarbakki</option>
<option value="825">825 Stokkseyri</option>
<option value="840">840 Laugarvatn</option>
<option value="845">845 Fl\xfa\xf0ir</option>
<option value="850">850 Hella</option>
<option value="851">851 Hella</option>
<option value="860">860 Hvolsv\xf6llur</option>
<option value="861">861 Hvolsv\xf6llur</option>
<option value="870">870 V\xedk</option>
<option value="871">871 V\xedk</option>
<option value="880">880 Kirkjub\xe6jarklaustur</option>
<option value="900">900 Vestmannaeyjar</option>
<option value="902">902 Vestmannaeyjar</option>
</select>'''
        self.assertHTMLEqual(f.render('foo', 'bar'), out)

    def test_ISIdNumberField(self):
        error_atleast = ['Ensure this value has at least 10 characters (it has 9).']
        error_invalid = ['Enter a valid Icelandic identification number. The format is XXXXXX-XXXX.']
        error_atmost = ['Ensure this value has at most 11 characters (it has 12).']
        error_notvalid = ['The Icelandic identification number is not valid.']
        valid = {
            '2308803449': '230880-3449',
            '230880-3449': '230880-3449',
            '230880 3449': '230880-3449',
            '2308803440': '230880-3440',
        }
        invalid = {
            '230880343': error_atleast + error_invalid,
            '230880343234': error_atmost + error_invalid,
            'abcdefghijk': error_invalid,
            '2308803439': error_notvalid,

        }
        self.assertFieldOutput(ISIdNumberField, valid, invalid)

    def test_ISPhoneNumberField(self):
        error_invalid = ['Enter a valid value.']
        error_atleast = ['Ensure this value has at least 7 characters (it has 6).']
        error_atmost = ['Ensure this value has at most 8 characters (it has 9).']
        valid = {
            '1234567': '1234567',
            '123 4567': '1234567',
            '123-4567': '1234567',
        }
        invalid = {
            '123-456': error_invalid,
            '123456': error_atleast + error_invalid,
            '123456555': error_atmost + error_invalid,
            'abcdefg': error_invalid,
            ' 1234567 ': error_atmost + error_invalid,
            ' 12367  ': error_invalid
        }
        self.assertFieldOutput(ISPhoneNumberField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_it
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.it.forms import (ITZipCodeField, ITRegionSelect,
                                  ITSocialSecurityNumberField,
                                  ITVatNumberField, ITPhoneNumberField)


class ITLocalFlavorTests(SimpleTestCase):
    def test_ITRegionSelect(self):
        f = ITRegionSelect()
        out = '''<select name="regions">
<option value="ABR">Abruzzo</option>
<option value="BAS">Basilicata</option>
<option value="CAL">Calabria</option>
<option value="CAM">Campania</option>
<option value="EMR">Emilia-Romagna</option>
<option value="FVG">Friuli-Venezia Giulia</option>
<option value="LAZ">Lazio</option>
<option value="LIG">Liguria</option>
<option value="LOM">Lombardia</option>
<option value="MAR">Marche</option>
<option value="MOL">Molise</option>
<option value="PMN" selected="selected">Piemonte</option>
<option value="PUG">Puglia</option>
<option value="SAR">Sardegna</option>
<option value="SIC">Sicilia</option>
<option value="TOS">Toscana</option>
<option value="TAA">Trentino-Alto Adige</option>
<option value="UMB">Umbria</option>
<option value="VAO">Valle d\u2019Aosta</option>
<option value="VEN">Veneto</option>
</select>'''
        self.assertHTMLEqual(f.render('regions', 'PMN'), out)

    def test_ITZipCodeField(self):
        error_invalid = ['Enter a valid zip code.']
        valid = {
            '00100': '00100',
        }
        invalid = {
            ' 00100': error_invalid,
        }
        self.assertFieldOutput(ITZipCodeField, valid, invalid)

    def test_ITSocialSecurityNumberField(self):
        error_invalid = ['Enter a valid Social Security number.']
        valid = {
            'LVSGDU99T71H501L': 'LVSGDU99T71H501L',
            'LBRRME11A01L736W': 'LBRRME11A01L736W',
            'lbrrme11a01l736w': 'LBRRME11A01L736W',
            'LBR RME 11A01 L736W': 'LBRRME11A01L736W',
        }
        invalid = {
            'LBRRME11A01L736A': error_invalid,
            '%BRRME11A01L736W': error_invalid,
        }
        self.assertFieldOutput(ITSocialSecurityNumberField, valid, invalid)

    def test_ITSocialSecurityNumberField_for_entities(self):
        error_invalid = ['Enter a valid Social Security number.']
        valid = {
            '07973780013': '07973780013',
            '7973780013': '07973780013',
            7973780013: '07973780013',
        }
        invalid = {
            '07973780014': error_invalid,
            'A7973780013': error_invalid,
        }
        self.assertFieldOutput(ITSocialSecurityNumberField, valid, invalid)

    def test_ITVatNumberField(self):
        error_invalid = ['Enter a valid VAT number.']
        valid = {
            '07973780013': '07973780013',
            '7973780013': '07973780013',
            7973780013: '07973780013',
        }
        invalid = {
            '07973780014': error_invalid,
            'A7973780013': error_invalid,
        }
        self.assertFieldOutput(ITVatNumberField, valid, invalid)

    def test_ITPhoneNumberField(self):
        error_format = ['Enter a valid Italian phone number.']
        valid = {
            '+39 347 1234567': '347 1234567',
            '39 347 123 4567': '347 1234567',
            '347-1234567': '347 1234567',
            '3471234567': '347 1234567',
            '+39 347 12345678': '347 12345678',
            '39 347 123 45678': '347 12345678',
            '347-12345678': '347 12345678',
            '34712345678': '347 12345678',
            '+39 347 123456': '347 123456',
            '39 347 123 456': '347 123456',
            '347-123456': '347 123456',
            '347123456': '347 123456',
            '+39 0861 12345678': '0861 12345678',
            '39 0861 1234 5678': '0861 12345678',
            '0861-12345678': '0861 12345678',
            '0861 12345': '0861 12345',
        }
        invalid = {
            '+44 347 1234567': error_format,
            '14471234567': error_format,
            '0861 123456789': error_format,
            '08661234567890': error_format,
        }
        self.assertFieldOutput(ITPhoneNumberField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_jp
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.jp.forms import (JPPostalCodeField, JPPrefectureSelect,
                                  JPPrefectureCodeSelect)


class JPLocalFlavorTests(SimpleTestCase):
    def test_JPPrefectureSelect(self):
        f = JPPrefectureSelect()
        out = '''<select name="prefecture">
<option value="hokkaido">Hokkaido</option>
<option value="aomori">Aomori</option>
<option value="iwate">Iwate</option>
<option value="miyagi">Miyagi</option>
<option value="akita">Akita</option>
<option value="yamagata">Yamagata</option>
<option value="fukushima">Fukushima</option>
<option value="ibaraki">Ibaraki</option>
<option value="tochigi">Tochigi</option>
<option value="gunma">Gunma</option>
<option value="saitama">Saitama</option>
<option value="chiba">Chiba</option>
<option value="tokyo">Tokyo</option>
<option value="kanagawa" selected="selected">Kanagawa</option>
<option value="niigata">Niigata</option>
<option value="toyama">Toyama</option>
<option value="ishikawa">Ishikawa</option>
<option value="fukui">Fukui</option>
<option value="yamanashi">Yamanashi</option>
<option value="nagano">Nagano</option>
<option value="gifu">Gifu</option>
<option value="shizuoka">Shizuoka</option>
<option value="aichi">Aichi</option>
<option value="mie">Mie</option>
<option value="shiga">Shiga</option>
<option value="kyoto">Kyoto</option>
<option value="osaka">Osaka</option>
<option value="hyogo">Hyogo</option>
<option value="nara">Nara</option>
<option value="wakayama">Wakayama</option>
<option value="tottori">Tottori</option>
<option value="shimane">Shimane</option>
<option value="okayama">Okayama</option>
<option value="hiroshima">Hiroshima</option>
<option value="yamaguchi">Yamaguchi</option>
<option value="tokushima">Tokushima</option>
<option value="kagawa">Kagawa</option>
<option value="ehime">Ehime</option>
<option value="kochi">Kochi</option>
<option value="fukuoka">Fukuoka</option>
<option value="saga">Saga</option>
<option value="nagasaki">Nagasaki</option>
<option value="kumamoto">Kumamoto</option>
<option value="oita">Oita</option>
<option value="miyazaki">Miyazaki</option>
<option value="kagoshima">Kagoshima</option>
<option value="okinawa">Okinawa</option>
</select>'''
        self.assertHTMLEqual(f.render('prefecture', 'kanagawa'), out)

    def test_JPPrefectureCodeSelect(self):
        f = JPPrefectureCodeSelect()
        out = '''<select name="prefecture">
<option value="01">Hokkaido</option>
<option value="02">Aomori</option>
<option value="03">Iwate</option>
<option value="04">Miyagi</option>
<option value="05">Akita</option>
<option value="06">Yamagata</option>
<option value="07">Fukushima</option>
<option value="08">Ibaraki</option>
<option value="09">Tochigi</option>
<option value="10">Gunma</option>
<option value="11">Saitama</option>
<option value="12">Chiba</option>
<option value="13">Tokyo</option>
<option value="14" selected="selected">Kanagawa</option>
<option value="15">Niigata</option>
<option value="16">Toyama</option>
<option value="17">Ishikawa</option>
<option value="18">Fukui</option>
<option value="19">Yamanashi</option>
<option value="20">Nagano</option>
<option value="21">Gifu</option>
<option value="22">Shizuoka</option>
<option value="23">Aichi</option>
<option value="24">Mie</option>
<option value="25">Shiga</option>
<option value="26">Kyoto</option>
<option value="27">Osaka</option>
<option value="28">Hyogo</option>
<option value="29">Nara</option>
<option value="30">Wakayama</option>
<option value="31">Tottori</option>
<option value="32">Shimane</option>
<option value="33">Okayama</option>
<option value="34">Hiroshima</option>
<option value="35">Yamaguchi</option>
<option value="36">Tokushima</option>
<option value="37">Kagawa</option>
<option value="38">Ehime</option>
<option value="39">Kochi</option>
<option value="40">Fukuoka</option>
<option value="41">Saga</option>
<option value="42">Nagasaki</option>
<option value="43">Kumamoto</option>
<option value="44">Oita</option>
<option value="45">Miyazaki</option>
<option value="46">Kagoshima</option>
<option value="47">Okinawa</option>
</select>'''
        self.assertHTMLEqual(f.render('prefecture', '14'), out)

    def test_JPPostalCodeField(self):
        error_format = ['Enter a postal code in the format XXXXXXX or XXX-XXXX.']
        valid = {
            '251-0032': '2510032',
            '2510032': '2510032',
        }
        invalid = {
            '2510-032': error_format,
            '251a0032': error_format,
            'a51-0032': error_format,
            '25100321': error_format,
        }
        self.assertFieldOutput(JPPostalCodeField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_kw
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.kw.forms import KWCivilIDNumberField


class KWLocalFlavorTests(SimpleTestCase):
    def test_KWCivilIDNumberField(self):
        error_invalid = ['Enter a valid Kuwaiti Civil ID number']
        valid = {
            '282040701483': '282040701483',
        }
        invalid = {
            '289332013455': error_invalid,
        }
        self.assertFieldOutput(KWCivilIDNumberField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_lt
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.lt.forms import (LTIDCodeField, LTMunicipalitySelect,
                                  LTCountySelect, LTPhoneField,
                                  LTPostalCodeField)


class LTLocalFlavorTests(SimpleTestCase):

    def test_LTIDCodeField(self):
        error_len = ['ID Code consists of exactly 11 decimal digits.']
        error_check = ['Wrong ID Code checksum.']
        error_date = ['ID Code contains invalid date.']

        valid = {
            '33309240064': '33309240064',
            '35002125431': '35002125431',
            '61205010081': '61205010081',
            '48504140959': '48504140959',
        }

        invalid = {
            '3456': error_len,
            '123456789101': error_len,
            '33309240065': error_check,
            'hello': error_len,
            '134535443i2': error_len,
            '48504140956': error_check,
            '48504140953': error_check,
            '50520150003': error_date,
            '50501009554': error_date,
            '80101017318': error_date,
        }

        self.assertFieldOutput(LTIDCodeField, valid, invalid)

    def test_LTPostalCodeField(self):
        errors = LTPostalCodeField().error_messages

        valid = {'00000': 'LT-00000',
                 'LT-00000': 'LT-00000',
                 'lt - 12345': 'LT-12345'}
        invalid = {'000000': [errors['invalid']],
                   '0000': [errors['invalid']],
                   'LT-00': [errors['invalid']],
                   'LT-0000': [errors['invalid']],
                   'LT-000000': [errors['invalid']]}
        self.assertFieldOutput(LTPostalCodeField, valid, invalid)

    def test_LTCountySelect(self):
        f = LTCountySelect()
        expected = """
            <select name="test">
            <option value="alytus">Alytus</option>
            <option value="kaunas">Kaunas</option>
            <option value="klaipeda">Klaipėda</option>
            <option value="mariampole">Mariampolė</option>
            <option value="panevezys">Panevėžys</option>
            <option value="siauliai">Šiauliai</option>
            <option value="taurage">Tauragė</option>
            <option value="telsiai">Telšiai</option>
            <option value="utena">Utena</option>
            <option value="vilnius">Vilnius</option>
            </select>
        """
        self.assertHTMLEqual(f.render('test', None), expected)

    def test_LTMunicipalitySelect(self):
        f = LTMunicipalitySelect()
        expected = """
            <select name="test">
            <option value="akmene">Akmenė district</option>
            <option value="alytus_c">Alytus city</option>
            <option value="alytus">Alytus district</option>
            <option value="anyksciai">Anykščiai district</option>
            <option value="birstonas">Birštonas</option>
            <option value="birzai">Biržai district</option>
            <option value="druskininkai">Druskininkai</option>
            <option value="elektrenai">Elektrėnai</option>
            <option value="ignalina">Ignalina district</option>
            <option value="jonava">Jonava district</option>
            <option value="joniskis">Joniškis district</option>
            <option value="jurbarkas">Jurbarkas district</option>
            <option value="kaisiadorys">Kaišiadorys district</option>
            <option value="kalvarija">Kalvarija</option>
            <option value="kaunas_c">Kaunas city</option>
            <option value="kaunas">Kaunas district</option>
            <option value="kazluruda">Kazlų Rūda</option>
            <option value="kedainiai">Kėdainiai district</option>
            <option value="kelme">Kelmė district</option>
            <option value="klaipeda_c">Klaipėda city</option>
            <option value="klaipeda">Klaipėda district</option>
            <option value="kretinga">Kretinga district</option>
            <option value="kupiskis">Kupiškis district</option>
            <option value="lazdijai">Lazdijai district</option>
            <option value="marijampole">Marijampolė</option>
            <option value="mazeikiai">Mažeikiai district</option>
            <option value="moletai">Molėtai district</option>
            <option value="neringa">Neringa</option>
            <option value="pagegiai">Pagėgiai</option>
            <option value="pakruojis">Pakruojis district</option>
            <option value="palanga">Palanga city</option>
            <option value="panevezys_c">Panevėžys city</option>
            <option value="panevezys">Panevėžys district</option>
            <option value="pasvalys">Pasvalys district</option>
            <option value="plunge">Plungė district</option>
            <option value="prienai">Prienai district</option>
            <option value="radviliskis">Radviliškis district</option>
            <option value="raseiniai">Raseiniai district</option>
            <option value="rietavas">Rietavas</option>
            <option value="rokiskis">Rokiškis district</option>
            <option value="skuodas">Skuodas district</option>
            <option value="sakiai">Šakiai district</option>
            <option value="salcininkai">Šalčininkai district</option>
            <option value="siauliai_c">Šiauliai city</option>
            <option value="siauliai">Šiauliai district</option>
            <option value="silale">Šilalė district</option>
            <option value="silute">Šilutė district</option>
            <option value="sirvintos">Širvintos district</option>
            <option value="svencionys">Švenčionys district</option>
            <option value="taurage">Tauragė district</option>
            <option value="telsiai">Telšiai district</option>
            <option value="trakai">Trakai district</option>
            <option value="ukmerge">Ukmergė district</option>
            <option value="utena">Utena district</option>
            <option value="varena">Varėna district</option>
            <option value="vilkaviskis">Vilkaviškis district</option>
            <option value="vilnius_c">Vilnius city</option>
            <option value="vilnius">Vilnius district</option>
            <option value="visaginas">Visaginas</option>
            <option value="zarasai">Zarasai district</option>
            </select>
        """
        self.assertHTMLEqual(f.render('test', None), expected)

    def test_LTPhoneField(self):
        errors = LTPhoneField().error_messages
        invalid = {'8 600 00 00o': [errors['non-digit']],
                   '8 600 00 000 o': [errors['non-digit']],
                   'o 600 00 000': [errors['non-digit']]}
        self.assertFieldOutput(LTPhoneField, {}, invalid)


    def test_LTPhoneField_emergency(self):
        errors = LTPhoneField().error_messages

        valid = {'112': '112', '01': '01', '02': '02', '03': '03', '04': '04'}
        invalid = {'1112': [errors['no-parse']]}
        self.assertFieldOutput(LTPhoneField, valid, invalid,
                               field_kwargs={'emergency': True,
                                             'mobile': False,
                                             'landline': False})

        self.assertFieldOutput(LTPhoneField, {}, {'112': [errors['no-parse']]},
                               field_kwargs={'emergency': False,
                                             'mobile': False,
                                             'landline': False})

    def test_LTPhoneField_mobile(self):
        errors = LTPhoneField().error_messages
        valid = {'8 600 00 000': '+37060000000',
                 '370 600 00 000': '+37060000000',
                 '+370 612 34 567': '+37061234567'}
        invalid = {'8 600 00 00': [errors['no-parse']],
                   '370 600 00 00': [errors['no-parse']],
                   '370 600 00 0': [errors['no-parse']],
                   '860 000 00 000': [errors['no-parse']]}

        self.assertFieldOutput(LTPhoneField, valid, invalid,
                               field_kwargs={'landline': False})

        self.assertFieldOutput(LTPhoneField, {},
                               {'8 600 00 000': [errors['no-parse']],
                                '370 600 00 000': [errors['no-parse']],
                                '+370 612 34 567': [errors['no-parse']]},
                               field_kwargs={'mobile': False,
                                             'landline': False})

    def test_LTPhoneField_service(self):
        errors = LTPhoneField().error_messages
        valid = {'8 800 00 000': '+37080000000',
                 '370 800 00 000': '+37080000000',
                 '+370 800 34 567': '+37080034567'}
        invalid = {'8 800 00 00': [errors['no-parse']],
                   '370 800 00 00': [errors['no-parse']],
                   '370 800 00 0': [errors['no-parse']],
                   '860 800 00 000': [errors['no-parse']],
                   '8 812 00 000': [errors['no-parse']],
                   '370 812 00 000': [errors['no-parse']]}

        self.assertFieldOutput(LTPhoneField, valid, invalid,
                               field_kwargs={'landline': False,
                                             'mobile': False,
                                             'service': True})

        self.assertFieldOutput(LTPhoneField, {},
                               {'8 800 00 000': [errors['no-parse']],
                                '370 800 00 000': [errors['no-parse']],
                                '+370 800 34 567': [errors['no-parse']]},
                               field_kwargs={'mobile': False,
                                             'landline': False,
                                             'service': False})

    def test_LTPhoneField_landline_local(self):
        errors = LTPhoneField().error_messages

        valid = {"2123456": "+37052123456",
                 "123456": "123456",
                 "12345": "12345"}
        invalid = {"1234": [errors['no-parse']]}

        self.assertFieldOutput(LTPhoneField, valid, invalid,
                               field_kwargs={'landline': True,
                                             'mobile': False,
                                             'landline_local': True})

        invalid = {"2123456": [errors['no-parse']],
                   "123456": [errors['no-parse']],
                   "12345": [errors['no-parse']],
                   "1234": [errors['no-parse']]}

        self.assertFieldOutput(LTPhoneField, {}, invalid,
                               field_kwargs={'mobile': False})

        self.assertRaises(ValueError, LTPhoneField, landline=False,
                          landline_local=True)

    def test_LTPhoneField_landline(self):
        errors = LTPhoneField().error_messages

        valid = {'850000000': '+37050000000',
                 '37050000000': '+37050000000',
                 '+37050000000': '+37050000000'}
        invalid = {'3705000000': [errors['no-parse']],
                   '370500000000': [errors['no-parse']],
                   '50000000': [errors['no-parse']],
                   '800023456': [errors['no-parse']]}

        self.assertFieldOutput(LTPhoneField, valid, invalid,
                               field_kwargs={'mobile': False})

########NEW FILE########
__FILENAME__ = test_lv
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.lv.forms import (LVPersonalCodeField, LVPostalCodeField,
                                  LVMunicipalitySelect)


class LVLocalFlavorTests(SimpleTestCase):
    def test_LVPersonalCodeField(self):
        invalid_format = ['Enter a Latvian personal code in format XXXXXX-XXXXX.']
        invalid = ['Enter a valid Latvian personal code.']

        valid = {
            '261155-10410': '261155-10410',
            '010100-10005': '010100-10005',  # smallest valid code
            '311299-29999': '311299-29999',  # greatest valid code
            '290212-21232': '290212-21232',  # leap year
        }
        invalid = {
            '26115510410': invalid_format,  # missing dash
            '261155-90414': invalid_format,  # invalid century
            '123456-12345': invalid,  # invalid checksum
            '310200-10006': invalid,  # invalid date
            '000000-10007': invalid,  # invalid day/month
            '290214-21234': invalid,  # not leap year
        }

        self.assertFieldOutput(LVPersonalCodeField, valid, invalid)

    def test_LVPostalCodeField(self):
        invalid = [LVPostalCodeField().error_messages['invalid']]

        valid = {
            'LV-1023': 'LV-1023',
            'lv - 5750': 'LV-5750',
            '3036': 'LV-3036',
        }
        invalid = {
            '123': invalid,
            '12345': invalid,
            'LV-12345': invalid,
            '0123': invalid,  # out of range
            'LV-9999': invalid,  # out of range
        }
        self.assertFieldOutput(LVPostalCodeField, valid, invalid)

    def test_LVMunicipalitySelect(self):
        f = LVMunicipalitySelect()
        expected = '''
<select name="municipality">
<option value="DGV">Daugavpils</option>
<option value="JEL">Jelgava</option>
<option value="JKB">Jēkabpils</option>
<option value="JUR">Jūrmala</option>
<option value="LPX">Liepāja</option>
<option value="REZ">Rēzekne</option>
<option value="RIX">Riga</option>
<option value="VMR">Valmiera</option>
<option value="VEN">Ventspils</option>
<option value="001">Aglona municipality</option>
<option value="002">Aizkraukle municipality</option>
<option value="003">Aizpute municipality</option>
<option value="004">Aknīste municipality</option>
<option value="005">Aloja municipality</option>
<option value="006">Alsunga municipality</option>
<option value="007">Alūksne municipality</option>
<option value="008">Amata municipality</option>
<option value="009">Ape municipality</option>
<option value="010">Auce municipality</option>
<option value="011">Ādaži municipality</option>
<option value="012">Babīte municipality</option>
<option value="013">Baldone municipality</option>
<option value="014">Baltinava municipality</option>
<option value="015">Balvi municipality</option>
<option value="016">Bauska municipality</option>
<option value="017">Beverīna municipality</option>
<option value="018">Brocēni municipality</option>
<option value="019">Burtnieki municipality</option>
<option value="020">Carnikava municipality</option>
<option value="021">Cesvaine municipality</option>
<option value="022">Cēsis municipality</option>
<option value="023">Cibla municipality</option>
<option value="024">Dagda municipality</option>
<option value="025">Daugavpils municipality</option>
<option value="026">Dobele municipality</option>
<option value="027">Dundaga municipality</option>
<option value="028">Durbe municipality</option>
<option value="029">Engure municipality</option>
<option value="030">Ērgļi municipality</option>
<option value="031">Garkalne municipality</option>
<option value="032">Grobiņa municipality</option>
<option value="033">Gulbene municipality</option>
<option value="034">Iecava municipality</option>
<option value="035">Ikšķile municipality</option>
<option value="036">Ilūkste municipality</option>
<option value="037">Inčukalns municipality</option>
<option value="038">Jaunjelgava municipality</option>
<option value="039">Jaunpiebalga municipality</option>
<option value="040">Jaunpils municipality</option>
<option value="041">Jelgava municipality</option>
<option value="042">Jēkabpils municipality</option>
<option value="043">Kandava municipality</option>
<option value="044">Kārsava municipality</option>
<option value="045">Kocēni municipality</option>
<option value="046">Koknese municipality</option>
<option value="047">Krāslava municipality</option>
<option value="048">Krimulda municipality</option>
<option value="049">Krustpils municipality</option>
<option value="050">Kuldīga municipality</option>
<option value="051">Ķegums municipality</option>
<option value="052">Ķekava municipality</option>
<option value="053">Lielvārde municipality</option>
<option value="054">Limbaži municipality</option>
<option value="055">Līgatne municipality</option>
<option value="056">Līvāni municipality</option>
<option value="057">Lubāna municipality</option>
<option value="058">Ludza municipality</option>
<option value="059">Madona municipality</option>
<option value="060">Mazsalaca municipality</option>
<option value="061">Mālpils municipality</option>
<option value="062">Mārupe municipality</option>
<option value="063">Mērsrags municipality</option>
<option value="064">Naukšēni municipality</option>
<option value="065">Nereta municipality</option>
<option value="066">Nīca municipality</option>
<option value="067">Ogre municipality</option>
<option value="068">Olaine municipality</option>
<option value="069">Ozolnieki municipality</option>
<option value="070">Pārgauja municipality</option>
<option value="071">Pāvilosta municipality</option>
<option value="072">Pļaviņas municipality</option>
<option value="073">Preiļi municipality</option>
<option value="074">Priekule municipality</option>
<option value="075">Priekuļi municipality</option>
<option value="076">Rauna municipality</option>
<option value="077">Rēzekne municipality</option>
<option value="078">Riebiņi municipality</option>
<option value="079">Roja municipality</option>
<option value="080">Ropaži municipality</option>
<option value="081">Rucava municipality</option>
<option value="082">Rugāji municipality</option>
<option value="083">Rundāle municipality</option>
<option value="084">Rūjiena municipality</option>
<option value="085">Sala municipality</option>
<option value="086">Salacgrīva municipality</option>
<option value="087">Salaspils municipality</option>
<option value="088">Saldus municipality</option>
<option value="089">Saulkrasti municipality</option>
<option value="090">Sēja municipality</option>
<option value="091">Sigulda municipality</option>
<option value="092">Skrīveri municipality</option>
<option value="093">Skrunda municipality</option>
<option value="094">Smiltene municipality</option>
<option value="095">Stopiņi municipality</option>
<option value="096">Strenči municipality</option>
<option value="097">Talsi municipality</option>
<option value="098">Tērvete municipality</option>
<option value="099">Tukums municipality</option>
<option value="100">Vaiņode municipality</option>
<option value="101">Valka municipality</option>
<option value="102">Varakļāni municipality</option>
<option value="103">Vārkava municipality</option>
<option value="104">Vecpiebalga municipality</option>
<option value="105">Vecumnieki municipality</option>
<option value="106">Ventspils municipality</option>
<option value="107">Viesīte municipality</option>
<option value="108">Viļaka municipality</option>
<option value="109">Viļāni municipality</option>
<option value="110">Zilupe municipality</option>
</select>'''
        self.assertHTMLEqual(f.render('municipality', None), expected)

########NEW FILE########
__FILENAME__ = forms
from __future__ import absolute_import

from django.forms import ModelForm

from .models import MKPerson


class MKPersonForm(ModelForm):

    class Meta:
        model = MKPerson
        fields = ('first_name', 'last_name', 'umcn', 'id_number', 'municipality', 'municipality_req')

########NEW FILE########
__FILENAME__ = models
from django.db import models

from localflavor.mk.models import (MKIdentityCardNumberField,
                                   MKMunicipalityField, UMCNField)


class MKPerson(models.Model):
    first_name = models.CharField(max_length=20)
    last_name = models.CharField(max_length=20)
    umcn = UMCNField()
    id_number = MKIdentityCardNumberField()
    municipality = MKMunicipalityField(blank=True)
    municipality_req = MKMunicipalityField(blank=False)

########NEW FILE########
__FILENAME__ = tests
# -*- encoding: utf-8 -*-
from __future__ import absolute_import, unicode_literals

from django.test import SimpleTestCase

from localflavor.mk.forms import (MKIdentityCardNumberField,
                                  MKMunicipalitySelect, UMCNField)

from .forms import MKPersonForm


class MKLocalFlavorTests(SimpleTestCase):

    def setUp(self):
        self.form = MKPersonForm({
            'first_name': 'Someone',
            'last_name': 'Something',
            'umcn': '2402983450006',
            'municipality': 'OD',
            'municipality_req': 'VE',
            'id_number': 'A1234567',
        })

    def test_get_display_methods(self):
        """
        Test that the get_*_display() methods are added to the model instances.
        """
        person = self.form.save()
        self.assertEqual(person.get_municipality_display(), 'Ohrid')
        self.assertEqual(person.get_municipality_req_display(), 'Veles')

    def test_municipality_required(self):
        """
        Test that required MKMunicipalityFields throw appropriate errors.
        """

        form = MKPersonForm({
            'first_name': 'Someone',
            'last_name': 'Something',
            'umcn': '2402983450006',
            'municipality': 'OD',
            'id_number': 'A1234567',
        })
        self.assertFalse(form.is_valid())
        self.assertEqual(
            form.errors['municipality_req'], ['This field is required.'])

    def test_umcn_invalid(self):
        """
        Test that UMCNFields throw appropriate errors for invalid UMCNs.
        """
        form = MKPersonForm({
            'first_name': 'Someone',
            'last_name': 'Something',
            'umcn': '2402983450007',
            'municipality': 'OD',
            'municipality_req': 'VE',
            'id_number': 'A1234567',
        })
        self.assertFalse(form.is_valid())
        self.assertEqual(form.errors['umcn'], ['The UMCN is not valid.'])

        form = MKPersonForm({
            'first_name': 'Someone',
            'last_name': 'Something',
            'umcn': '3002983450007',
            'municipality': 'OD',
            'municipality_req': 'VE',
            'id_number': 'A1234567',
        })
        self.assertEqual(form.errors['umcn'],
                         ['The first 7 digits of the UMCN must represent a valid past date.'])

    def test_idnumber_invalid(self):
        """
        Test that MKIdentityCardNumberFields throw
        appropriate errors for invalid values
        """

        form = MKPersonForm({
            'first_name': 'Someone',
            'last_name': 'Something',
            'umcn': '2402983450007',
            'municipality': 'OD',
            'municipality_req': 'VE',
            'id_number': 'A123456a',
        })
        self.assertFalse(form.is_valid())
        self.assertEqual(form.errors['id_number'],
                         ['Identity card numbers must contain either 4 to 7 '
                          'digits or an uppercase letter and 7 digits.'])

    def test_field_blank_option(self):
        """
        Test that the empty option is there.
        """
        municipality_select_html = """\
<select name="municipality" id="id_municipality">
<option value="">---------</option>
<option value="AD">Aerodrom</option>
<option value="AR">Aračinovo</option>
<option value="BR">Berovo</option>
<option value="TL">Bitola</option>
<option value="BG">Bogdanci</option>
<option value="VJ">Bogovinje</option>
<option value="BS">Bosilovo</option>
<option value="BN">Brvenica</option>
<option value="BU">Butel</option>
<option value="VA">Valandovo</option>
<option value="VL">Vasilevo</option>
<option value="VV">Vevčani</option>
<option value="VE">Veles</option>
<option value="NI">Vinica</option>
<option value="VC">Vraneštica</option>
<option value="VH">Vrapčište</option>
<option value="GB">Gazi Baba</option>
<option value="GV">Gevgelija</option>
<option value="GT">Gostivar</option>
<option value="GR">Gradsko</option>
<option value="DB">Debar</option>
<option value="DA">Debarca</option>
<option value="DL">Delčevo</option>
<option value="DK">Demir Kapija</option>
<option value="DM">Demir Hisar</option>
<option value="DE">Dolneni</option>
<option value="DR">Drugovo</option>
<option value="GP">Gjorče Petrov</option>
<option value="ZE">Želino</option>
<option value="ZA">Zajas</option>
<option value="ZK">Zelenikovo</option>
<option value="ZR">Zrnovci</option>
<option value="IL">Ilinden</option>
<option value="JG">Jegunovce</option>
<option value="AV">Kavadarci</option>
<option value="KB">Karbinci</option>
<option value="KX">Karpoš</option>
<option value="VD">Kisela Voda</option>
<option value="KH">Kičevo</option>
<option value="KN">Konče</option>
<option value="OC">Koćani</option>
<option value="KY">Kratovo</option>
<option value="KZ">Kriva Palanka</option>
<option value="KG">Krivogaštani</option>
<option value="KS">Kruševo</option>
<option value="UM">Kumanovo</option>
<option value="LI">Lipkovo</option>
<option value="LO">Lozovo</option>
<option value="MR">Mavrovo i Rostuša</option>
<option value="MK">Makedonska Kamenica</option>
<option value="MD">Makedonski Brod</option>
<option value="MG">Mogila</option>
<option value="NG">Negotino</option>
<option value="NV">Novaci</option>
<option value="NS">Novo Selo</option>
<option value="OS">Oslomej</option>
<option value="OD" selected="selected">Ohrid</option>
<option value="PE">Petrovec</option>
<option value="PH">Pehčevo</option>
<option value="PN">Plasnica</option>
<option value="PP">Prilep</option>
<option value="PT">Probištip</option>
<option value="RV">Radoviš</option>
<option value="RN">Rankovce</option>
<option value="RE">Resen</option>
<option value="RO">Rosoman</option>
<option value="AJ">Saraj</option>
<option value="SL">Sveti Nikole</option>
<option value="SS">Sopište</option>
<option value="SD">Star Dojran</option>
<option value="NA">Staro Nagoričane</option>
<option value="UG">Struga</option>
<option value="RU">Strumica</option>
<option value="SU">Studeničani</option>
<option value="TR">Tearce</option>
<option value="ET">Tetovo</option>
<option value="CE">Centar</option>
<option value="CZ">Centar-Župa</option>
<option value="CI">Čair</option>
<option value="CA">Čaška</option>
<option value="CH">Češinovo-Obleševo</option>
<option value="CS">Čučer-Sandevo</option>
<option value="ST">Štip</option>
<option value="SO">Šuto Orizari</option>
</select>"""
        self.assertHTMLEqual(str(self.form['municipality']), municipality_select_html)

    def test_MKIdentityCardNumberField(self):
        error_invalid = ['Identity card numbers must contain either 4 to 7 '
                         'digits or an uppercase letter and 7 digits.']
        valid = {
            'L0018077': 'L0018077',
            'A0078315': 'A0078315',
        }
        invalid = {
            '123': error_invalid,
            'abcdf': error_invalid,
            '234390a': error_invalid,
        }
        self.assertFieldOutput(MKIdentityCardNumberField, valid, invalid)

    def test_MKMunicipalitySelect(self):
        f = MKMunicipalitySelect()
        out = '''<select name="municipality">
<option value="AD">Aerodrom</option>
<option value="AR">Ara\u010dinovo</option>
<option value="BR">Berovo</option>
<option value="TL">Bitola</option>
<option value="BG">Bogdanci</option>
<option value="VJ">Bogovinje</option>
<option value="BS">Bosilovo</option>
<option value="BN">Brvenica</option>
<option value="BU">Butel</option>
<option value="VA">Valandovo</option>
<option value="VL">Vasilevo</option>
<option value="VV">Vev\u010dani</option>
<option value="VE">Veles</option>
<option value="NI">Vinica</option>
<option value="VC">Vrane\u0161tica</option>
<option value="VH">Vrap\u010di\u0161te</option>
<option value="GB">Gazi Baba</option>
<option value="GV">Gevgelija</option>
<option value="GT">Gostivar</option>
<option value="GR">Gradsko</option>
<option value="DB">Debar</option>
<option value="DA">Debarca</option>
<option value="DL" selected="selected">Del\u010devo</option>
<option value="DK">Demir Kapija</option>
<option value="DM">Demir Hisar</option>
<option value="DE">Dolneni</option>
<option value="DR">Drugovo</option>
<option value="GP">Gjor\u010de Petrov</option>
<option value="ZE">\u017delino</option>
<option value="ZA">Zajas</option>
<option value="ZK">Zelenikovo</option>
<option value="ZR">Zrnovci</option>
<option value="IL">Ilinden</option>
<option value="JG">Jegunovce</option>
<option value="AV">Kavadarci</option>
<option value="KB">Karbinci</option>
<option value="KX">Karpo\u0161</option>
<option value="VD">Kisela Voda</option>
<option value="KH">Ki\u010devo</option>
<option value="KN">Kon\u010de</option>
<option value="OC">Ko\u0107ani</option>
<option value="KY">Kratovo</option>
<option value="KZ">Kriva Palanka</option>
<option value="KG">Krivoga\u0161tani</option>
<option value="KS">Kru\u0161evo</option>
<option value="UM">Kumanovo</option>
<option value="LI">Lipkovo</option>
<option value="LO">Lozovo</option>
<option value="MR">Mavrovo i Rostu\u0161a</option>
<option value="MK">Makedonska Kamenica</option>
<option value="MD">Makedonski Brod</option>
<option value="MG">Mogila</option>
<option value="NG">Negotino</option>
<option value="NV">Novaci</option>
<option value="NS">Novo Selo</option>
<option value="OS">Oslomej</option>
<option value="OD">Ohrid</option>
<option value="PE">Petrovec</option>
<option value="PH">Peh\u010devo</option>
<option value="PN">Plasnica</option>
<option value="PP">Prilep</option>
<option value="PT">Probi\u0161tip</option>
<option value="RV">Radovi\u0161</option>
<option value="RN">Rankovce</option>
<option value="RE">Resen</option>
<option value="RO">Rosoman</option>
<option value="AJ">Saraj</option>
<option value="SL">Sveti Nikole</option>
<option value="SS">Sopi\u0161te</option>
<option value="SD">Star Dojran</option>
<option value="NA">Staro Nagori\u010dane</option>
<option value="UG">Struga</option>
<option value="RU">Strumica</option>
<option value="SU">Studeni\u010dani</option>
<option value="TR">Tearce</option>
<option value="ET">Tetovo</option>
<option value="CE">Centar</option>
<option value="CZ">Centar-\u017dupa</option>
<option value="CI">\u010cair</option>
<option value="CA">\u010ca\u0161ka</option>
<option value="CH">\u010ce\u0161inovo-Oble\u0161evo</option>
<option value="CS">\u010cu\u010der-Sandevo</option>
<option value="ST">\u0160tip</option>
<option value="SO">\u0160uto Orizari</option>
</select>'''
        self.assertHTMLEqual(f.render('municipality', 'DL'), out)

    def test_UMCNField(self):
        error_invalid = ['This field should contain exactly 13 digits.']
        error_checksum = ['The UMCN is not valid.']
        error_date = ['The first 7 digits of the UMCN '
                      'must represent a valid past date.']
        valid = {
            '2402983450006': '2402983450006',
            '2803984430038': '2803984430038',
            '1909982045004': '1909982045004',
        }
        invalid = {
            '240298345': error_invalid,
            'abcdefghj': error_invalid,
            '2402082450006': error_date,
            '3002982450006': error_date,
            '2402983450007': error_checksum,
            '2402982450006': error_checksum,
        }
        self.assertFieldOutput(UMCNField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_mt
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.mt.forms import MTPostalCodeField


class MTLocalFlavorTests(SimpleTestCase):
    def test_MTPostalCodeField(self):
        error_format = ['Enter a valid postal code in format AAA 0000.']
        valid = {
            'AAA 0000': 'AAA 0000',
            'VLT 1117': 'VLT 1117',
        }
        invalid = {
            'AAA0000': error_format,
            'VLT1117': error_format,
        }
        self.assertFieldOutput(MTPostalCodeField, valid, invalid)

########NEW FILE########
__FILENAME__ = forms
from __future__ import absolute_import

from django.forms import ModelForm

from .models import MXPersonProfile


class MXPersonProfileForm(ModelForm):

    class Meta:
        model = MXPersonProfile
        fields = ('state', 'rfc', 'curp', 'zip_code', 'ssn')

########NEW FILE########
__FILENAME__ = models
from django.db import models

from localflavor.mx.models import (MXStateField, MXRFCField, MXCURPField,
                                   MXZipCodeField, MXSocialSecurityNumberField)


class MXPersonProfile(models.Model):
    state = MXStateField()
    rfc = MXRFCField()
    curp = MXCURPField()
    zip_code = MXZipCodeField()
    ssn = MXSocialSecurityNumberField()

########NEW FILE########
__FILENAME__ = tests
# -*- coding: utf-8 -*-
from __future__ import absolute_import, unicode_literals

from django.test import SimpleTestCase

from localflavor.mx.forms import (MXZipCodeField, MXRFCField,
                                  MXStateSelect, MXCURPField,
                                  MXSocialSecurityNumberField)

from .forms import MXPersonProfileForm


class MXLocalFlavorTests(SimpleTestCase):

    def setUp(self):
        self.form = MXPersonProfileForm({
            'state': 'MIC',
            'rfc': 'toma880125kv3',
            'curp': 'toma880125hmnrrn02',
            'zip_code': '58120',
            'ssn': '53987417457',
        })

    def test_get_display_methods(self):
        """Test that the get_*_display() methods are added to the model instances."""
        place = self.form.save()
        self.assertEqual(place.get_state_display(), 'Michoacán')

    def test_errors(self):
        """Test that required MXFields throw appropriate errors."""
        form = MXPersonProfileForm({
            'state': 'Invalid state',
            'rfc': 'invalid rfc',
            'curp': 'invalid curp',
            'zip_code': 'xxx',
            'ssn': 'invalid ssn',
        })
        self.assertFalse(form.is_valid())
        self.assertEqual(form.errors['state'], ['Select a valid choice. Invalid state is not one of the available choices.'])
        self.assertEqual(form.errors['rfc'], ['Enter a valid RFC.'])
        self.assertEqual(form.errors['curp'], ['Ensure this value has at least 18 characters (it has 12).', 'Enter a valid CURP.'])
        self.assertEqual(form.errors['zip_code'], ['Enter a valid zip code in the format XXXXX.'])
        self.assertEqual(form.errors['ssn'], ['Enter a valid Social Security Number.'])

    def test_field_blank_option(self):
        """Test that the empty option is there."""
        state_select_html = """\
<select name="state" id="id_state">
<option value="">---------</option>
<option value="AGU">Aguascalientes</option>
<option value="BCN">Baja California</option>
<option value="BCS">Baja California Sur</option>
<option value="CAM">Campeche</option>
<option value="CHH">Chihuahua</option>
<option value="CHP">Chiapas</option>
<option value="COA">Coahuila</option>
<option value="COL">Colima</option>
<option value="DIF">Distrito Federal</option>
<option value="DUR">Durango</option>
<option value="GRO">Guerrero</option>
<option value="GUA">Guanajuato</option>
<option value="HID">Hidalgo</option>
<option value="JAL">Jalisco</option>
<option value="MEX">Estado de México</option>
<option value="MIC" selected="selected">Michoacán</option>
<option value="MOR">Morelos</option>
<option value="NAY">Nayarit</option>
<option value="NLE">Nuevo León</option>
<option value="OAX">Oaxaca</option>
<option value="PUE">Puebla</option>
<option value="QUE">Querétaro</option>
<option value="ROO">Quintana Roo</option>
<option value="SIN">Sinaloa</option>
<option value="SLP">San Luis Potosí</option>
<option value="SON">Sonora</option>
<option value="TAB">Tabasco</option>
<option value="TAM">Tamaulipas</option>
<option value="TLA">Tlaxcala</option>
<option value="VER">Veracruz</option>
<option value="YUC">Yucatán</option>
<option value="ZAC">Zacatecas</option>
</select>"""
        self.assertHTMLEqual(str(self.form['state']), state_select_html)

    def test_MXStateSelect(self):
        f = MXStateSelect()
        out = '''<select name="state">
<option value="AGU">Aguascalientes</option>
<option value="BCN">Baja California</option>
<option value="BCS">Baja California Sur</option>
<option value="CAM">Campeche</option>
<option value="CHH">Chihuahua</option>
<option value="CHP">Chiapas</option>
<option value="COA">Coahuila</option>
<option value="COL">Colima</option>
<option value="DIF">Distrito Federal</option>
<option value="DUR">Durango</option>
<option value="GRO">Guerrero</option>
<option value="GUA">Guanajuato</option>
<option value="HID">Hidalgo</option>
<option value="JAL">Jalisco</option>
<option value="MEX">Estado de México</option>
<option value="MIC" selected="selected">Michoacán</option>
<option value="MOR">Morelos</option>
<option value="NAY">Nayarit</option>
<option value="NLE">Nuevo León</option>
<option value="OAX">Oaxaca</option>
<option value="PUE">Puebla</option>
<option value="QUE">Querétaro</option>
<option value="ROO">Quintana Roo</option>
<option value="SIN">Sinaloa</option>
<option value="SLP">San Luis Potosí</option>
<option value="SON">Sonora</option>
<option value="TAB">Tabasco</option>
<option value="TAM">Tamaulipas</option>
<option value="TLA">Tlaxcala</option>
<option value="VER">Veracruz</option>
<option value="YUC">Yucatán</option>
<option value="ZAC">Zacatecas</option>
</select>'''
        self.assertHTMLEqual(f.render('state', 'MIC'), out)

    def test_MXZipCodeField(self):
        error_format = ['Enter a valid zip code in the format XXXXX.']
        valid = {
            '58120': '58120',
            '58502': '58502',
            '59310': '59310',
            '99999': '99999',
        }
        invalid = {
            '17000': error_format,
            '18000': error_format,
            '19000': error_format,
            '00000': error_format,
        }
        self.assertFieldOutput(MXZipCodeField, valid, invalid)

    def test_MXRFCField(self):
        error_format = ['Enter a valid RFC.']
        error_checksum = ['Invalid checksum for RFC.']
        valid = {
            'MoFN641205eX5': 'MOFN641205EX5',
            'ICa060120873': 'ICA060120873',
            'eUcG751104rT0': 'EUCG751104RT0',
            'GME08100195A': 'GME08100195A',
            'AA&060524KX5': 'AA&060524KX5',
            'CAÑ0708045P7': 'CAÑ0708045P7',
            'aaa000101aa9': 'AAA000101AA9',
        }
        invalid = {
            'MED0000000XA': error_format,
            '0000000000XA': error_format,
            'AAA000000AA6': error_format,
            # Dates
            'XXX880002XXX': error_format,
            'XXX880200XXX': error_format,
            'XXX880132XXX': error_format,
            'XXX880230XXX': error_format,
            'XXX880431XXX': error_format,
            # Incorrect checksum
            'MOGR650524E73': error_checksum,
            'HVA7810058F1': error_checksum,
            'MoFN641205eX2': error_checksum,
            'ICa060120871': error_checksum,
            'eUcG751104rT7': error_checksum,
            'GME081001955': error_checksum,
            'AA&060524KX9': error_checksum,
            'CAÑ0708045P2': error_checksum,
        }
        self.assertFieldOutput(MXRFCField, valid, invalid)

    def test_MXCURPField(self):
        error_format = ['Enter a valid CURP.']
        error_checksum = ['Invalid checksum for CURP.']
        valid = {
            'AaMG890608HDFLJL00': 'AAMG890608HDFLJL00',
            'BAAd890419HMNRRV07': 'BAAD890419HMNRRV07',
            'VIAA900930MMNClL08': 'VIAA900930MMNCLL08',
            'HEGR891009HMNRRD09': 'HEGR891009HMNRRD09',
            'MARR890512HMNRMN09': 'MARR890512HMNRMN09',
            'MESJ890928HMNZNS00': 'MESJ890928HMNZNS00',
            'BAAA890317HDFRLL03': 'BAAA890317HDFRLL03',
            'TOMA880125HMNRRNO2': 'TOMA880125HMNRRNO2',
            'OOMG890727HMNRSR06': 'OOMG890727HMNRSR06',
            'AAAA000101HDFCCC09': 'AAAA000101HDFCCC09',
        }
        invalid = {
            'AAAA000000HDFCCC09': error_format,
            'AAAA000000HDFAAA03': error_format,
            'AAAA000000HXXCCC08': error_format,
            'AAAA000000XMNCCC02': error_format,
            'HEGR891009HMNRRD0A': error_format,
            'MARR890512HMNRMN0A': error_format,
            'AaMG890608HDFLJL01': error_checksum,
            'BAAd890419HMNRRV08': error_checksum,
            'VIAA900930MMNClL09': error_checksum,
            'MESJ890928HMNZNS01': error_checksum,
            'BAAA890317HDFRLL04': error_checksum,
            'TOMA880125HMNRRNO3': error_checksum,
            'OOMG890727HMNRSR07': error_checksum,
        }
        self.assertFieldOutput(MXCURPField, valid, invalid)

    def test_MXSocialSecurityNumberField(self):
        error_format = ['Enter a valid Social Security Number.']
        error_checksum = ['Invalid checksum for Social Security Number.']
        valid = {
            '53987417457': '53987417457',
            '53916912966': '53916912966',
            '53986504172': '53986504172',
            '17300426925': '17300426925',
            '53067407212': '53067407212',
            '53018000538': '53018000538',
            '10836311612': '10836311612',
            '37007910666': '37007910666',
            '53055700974': '53055700974',
            '17303364941': '17303364941',
            '53078528469': '53078528469',
        }
        invalid = {
            # Invalid format
            '5398741A457': error_format,
            '53487G12031': error_format,
            '530P8028702': error_format,
            '173004K6925': error_format,
            '5306T407212': error_format,
            '53018N00538': error_format,
            'E0836311612': error_format,
            '3700U910666': error_format,
            '530557 0974': error_format,
            '173033?4941': error_format,
            '53#88417917': error_format,
            # Incorrect checksum
            '53987417451': error_checksum,
            '53018522942': error_checksum,
            '53897239693': error_checksum,
            '01704423244': error_checksum,
            '53855919735': error_checksum,
            '53926201296': error_checksum,
            '53017919037': error_checksum,
            '53884201248': error_checksum,
            '42805762629': error_checksum,
            '53563800130': error_checksum,
        }
        self.assertFieldOutput(MXSocialSecurityNumberField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_nl
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.core.exceptions import ValidationError
from django.test import SimpleTestCase

from localflavor.nl.forms import (NLPhoneNumberField, NLZipCodeField,
                                  NLSoFiNumberField, NLProvinceSelect)
from localflavor.nl.models import NLBankAccountNumberField


class NLLocalFlavorTests(SimpleTestCase):
    def test_NLProvinceSelect(self):
        f = NLProvinceSelect()
        out = '''<select name="provinces">
<option value="DR">Drenthe</option>
<option value="FL">Flevoland</option>
<option value="FR">Fryslân</option>
<option value="GL">Gelderland</option>
<option value="GR">Groningen</option>
<option value="LB">Limburg</option>
<option value="NB">Noord-Brabant</option>
<option value="NH">Noord-Holland</option>
<option value="OV" selected="selected">Overijssel</option>
<option value="UT">Utrecht</option>
<option value="ZE">Zeeland</option>
<option value="ZH">Zuid-Holland</option>
</select>'''
        self.assertHTMLEqual(f.render('provinces', 'OV'), out)

    def test_NLPhoneNumberField(self):
        error_invalid = ['Enter a valid phone number']
        valid = {
            '012-3456789': '012-3456789',
            '0123456789': '0123456789',
            '+31-12-3456789': '+31-12-3456789',
            '(0123) 456789': '(0123) 456789',
        }
        invalid = {
            'foo': error_invalid,
        }
        self.assertFieldOutput(NLPhoneNumberField, valid, invalid)

    def test_NLZipCodeField(self):
        error_invalid = ['Enter a valid postal code']
        valid = {
            '1234ab': '1234 AB',
            '1234 ab': '1234 AB',
            '1234 AB': '1234 AB',
        }
        invalid = {
            '0123AB': error_invalid,
            'foo': error_invalid,
        }
        self.assertFieldOutput(NLZipCodeField, valid, invalid)

    def test_NLSoFiNumberField(self):
        error_invalid = ['Enter a valid SoFi number']
        valid = {
            '123456782': '123456782',
        }
        invalid = {
            '000000000': error_invalid,
            '123456789': error_invalid,
            'foo': error_invalid,
        }
        self.assertFieldOutput(NLSoFiNumberField, valid, invalid)

    def test_NLBankAccountField(self):
        error_invalid = ['Enter a valid bank account number']
        error_wrong_length = ['Bank account numbers have 1 - 7, 9 or 10 digits']

        valid = {
            '0417164300': '0417164300',
            '755490975': '755490975',
            '12345': '12345',
        }
        invalid = {
            '7584955151': error_invalid,
            'foo': error_invalid,
            '0': error_invalid,
            '75849551519': error_wrong_length,
            '00417164300': error_wrong_length,  # Valid with an extra leading zero.
            '75849551': error_wrong_length,
        }

        account_number_field = NLBankAccountNumberField()

        # Test valid inputs.
        for input, output in valid.items():
            self.assertEqual(account_number_field.clean(input, None), output)

        # Test invalid inputs.
        for input, errors in invalid.items():
            with self.assertRaises(ValidationError) as context_manager:
                account_number_field.clean(input, None)
            self.assertEqual(context_manager.exception.messages, errors)

########NEW FILE########
__FILENAME__ = test_no
# -*- coding: utf-8 -*-
from django.test import SimpleTestCase
from django.utils.translation import ugettext_lazy as _, override

from localflavor.no.forms import (NOPhoneNumberField, NOSocialSecurityNumber,
                                  NOZipCodeField, NOMunicipalitySelect)


class NOLocalFlavorTests(SimpleTestCase):
    def test_NOZipCodeField(self):
        error_format = [_('Enter a zip code in the format XXXX.')]
        valid = {
            '1234': '1234',
        }
        invalid = {
            '12': error_format,  # to few digits
            'abcd': error_format,  # illegal characters
            '12345': error_format,  # to many digits
        }
        self.assertFieldOutput(NOZipCodeField, valid, invalid)

    def test_NOPhoneNumberField(self):
        error_format = [_('A phone number must be 8 digits and may have country code')]
        valid = {
            '12345678': '12345678',
            '12 34 56 78': '12 34 56 78',
            '123 45 678': '123 45 678',
            '+4712345678': '+4712345678',
            '+47 12345678': '+47 12345678',
            '+47 12 34 56 78': '+47 12 34 56 78',
            '+47 123 45 678': '+47 123 45 678',
        }
        invalid = {
            '12': error_format,  # to few digits
            'abcdefgh': error_format,  # illegal characters
            '1234567890': error_format,  # to many digits
            '+4512345678': error_format,  # wrong country code
        }
        self.assertFieldOutput(NOPhoneNumberField, valid, invalid)

    def test_NOSocialSecurityNumber(self):
        error_format = [_('Enter a valid Norwegian social security number.')]

        # Valid examples can be found at
        # http://www.fnrinfo.no/Verktoy/FinnLovlige_Dato.aspx
        valid = {
            '12031399902': '12031399902',
            '12031399589': '12031399589',
            '12031398876': '12031398876',
        }
        invalid = {
            '12': error_format,
            'abcdefgh': error_format,
            '40151398876': error_format,
        }
        self.assertFieldOutput(NOSocialSecurityNumber, valid, invalid)

    def test_NOMunicipalitySelect(self):
        with override('en'):
            f = NOMunicipalitySelect()
            out = '''<select name="municipalities">
    <option value="akershus" selected="selected">Akershus</option>
    <option value="austagder">Aust-Agder</option>
    <option value="buskerud">Buskerud</option>
    <option value="finnmark">Finnmark</option>
    <option value="hedmark">Hedmark</option>
    <option value="hordaland">Hordaland</option>
    <option value="janmayen">Jan Mayen</option>
    <option value="moreogromsdal">Møre og Romsdal</option>
    <option value="nordtrondelag">Nord-Trøndelag</option>
    <option value="nordland">Nordland</option>
    <option value="oppland">Oppland</option>
    <option value="oslo">Oslo</option>
    <option value="rogaland">Rogaland</option>
    <option value="sognogfjordane">Sogn og Fjordane</option>
    <option value="svalbard">Svalbard</option>
    <option value="sortrondelag">Sør-Trøndelag</option>
    <option value="telemark">Telemark</option>
    <option value="troms">Troms</option>
    <option value="vestagder">Vest-Agder</option>
    <option value="vestfold">Vestfold</option>
    <option value="ostfold">Østfold</option>
</select>'''
        self.assertHTMLEqual(f.render('municipalities', 'akershus'), out)

########NEW FILE########
__FILENAME__ = forms
from __future__ import absolute_import

from django.forms import ModelForm

from .models import PakistaniPlace


class PakistaniPlaceForm(ModelForm):
    """ Form for storing a Pakistani place. """
    class Meta:
        model = PakistaniPlace
        fields = ('state', 'state_required', 'state_default', 'postcode', 'postcode_required', 'postcode_default',
                  'phone', 'name')

########NEW FILE########
__FILENAME__ = models
from django.db import models

from localflavor.pk.models import PKStateField, PKPostCodeField, PKPhoneNumberField


class PakistaniPlace(models.Model):
    state = PKStateField(blank=True)
    state_required = PKStateField()
    state_default = PKStateField(default="PK-IS", blank=True)
    postcode = PKPostCodeField(blank=True)
    postcode_required = PKPostCodeField()
    postcode_default = PKPostCodeField(default="44000", blank=True)
    phone = PKPhoneNumberField(blank=True)
    name = models.CharField(max_length=20)

########NEW FILE########
__FILENAME__ = tests
from __future__ import absolute_import, unicode_literals

import re

from django.test import TestCase

from localflavor.pk.forms import PKPostCodeField, PKPhoneNumberField, PKStateSelect
from .forms import PakistaniPlaceForm


SELECTED_OPTION_PATTERN = r'<option value="%s" selected="selected">'
BLANK_OPTION_PATTERN = r'<option value="">'
INPUT_VALUE_PATTERN = r'<input[^>]*value="%s"[^>]*>'


class PKLocalflavorTests(TestCase):

    def setUp(self):
        self.form = PakistaniPlaceForm(
            {'state': 'PK-IS',
             'state_required': 'PK-PB',
             'name': 'dummy',
             'postcode': '44000',
             'postcode_required': '46000',
             })

    def test_get_display_methods(self):
        """ Ensure get_*_display() methods are added to model instances. """
        place = self.form.save()
        self.assertEqual(place.get_state_display(), 'Islamabad')
        self.assertEqual(place.get_state_required_display(), 'Punjab')

    def test_default_values(self):
        """ Ensure that default values are selected in forms. """
        form = PakistaniPlaceForm()
        self.assertTrue(re.search(SELECTED_OPTION_PATTERN % 'PK-IS',
                                  str(form['state_default'])))
        self.assertTrue(re.search(INPUT_VALUE_PATTERN % '44000',
                                  str(form['postcode_default'])))

    def test_required(self):
        """ Test that required PKStateFields throw appropriate errors. """
        form = PakistaniPlaceForm({'state': 'PK-PB', 'name': 'Lahore'})
        self.assertFalse(form.is_valid())
        self.assertEqual(
            form.errors['state_required'], ['This field is required.'])
        self.assertEqual(
            form.errors['postcode_required'], ['This field is required.'])

    def test_field_blank_option(self):
        """ Test that the empty option is there. """
        self.assertTrue(re.search(BLANK_OPTION_PATTERN,
                                  str(self.form['state'])))

    def test_selected_values(self):
        """ Ensure selected states match the initial values provided. """
        self.assertTrue(re.search(SELECTED_OPTION_PATTERN % 'PK-IS',
                                  str(self.form['state'])))
        self.assertTrue(re.search(SELECTED_OPTION_PATTERN % 'PK-PB',
                                  str(self.form['state_required'])))
        self.assertTrue(re.search(INPUT_VALUE_PATTERN % '44000',
                                  str(self.form['postcode'])))
        self.assertTrue(re.search(INPUT_VALUE_PATTERN % '46000',
                                  str(self.form['postcode_required'])))

    def test_PKStateSelect(self):
        f = PKStateSelect()
        out = '''<select name="state">
<option value="PK-JK">Azad Jammu &amp; Kashmir</option>
<option value="PK-BA" selected="selected">Balochistan</option>
<option value="PK-TA">Federally Administered Tribal Areas</option>
<option value="PK-GB">Gilgit-Baltistan</option>
<option value="PK-IS">Islamabad</option>
<option value="PK-KP">Khyber Pakhtunkhwa</option>
<option value="PK-PB">Punjab</option>
<option value="PK-SD">Sindh</option>
</select>'''
        self.assertHTMLEqual(f.render('state', 'PK-BA'), out)

    def test_PKPostCodeField(self):
        error_format = ['Enter a 5 digit postcode.']
        valid = {
            '12345': '12345',
            '20000': '20000',
        }
        invalid = {
            '1234': error_format,
            '123456': error_format,
        }
        self.assertFieldOutput(PKPostCodeField, valid, invalid)

    def test_PKPhoneNumberField(self):
        error_format = ['Phone numbers must contain 9, 10 or 11 digits.']
        valid = {
            '123456789': '123456789',
            '1234567890': '1234567890',
            '12345678901': '12345678901',
            '0513456789': '0513456789',
            '051 3456789': '0513456789',
            '051 3456 789': '0513456789',
            '(051) 3456 789': '0513456789',
            '(051) 3456-789': '0513456789',
            '(051)3456-789': '0513456789',
            '0300 1234567': '03001234567',
            '0300 1234 567': '03001234567',
        }
        invalid = {
            '123': error_format,
            '1800DJANGO': error_format,
        }
        self.assertFieldOutput(PKPhoneNumberField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_pl
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.pl.forms import (PLProvinceSelect, PLCountySelect,
                                  PLPostalCodeField, PLNIPField, PLPESELField,
                                  PLNationalIDCardNumberField, PLREGONField)


class PLLocalFlavorTests(SimpleTestCase):
    def test_PLProvinceSelect(self):
        f = PLProvinceSelect()
        out = '''<select name="voivodeships">
<option value="lower_silesia">Lower Silesian</option>
<option value="kuyavia-pomerania">Kuyavian-Pomeranian</option>
<option value="lublin">Lublin</option>
<option value="lubusz">Lubusz</option>
<option value="lodz">Lodz</option>
<option value="lesser_poland">Lesser Poland</option>
<option value="masovia">Masovian</option>
<option value="opole">Opole</option>
<option value="subcarpatia">Subcarpathian</option>
<option value="podlasie">Podlasie</option>
<option value="pomerania" selected="selected">Pomeranian</option>
<option value="silesia">Silesian</option>
<option value="swietokrzyskie">Swietokrzyskie</option>
<option value="warmia-masuria">Warmian-Masurian</option>
<option value="greater_poland">Greater Poland</option>
<option value="west_pomerania">West Pomeranian</option>
</select>'''
        self.assertHTMLEqual(f.render('voivodeships', 'pomerania'), out)

    def test_PLCountrySelect(self):
        f = PLCountySelect()
        out = '''<select name="administrativeunit">
<option value="wroclaw">Wroc\u0142aw</option>
<option value="jeleniagora">Jelenia G\xf3ra</option>
<option value="legnica">Legnica</option>
<option value="boleslawiecki">boles\u0142awiecki</option>
<option value="dzierzoniowski">dzier\u017coniowski</option>
<option value="glogowski">g\u0142ogowski</option>
<option value="gorowski">g\xf3rowski</option>
<option value="jaworski">jaworski</option>
<option value="jeleniogorski">jeleniog\xf3rski</option>
<option value="kamiennogorski">kamiennog\xf3rski</option>
<option value="klodzki">k\u0142odzki</option>
<option value="legnicki">legnicki</option>
<option value="lubanski">luba\u0144ski</option>
<option value="lubinski">lubi\u0144ski</option>
<option value="lwowecki">lw\xf3wecki</option>
<option value="milicki">milicki</option>
<option value="olesnicki">ole\u015bnicki</option>
<option value="olawski">o\u0142awski</option>
<option value="polkowicki">polkowicki</option>
<option value="strzelinski">strzeli\u0144ski</option>
<option value="sredzki">\u015bredzki</option>
<option value="swidnicki">\u015bwidnicki</option>
<option value="trzebnicki">trzebnicki</option>
<option value="walbrzyski">wa\u0142brzyski</option>
<option value="wolowski">wo\u0142owski</option>
<option value="wroclawski">wroc\u0142awski</option>
<option value="zabkowicki">z\u0105bkowicki</option>
<option value="zgorzelecki">zgorzelecki</option>
<option value="zlotoryjski">z\u0142otoryjski</option>
<option value="bydgoszcz">Bydgoszcz</option>
<option value="torun">Toru\u0144</option>
<option value="wloclawek">W\u0142oc\u0142awek</option>
<option value="grudziadz">Grudzi\u0105dz</option>
<option value="aleksandrowski">aleksandrowski</option>
<option value="brodnicki">brodnicki</option>
<option value="bydgoski">bydgoski</option>
<option value="chelminski">che\u0142mi\u0144ski</option>
<option value="golubsko-dobrzynski">golubsko-dobrzy\u0144ski</option>
<option value="grudziadzki">grudzi\u0105dzki</option>
<option value="inowroclawski">inowroc\u0142awski</option>
<option value="lipnowski">lipnowski</option>
<option value="mogilenski">mogile\u0144ski</option>
<option value="nakielski">nakielski</option>
<option value="radziejowski">radziejowski</option>
<option value="rypinski">rypi\u0144ski</option>
<option value="sepolenski">s\u0119pole\u0144ski</option>
<option value="swiecki">\u015bwiecki</option>
<option value="torunski">toru\u0144ski</option>
<option value="tucholski">tucholski</option>
<option value="wabrzeski">w\u0105brzeski</option>
<option value="wloclawski">wroc\u0142awski</option>
<option value="zninski">\u017ani\u0144ski</option>
<option value="lublin">Lublin</option>
<option value="biala-podlaska">Bia\u0142a Podlaska</option>
<option value="chelm">Che\u0142m</option>
<option value="zamosc">Zamo\u015b\u0107</option>
<option value="bialski">bialski</option>
<option value="bilgorajski">bi\u0142gorajski</option>
<option value="chelmski">che\u0142mski</option>
<option value="hrubieszowski">hrubieszowski</option>
<option value="janowski">janowski</option>
<option value="krasnostawski">krasnostawski</option>
<option value="krasnicki">kra\u015bnicki</option>
<option value="lubartowski">lubartowski</option>
<option value="lubelski">lubelski</option>
<option value="leczynski">\u0142\u0119czy\u0144ski</option>
<option value="lukowski">\u0142ukowski</option>
<option value="opolski">opolski</option>
<option value="parczewski">parczewski</option>
<option value="pulawski">pu\u0142awski</option>
<option value="radzynski">radzy\u0144ski</option>
<option value="rycki">rycki</option>
<option value="swidnicki">\u015bwidnicki</option>
<option value="tomaszowski">tomaszowski</option>
<option value="wlodawski">w\u0142odawski</option>
<option value="zamojski">zamojski</option>
<option value="gorzow-wielkopolski">Gorz\xf3w Wielkopolski</option>
<option value="zielona-gora">Zielona G\xf3ra</option>
<option value="gorzowski">gorzowski</option>
<option value="krosnienski">kro\u015bnie\u0144ski</option>
<option value="miedzyrzecki">mi\u0119dzyrzecki</option>
<option value="nowosolski">nowosolski</option>
<option value="slubicki">s\u0142ubicki</option>
<option value="strzelecko-drezdenecki">strzelecko-drezdenecki</option>
<option value="sulecinski">sule\u0144ci\u0144ski</option>
<option value="swiebodzinski">\u015bwiebodzi\u0144ski</option>
<option value="wschowski">wschowski</option>
<option value="zielonogorski">zielonog\xf3rski</option>
<option value="zaganski">\u017caga\u0144ski</option>
<option value="zarski">\u017carski</option>
<option value="lodz">\u0141\xf3d\u017a</option>
<option value="piotrkow-trybunalski">Piotrk\xf3w Trybunalski</option>
<option value="skierniewice">Skierniewice</option>
<option value="belchatowski">be\u0142chatowski</option>
<option value="brzezinski">brzezi\u0144ski</option>
<option value="kutnowski">kutnowski</option>
<option value="laski">\u0142aski</option>
<option value="leczycki">\u0142\u0119czycki</option>
<option value="lowicki">\u0142owicki</option>
<option value="lodzki wschodni">\u0142\xf3dzki wschodni</option>
<option value="opoczynski">opoczy\u0144ski</option>
<option value="pabianicki">pabianicki</option>
<option value="pajeczanski">paj\u0119cza\u0144ski</option>
<option value="piotrkowski">piotrkowski</option>
<option value="poddebicki">podd\u0119bicki</option>
<option value="radomszczanski">radomszcza\u0144ski</option>
<option value="rawski">rawski</option>
<option value="sieradzki">sieradzki</option>
<option value="skierniewicki">skierniewicki</option>
<option value="tomaszowski">tomaszowski</option>
<option value="wielunski">wielu\u0144ski</option>
<option value="wieruszowski">wieruszowski</option>
<option value="zdunskowolski">zdu\u0144skowolski</option>
<option value="zgierski">zgierski</option>
<option value="krakow">Krak\xf3w</option>
<option value="tarnow">Tarn\xf3w</option>
<option value="nowy-sacz">Nowy S\u0105cz</option>
<option value="bochenski">boche\u0144ski</option>
<option value="brzeski">brzeski</option>
<option value="chrzanowski">chrzanowski</option>
<option value="dabrowski">d\u0105browski</option>
<option value="gorlicki">gorlicki</option>
<option value="krakowski">krakowski</option>
<option value="limanowski">limanowski</option>
<option value="miechowski">miechowski</option>
<option value="myslenicki">my\u015blenicki</option>
<option value="nowosadecki">nowos\u0105decki</option>
<option value="nowotarski">nowotarski</option>
<option value="olkuski">olkuski</option>
<option value="oswiecimski">o\u015bwi\u0119cimski</option>
<option value="proszowicki">proszowicki</option>
<option value="suski">suski</option>
<option value="tarnowski">tarnowski</option>
<option value="tatrzanski">tatrza\u0144ski</option>
<option value="wadowicki">wadowicki</option>
<option value="wielicki">wielicki</option>
<option value="warszawa">Warszawa</option>
<option value="ostroleka">Ostro\u0142\u0119ka</option>
<option value="plock">P\u0142ock</option>
<option value="radom">Radom</option>
<option value="siedlce">Siedlce</option>
<option value="bialobrzeski">bia\u0142obrzeski</option>
<option value="ciechanowski">ciechanowski</option>
<option value="garwolinski">garwoli\u0144ski</option>
<option value="gostyninski">gostyni\u0144ski</option>
<option value="grodziski">grodziski</option>
<option value="grojecki">gr\xf3jecki</option>
<option value="kozienicki">kozenicki</option>
<option value="legionowski">legionowski</option>
<option value="lipski">lipski</option>
<option value="losicki">\u0142osicki</option>
<option value="makowski">makowski</option>
<option value="minski">mi\u0144ski</option>
<option value="mlawski">m\u0142awski</option>
<option value="nowodworski">nowodworski</option>
<option value="ostrolecki">ostro\u0142\u0119cki</option>
<option value="ostrowski">ostrowski</option>
<option value="otwocki">otwocki</option>
<option value="piaseczynski">piaseczy\u0144ski</option>
<option value="plocki">p\u0142ocki</option>
<option value="plonski">p\u0142o\u0144ski</option>
<option value="pruszkowski">pruszkowski</option>
<option value="przasnyski">przasnyski</option>
<option value="przysuski">przysuski</option>
<option value="pultuski">pu\u0142tuski</option>
<option value="radomski">radomski</option>
<option value="siedlecki">siedlecki</option>
<option value="sierpecki">sierpecki</option>
<option value="sochaczewski">sochaczewski</option>
<option value="sokolowski">soko\u0142owski</option>
<option value="szydlowiecki">szyd\u0142owiecki</option>
<option value="warszawski-zachodni">warszawski zachodni</option>
<option value="wegrowski">w\u0119growski</option>
<option value="wolominski">wo\u0142omi\u0144ski</option>
<option value="wyszkowski">wyszkowski</option>
<option value="zwolenski">zwole\u0144ski</option>
<option value="zurominski">\u017curomi\u0144ski</option>
<option value="zyrardowski">\u017cyrardowski</option>
<option value="opole">Opole</option>
<option value="brzeski">brzeski</option>
<option value="glubczycki">g\u0142ubczyski</option>
<option value="kedzierzynsko-kozielski">k\u0119dzierzy\u0144ski-kozielski</option>
<option value="kluczborski">kluczborski</option>
<option value="krapkowicki">krapkowicki</option>
<option value="namyslowski">namys\u0142owski</option>
<option value="nyski">nyski</option>
<option value="oleski">oleski</option>
<option value="opolski">opolski</option>
<option value="prudnicki">prudnicki</option>
<option value="strzelecki">strzelecki</option>
<option value="rzeszow">Rzesz\xf3w</option>
<option value="krosno">Krosno</option>
<option value="przemysl">Przemy\u015bl</option>
<option value="tarnobrzeg">Tarnobrzeg</option>
<option value="bieszczadzki">bieszczadzki</option>
<option value="brzozowski">brzozowski</option>
<option value="debicki">d\u0119bicki</option>
<option value="jaroslawski">jaros\u0142awski</option>
<option value="jasielski">jasielski</option>
<option value="kolbuszowski">kolbuszowski</option>
<option value="krosnienski">kro\u015bnie\u0144ski</option>
<option value="leski">leski</option>
<option value="lezajski">le\u017cajski</option>
<option value="lubaczowski">lubaczowski</option>
<option value="lancucki">\u0142a\u0144cucki</option>
<option value="mielecki">mielecki</option>
<option value="nizanski">ni\u017ca\u0144ski</option>
<option value="przemyski">przemyski</option>
<option value="przeworski">przeworski</option>
<option value="ropczycko-sedziszowski">ropczycko-s\u0119dziszowski</option>
<option value="rzeszowski">rzeszowski</option>
<option value="sanocki">sanocki</option>
<option value="stalowowolski">stalowowolski</option>
<option value="strzyzowski">strzy\u017cowski</option>
<option value="tarnobrzeski">tarnobrzeski</option>
<option value="bialystok">Bia\u0142ystok</option>
<option value="lomza">\u0141om\u017ca</option>
<option value="suwalki">Suwa\u0142ki</option>
<option value="augustowski">augustowski</option>
<option value="bialostocki">bia\u0142ostocki</option>
<option value="bielski">bielski</option>
<option value="grajewski">grajewski</option>
<option value="hajnowski">hajnowski</option>
<option value="kolnenski">kolne\u0144ski</option>
<option value="\u0142omzynski">\u0142om\u017cy\u0144ski</option>
<option value="moniecki">moniecki</option>
<option value="sejnenski">sejne\u0144ski</option>
<option value="siemiatycki">siematycki</option>
<option value="sokolski">sok\xf3lski</option>
<option value="suwalski">suwalski</option>
<option value="wysokomazowiecki">wysokomazowiecki</option>
<option value="zambrowski">zambrowski</option>
<option value="gdansk">Gda\u0144sk</option>
<option value="gdynia">Gdynia</option>
<option value="slupsk">S\u0142upsk</option>
<option value="sopot">Sopot</option>
<option value="bytowski">bytowski</option>
<option value="chojnicki">chojnicki</option>
<option value="czluchowski">cz\u0142uchowski</option>
<option value="kartuski">kartuski</option>
<option value="koscierski">ko\u015bcierski</option>
<option value="kwidzynski">kwidzy\u0144ski</option>
<option value="leborski">l\u0119borski</option>
<option value="malborski">malborski</option>
<option value="nowodworski">nowodworski</option>
<option value="gdanski">gda\u0144ski</option>
<option value="pucki">pucki</option>
<option value="slupski">s\u0142upski</option>
<option value="starogardzki">starogardzki</option>
<option value="sztumski">sztumski</option>
<option value="tczewski">tczewski</option>
<option value="wejherowski">wejcherowski</option>
<option value="katowice" selected="selected">Katowice</option>
<option value="bielsko-biala">Bielsko-Bia\u0142a</option>
<option value="bytom">Bytom</option>
<option value="chorzow">Chorz\xf3w</option>
<option value="czestochowa">Cz\u0119stochowa</option>
<option value="dabrowa-gornicza">D\u0105browa G\xf3rnicza</option>
<option value="gliwice">Gliwice</option>
<option value="jastrzebie-zdroj">Jastrz\u0119bie Zdr\xf3j</option>
<option value="jaworzno">Jaworzno</option>
<option value="myslowice">Mys\u0142owice</option>
<option value="piekary-slaskie">Piekary \u015al\u0105skie</option>
<option value="ruda-slaska">Ruda \u015al\u0105ska</option>
<option value="rybnik">Rybnik</option>
<option value="siemianowice-slaskie">Siemianowice \u015al\u0105skie</option>
<option value="sosnowiec">Sosnowiec</option>
<option value="swietochlowice">\u015awi\u0119toch\u0142owice</option>
<option value="tychy">Tychy</option>
<option value="zabrze">Zabrze</option>
<option value="zory">\u017bory</option>
<option value="bedzinski">b\u0119dzi\u0144ski</option>
<option value="bielski">bielski</option>
<option value="bierunsko-ledzinski">bieru\u0144sko-l\u0119dzi\u0144ski</option>
<option value="cieszynski">cieszy\u0144ski</option>
<option value="czestochowski">cz\u0119stochowski</option>
<option value="gliwicki">gliwicki</option>
<option value="klobucki">k\u0142obucki</option>
<option value="lubliniecki">lubliniecki</option>
<option value="mikolowski">miko\u0142owski</option>
<option value="myszkowski">myszkowski</option>
<option value="pszczynski">pszczy\u0144ski</option>
<option value="raciborski">raciborski</option>
<option value="rybnicki">rybnicki</option>
<option value="tarnogorski">tarnog\xf3rski</option>
<option value="wodzislawski">wodzis\u0142awski</option>
<option value="zawiercianski">zawiercia\u0144ski</option>
<option value="zywiecki">\u017cywiecki</option>
<option value="kielce">Kielce</option>
<option value="buski">buski</option>
<option value="jedrzejowski">j\u0119drzejowski</option>
<option value="kazimierski">kazimierski</option>
<option value="kielecki">kielecki</option>
<option value="konecki">konecki</option>
<option value="opatowski">opatowski</option>
<option value="ostrowiecki">ostrowiecki</option>
<option value="pinczowski">pi\u0144czowski</option>
<option value="sandomierski">sandomierski</option>
<option value="skarzyski">skar\u017cyski</option>
<option value="starachowicki">starachowicki</option>
<option value="staszowski">staszowski</option>
<option value="wloszczowski">w\u0142oszczowski</option>
<option value="olsztyn">Olsztyn</option>
<option value="elblag">Elbl\u0105g</option>
<option value="bartoszycki">bartoszycki</option>
<option value="braniewski">braniewski</option>
<option value="dzialdowski">dzia\u0142dowski</option>
<option value="elblaski">elbl\u0105ski</option>
<option value="elcki">e\u0142cki</option>
<option value="gizycki">gi\u017cycki</option>
<option value="goldapski">go\u0142dapski</option>
<option value="ilawski">i\u0142awski</option>
<option value="ketrzynski">k\u0119trzy\u0144ski</option>
<option value="lidzbarski">lidzbarski</option>
<option value="mragowski">mr\u0105gowski</option>
<option value="nidzicki">nidzicki</option>
<option value="nowomiejski">nowomiejski</option>
<option value="olecki">olecki</option>
<option value="olsztynski">olszty\u0144ski</option>
<option value="ostrodzki">ostr\xf3dzki</option>
<option value="piski">piski</option>
<option value="szczycienski">szczycie\u0144ski</option>
<option value="wegorzewski">w\u0119gorzewski</option>
<option value="poznan">Pozna\u0144</option>
<option value="kalisz">Kalisz</option>
<option value="konin">Konin</option>
<option value="leszno">Leszno</option>
<option value="chodzieski">chodziejski</option>
<option value="czarnkowsko-trzcianecki">czarnkowsko-trzcianecki</option>
<option value="gnieznienski">gnie\u017anie\u0144ski</option>
<option value="gostynski">gosty\u0144ski</option>
<option value="grodziski">grodziski</option>
<option value="jarocinski">jaroci\u0144ski</option>
<option value="kaliski">kaliski</option>
<option value="kepinski">k\u0119pi\u0144ski</option>
<option value="kolski">kolski</option>
<option value="koninski">koni\u0144ski</option>
<option value="koscianski">ko\u015bcia\u0144ski</option>
<option value="krotoszynski">krotoszy\u0144ski</option>
<option value="leszczynski">leszczy\u0144ski</option>
<option value="miedzychodzki">mi\u0119dzychodzki</option>
<option value="nowotomyski">nowotomyski</option>
<option value="obornicki">obornicki</option>
<option value="ostrowski">ostrowski</option>
<option value="ostrzeszowski">ostrzeszowski</option>
<option value="pilski">pilski</option>
<option value="pleszewski">pleszewski</option>
<option value="poznanski">pozna\u0144ski</option>
<option value="rawicki">rawicki</option>
<option value="slupecki">s\u0142upecki</option>
<option value="szamotulski">szamotulski</option>
<option value="sredzki">\u015bredzki</option>
<option value="sremski">\u015bremski</option>
<option value="turecki">turecki</option>
<option value="wagrowiecki">w\u0105growiecki</option>
<option value="wolsztynski">wolszty\u0144ski</option>
<option value="wrzesinski">wrzesi\u0144ski</option>
<option value="zlotowski">z\u0142otowski</option>
<option value="bialogardzki">bia\u0142ogardzki</option>
<option value="choszczenski">choszcze\u0144ski</option>
<option value="drawski">drawski</option>
<option value="goleniowski">goleniowski</option>
<option value="gryficki">gryficki</option>
<option value="gryfinski">gryfi\u0144ski</option>
<option value="kamienski">kamie\u0144ski</option>
<option value="kolobrzeski">ko\u0142obrzeski</option>
<option value="koszalinski">koszali\u0144ski</option>
<option value="lobeski">\u0142obeski</option>
<option value="mysliborski">my\u015bliborski</option>
<option value="policki">policki</option>
<option value="pyrzycki">pyrzycki</option>
<option value="slawienski">s\u0142awie\u0144ski</option>
<option value="stargardzki">stargardzki</option>
<option value="szczecinecki">szczecinecki</option>
<option value="swidwinski">\u015bwidwi\u0144ski</option>
<option value="walecki">wa\u0142ecki</option>
</select>'''
        self.assertHTMLEqual(f.render('administrativeunit', 'katowice'), out)

    def test_PLPostalCodeField(self):
        error_format = ['Enter a postal code in the format XX-XXX.']
        valid = {
            '41-403': '41-403',
        }
        invalid = {
            '43--434': error_format,
        }
        self.assertFieldOutput(PLPostalCodeField, valid, invalid)

    def test_PLNIPField(self):
        error_format = ['Enter a tax number field (NIP) in the format XXX-XXX-XX-XX, XXX-XX-XX-XXX or XXXXXXXXXX.']
        error_checksum = ['Wrong checksum for the Tax Number (NIP).']
        valid = {
            '646-241-41-24': '6462414124',
            '646-24-14-124': '6462414124',
            '6462414124': '6462414124',
        }
        invalid = {
            '43-343-234-323': error_format,
            '64-62-414-124': error_format,
            '646-241-41-23': error_checksum,
        }
        self.assertFieldOutput(PLNIPField, valid, invalid)

    def test_PLPESELField(self):
        error_checksum = ['Wrong checksum for the National Identification Number.']
        error_format = ['National Identification Number consists of 11 digits.']
        valid = {
            '80071610614': '80071610614',
        }
        invalid = {
            '80071610610': error_checksum,
            '80': error_format,
            '800716106AA': error_format,
        }
        self.assertFieldOutput(PLPESELField, valid, invalid)

    def test_PLNationalIDCardNumberField(self):
        error_checksum = ['Wrong checksum for the National ID Card Number.']
        error_format = ['National ID Card Number consists of 3 letters and 6 digits.']
        valid = {
            'ABC123458': 'ABC123458',
            'abc123458': 'ABC123458',
        }
        invalid = {
            'ABC123457': error_checksum,
            'abc123457': error_checksum,
            'a12Aaaaaa': error_format,
            'AA1234443': error_format,
        }
        self.assertFieldOutput(PLNationalIDCardNumberField, valid, invalid)

    def test_PLREGONField(self):
        error_checksum = ['Wrong checksum for the National Business Register Number (REGON).']
        error_format = ['National Business Register Number (REGON) consists of 9 or 14 digits.']
        valid = {
            '12345678512347': '12345678512347',
            '590096454': '590096454',

            # A special case where the checksum == 10 and the control
            # digit == '0'
            '391023200': '391023200',
        }
        invalid = {
            '123456784': error_checksum,
            '12345678412342': error_checksum,
            '590096453': error_checksum,

            # A special case where the checksum == 10,
            # but the control digit != '0'
            '111111111': error_checksum,

            '590096': error_format,
        }
        self.assertFieldOutput(PLREGONField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_pt
# -*- coding: utf-8 -*-
"""
Contains a set of tests which can be used to validate the current implementation.
"""
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.pt.forms import (PTCitizenCardNumberField, PTPhoneNumberField,
                                  PTRegionSelect, PTSocialSecurityNumberField,
                                  PTZipCodeField)


class PTLocalFlavorTests(SimpleTestCase):
    def test_PTCitizenCardNumberField(self):
        error_badchecksum = ['The specified value is not a valid Citizen Card number.']
        error_invalid = ['Citizen Card numbers have the format XXXXXXXXXYYX or XXXXXXXX-XYYX (where X is a digit and Y is an alphanumeric character).']
        valid = {
            '132011441ZZ8': '13201144-1ZZ8',
            '129463833ZY7': '12946383-3ZY7',
            '129463833ZZ5': '12946383-3ZZ5',
            '13201144-1ZZ8': '13201144-1ZZ8',
            '12946383-3ZY7': '12946383-3ZY7',
            '12946383-3ZZ5': '12946383-3ZZ5',
        }
        invalid = {
            '13201ZZ8': error_invalid,
            '12943ZY7': error_invalid,
            '13201144': error_invalid,
            '12946383': error_invalid,
            '13201144AZZ8': error_invalid,
            '12946383EZY7': error_invalid,
            '13201144-1zz8': error_invalid,
            '12946383-3zy7': error_invalid,
            '12946383-3zz5': error_invalid,
            '13201144(1ZZ8)': error_invalid,
            '12946373(3ZY7)': error_invalid,
            '13201144 (1ZZ8)': error_invalid,
            '12946373 (3ZY7)': error_invalid,
            '13201144-1ZZ7': error_badchecksum,
            '13201144-3ZZ8': error_badchecksum,
            '12946383-3ZY5': error_badchecksum,
            '12946383-3ZZ7': error_badchecksum,
        }
        self.assertFieldOutput(PTCitizenCardNumberField, valid, invalid)

    def test_PTPhoneNumberField(self):
        error_invalid = ['Phone numbers have at least 3 and at most 9 digits and may optionally be prefixed with \'00351\' or \'+351\'.']
        valid = {
            '117': '117',
            '4800': '4800',
            '16912': '16912',
            '917845189': '917845189',
            '+351 16912': '+35116912',
            '91 784 5189': '917845189',
            '+351 91 111': '+35191111',
            '00351 917 845 189': '00351917845189',
            '+351 917 845 189': '+351917845189',
        }
        invalid = {
            '1': error_invalid,
            '21': error_invalid,
            '091 456 987 1': error_invalid,
            '00+351917845189': error_invalid,
        }
        self.assertFieldOutput(PTPhoneNumberField, valid, invalid)

    def test_PTRegionSelect(self):
        field = PTRegionSelect()
        output = '''<select name="regions">
                    <option value="01">Aveiro</option>
                    <option value="02">Beja</option>
                    <option value="03">Braga</option>
                    <option value="04">Bragança</option>
                    <option value="05">Castelo Branco</option>
                    <option value="06" selected="selected">Coimbra</option>
                    <option value="07">Évora</option>
                    <option value="08">Faro</option>
                    <option value="09">Guarda</option>
                    <option value="10">Leiria</option>
                    <option value="11">Lisboa</option>
                    <option value="12">Portalegre</option>
                    <option value="13">Porto</option>
                    <option value="14">Santarém</option>
                    <option value="15">Setúbal</option>
                    <option value="16">Viana do Castelo</option>
                    <option value="17">Vila Real</option>
                    <option value="18">Viseu</option>
                    <option value="20">Região Autónoma da Madeira</option>
                    <option value="30">Região Autónoma dos Açores</option>
                    </select>'''
        self.assertHTMLEqual(field.render('regions', '06'), output)

    def test_PTSocialSecurityNumberField(self):
        error_badchecksum = ['The specified number is not a valid Social Security number.']
        error_invalid = ['Social Security numbers must be in the format XYYYYYYYYYY (where X is either 1 or 2 and Y is any other digit).']
        valid = {
            '12347312896': 12347312896,
            '21865241240': 21865241240,
            '17512436983': 17512436983,
            '21467822675': 21467822675,
            '14652348947': 14652348947,
        }
        invalid = {
            '3465 234': error_invalid,
            '1234-3094': error_invalid,
            '0175423542': error_invalid,
            '123A7312894': error_invalid,
            '01467822673': error_invalid,
            '12347312892': error_badchecksum,
            '21865241241': error_badchecksum,
            '17512436987': error_badchecksum,
            '21467822673': error_badchecksum,
            '14652348944': error_badchecksum,
        }
        self.assertFieldOutput(PTSocialSecurityNumberField, valid, invalid)

    def test_PTZipCodeField(self):
        error_invalid = ['Zip codes must be in the format XYYY-YYY (where X is a digit between 1 and 9 and Y is any other digit).']
        valid = {
            '3030-034': '3030-034',
            '3800-011': '3800-011',
            '9700-213': '9700-213',
        }
        invalid = {
            '2A200': error_invalid,
            '980001': error_invalid,
            '1003456': error_invalid,
            '0178-281': error_invalid,
        }
        self.assertFieldOutput(PTZipCodeField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_py
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.py_.forms import (PyDepartmentSelect,
                                   PyNumberedDepartmentSelect)


class PYLocalFlavorTests(SimpleTestCase):
    def test_PyDepartmentSelect(self):
        py = PyDepartmentSelect()
        out = '''<select name="department">
<option value="AG">Alto Paraguay</option>
<option value="AA">Alto Paran\xe1</option>
<option value="AM">Amambay</option>
<option value="AS">Asunci\xf3n</option>
<option value="BQ">Boquer\xf3n</option>
<option value="CG">Caaguaz\xfa</option>
<option value="CZ">Caazap\xe1</option>
<option value="CY">Canindey\xfa</option>
<option value="CE">Central</option>
<option value="CN">Concepci\xf3n</option>
<option value="CR">Cordillera</option>
<option value="GU">Guair\xe1</option>
<option value="IT">Itap\xfaa</option>
<option value="MI">Misiones</option>
<option value="NE">\xd1eembuc\xfa</option>
<option value="PG">Paraguar\xed</option>
<option value="PH">Pdte. Hayes</option>
<option value="SP">San Pedro</option>
</select>'''
        self.assertHTMLEqual(py.render('department', 'M'), out)

    def test_PyNumberedDepartmentSelect(self):
        py = PyNumberedDepartmentSelect()
        out = '''<select name="department">
<option value="CN">I Concepci\xf3n</option>
<option value="SP">II San Pedro</option>
<option value="CR">III Cordillera</option>
<option value="GU">IV Guair\xe1</option>
<option value="CG">V Caaguaz\xfa</option>
<option value="CZ">VI Caazap\xe1</option>
<option value="IT">VII Itap\xfaa</option>
<option value="MI">VIII Misiones</option>
<option value="PG">IX Paraguar\xed</option>
<option value="AA">X Alto Paran\xe1</option>
<option value="CE">XI Central</option>
<option value="NE">XII \xd1eembuc\xfa</option>
<option value="AM" selected="selected">XIII Amambay</option>
<option value="CY">XIV Canindey\xfa</option>
<option value="PH">XV Pdte. Hayes</option>
<option value="AG">XVI Alto Paraguay</option>
<option value="BQ">XVII Boquer\xf3n</option>
<option value="AS">XVIII Asunci\xf3n</option>
</select>'''
        self.assertHTMLEqual(py.render('department', 'AM'), out)

########NEW FILE########
__FILENAME__ = test_ro
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.ro.forms import (ROCIFField, ROCNPField, ROCountyField,
                                  ROCountySelect, ROIBANField,
                                  ROPhoneNumberField, ROPostalCodeField)


class ROLocalFlavorTests(SimpleTestCase):
    def test_ROCountySelect(self):
        f = ROCountySelect()
        out = '''<select name="county">
<option value="AB">Alba</option>
<option value="AR">Arad</option>
<option value="AG">Arge\u015f</option>
<option value="BC">Bac\u0103u</option>
<option value="BH">Bihor</option>
<option value="BN">Bistri\u0163a-N\u0103s\u0103ud</option>
<option value="BT">Boto\u015fani</option>
<option value="BV">Bra\u015fov</option>
<option value="BR">Br\u0103ila</option>
<option value="B">Bucure\u015fti</option>
<option value="BZ">Buz\u0103u</option>
<option value="CS">Cara\u015f-Severin</option>
<option value="CL">C\u0103l\u0103ra\u015fi</option>
<option value="CJ" selected="selected">Cluj</option>
<option value="CT">Constan\u0163a</option>
<option value="CV">Covasna</option>
<option value="DB">D\xe2mbovi\u0163a</option>
<option value="DJ">Dolj</option>
<option value="GL">Gala\u0163i</option>
<option value="GR">Giurgiu</option>
<option value="GJ">Gorj</option>
<option value="HR">Harghita</option>
<option value="HD">Hunedoara</option>
<option value="IL">Ialomi\u0163a</option>
<option value="IS">Ia\u015fi</option>
<option value="IF">Ilfov</option>
<option value="MM">Maramure\u015f</option>
<option value="MH">Mehedin\u0163i</option>
<option value="MS">Mure\u015f</option>
<option value="NT">Neam\u0163</option>
<option value="OT">Olt</option>
<option value="PH">Prahova</option>
<option value="SM">Satu Mare</option>
<option value="SJ">S\u0103laj</option>
<option value="SB">Sibiu</option>
<option value="SV">Suceava</option>
<option value="TR">Teleorman</option>
<option value="TM">Timi\u015f</option>
<option value="TL">Tulcea</option>
<option value="VS">Vaslui</option>
<option value="VL">V\xe2lcea</option>
<option value="VN">Vrancea</option>
</select>'''
        self.assertHTMLEqual(f.render('county', 'CJ'), out)

    def test_ROCIFField(self):
        error_invalid = ['Enter a valid CIF.']
        error_atmost = ['Ensure this value has at most 10 characters (it has 11).']
        error_atleast = ['Ensure this value has at least 2 characters (it has 1).']
        valid = {
            '21694681': '21694681',
            'RO21694681': '21694681',
        }
        invalid = {
            '21694680': error_invalid,
            '21694680000': error_atmost,
            '0': error_atleast + error_invalid,
        }
        self.assertFieldOutput(ROCIFField, valid, invalid)

    def test_ROCNPField(self):
        error_invalid = ['Enter a valid CNP.']
        error_atleast = ['Ensure this value has at least 13 characters (it has 10).']
        error_atmost = ['Ensure this value has at most 13 characters (it has 14).']
        valid = {
            '1981211204489': '1981211204489',
        }
        invalid = {
            '1981211204487': error_invalid,
            '1981232204489': error_invalid,
            '9981211204489': error_invalid,
            '9981211209': error_atleast + error_invalid,
            '19812112044891': error_atmost,
        }
        self.assertFieldOutput(ROCNPField, valid, invalid)

    def test_ROCountyField(self):
        error_format = ['Enter a Romanian county code or name.']
        valid = {
            'CJ': 'CJ',
            'cj': 'CJ',
            'Argeş': 'AG',
            'argeş': 'AG',
        }
        invalid = {
            'Arges': error_format,
        }
        self.assertFieldOutput(ROCountyField, valid, invalid)

    def test_ROIBANField(self):
        valid = {
            'RO56RZBR0000060003291177': 'RO56RZBR0000060003291177',
            'RO56-RZBR-0000-0600-0329-1177': 'RO56RZBR0000060003291177',
        }
        invalid = {
            'RO56RZBR0000060003291176': ['Not a valid IBAN.'],
            'AT61 1904 3002 3457 3201': ['AT IBANs are not allowed in this field.'],
            'RO56RZBR000006000329117': ['RO IBANs must contain 24 characters.']
        }
        self.assertFieldOutput(ROIBANField, valid, invalid)

    def test_ROPhoneNumberField(self):
        error_format = ['Phone numbers must be in XXXX-XXXXXX format.']
        error_atleast = ['Ensure this value has at least 10 characters (it has 9).']
        error_invalid = ['Phone numbers must be in XXXX-XXXXXX format.']
        valid = {
            '0264485936': '0264485936',
            '(0264)-485936': '0264485936',
        }
        invalid = {
            '02644859368': error_format,
            '026448593': error_atleast + error_invalid,
        }
        self.assertFieldOutput(ROPhoneNumberField, valid, invalid)

    def test_ROPostalCodeField(self):
        error_atleast = ['Ensure this value has at least 6 characters (it has 5).']
        error_atmost = ['Ensure this value has at most 6 characters (it has 7).']
        error_invalid = ['Enter a valid postal code in the format XXXXXX']

        valid = {
            '400473': '400473',
        }
        invalid = {
            '40047': error_atleast + error_invalid,
            '4004731': error_atmost + error_invalid,
        }
        self.assertFieldOutput(ROPostalCodeField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_ru
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.ru.forms import (RUCountySelect, RURegionSelect,
                                  RUPostalCodeField, RUPassportNumberField,
                                  RUAlienPassportNumberField)


class RULocalFlavorTests(SimpleTestCase):

    def test_RUPassportNumberField(self):
        error = ['Enter a passport number in the format XXXX XXXXXX.']
        valid = {
            '1981 211204': '1981 211204',
            '0305 967876': '0305 967876',
        }
        invalid = {
            '1981 2112044': error,
            '1981 23220': error,
            '9981211201': error,
        }
        self.assertFieldOutput(RUPassportNumberField, valid, invalid)

    def test_RUAlienPassportNumberField(self):
        error = ['Enter a passport number in the format XX XXXXXXX.']
        valid = {
            '19 8111204': '19 8111204',
            '03 0567876': '03 0567876',
        }
        invalid = {
            '198 1112044': error,
            '19 81123220': error,
            '99 812112': error,
        }
        self.assertFieldOutput(RUAlienPassportNumberField, valid, invalid)

    def test_RUPostalCodeField(self):
        error = ['Enter a postal code in the format XXXXXX.']
        valid = {
            '987654': '987654',
            '123456': '123456'
        }
        invalid = {
            '123 34': error,
            '1234567': error,
            '12345': error
        }
        self.assertFieldOutput(RUPostalCodeField, valid, invalid)

    def test_RUCountySelect(self):
        f = RUCountySelect()
        out = '''<select name="county">
<option value="Central Federal County">Central Federal County</option>
<option value="South Federal County">South Federal County</option>
<option value="North-West Federal County">North-West Federal County</option>
<option value="Far-East Federal County">Far-East Federal County</option>
<option value="Siberian Federal County">Siberian Federal County</option>
<option value="Ural Federal County">Ural Federal County</option>
<option value="Privolzhsky Federal County">Privolzhsky Federal County</option>
<option value="North-Caucasian Federal County">North-Caucasian Federal County</option>
</select>'''
        self.assertHTMLEqual(f.render('county', None), out)

    def test_RURegionSelect(self):
        f = RURegionSelect()
        out = '''<select name="region">
<option value="77">Moskva</option>
<option value="78">Saint-Peterburg</option>
<option value="50">Moskovskaya oblast&#39;</option>
<option value="01">Adygeya, Respublika</option>
<option value="02">Bashkortostan, Respublika</option>
<option value="03">Buryatia, Respublika</option>
<option value="04">Altay, Respublika</option>
<option value="05">Dagestan, Respublika</option>
<option value="06">Ingushskaya Respublika</option>
<option value="07">Kabardino-Balkarskaya Respublika</option>
<option value="08">Kalmykia, Respublika</option>
<option value="09">Karachaevo-Cherkesskaya Respublika</option>
<option value="10">Karelia, Respublika</option>
<option value="11">Komi, Respublika</option>
<option value="12">Mariy Ehl, Respublika</option>
<option value="13">Mordovia, Respublika</option>
<option value="14">Sakha, Respublika (Yakutiya)</option>
<option value="15">Severnaya Osetia, Respublika (Alania)</option>
<option value="16">Tatarstan, Respublika</option>
<option value="17">Tyva, Respublika (Tuva)</option>
<option value="18">Udmurtskaya Respublika</option>
<option value="19">Khakassiya, Respublika</option>
<option value="95">Chechenskaya Respublika</option>
<option value="21">Chuvashskaya Respublika</option>
<option value="22">Altayskiy Kray</option>
<option value="80">Zabaykalskiy Kray</option>
<option value="82">Kamchatskiy Kray</option>
<option value="23">Krasnodarskiy Kray</option>
<option value="24">Krasnoyarskiy Kray</option>
<option value="81">Permskiy Kray</option>
<option value="25">Primorskiy Kray</option>
<option value="26">Stavropol&#39;siyy Kray</option>
<option value="27">Khabarovskiy Kray</option>
<option value="28">Amurskaya oblast&#39;</option>
<option value="29">Arkhangel&#39;skaya oblast&#39;</option>
<option value="30">Astrakhanskaya oblast&#39;</option>
<option value="31">Belgorodskaya oblast&#39;</option>
<option value="32">Bryanskaya oblast&#39;</option>
<option value="33">Vladimirskaya oblast&#39;</option>
<option value="34">Volgogradskaya oblast&#39;</option>
<option value="35">Vologodskaya oblast&#39;</option>
<option value="36">Voronezhskaya oblast&#39;</option>
<option value="37">Ivanovskaya oblast&#39;</option>
<option value="38">Irkutskaya oblast&#39;</option>
<option value="39">Kaliningradskaya oblast&#39;</option>
<option value="40">Kaluzhskaya oblast&#39;</option>
<option value="42">Kemerovskaya oblast&#39;</option>
<option value="43">Kirovskaya oblast&#39;</option>
<option value="44">Kostromskaya oblast&#39;</option>
<option value="45">Kurganskaya oblast&#39;</option>
<option value="46">Kurskaya oblast&#39;</option>
<option value="47">Leningradskaya oblast&#39;</option>
<option value="48">Lipeckaya oblast&#39;</option>
<option value="49">Magadanskaya oblast&#39;</option>
<option value="51">Murmanskaya oblast&#39;</option>
<option value="52">Nizhegorodskaja oblast&#39;</option>
<option value="53">Novgorodskaya oblast&#39;</option>
<option value="54">Novosibirskaya oblast&#39;</option>
<option value="55">Omskaya oblast&#39;</option>
<option value="56">Orenburgskaya oblast&#39;</option>
<option value="57">Orlovskaya oblast&#39;</option>
<option value="58">Penzenskaya oblast&#39;</option>
<option value="60">Pskovskaya oblast&#39;</option>
<option value="61">Rostovskaya oblast&#39;</option>
<option value="62">Rjazanskaya oblast&#39;</option>
<option value="63">Samarskaya oblast&#39;</option>
<option value="64">Saratovskaya oblast&#39;</option>
<option value="65">Sakhalinskaya oblast&#39;</option>
<option value="66">Sverdlovskaya oblast&#39;</option>
<option value="67" selected="selected">Smolenskaya oblast&#39;</option>
<option value="68">Tambovskaya oblast&#39;</option>
<option value="69">Tverskaya oblast&#39;</option>
<option value="70">Tomskaya oblast&#39;</option>
<option value="71">Tul&#39;skaya oblast&#39;</option>
<option value="72">Tyumenskaya oblast&#39;</option>
<option value="73">Ul&#39;ianovskaya oblast&#39;</option>
<option value="74">Chelyabinskaya oblast&#39;</option>
<option value="76">Yaroslavskaya oblast&#39;</option>
<option value="79">Evreyskaya avtonomnaja oblast&#39;</option>
<option value="83">Neneckiy autonomnyy okrug</option>
<option value="86">Khanty-Mansiyskiy avtonomnyy okrug - Yugra</option>
<option value="87">Chukotskiy avtonomnyy okrug</option>
<option value="89">Yamalo-Neneckiy avtonomnyy okrug</option>
</select>'''
        self.assertHTMLEqual(f.render('region', '67'), out)

########NEW FILE########
__FILENAME__ = test_se
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

import datetime

from django.test import SimpleTestCase

from localflavor.se.forms import (SECountySelect, SEOrganisationNumberField,
                                  SEPersonalIdentityNumberField,
                                  SEPostalCodeField)


class SELocalFlavorTests(SimpleTestCase):

    def setUp(self):
        # Mocking datetime.date to make sure
        # localflavor.se.utils.validate_id_birthday works
        class MockDate(datetime.date):
            def today(cls):
                return datetime.date(2008, 5, 14)
            today = classmethod(today)
        self._olddate = datetime.date
        datetime.date = MockDate

    def tearDown(self):
        datetime.date = self._olddate

    def test_SECountySelect(self):
        f = SECountySelect()
        out = '''<select name="swedish_county">
<option value="AB">Stockholm</option>
<option value="AC">V\xe4sterbotten</option>
<option value="BD">Norrbotten</option>
<option value="C">Uppsala</option>
<option value="D">S\xf6dermanland</option>
<option value="E" selected="selected">\xd6sterg\xf6tland</option>
<option value="F">J\xf6nk\xf6ping</option>
<option value="G">Kronoberg</option>
<option value="H">Kalmar</option>
<option value="I">Gotland</option>
<option value="K">Blekinge</option>
<option value="M">Sk\xe5ne</option>
<option value="N">Halland</option>
<option value="O">V\xe4stra G\xf6taland</option>
<option value="S">V\xe4rmland</option>
<option value="T">\xd6rebro</option>
<option value="U">V\xe4stmanland</option>
<option value="W">Dalarna</option>
<option value="X">G\xe4vleborg</option>
<option value="Y">V\xe4sternorrland</option>
<option value="Z">J\xe4mtland</option>
</select>'''
        self.assertHTMLEqual(f.render('swedish_county', 'E'), out)

    def test_SEOrganizationNumberField(self):
        error_invalid = ['Enter a valid Swedish organisation number.']
        valid = {
            '870512-1989': '198705121989',
            '19870512-1989': '198705121989',
            '870512-2128': '198705122128',
            '081015-6315': '190810156315',
            '081015+6315': '180810156315',
            '0810156315': '190810156315',
            # Test some different organisation numbers
            # IKEA Linköping
            '556074-7569': '5560747569',
            # Volvo Personvagnar
            '556074-3089': '5560743089',
            # LJS (organisation)
            '822001-5476': '8220015476',
            # LJS (organisation)
            '8220015476': '8220015476',
            # Katedralskolan Linköping (school)
            '2120000449': '2120000449',
            # Faux organisation number, which tests that the checksum can be 0
            '232518-5060': '2325185060',
        }
        invalid = {
            # Ordinary personal identity numbers for sole proprietors
            # The same rules as for SEPersonalIdentityField applies here
            '081015 6315': error_invalid,
            '950231-4496': error_invalid,
            '6914104499': error_invalid,
            '950d314496': error_invalid,
            'invalid!!!': error_invalid,
            '870514-1111': error_invalid,
            # Co-ordination number checking
            # Co-ordination numbers are not valid organisation numbers
            '870574-1315': error_invalid,
            '870573-1311': error_invalid,
            # Volvo Personvagnar, bad format
            '556074+3089': error_invalid,
            # Invalid checksum
            '2120000441': error_invalid,
            # Valid checksum but invalid organisation type
            '1120000441': error_invalid,
        }
        self.assertFieldOutput(SEOrganisationNumberField, valid, invalid)

    def test_SEPersonalIdentityNumberField(self):
        error_invalid = ['Enter a valid Swedish personal identity number.']
        error_coord = ['Co-ordination numbers are not allowed.']
        valid = {
            '870512-1989': '198705121989',
            '870512-2128': '198705122128',
            '19870512-1989': '198705121989',
            '198705121989': '198705121989',
            '081015-6315': '190810156315',
            '0810156315': '190810156315',
            # This is a "special-case" in the checksum calculation,
            # where the sum is divisible by 10 (the checksum digit == 0)
            '8705141060': '198705141060',
            # + means that the person is older than 100 years
            '081015+6315': '180810156315',
            # Co-ordination number checking
            '870574-1315': '198705741315',
            '870574+1315': '188705741315',
            '198705741315': '198705741315',
        }
        invalid = {
            '081015 6315': error_invalid,
            '950d314496': error_invalid,
            'invalid!!!': error_invalid,
            # Invalid dates
            # February 31st does not exist
            '950231-4496': error_invalid,
            # Month 14 does not exist
            '6914104499': error_invalid,
            # There are no Swedish personal id numbers where year < 1800
            '17430309-7135': error_invalid,
            # Invalid checksum
            '870514-1111': error_invalid,
            # Co-ordination number with bad checksum
            '870573-1311': error_invalid,
        }
        self.assertFieldOutput(SEPersonalIdentityNumberField, valid, invalid)

        valid = {}
        invalid = {
            # Check valid co-ordination numbers that should not be accepted
            # because of coordination_number=False
            '870574-1315': error_coord,
            '870574+1315': error_coord,
            '8705741315': error_coord,
            # Invalid co-ordination numbers should be treated as invalid, and not
            # as co-ordination numbers
            '870573-1311': error_invalid,
        }
        kwargs = {'coordination_number': False}
        self.assertFieldOutput(SEPersonalIdentityNumberField, valid, invalid,
                               field_kwargs=kwargs)

    def test_SEPostalCodeField(self):
        error_format = ['Enter a Swedish postal code in the format XXXXX.']
        valid = {
            '589 37': '58937',
            '58937': '58937',
        }
        invalid = {
            'abcasfassadf': error_format,
            # Only one space is allowed for separation
            '589  37': error_format,
            # The postal code must not start with 0
            '01234': error_format,

        }
        self.assertFieldOutput(SEPostalCodeField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_si
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from datetime import date

from django.test import SimpleTestCase

from localflavor.si.forms import (SIEMSOField, SITaxNumberField,
                                  SIPhoneNumberField, SIPostalCodeField,
                                  SIPostalCodeSelect)


class SILocalFlavorTests(SimpleTestCase):
    def test_SITaxNumberField(self):
        error_invalid = ['Enter a valid tax number in form SIXXXXXXXX']
        valid = {
            '15012557': '15012557',
            'SI15012557': '15012557',
            '22111310': '22111310',
        }
        invalid = {
            '22241310': error_invalid,
            '15012558': error_invalid,
            '1501': error_invalid,
            '1501123123123': error_invalid,
            'abcdabcd': error_invalid,
            '01234579': error_invalid,
        }
        self.assertFieldOutput(SITaxNumberField, valid, invalid)

    def test_SIEMSOField(self):
        error_invalid = ['This field should contain exactly 13 digits.']
        error_invalid_date = ['The first 7 digits of the EMSO must represent a valid past date.']
        error_invalid_chksum = ['The EMSO is not valid.']
        valid = {
            '0205951500462': '0205951500462',
            '2309002500068': '2309002500068',
            '1010985500400': '1010985500400',
        }
        invalid = {
            '0205951500463': error_invalid_chksum,
            '020': error_invalid,
            '020020595150046020595150046': error_invalid,
            'aaaabbbbccccd': error_invalid,
            '1010985500800': error_invalid_chksum,
            '2020095500070': error_invalid_date,
            '5050095500078': error_invalid_date,
            '1010889500408': error_invalid_date,
        }
        self.assertFieldOutput(SIEMSOField, valid, invalid)

    def test_SIEMSOField_info_dict(self):
        valid = {
            '0205951500462': {'nationality': 50, 'gender': 'male', 'birthdate': date(1951, 5, 2)},
            '2309002504063': {'nationality': 50, 'gender': 'male', 'birthdate': date(2002, 9, 23)},
            '1010985505402': {'nationality': 50, 'gender': 'female', 'birthdate': date(1985, 10, 10)},
        }
        for input, info in valid.items():
            f = SIEMSOField()
            f.clean(input)
            self.assertEqual(f.info, info)

    def test_SIPhoneNumberField(self):
        error_invalid = ['Enter phone number in form +386XXXXXXXX or 0XXXXXXXX.']
        valid = {
            '+38640999999': '40999999',
            '+3861999999': '1999999',
            '0038640999999': '40999999',
            '040999999': '40999999',
            '01999999': '1999999',
            '059099999': '59099999',
            '059 09 99 99': '59099999',
            '0590/999-99': '59099999',
        }
        invalid = {
            '03861999999': error_invalid,
            '3861999999': error_invalid,
        }
        self.assertFieldOutput(SIPhoneNumberField, valid, invalid)

    def test_SIPostalCodeField(self):
        valid = {
            '4000': '4000',
            '1000': '1000'
        }
        invalid = {
            '1113': ['Select a valid choice. 1113 is not one of the available choices.'],
            '111': ['Select a valid choice. 111 is not one of the available choices.'],
        }
        self.assertFieldOutput(SIPostalCodeField, valid, invalid)

    def test_SIPostalCodeSelect(self):
        f = SIPostalCodeSelect()
        out = '''<select name="Kranj">
<option value="8341">Adle\u0161i\u010di</option>
<option value="5270">Ajdov\u0161\u010dina</option>
<option value="6280">Ankaran - Ancarano</option>
<option value="9253">Apa\u010de</option>
<option value="8253">Arti\u010de</option>
<option value="4275">Begunje na Gorenjskem</option>
<option value="1382">Begunje pri Cerknici</option>
<option value="9231">Beltinci</option>
<option value="2234">Benedikt</option>
<option value="2345">Bistrica ob Dravi</option>
<option value="3256">Bistrica ob Sotli</option>
<option value="8259">Bizeljsko</option>
<option value="1223">Blagovica</option>
<option value="8283">Blanca</option>
<option value="4260">Bled</option>
<option value="4273">Blejska Dobrava</option>
<option value="9265">Bodonci</option>
<option value="9222">Bogojina</option>
<option value="4263">Bohinjska Bela</option>
<option value="4264">Bohinjska Bistrica</option>
<option value="4265">Bohinjsko jezero</option>
<option value="1353">Borovnica</option>
<option value="5230">Bovec</option>
<option value="8294">Bo\u0161tanj</option>
<option value="5295">Branik</option>
<option value="3314">Braslov\u010de</option>
<option value="5223">Breginj</option>
<option value="8280">Brestanica</option>
<option value="2354">Bresternica</option>
<option value="4243">Brezje</option>
<option value="1351">Brezovica pri Ljubljani</option>
<option value="8250">Bre\u017eice</option>
<option value="4210">Brnik - aerodrom</option>
<option value="8321">Brusnice</option>
<option value="3255">Bu\u010de</option>
<option value="8276">Bu\u010dka</option>
<option value="9261">Cankova</option>
<option value="3000">Celje</option>
<option value="4207">Cerklje na Gorenjskem</option>
<option value="8263">Cerklje ob Krki</option>
<option value="1380">Cerknica</option>
<option value="5282">Cerkno</option>
<option value="2236">Cerkvenjak</option>
<option value="2215">Cer\u0161ak</option>
<option value="2326">Cirkovce</option>
<option value="2282">Cirkulane</option>
<option value="5273">Col</option>
<option value="6271">Dekani</option>
<option value="5210">Deskle</option>
<option value="2253">Destrnik</option>
<option value="6215">Diva\u010da</option>
<option value="1233">Dob</option>
<option value="3224">Dobje pri Planini</option>
<option value="8257">Dobova</option>
<option value="1423">Dobovec</option>
<option value="5263">Dobravlje</option>
<option value="3204">Dobrna</option>
<option value="8211">Dobrni\u010d</option>
<option value="1356">Dobrova</option>
<option value="9223">Dobrovnik - Dobronak</option>
<option value="5212">Dobrovo v Brdih</option>
<option value="1431">Dol pri Hrastniku</option>
<option value="1262">Dol pri Ljubljani</option>
<option value="1273">Dole pri Litiji</option>
<option value="1331">Dolenja vas</option>
<option value="8350">Dolenjske Toplice</option>
<option value="1230">Dom\u017eale</option>
<option value="2252">Dornava</option>
<option value="5294">Dornberk</option>
<option value="1319">Draga</option>
<option value="8343">Dragatu\u0161</option>
<option value="3222">Dramlje</option>
<option value="2370">Dravograd</option>
<option value="4203">Duplje</option>
<option value="6221">Dutovlje</option>
<option value="8361">Dvor</option>
<option value="2343">Fala</option>
<option value="9208">Fokovci</option>
<option value="2313">Fram</option>
<option value="3213">Frankolovo</option>
<option value="1274">Gabrovka</option>
<option value="8254">Globoko</option>
<option value="5275">Godovi\u010d</option>
<option value="4204">Golnik</option>
<option value="3303">Gomilsko</option>
<option value="4224">Gorenja vas</option>
<option value="3263">Gorica pri Slivnici</option>
<option value="2272">Gori\u0161nica</option>
<option value="9250">Gornja Radgona</option>
<option value="3342">Gornji Grad</option>
<option value="4282">Gozd Martuljek</option>
<option value="9264">Grad</option>
<option value="8332">Gradac</option>
<option value="1384">Grahovo</option>
<option value="5242">Grahovo ob Ba\u010di</option>
<option value="6272">Gra\u010di\u0161\u010de</option>
<option value="5251">Grgar</option>
<option value="3302">Gri\u017ee</option>
<option value="3231">Grobelno</option>
<option value="1290">Grosuplje</option>
<option value="2288">Hajdina</option>
<option value="8362">Hinje</option>
<option value="9205">Hodo\u0161 - Hodos</option>
<option value="1354">Horjul</option>
<option value="1372">Hotedr\u0161ica</option>
<option value="2311">Ho\u010de</option>
<option value="1430">Hrastnik</option>
<option value="6225">Hru\u0161evje</option>
<option value="4276">Hru\u0161ica</option>
<option value="5280">Idrija</option>
<option value="1292">Ig</option>
<option value="6250">Ilirska Bistrica</option>
<option value="6251">Ilirska Bistrica - Trnovo</option>
<option value="2259">Ivanjkovci</option>
<option value="1295">Ivan\u010dna Gorica</option>
<option value="1411">Izlake</option>
<option value="6310">Izola - Isola</option>
<option value="2222">Jakobski Dol</option>
<option value="2221">Jarenina</option>
<option value="6254">Jel\u0161ane</option>
<option value="4270">Jesenice</option>
<option value="8261">Jesenice na Dolenjskem</option>
<option value="3273">Jurklo\u0161ter</option>
<option value="2223">Jurovski Dol</option>
<option value="2256">Jur\u0161inci</option>
<option value="5214">Kal nad Kanalom</option>
<option value="3233">Kalobje</option>
<option value="4246">Kamna Gorica</option>
<option value="2351">Kamnica</option>
<option value="1241">Kamnik</option>
<option value="5213">Kanal</option>
<option value="8258">Kapele</option>
<option value="2362">Kapla</option>
<option value="2325">Kidri\u010devo</option>
<option value="1412">Kisovec</option>
<option value="6253">Kne\u017eak</option>
<option value="5222">Kobarid</option>
<option value="9227">Kobilje</option>
<option value="2276">Kog</option>
<option value="5211">Kojsko</option>
<option value="6223">Komen</option>
<option value="1218">Komenda</option>
<option value="6000">Koper</option>
<option value="8282">Koprivnica</option>
<option value="5296">Kostanjevica na Krasu</option>
<option value="8311">Kostanjevica na Krki</option>
<option value="1336">Kostel</option>
<option value="2394">Kotlje</option>
<option value="6240">Kozina</option>
<option value="3260">Kozje</option>
<option value="1330">Ko\u010devje</option>
<option value="1338">Ko\u010devska Reka</option>
<option value="6256">Ko\u0161ana</option>
<option value="4000" selected="selected">Kranj</option>
<option value="4280">Kranjska Gora</option>
<option value="1281">Kresnice</option>
<option value="4294">Kri\u017ee</option>
<option value="9206">Kri\u017eevci</option>
<option value="9242">Kri\u017eevci pri Ljutomeru</option>
<option value="1301">Krka</option>
<option value="8296">Krmelj</option>
<option value="4245">Kropa</option>
<option value="8262">Kr\u0161ka vas</option>
<option value="8270">Kr\u0161ko</option>
<option value="9263">Kuzma</option>
<option value="2318">Laporje</option>
<option value="1219">Laze v Tuhinju</option>
<option value="3270">La\u0161ko</option>
<option value="2230">Lenart v Slovenskih goricah</option>
<option value="9220">Lendava - Lendva</option>
<option value="4248">Lesce</option>
<option value="3261">Lesi\u010dno</option>
<option value="8273">Leskovec pri Kr\u0161kem</option>
<option value="2372">Libeli\u010de</option>
<option value="2341">Limbu\u0161</option>
<option value="1270">Litija</option>
<option value="3202">Ljube\u010dna</option>
<option value="1000">Ljubljana</option>
<option value="3333">Ljubno ob Savinji</option>
<option value="9240">Ljutomer</option>
<option value="5231">Log pod Mangartom</option>
<option value="1358">Log pri Brezovici</option>
<option value="1370">Logatec</option>
<option value="1434">Loka pri Zidanem Mostu</option>
<option value="3223">Loka pri \u017dusmu</option>
<option value="6219">Lokev</option>
<option value="2324">Lovrenc na Dravskem polju</option>
<option value="2344">Lovrenc na Pohorju</option>
<option value="3215">Lo\u010de</option>
<option value="1318">Lo\u0161ki Potok</option>
<option value="1225">Lukovica</option>
<option value="3334">Lu\u010de</option>
<option value="2322">Maj\u0161perk</option>
<option value="2321">Makole</option>
<option value="9243">Mala Nedelja</option>
<option value="2229">Male\u010dnik</option>
<option value="6273">Marezige</option>
<option value="2000">Maribor</option>
<option value="2206">Marjeta na Dravskem polju</option>
<option value="2281">Markovci</option>
<option value="9221">Martjanci</option>
<option value="6242">Materija</option>
<option value="4211">Mav\u010di\u010de</option>
<option value="9202">Ma\u010dkovci</option>
<option value="1215">Medvode</option>
<option value="1234">Menge\u0161</option>
<option value="8330">Metlika</option>
<option value="2392">Me\u017eica</option>
<option value="2204">Miklav\u017e na Dravskem polju</option>
<option value="2275">Miklav\u017e pri Ormo\u017eu</option>
<option value="5291">Miren</option>
<option value="8233">Mirna</option>
<option value="8216">Mirna Pe\u010d</option>
<option value="2382">Mislinja</option>
<option value="4281">Mojstrana</option>
<option value="8230">Mokronog</option>
<option value="9226">Moravske Toplice</option>
<option value="1251">Morav\u010de</option>
<option value="5216">Most na So\u010di</option>
<option value="1221">Motnik</option>
<option value="3330">Mozirje</option>
<option value="9000">Murska Sobota</option>
<option value="2366">Muta</option>
<option value="4202">Naklo</option>
<option value="3331">Nazarje</option>
<option value="1357">Notranje Gorice</option>
<option value="3203">Nova Cerkev</option>
<option value="5000">Nova Gorica</option>
<option value="1385">Nova vas</option>
<option value="8000">Novo mesto</option>
<option value="6243">Obrov</option>
<option value="9233">Odranci</option>
<option value="2317">Oplotnica</option>
<option value="2312">Orehova vas</option>
<option value="2270">Ormo\u017e</option>
<option value="1316">Ortnek</option>
<option value="1337">Osilnica</option>
<option value="8222">Oto\u010dec</option>
<option value="2361">O\u017ebalt</option>
<option value="2231">Pernica</option>
<option value="2211">Pesnica pri Mariboru</option>
<option value="9203">Petrovci</option>
<option value="3301">Petrov\u010de</option>
<option value="6330">Piran - Pirano</option>
<option value="6257">Pivka</option>
<option value="8255">Pi\u0161ece</option>
<option value="6232">Planina</option>
<option value="3225">Planina pri Sevnici</option>
<option value="6276">Pobegi</option>
<option value="8312">Podbo\u010dje</option>
<option value="5243">Podbrdo</option>
<option value="2273">Podgorci</option>
<option value="6216">Podgorje</option>
<option value="2381">Podgorje pri Slovenj Gradcu</option>
<option value="6244">Podgrad</option>
<option value="1414">Podkum</option>
<option value="2286">Podlehnik</option>
<option value="5272">Podnanos</option>
<option value="4244">Podnart</option>
<option value="3241">Podplat</option>
<option value="3257">Podsreda</option>
<option value="2363">Podvelka</option>
<option value="3254">Pod\u010detrtek</option>
<option value="2208">Pohorje</option>
<option value="2257">Polen\u0161ak</option>
<option value="1355">Polhov Gradec</option>
<option value="4223">Poljane nad \u0160kofjo Loko</option>
<option value="2319">Polj\u010dane</option>
<option value="3313">Polzela</option>
<option value="1272">Pol\u0161nik</option>
<option value="3232">Ponikva</option>
<option value="6320">Portoro\u017e - Portorose</option>
<option value="6230">Postojna</option>
<option value="2331">Pragersko</option>
<option value="3312">Prebold</option>
<option value="4205">Preddvor</option>
<option value="6255">Prem</option>
<option value="1352">Preserje</option>
<option value="6258">Prestranek</option>
<option value="2391">Prevalje</option>
<option value="3262">Prevorje</option>
<option value="1276">Primskovo</option>
<option value="3253">Pristava pri Mestinju</option>
<option value="9207">Prosenjakovci - Partosfalva</option>
<option value="5297">Prva\u010dina</option>
<option value="2250">Ptuj</option>
<option value="2323">Ptujska Gora</option>
<option value="9201">Puconci</option>
<option value="9252">Radenci</option>
<option value="1433">Rade\u010de</option>
<option value="2360">Radlje ob Dravi</option>
<option value="1235">Radomlje</option>
<option value="4240">Radovljica</option>
<option value="8274">Raka</option>
<option value="1381">Rakek</option>
<option value="4283">Rate\u010de - Planica</option>
<option value="2390">Ravne na Koro\u0161kem</option>
<option value="2327">Ra\u010de</option>
<option value="5292">Ren\u010de</option>
<option value="3332">Re\u010dica ob Savinji</option>
<option value="1310">Ribnica</option>
<option value="2364">Ribnica na Pohorju</option>
<option value="3272">Rimske Toplice</option>
<option value="1314">Rob</option>
<option value="3252">Rogatec</option>
<option value="3250">Roga\u0161ka Slatina</option>
<option value="9262">Roga\u0161ovci</option>
<option value="1373">Rovte</option>
<option value="5215">Ro\u010dinj</option>
<option value="2342">Ru\u0161e</option>
<option value="1282">Sava</option>
<option value="4227">Selca</option>
<option value="2352">Selnica ob Dravi</option>
<option value="8333">Semi\u010d</option>
<option value="8281">Senovo</option>
<option value="6224">Seno\u017ee\u010de</option>
<option value="8290">Sevnica</option>
<option value="6333">Se\u010dovlje - Sicciole</option>
<option value="6210">Se\u017eana</option>
<option value="2214">Sladki vrh</option>
<option value="5283">Slap ob Idrijci</option>
<option value="2380">Slovenj Gradec</option>
<option value="2310">Slovenska Bistrica</option>
<option value="3210">Slovenske Konjice</option>
<option value="1216">Smlednik</option>
<option value="1317">Sodra\u017eica</option>
<option value="5250">Solkan</option>
<option value="3335">Sol\u010dava</option>
<option value="4229">Sorica</option>
<option value="4225">Sovodenj</option>
<option value="5232">So\u010da</option>
<option value="5281">Spodnja Idrija</option>
<option value="2241">Spodnji Duplek</option>
<option value="9245">Spodnji Ivanjci</option>
<option value="2277">Sredi\u0161\u010de ob Dravi</option>
<option value="4267">Srednja vas v Bohinju</option>
<option value="8256">Sromlje</option>
<option value="5224">Srpenica</option>
<option value="1242">Stahovica</option>
<option value="1332">Stara Cerkev</option>
<option value="8342">Stari trg ob Kolpi</option>
<option value="1386">Stari trg pri Lo\u017eu</option>
<option value="2205">Star\u0161e</option>
<option value="2289">Stoperce</option>
<option value="8322">Stopi\u010de</option>
<option value="3206">Stranice</option>
<option value="8351">Stra\u017ea</option>
<option value="1313">Struge</option>
<option value="8293">Studenec</option>
<option value="8331">Suhor</option>
<option value="2353">Sv. Duh na Ostrem Vrhu</option>
<option value="2233">Sveta Ana v Slovenskih goricah</option>
<option value="2235">Sveta Trojica v Slovenskih goricah</option>
<option value="9244">Sveti Jurij ob \u0160\u010davnici</option>
<option value="2258">Sveti Toma\u017e</option>
<option value="3264">Sveti \u0160tefan</option>
<option value="3304">Tabor</option>
<option value="3221">Teharje</option>
<option value="9251">Ti\u0161ina</option>
<option value="5220">Tolmin</option>
<option value="3326">Topol\u0161ica</option>
<option value="2371">Trbonje</option>
<option value="1420">Trbovlje</option>
<option value="8231">Trebelno</option>
<option value="8210">Trebnje</option>
<option value="5252">Trnovo pri Gorici</option>
<option value="2254">Trnovska vas</option>
<option value="1222">Trojane</option>
<option value="1236">Trzin</option>
<option value="4290">Tr\u017ei\u010d</option>
<option value="8295">Tr\u017ei\u0161\u010de</option>
<option value="1311">Turjak</option>
<option value="9224">Turni\u0161\u010de</option>
<option value="8323">Ur\u0161na sela</option>
<option value="1252">Va\u010de</option>
<option value="3320">Velenje - dostava</option>
<option value="3322">Velenje - po\u0161tni predali</option>
<option value="8212">Velika Loka</option>
<option value="2274">Velika Nedelja</option>
<option value="9225">Velika Polana</option>
<option value="1315">Velike La\u0161\u010de</option>
<option value="8213">Veliki Gaber</option>
<option value="9241">Ver\u017eej</option>
<option value="1312">Videm - Dobrepolje</option>
<option value="2284">Videm pri Ptuju</option>
<option value="8344">Vinica pri \u010crnomlju</option>
<option value="5271">Vipava</option>
<option value="4212">Visoko</option>
<option value="3205">Vitanje</option>
<option value="2255">Vitomarci</option>
<option value="1294">Vi\u0161nja Gora</option>
<option value="1217">Vodice</option>
<option value="3212">Vojnik</option>
<option value="2232">Voli\u010dina</option>
<option value="5293">Vol\u010dja Draga</option>
<option value="3305">Vransko</option>
<option value="6217">Vremski Britof</option>
<option value="1360">Vrhnika</option>
<option value="2365">Vuhred</option>
<option value="2367">Vuzenica</option>
<option value="8292">Zabukovje</option>
<option value="1410">Zagorje ob Savi</option>
<option value="1303">Zagradec</option>
<option value="2283">Zavr\u010d</option>
<option value="8272">Zdole</option>
<option value="4201">Zgornja Besnica</option>
<option value="2242">Zgornja Korena</option>
<option value="2201">Zgornja Kungota</option>
<option value="2316">Zgornja Lo\u017enica</option>
<option value="2314">Zgornja Polskava</option>
<option value="2213">Zgornja Velka</option>
<option value="4247">Zgornje Gorje</option>
<option value="4206">Zgornje Jezersko</option>
<option value="2285">Zgornji Leskovec</option>
<option value="1432">Zidani Most</option>
<option value="3214">Zre\u010de</option>
<option value="8251">\u010cate\u017e ob Savi</option>
<option value="1413">\u010cem\u0161enik</option>
<option value="5253">\u010cepovan</option>
<option value="9232">\u010cren\u0161ovci</option>
<option value="2393">\u010crna na Koro\u0161kem</option>
<option value="6275">\u010crni Kal</option>
<option value="5274">\u010crni Vrh nad Idrijo</option>
<option value="5262">\u010crni\u010de</option>
<option value="8340">\u010crnomelj</option>
<option value="9204">\u0160alovci</option>
<option value="5261">\u0160empas</option>
<option value="5290">\u0160empeter pri Gorici</option>
<option value="3311">\u0160empeter v Savinjski dolini</option>
<option value="2212">\u0160entilj v Slovenskih goricah</option>
<option value="8297">\u0160entjan\u017e</option>
<option value="2373">\u0160entjan\u017e pri Dravogradu</option>
<option value="8310">\u0160entjernej</option>
<option value="3230">\u0160entjur</option>
<option value="3271">\u0160entrupert</option>
<option value="8232">\u0160entrupert</option>
<option value="1296">\u0160entvid pri Sti\u010dni</option>
<option value="4208">\u0160en\u010dur</option>
<option value="8275">\u0160kocjan</option>
<option value="6281">\u0160kofije</option>
<option value="4220">\u0160kofja Loka</option>
<option value="3211">\u0160kofja vas</option>
<option value="1291">\u0160kofljica</option>
<option value="6274">\u0160marje</option>
<option value="1293">\u0160marje - Sap</option>
<option value="3240">\u0160marje pri Jel\u0161ah</option>
<option value="8220">\u0160marje\u0161ke Toplice</option>
<option value="2315">\u0160martno na Pohorju</option>
<option value="3341">\u0160martno ob Dreti</option>
<option value="3327">\u0160martno ob Paki</option>
<option value="1275">\u0160martno pri Litiji</option>
<option value="2383">\u0160martno pri Slovenj Gradcu</option>
<option value="3201">\u0160martno v Ro\u017eni dolini</option>
<option value="3325">\u0160o\u0161tanj</option>
<option value="6222">\u0160tanjel</option>
<option value="3220">\u0160tore</option>
<option value="4209">\u017dabnica</option>
<option value="3310">\u017dalec</option>
<option value="4228">\u017delezniki</option>
<option value="2287">\u017detale</option>
<option value="4226">\u017diri</option>
<option value="4274">\u017dirovnica</option>
<option value="8360">\u017du\u017eemberk</option>
</select>'''
        self.assertHTMLEqual(f.render('Kranj', '4000'), out)

########NEW FILE########
__FILENAME__ = test_sk
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.sk.forms import (SKRegionSelect, SKPostalCodeField,
                                  SKDistrictSelect)


class SKLocalFlavorTests(SimpleTestCase):
    def test_SKRegionSelect(self):
        f = SKRegionSelect()
        out = '''<select name="regions">
<option value="BB">Banska Bystrica region</option>
<option value="BA">Bratislava region</option>
<option value="KE">Kosice region</option>
<option value="NR">Nitra region</option>
<option value="PO">Presov region</option>
<option value="TN">Trencin region</option>
<option value="TT" selected="selected">Trnava region</option>
<option value="ZA">Zilina region</option>
</select>'''
        self.assertHTMLEqual(f.render('regions', 'TT'), out)

    def test_SKDistrictSelect(self):
        f = SKDistrictSelect()
        out = '''<select name="Districts">
<option value="BB">Banska Bystrica</option>
<option value="BS">Banska Stiavnica</option>
<option value="BJ">Bardejov</option>
<option value="BN">Banovce nad Bebravou</option>
<option value="BR">Brezno</option>
<option value="BA1">Bratislava I</option>
<option value="BA2">Bratislava II</option>
<option value="BA3">Bratislava III</option>
<option value="BA4">Bratislava IV</option>
<option value="BA5">Bratislava V</option>
<option value="BY">Bytca</option>
<option value="CA">Cadca</option>
<option value="DT">Detva</option>
<option value="DK">Dolny Kubin</option>
<option value="DS">Dunajska Streda</option>
<option value="GA">Galanta</option>
<option value="GL">Gelnica</option>
<option value="HC">Hlohovec</option>
<option value="HE">Humenne</option>
<option value="IL">Ilava</option>
<option value="KK">Kezmarok</option>
<option value="KN">Komarno</option>
<option value="KE1">Kosice I</option>
<option value="KE2">Kosice II</option>
<option value="KE3">Kosice III</option>
<option value="KE4">Kosice IV</option>
<option value="KEO">Kosice - okolie</option>
<option value="KA">Krupina</option>
<option value="KM">Kysucke Nove Mesto</option>
<option value="LV">Levice</option>
<option value="LE">Levoca</option>
<option value="LM">Liptovsky Mikulas</option>
<option value="LC">Lucenec</option>
<option value="MA">Malacky</option>
<option value="MT">Martin</option>
<option value="ML">Medzilaborce</option>
<option value="MI">Michalovce</option>
<option value="MY">Myjava</option>
<option value="NO">Namestovo</option>
<option value="NR">Nitra</option>
<option value="NM">Nove Mesto nad Vahom</option>
<option value="NZ">Nove Zamky</option>
<option value="PE">Partizanske</option>
<option value="PK">Pezinok</option>
<option value="PN">Piestany</option>
<option value="PT">Poltar</option>
<option value="PP">Poprad</option>
<option value="PB">Povazska Bystrica</option>
<option value="PO">Presov</option>
<option value="PD">Prievidza</option>
<option value="PU">Puchov</option>
<option value="RA">Revuca</option>
<option value="RS">Rimavska Sobota</option>
<option value="RV">Roznava</option>
<option value="RK" selected="selected">Ruzomberok</option>
<option value="SB">Sabinov</option>
<option value="SC">Senec</option>
<option value="SE">Senica</option>
<option value="SI">Skalica</option>
<option value="SV">Snina</option>
<option value="SO">Sobrance</option>
<option value="SN">Spisska Nova Ves</option>
<option value="SL">Stara Lubovna</option>
<option value="SP">Stropkov</option>
<option value="SK">Svidnik</option>
<option value="SA">Sala</option>
<option value="TO">Topolcany</option>
<option value="TV">Trebisov</option>
<option value="TN">Trencin</option>
<option value="TT">Trnava</option>
<option value="TR">Turcianske Teplice</option>
<option value="TS">Tvrdosin</option>
<option value="VK">Velky Krtis</option>
<option value="VT">Vranov nad Toplou</option>
<option value="ZM">Zlate Moravce</option>
<option value="ZV">Zvolen</option>
<option value="ZC">Zarnovica</option>
<option value="ZH">Ziar nad Hronom</option>
<option value="ZA">Zilina</option>
</select>'''
        self.assertHTMLEqual(f.render('Districts', 'RK'), out)

    def test_SKPostalCodeField(self):
        error_format = ['Enter a postal code in the format XXXXX or XXX XX.']
        valid = {
            '91909': '91909',
            '917 01': '91701',
        }
        invalid = {
            '84545x': error_format,
        }
        self.assertFieldOutput(SKPostalCodeField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_tr
from django.core.exceptions import ValidationError
from django.utils import six
from django.utils.unittest import TestCase

from localflavor.tr.forms import (TRPostalCodeField, TRPhoneNumberField,
                                  TRIdentificationNumberField)

if six.PY3:
    _assertRaisesRegex = "assertRaisesRegex"
else:
    _assertRaisesRegex = "assertRaisesRegexp"


def assertRaisesRegex(self, *args, **kwargs):
    return getattr(self, _assertRaisesRegex)(*args, **kwargs)


class TRLocalFlavorTests(TestCase):
    def test_TRPostalCodeField(self):
        f = TRPostalCodeField()
        self.assertEqual(f.clean("06531"), "06531")
        self.assertEqual(f.clean("12345"), "12345")
        assertRaisesRegex(self, ValidationError,
                          "Enter a postal code in the format XXXXX.",
                          f.clean, "a1234")
        assertRaisesRegex(self, ValidationError,
                          "Enter a postal code in the format XXXXX.",
                          f.clean, "1234")
        assertRaisesRegex(self, ValidationError,
                          "Enter a postal code in the format XXXXX.",
                          f.clean, "82123")
        assertRaisesRegex(self, ValidationError,
                          "Enter a postal code in the format XXXXX.",
                          f.clean, "00123")
        assertRaisesRegex(self, ValidationError,
                          "Enter a postal code in the format XXXXX.",
                          f.clean, "123456")
        assertRaisesRegex(self, ValidationError,
                          "Enter a postal code in the format XXXXX.",
                          f.clean, "12 34")
        self.assertRaises(ValidationError, f.clean, None)

    def test_TRPhoneNumberField(self):
        f = TRPhoneNumberField()
        self.assertEqual(f.clean("312 455 56 78"), "3124555678")
        self.assertEqual(f.clean("312 4555678"), "3124555678")
        self.assertEqual(f.clean("3124555678"), "3124555678")
        self.assertEqual(f.clean("0312 455 5678"), "3124555678")
        self.assertEqual(f.clean("0 312 455 5678"), "3124555678")
        self.assertEqual(f.clean("0 (312) 455 5678"), "3124555678")
        self.assertEqual(f.clean("+90 312 455 4567"), "3124554567")
        self.assertEqual(f.clean("+90 312 455 45 67"), "3124554567")
        self.assertEqual(f.clean("+90 (312) 4554567"), "3124554567")
        assertRaisesRegex(self, ValidationError,
                          'Phone numbers must be in 0XXX XXX XXXX format.',
                          f.clean, "1234 233 1234")
        assertRaisesRegex(self, ValidationError,
                          'Phone numbers must be in 0XXX XXX XXXX format.',
                          f.clean, "0312 233 12345")
        assertRaisesRegex(self, ValidationError,
                          'Phone numbers must be in 0XXX XXX XXXX format.',
                          f.clean, "0312 233 123")
        assertRaisesRegex(self, ValidationError,
                          'Phone numbers must be in 0XXX XXX XXXX format.',
                          f.clean, "0312 233 xxxx")

    def test_TRIdentificationNumberField(self):
        f = TRIdentificationNumberField()
        self.assertEqual(f.clean("10000000146"), "10000000146")
        assertRaisesRegex(self, ValidationError,
                          'Enter a valid Turkish Identification number.',
                          f.clean, "10000000136")
        assertRaisesRegex(self, ValidationError,
                          'Enter a valid Turkish Identification number.',
                          f.clean, "10000000147")
        assertRaisesRegex(self, ValidationError,
                          'Turkish Identification number must be 11 digits.',
                          f.clean, "123456789")
        assertRaisesRegex(self, ValidationError,
                          'Enter a valid Turkish Identification number.',
                          f.clean, "1000000014x")
        assertRaisesRegex(self, ValidationError,
                          'Enter a valid Turkish Identification number.',
                          f.clean, "x0000000146")

########NEW FILE########
__FILENAME__ = forms
from __future__ import absolute_import

from django.forms import ModelForm

from .models import USPlace


class USPlaceForm(ModelForm):

    class Meta:
        model = USPlace
        fields = ('state', 'state_req', 'state_default', 'postal_code', 'name')

########NEW FILE########
__FILENAME__ = models
from django.db import models

from localflavor.us.models import USStateField, USPostalCodeField


class USPlace(models.Model):
    state = USStateField(blank=True)
    state_req = USStateField()
    state_default = USStateField(default="CA", blank=True)
    postal_code = USPostalCodeField(blank=True)
    name = models.CharField(max_length=20)

########NEW FILE########
__FILENAME__ = tests
from __future__ import absolute_import, unicode_literals

from django.test import SimpleTestCase

from localflavor.us.forms import (USZipCodeField, USPhoneNumberField,
                                  USStateField, USStateSelect,
                                  USSocialSecurityNumberField)

from .forms import USPlaceForm


class USLocalFlavorTests(SimpleTestCase):

    def setUp(self):
        self.form = USPlaceForm({'state': 'GA', 'state_req': 'NC', 'postal_code': 'GA', 'name': 'impossible'})

    def test_get_display_methods(self):
        """Test that the get_*_display() methods are added to the model instances."""
        place = self.form.save()
        self.assertEqual(place.get_state_display(), 'Georgia')
        self.assertEqual(place.get_state_req_display(), 'North Carolina')

    def test_required(self):
        """Test that required USStateFields throw appropriate errors."""
        form = USPlaceForm({'state': 'GA', 'name': 'Place in GA'})
        self.assertFalse(form.is_valid())
        self.assertEqual(form.errors['state_req'], ['This field is required.'])

    def test_field_blank_option(self):
        """Test that the empty option is there."""
        state_select_html = """\
<select name="state" id="id_state">
<option value="">---------</option>
<option value="AL">Alabama</option>
<option value="AK">Alaska</option>
<option value="AS">American Samoa</option>
<option value="AZ">Arizona</option>
<option value="AR">Arkansas</option>
<option value="AA">Armed Forces Americas</option>
<option value="AE">Armed Forces Europe</option>
<option value="AP">Armed Forces Pacific</option>
<option value="CA">California</option>
<option value="CO">Colorado</option>
<option value="CT">Connecticut</option>
<option value="DE">Delaware</option>
<option value="DC">District of Columbia</option>
<option value="FL">Florida</option>
<option value="GA" selected="selected">Georgia</option>
<option value="GU">Guam</option>
<option value="HI">Hawaii</option>
<option value="ID">Idaho</option>
<option value="IL">Illinois</option>
<option value="IN">Indiana</option>
<option value="IA">Iowa</option>
<option value="KS">Kansas</option>
<option value="KY">Kentucky</option>
<option value="LA">Louisiana</option>
<option value="ME">Maine</option>
<option value="MD">Maryland</option>
<option value="MA">Massachusetts</option>
<option value="MI">Michigan</option>
<option value="MN">Minnesota</option>
<option value="MS">Mississippi</option>
<option value="MO">Missouri</option>
<option value="MT">Montana</option>
<option value="NE">Nebraska</option>
<option value="NV">Nevada</option>
<option value="NH">New Hampshire</option>
<option value="NJ">New Jersey</option>
<option value="NM">New Mexico</option>
<option value="NY">New York</option>
<option value="NC">North Carolina</option>
<option value="ND">North Dakota</option>
<option value="MP">Northern Mariana Islands</option>
<option value="OH">Ohio</option>
<option value="OK">Oklahoma</option>
<option value="OR">Oregon</option>
<option value="PA">Pennsylvania</option>
<option value="PR">Puerto Rico</option>
<option value="RI">Rhode Island</option>
<option value="SC">South Carolina</option>
<option value="SD">South Dakota</option>
<option value="TN">Tennessee</option>
<option value="TX">Texas</option>
<option value="UT">Utah</option>
<option value="VT">Vermont</option>
<option value="VI">Virgin Islands</option>
<option value="VA">Virginia</option>
<option value="WA">Washington</option>
<option value="WV">West Virginia</option>
<option value="WI">Wisconsin</option>
<option value="WY">Wyoming</option>
</select>"""
        self.assertHTMLEqual(str(self.form['state']), state_select_html)

    def test_full_postal_code_list(self):
        """Test that the full USPS code field is really the full list."""
        usps_select_html = """\
<select name="postal_code" id="id_postal_code">
<option value="">---------</option>
<option value="AL">Alabama</option>
<option value="AK">Alaska</option>
<option value="AS">American Samoa</option>
<option value="AZ">Arizona</option>
<option value="AR">Arkansas</option>
<option value="AA">Armed Forces Americas</option>
<option value="AE">Armed Forces Europe</option>
<option value="AP">Armed Forces Pacific</option>
<option value="CA">California</option>
<option value="CO">Colorado</option>
<option value="CT">Connecticut</option>
<option value="DE">Delaware</option>
<option value="DC">District of Columbia</option>
<option value="FM">Federated States of Micronesia</option>
<option value="FL">Florida</option>
<option value="GA" selected="selected">Georgia</option>
<option value="GU">Guam</option>
<option value="HI">Hawaii</option>
<option value="ID">Idaho</option>
<option value="IL">Illinois</option>
<option value="IN">Indiana</option>
<option value="IA">Iowa</option>
<option value="KS">Kansas</option>
<option value="KY">Kentucky</option>
<option value="LA">Louisiana</option>
<option value="ME">Maine</option>
<option value="MH">Marshall Islands</option>
<option value="MD">Maryland</option>
<option value="MA">Massachusetts</option>
<option value="MI">Michigan</option>
<option value="MN">Minnesota</option>
<option value="MS">Mississippi</option>
<option value="MO">Missouri</option>
<option value="MT">Montana</option>
<option value="NE">Nebraska</option>
<option value="NV">Nevada</option>
<option value="NH">New Hampshire</option>
<option value="NJ">New Jersey</option>
<option value="NM">New Mexico</option>
<option value="NY">New York</option>
<option value="NC">North Carolina</option>
<option value="ND">North Dakota</option>
<option value="MP">Northern Mariana Islands</option>
<option value="OH">Ohio</option>
<option value="OK">Oklahoma</option>
<option value="OR">Oregon</option>
<option value="PW">Palau</option>
<option value="PA">Pennsylvania</option>
<option value="PR">Puerto Rico</option>
<option value="RI">Rhode Island</option>
<option value="SC">South Carolina</option>
<option value="SD">South Dakota</option>
<option value="TN">Tennessee</option>
<option value="TX">Texas</option>
<option value="UT">Utah</option>
<option value="VT">Vermont</option>
<option value="VI">Virgin Islands</option>
<option value="VA">Virginia</option>
<option value="WA">Washington</option>
<option value="WV">West Virginia</option>
<option value="WI">Wisconsin</option>
<option value="WY">Wyoming</option>
</select>"""
        self.assertHTMLEqual(str(self.form['postal_code']), usps_select_html)

    def test_USStateSelect(self):
        f = USStateSelect()
        out = '''<select name="state">
<option value="AL">Alabama</option>
<option value="AK">Alaska</option>
<option value="AS">American Samoa</option>
<option value="AZ">Arizona</option>
<option value="AR">Arkansas</option>
<option value="AA">Armed Forces Americas</option>
<option value="AE">Armed Forces Europe</option>
<option value="AP">Armed Forces Pacific</option>
<option value="CA">California</option>
<option value="CO">Colorado</option>
<option value="CT">Connecticut</option>
<option value="DE">Delaware</option>
<option value="DC">District of Columbia</option>
<option value="FL">Florida</option>
<option value="GA">Georgia</option>
<option value="GU">Guam</option>
<option value="HI">Hawaii</option>
<option value="ID">Idaho</option>
<option value="IL" selected="selected">Illinois</option>
<option value="IN">Indiana</option>
<option value="IA">Iowa</option>
<option value="KS">Kansas</option>
<option value="KY">Kentucky</option>
<option value="LA">Louisiana</option>
<option value="ME">Maine</option>
<option value="MD">Maryland</option>
<option value="MA">Massachusetts</option>
<option value="MI">Michigan</option>
<option value="MN">Minnesota</option>
<option value="MS">Mississippi</option>
<option value="MO">Missouri</option>
<option value="MT">Montana</option>
<option value="NE">Nebraska</option>
<option value="NV">Nevada</option>
<option value="NH">New Hampshire</option>
<option value="NJ">New Jersey</option>
<option value="NM">New Mexico</option>
<option value="NY">New York</option>
<option value="NC">North Carolina</option>
<option value="ND">North Dakota</option>
<option value="MP">Northern Mariana Islands</option>
<option value="OH">Ohio</option>
<option value="OK">Oklahoma</option>
<option value="OR">Oregon</option>
<option value="PA">Pennsylvania</option>
<option value="PR">Puerto Rico</option>
<option value="RI">Rhode Island</option>
<option value="SC">South Carolina</option>
<option value="SD">South Dakota</option>
<option value="TN">Tennessee</option>
<option value="TX">Texas</option>
<option value="UT">Utah</option>
<option value="VT">Vermont</option>
<option value="VI">Virgin Islands</option>
<option value="VA">Virginia</option>
<option value="WA">Washington</option>
<option value="WV">West Virginia</option>
<option value="WI">Wisconsin</option>
<option value="WY">Wyoming</option>
</select>'''
        self.assertHTMLEqual(f.render('state', 'IL'), out)

    def test_USZipCodeField(self):
        error_format = ['Enter a zip code in the format XXXXX or XXXXX-XXXX.']
        valid = {
            '60606': '60606',
            60606: '60606',
            '04000': '04000',
            ' 04000 ': '04000',
            '60606-1234': '60606-1234',
        }
        invalid = {
            '4000': error_format,
            '6060-1234': error_format,
            '60606-': error_format,
        }
        self.assertFieldOutput(USZipCodeField, valid, invalid)

    def test_USPhoneNumberField(self):
        error_format = ['Phone numbers must be in XXX-XXX-XXXX format.']
        valid = {
            '312-555-1212': '312-555-1212',
            '3125551212': '312-555-1212',
            '312 555-1212': '312-555-1212',
            '(312) 555-1212': '312-555-1212',
            '312 555 1212': '312-555-1212',
            '312.555.1212': '312-555-1212',
            '312.555-1212': '312-555-1212',
            ' (312) 555.1212 ': '312-555-1212',
        }
        invalid = {
            '555-1212': error_format,
            '312-55-1212': error_format,
        }
        self.assertFieldOutput(USPhoneNumberField, valid, invalid)

    def test_USStateField(self):
        error_invalid = ['Enter a U.S. state or territory.']
        valid = {
            'il': 'IL',
            'IL': 'IL',
            'illinois': 'IL',
            '  illinois ': 'IL',
        }
        invalid = {
            60606: error_invalid,
        }
        self.assertFieldOutput(USStateField, valid, invalid)

    def test_USSocialSecurityNumberField(self):
        error_invalid = ['Enter a valid U.S. Social Security number in XXX-XX-XXXX format.']

        valid = {
            '123-45-6789': '123-45-6789',
            '123456789': '123-45-6789',
        }
        invalid = {
            '078-05-1120': error_invalid,
            '900-12-3456': error_invalid,
            '999-98-7652': error_invalid,
        }
        self.assertFieldOutput(USSocialSecurityNumberField, valid, invalid)

########NEW FILE########
__FILENAME__ = test_uy
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.uy.forms import UYDepartmentSelect, UYCIField
from localflavor.uy.util import get_validation_digit


class UYLocalFlavorTests(SimpleTestCase):
    def test_UYDepartmentSelect(self):
        f = UYDepartmentSelect()
        out = '''<select name="departamentos">
<option value="G">Artigas</option>
<option value="A">Canelones</option>
<option value="E">Cerro Largo</option>
<option value="L">Colonia</option>
<option value="Q">Durazno</option>
<option value="N">Flores</option>
<option value="O">Florida</option>
<option value="P">Lavalleja</option>
<option value="B">Maldonado</option>
<option value="S" selected="selected">Montevideo</option>
<option value="I">Paysand\xfa</option>
<option value="J">R\xedo Negro</option>
<option value="F">Rivera</option>
<option value="C">Rocha</option>
<option value="H">Salto</option>
<option value="M">San Jos\xe9</option>
<option value="K">Soriano</option>
<option value="R">Tacuaremb\xf3</option>
<option value="D">Treinta y Tres</option>
</select>'''
        self.assertHTMLEqual(f.render('departamentos', 'S'), out)

    def test_UYCIField(self):
        valid = {
            '4098053': '4098053',
            '409805-3': '409805-3',
            '409.805-3': '409.805-3',
            '10054112': '10054112',
            '1005411-2': '1005411-2',
            '1.005.411-2': '1.005.411-2',
        }
        invalid = {
            'foo': ['Enter a valid CI number in X.XXX.XXX-X,XXXXXXX-X or XXXXXXXX format.'],
            '409805-2': ['Enter a valid CI number.'],
            '1.005.411-5': ['Enter a valid CI number.'],
        }
        self.assertFieldOutput(UYCIField, valid, invalid)
        self.assertEqual(get_validation_digit(409805), 3)
        self.assertEqual(get_validation_digit(1005411), 2)

########NEW FILE########
__FILENAME__ = test_za
from __future__ import unicode_literals

from django.test import SimpleTestCase

from localflavor.za.forms import ZAIDField, ZAPostCodeField, ZAProvinceSelect


class ZALocalFlavorTests(SimpleTestCase):
    def test_ZAIDField(self):
        error_invalid = ['Enter a valid South African ID number']
        valid = {
            '0002290001003': '0002290001003',
            '000229 0001 003': '0002290001003',
        }
        invalid = {
            '0102290001001': error_invalid,
            '811208': error_invalid,
            '0002290001004': error_invalid,
        }
        self.assertFieldOutput(ZAIDField, valid, invalid)

    def test_ZAPostCodeField(self):
        error_invalid = ['Enter a valid South African postal code']
        valid = {
            '0000': '0000',
        }
        invalid = {
            'abcd': error_invalid,
            ' 7530': error_invalid,
        }
        self.assertFieldOutput(ZAPostCodeField, valid, invalid)

    def test_ZAProvinceSelect(self):
        f = ZAProvinceSelect()
        out = '''<select name="province">
<option value="EC" selected="selected">Eastern Cape</option>
<option value="FS">Free State</option>
<option value="GP">Gauteng</option>
<option value="KN">KwaZulu-Natal</option>
<option value="LP">Limpopo</option>
<option value="MP">Mpumalanga</option>
<option value="NC">Northern Cape</option>
<option value="NW">North West</option>
<option value="WC">Western Cape</option>
</select>'''
        self.assertHTMLEqual(f.render('province', 'EC'), out)

########NEW FILE########
