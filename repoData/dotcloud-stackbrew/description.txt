# Stackbrew

Stackbrew is a web-application that performs continuous building of the docker
standard library. See `README.md` in the stackbrew subfolder for more
information.

## Library definition files

The library definition files are plain text files found in the `library/`
subfolder of the stackbrew repository.

### File names

The name of a definition file will determine the name of the image(s) it
creates. For example, the `library/ubuntu` file will create images in the
`<namespace>/ubuntu` repository. If multiple instructions are present in
a single file, all images are expected to be created under a different tag.

### Instruction format

Note: there is no backwards compatibility with the old format. This is part
of our effort to create strict, unambiguous references to build images upon.

	<docker-tag>:	<git-url>@<git-tag>
	2.4.0: 	git://github.com/dotcloud/docker-redis@2.4.0
	<docker-tag>:	<git-url>@<git-commit-id>
	2.2.0: 	git://github.com/dotcloud/docker-redis@a4bf8923ee4ec566d3ddc212
    <docker-tag>: <git-url>@<git-tag-or-commit-id>  <dockerfile-dir>
    2.5.1: git://github.com/dotcloud/docker-redis@2.5.1     tools/dockerfiles/2.5.1

Stackbrew will fetch data from the provided git repository from the
provided reference. Generated image will be tagged as `<docker-tag>`.
If a git tag is removed and added to another commit,
**you should not expect the image to be rebuilt.** Create a new tag and submit
a pull request instead.

Optionally, if `<dockerfile-dir>` is present, stackbrew will look for the
`Dockerfile` inside the specified subdirectory instead of at the root.

## Contributing to the standard library

Thank you for your interest in the stackbrew project! We strive to make these instructions as simple and straightforward as possible, but if you find yourself lost, don't hesitate to seek us out on IRC freenode, channel `#docker` or by creating a github issue.

### New repository.
* Create a new file in the library folder. Its name will be the name of your repository.
* Add your tag definitions using the provided syntax (see above).
* Add the following line to the top of the file:
`# maintainer: Your Name <you@email.com> (@github.name)`
* Create a pull request from your git repository to this one. Don't hesitate to add details as to what your repository does.

### New tag in existing repository.
* Add your tag definition using the instruction format documented above.
* Create a pull request from your git repository to this one. Don't hesitate to add details.
* In the pull request, mention the repository's maintainers using the `@` symbol (found in the relevant MAINTAINERS file).

### Change to an existing tag
* Propose a pull request to the origin repository. Don't hesitate to @-mention one of the stackbrew maintainers.

# Stackbrew

Stackbrew is a web-application that performs continuous building of the docker
standard library.

## Install instructions

1. Install python if it isn't already available on your OS of choice
1. Install the easy_install tool (`sudo apt-get install python-setuptools`
for Debian/Ubuntu)
1. Install the python package manager, `pip` (`easy_install pip`)
1. Run the following command: `sudo pip install -r requirements.txt`
1. You should now be able to use the `brew-cli` script as such.

### Deploying stackbrew

These additional instructions are necessary for the stackbrew application to
function.

1. Install sqlite3 (`sudo apt-get install sqlite3` on Debian/Ubuntu)
1. Create the /opt/stackbrew/repos (`mkdir -p /opt/stackbrew/repos`) folder.
2. Run the `create_db.py` script (`python create_db.py`)
3. Edit `config.json` appropriately to your needs.
4. If you're using the `push` option, you will need to have a valid
   `.dockercfg` file in your HOME directory.
5. You can start the application with the command `python app.py`

## Builds

Builds are performed regularly and pushed to the public index.

## API

A small JSON API allows users to check the status of past builds.

### Latest build summary

* `GET /summary` or `GET /status`


        GET /summary

        {
            "build_date": "2013-10-04 18:08:45.685881", 
            "id": 16, 
            "result": true
        }

### Summary details

* `GET /summary/<summary_id>`


        GET /summary/16

        [
            {
                "commit_id": "7362ff5b812f93eceafbdbf5e5959f676f731f80", 
                "exception": null, 
                "source_desc": "git://github.com/dotcloud/hipache@C:7362ff5b812f93eceafbdbf5e5959f676f731f80",
                "image_id": "5d313f0ec5af",
                "tag": "0.2.4",
                "summary_id": 16,
                "id": 1,
                "repo_name": "hipache"
            }, {
                "commit_id": "7362ff5b812f93eceafbdbf5e5959f676f731f80",
                "exception": null,
                "source_desc": "git://github.com/dotcloud/hipache@C:7362ff5b812f93eceafbdbf5e5959f676f731f80",
                "image_id": "5d313f0ec5af",
                "tag": "latest",
                "summary_id": 16,
                "id": 2,
                "repo_name": "hipache"
            }, ...
        ]

### Latest successful build

* `GET /success/<repo_name>?tag=<tag>`
* `tag` parameter is optional, defaults to `latest`


        GET /success/ubuntu?tag=12.10

        {
            "commit_id": "abd58c43ceec4d4a21622a1e3d45f676fe912e745d31",
            "exception": null,
            "source_desc": "git://github.com/dotcloud/ubuntu-quantal@B:master",
            "image_id": "d462fecc33e1",
            "tag": "12.10",
            "summary_id": 17,
            "id": 19,
            "repo_name": "ubuntu"
        }

## Stackbrew CLI

    ./brew-cli -h

Display usage and help.

    ./brew-cli

Default build from the default repo/branch. Images will be created under the
`library/` namespace. Does not perform a remote push.

    ./brew-cli -n mycorp.com -b stable --push git://github.com/mycorp/docker

Will fetch the library definition files in the `stable` branch of the
`git://github.com/mycorp/docker` repository and create images under the
`mycorp.com` namespace (e.g. `mycorp.com/ubuntu`). Created images will then
be pushed to the official docker repository (pending: support for private
repositories)
