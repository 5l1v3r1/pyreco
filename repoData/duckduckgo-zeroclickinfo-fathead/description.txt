# Contributing to the **Fathead** repository

At DuckDuckGo, we truly appreciate our community members taking the time to contribute to our open-source repositories. In an effort to ensure contributions are easy for you to make and for us to manage, we have written some guidelines that we ask our contributors to follow so that we can handle pull requests in a timely manner with as little friction as possible.

## Getting Started

Before you can do anything, you first need a [GitHub account](https://github.com/signup/free). This is required because we use GitHub to handle all incoming *Pull Requests* (code modifications) and *Issues* (bug reports) which cannot be made without a GitHub account.

## Submitting a **Bug** or **Suggestion**

- Firstly, please make sure the bug is related to the **Fathead** repository. If this bug is about the DuckDuckGo API, or the relevancy of our search results, please visit our feedback page at <https://duckduckgo.com/feedback>. If you're unsure, its best to use the feedback page (your message will be passed along to the correct people).

- Check the **Fathead** [issues](https://github.com/duckduckgo/zeroclickinfo-fathead/issues) to see if an issue already exists for the given bug or suggestion
  - If one doesn't exist, create a GitHub issue in the **Fathead** repository
    - Clearly describe the bug/improvemnt, including steps to reproduce when it is a bug
  - If one already exists, please add any additional comments you have regarding the matter

If you're submitting a **pull request** (bugfix/addition):
- Fork the **Fathead** repository on GitHub

## Making Changes

- Before making any changes, refer to the [DuckDuckHack Styleguide](https://dukgo.com/duckduckhack/styleguide_overview) to ensure your changes are made in the correct fashion
- Make sure your commits are of a reasonable size. They shouldn't be too big (or too small)
- Make sure your commit messages effectively explain what changes have been made, and please identify which instant answer or file has been modified:

  ```shell
  CONTRIBUTING.md - Added the example commit message because it was missing
  ```

  is much better than:

  ```shell
  <bad_commit_example>
  ```

- Make sure you have added the necessary tests for your changes
- Run `dzil test` (executes all tests in t/) to ensure nothing else was accidentally broken
- If your change affects an instant answer, remember to add yourself to the Metadata attribution list in the appropriate `.pm` file

## Submitting Changes

1. Commit your changes.

  ```shell
  git commit -a -m "My first instant answer that does X is ready to go!"
  ```

2. Get your commit history [how you like it](http://book.git-scm.com/4_interactive_rebasing.html).

  ```shell
  git rebase -i origin/master
  ```

  or

  ```shell
  git pull --rebase origin/master
  ```

3. Push your forked repository back to GitHub.

  ```shell
  git push
  ```

4. Add your info to the instant answer so we can give you credit for it on the [Goodies page](https://duckduckgo.com/goodies). You'll see your name or handle on the live site!
Check out the [Metadata documentation](https://dukgo.com/duckduckhack/metadata) for detailed instructions on how to include your name and links.

5. Go into GitHub and submit a [pull request!](http://help.github.com/send-pull-requests/) to the **Fathead** repository, making sure to use the **Fathead** repository's **[Pull Request Template](https://github.com/duckduckgo/zeroclickinfo-fathead/blob/master/pull_request_template_fathead.md)**. This will let us know about your changes and start the conversation about integrating it into the live code.

# Fathead Pull Request Template

Using this template will help us better understand your Instant Answer and assist you when necessary.  Simply copy and paste the markdown below into the description of your GitHub pull request and complete as appropriate.

**What does your instant answer do?**


**What problem does your instant answer solve (Why is it better than organic links)?**


**What is the data source for your instant answer? (Provide a link if possible)**


**Why did you choose this data source?**


**Are there any other alternative (better) data sources?**


**What are some example queries that trigger this instant answer?**


**Which communities will this instant answer be especially useful for? (gamers, book lovers, etc)**


**Is this instant answer connected to a DuckDuckHack [instant answer idea](https://duck.co/ideas)?**


**Which existing instant answers will this one supercede/overlap with?**


**Are you having any problems? Do you need our help with anything?**

**\*\*Note:** Please attach a screenshot for new instant answer pull requests, and for pull requests which modify the look/design of existing instant answers.

##Checklist
Please place an 'X' where appropriate.

```
[] Added metadata and attribution information
[] Wrote test file and added to t/ directory
[] Verified that instant answer adheres to design guidelines(https://github.com/duckduckgo/duckduckgo-documentation/blob/master/duckduckhack/styleguides/design_styleguide.md)
[] Tested cross-browser compatability

    Please let us know which browsers/devices you've tested on:
    - Windows 8
        [] Google Chrome   
        [] Firefox         
        [] Opera           
        [] IE 10           

    - Windows 7
        [] Google Chrome   
        [] Firefox         
        [] Opera           
        [] IE 8            
        [] IE 9            
        [] IE 10           

    - Windows XP
        [] IE 7            
        [] IE 8            

    - Mac OSX
        [] Google Chrome   
        [] Firefox         
        [] Opera           
        [] Safari          

    - iOS (iPhone)
        [] Safari Mobile   
        [] Google Chrome   
        [] Opera           

    - iOS (iPad)
        [] Safari Mobile   
        [] Google Chrome   
        [] Opera            

    - Android
        [] Firefox         
        [] Native Browser  
        [] Google Chrome   
        [] Opera
```

# DuckDuckHack Fathead Instant Answers

This repository contains all the Fathead instant answers. If you are developing a Fathead instant answer you will need to fork this repository.

If you would like to contribute to DuckDuckHack, please start by reading the [DuckDuckHack Documentation](https://dukgo.com/duckduckhack/ddh-intro).

------

## Fathead Instant Answer Example

![hello world example](https://s3.amazonaws.com/ddg-assets/docs/fathead_example.png)

Airports names and IATA/ICAO codes for DuckDuckGo

Dependencies:

Python 2.7
BeautifulSoup 4 (pip install beautifulsoup4)
html5lib

ArchLinux packages plugin for DukcDuckGo

Dependencies:

Python 2.7
BeautifulSoup 4 (pip install beautifulsoup4)

Dependencies:

Python 2.6+

Dependencies
------------
$PWD is assumed to be the directory c++_ref
pushd $PWD
cd /usr/ports/www/node && make PACKAGE_BUILDING=yes install clean
popd
npm install .

Cppreference fathead plugin
===========================

This is a fathead plugin for C++ standard library reference manual hosted at
http://en.cppreference.com.

Data source
-----------

fetch.sh downloads and untars a snapshot of the website, which is available at
http://en.cppreference.com/w/Cppreference:Archives. A new snapshot is released
periodically. The script needs to be for the new location of the snapshot.

Dependencies
------------

* python 3
* python 3 lxml

Dependencies
------------
$PWD is assumed to be the directory c++_ref
pushd $PWD
cd /usr/ports/www/node && make && make install
popd
npm install .


Common Vulnerabilities and Exposures (CVE) reference

Dependencies:
    Perl v5.14.2
    XML::LibXML::Reader v1.13 (requires libxml2-2.6.21 or higher)

Dependencies
------------

Golang

# ubuntu
http://google-go-lang.blogspot.com/2009/11/how-to-install-go-golang-compiler-on.html

Firefox about:config plugin for DuckDuckGo

Dependencies:
Python 2.7
BeautifulSoup 4 (pip install beautifulsoup4)

#### Install [Go](http://golang.org/) 1.2
`sudo apt-get install golang` or follow the instructions on http://golang.org/doc/install

#### Set $GOPATH
```shell
mkdir $HOME/go
export GOPATH=$HOME/go
```

#### Get dependencies
`go get "code.google.com/p/go.net/html"`

#### Run the code
`cd` into the `share` directory and run `go run parse.go`
Dependencies:

Python 3

To install in Ubuntu 10.04 (Lucid):

sudo apt-get install python3-minimal

DuckDuckGo zeroclickinfo-fathead/hgnc_gene_names


----------------------------------------
Required Tools (must be in path)
----------------------------------------
wget
gzip
perl (tested with 5.12)


----------------------------------------
Required Perl Modules
----------------------------------------
IO::Uncompress::AnyInflate

HTML Referencing plugin for DuckDuckGo

Dependencies:
Python 2.7
BeautifulSoup 4 (pip install beautifulsoup4)

github.com/lucassmagal =D

Required packages:

[lxml](http://pypi.python.org/pypi/lxml/2.2.8)
[unidecode](http://pypi.python.org/pypi/Unidecode/0.04.9)

This is not 100% correct for the FatHead project but was used to generate
the sources for http://searchco.de/ which were shared with DDG. I belive
the TSV format used here is the basis for that project though so it should be
pretty close.

Dependancy is BeautifulSoup for Python. http://www.crummy.com/software/BeautifulSoup/

Note that the fetch might not work correctly. This is due to Oracle requiring
you to accept terms and conditions.

LDraw.org Fathead
=================

"[LDraw](http://ldraw.org/) is an open standard for LEGO CAD programs that allow the user to create virtual LEGO models and scenes." At the heart of LDraw is the LDraw Part Library, a collection of community-authored part files representing real LEGO elements. Updates to the  library are periodically released [at LDraw.org](http://www.ldraw.org/Topic26.html). The library is also distributed with compatible software, such as [Bricksmith](http://bricksmith.sourceforge.net/). Library updates only include official parts - those that have been certified by the community to meet [established standards](http://www.ldraw.org/Article292.html). Unofficial parts are cataloged at the [LDraw Parts Tracker](http://ldraw.org/library/tracker/), where contributors can submit, review, and revise new parts. Users who are seeking to participate in this process or who simply want to use unofficial parts can search for and download new parts and their dependencies from the LDraw Parts Tracker.

This fathead module lets DuckDuckGo search the LDraw Parts Tracker.

Data Source
-----------

The LDraw Parts Tracker is updated on a continuous basis. The [activity log](http://www.ldraw.org/cgi-bin/tracker/activity.cgi) indicates that new submissions are less frequent than other actions such as comments and certification votes. Therefore, although the [complete part list](http://www.ldraw.org/cgi-bin/ptlist.cgi) is dynamically generated, it changes little from day to day, and is used as the data source for this fathead. Periodic refreshes are appropriate.

At the time of this writing, the complete part list page retrieved by `fetch.sh` is around 1 megabyte. The `output.txt` file generated by parser is smaller, about 866k.

Limitations
-----------

- Initial intent is to look up part name and link from part number queries. However, it would also be useful to support queries by [partial] part name. See `queries.txt` for examples.
- The LDraw Parts Tracker reports additional information about each part on the detail pages linked from the complete part list. Most importantly, any required subfiles are listed - a good candidate for "see also" links. Other information that may be available includes revision history, comments, author name, and semi-standardized part CATEGORY or KEYWORD labels. This module does not include any of that information in its output.
- Obviously, it would be nice to provide information about officially released parts as well as unofficial parts. The LDraw Parts Tracker does not list official parts, but LDraw.org does host official part files and preview images. Fetching and indexing a full copy of the LDraw Part Library (and [all unofficial parts](http://www.ldraw.org/library/unofficial/)) would be one way to go.
- For information about actual LEGO sets and parts, a separate module is needed to search sites like [Peeron](http://peeron.com/) or [Bricklink](http://www.bricklink.com/).
Legal docs fathead plugin for DDG from Docracy.

Dependencies:

None.
Dependencies:

Python 3.2.2+
http://www.python.org/download/

lxml 2.3.1+ 
http://lxml.de/index.html#download


For Ubuntu users, starting with Ubuntu 11.04, you can install all dependencies by running the following command line:
sudo apt-get -V install python3 python3-lxml

On previous Ubuntu versions, you may need to compile them yourself.
You can do so with the following bash script:

THREAD_COUNT=$([ $(which getconf) ] && getconf _NPROCESSORS_ONLN || grep -cE '^processor' /proc/cpuinfo)
TMP_DIR=$(mktemp -d /tmp/$(basename -- $0).XXXXXXXXXX)

# checkinstall
sudo apt-get -y install checkinstall

# python 3.2
sudo apt-get -y install build-essential libncursesw5-dev libreadline5-dev libssl-dev libgdbm-dev libc6-dev libsqlite3-dev tk-dev libbz2-dev
wget -P $TMP_DIR http://www.python.org/ftp/python/3.2.2/Python-3.2.2.tar.xz
tar -xJf $TMP_DIR/Python-3.2.2.tar.xz -C $TMP_DIR
pushd $TMP_DIR/Python-3.2.2 > /dev/null
./configure
make -j $THREAD_COUNT
sudo checkinstall --pkgname=python3.2 --pkgversion=3.2.2 --backup=no --deldoc=yes --fstrans=no --default make altinstall
popd > /dev/null
ln -sv /usr/local/bin/python3.2 /usr/local/bin/python3
ln -sv /usr/local/bin/pydoc3.2 /usr/local/bin/pydoc3

# lxml
sudo apt-get -y install libxml2-dev libxslt1-dev
wget -P $TMP_DIR http://lxml.de/files/lxml-2.3.1.tgz
tar -xzf $TMP_DIR/lxml-2.3.1.tgz -C $TMP_DIR
pushd $TMP_DIR/lxml-2.3.1 > /dev/null
sudo python3.2 setup.py install
popd > /dev/null

# cleanup
sudo rm -Rf $TMP_DIR

Plugin: MDN JavaScript Reference
Author: Eric Edens (eric.edens@gmail.com)
Date: May 1, 2013


This Fathead plugin provides documentation snippets for JavaScript. It covers
the core language, as covered in the Mozilla Developer Network (MDN); it 
currently does not support non-core APIs such as the DOM or XMLHttpRequest.

The plugin's core data source is MDN's JavaScript 1.5 reference, 
https://developer.mozilla.org/en-US/docs/JavaScript/Reference. From each wiki
article, it extracts:
  - Title
  - Summary
  - Syntax

It then combines Syntax and Summary to create an abstract for the article.

As MDN is a wiki, a core issue is consistency of article titles. This plugin
utilizes an auxiliary reference (propref.csv) in order to standardize titles.
For implementation details, see parse.Standardizer

Dependencies:
  Python 2.7
  lxml, https://pypi.python.org/pypi/lxml
  unidecode, https://pypi.python.org/pypi/Unidecode
  httplib2, https://pypi.python.org/pypi/httplib2/
  beautifulsoup4, http://www.crummy.com/software/BeautifulSoup/

MIME types plugin for DDG
Dependancies:

Python
To install in Ubuntu 12.04(Precise)
sudo apt-get install python

Dependencies

cd /usr/ports/www/node && make && make install

PCI IDs

Dependencies:
perl v5.14.2

Perl 6 documentation fetcher and parser for DuckDuckGo

# Dependencies

* wget
* Perl v5.10
* CPAN modules:
  * `strictures`
  * `HTML::Entities`
  * `HTML::Parser`
  * `URI::Escape`

# Run the following command to generate the fetch.  This is use because of the variable number of results per category.

ruby generate_fetch.rb > fetch.sh

Appear to be duplicates returned at times (Maybe need to post-process with SELECT DISTINCT...).  

Only 600 rows returned - site claims 1696 releases...hmmm

Dependencies

# Freebsd
cd /usr/ports/devel/py-lxml && make && make install

# Ubuntu
sudo apt-get -y install python-lxml


sudo apt-get -y install ruby1.9.1 rubygems1.9.1
sudo gem install rubygems-update
sudo apt-get -y install libhpricot-ruby1.9.1

Dependencies

# Freebsd
cd /usr/ports/devel/py-lxml && make && make install

# Ubuntu
sudo apt-get -y install python-lxml


Dependencies:
    Python 2.6+

# Tcl/Tk 8.5 Manual Fathead #

Programming reference for Tcl/Tk 8.5. Based on <http://www.tcl.tk/man/tcl8.5/>.

Presently ignores the `namespace`, `details`, `type`, and `lang` fields described in the
programming data file format section of the fathead readme. Provides only the first
sentence of the `description` given for each command in the manual; this tends to be
just right to confirm or suggest what the command is for, although the whole first
paragraph would provide more `details`. The `synopsis` may contain multiple lines,
separated by `<br />`.

Some pages in the manual do not document specific commands. Most such pages are omitted.

Parsing is accomplished with gnarly and not at all fragile regular expressions. Cowabunga.

## Requirements

The `parse.tcl` script requires Tcl 8.4.

This is a copy of the orginal parsers used to generate the API
documentation for searchcode.com which were shared with DDG back
in the early days. Note while it conforms to a standard of SQL and
TSV its not in line with the current DDG fathead standards and will
need to be updated. The code is also 100% awful. Some of the parsers
were works in progress so will not work.

UNIX man-page fathead plugin for DuckDuckGo.

Source: http://www.linuxcommand.org/

Dependencies: 
----------------
wget 
perl -- plugin was developed with perl 5.16 

Dependencies

# Freebsd
cd /usr/ports/devel/py-lxml && make && make install

# Ubuntu
sudo apt-get -y install python-lxml

# OS X
sudo pip install lxml

Depdendencies:
BeautifulSoup 3

