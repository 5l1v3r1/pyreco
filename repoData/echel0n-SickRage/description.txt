### Questions about SickRage?

To get your questions answered, please ask in the [SickRage Forum], on IRC \#sickrage pn freenode.net, or webchat.

# Contributing to SickRage

1. [Getting Involved](#getting-involved)
2. [How To Report Bugs](#how-to-report-bugs)
3. [Tips For Submitting Code](#tips-for-submitting-code)


## Getting Involved

There are a number of ways to get involved with the development of SickRage. Even if you've never contributed code to an Open Source project before, we're always looking for help identifying bugs, cleaning up code, writing documentation and testing.

The goal of this guide is to provide the best way to contribute to the official SickRage repository. Please read through the full guide detailing [How to Report Bugs](#how-to-report-bugs).

## Discussion

### Forum and IRC

The SickRage development team frequently tracks posts on the [SickRage Forum](http://sickrage.tv/). If you have longer posts or questions please feel free to post them there. If you think you've found a bug please [file it in the bug tracker](#how-to-report-bugs).

Additionally most of the SickRage development team can be found in the [#sickrage](http://webchat.freenode.net/?channels=sickrage) IRC channel on irc.freenode.net.


## How to Report Bugs

### Make sure it is a SickRage bug

Many bugs reported are actually issues with the user mis-understanding of how something works (there are a bit of moving parts to an ideal setup) and most of the time can be fixed by just changing some settings to fit the users needs.

If you are new to SickRage, it is usually a much better idea to ask for help first in the [Using SickRage Forum](http://sickrage.tv) or the [SickRage IRC channel](http://webchat.freenode.net/?channels=sickrage). You will get much quicker support, and you will help avoid tying up the SickRage team with invalid bug reports.

### Try the latest version of SickRage

Bugs in old versions of SickRage may have already been fixed. In order to avoid reporting known issues, make sure you are always testing against the latest build/source. Also, we put new code in the `dev` branch first before pushing down to the `master` branch (which is what the binary builds are built off of).


## Tips For Submitting Code


### Code

**NEVER write your patches to the master branch** - it gets messy (I say this from experience!)

**ALWAYS USE A "TOPIC" BRANCH!** Personally I like the `branch-feature_name` format that way its easy to identify the branch and feature at a glance. Also please make note of any forum post / issue number in the pull commit so we know what you are solving (it helps with cleaning up the related items later).


Please follow these guidelines before reporting a bug:

1. **Update to the latest version** &mdash; Check if you can reproduce the issue with the latest version from the `dev` branch.

2. **Use the SickRage Forums search** &mdash; check if the issue has already been reported. If it has been, please comment on the existing issue.

3. **Provide a means to reproduce the problem** &mdash; Please provide as much details as possible, e.g. SickRage log files (obfuscate apikey/passwords), browser and operating system versions, how you started SickRage, and of course the steps to reproduce the problem. Bugs are always reported in the forums.


### Feature requests

Please follow the bug guidelines above for feature requests, i.e. update to the latest version and search for existing issues before posting a new request. You can submit Feature Requests in the [SickRage Forum] as well.

### Pull requests

[Pull requests](https://help.github.com/articles/using-pull-requests) are welcome and the preferred way of accepting code contributions.

Please follow these guidelines before sending a pull request:

1. Update your fork to the latest upstream version.

2. Use the `dev` branch to base your code off of. Create a topic-branch for your work. We will not merge your 'dev' branch, or your 'master' branch, only topic branches, coming from dev are merged.

3. Follow the coding conventions of the original repository. Do not change line endings of the existing file, as this will rewrite the file and loses history.

4. Keep your commits as autonomous as possible, i.e. create a new commit for every single bug fix or feature added.

5. Always add meaningful commit messages. We should not have to guess at what your code is supposed to do.

6. One pull request per feature. If you want multiple features, send multiple PR's

Please follow this process; it's the best way to get your work included in the project:

- [Fork](http://help.github.com/fork-a-repo/) the project, clone your fork,
   and configure the remotes:

```bash
   # clone your fork of the repo into the current directory in terminal
   git clone git@github.com:<your username>/SickRage.git
   # navigate to the newly cloned directory
   cd SickRage
   # assign the original repo to a remote called "upstream"
   git remote add upstream https://github.com/echel0n/SickRage.git
   ```

- If you cloned a while ago, get the latest changes from upstream:

   ```bash
   # fetch upstream changes
   git fetch upstream
   # make sure you are on your 'master' branch
   git checkout master
   # merge upstream changes
   git merge upstream/master
   ```

- Create a new topic branch to contain your feature, change, or fix:

   ```bash
   git checkout -b <topic-branch-name> dev
   ```

- Commit your changes in logical chunks. or your pull request is unlikely
   be merged into the main project. Use git's
   [interactive rebase](https://help.github.com/articles/interactive-rebase)
   feature to tidy up your commits before making them public.

- Push your topic branch up to your fork:

   ```bash
   git push origin <topic-branch-name>
   ```

- [Open a Pull Request](https://help.github.com/articles/using-pull-requests) with a
    clear title and description.


<!--
Header:      Content-Location: http://example.com/
Description: item description relative to Content-Location header
Expect:      not bozo and entries[0]['description'] == u'<a href="http://example.com/relative/uri">click here</a>'
-->
<rss version="2.0">
<channel>
<item>
<description>&lt;a href="/relative/uri">click here&lt;/a></description>
</item>
</channel>
</rss>
<!--
Description: item description relative to document URI
Expect:      not bozo and entries[0]['description'] == u'<a href="http://127.0.0.1:8097/relative/uri">click here</a>'
-->
<rss version="2.0">
<channel>
<item>
<description>&lt;a href="/relative/uri">click here&lt;/a></description>
</item>
</channel>
</rss>
<!--
Description: item description relative to document URI
Expect:      not bozo and entries[0]['description'] == u'<a href="http://127.0.0.1:8097/relative/uri">click here</a>'
-->
<rss version="2.0">
<channel>
<item>
<description>&lt;a href=" /relative/uri ">click here&lt;/a></description>
</item>
</channel>
</rss>

<!--
Description: CDF channel abstract maps to description
Expect:      not bozo and feed['description'] == u'Example description'
-->
<CHANNEL>
  <ABSTRACT>Example description</ABSTRACT>
</CHANNEL>
<!--
Description: CDF item abstract maps to description
Expect:      not bozo and entries[0]['description'] == u'Example description'
-->
<CHANNEL>
<ITEM>
  <ABSTRACT>Example description</ABSTRACT>
</ITEM>
</CHANNEL>
<!--
Description: channel description
Expect:      not bozo and feed['description'] == u'Example description'
-->
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns="http://purl.org/rss/1.0/">
<channel rdf:about="http://example.com/index.rdf">
  <description>Example description</description>
</channel>
</rdf:RDF>
<!--
Description: item description
Expect:      not bozo and entries[0]['description'] == u'Example description'
-->
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns="http://purl.org/rss/1.0/">
<channel rdf:about="http://example.com/index.rdf">
  <items>
    <rdf:Seq>
      <rdf:li resource="http://example.com/1"/>
    </rdf:Seq>
  </items>
</channel>
<item rdf:about="http://example.com/1">
  <description>Example description</description>
</item>
</rdf:RDF>
<!--
Description: normal description
Expect:      not bozo and feed['description'] == u'Example description'
-->
<rss version="2.0">
<channel>
<description>Example description</description>
</channel>
</rss>
<!--
Description: escaped markup in description
Expect:      not bozo and feed['description'] == u'<p>Example description</p>'
-->
<rss version="2.0">
<channel>
<description>&lt;p&gt;Example description&lt;/p&gt;</description>
</channel>
</rss>
<!--
Description: channel description is mapped to tagline
Expect:      not bozo and feed['tagline'] == u'Example description'
-->
<rss version="2.0">
<channel>
<description>Example description</description>
</channel>
</rss>
<!--
Description: naked markup in description
Expect:      not bozo and feed['description'] == u'<p>Example description</p>'
-->
<rss version="2.0">
<channel>
<description><p>Example description</p></description>
</channel>
</rss>
<!--
Description: description shorttag and link following
Expect:      not bozo and feed['description'] == u'' and feed['link'] == u'http://example.com/'
-->
<rss version="2.0">
<channel>
<description/>
<link>http://example.com/</link>
</channel>
</rss>
<!--
Description: image description
Expect:      not bozo and feed['image']['description'] == u'Available in Netscape RSS 0.91'
-->
<rss version="0.91">
<channel>
<image>
<title>Sample image</title>
<url>http://example.org/url</url>
<link>http://example.org/link</link>
<width>80</width>
<height>15</height>
<description>Available in Netscape RSS 0.91</description>
</image>
</channel>
</rss>
<!--
Description: textInput description
Expect:      not bozo and feed['textinput']['description'] == u'textInput description'
-->
<rss version="2.0">
<channel>
<title>Real title</title>
<description>Real description</description>
<textInput>
<title>textInput title</title>
<description>textInput description</description>
</textInput>
</channel>
</rss>
<!--
Description: textInput description does not conflict with channel description
Expect:      not bozo and feed['description'] == u'Real description'
-->
<rss version="2.0">
<channel>
<description>Real description</description>
<textInput>
<description>textInput description</description>
</textInput>
</channel>
</rss>
<!--
Description: item dc:description
Expect:      not bozo and entries[0]['description'] == u'Example description'
-->
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel>
<item>
<dc:description>Example description</dc:description>
</item>
</channel>
</rss>

<!--
Description: item description
Expect:      not bozo and entries[0]['description'] == u'Example description'
-->
<rss version="2.0">
<channel>
<item>
<description>Example description</description>
</item>
</channel>
</rss>
<!--
Description: item contains both description and summary elements
Expect:      not bozo and entries[0]['description'] == u'Example description' and entries[0]['content'][0]['value'] == u'Example summary'
-->
<rss version="2.0">
<channel>
<item>
<description>Example description</description>
<summary>Example summary</summary>
</item>
</channel>
</rss>
<!--
Description: item description contains both <br/> and <br />
Expect:      not bozo and entries[0]['description'] == u'article title<br /><br /> article byline<br /><br />text of article'
-->
<rss version="2.0">
<channel>
<item>
<description><![CDATA[article title<br /><br /> article byline<br/><br/>text of article]]></description>
</item>
</channel>
</rss>
<!--
Description: item description ends with <br />
Expect:      not bozo and entries[0]['description'] == u'<b>x</b><br />'
-->
<rss version="2.0">
<channel>
<item>
<link>http://www.example.com/</link>
<description>&lt;b&gt;x&lt;/b&gt;&lt;br/&gt;</description>
</item>
</channel>
</rss>

<!--
Description: item description contains <code> with <br />
Expect:      not bozo and entries[0]['description'] == u'<code>&lt;br /></code>'
-->
<rss version="2.0">
<channel>
<item>
<link>http://www.example.com/</link>
<description><![CDATA[<code>&lt;br /></code>]]></description>
</item>
</channel>
</rss>

<!--
Description: escaped markup in item description
Expect:      not bozo and entries[0]['description'] == u'<p>Example description</p>'
-->
<rss version="2.0">
<channel>
<item>
<description>&lt;p&gt;Example description&lt;/p&gt;</description>
</item>
</channel>
</rss>
<!--
Description: item description is mapped to summary
Expect:      not bozo and entries[0]['summary'] == u'Example description'
-->
<rss version="2.0">
<channel>
<item>
<description>Example description</description>
</item>
</channel>
</rss>
<!--
Description: naked markup in item description
Expect:      not bozo and entries[0]['description'] == u'<p>Example description</p>'
-->
<rss version="2.0">
<channel>
<item>
<description><p>Example description</p></description>
</item>
</channel>
</rss>
<!--
Description: item description is not a DOCTYPE (but HTML parser thinks it is)
Expect:      not bozo and entries[0]['description'] == """&lt;!' <a href="foo">"""
-->
<rss>
<item>
<description>&lt;!' &lt;a href="foo"&gt;</description>
</item>
</rss>
<!--
Description: item description is not a DOCTYPE (but HTML parser thinks it is)
Expect:      not bozo and entries[0]['description'] == "<!DOCTYPE"
-->
<rss>
<item>
<description><![CDATA[ <!DOCTYPE ]]></description>
</item>
</rss>

<!--
Description: item contains both summary and description elements
Expect:      not bozo and entries[0]['summary'] == u'Example summary' and entries[0]['content'][0]['value'] == u'Example description'
-->
<rss version="2.0">
<channel>
<item>
<summary>Example summary</summary>
<description>Example description</description>
</item>
</channel>
</rss>
<!--
Description: entry summary contains script (maps to description)
Expect:      not bozo and entries[0]['description'] == u'safe description'
-->
<feed version="0.3" xmlns="http://purl.org/atom/ns#">
<entry>
<summary type="text/html" mode="escaped">safe&lt;script type="text/javascript">location.href='http:/'+'/example.com/';&lt;/script> description</summary>
</entry>
</feed>
<!--
Description: feed tagline contains script (maps to description)
Expect:      not bozo and feed['description'] == u'safe description'
-->
<feed version="0.3" xmlns="http://purl.org/atom/ns#">
<tagline type="text/html" mode="escaped">safe&lt;script type="text/javascript">location.href='http:/'+'/example.com/';&lt;/script> description</tagline>
</feed>
<!--
Description: item description contains applet
Expect:      not bozo and entries[0]['description'] == u'safe description'
-->
<rss version="2.0">
<channel>
<item>
<description>safe&lt;applet code="foo.class" codebase="http://example.com/">&lt;/applet> description</description>
</item>
</channel>
</rss>
<!--
Description: item description contains blink
Expect:      not bozo and entries[0]['description'] == u'safe description'
-->
<rss version="2.0">
<channel>
<item>
<description>&lt;blink>safe&lt;/blink> description</description>
</item>
</channel>
</rss>
<!--
Description: item description is crazy
Expect:      not bozo and entries[0]['description'] == u'Crazy HTML -' + u'- Can Your Regex Parse This?\n\n\n\n<!-' + u'- <script> -' + u'->\n\n<!-' + u'- \n\t<script> \n-' + u'->\n\n\n\nfunction executeMe()\n{\n\n\n\n\n/* \n<h1>Did The Javascript Execute?</h1>\n<div>\nI will execute here, too, if you mouse over me\n</div>'
-->
<rss version="2.0">
<channel>
<title>Crazy RSS</title>
<description>Contains unsafe script</description>
<link>http://crazy.example.com/</link>
<language>en</language>
<item>
<description>
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

&lt;html xmlns="http://www.w3.org/1999/xhtml">
&lt;head>
&lt;title>Crazy HTML -- Can Your Regex Parse This?&lt;/title>

&lt;/head>
&lt;body    notRealAttribute="value"onload="executeMe();"foo="bar"

>
&lt;!-- &lt;script> -->

&lt;!-- 
	&lt;script> 
-->

&lt;/script>


&lt;script


>

function executeMe()
{




/* &lt;script> 
function am_i_javascript()
{
	var str = "Some innocuously commented out stuff";
}
&lt; /script>
*/

	
	
	
	
	
	
	
	
	alert("Executed");
}

                                   &lt;/script



>
&lt;h1>Did The Javascript Execute?&lt;/h1>
&lt;div notRealAttribute="value
"onmouseover="
executeMe();
"foo="bar">
I will execute here, too, if you mouse over me
&lt;/div>

&lt;/body>

&lt;/html>
</description>
</item>
</channel>
</rss>
<!--
Description: item description contains embed
Expect:      not bozo and entries[0]['description'] == u'safe description'
-->
<rss version="2.0">
<channel>
<item>
<description>safe&lt;embed src="http://example.com/"> description</description>
</item>
</channel>
</rss>
<!--
Description: item description contains frame
Expect:      not bozo and entries[0]['description'] == u'safe description'
-->
<rss version="2.0">
<channel>
<item>
<description>safe&lt;frameset rows="*">&lt;frame src="http://example.com/">&lt;/frameset> description</description>
</item>
</channel>
</rss>
<!--
Description: item description contains iframe
Expect:      not bozo and entries[0]['description'] == u'safe description'
-->
<rss version="2.0">
<channel>
<item>
<description>safe&lt;iframe src="http://example.com/"/> description</description>
</item>
</channel>
</rss>
<!--
Description: item description contains link
Expect:      not bozo and entries[0]['description'] == u'safe description'
-->
<rss version="2.0">
<channel>
<item>
<description>safe&lt;link rel="stylesheet" type="text/css" href="http://example.com/evil.css"> description</description>
</item>
</channel>
</rss>
<!--
Description: item description contains meta
Expect:      not bozo and entries[0]['description'] == u'safe description'
-->
<rss version="2.0">
<channel>
<item>
<description>safe&lt;meta http-equiv="Refresh" content="0; URL=http://example.com/"> description</description>
</item>
</channel>
</rss>
<!--
Description: item description contains object
Expect:      not bozo and entries[0]['description'] == u'safe description'
-->
<rss version="2.0">
<channel>
<item>
<description>safe&lt;object classid="clsid:C932BA85-4374-101B-A56C-00AA003668DC"> description</description>
</item>
</channel>
</rss>
<!--
Description: item description contains onabort
Expect:      not bozo and entries[0]['description'] == u'<img src="http://www.ragingplatypus.com/i/cam-full.jpg" />'
-->
<rss version="2.0">
<channel>
<item>
<description>&lt;img src="http://www.ragingplatypus.com/i/cam-full.jpg" onabort="location.href='http://www.ragingplatypus.com/';" /></description>
</item>
</channel>
</rss>
<!--
Description: item description contains onblur
Expect:      not bozo and entries[0]['description'] == u'<img src="http://www.ragingplatypus.com/i/cam-full.jpg" />'
-->
<rss version="2.0">
<channel>
<item>
<description>&lt;img src="http://www.ragingplatypus.com/i/cam-full.jpg" onblur="location.href='http://www.ragingplatypus.com/';" /></description>
</item>
</channel>
</rss>
<!--
Description: item description contains onchange
Expect:      not bozo and entries[0]['description'] == u'<img src="http://www.ragingplatypus.com/i/cam-full.jpg" />'
-->
<rss version="2.0">
<channel>
<item>
<description>&lt;img src="http://www.ragingplatypus.com/i/cam-full.jpg" onchange="location.href='http://www.ragingplatypus.com/';" /></description>
</item>
</channel>
</rss>
<!--
Description: item description contains onclick
Expect:      not bozo and entries[0]['description'] == u'<img src="http://www.ragingplatypus.com/i/cam-full.jpg" />'
-->
<rss version="2.0">
<channel>
<item>
<description>&lt;img src="http://www.ragingplatypus.com/i/cam-full.jpg" onclick="location.href='http://www.ragingplatypus.com/';" /></description>
</item>
</channel>
</rss>
<!--
Description: item description contains ondblclick
Expect:      not bozo and entries[0]['description'] == u'<img src="http://www.ragingplatypus.com/i/cam-full.jpg" />'
-->
<rss version="2.0">
<channel>
<item>
<description>&lt;img src="http://www.ragingplatypus.com/i/cam-full.jpg" ondblclick="location.href='http://www.ragingplatypus.com/';" /></description>
</item>
</channel>
</rss>
<!--
Description: item description contains onerror
Expect:      not bozo and entries[0]['description'] == u'<img src="http://www.ragingplatypus.com/i/cam-full.jpg" />'
-->
<rss version="2.0">
<channel>
<item>
<description>&lt;img src="http://www.ragingplatypus.com/i/cam-full.jpg" onerror="location.href='http://www.ragingplatypus.com/';" /></description>
</item>
</channel>
</rss>
<!--
Description: item description contains onfocus
Expect:      not bozo and entries[0]['description'] == u'<img src="http://www.ragingplatypus.com/i/cam-full.jpg" />'
-->
<rss version="2.0">
<channel>
<item>
<description>&lt;img src="http://www.ragingplatypus.com/i/cam-full.jpg" onfocus="location.href='http://www.ragingplatypus.com/';" /></description>
</item>
</channel>
</rss>
<!--
Description: item description contains onkeydown
Expect:      not bozo and entries[0]['description'] == u'<img src="http://www.ragingplatypus.com/i/cam-full.jpg" />'
-->
<rss version="2.0">
<channel>
<item>
<description>&lt;img src="http://www.ragingplatypus.com/i/cam-full.jpg" onkeydown="location.href='http://www.ragingplatypus.com/';" /></description>
</item>
</channel>
</rss>
<!--
Description: item description contains onkeypress
Expect:      not bozo and entries[0]['description'] == u'<img src="http://www.ragingplatypus.com/i/cam-full.jpg" />'
-->
<rss version="2.0">
<channel>
<item>
<description>&lt;img src="http://www.ragingplatypus.com/i/cam-full.jpg" onkeypress="location.href='http://www.ragingplatypus.com/';" /></description>
</item>
</channel>
</rss>
<!--
Description: item description contains onkeyup
Expect:      not bozo and entries[0]['description'] == u'<img src="http://www.ragingplatypus.com/i/cam-full.jpg" />'
-->
<rss version="2.0">
<channel>
<item>
<description>&lt;img src="http://www.ragingplatypus.com/i/cam-full.jpg" onkeyup="location.href='http://www.ragingplatypus.com/';" /></description>
</item>
</channel>
</rss>
<!--
Description: item description contains onload
Expect:      not bozo and entries[0]['description'] == u'<img src="http://www.ragingplatypus.com/i/cam-full.jpg" />'
-->
<rss version="2.0">
<channel>
<item>
<description>&lt;img src="http://www.ragingplatypus.com/i/cam-full.jpg" onload="location.href='http://www.ragingplatypus.com/';" /></description>
</item>
</channel>
</rss>
<!--
Description: item description contains onmousedown
Expect:      not bozo and entries[0]['description'] == u'<img src="http://www.ragingplatypus.com/i/cam-full.jpg" />'
-->
<rss version="2.0">
<channel>
<item>
<description>&lt;img src="http://www.ragingplatypus.com/i/cam-full.jpg" onmousedown="location.href='http://www.ragingplatypus.com/';" /></description>
</item>
</channel>
</rss>
<!--
Description: item description contains onmouseout
Expect:      not bozo and entries[0]['description'] == u'<img src="http://www.ragingplatypus.com/i/cam-full.jpg" />'
-->
<rss version="2.0">
<channel>
<item>
<description>&lt;img src="http://www.ragingplatypus.com/i/cam-full.jpg" onmouseout="location.href='http://www.ragingplatypus.com/';" /></description>
</item>
</channel>
</rss>
<!--
Description: item description contains onmouseover
Expect:      not bozo and entries[0]['description'] == u'<img src="http://www.ragingplatypus.com/i/cam-full.jpg" />'
-->
<rss version="2.0">
<channel>
<item>
<description>&lt;img src="http://www.ragingplatypus.com/i/cam-full.jpg" onmouseover="location.href='http://www.ragingplatypus.com/';" /></description>
</item>
</channel>
</rss>
<!--
Description: item description contains onmouseup
Expect:      not bozo and entries[0]['description'] == u'<img src="http://www.ragingplatypus.com/i/cam-full.jpg" />'
-->
<rss version="2.0">
<channel>
<item>
<description>&lt;img src="http://www.ragingplatypus.com/i/cam-full.jpg" onmouseup="location.href='http://www.ragingplatypus.com/';" /></description>
</item>
</channel>
</rss>
<!--
Description: item description contains onreset
Expect:      not bozo and entries[0]['description'] == u'<img src="http://www.ragingplatypus.com/i/cam-full.jpg" />'
-->
<rss version="2.0">
<channel>
<item>
<description>&lt;img src="http://www.ragingplatypus.com/i/cam-full.jpg" onreset="location.href='http://www.ragingplatypus.com/';" /></description>
</item>
</channel>
</rss>
<!--
Description: item description contains onresize
Expect:      not bozo and entries[0]['description'] == u'<img src="http://www.ragingplatypus.com/i/cam-full.jpg" />'
-->
<rss version="2.0">
<channel>
<item>
<description>&lt;img src="http://www.ragingplatypus.com/i/cam-full.jpg" onresize="location.href='http://www.ragingplatypus.com/';" /></description>
</item>
</channel>
</rss>
<!--
Description: item description contains onsubmit
Expect:      not bozo and entries[0]['description'] == u'<img src="http://www.ragingplatypus.com/i/cam-full.jpg" />'
-->
<rss version="2.0">
<channel>
<item>
<description>&lt;img src="http://www.ragingplatypus.com/i/cam-full.jpg" onsubmit="location.href='http://www.ragingplatypus.com/';" /></description>
</item>
</channel>
</rss>
<!--
Description: item description contains onunload
Expect:      not bozo and entries[0]['description'] == u'<img src="http://www.ragingplatypus.com/i/cam-full.jpg" />'
-->
<rss version="2.0">
<channel>
<item>
<description>&lt;img src="http://www.ragingplatypus.com/i/cam-full.jpg" onunload="location.href='http://www.ragingplatypus.com/';" /></description>
</item>
</channel>
</rss>
<!--
Description: item description contains script
Expect:      not bozo and entries[0]['description'] == u'safe description'
-->
<rss version="2.0">
<channel>
<item>
<description>safe&lt;script type="text/javascript">location.href='http:/'+'/example.com/';&lt;/script> description</description>
</item>
</channel>
</rss>
<!--
Description: item description contains script
Expect:      not bozo and entries[0]['description'] == u'safe description'
-->
<rss version="2.0">
<channel>
<item>
<description><![CDATA[safe<script type="text/javascript">location.href='http:/'+'/example.com/';</script> description]]></description>
</item>
</channel>
</rss>
<!--
Description: item description contains script (maps to content)
Expect:      not bozo and entries[0]['summary'] == u'safe description'
-->
<rss version="2.0">
<channel>
<item>
<description>safe&lt;script type="text/javascript">location.href='http:/'+'/example.com/';&lt;/script> description</description>
</item>
</channel>
</rss>
<!--
Description: item description contains style
Expect:      not bozo and entries[0]['description'] == u'<a href="http://www.ragingplatypus.com/" style="display: block; width: 100%; height: 100%; background-color: black; background-x: center; background-y: center;">never trust your upstream platypus</a>'
-->
<rss version="2.0">
<channel>
<item>
<description>&lt;a href="http://www.ragingplatypus.com/" style="display:block; position:absolute; left:0; top:0; width:100%; height:100%; z-index:1; background-color:black; background-image:url(http://www.ragingplatypus.com/i/cam-full.jpg); background-x:center; background-y:center; background-repeat:repeat;">never trust your upstream platypus&lt;/a></description>
</item>
</channel>
</rss>
If you are planning to submit a pull request to requests with any changes in 
this library do not go any further. These are independent libraries which we 
vendor into requests. Any changes necessary to these libraries must be made in 
them and submitted as separate pull requests to those libraries.

urllib3 pull requests go here: https://github.com/shazow/urllib3

chardet pull requests go here: https://github.com/chardet/chardet

# `tvdb_api`

`tvdb_api` is an easy to use interface to [thetvdb.com][tvdb]

`tvnamer` has moved to a separate repository: [github.com/dbr/tvnamer][tvnamer] - it is a utility which uses `tvdb_api` to rename files from `some.show.s01e03.blah.abc.avi` to `Some Show - [01x03] - The Episode Name.avi` (which works by getting the episode name from `tvdb_api`)

[![Build Status](https://secure.travis-ci.org/dbr/tvdb_api.png?branch=master)](http://travis-ci.org/dbr/tvdb_api)

## To install

You can easily install `tvdb_api` via `easy_install`

    easy_install tvdb_api

You may need to use sudo, depending on your setup:

    sudo easy_install tvdb_api

The [`tvnamer`][tvnamer] command-line tool can also be installed via `easy_install`, this installs `tvdb_api` as a dependancy:

    easy_install tvnamer


## Basic usage

    import tvdb_api
    t = indexerApi()
    episode = t['My Name Is Earl'][1][3] # get season 1, episode 3 of show
    print episode['episodename'] # Print episode name

## Advanced usage

Most of the documentation is in docstrings. The examples are tested (using doctest) so will always be up to date and working.

The docstring for `Tvdb.__init__` lists all initialisation arguments, including support for non-English searches, custom "Select Series" interfaces and enabling the retrieval of banners and extended actor information. You can also override the default API key using `apikey`, recommended if you're using `tvdb_api` in a larger script or application

### Exceptions

There are several exceptions you may catch, these can be imported from `tvdb_api`:

- `tvdb_error` - this is raised when there is an error communicating with [thetvdb.com][tvdb] (a network error most commonly)
- `tvdb_userabort` - raised when a user aborts the Select Series dialog (by `ctrl+c`, or entering `q`)
- `tvdb_shownotfound` - raised when `t['show name']` cannot find anything
- `tvdb_seasonnotfound` - raised when the requested series (`t['show name][99]`) does not exist
- `tvdb_episodenotfound` - raised when the requested episode (`t['show name][1][99]`) does not exist.
- `tvdb_attributenotfound` - raised when the requested attribute is not found (`t['show name']['an attribute']`, `t['show name'][1]['an attribute']`, or ``t['show name'][1][1]['an attribute']``)

### Series data

All data exposed by [thetvdb.com][tvdb] is accessible via the `Show` class. A Show is retrieved by doing..

    >>> import tvdb_api
    >>> t = indexerApi()
    >>> show = t['scrubs']
    >>> type(show)
    <class 'tvdb_api.Show'>

For example, to find out what network Scrubs is aired:

    >>> t['scrubs']['network']
    u'ABC'

The data is stored in an attribute named `data`, within the Show instance:

    >>> t['scrubs'].data.keys()
    ['networkid', 'rating', 'airs_dayofweek', 'contentrating', 'seriesname', 'id', 'airs_time', 'network', 'fanart', 'lastupdated', 'actors', 'ratingcount', 'status', 'added', 'poster', 'imdb_id', 'genre', 'banner', 'seriesid', 'language', 'zap2it_id', 'addedby', 'tms_wanted', 'firstaired', 'runtime', 'overview']

Although each element is also accessible via `t['scrubs']` for ease-of-use:

    >>> t['scrubs']['rating']
    u'9.0'

This is the recommended way of retrieving "one-off" data (for example, if you are only interested in "seriesname"). If you wish to iterate over all data, or check if a particular show has a specific piece of data, use the `data` attribute,

    >>> 'rating' in t['scrubs'].data
    True

### Banners and actors

Since banners and actors are separate XML files, retrieving them by default is undesirable. If you wish to retrieve banners (and other fanart), use the `banners` Tvdb initialisation argument:

    >>> from tvdb_api import Tvdb
    >>> t = Tvdb(banners = True)

Then access the data using a `Show`'s `_banner` key:

    >>> t['scrubs']['_banners'].keys()
    ['fanart', 'poster', 'series', 'season']

The banner data structure will be improved in future versions.

Extended actor data is accessible similarly:

    >>> t = Tvdb(actors = True)
    >>> actors = t['scrubs']['_actors']
    >>> actors[0]
    <Actor "Zach Braff">
    >>> actors[0].keys()
    ['sortorder', 'image', 'role', 'id', 'name']
    >>> actors[0]['role']
    u'Dr. John Michael "J.D." Dorian'

Remember a simple list of actors is accessible via the default Show data:

    >>> t['scrubs']['actors']
    u'|Zach Braff|Donald Faison|Sarah Chalke|Christa Miller|Aloma Wright|Robert Maschio|Sam Lloyd|Neil Flynn|Ken Jenkins|Judy Reyes|John C. McGinley|Travis Schuldt|Johnny Kastl|Heather Graham|Michael Mosley|Kerry Bish\xe9|Dave Franco|Eliza Coupe|'

[tvdb]: http://thetvdb.com
[tvnamer]: http://github.com/dbr/tvnamer

This is x64 version of unrar.dll.

SickRage - Failed Downloads
=====

*SickRage Failed Downloads is a fork from SickRage - ThePirateBay.*

Features added:

* Failed Download Handling (Tolstyak)
* User Interface Toggle for Failed Download Handling
* Treat directories where no video files were found as if they were failed downloads

SickRage - Failed Downloads is almost a direct copy of the following project:

* [SickRage - Tolstyak's branch][tolstyak]

These features can be enabled in the Post Processing Configuration menu.  It must be configured as specified below.

## The original readme from Tolstyak is:

The primary new feature of my branch is the handling of failed downloads.
If you're using SABnzbd, set the following options under Switches:

* Disable Abort jobs that cannot be completed
* Disable Post-Process Only Verified Jobs

And under Special:

* Enable empty_postproc

## Bugs

Report bugs in github

[tolstyak]: https://github.com/tolstyak/sick-beard

SickRage
=====

*SickRage  is currently in beta release stage. There may be severe bugs in it and at any given time it may not work at all.*

There are currently a lot of changes that we're working on, which affect the very core of how SickRage works. We're doing this to lay the groundwork
for making SickRage seriously more awesome, scalable and resource-friendly than it already is. We know it will be a bumpy ride, but we also know
that SickRage deserves to grow from a USENET grabber into a media independant grabber of anything TV show related. And beyond.
 
While we're doing this, please expect SickRage do strange things, or maybe even not work at all. In any case, we need your help. If you see SickRage behaving weird, check if someone has reported it, and if not, open a new issue. There is little to no use to report "software should be stable". We will focus on that later, not now.

SickRage is a PVR for torrent and newsgroup users. It watches for new episodes of your favorite shows and when they are posted it downloads them, sorts and renames them, and optionally generates metadata for them. It retrieves show information from theTVDB.com and TVRage.com.

!!! Please before using this with your existing database (sickbeard.db) please make a backup copy of it and delete any other database files such as cache.db and failed.db if present, we HIGHLY recommend starting out with no database files at all to make this a fresh start but the choice is at your own risk !!!

FEATURES:
- automatically retrieves new episode torrent or nzb files
- can scan your existing library and then download any old seasons or episodes you're missing
- can watch for better versions and upgrade your existing episodes (to from TV DVD/BluRay for example)
- XBMC library updates, poster/fanart downloads, and NFO/TBN generation
- configurable episode renaming
- sends NZBs directly to SABnzbd, prioritizes and categorizes them properly
- available for any platform, uses simple HTTP interface
- can notify XBMC, Growl, or Twitter when new episodes are downloaded
- specials and double episode support
- Automatic XEM Scene Numbering/Naming for seasons/episodes
- Failed handling now attempts to snatch a different release and excludes failed releases from future snatch attempts.
- Episode Status Manager now allows for mass failing seasons/episodes to force retrying to download new releases.
- DVD Order numbering for returning the results in DVD order instead of Air-By-Date order.
- Improved Failed handling code for both NZB and Torrent downloads.
- DupeKey/DupeScore for NZBGet 12+
- Searches both TheTVDB.com and TVRage.com for shows, seasons, episodes
- Importing of existing video files now allows you to choose which indexer you wish to have SickBeard download its show info from.
- Your tvshow.nfo files are now tagged with a indexer key so that SickBeard can easily tell if the shows info comes from TheTVDB or TVRage.
- Failed download handling has been improved now for both NZB and Torrents.
- Sports shows are now able to be searched for and downloaded by both NZB and Torrent providers.

## Dependencies

To run SickRage from source you will need Python 2.6+ and Cheetah 2.1.0+.

## Forums

Any questions or setup info your looking for can be found at out forums http://www.sickrage.tv
<br>
If you find a bug please report at our forums http://sickrage.tv/forums/forum/help-support/bug-issue-reports
<br>
Be sure to provide a sickrage log in debug mode where is the error evidence or it'll never get fixed.

