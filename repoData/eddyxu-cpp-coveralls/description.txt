Version 0.2.7 (May 24th, 2014)
  * Fixed a bug caused by debug info (#59 by eddyxu)

Version 0.2.6 (May 24th, 2014)
  * Allow to parse file through relative path (#58 by eddyxu)

Version 0.2.5 (May 19th, 2014)
  * Prevent cluttering gcov-options with local options (#53 by @ptomulik)

Version 0.2.4 (May 17th, 2014)
  * Combine multiple source files if they have the same path (#52 by @worktycho)

Version 0.2.3 (May 4th, 2014)
  * Fix source file path generation (#47 by sjaeckel)

Version 0.2.2 (May 2nd, 2014)
  * Fixed a source file path generation problem (#41 by @sjaeckel)
  * Enable testing on Python 3.4 (#44 by @myint)
  * Support trying multiple encodings (#45 by @myint)

Version 0.2.1 (April 23th, 2014)
  * Add more C++ extensions and ignore Mercurial directory. Also fix a FileNotFoundError (#39 by @bchretien)
  * Fix Git repository for report (use root directory). (#40 by @bchretien)

Version 0.2.0 (April 16th, 2014)
  * Remove `--use-mirrors` in README (#37 by @myint)
  * Move module name from coveralls to cpp_coveralls (avoid name clash with
	other languages' coverells script) (#38 by @anjos)

Version 0.1.7 (April 8th, 2014)
  * Added an alias `cpp-coveralls` to support using it for multiple languages. (#35)
  * Added `--dump` parameter to write JSON payload to output file instead of uploading to coveralls.(#35)

Version 0.1.6 (April 6th, 2014)
  * Added a `--dryrun` parameter (#36)
  * Fixed a typo in OS X instructions (#34 by @myint)

Version 0.1.5 (March 9th, 2014)
  * Respect "LCOV_EXCL_LINE" exclusions (#30 by @myint)
  * Added MacOSX special instructions in README (#27,#28 by @MartinDelille)
  * Fix file extension for `.c` file (#25 by @kt3k)

Version 0.1.4 (Jan 26th, 2014)
  * Support GNU Libtool (#23 by @kou)

Version 0.1.3 (Jan 19th, 2014)
  * Update USAGE in README.md
  * FIXED: Filter paths consistently for executed and unexecuted files. (#19,#20,#21 by @smspillaz)

Version 0.1.2 (Dec 7th, 2013)
  * Allow specifying encoding from command line (#17 by @myint)
  * Added `--repo-token` for consistency (#17 by @myint)
  * Format to follow PEP8 and use relative imports (#17 by @myint)

Version 0.1.1 (Dec 2nd, 2013)
  * Fixed unused argument (#16 by @myint)

Version 0.1.0 (Oct 21th, 2013)
  * Enable the use of a build directory and add access to gcov options (#14 by @nharraud)

Version 0.0.9 (Oct 1st, 2013)
  * Add `-n/--no-gcov` parameter to disable running `gcov` by coveralls (#13)
  * Add `-E/--exclude-pattern` to support use regular expression as exclude rules. (#12)

Version 0.0.8 (Sep 3th, 2013)
  * Skip '.libs' and '.deps' directories (#11 by @nijel)

Version 0.0.7 (Aug 06th, 2013)
  * Allow specifying which extensions should be considered as C/CPP files (#7 by @tbonfort)
  * Treat git output as UTF-8 (#9 by @czchen)

Version 0.0.6 (July 16th, 2013)
  * Adapt coverage.py script to work with cmake project (#5 by @meshell)

Upload C/C++ coverage report to coveralls.io
=============

[![PyPI version](https://badge.fury.io/py/cpp-coveralls.png)](http://badge.fury.io/py/cpp-coveralls) [![Build Status](https://travis-ci.org/eddyxu/cpp-coveralls.png?branch=master)](https://travis-ci.org/eddyxu/cpp-coveralls) [![Code Quality](https://landscape.io/github/eddyxu/cpp-coveralls/master/landscape.png)](https://landscape.io/github/eddyxu/cpp-coveralls/master)

Inspired from [z4r/python-coveralls](https://github.com/z4r/python-coveralls), it uploads the coverage report of C/C++ project to [coveralls.io](https://coveralls.io/)

# Instruction

 * Build your project with [gcov support](http://gcc.gnu.org/onlinedocs/gcc/Gcov.html)
 * Run tests
 * Run `coveralls`

## Usage:

```
$ coveralls -h
usage: coveralls [-h] [--verbose] [--dryrun] [--gcov FILE]
                 [--gcov-options GCOV_OPTS] [-r DIR] [-b DIR] [-e DIR|FILE]
                 [-E REGEXP] [-x EXT] [-y FILE] [-n] [-t TOKEN]
                 [--encodings ENCODINGS [ENCODINGS ...]] [--dump [FILE]]

optional arguments:
  -h, --help            show this help message and exit
  --verbose             print verbose messages
  --dryrun              run coveralls without uploading report
  --gcov FILE           set the location of gcov
  --gcov-options GCOV_OPTS
                        set the options given to gcov
  -r DIR, --root DIR    set the root directory
  -b DIR, --build-root DIR
                        set the directory from which gcov will be called; by
                        default gcov is run in the directory of the .o files;
                        however the paths of the sources are often relative to
                        the directory from which the compiler was run and
                        these relative paths are saved in the .o file; when
                        this happens, gcov needs to run in the same directory
                        as the compiler in order to find the source files
  -e DIR|FILE, --exclude DIR|FILE
                        set exclude file or directory
  -E REGEXP, --exclude-pattern REGEXP
                        set exclude file/directory pattern
  -x EXT, --extension EXT
                        set extension of files to process
  -y FILE, --coveralls-yaml FILE
                        coveralls yaml file name (default: .coveralls.yml)
  -n, --no-gcov         do not run gcov
  -t TOKEN, --repo-token TOKEN, --repo_token TOKEN
                        set the repo_token of this project
  --encodings ENCODINGS [ENCODINGS ...]
                        source encodings to try in order of preference
                        (default: ['utf-8', 'latin-1'])
  --dump [FILE]         dump JSON payload to a file
```

## Example `.travis.yml`

### Linux

Install `cpp-coveralls` with `pip`, add *gcov* to your compilation option, compile, run your test and send the result to http://coveralls.io :
```
language: cpp
compiler:
  - gcc
before_install:
  - sudo pip install cpp-coveralls
script:
  - ./configure --enable-gcov && make && make check
after_success:
  - coveralls --exclude lib --exclude tests
```

### OS X

*Python* on *OS X* can be a bit of a hassle so you need to install to set up your custom environment:

```
language: objective-c
compiler:
  - gcc
before_install:
  - brew update
  - brew install pyenv
  - eval "$(pyenv init -)"
  - pyenv install 2.7.6
  - pyenv global 2.7.6
  - pyenv rehash
  - pip install cpp-coveralls
  - pyenv rehash
script:
  - ./configure --enable-gcov && make && make check
after_success:
  - coveralls --exclude lib --exclude tests
```

