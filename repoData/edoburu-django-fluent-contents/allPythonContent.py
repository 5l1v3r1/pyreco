__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# django-fluent-contents documentation build configuration file, created by
# sphinx-quickstart on Wed Dec 21 15:06:42 2011.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
sys.path.insert(0, os.path.abspath('_ext'))
sys.path.insert(0, os.path.abspath('..'))
os.environ['DJANGO_SETTINGS_MODULE'] = 'djangodummy.settings'


# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.graphviz',
    'sphinx.ext.intersphinx',
    'djangoext.docstrings',
    'djangoext.roles',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'django-fluent-contents'
copyright = u'2011-2013, Diederik van der Boor'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '1.0a1'
# The full version, including alpha/beta/rc tags.
release = '1.0-dev'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'django-fluent-contentsdoc'


# -- Options for LaTeX output --------------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'django-fluent-contents.tex', u'django-fluent-contents Documentation',
   u'Diederik van der Boor', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'django-fluent-contents', u'django-fluent-contents Documentation',
     [u'Diederik van der Boor'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output ------------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'django-fluent-contents', u'django-fluent-contents Documentation',
   u'Diederik van der Boor', 'django-fluent-contents', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'


# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {
    'http://docs.python.org/': None,
    'https://docs.djangoproject.com/en/dev': 'https://docs.djangoproject.com/en/dev/_objects',
}

########NEW FILE########
__FILENAME__ = settings
# Settings file to allow parsing API documentation of Django modules,
# and provide defaults to use in the documentation.
#
# This file is placed in a subdirectory,
# so the docs root won't be detected by find_packages()

# Display sane URLs in the docs:
STATIC_URL = '/static/'

# Avoid error for missing the secret key
SECRET_KEY = 'docs'

########NEW FILE########
__FILENAME__ = docstrings
"""
Automatically mention all model fields as parameters in the model construction.
Based on http://djangosnippets.org/snippets/2533/
"""
from django.utils.html import strip_tags
from django.utils.encoding import force_unicode
import inspect


def improve_model_docstring(app, what, name, obj, options, lines):
    from django.db import models  # must be inside the function, to allow settings initialization first.

    if inspect.isclass(obj) and issubclass(obj, models.Model):
        for field in obj._meta._fields():
            help_text = strip_tags(force_unicode(field.help_text))
            verbose_name = force_unicode(field.verbose_name).capitalize()

            # Add parameter
            if help_text:
                lines.append(u':param %s: %s' % (field.attname, help_text))
            else:
                lines.append(u':param %s: %s' % (field.attname, verbose_name))

            # Add type
            if isinstance(field, models.ForeignKey):
                to = field.rel.to
                lines.append(u':type %s: %s to :class:`~%s.%s`' % (field.attname, type(field).__name__, to.__module__, to.__name__))
            else:
                lines.append(u':type %s: %s' % (field.attname, type(field).__name__))

    # Return the extended docstring
    return lines

# Allow this module to be used as sphinx extension:
def setup(app):
    # Generate docstrings for Django model fields
    # Register the docstring processor with sphinx
    app.connect('autodoc-process-docstring', improve_model_docstring)


########NEW FILE########
__FILENAME__ = roles
# Allow :django:setting:`SITE_ID` to work.

def setup(app):
    app.add_crossref_type(
        directivename = "setting",
        rolename = "setting",
        indextemplate = "pair: %s; setting",
    )

########NEW FILE########
__FILENAME__ = admin
from django.contrib import admin
from article.models import Article, ArticleTextItem
from fluent_contents.admin import PlaceholderFieldAdmin


class ArticleAdmin(PlaceholderFieldAdmin):
    prepopulated_fields = {'slug': ('title',)}

    fieldsets = (
        (None, {
            'fields': ('title', 'slug'),
        }),
        ("Contents", {
            'fields': ('content',),
            'classes': ('plugin-holder',),
        })
    )

admin.site.register(Article, ArticleAdmin)



# For debugging:

#class ArticleTextItemAdmin(admin.ModelAdmin):
#    list_display = ('text', 'parent')
#
#admin.site.register(ArticleTextItem, ArticleTextItemAdmin)

########NEW FILE########
__FILENAME__ = content_plugins
from article.models import ArticleTextItem
from fluent_contents.extensions import ContentPlugin, plugin_pool


class ArticleTextPlugin(ContentPlugin):
    name = "Text item"
    category = "Content plugins"
    model = ArticleTextItem
    render_template = "article/plugins/text.html"


plugin_pool.register(ArticleTextPlugin)

########NEW FILE########
__FILENAME__ = models
from django.core.urlresolvers import reverse
from django.db import models
from fluent_contents.models.fields import PlaceholderField, PlaceholderRelation, ContentItemRelation
from fluent_contents.models import ContentItem


class Article(models.Model):
    title = models.CharField("Title", max_length=200)
    slug = models.SlugField("Slug", unique=True)
    content = PlaceholderField("article_content")

    placeholder_set = PlaceholderRelation()
    contentitem_set = ContentItemRelation()

    class Meta:
        verbose_name = "Article"
        verbose_name_plural = "Articles"

    def __unicode__(self):
        return self.title

    def get_absolute_url(self):
        return reverse('article-details', kwargs={'slug': self.slug})


class ArticleTextItem(ContentItem):
    """
    This model can be placed on every placeholder field / page.
    """
    text = models.TextField("Text")

    class Meta:
        verbose_name = "Article text item"
        verbose_name_plural = "Article text items"

    def __unicode__(self):
        return self.text

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *
from article.views import ArticleDetailView

urlpatterns = patterns('',
    url(r'^(?P<slug>[^/]+)/$', ArticleDetailView.as_view(), name='article-details'),
)

########NEW FILE########
__FILENAME__ = views
from django.views.generic.detail import DetailView
from article.models import Article


class ArticleDetailView(DetailView):
    model = Article
    template_name = 'article/details.html'

########NEW FILE########
__FILENAME__ = manage
#!/usr/bin/env python
from django.core.management import execute_manager
import imp
try:
    imp.find_module('settings') # Assumed to be in the same directory.
except ImportError:
    import sys
    sys.stderr.write("Error: Can't find the file 'settings.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n" % __file__)
    sys.exit(1)

import settings

if __name__ == "__main__":
    execute_manager(settings)

########NEW FILE########
__FILENAME__ = settings
# Django settings for example project.
from os.path import join, dirname, realpath

# Add parent path,
# Allow starting the app without installing the module.
import sys
sys.path.insert(0, dirname(dirname(realpath(__file__))))

DEBUG = True
TEMPLATE_DEBUG = DEBUG

ADMINS = (
    # ('Your Name', 'your_email@example.com'),
)

MANAGERS = ADMINS

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': dirname(__file__) + '/demo.db',
    }
}

TIME_ZONE = 'Europe/Amsterdam'
LANGUAGE_CODE = 'en-us'
SITE_ID = 1

USE_I18N = True
USE_L10N = True

MEDIA_ROOT = join(dirname(__file__), "media")
MEDIA_URL = '/media/'
STATIC_ROOT = join(dirname(__file__), "static")
STATIC_URL = '/static/'

STATICFILES_DIRS = ()
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

# Make this unique, and don't share it with anybody.
SECRET_KEY = '-#@bi6bue%#1j)6+4b&#i0g-*xro@%f@_#zwv=2-g_@n3n_kj5'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
#     'django.template.loaders.eggs.Loader',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
)

TEMPLATE_CONTEXT_PROCESSORS = (
    'django.core.context_processors.i18n',
    'django.core.context_processors.media',
    'django.core.context_processors.request',
    'django.core.context_processors.static',
    'django.contrib.auth.context_processors.auth',
    'django.contrib.messages.context_processors.messages',
)

ROOT_URLCONF = 'urls'

TEMPLATE_DIRS = (
    join(dirname(__file__), "templates"),
)

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admin',
    'django.contrib.admindocs',

    'fluent_contents',
    'fluent_contents.plugins.code',
    'fluent_contents.plugins.commentsarea',
    #'fluent_contents.plugins.disquswidgets',
    #'fluent_contents.plugins.formdesignerlink',
    'fluent_contents.plugins.gist',
    'fluent_contents.plugins.googledocsviewer',
    'fluent_contents.plugins.iframe',
    'fluent_contents.plugins.markup',
    'fluent_contents.plugins.oembeditem',
    'fluent_contents.plugins.rawhtml',
    'fluent_contents.plugins.sharedcontent',
    'fluent_contents.plugins.text',
    'fluent_contents.plugins.twitterfeed',


    # Example app
    'article',

    # Example CMS:
    'mptt',
    'simplecms',
    'theme1',

    # Other apps
    'django.contrib.comments',  # should be below theme1
    'django_wysiwyg',
    #'disqus',
    #'form_designer',
    'tinymce',
)

SIMPLECMS_TEMPLATE_CHOICES = (
    ("theme1/pages/standard.html", "Standard"),
    ("theme1/pages/standard-twocols.html", "Two columns"),
)
SIMPLECMS_DEFAULT_TEMPLATE = SIMPLECMS_TEMPLATE_CHOICES[0][0]

DJANGO_WYSIWYG_FLAVOR = 'tinymce_advanced'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}

#DISQUS_API_KEY = ''
#DISQUS_WEBSITE_SHORTNAME = ''

########NEW FILE########
__FILENAME__ = admin
from django.conf.urls.defaults import patterns, url
from django.contrib import admin
from django.http import HttpResponse
from django.template.loader import get_template
from django.utils.safestring import mark_safe
from mptt.admin import MPTTModelAdmin
from fluent_contents.admin import PlaceholderEditorAdmin
from fluent_contents.analyzer import get_template_placeholder_data
from simplecms import appconfig
from simplecms.models import Page
import json


class PageAdmin(PlaceholderEditorAdmin, MPTTModelAdmin):
    """
    Administration screen for pages
    """

    # Some decoration for the list/edit changes
    # This is all quite standard stuff.

    list_display = ('title', 'slug', 'cached_url')
    prepopulated_fields = { 'slug': ('title',), }

    def cached_url(self, page):
        return mark_safe('<a href="{0}">{1}</a>'.format(page.get_absolute_url(), page._cached_url))

    cached_url.allow_tags = True



    # This is where the magic happens.
    # Tell the base class which tabs to create

    def get_placeholder_data(self, request, obj):
        template = self.get_page_template(obj)
        return get_template_placeholder_data(template)


    def get_page_template(self, obj):
        if not obj:
            # Add page. start with default
            return get_template(appconfig.SIMPLECMS_DEFAULT_TEMPLATE)
        else:
            # Change page, honor template of object.
            return get_template(obj.template_name or appconfig.SIMPLECMS_DEFAULT_TEMPLATE)



    # Allow template layout changes in the client,
    # showing more power of the JavaScript engine.

    change_form_template = "admin/simplecms/page/change_form.html"

    class Media:
        js = ('simplecms/admin/simplecms_layouts.js',)


    def get_urls(self):
        """
        Introduce more urls
        """
        urls = super(PageAdmin, self).get_urls()
        my_urls = patterns('',
            url(r'^get_layout/$', self.admin_site.admin_view(self.get_layout_view))
        )
        return my_urls + urls


    def get_layout_view(self, request):
        """
        Return the metadata about a layout
        """
        template_name = request.GET['name']

        # Check if template is allowed, avoid parsing random templates
        templates = dict(appconfig.SIMPLECMS_TEMPLATE_CHOICES)
        if not templates.has_key(template_name):
            json = {'success': False, 'error': 'Template not found'}
            status = 404
        else:
            # Extract placeholders from the template, and pass to the client.
            template = get_template(template_name)
            placeholders = get_template_placeholder_data(template)

            json = {
                'placeholders': [p.as_dict() for p in placeholders],
            }
            status = 200

        jsonstr = json.dumps(json)
        return HttpResponse(jsonstr, content_type='application/json', status=status)



admin.site.register(Page, PageAdmin)

########NEW FILE########
__FILENAME__ = appconfig
from django.conf import settings
from django.core.exceptions import ImproperlyConfigured

SIMPLECMS_TEMPLATE_CHOICES = getattr(settings, "SIMPLECMS_TEMPLATE_CHOICES", ())
SIMPLECMS_DEFAULT_TEMPLATE = getattr(settings, "SIMPLECMS_DEFAULT_TEMPLATE", SIMPLECMS_TEMPLATE_CHOICES[0][0] if SIMPLECMS_TEMPLATE_CHOICES else None)


if not SIMPLECMS_TEMPLATE_CHOICES:
    raise ImproperlyConfigured("The 'SIMPLECMS_TEMPLATE_CHOICES' variable is not set!")

if not SIMPLECMS_DEFAULT_TEMPLATE:
    raise ImproperlyConfigured("The 'SIMPLECMS_DEFAULT_TEMPLATE' variable is not set!")

########NEW FILE########
__FILENAME__ = models
from django.core.urlresolvers import reverse
from django.db import models
from django.db.transaction import commit_on_success
from fluent_contents.models import PlaceholderRelation, ContentItemRelation
from mptt.models import MPTTModel
from simplecms import appconfig


class Page(MPTTModel):
    title = models.CharField("Title", max_length=200)

    # The basic fields to make the url structure work:
    slug = models.SlugField("Slug")
    parent = models.ForeignKey('self', related_name='children', blank=True, null=True)
    _cached_url = models.CharField(max_length=300, blank=True, editable=False, default='', db_index=True)

    # Allow different layouts
    template_name = models.CharField("Layout", max_length=255, choices=appconfig.SIMPLECMS_TEMPLATE_CHOICES, default=appconfig.SIMPLECMS_DEFAULT_TEMPLATE)

    # Accessing the data of django-fluent-contents
    placeholder_set = PlaceholderRelation()
    contentitem_set = ContentItemRelation()

    class Meta:
        verbose_name = "Page"
        verbose_name_plural = "Pages"

    def __unicode__(self):
        return self.title


    def get_absolute_url(self):
        # cached_url always points to the URL within the URL config root.
        # when the application is mounted at a subfolder, or the 'cms.urls' config
        # is included at a sublevel, it needs to be prepended.
        root = reverse('simplecms-page').rstrip('/')
        return root + self._cached_url


    # ---- updating _cached_url:

    # This block of code is largely inspired and based on FeinCMS
    # (c) Matthias Kestenholz, BSD licensed

    def __init__(self, *args, **kwargs):
        super(Page, self).__init__(*args, **kwargs)
        self._original_cached_url = self._cached_url


    # This code runs in a transaction since it's potentially editing a lot of records (all decendant urls).
    @commit_on_success
    def save(self, *args, **kwargs):
        """
        Save the model, and update caches.
        """
        # Store this object
        self._make_slug_unique()
        self._update_cached_url()
        super(Page, self).save(*args, **kwargs)

        # Update others
        self._update_decendant_urls()
        return super(Page, self).save(*args, **kwargs)


    # Following of the principles for "clean code"
    # the save() method is split in the 3 methods below,
    # each "do one thing, and only one thing".

    def _make_slug_unique(self):
        """
        Check for duplicate slugs at the same level, and make the current object unique.
        """
        origslug = self.slug
        dupnr = 1
        while True:
            others = Page.objects.filter(parent=self.parent, slug=self.slug)
            if self.pk:
                others = others.exclude(pk=self.pk)

            if not others.count():
                break

            dupnr += 1
            self.slug = "%s-%d" % (origslug, dupnr)


    def _update_cached_url(self):
        """
        Update the URLs
        """
        # determine own URL
        if self.is_root_node():
            self._cached_url = u'/%s/' % self.slug
        else:
            self._cached_url = u'%s%s/' % (self.parent._cached_url, self.slug)


    def _update_decendant_urls(self):
        """
        Update the URLs of all decendant pages.
        """
        # Performance optimisation: avoid traversing and updating many records
        # when nothing changed in the URL.
        if self._cached_url == self._original_cached_url:
            return

        # Keep cache
        cached_page_urls = {self.id: self._cached_url}

        # Update all sub objects
        subobjects = self.get_descendants().order_by('lft')
        for subobject in subobjects:
            # Set URL, using cache for parent URL.
            subobject._cached_url = u'%s%s/' % (cached_page_urls[subobject.parent_id], subobject.slug)
            cached_page_urls[subobject.id] = subobject._cached_url

            # call base class, do not recurse
            super(Page, subobject).save()

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *

urlpatterns = patterns('simplecms.views',
    url(r'^$|^(?P<path>.*/)$', 'page_detail', name='simplecms-page')
)

########NEW FILE########
__FILENAME__ = views
from django.http import Http404
from django.shortcuts import render_to_response
from django.template.context import RequestContext
from simplecms.models import Page


def page_detail(request, path):
    stripped = path.strip('/') if path else ''
    stripped = stripped and u'/%s/' % stripped or '/'

    try:
        page = Page.objects.get(_cached_url=stripped)
    except Page.DoesNotExist:
        raise Http404("No page found for the path '%s'" % stripped)

    return render_to_response(page.template_name, {
        'simplecms_page': page,
    }, context_instance=RequestContext(request))

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import patterns, include, url
from django.contrib import admin
admin.autodiscover()

urlpatterns = patterns('',
    url(r'^admin/doc/', include('django.contrib.admindocs.urls')),
    url(r'^admin/apps/tinymce/', include('tinymce.urls')),
    url(r'^admin/', include(admin.site.urls)),

    url(r'^comments/', include('django.contrib.comments.urls')),
    #url(r'^forms/', include('form_designer.urls')),

    url(r'^articles/', include('article.urls')),
    url(r'', include('simplecms.urls')),
)

########NEW FILE########
__FILENAME__ = contentitems
from django.contrib.contenttypes.generic import BaseGenericInlineFormSet, GenericInlineModelAdmin
from django.contrib.contenttypes.models import ContentType
from fluent_contents import extensions, appsettings
from fluent_contents.forms import ContentItemForm
from fluent_contents.models import Placeholder, get_parent_language_code


class BaseContentItemFormSet(BaseGenericInlineFormSet):
    """
    Correctly save placeholder fields.
    """
    def __init__(self, *args, **kwargs):
        instance = kwargs['instance']
        if instance:
            self.current_language = get_parent_language_code(instance)
            if self.current_language:
                kwargs['queryset'] = kwargs['queryset'].filter(language_code=self.current_language)
        else:
            self.current_language = appsettings.FLUENT_CONTENTS_DEFAULT_LANGUAGE_CODE

        super(BaseContentItemFormSet, self).__init__(*args, **kwargs)
        self._deleted_placeholders = ()  # internal property, set by PlaceholderEditorAdmin


    def save_new(self, form, commit=True):
        # This is the moment to link the form 'placeholder_slot' field to a placeholder..
        # Notice that the PlaceholderEditorInline needs to be included before any ContentItemInline,
        # so it creates the Placeholder just before the ContentItem models are saved.
        #
        # In Django 1.3:
        # The save_new() function does not call form.save(), but constructs the model itself.
        # This allows it to insert the parent relation (ct_field / ct_fk_field) since they don't exist in the form.
        # It then calls form.cleaned_data to get all values, and use Field.save_form_data() to store them in the model instance.
        self._set_placeholder_id(form)

        # As save_new() completely circumvents form.save(), have to insert the language code here.
        instance = super(BaseContentItemFormSet, self).save_new(form, commit=False)
        instance.language_code = self.current_language

        if commit:
            instance.save()
            form.save_m2m()

        return instance


    def save_existing(self, form, instance, commit=True):
        if commit:
            self._set_placeholder_id(form)
        return form.save(commit=commit)


    def _set_placeholder_id(self, form):
        # If the slot is given, it overwrites whatever placeholder is selected.
        form_slot = form.cleaned_data['placeholder_slot']
        if form_slot:
            form_placeholder = form.cleaned_data['placeholder']   # could already be updated, or still point to previous placeholder.

            if not form_placeholder or form_placeholder.slot != form_slot:
                desired_placeholder = Placeholder.objects.get(
                    slot=form_slot,
                    parent_type=ContentType.objects.get_for_model(self.instance),
                    parent_id=self.instance.id
                )

                form.cleaned_data['placeholder'] = desired_placeholder
                form.instance.placeholder = desired_placeholder

            elif form.instance.placeholder_id in self._deleted_placeholders:
                # ContentItem was in a deleted placeholder, and gets orphaned.
                form.cleaned_data['placeholder'] = None
                form.instance.placeholder = None


    @classmethod
    def get_default_prefix(cls):
        # Make output less verbose, easier to read, and less kB to transmit.
        opts = cls.model._meta
        return opts.object_name.lower()

    @property
    def type_name(self):
        """
        Return the classname of the model, this is mainly provided for templates.
        """
        return self.model.__name__


class BaseContentItemInline(GenericInlineModelAdmin):
    """
    The ``InlineModelAdmin`` class used for all content items.
    """
    # inline settings
    ct_field = "parent_type"
    ct_fk_field = "parent_id"
    formset = BaseContentItemFormSet
    form = ContentItemForm
    exclude = ('contentitem_ptr',)    # Fix django-polymorphic
    extra = 0
    ordering = ('sort_order',)
    template = 'admin/fluent_contents/contentitem/inline_container.html'
    is_fluent_editor_inline = True  # Allow admin templates to filter the inlines

    # overwritten by subtype
    name = None
    plugin = None
    extra_fieldsets = None
    type_name = None
    cp_admin_form_template = None
    cp_admin_init_template = None

    # Extra settings
    base_fields = ('placeholder', 'placeholder_slot', 'sort_order',)  # base fields in ContentItemForm


    def __init__(self, *args, **kwargs):
        super(BaseContentItemInline, self).__init__(*args, **kwargs)
        self.verbose_name_plural = u'---- ContentItem Inline: %s' % (self.verbose_name_plural,)


    @property
    def media(self):
        media = super(BaseContentItemInline, self).media
        if self.plugin:
            media += self.plugin.media  # form fields first, plugin afterwards
        return media


    def get_fieldsets(self, request, obj=None):
        # If subclass declares fieldsets, this is respected
        if not self.extra_fieldsets or self.declared_fieldsets:
            return super(BaseContentItemInline, self).get_fieldsets(request, obj)

        return ((None, {'fields': self.base_fields}),) + self.extra_fieldsets


    def formfield_for_dbfield(self, db_field, **kwargs):
        # Allow to use formfield_overrides using a fieldname too.
        # Avoids the major need to reroute formfield_for_dbfield() via the plugin.
        try:
            attrs = self.formfield_overrides[db_field.name]
            kwargs = dict(attrs, **kwargs)
        except KeyError:
            pass
        return super(BaseContentItemInline, self).formfield_for_dbfield(db_field, **kwargs)



def get_content_item_inlines(plugins=None, base=BaseContentItemInline):
    """
    Dynamically generate genuine django inlines for all registered content item types.
    When the `plugins` parameter is ``None``, all plugin inlines are returned.
    """
    COPY_FIELDS = (
        'form', 'raw_id_fields', 'filter_vertical', 'filter_horizontal',
        'radio_fields', 'prepopulated_fields', 'formfield_overrides', 'readonly_fields',
    )
    if plugins is None:
        plugins = extensions.plugin_pool.get_plugins()

    inlines = []
    for plugin in plugins:  # self.model._supported_...()
        # Avoid errors that are hard to trace
        if not isinstance(plugin, extensions.ContentPlugin):
            raise TypeError("get_content_item_inlines() expects to receive ContentPlugin instances, not {0}".format(plugin))

        ContentItemType = plugin.model

        # Create a new Type that inherits CmsPageItemInline
        # Read the static fields of the ItemType to override default appearance.
        # This code is based on FeinCMS, (c) Simon Meers, BSD licensed
        class_name = '%s_AutoInline' %  ContentItemType.__name__
        attrs = {
            '__module__': plugin.__class__.__module__,
            'model': ContentItemType,

            # Add metadata properties for template
            'name': plugin.verbose_name,
            'plugin': plugin,
            'type_name': plugin.type_name,
            'extra_fieldsets': plugin.fieldsets,
            'cp_admin_form_template': plugin.admin_form_template,
            'cp_admin_init_template': plugin.admin_init_template,
        }

        # Copy a restricted set of admin fields to the inline model too.
        for name in COPY_FIELDS:
            if getattr(plugin, name):
                attrs[name] = getattr(plugin, name)

        inlines.append(type(class_name, (base,), attrs))

    # For consistency, enforce ordering
    inlines.sort(key=lambda inline: inline.name.lower())

    return inlines

########NEW FILE########
__FILENAME__ = genericextensions
from django.contrib.contenttypes.generic import BaseGenericInlineFormSet
from django.contrib.contenttypes.models import ContentType
from django.core.exceptions import ValidationError
from django.forms.formsets import ManagementForm


class BaseInitialGenericInlineFormSet(BaseGenericInlineFormSet):
    """
    A formset that can take initial values, and pass those to the generated forms.
    """
    # Based on http://stackoverflow.com/questions/442040/pre-populate-an-inline-formset/3766344#3766344

    def __init__(self, *args, **kwargs):
        """
        Grabs the curried initial values and stores them into a 'private' variable.
        """
        # This instance is created each time in the change_view() function.
        self._initial = kwargs.pop('initial', [])
        super(BaseInitialGenericInlineFormSet, self).__init__(*args, **kwargs)


    @property
    def management_form(self):
        try:
            return super(BaseInitialGenericInlineFormSet, self).management_form
        except ValidationError:
            # Provide with better description of what is happening.
            form = ManagementForm(self.data, auto_id=self.auto_id, prefix=self.prefix)
            if not form.is_valid():
                raise ValidationError(
                    u'ManagementForm data is missing or has been tampered with.'
                    u' form: {0}, model: {1}, errors: \n{2}'.format(
                        self.__class__.__name__, self.model.__name__,
                        form.errors.as_text()
                ))
            else:
                raise


    def initial_form_count(self):
        if self.is_bound:
            return super(BaseInitialGenericInlineFormSet, self).initial_form_count()
        else:
            return len(self.get_queryset())

    def total_form_count(self):
        if self.is_bound:
            return super(BaseInitialGenericInlineFormSet, self).total_form_count()
        else:
            return max(len(self.get_queryset()), len(self._initial)) + self.extra

    def _construct_form(self, i, **kwargs):
        if self._initial and not kwargs.get('instance', None):
            instance = None
            try:
                # Editing existing object. Make sure the ID is passed.
                instance = self.get_queryset()[i]
            except IndexError:
                try:
                    # Adding new object, pass initial values
                    # TODO: initial should be connected to proper instance ordering.
                    # currently this works, because the client handles all details for layout switching.
                    values = self._initial[i]
                    values[self.ct_field.name] = ContentType.objects.get_for_model(self.instance)
                    values[self.ct_fk_field.name] = self.instance.pk
                    instance = self.model(**values)
                except IndexError:
                    pass
            if instance:
                kwargs['instance'] = instance

        form = super(BaseInitialGenericInlineFormSet, self)._construct_form(i, **kwargs)
        return form

########NEW FILE########
__FILENAME__ = placeholdereditor
from abc import abstractmethod
from django.conf.urls import patterns, url
from django.contrib.admin import ModelAdmin
from django.contrib.admin.helpers import InlineAdminFormSet
from django.contrib.contenttypes.generic import GenericInlineModelAdmin
from django.core.exceptions import ImproperlyConfigured
from django.db.models import signals
from django.dispatch import receiver
from django.template import RequestContext
from django.template.loader import render_to_string
from django.utils import translation
from django.utils.functional import curry
from fluent_contents import extensions
from fluent_contents.admin.contentitems import get_content_item_inlines, BaseContentItemFormSet
from fluent_contents.admin.genericextensions import BaseInitialGenericInlineFormSet
from fluent_contents.models import Placeholder, ContentItem, get_parent_language_code
from fluent_contents.models.managers import get_parent_active_language_choices
from fluent_contents.utils.ajax import JsonResponse


class PlaceholderInlineFormSet(BaseInitialGenericInlineFormSet):
    # Most logic happens in the generic base class

    def __init__(self, *args, **kwargs):
        self._instance_languages = None
        #kwargs['prefix'] = 'placeholder_fs'
        super(PlaceholderInlineFormSet, self).__init__(*args, **kwargs)

    @classmethod
    def get_default_prefix(cls):
        # Make output less verbose, easier to read, and less kB to transmit.
        return 'placeholder-fs'

    @property
    def other_instance_languages(self):
        return get_parent_active_language_choices(self.instance, exclude_current=True)



class PlaceholderEditorInline(GenericInlineModelAdmin):
    """
    The placeholder editor, implemented as an admin inline.
    It displays tabs for each inline placeholder, and displays :class:`~fluent_contents.models.ContentItem` plugins in the tabs.

    It should be inserted in the ``ModelAdmin.inlines`` before the inlines that
    the :func:`~fluent_contents.admin.get_content_item_inlines` function generates.
    The ContentItem inlines look for the ``Placeholder`` object that was created just before their invocation.

    To fetch the initial data, the inline will attempt to find the parent model,
    and call :func:`~PlaceholderEditorBaseMixin.get_placeholder_data`.
    When the admin models inherit from :class:`~fluent_contents.admin.PlaceholderEditorAdmin`
    or :class:`~fluent_contents.admin.PlaceholderFieldAdmin` this will be setup already.
    """
    model = Placeholder
    formset = PlaceholderInlineFormSet  # Important part of the class!
    ct_field = 'parent_type'
    ct_fk_field = 'parent_id'
    template = "admin/fluent_contents/placeholder/inline_tabs.html"
    extra = 0
    is_fluent_editor_inline = True  # Allow admin templates to filter the inlines

    class Media:
        # cp_tabs.js is included here, as it's a presentation choice
        # to display the placeholder panes in a tabbar format.
        # The remaining scripts should just operate the same without it.
        js = (
            'fluent_contents/admin/jquery.cookie.js',
            'fluent_contents/admin/cp_admin.js',
            'fluent_contents/admin/cp_data.js',
            'fluent_contents/admin/cp_tabs.js',
            'fluent_contents/admin/cp_plugins.js',
            'fluent_contents/admin/cp_widgets.js',
            'fluent_contents/admin/fluent_contents.js',
        )
        css = {
            'screen': (
                'fluent_contents/admin/cp_admin.css',
            ),
        }

        extend = False   # No need for the standard 'admin/js/inlines.min.js' here.


    def get_all_allowed_plugins(self):
        """
        Return *all* plugin categories which can be used by placeholder content.
        This is the sum of all allowed plugins by the various slots on the page.
        It accesses the parent :class:`PlaceholderEditorBaseMixin` by default to request the information.
        This field is used in the template.
        """
        return self._get_parent_modeladmin().get_all_allowed_plugins()


    def get_formset(self, request, obj=None, **kwargs):
        """
        Pre-populate formset with the initial placeholders to display.
        """
        def _placeholder_initial(p):
            # p.as_dict() returns allowed_plugins too for the client-side API.
            return {
                'slot': p.slot,
                'title': p.title,
                'role': p.role,
            }

        # Note this method is called twice, the second time in get_fieldsets() as `get_formset(request).form`
        initial = []
        if request.method == "GET":
            placeholder_admin = self._get_parent_modeladmin()

            # Grab the initial data from the parent PlaceholderEditorBaseMixin
            data = placeholder_admin.get_placeholder_data(request, obj)
            initial = [_placeholder_initial(d) for d in data]

            # Order initial properly,

        # Inject as default parameter to the constructor
        # This is the BaseExtendedGenericInlineFormSet constructor
        FormSetClass = super(PlaceholderEditorInline, self).get_formset(request, obj, **kwargs)
        FormSetClass.__init__ = curry(FormSetClass.__init__, initial=initial)
        return FormSetClass


    def _get_parent_modeladmin(self):
        # HACK: accessing private field.
        try:
            parentadmin = self.admin_site._registry[self.parent_model]
        except KeyError:
            raise ImproperlyConfigured("Model admin for '{0}' not found in admin_site!".format(self.parent_model.__name__))

        # Do some "type" checking to developers are aided in inheriting their parent ModelAdmin screens with the proper classes.
        assert isinstance(parentadmin, PlaceholderEditorBaseMixin), "The '{0}' class can only be used in admin screens which implement a PlaceholderEditor mixin class.".format(self.__class__.__name__)
        return parentadmin



class PlaceholderEditorBaseMixin(object):
    """
    Base interface/mixin for a :class:`~django.contrib.admin.ModelAdmin` to provide the :class:`PlaceholderEditorInline` with initial data.
    This class is implemented by the :class:`PlaceholderEditorAdmin` and :class:`~fluent_contents.admin.PlaceholderFieldAdmin` classes.
    """
    @abstractmethod
    def get_placeholder_data(self, request, obj):
        """
        Return the placeholders that the editor should initially display.
        The function should return a list of :class:`~fluent_contents.models.PlaceholderData` classes.
        These classes can either be instantiated manually, or read from a template
        using the :ref:`fluent_contents.analyzer` module for example.
        """
        raise NotImplementedError("The '{0}' subclass should implement get_placeholder_data().".format(self.__class__.__name__))


    def get_all_allowed_plugins(self):
        """
        Return all plugin categories which can be used by placeholder content.
        By default, all plugins are allowed. Individual slot names may further limit the plugin set.
        """
        return extensions.plugin_pool.get_plugins()



class PlaceholderEditorAdmin(PlaceholderEditorBaseMixin, ModelAdmin):
    """
    The base functionality for :class:`~django.contrib.admin.ModelAdmin` dialogs to display a placeholder editor with plugins.
    It loads the inlines using :func:`get_extra_inlines`.

    It loads the :class:`PlaceholderEditorInline`, which displays each placeholder in separate tabs:

    .. image:: /images/admin/placeholdereditoradmin2.png
       :width: 755px
       :height: 418px
       :alt: django-fluent-contents placeholder editor preview
    """
    placeholder_inline = PlaceholderEditorInline


    def get_inline_instances(self, request, *args, **kwargs):
        """
        Create the inlines for the admin, including the placeholder and contentitem inlines.
        """
        # Django 1.3: inlines were created once in self.inline_instances (not supported anymore)
        # Django 1.4: inlines are created per request
        # Django 1.5: 'obj' parameter was added so it can be passed to 'has_change_permission' and friends.
        inlines = super(PlaceholderEditorAdmin, self).get_inline_instances(request, *args, **kwargs)

        extra_inline_instances = []
        inlinetypes = self.get_extra_inlines()
        for InlineType in inlinetypes:
            inline_instance = InlineType(self.model, self.admin_site)
            extra_inline_instances.append(inline_instance)

        return extra_inline_instances + inlines


    def get_extra_inlines(self):
        """
        Return the extra inlines for the placeholder editor.
        It loads the :attr:`placeholder_inline` first, followed by the inlines for the :class:`~fluent_contents.models.ContentItem` classes.
        """
        return [self.placeholder_inline] + get_content_item_inlines(plugins=self.get_all_allowed_plugins())


    def get_urls(self):
        urls = super(PlaceholderEditorAdmin, self).get_urls()
        info = self.model._meta.app_label, self.model._meta.module_name
        return patterns('',
            url(
                r'^(?P<object_id>\d+)/api/get_placeholder_data/',
                self.admin_site.admin_view(self.get_placeholder_data_view),
                name='{0}_{1}_get_placeholder_data'.format(*info)
            )
        ) + urls


    def get_placeholder_data_view(self, request, object_id):
        """
        Return the placeholder data as dictionary.
        This is used in the client for the "copy" functionality.
        """
        language = 'en'  #request.POST['language']
        with translation.override(language):  # Use generic solution here, don't assume django-parler is used now.
            obj = self.get_object(request, object_id)

        if obj is None:
            json = {'success': False, 'error': 'Page not found'}
            status = 404
        elif not self.has_change_permission(request, obj):
            json = {'success': False, 'error': 'No access to page'}
            status = 403
        else:
            # Fetch the forms that would be displayed,
            # return the data as serialized form data.
            status = 200
            json = {
                'success': True,
                'object_id': object_id,
                'language_code': language,
                'formset_forms': self._get_object_formset_data(request, obj),
            }

        return JsonResponse(json, status=status)


    def _get_object_formset_data(self, request, obj):
        inline_instances = self.get_inline_instances(request, obj)
        placeholder_slots = dict(Placeholder.objects.parent(obj).values_list('id', 'slot'))
        all_forms = []

        for FormSet, inline in zip(self.get_formsets(request, obj), inline_instances):
            # Only ContentItem inlines
            if isinstance(inline, PlaceholderEditorInline) \
            or not getattr(inline, 'is_fluent_editor_inline', False):
                continue

            formset_forms = self._get_contentitem_formset_html(request, obj, FormSet, inline, placeholder_slots)
            if formset_forms:
                all_forms.extend(formset_forms)

        # Flatten list, sorted on insertion for the client.
        all_forms.sort(key=lambda x: (x['placeholder_slot'], x['sort_order']))
        return all_forms


    def _get_contentitem_formset_html(self, request, obj, FormSet, inline, placeholder_slots):
        # Passing serialized object fields to the client doesn't work,
        # as some form fields (e.g. picture field or MultiValueField) have a different representation.
        # The only way to pass a form copy to the client is by actually rendering it.
        # Hence, emulating change_view code here:
        formset = FormSet(instance=obj, prefix='', queryset=inline.queryset(request))
        fieldsets = list(inline.get_fieldsets(request, obj))
        readonly = list(inline.get_readonly_fields(request, obj))
        prepopulated = dict(inline.get_prepopulated_fields(request, obj))
        inline.extra = 0
        inline_admin_formset = InlineAdminFormSet(inline, formset, fieldsets, prepopulated, readonly, model_admin=self)

        form_data = []
        for i, inline_admin_form in enumerate(inline_admin_formset):
            if inline_admin_form.original is None:  # The extra forms
                continue

            # exactly what admin/fluent_contents/contentitem/inline_container.html does:
            template_name = inline_admin_formset.opts.cp_admin_form_template
            form_html = render_to_string(template_name, {
                'inline_admin_form': inline_admin_form,
                'inline_admin_formset': inline_admin_formset,
                'original': obj,
                'object_id': obj.pk,
                'add': False,
                'change': True,
                'has_change_permission': True,
            }, context_instance=RequestContext(request))

            # Append to list with metadata included
            contentitem = inline_admin_form.original
            form_data.append({
                'contentitem_id': contentitem.pk,
                'sort_order': contentitem.sort_order,
                'placeholder_id': contentitem.placeholder_id,
                'placeholder_slot': placeholder_slots[contentitem.placeholder_id],
                'html': form_html,
                'plugin': inline.plugin.__class__.__name__,
                'model': inline.model.__name__,
                'prefix': formset.add_prefix(i),
            })
        return form_data


    def save_formset(self, request, form, formset, change):
        # Track deletion of Placeholders across the formsets.
        # When a Placeholder is deleted, the ContentItem can't be saved anymore with the old placeholder_id
        # That ID did exist at the beginning of the transaction, but won't be when all forms are saved.
        # Pass the knowledge of deleted placeholders to the ContentItem formset, so it can deal with it.
        if isinstance(formset, BaseContentItemFormSet):
            formset._deleted_placeholders = getattr(request, '_deleted_placeholders', ())

        saved_instances = super(PlaceholderEditorAdmin, self).save_formset(request, form, formset, change)

        if isinstance(formset, PlaceholderInlineFormSet):
            request._deleted_placeholders = [obj._old_pk for obj in formset.deleted_objects]

        return saved_instances



@receiver(signals.post_delete, sender=Placeholder)
def _get_pk_on_placeholder_delete(instance, **kwargs):
    # Make sure the old PK can still be tracked
    instance._old_pk = instance.pk

########NEW FILE########
__FILENAME__ = placeholderfield
from django.contrib import admin
from fluent_contents import extensions
from fluent_contents.admin.placeholdereditor import PlaceholderEditorInline, PlaceholderEditorAdmin
from fluent_contents.models import PlaceholderData
from fluent_contents.models.fields import PlaceholderField


class PlaceholderFieldInline(PlaceholderEditorInline):
    """
    The inline used to process placeholder fields.
    """
    template = "admin/fluent_contents/placeholderfield/inline_init.html"


class PlaceholderFieldAdmin(PlaceholderEditorAdmin):
    """
    The base functionality for :class:`~django.contrib.admin.ModelAdmin` dialogs to display placeholder fields.

    This class loads the :class:`~fluent_contents.models.ContentItem` inlines,
    and initializes the frontend editor for the :class:`~fluent_contents.models.PlaceholderField`.
    The placeholder will be displayed in the admin:

    .. image:: /images/admin/placeholderfieldadmin1.png
       :width: 770px
       :height: 562px
       :alt: django-fluent-contents placeholder field preview
    """
    placeholder_inline = PlaceholderFieldInline


    def get_placeholder_data(self, request, obj):
        """
        Return the data of the placeholder fields.
        """
        # Return all placeholder fields in the model.
        if not hasattr(self.model, '_meta_placeholder_fields'):
            return []

        data = []
        for name, field in self.model._meta_placeholder_fields.iteritems():
            assert isinstance(field, PlaceholderField)
            data.append(PlaceholderData(
                slot=field.slot,
                title=field.verbose_name.capitalize(),
                fallback_language=None,  # Information cant' be known by "render_placeholder" in the template.
            ))

        return data


    def get_all_allowed_plugins(self):
        """
        Return which plugins are allowed by the placeholder fields.
        """
        # Get all allowed plugins of the various placeholders together.
        if not hasattr(self.model, '_meta_placeholder_fields'):
            # No placeholder fields in the model, no need for inlines.
            return []

        plugins = []
        for name, field in self.model._meta_placeholder_fields.iteritems():
            assert isinstance(field, PlaceholderField)
            if field.plugins is None:
                # no limitations, so all is allowed
                return extensions.plugin_pool.get_plugins()
            else:
                plugins += field.plugins

        return list(set(plugins))

########NEW FILE########
__FILENAME__ = analyzer
"""
Analyze the templates for placeholders of this module.
"""
from template_analyzer.djangoanalyzer import get_node_instances
from fluent_contents.models import PlaceholderData
from fluent_contents.templatetags.fluent_contents_tags import PagePlaceholderNode

__all__ = ('get_template_placeholder_data',)


def get_template_placeholder_data(template):
    """
    Return the placeholders found in a template,
    wrapped in a :class:`~fluent_contents.models.containers.PlaceholderData` object.

    This function looks for the :class:`~fluent_contents.templatetags.fluent_contents_tags.PagePlaceholderNode` nodes
    in the template, using the :func:`~template_analyzer.djangoanalyzer.get_node_instances` function
    of `django-template-analyzer <https://github.com/edoburu/django-template-analyzer>`_.
    """
    # Find the instances.
    nodes = get_node_instances(template, PagePlaceholderNode)

    # Avoid duplicates, wrap in a class.
    names = set()
    result = []
    for pageplaceholdernode in nodes:
        data = PlaceholderData(
            slot=pageplaceholdernode.get_slot(),
            title=pageplaceholdernode.get_title(),
            role=pageplaceholdernode.get_role(),
            fallback_language=pageplaceholdernode.get_fallback_language(),
        )

        if data.slot not in names:
            result.append(data)
            names.add(data.slot)

    return result

########NEW FILE########
__FILENAME__ = appsettings
"""
Overview of all settings which can be customized.
"""
from django.conf import settings
from parler import appsettings as parler_appsettings


FLUENT_CONTENTS_CACHE_OUTPUT = getattr(settings, 'FLUENT_CONTENTS_CACHE_OUTPUT', True)

FLUENT_CONTENTS_PLACEHOLDER_CONFIG = getattr(settings, 'FLUENT_CONTENTS_PLACEHOLDER_CONFIG', {})

# Note: the default language setting is used during the migrations
FLUENT_DEFAULT_LANGUAGE_CODE = getattr(settings, 'FLUENT_DEFAULT_LANGUAGE_CODE', parler_appsettings.PARLER_DEFAULT_LANGUAGE_CODE)
FLUENT_CONTENTS_DEFAULT_LANGUAGE_CODE = getattr(settings, 'FLUENT_CONTENTS_DEFAULT_LANGUAGE_CODE', FLUENT_DEFAULT_LANGUAGE_CODE)

# Allow to disable multisite support.
# Only used by sharedcontent plugin for now.
FLUENT_CONTENTS_FILTER_SITE_ID = getattr(settings, "FLUENT_CONTENTS_FILTER_SITE_ID", True)

########NEW FILE########
__FILENAME__ = cache
"""
Functions for caching.
"""

def get_rendering_cache_key(placeholder_name, contentitem):
    """
    Return a cache key for the content item output.

    .. seealso::

        The :func:`ContentItem.clear_cache() <fluent_contents.models.ContentItem.clear_cache>` function
        can be used to remove the cache keys of a retrieved object.
    """
    if not contentitem.pk:
        return None
    return "contentitem.@{0}.{1}.{2}".format(
        placeholder_name,
        contentitem.plugin.type_name,  # always returns the upcasted name.
        contentitem.pk,                # already unique per language_code
    )

########NEW FILE########
__FILENAME__ = model_fields
"""
This is an internal module for the plugin system,
the API is exposed via __init__.py

This package contains model fields which are usable for extensions.
"""
from django.conf import settings
from django.db import models
from django.utils.safestring import mark_safe
from fluent_contents.forms.widgets import WysiwygWidget


# Keep the apps optional, however, it's highly recommended to use them.
# This avoids fixing the generic plugin to specific extensions.
# Each project can use their preferred file browser/image browser/URL selector for the entire site.
if 'any_urlfield' in settings.INSTALLED_APPS:
    from any_urlfield.models import AnyUrlField
    PluginUrlField = AnyUrlField
else:
    PluginUrlField = models.URLField


if 'any_imagefield' in settings.INSTALLED_APPS:
    from any_imagefield.models import AnyFileField, AnyImageField
    PluginFileField = AnyFileField
    PluginImageField = AnyImageField
else:
    PluginFileField = models.FileField
    PluginImageField = models.ImageField


class PluginHtmlField(models.TextField):
    """
    A large string field for HTML content; it's replaced with django-wysiwyg in the admin.
    """
    def __init__(self, *args, **kwargs):
        # This method override is primary included to improve the API documentation
        super(PluginHtmlField, self).__init__(*args, **kwargs)

    def formfield(self, **kwargs):
        defaults = {'widget': WysiwygWidget}
        defaults.update(kwargs)

        return super(PluginHtmlField, self).formfield(**defaults)

    def to_python(self, value):
        return mark_safe(value)


# Tell South how to create custom fields
try:
    from south.modelsinspector import add_introspection_rules
    add_introspection_rules([], [
        "^fluent_contents\.extensions\.model_fields\.PluginHtmlField",
    ])
except ImportError:
    pass

# Tell the Django admin it shouldn't override the widget because it's a TextField
from django.contrib.admin import options
options.FORMFIELD_FOR_DBFIELD_DEFAULTS[PluginHtmlField] = {'widget': WysiwygWidget}

########NEW FILE########
__FILENAME__ = pluginbase
"""
Internal module for the plugin system,
the API is exposed via __init__.py
"""
from django.conf import settings
from django.contrib import admin
from django.contrib.contenttypes.models import ContentType
from django.contrib.sites.models import Site
from django.core import context_processors
from django.contrib.auth import context_processors as auth_context_processors
from django.contrib.messages import context_processors as messages_context_processors
from django.core.cache import cache
from django.db import DatabaseError
from django.forms import Media, MediaDefiningClass
from django.template.context import Context
from django.template.loader import render_to_string
from django.utils.html import linebreaks, escape
from django.utils.translation import ugettext as _, get_language
from fluent_contents.cache import get_rendering_cache_key
from fluent_contents.forms import ContentItemForm
from fluent_contents.models import ContentItemOutput, ImmutableMedia


# Some standard request processors to use in the plugins,
# Naturally, you want STATIC_URL to be available in plugins.


def _add_debug(request):
    return {'debug': settings.DEBUG}

_STANDARD_REQUEST_CONTEXT_PROCESSORS = (
    context_processors.request,
    context_processors.static,
    context_processors.csrf,
    context_processors.media,
    context_processors.i18n,
    auth_context_processors.auth,
    messages_context_processors.messages,
    _add_debug,
)


class PluginContext(Context):
    """
    A template Context class similar to :class:`~django.template.context.RequestContext`, that enters some pre-filled data.
    This ensures that variables such as ``STATIC_URL`` and ``request`` are available in the plugin templates.
    """
    def __init__(self, request, dict=None, current_app=None):
        # If there is any reason to site-global context processors for plugins,
        # I'd like to know the usecase, and it could be implemented here.
        Context.__init__(self, dict, current_app=current_app)
        for processor in _STANDARD_REQUEST_CONTEXT_PROCESSORS:
            self.update(processor(request))


def frontend_media_property(cls):
    # Identical to the media_property, adapted to read the "FrontendMedia" class
    # and optimized to avoid useless object creation.

    def _media(self):
        # Get the media property of the superclass, if it exists
        sup_cls = super(cls, self)
        try:
            base = sup_cls.frontend_media
        except AttributeError:
            base = ImmutableMedia.empty_instance

        # Get the media definition for this class
        definition = getattr(cls, 'FrontendMedia', None)
        if definition:
            media = Media(definition)

            # Not supporting extend=('js',) here, not documented in Django either.
            if getattr(definition, 'extend', True) and base is not ImmutableMedia.empty_instance:
                return base + media

            return media
        else:
            return base
    return property(_media)


class PluginMediaDefiningClass(MediaDefiningClass):
    "Metaclass for classes that can have media definitions"
    def __new__(cls, name, bases, attrs):
        new_class = super(PluginMediaDefiningClass, cls).__new__(cls, name, bases, attrs)
        if 'frontend_media' not in attrs and 'FrontendMedia' in attrs:
            new_class.frontend_media = frontend_media_property(new_class)
        return new_class


class ContentPlugin(object):
    """
    The base class for all content plugins.

    A plugin defines the rendering for a :class:`~fluent_contents.models.ContentItem`, settings and presentation in the admin interface.
    To create a new plugin, derive from this class and call :func:`plugin_pool.register <PluginPool.register>` to enable it.
    For example:

    .. code-block:: python

        from fluent_contents.extensions import plugin_pool, ContentPlugin

        @plugin_pool.register
        class AnnouncementBlockPlugin(ContentPlugin):
            model = AnnouncementBlockItem
            render_template = "plugins/announcementblock.html"
            category = _("Simple blocks")

    As minimal configuration, specify the :attr:`model` and :attr:`render_template` fields.
    The :attr:`model` should be a subclass of the :class:`~fluent_contents.models.ContentItem` model class.

    .. note::
        When the plugin is registered in the :attr:`plugin_pool`, it will be instantiated only once.
        It is therefore not possible to store per-request state at the plugin object.
        This is similar to the behavior of the :class:`~django.contrib.admin.ModelAdmin` classes in Django.

    To customize the admin, the :attr:`admin_form_template`, :attr:`admin_form` can be defined,
    and a ``class Media`` can be included to provide extra CSS and JavaScript files for the admin interface.
    Some well known properties of the :class:`~django.contrib.admin.ModelAdmin` class can also be specified on plugins;
    such as the
    :attr:`~django.contrib.admin.ModelAdmin.raw_id_fields`,
    :attr:`~django.contrib.admin.ModelAdmin.fieldsets` and
    :attr:`~django.contrib.admin.ModelAdmin.readonly_fields` settings.

    The rendered output of a plugin is cached by default, assuming that most content is static.
    This also avoids extra database queries to retrieve the model objects.
    In case the plugin needs to output content dynamically, include ``cache_output = False`` in the plugin definition.
    """
    __metaclass__ = PluginMediaDefiningClass

    # -- Settings to override:

    #: The model to use, must derive from :class:`fluent_contents.models.ContentItem`.
    model = None

    #: The form to use in the admin interface. By default it uses a  :class:`fluent_contents.models.ContentItemForm`.
    form = ContentItemForm

    #: The template to render the admin interface with
    admin_form_template = "admin/fluent_contents/contentitem/admin_form.html"

    #: An optional template which is included in the admin interface, to initialize components (e.g. JavaScript)
    admin_init_template = None

    #: The fieldsets for the admin view.
    fieldsets = None

    #: The template to render the frontend HTML output.
    render_template = None

    #: By default, rendered output is cached, and updated on admin changes.
    cache_output = True

    #: .. versionadded:: 0.9
    #: Cache the plugin output per :django:setting:`SITE_ID`.
    cache_output_per_site = False

    #: .. versionadded:: 1.0
    #: Cache the plugin output per language.
    #: This can be useful for sites which either:
    #:
    #: * Display fallback content on pages, but still use `{% trans %}` inside templates.
    #: * Dynamically switch the language per request, and *share* content between multiple languages.
    cache_output_per_language = False

    #: .. versionadded: 1.0
    #: Set a custom cache timeout value
    cache_timeout = None

    #: .. versionadded:: 1.0
    #: Tell which languages the plugin will cache.
    cache_supported_language_codes = [code for code, _ in settings.LANGUAGES]

    #: The category to display the plugin at.
    category = None

    #: Alternative template for the view.
    ADMIN_TEMPLATE_WITHOUT_LABELS = "admin/fluent_contents/contentitem/admin_form_without_labels.html"

    #: .. versionadded:: 0.8.5
    #:    The ``HORIZONTAL`` constant for the :attr:`radio_fields`.
    HORIZONTAL = admin.HORIZONTAL

    #: .. versionadded:: 0.8.5
    #:    The ``VERTICAL`` constant for the :attr:`radio_fields`.
    VERTICAL = admin.VERTICAL

    #: The fields to display as raw ID
    raw_id_fields = ()

    #: The fields to display in a vertical filter
    filter_vertical = ()

    #: The fields to display in a horizontal filter
    filter_horizontal = ()

    #: The fields to display as radio choice. For example::
    #:
    #:    radio_fields = {
    #:        'align': ContentPlugin.VERTICAL,
    #:    }
    #:
    #: The value can be :attr:`ContentPlugin.HORIZONTAL` or :attr:`ContentPlugin.VERTICAL`.
    radio_fields = {}

    #: Fields to automatically populate with values
    prepopulated_fields = {}

    #: Overwritten formfield attributes, e.g. the 'widget'. Allows both the class and fieldname as key.
    formfield_overrides = {}

    #: The fields to display as readonly.
    readonly_fields = ()


    def __init__(self):
        self._type_id = None


    def __repr__(self):
        return '<{0} for {1} model>'.format(self.__class__.__name__, unicode(self.model.__name__).encode('ascii'))


    @property
    def verbose_name(self):
        """
        The title for the plugin, by default it reads the ``verbose_name`` of the model.
        """
        return self.model._meta.verbose_name


    @property
    def name(self):
        """
        Return the classname of the plugin, this is mainly provided for templates.
        This value can also be used in :func:`PluginPool.
        """
        return self.__class__.__name__


    @property
    def type_name(self):
        """
        Return the classname of the model, this is mainly provided for templates.
        """
        return self.model.__name__


    @property
    def type_id(self):
        """
        Shortcut to retrieving the ContentType id of the model.
        """
        if self._type_id is None:
            try:
                self._type_id = ContentType.objects.get_for_model(self.model).id
            except DatabaseError as e:
                raise DatabaseError("Unable to fetch ContentType object, is a plugin being registered before the initial syncdb? (original error: {0})".format(str(e)))

        return self._type_id


    def get_model_instances(self):
        """
        Return the model instances the plugin has created.
        """
        return self.model.objects.all()


    def _render_contentitem(self, request, instance):
        # Internal wrapper for render(), to allow updating the method signature easily.
        # It also happens to really simplify code navigation.
        result = self.render(request=request, instance=instance)
        if isinstance(result, ContentItemOutput):
            # Return in new 1.0 format
            return result
        else:
            # Old 0.9 syntax, correct it.
            html = result
            media = self.get_frontend_media(instance)
            return ContentItemOutput(html, media)


    def get_output_cache_base_key(self, placeholder_name, instance):
        """
        .. versionadded:: 1.0
           Return the default cache key, both :func:`get_output_cache_key` and :func:`get_output_cache_keys` rely on this.
           By default, this function generates the cache key using :func:`~fluent_contents.cache.get_rendering_cache_key`.
        """
        return get_rendering_cache_key(placeholder_name, instance)


    def get_output_cache_key(self, placeholder_name, instance):
        """
        .. versionadded:: 0.9
           Return the default cache key which is used to store a rendered item.
           By default, this function generates the cache key using :func:`get_output_cache_base_key`.
        """
        cachekey = self.get_output_cache_base_key(placeholder_name, instance)
        if self.cache_output_per_site:
            cachekey = "{0}-s{1}".format(cachekey, settings.SITE_ID)

        # Append language code
        if self.cache_output_per_language:
            user_language = get_language()
            if user_language not in self.cache_supported_language_codes:
                user_language = 'unsupported'
            cachekey = "{0}.{1}".format(cachekey, user_language)

        return cachekey


    def get_output_cache_keys(self, placeholder_name, instance):
        """
        .. versionadded:: 0.9
           Return the possible cache keys for a rendered item.

           This method should be overwritten when implementing a function :func:`set_cached_output` method
           or when implementing a :func:`get_output_cache_key` function.
           By default, this function generates the cache key using :func:`get_output_cache_base_key`.
        """
        base_key = self.get_output_cache_base_key(placeholder_name, instance)
        cachekeys = [
            base_key
        ]

        if self.cache_output_per_site:
            site_ids = list(Site.objects.values_list('pk', flat=True))
            if settings.SITE_ID not in site_ids:
                site_ids.append(settings.SITE_ID)

            base_key = get_rendering_cache_key(placeholder_name, instance)
            cachekeys = ["{0}-s{1}".format(base_key, site_id) for site_id in site_ids]

        if self.cache_output_per_language:
            # Append language code to all keys,
            # have to invalidate a lot more items in memcache
            total_list = []
            for user_language in list(self.cache_supported_language_codes) + ['unsupported']:
                total_list.extend("{0}.{1}".format(base, user_language) for base in cachekeys)
            cachekeys = total_list

        return cachekeys


    def get_cached_output(self, placeholder_name, instance):
        """
        .. versionadded:: 0.9
           Return the cached output for a rendered item, or ``None`` if no output is cached.

           This method can be overwritten to implement custom caching mechanisms.
           By default, this function generates the cache key using :func:`get_output_cache_key`
           and retrieves the results from the configured Django cache backend (e.g. memcached).
        """
        cachekey = self.get_output_cache_key(placeholder_name, instance)
        return cache.get(cachekey)


    def set_cached_output(self, placeholder_name, instance, output):
        """
        .. versionadded:: 0.9
           Store the cached output for a rendered item.

           This method can be overwritten to implement custom caching mechanisms.
           By default, this function generates the cache key using :func:`~fluent_contents.cache.get_rendering_cache_key`
           and stores the results in the configured Django cache backend (e.g. memcached).

           When custom cache keys are used, also include those in :func:`get_output_cache_keys`
           so the cache will be cleared when needed.

        .. versionchanged:: 1.0
           The received data is no longer a HTML string, but :class:`~fluent_contents.models.ContentItemOutput` object.
        """
        cachekey = self.get_output_cache_key(placeholder_name, instance)
        if self.cache_timeout:
            cache.set(cachekey, output, self.cache_timeout)
        else:
            # Don't want to mix into the default 0/None issue.
            cache.set(cachekey, output)


    def render(self, request, instance, **kwargs):
        """
        The rendering/view function that displays a plugin model instance.

        :param instance: An instance of the ``model`` the plugin uses.
        :param request: The Django :class:`~django.http.HttpRequest` class containing the request parameters.
        :param kwargs: An optional slot for any new parameters.

        To render a plugin, either override this function, or specify the :attr:`render_template` variable,
        and optionally override :func:`get_context`.
        It is recommended to wrap the output in a ``<div>`` tag,
        to prevent the item from being displayed right next to the previous plugin.

        .. versionadded:: 1.0
           The function may either return a string of HTML code,
           or return a :class:`~fluent_contents.models.ContentItemOutput` object
           which holds both the CSS/JS includes and HTML string.
           For the sake of convenience and simplicity, most examples
           only return a HTML string directly.

           When the user needs to be redirected, call :func:`redirect`.

        To render raw HTML code, use :func:`~django.utils.safestring.mark_safe` on the returned HTML.
        """
        render_template = self.get_render_template(request, instance, **kwargs)
        if not render_template:
            return unicode(_(u"{No rendering defined for class '%s'}" % self.__class__.__name__))

        context = self.get_context(request, instance, **kwargs)
        return self.render_to_string(request, render_template, context)


    def render_to_string(self, request, template, context, content_instance=None):
        """
        Render a custom template with the :class:`~PluginContext` as context instance.
        """
        if not content_instance:
            content_instance = PluginContext(request)
        return render_to_string(template, context, context_instance=content_instance)


    def render_error(self, error):
        """
        A default implementation to render an exception.
        """
        return '<div style="color: red; border: 1px solid red; padding: 5px;">' \
               '<p><strong>%s</strong></p>%s</div>' % (_('Error:'), linebreaks(escape(str(error))))


    def redirect(self, url, status=302):
        """
        .. versionadded:: 1.0
        Request a redirect to be performed for the user.
        Usage example:

        .. code-block:: python

            def get_context(self, request, instance, **kwargs):
                context = super(IdSearchPlugin, self).get_context(request, instance, **kwargs)

                if request.method == "POST":
                    form = MyForm(request.POST)
                    if form.is_valid():
                        self.redirect("/foo/")
                else:
                    form = MyForm()

                context['form'] = form
                return context

        Internally, this raises an exception that should be caught by
        the :class:`~fluent_contents.middleware.HttpRedirectRequestMiddleware`
        as the render functions have no way to return a :class:`~django.http.HttpResponseRedirect`.
        """
        raise HttpRedirectRequest(url, status=status)


    def get_render_template(self, request, instance, **kwargs):
        """
        Return the template to render for the specific model `instance` or `request`,
        By default it uses the ``render_template`` attribute.
        """
        return self.render_template


    def get_context(self, request, instance, **kwargs):
        """
        Return the context to use in the template defined by ``render_template`` (or :func:`get_render_template`).
        By default, it returns the model instance as ``instance`` field in the template.
        """
        return {
            'instance': instance,
        }


    @property
    def frontend_media(self):
        """
        .. versionadded:: 1.0
        The frontend media, typically declared using a ``class FrontendMedia`` definition.
        """
        # By adding this property, frontend_media_property() is further optimized.
        return ImmutableMedia.empty_instance


    def get_frontend_media(self, instance):
        """
        Return the frontend media for a specific instance.
        By default, it returns ``self.frontend_media``, which derives
        from the ``class FrontendMedia`` of the plugin.

        This function is not used when the :func:`render` function returns
        the media directly via the :class:`~fluent_contents.models.ContentItemOutput` class.
        """
        return self.frontend_media


class HttpRedirectRequest(Exception):
    """
    .. versionadded:: 1.0
    Request for a redirect from within a view.
    """
    def __init__(self, url, status=302):
        super(HttpRedirectRequest, self).__init__("A redirect request to '{0}' was raised.\nTo handle this exception, include the HttpRedirectRequestMiddleware in MIDDLEWARE_CLASSES.".format(url))
        self.url = url
        self.status = status


########NEW FILE########
__FILENAME__ = pluginpool
"""
Internal module for the plugin system,
the API is exposed via __init__.py
"""
from threading import Lock
from django.conf import settings
from django.contrib.contenttypes.models import ContentType
from django.utils.importlib import import_module
from fluent_contents import appsettings
from fluent_contents.forms import ContentItemForm
from fluent_contents.models import ContentItem
from .pluginbase import ContentPlugin


__all__ = ('PluginContext', 'ContentPlugin', 'plugin_pool')


# This mechanism is mostly inspired by Django CMS,
# which nice job at defining a clear extension model.
# (c) Django CMS developers, BSD licensed.

# Some standard request processors to use in the plugins,
# Naturally, you want STATIC_URL to be available in plugins.


def _import_apps_submodule(submodule):
    """
    Look for a submodule is a series of packages, e.g. ".content_plugins" in all INSTALLED_APPS.
    """
    for app in settings.INSTALLED_APPS:
        try:
            import_module('.' + submodule, app)
        except ImportError, e:
            if submodule not in str(e):
                raise   # import error is a level deeper.
            else:
                pass


class PluginAlreadyRegistered(Exception):
    """
    Raised when attemping to register a plugin twice.
    """
    pass


class PluginNotFound(Exception):
    """
    Raised when the plugin could not be found in the rendering process.
    """
    pass


class PluginPool(object):
    """
    The central administration of plugins.
    """
    scanLock = Lock()

    def __init__(self):
        self.plugins = {}
        self._name_for_model = {}
        self._name_for_ctype_id = None
        self.detected = False


    def register(self, plugin):
        """
        Make a plugin known by the CMS.

        :param plugin: The plugin class, deriving from :class:`ContentPlugin`.

        The plugin will be instantiated, just like Django does this with :class:`~django.contrib.admin.ModelAdmin` classes.
        If a plugin is already registered, this will raise a :class:`PluginAlreadyRegistered` exception.
        """
        # Duck-Typing does not suffice here, avoid hard to debug problems by upfront checks.
        assert issubclass(plugin, ContentPlugin), "The plugin must inherit from `ContentPlugin`"
        assert plugin.model, "The plugin has no model defined"
        assert issubclass(plugin.model, ContentItem), "The plugin model must inherit from `ContentItem`"
        assert issubclass(plugin.form, ContentItemForm), "The plugin form must inherit from `ContentItemForm`"

        name = plugin.__name__  # using class here, no instance created yet.
        if name in self.plugins:
            raise PluginAlreadyRegistered("{0}: a plugin with this name is already registered".format(name))
        name = name.lower()

        # Make a single static instance, similar to ModelAdmin.
        plugin_instance = plugin()
        self.plugins[name] = plugin_instance
        self._name_for_model[plugin.model] = name       # Track reverse for model.plugin link

        # Only update lazy indexes if already created
        if self._name_for_ctype_id is not None:
            self._name_for_ctype_id[plugin.type_id] = name

        return plugin  # Allow decorator syntax


    def get_plugins(self):
        """
        Return the list of all plugin instances which are loaded.
        """
        self._import_plugins()
        return self.plugins.values()


    def get_allowed_plugins(self, placeholder_slot):
        """
        Return the plugins which are supported in the given placeholder name.
        """
        # See if there is a limit imposed.
        slot_config = appsettings.FLUENT_CONTENTS_PLACEHOLDER_CONFIG.get(placeholder_slot) or {}
        plugins = slot_config.get('plugins')
        if not plugins:
            return self.get_plugins()
        else:
            try:
                return self.get_plugins_by_name(*plugins)
            except PluginNotFound as e:
                raise PluginNotFound(str(e) + " Update the plugin list of the FLUENT_CONTENTS_PLACEHOLDER_CONFIG['{0}'] setting.".format(placeholder_slot))


    def get_plugins_by_name(self, *names):
        """
        Return a list of plugins by plugin class, or name.
        """
        self._import_plugins()
        plugin_instances = []
        for name in names:
            if isinstance(name, basestring):
                try:
                    plugin_instances.append(self.plugins[name.lower()])
                except KeyError:
                    raise PluginNotFound("No plugin named '{0}'.".format(name))
            elif issubclass(name, ContentPlugin):
                # Will also allow classes instead of strings.
                plugin_instances.append(self.plugins[self._name_for_model[name.model]])
            else:
                raise TypeError("get_plugins_by_name() expects a plugin name or class, not: {0}".format(name))
        return plugin_instances


    def get_model_classes(self):
        """
        Return all :class:`~fluent_contents.models.ContentItem` model classes which are exposed by plugins.
        """
        self._import_plugins()
        return [plugin.model for plugin in self.plugins.values()]


    def get_plugin_by_model(self, model_class):
        """
        Return the corresponding plugin for a given model.
        """
        self._import_plugins()                       # could happen during rendering that no plugin scan happened yet.
        assert issubclass(model_class, ContentItem)  # avoid confusion between model instance and class here!

        try:
            name = self._name_for_model[model_class]
        except KeyError:
            raise PluginNotFound("No plugin found for model '{0}'.".format(model_class.__name__))
        return self.plugins[name]


    def _get_plugin_by_content_type(self, contenttype):
        self._import_plugins()
        self._setup_lazy_indexes()

        ct_id = contenttype.id if isinstance(contenttype, ContentType) else int(contenttype)
        try:
            name = self._name_for_ctype_id[ct_id]
        except KeyError:
            # ContentType not found, likely a plugin is no longer registered or the app has been removed.
            try:
                # ContentType could be stale
                ct = contenttype if isinstance(contenttype, ContentType) else ContentType.objects.get_for_id(ct_id)
            except AttributeError:  # should return the stale type but Django <1.6 raises an AttributeError in fact.
                ct_name = 'stale content type'
            else:
                ct_name = '{0}.{1}'.format(ct.app_label, ct.model)
            raise PluginNotFound("No plugin found for content type #{0} ({1}).".format(contenttype, ct_name))

        return self.plugins[name]


    def _import_plugins(self):
        """
        Internal function, ensure all plugin packages are imported.
        """
        if self.detected:
            return

        # In some cases, plugin scanning may start during a request.
        # Make sure there is only one thread scanning for plugins.
        self.scanLock.acquire()
        if self.detected:
            return  # previous threaded released + completed

        try:
            _import_apps_submodule("content_plugins")
            self.detected = True
        finally:
            self.scanLock.release()

    def _setup_lazy_indexes(self):
        # The ContentType is not read yet at .register() time, since that enforces the database to exist at that time.
        # If a plugin library is imported via different paths that might not be the case when `./manage.py syncdb` runs.
        if self._name_for_ctype_id is None:
            plugin_ctypes = {}  # separate dict to build, thread safe
            self._import_plugins()
            for name, plugin in self.plugins.iteritems():
                plugin_ctypes[plugin.type_id] = name

            self._name_for_ctype_id = plugin_ctypes


#: The global plugin pool, a instance of the :class:`PluginPool` class.
plugin_pool = PluginPool()

########NEW FILE########
__FILENAME__ = fields
from django import forms
from fluent_contents.forms.widgets import PlaceholderFieldWidget


class PlaceholderFormField(forms.Field):
    """
    The internal form field to display a placeholder field.
    It displays the :class:`~fluent_dashboard.forms.PlaceholderFieldWidget`.
    """
    def __init__(self, slot, plugins=None, **kwargs):
        # Pass along...
        self.slot = slot
        self._plugins = plugins

        defaults = {
            'widget': PlaceholderFieldWidget(slot=slot, plugins=plugins),
        }
        defaults.update(kwargs)
        super(PlaceholderFormField, self).__init__(**defaults)

########NEW FILE########
__FILENAME__ = widgets
from django.contrib.admin.widgets import AdminTextareaWidget
from django.forms.widgets import Widget
from django.template.loader import render_to_string
from django.utils.safestring import mark_safe
from django.forms.widgets import flatatt
from django.utils.html import escape
from fluent_contents.models import Placeholder, get_parent_language_code
from fluent_contents.models.managers import get_parent_active_language_choices
from fluent_contents.utils.compat import smart_unicode


class PlaceholderFieldWidget(Widget):
    """
    The widget to render a :class:`fluent_contents.models.PlaceholderField`.

    It outputs a ``<div>`` element which operates as placeholder content area.
    The client-side editor will use that area to display the admin interfaces of the :class:`fluent_contents.models.ContentItem` models.
    """

    class Media:
        js = (
            'fluent_contents/admin/cp_admin.js',
            'fluent_contents/admin/cp_data.js',
            'fluent_contents/admin/cp_plugins.js',
        )
        css = {
            'screen': (
                'fluent_contents/admin/cp_admin.css',
            ),
        }


    def __init__(self, attrs=None, slot=None, plugins=None):
        super(PlaceholderFieldWidget, self).__init__(attrs)
        self.slot = slot
        self._plugins = plugins


    def value_from_datadict(self, data, files, name):
        # This returns the field value from the form POST fields.
        # Currently returns a dummy value, so the PlaceholderFieldDescriptor() can detect it.
        return "-DUMMY-"


    def render(self, name, value, attrs=None):
        """
        Render the placeholder field.
        """
        other_instance_languages = None
        if value and value != "-DUMMY-":
            parent = Placeholder.objects.get(pk=long(value)).parent
            language_code = get_parent_language_code(parent)
            if language_code:
                # Parent is a multilingual object, provide information for the copy dialog.
                other_instance_languages = get_parent_active_language_choices(parent, exclude_current=True)

        context = {
            'cp_plugin_list': list(self.plugins),
            'placeholder_id': '',
            'placeholder_slot': self.slot,
            'other_instance_languages': other_instance_languages,
        }
        return mark_safe(render_to_string('admin/fluent_contents/placeholderfield/widget.html', context))


    @property
    def plugins(self):
        """
        Get the set of plugins that this widget should display.
        """
        from fluent_contents import extensions   # Avoid circular reference because __init__.py imports subfolders too
        if self._plugins is None:
            return extensions.plugin_pool.get_plugins()
        else:
            return extensions.plugin_pool.get_plugins_by_name(*self._plugins)


class WysiwygWidget(AdminTextareaWidget):
    """
    WYSIWYG widget
    """
    def __init__(self, attrs=None):
        defaults = {'rows': 4}
        if attrs:
            defaults.update(attrs)
        super(WysiwygWidget, self).__init__(attrs)

    def render(self, name, value, attrs=None):
        value = smart_unicode(value or u'')
        final_attrs = self.build_attrs(attrs, name=name)

        if 'class' in final_attrs:
            final_attrs['class'] += ' cp-wysiwyg-widget'
        else:
            final_attrs['class'] = 'cp-wysiwyg-widget'

        return mark_safe(u'<textarea{0}>{1}</textarea>'.format(flatatt(final_attrs), escape(value)))

########NEW FILE########
__FILENAME__ = prefix_content_item_types
from django.core.management.base import BaseCommand
from django.utils.translation import ngettext
from fluent_contents.extensions import plugin_pool
from fluent_contents.management import update_model_prefix


class Command(BaseCommand):
    """
    Add a prefix to the name of content items.
    This makes content items easier to spot in the permissions list.
    """
    help = "Update the names of Content Types of plugins, and insert a prefix.\n" \
           "By default, this happens during syncdb. This commands allows to run the update manually." \
           "It makes content items easier to spot in model lists and the list of permissions."

    def handle(self, *args, **options):
        verbosity = options['verbosity']
        num_updated = 0

        for model in plugin_pool.get_model_classes():
            updated = update_model_prefix(model, verbosity=verbosity)
            if updated:
                num_updated += 1

        self.stdout.write(ngettext(u"{count} item updated.", u"{count} items updated.", num_updated).format(count=num_updated) + u" ")

########NEW FILE########
__FILENAME__ = middleware
from django.http import HttpResponseRedirect
from fluent_contents.extensions import HttpRedirectRequest


class HttpRedirectRequestMiddleware(object):
    """
    .. versionadded:: 1.0
    Middleware that handles requests redirects
    """
    def process_exception(self, request, exception):
        """
        Return a redirect response for the :class:`~fluent_contents.ext
        """
        if isinstance(exception, HttpRedirectRequest):
            return HttpResponseRedirect(exception.url, status=exception.status)
        else:
            return None

    def process_template_response(self, request, response):
        """
        Patch a TemplateResponse object to handle ``HttpRedirectRequest`` exceptions too.
        """
        # The process_exception() is not called for TemplateResponse objects,
        # as these objects render outside the "try,call-view,except" block..
        response.render = _new_render(response)
        return response



def _new_render(response):
    """
    Decorator for the TemplateResponse.render() function
    """
    orig_render = response.__class__.render

    # No arguments, is used as bound method.
    def _inner_render():
        try:
            return orig_render(response)
        except HttpRedirectRequest as e:
            return HttpResponseRedirect(e.url, status=e.status)

    return _inner_render

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'Placeholder'
        db.create_table('fluent_contents_placeholder', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('slot', self.gf('django.db.models.fields.SlugField')(max_length=50, db_index=True)),
            ('role', self.gf('django.db.models.fields.CharField')(default='m', max_length=1)),
            ('parent_type', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['contenttypes.ContentType'], null=True, blank=True)),
            ('parent_id', self.gf('django.db.models.fields.IntegerField')(null=True)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=255, blank=True)),
        ))
        db.send_create_signal('fluent_contents', ['Placeholder'])

        # Adding unique constraint on 'Placeholder', fields ['parent_type', 'parent_id', 'slot']
        db.create_unique('fluent_contents_placeholder', ['parent_type_id', 'parent_id', 'slot'])

        # Adding model 'ContentItem'
        db.create_table('fluent_contents_contentitem', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('polymorphic_ctype', self.gf('django.db.models.fields.related.ForeignKey')(related_name='polymorphic_fluent_contents.contentitem_set', null=True, to=orm['contenttypes.ContentType'])),
            ('parent_type', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['contenttypes.ContentType'])),
            ('parent_id', self.gf('django.db.models.fields.IntegerField')(null=True)),
            ('placeholder', self.gf('django.db.models.fields.related.ForeignKey')(related_name='contentitems', null=True, to=orm['fluent_contents.Placeholder'])),
            ('sort_order', self.gf('django.db.models.fields.IntegerField')(default=1)),
        ))
        db.send_create_signal('fluent_contents', ['ContentItem'])


    def backwards(self, orm):
        
        # Removing unique constraint on 'Placeholder', fields ['parent_type', 'parent_id', 'slot']
        db.delete_unique('fluent_contents_placeholder', ['parent_type_id', 'parent_id', 'slot'])

        # Deleting model 'Placeholder'
        db.delete_table('fluent_contents_placeholder')

        # Deleting model 'ContentItem'
        db.delete_table('fluent_contents_contentitem')


    models = {
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['fluent_contents']

########NEW FILE########
__FILENAME__ = 0002_add_contentitem__sort_order__db_index
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding index on 'ContentItem', fields ['sort_order']
        db.create_index('fluent_contents_contentitem', ['sort_order'])


    def backwards(self, orm):
        
        # Removing index on 'ContentItem', fields ['sort_order']
        db.delete_index('fluent_contents_contentitem', ['sort_order'])


    models = {
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1', 'db_index': 'True'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['fluent_contents']

########NEW FILE########
__FILENAME__ = 0003_contentitem_placeholder_on_delete_set_null
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Changing field 'ContentItem.placeholder'
        db.alter_column('fluent_contents_contentitem', 'placeholder_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, on_delete=models.SET_NULL, to=orm['fluent_contents.Placeholder']))
    def backwards(self, orm):

        # Changing field 'ContentItem.placeholder'
        db.alter_column('fluent_contents_contentitem', 'placeholder_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['fluent_contents.Placeholder']))
    models = {
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1', 'db_index': 'True'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['fluent_contents']
########NEW FILE########
__FILENAME__ = 0004_add_contentitem__language_code
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'ContentItem.language_code'
        db.add_column(u'fluent_contents_contentitem', 'language_code',
                      self.gf('django.db.models.fields.CharField')(default='', max_length=15, db_index=True),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'ContentItem.language_code'
        db.delete_column(u'fluent_contents_contentitem', 'language_code')


    models = {
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language_code': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '15', 'db_index': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': u"orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1', 'db_index': 'True'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['fluent_contents']
########NEW FILE########
__FILENAME__ = 0005_fill_contentitem__language_code
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models
from fluent_contents import appsettings


class Migration(DataMigration):

    def forwards(self, orm):
        "Write your forwards methods here."
        orm['fluent_contents.ContentItem'].objects.filter(language_code='').update(language_code=appsettings.FLUENT_CONTENTS_DEFAULT_LANGUAGE_CODE)

    def backwards(self, orm):
        pass

    models = {
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language_code': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '15', 'db_index': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': u"orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1', 'db_index': 'True'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['fluent_contents']
    symmetrical = True

########NEW FILE########
__FILENAME__ = db
from django.contrib.contenttypes.generic import GenericForeignKey
from django.contrib.contenttypes.models import ContentType
from django.core.cache import cache
from django.core.exceptions import FieldError
from django.db import models
from django.dispatch import receiver
from django.utils.translation import ugettext_lazy as _
from parler.signals import post_translation_delete
from parler.utils import get_language_title
from polymorphic import PolymorphicModel
from polymorphic.base import PolymorphicModelBase
from fluent_contents import appsettings
from fluent_contents.models.managers import PlaceholderManager, ContentItemManager, get_parent_language_code


class Placeholder(models.Model):
    """
    The placeholder groups various :class:`ContentItem` models together in a single compartment.
    It is the reference point to render custom content.
    Each placeholder is identified by a `slot` name and `parent` object.

    Optionally, the placeholder can have a `title`, and `role`.
    The role is taken into account by the client-side placeholder editor when a page switches template layouts.
    Content items are migrated to the apropriate placeholder, first matched by slot name, secondly matched by role.

    The parent object is stored in a generic relation, so the placeholder can be used with any custom object.
    By adding a :class:`~fluent_contents.models.PlaceholderRelation` field to the parent model, the relation can be traversed backwards.
    From the placeholder, the :attr:`contentitem_set` can be traversed to find the associated :class:`ContentItem` objects.
    Since a :class:`ContentItem` is polymorphic, the actual sub classes of the :class:`ContentItem` will be returned by the query.
    To prevent this behavior, call :func:`~polymorphic.query.PolymorphicQuerySet.non_polymorphic` on the `QuerySet`.
    """
    # The 'role' field is useful for layout switching by a CMS,
    # e.g. moving from a 2-col layout to a 3-col layout.
    # Based on the role of the placeholders, meaningful conversions can be made.
    MAIN = 'm'
    SIDEBAR = 's'
    RELATED = 'r'
    ROLES = (
        (MAIN, _('Main content')),
        (SIDEBAR, _('Sidebar content')),
        (RELATED, _('Related content'))
    )

    slot = models.SlugField(_('Slot'), help_text=_("A short name to identify the placeholder in the template code."))
    role = models.CharField(_('Role'), max_length=1, choices=ROLES, default=MAIN, help_text=_("This defines where the object is used."))

    # Track relation to parent (e.g. page or article)
    parent_type = models.ForeignKey(ContentType, null=True, blank=True)  # Used to be null for global placeholders, but the 'sharedcontent' plugin solves this issue.
    parent_id = models.IntegerField(null=True)    # Need to allow Null, because Placeholder is created before parent is saved.
    parent = GenericForeignKey('parent_type', 'parent_id')

    title = models.CharField(_('Admin title'), max_length=255, blank=True)

    objects = PlaceholderManager()

    class Meta:
        app_label = 'fluent_contents'  # required for subfolder
        verbose_name = _("Placeholder")
        verbose_name_plural = _("Placeholders")
        unique_together = ('parent_type', 'parent_id', 'slot')

    def __unicode__(self):
        return self.title or self.slot


    def get_allowed_plugins(self):
        """
        Return the plugins which are supported in this placeholder.
        """
        from fluent_contents import extensions  # avoid circular import
        return extensions.plugin_pool.get_allowed_plugins(self.slot)


    def get_content_items(self, parent=None, limit_parent_language=True):
        """
        Return all models which are associated with this placeholder.
        Because a :class:`ContentItem` is polymorphic, the actual sub classes of the content item will be returned by the query.

        By passing the :attr:`parent` object, the items can additionally
        be filtered by the parent language.
        """
        item_qs = self.contentitems.all()   # django-polymorphic FTW!

        if parent:
            # Filtering by parent should return the same results,
            # unless the database is broken by having objects reference the wrong placeholders.
            # Additionally, the `limit_parent_language` argument is supported.
            item_qs = item_qs.parent(parent, limit_parent_language=limit_parent_language)
        else:
            # For accurate rendering filtering by parent is needed.
            # Otherwise, we risk returning stale objects which are indeed attached to this placeholder,
            # but belong to a different parent. This can only happen when manually changing database contents.
            # The admin won't display anything, as it always filters the parent. Hence, do the same for other queries.
            item_qs = item_qs.filter(
                parent_type_id=self.parent_type_id,
                parent_id=self.parent_id
            )

        return item_qs


    def get_absolute_url(self):
        """
        Return the URL of the parent object, if it has one.
        This method mainly exists to support cache mechanisms (e.g. refreshing a Varnish cache), and assist in debugging.
        """
        if not self.parent_id or not self.parent_type_id:
            return None

        try:
            return self.parent.get_absolute_url()
        except AttributeError:
            return None

    def delete(self, using=None):
        # Workaround for the fact that South 0.7.4 does not support on_delete=SET_NULL yet
        # It doesn't add that attribute to the foreign key, causing a DatabaseError instead.
        ContentItem.objects.filter(placeholder=self).update(placeholder=None)
        super(Placeholder, self).delete(using)

    delete.alters_data = True



class ContentItemMetaClass(PolymorphicModelBase):
    """
    Metaclass for all plugin models.

    Set db_table if it has not been customized.
    """
    # Inspired by from Django-CMS, (c) , BSD licensed.

    def __new__(mcs, name, bases, attrs):
        new_class = super(ContentItemMetaClass, mcs).__new__(mcs, name, bases, attrs)
        db_table  = new_class._meta.db_table
        app_label = new_class._meta.app_label

        if name != 'ContentItem':
            if db_table.startswith(app_label + '_'):
                model_name = db_table[len(app_label)+1:]
                new_class._meta.db_table = "contentitem_%s_%s" % (app_label, model_name)

            # Enforce good manners. The name is often not visible, except for the delete page.
            if not hasattr(new_class, '__unicode__') or new_class.__unicode__ == ContentItem.__unicode__:
                raise FieldError("The {0} class should implement a __unicode__() function.".format(name))

        return new_class


class ContentItem(PolymorphicModel):
    """
    A `ContentItem` represents a content part (also called pagelet in other systems) which is displayed in a :class:`Placeholder`.
    To use the `ContentItem`, derive it in your model class:

    .. code-block:: python

        class ExampleItem(ContentItem):
            # any custom fields here

            class Meta:
                verbose_name = "Example item"

    The `ContentItem` class is polymorphic; when querying the objects, the derived instances will be returned automatically:

    >>> from fluent_contents.models import ContentItem
    >>> ContentItem.objects.all()
    [<ArticleTextItem: Main article>, <RawHtmlItem: test>, <CodeItem: def foo(): print 1>,
    <AnnouncementBlockItem: Test>, <ArticleTextItem: Text in sidebar>]

    Note that the `django-polymorphic` application is written in such way, that this requires the least amount of queries necessary.
    When access to the polymorphic classes is not needed, call :func:`~polymorphic.query.PolymorphicQuerySet.non_polymorphic` on the `QuerySet` to prevent this behavior:

    >>> from fluent_contents.models import ContentItem
    >>> ContentItem.objects.all().non_polymorphic()
    [<ContentItem: Article text item#1 in 'Main content'>, <ContentItem: HTML code#5 in 'Main content'>, <ContentItem: Code snippet#6 in 'Main content'>,
    <ContentItem: Announcement block#7 in 'Main content'>, <ContentItem: Article text item#4 in 'Sidebar'>]

    Being polymorphic also means the base class provides some additional methods such as:

    * :func:`get_real_instance`
    * :func:`get_real_instance_class`

    Each `ContentItem` references both it's parent object (e.g. a page, or article), and the placeholder.
    While this is done mainly for internal reasons, it also provides an easy way to query all content items of a parent.
    The parent object is stored in a generic relation, so the `ContentItem` can be used with any custom object.
    By adding a :class:`~fluent_contents.models.ContentItemRelation` field to the parent model, the relation can be traversed backwards.

    Because the `ContentItem` references it's parent, and not the other way around,
    it will be cleaned up automatically by Django when the parent object is deleted.

    To use a `ContentItem` in the :class:`~fluent_contents.models.PlaceholderField`,
    register it via a plugin definition. see the :class:`~fluent_contents.extensions.ContentPlugin` class for details.

    The rendering of a `ContentItem` class happens in the associate :class:`~fluent_contents.extensions.ContentPlugin` class.
    To render content items outside the template code, use the :mod:`fluent_contents.rendering` module to render the items.
    """
    __metaclass__ = ContentItemMetaClass
    objects = ContentItemManager()

    # Note the validation settings defined here are not reflected automatically
    # in the admin interface because it uses a custom ModelForm to handle these fields.

    # Track relation to parent
    # This makes it much easier to use it as inline.
    parent_type = models.ForeignKey(ContentType)
    parent_id = models.IntegerField(null=True)    # Need to allow Null, because Placeholder is created before parent is saved.
    parent = GenericForeignKey('parent_type', 'parent_id')
    language_code = models.CharField(max_length=15, db_index=True, editable=False, default='')

    # Deleting a placeholder should not remove the items, only makes them orphaned.
    # Also, when updating the page, the PlaceholderEditorInline first adds/deletes placeholders before the items are updated.
    placeholder = models.ForeignKey(Placeholder, related_name='contentitems', null=True, on_delete=models.SET_NULL)
    sort_order = models.IntegerField(default=1, db_index=True)


    @property
    def plugin(self):
        """
        Access the parent plugin which renders this model.

        :rtype: :class:`~fluent_contents.extensions.ContentPlugin`
        """
        from fluent_contents.extensions import plugin_pool
        if self.__class__ in (ContentItem,):
            # Also allow a non_polymorphic() queryset to resolve the plugin.
            # Corresponding plugin_pool method is still private on purpose.
            # Not sure the utility method should be public, or how it should be named.
            return plugin_pool._get_plugin_by_content_type(self.polymorphic_ctype_id)
        else:
            return plugin_pool.get_plugin_by_model(self.__class__)


    def __unicode__(self):
        # Note this representation is optimized for the admin delete page.
        return u"'{type} {id:d}' in '{language} {placeholder}'".format(
            type=ContentType.objects.get_for_id(self.polymorphic_ctype_id).model_class()._meta.verbose_name,
            id=self.id or 0,
            language=get_language_title(self.language_code),
            placeholder=self.placeholder
        )


    class Meta:
        app_label = 'fluent_contents'  # required for models subfolder
        ordering = ('placeholder', 'sort_order')
        verbose_name = _('Contentitem link')
        verbose_name_plural = _('Contentitem links')


    def get_absolute_url(self):
        """
        Return the URL of the parent object, if it has one.
        This method mainly exists to refreshing cache mechanisms.
        """
        # Allows quick debugging, and cache refreshes.
        parent = self.parent
        try:
            return parent.get_absolute_url()
        except AttributeError:
            return None


    def save(self, *args, **kwargs):
        # Fallback, make sure the object has a language.
        # As this costs a query per object, the admin formset already sets the language_code whenever it can.
        if not self.language_code:
            self.language_code = get_parent_language_code(self.parent) or appsettings.FLUENT_CONTENTS_DEFAULT_LANGUAGE_CODE

        is_new = not self.pk
        super(ContentItem, self).save(*args, **kwargs)
        if not is_new:
            self.clear_cache()

    save.alters_data = True


    def delete(self, *args, **kwargs):
        super(ContentItem, self).delete(*args, **kwargs)
        self.clear_cache()

    # Must restore these options, or risk removing with a template print statement.
    delete.alters_data = True


    def clear_cache(self):
        """
        Delete the cache keys associated with this model.
        """
        for cache_key in self.get_cache_keys():
            cache.delete(cache_key)

    clear_cache.alters_data = True


    def get_cache_keys(self):
        """
        Get a list of all cache keys associated with this model.
        This queries the associated plugin for the cache keys it used to store the output at.
        """
        if not self.placeholder_id:
            # TODO: prune old placeholder slot name?
            return []

        # As plugins can change the output caching,
        # they should also return which keys content is stored at.
        placeholder_name = self.placeholder.slot
        keys = []  # ensure list return type.
        keys.extend(self.plugin.get_output_cache_keys(placeholder_name, self))
        return keys



# Instead of overriding the admin classes (effectively inserting the TranslatableAdmin
# in all your PlaceholderAdmin subclasses too), a signal is handled instead.
# It's up to you to deside whether the use the TranslatableAdmin (or any other similar class)
# in your admin for multilingual support. As long as the models provide a get_current_language()
# or `language_code` attribute, the correct contents will be filtered and displayed.
@receiver(post_translation_delete)
def on_delete_model_translation(instance, **kwargs):
    """
    Make sure ContentItems are deleted when a translation in deleted.
    """
    translation = instance

    parent_object = translation.master
    parent_object.set_current_language(translation.language_code)

    # Also delete any associated plugins
    # Placeholders are shared between languages, so these are not affected.
    for item in ContentItem.objects.parent(parent_object, limit_parent_language=True):
        item.delete()  # Delete per item, to trigger cache clearing

########NEW FILE########
__FILENAME__ = fields
import django
from django.contrib.contenttypes.generic import GenericRelation, GenericRel
from django.contrib.contenttypes.models import ContentType
from django.db import DEFAULT_DB_ALIAS
from django.db.models.query_utils import Q
from django.utils.functional import lazy
from django.utils.text import capfirst
from fluent_contents import appsettings
from fluent_contents.forms.fields import PlaceholderFormField
from fluent_contents.models import Placeholder, ContentItem

__all__ = (
    'PlaceholderRelation', 'ContentItemRelation',
    'PlaceholderField',
)

# The PlaceholderField is inspired by Django CMS
# Yet uses a different methology to access the fields.
#
# In Django CMS it's a ForeignKey to Placeholder.
# Here, the Placeholder has a GenericForeignKey to the parent - hence it will be deleted when the parent is removed -
# so the PlaceholderField is merely a reverse GenericRelation.
#
# In the admin, the logic of the PlaceholderEditor code can be reused.


class PlaceholderRelation(GenericRelation):
    """
    A :class:`~django.contrib.contenttypes.generic.GenericRelation` which can be applied to a parent model that
    is expected to be referenced be a :class:`~fluent_contents.models.Placeholder`. For example:

    .. code-block:: python

        class Page(models.Model):
            placeholder_set = PlaceholderRelation()
    """
    def __init__(self, **kwargs):
        defaults = {
            'limit_choices_to': Q(
                parent_type=lazy(lambda: ContentType.objects.get_for_model(Placeholder), ContentType)()
            )
        }
        defaults.update(kwargs)
        super(PlaceholderRelation, self).__init__(to=Placeholder,
            object_id_field='parent_id', content_type_field='parent_type', **defaults)


class ContentItemRelation(GenericRelation):
    """
    A :class:`~django.contrib.contenttypes.generic.GenericRelation` which can be applied to a parent model that
    is expected to be referenced by the :class:`~fluent_contents.models.ContentItem` classes. For example:

    .. code-block:: python

        class Page(models.Model):
            contentitem_set = ContentItemRelation()

    Adding this relation also causes the admin delete page to list the
    :class:`~fluent_contents.models.ContentItem` objects which will be deleted.
    """
    def __init__(self, **kwargs):
        super(ContentItemRelation, self).__init__(to=ContentItem,
            object_id_field='parent_id', content_type_field='parent_type', **kwargs)

    def bulk_related_objects(self, objs, using=DEFAULT_DB_ALIAS):
        # Fix delete screen. Workaround for https://github.com/chrisglass/django_polymorphic/issues/34
        return super(ContentItemRelation, self).bulk_related_objects(objs).non_polymorphic()


class PlaceholderRel(GenericRel):
    """
    The internal :class:`~django.contrib.contenttypes.generic.GenericRel`
    that is used by the :class:`PlaceholderField` to support queries.
    """
    def __init__(self, field):
        limit_choices_to = Q(
            parent_type=lazy(lambda: ContentType.objects.get_for_model(Placeholder), ContentType)(),
            slot=field.slot,
        )

        # TODO: make sure reverse queries work properly
        if django.VERSION >= (1, 6, 0):
            super(PlaceholderRel, self).__init__(
                field=field,
                to=Placeholder,
                related_name=None,  # NOTE: must be unique for app/model/slot.
                limit_choices_to=limit_choices_to
            )
        else:
            super(PlaceholderRel, self).__init__(
                to=Placeholder,
                related_name=None,  # NOTE: must be unique for app/model/slot.
                limit_choices_to=limit_choices_to
            )


class PlaceholderFieldDescriptor(object):
    """
    This descriptor is placed on the PlaceholderField model instance
    by the :func:`~PlaceholderField.contribute_to_class` function.
    This causes ``instance.field`` to return a :class:`~fluent_contents.models.Placeholder` object.
    """
    def __init__(self, slot):
        """Set the slot this descriptor is created for."""
        self.slot = slot


    def __get__(self, instance, instance_type=None):
        """Return the placeholder by slot."""
        if instance is None:
            return self
        try:
            placeholder = Placeholder.objects.get_by_slot(instance, self.slot)
        except Placeholder.DoesNotExist:
            raise Placeholder.DoesNotExist("Placeholder does not exist for parent {0} (type_id: {1}, parent_id: {2}), slot: '{3}'".format(
                repr(instance),
                ContentType.objects.get_for_model(instance).pk,
                instance.pk,
                self.slot
            ))
        else:
            placeholder.parent = instance  # fill the reverse cache
            return placeholder


    def __set__(self, instance, value):
        if instance is None:
            raise AttributeError("Descriptor must be accessed via instance")

        if value == "-DUMMY-":
            return

        raise NotImplementedError("Setting Placeholder value is not supported, use Placeholder.objects.create_for_object() instead.")


class PlaceholderField(PlaceholderRelation):
    """
    The model field to add :class:`~fluent_contents.models.ContentItem` objects to a model.

    :param slot: A programmatic name to identify the placeholder.
    :param plugins: Optional, define which plugins are allowed to be used. This can be a list of names, or :class:`~fluent_contents.extensions.ContentPlugin` references.
    :type slot: str
    :type plugins: list

    This class provides the form fields for the field. Use this class in a model to use it:

    .. code-block:: python

        class Article(models.Model):
            contents = PlaceholderField("article_contents")

    The data itself is stored as reverse relation in the :class:`~fluent_contents.models.ContentItem` object.
    Hence, all contents will be cleaned up properly when the parent model is deleted.

    The placeholder will be displayed in the admin:

    .. image:: /images/admin/placeholderfieldadmin1.png
       :width: 770px
       :height: 562px
       :alt: django-fluent-contents placeholder field preview
    """
    def __init__(self, slot, plugins=None, **kwargs):
        """
        Initialize the placeholder field.
        """
        super(PlaceholderField, self).__init__(**kwargs)
        self.slot = slot

        # See if a plugin configuration is defined in the settings
        self._slot_config = appsettings.FLUENT_CONTENTS_PLACEHOLDER_CONFIG.get(slot) or {}
        self._plugins = plugins or self._slot_config.get('plugins') or None

        # Overwrite some hardcoded defaults from the base class.
        self.editable = True
        self.blank = True                     # TODO: support blank: False to enforce adding at least one plugin.
        self.rel = PlaceholderRel(self)       # This support queries


    def formfield(self, **kwargs):
        """
        Returns a :class:`PlaceholderFormField` instance for this database Field.
        """
        defaults = {
            'label': capfirst(self.verbose_name),
            'help_text': self.help_text,
            'required': not self.blank,
        }
        defaults.update(kwargs)
        return PlaceholderFormField(slot=self.slot, plugins=self._plugins, **defaults)


    def contribute_to_class(self, cls, name):
        """
        Internal Django method to associate the field with the Model; it assigns the descriptor.
        """
        super(PlaceholderField, self).contribute_to_class(cls, name)

        # overwrites what instance.<colname> returns; give direct access to the placeholder
        setattr(cls, name, PlaceholderFieldDescriptor(self.slot))

        # Make placeholder fields easy to find
        # Can't assign this to cls._meta because that gets overwritten by every level of model inheritance.
        if not hasattr(cls, '_meta_placeholder_fields'):
            cls._meta_placeholder_fields = {}
        cls._meta_placeholder_fields[name] = self

        # Configure the revere relation if possible.
        # TODO: make sure reverse queries work properly
        if self.rel.related_name is None:
            # Make unique for model (multiple models can use same slotnane)
            self.rel.related_name = '{app}_{model}_{slot}_FIXME'.format(
                app=cls._meta.app_label,
                model=cls._meta.object_name.lower(),
                slot=self.slot
            )

            # Remove attribute must exist for the delete page. Currently it's not actively used.
            # The regular ForeignKey assigns a ForeignRelatedObjectsDescriptor to it for example.
            # In this case, the PlaceholderRelation is already the reverse relation.
            # Being able to move forward from the Placeholder to the derived models does not have that much value.
            setattr(self.rel.to, self.rel.related_name, None)


    @property
    def plugins(self):
        """
        Get the set of plugins that this field may display.
        """
        from fluent_contents import extensions
        if self._plugins is None:
            return extensions.plugin_pool.get_plugins()
        else:
            try:
                return extensions.plugin_pool.get_plugins_by_name(*self._plugins)
            except extensions.PluginNotFound as e:
                raise extensions.PluginNotFound(str(e) + " Update the plugin list of '{0}.{1}' field or FLUENT_CONTENTS_PLACEHOLDER_CONFIG['{2}'] setting.".format(self.model._meta.object_name, self.name, self.slot))


    def value_from_object(self, obj):
        """
        Internal Django method, used to return the placeholder ID when exporting the model instance.
        """
        try:
            # not using self.attname, access the descriptor instead.
            placeholder = getattr(obj, self.name)
        except Placeholder.DoesNotExist:
            return None   # Still allow ModelForm / admin to open and create a new Placeholder if the table was truncated.

        return placeholder.id if placeholder else None  # Be consistent with other fields, like ForeignKey



try:
    from south.modelsinspector import add_ignored_fields
except ImportError:
    pass
else:
    # South 0.7.x ignores GenericRelation fields but doesn't ignore subclasses.
    # Taking the same fix as applied in http://south.aeracode.org/ticket/414
    _name_re = "^" + __name__.replace(".", "\.")
    add_ignored_fields((
        _name_re + "\.PlaceholderField",
        _name_re + "\.PlaceholderRelation",
        _name_re + "\.ContentItemRelation",
    ))

########NEW FILE########
__FILENAME__ = managers
"""
The manager classes are accessed via ``Placeholder.objects``.
"""
from django.db import models
from django.contrib.contenttypes.models import ContentType
from django.utils.translation import get_language
from parler.utils import get_language_title
from polymorphic import PolymorphicManager, PolymorphicQuerySet


class PlaceholderManager(models.Manager):
    """
    Extra methods for the ``Placeholder.objects``.
    """

    def parent(self, parent_object):
        """
        Return all placeholders which are associated with a given parent object.
        """
        lookup = get_parent_lookup_kwargs(parent_object)
        return self.get_query_set().filter(**lookup)


    def get_by_slot(self, parent_object, slot):
        """
        Return a placeholder by key.
        """
        return self.parent(parent_object).get(slot=slot)


    def create_for_object(self, parent_object, slot):
        """
        Create a placeholder with the given parameters
        """
        parent_attrs = get_parent_lookup_kwargs(parent_object)
        return self.create(slot=slot, **parent_attrs)


class ContentItemQuerySet(PolymorphicQuerySet):
    """
    QuerySet methods for ``ContentItem.objects.``.
    """
    def translated(self, *language_codes):
        """
        .. versionadded:: 1.0

        Only return translated objects which of the given languages.

        When no language codes are given, only the currently active language is returned.
        """
        # this API has the same semantics as django-parler's .translated() for familiarity.
        # However, since this package doesn't filter in a related field, the ORM limitations don't apply.
        if not language_codes:
            language_codes = (get_language(),)
        else:
            # Since some code operates on a True/str switch, make sure that doesn't drip into this low level code.
            for language_code in language_codes:
                if not isinstance(language_code, basestring) or language_code.lower() in ('1', '0', 'true', 'false'):
                    raise ValueError("ContentItemQuerySet.translated() expected language_code to be an ISO code")

        if len(language_codes) == 1:
            return self.filter(language_code=language_codes[0])
        else:
            return self.filter(language_code__in=language_codes)


    def parent(self, parent_object, limit_parent_language=True):
        """
        Return all content items which are associated with a given parent object.
        """
        lookup = get_parent_lookup_kwargs(parent_object)

        # Filter the items by default, giving the expected "objects for this parent" items
        # when the parent already holds the language state.
        if limit_parent_language:
            language_code = get_parent_language_code(parent_object)
            if language_code:
                lookup['language_code'] = language_code

        return self.filter(**lookup)


    def clear_cache(self):
        """
        .. versionadded:: 1.0 Clear the cache of the selected entries.

        This method is not available on the manager class, only the queryset
        (similar to the :func:`~django.db.models.query.QuerySet.delete` method).
        """
        for contentitem in self:
            contentitem.clear_cache()

    clear_cache.alters_data = True


class ContentItemManager(PolymorphicManager):
    """
    Extra methods for ``ContentItem.objects``.
    """
    queryset_class = ContentItemQuerySet


    def translated(self, *language_codes):
        """
        .. versionadded:: 1.0

        Only return translated objects which of the given languages.

        When no language codes are given, only the currently active language is returned.
        """
        return self.get_query_set().translated(language_codes)


    def parent(self, parent_object, limit_parent_language=True):
        """
        Return all content items which are associated with a given parent object.
        """
        return self.get_query_set().parent(parent_object, limit_parent_language)


    def create_for_placeholder(self, placeholder, sort_order=1, **kwargs):
        """
        Create a Content Item with the given parameters
        """
        return self.create(
            placeholder=placeholder,
            parent_type_id=placeholder.parent_type_id,
            parent_id=placeholder.parent_id,
            sort_order=sort_order,
            **kwargs
        )


# This low-level function is used for both ContentItem and Placeholder objects.
# Only the first has language_code support, the second one not.
def get_parent_lookup_kwargs(parent_object):
    """
    Return lookup arguments for the generic ``parent_type`` / ``parent_id`` fields.

    :param parent_object: The parent object.
    :type parent_object: :class:`~django.db.models.Model`
    """
    if parent_object is None:
        return dict(
            parent_type__isnull=True,
            parent_id=0
        )
    elif isinstance(parent_object, models.Model):
        return dict(
            parent_type=ContentType.objects.get_for_model(parent_object),
            parent_id=parent_object.pk
        )
    else:
        raise ValueError("parent_object is not a model!")


def get_parent_language_code(parent_object):
    """
    .. versionadded:: 1.0

    Return the parent object language code.

    Tries to access ``get_current_language()`` and ``language_code`` attributes on the parent object.
    """
    if parent_object is None:
        return None

    try:
        # django-parler uses this attribute
        return parent_object.get_current_language()
    except AttributeError:
        pass

    try:
        # E.g. ContentItem.language_code
        return parent_object.language_code
    except AttributeError:
        pass

    return None


def get_parent_active_language_choices(parent_object, exclude_current=False):
    """
    .. versionadded:: 1.0

    Get the currently active languages of an parent object.

    Note: if there is no content at the page, the language won't be returned.
    """
    assert parent_object is not None, "Missing parent_object!"

    from .db import ContentItem
    qs = ContentItem.objects \
        .parent(parent_object, limit_parent_language=False) \
        .values_list('language_code', flat=True).distinct()

    languages = set(qs)

    if exclude_current:
        parent_lang = get_parent_language_code(parent_object)
        try:
            languages.remove(parent_lang)
        except KeyError:
            pass

    # No multithreading issue here, object is instantiated for this user only.
    choices = [(lang, unicode(get_language_title(lang))) for lang in languages]
    choices.sort(key=lambda tup: tup[1])
    return choices

########NEW FILE########
__FILENAME__ = appsettings
"""
Settings for the code plugin.
"""
from django.conf import settings

_defaultShortlist = (
    #'as',
    'as3',
    #'aspx-cs',
    #'aspx-vb',
    'bash',
    'c',
    'cpp',
    'csharp',
    'css',
    'html',
    #'html+php',
    'java',
    'js',
    #'jsp',
    'make',
    'objective-c',
    'perl',
    'php',
    'python',
    'sql',
    'ruby',
    'vb.net',
    'xml',
    'xslt',
)

FLUENT_CODE_DEFAULT_LANGUAGE = getattr(settings, "FLUENT_CODE_DEFAULT_LANGUAGE", 'html')
FLUENT_CODE_STYLE = getattr(settings, 'FLUENT_CODE_STYLE', 'default')
FLUENT_CODE_DEFAULT_LINE_NUMBERS = getattr(settings, 'FLUENT_CODE_DEFAULT_LINE_NUMBERS', False)
FLUENT_CODE_SHORTLIST = getattr(settings, 'FLUENT_CODE_SHORTLIST', _defaultShortlist)
FLUENT_CODE_SHORTLIST_ONLY = getattr(settings, 'FLUENT_CODE_SHORTLIST_ONLY', False)

########NEW FILE########
__FILENAME__ = backend
"""
Using pygments to render the code.
"""
from pygments import highlight, styles
from pygments.lexers import get_all_lexers, get_lexer_by_name
from pygments.formatters.html import HtmlFormatter
from pygments.styles import get_all_styles
from django.utils.translation import ugettext as _
from fluent_contents.plugins.code import appsettings

STYLE_CHOICES = map(lambda x: (x,x), get_all_styles())
STYLE_CHOICES.sort(lambda x,y: cmp(x[1].lower(), y[1].lower()))

_languageChoices = [(x[1][0], x[0]) for x in get_all_lexers() if x[1]]   # x = ('Title', ('name1', 'name2', 'nameN'), ('*.ext1', '*.ext2'), ('mimetype1',))
_languageChoices.sort(lambda x,y: cmp(x[1].lower(), y[1].lower()))

LANGUAGE_CHOICES = tuple([t for t in _languageChoices if t[0] in appsettings.FLUENT_CODE_SHORTLIST])
if not appsettings.FLUENT_CODE_SHORTLIST_ONLY:
    LANGUAGE_CHOICES += (_('Combinations'), [t for t in _languageChoices if '+' in t[0]]),
    LANGUAGE_CHOICES += (_('Advanced'), [t for t in _languageChoices if '+' not in t[0] and t[0] not in appsettings.FLUENT_CODE_SHORTLIST]),


def render_code(instance, style_name='default'):
    # Some interesting options in the HtmlFormatter:
    # - nowrap       -> no wrap inside <pre>
    # - classprefix  -> prefix for the classnames
    # - noclasses    -> all inline styles.
    #
    # To get_style_defs(), you can pass a selector prefix.
    #
    style = styles.get_style_by_name(style_name)
    formatter = HtmlFormatter(linenos=instance.linenumbers, style=style, nowrap=True, classprefix='code%s-' % instance.pk)
    html = highlight(instance.code, get_lexer_by_name(instance.language), formatter)
    css = formatter.get_style_defs()

    # Included in a DIV, so the next item will be displayed below.
    return '<div class="code"><style type="text/css">' + css + '</style>\n<pre>' + html + '</pre></div>\n'

# TODO: Make code rendering more efficient, have one style definition in the head of the page!

########NEW FILE########
__FILENAME__ = content_plugins
"""
Definition of the plugin.
"""
from django.utils.safestring import mark_safe
from django.utils.translation import ugettext_lazy as _
from fluent_contents.extensions import ContentPlugin, plugin_pool
from fluent_contents.plugins.code.models import CodeItem
from fluent_contents.plugins.code import appsettings, backend


@plugin_pool.register
class CodePlugin(ContentPlugin):
    model = CodeItem
    category = _('Programming')
    admin_form_template = "admin/fluent_contents/plugins/code/admin_form.html"
    render_template = "fluent_contents/plugins/code/code.html"

    class Media:
        css = {'screen': ('fluent_contents/code/code_admin.css',)}

    def get_context(self, request, instance, **kwargs):
        # Style is not stored in the model,
        # it needs to be a side-wide setting (maybe even in the theme)
        code = mark_safe(backend.render_code(instance, style_name=appsettings.FLUENT_CODE_STYLE))

        context = super(CodePlugin, self).get_context(request, instance, **kwargs)
        context.update({
            'code': code,
        })
        return context

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):
    depends_on = (
        ("fluent_contents", "0001_initial"),
    )

    def forwards(self, orm):
        
        # Adding model 'CodeItem'
        db.create_table('contentitem_code_codeitem', (
            ('contentitem_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['fluent_contents.ContentItem'], unique=True, primary_key=True)),
            ('language', self.gf('django.db.models.fields.CharField')(default='html', max_length=50)),
            ('code', self.gf('django.db.models.fields.TextField')()),
            ('linenumbers', self.gf('django.db.models.fields.BooleanField')(default=False)),
        ))
        db.send_create_signal('code', ['CodeItem'])


    def backwards(self, orm):
        
        # Deleting model 'CodeItem'
        db.delete_table('contentitem_code_codeitem')


    models = {
        'code.codeitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'CodeItem', 'db_table': "'contentitem_code_codeitem'", '_ormbases': ['fluent_contents.ContentItem']},
            'code': ('django.db.models.fields.TextField', [], {}),
            'contentitem_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['fluent_contents.ContentItem']", 'unique': 'True', 'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'default': "'html'", 'max_length': '50'}),
            'linenumbers': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['code']

########NEW FILE########
__FILENAME__ = models
from django.db import models
from django.utils.text import Truncator
from django.utils.translation import ugettext_lazy as _
from fluent_contents.models import ContentItem
from fluent_contents.plugins.code import backend, appsettings


class CodeItem(ContentItem):
    """
    A snippet of source code, formatted with syntax highlighting.
    """

    language = models.CharField(_('Language'), max_length=50, choices=backend.LANGUAGE_CHOICES, default=appsettings.FLUENT_CODE_DEFAULT_LANGUAGE)
    code = models.TextField(_('Code'))
    linenumbers = models.BooleanField(_('Show line numbers'), default=appsettings.FLUENT_CODE_DEFAULT_LINE_NUMBERS)

    class Meta:
        verbose_name = _('Code snippet')
        verbose_name_plural = _('Code snippets')

    def __unicode__(self):
        return Truncator(self.code).words(20)

########NEW FILE########
__FILENAME__ = appsettings
"""
Settings for the markup part.
"""
from django.conf import settings
from django.core.exceptions import ImproperlyConfigured


COMMENTS_APP = getattr(settings, 'COMMENTS_APP', 'comments')
FLUENT_COMMENTSAREA_THREADEDCOMMENTS = 'threadedcomments' in settings.INSTALLED_APPS


# Test threadedcomments support
if FLUENT_COMMENTSAREA_THREADEDCOMMENTS:
    try:
        from threadedcomments.templatetags import threadedcomments_tags
    except ImportError:
        raise ImportError("The 'threadedcomments' package is too old to use for the 'commentsarea' plugin.")

    # Avoid getting an error that the Form misses a parent parameter.
    # The threadedcomments module needs to separate COMMENTS_APP setting.
    if not COMMENTS_APP or COMMENTS_APP == 'comments':
        raise ImproperlyConfigured("To use 'threadedcomments', specify the COMMENTS_APP as well")

########NEW FILE########
__FILENAME__ = content_plugins
"""
Comments area plugin.

This plugin package is not called "comments" as that conflicts
with the `django.contrib.comments` appname. Hence, "commentsarea" it is.

The plugin displays the form and messagelist that ``django.contrib.comments`` renders.
Hence, it depends on a properly configured contrib module.
The least you need to do, is:

  * providing a ``comments/base.html`` template.
   * include a ``title`` block that is displayed in the ``<head>`` of the base template.
   * include a ``content`` block that is displayed in the ``<body>`` of the base template.
  * provide a ``comments/posted.html`` template for the success page.
   * It could contains links to the blog page.
   * It could redirect automatically back to the blog in a few seconds.
"""
from django.utils.translation import ugettext_lazy as _
from fluent_contents.extensions import ContentPlugin, plugin_pool
from fluent_contents.plugins.commentsarea.models import CommentsAreaItem


@plugin_pool.register
class CommentsAreaPlugin(ContentPlugin):
    model = CommentsAreaItem
    category = _('Interactivity')
    render_template = "fluent_contents/plugins/commentsarea/commentsarea.html"

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):
    depends_on = (
        ("fluent_contents", "0001_initial"),
    )

    def forwards(self, orm):
        
        # Adding model 'CommentsAreaItem'
        db.create_table('contentitem_commentsarea_commentsareaitem', (
            ('contentitem_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['fluent_contents.ContentItem'], unique=True, primary_key=True)),
            ('allow_new', self.gf('django.db.models.fields.BooleanField')(default=True)),
        ))
        db.send_create_signal('commentsarea', ['CommentsAreaItem'])


    def backwards(self, orm):
        
        # Deleting model 'CommentsAreaItem'
        db.delete_table('contentitem_commentsarea_commentsareaitem')


    models = {
        'commentsarea.commentsareaitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'CommentsAreaItem', 'db_table': "'contentitem_commentsarea_commentsareaitem'", '_ormbases': ['fluent_contents.ContentItem']},
            'allow_new': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'contentitem_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['fluent_contents.ContentItem']", 'unique': 'True', 'primary_key': 'True'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['commentsarea']

########NEW FILE########
__FILENAME__ = models
from django.contrib import comments
from django.db import models
from django.dispatch import receiver
from django.utils.translation import ugettext_lazy as _
from django.db.models import signals
from django.contrib.comments import signals as comments_signals
from fluent_contents.models import ContentItem

CommentModel = comments.get_model()


class CommentsAreaItem(ContentItem):
    allow_new = models.BooleanField(_("Allow posting new comments"), default=True)

    class Meta:
        verbose_name = _('Comments area')
        verbose_name_plural = _('Comments areas')

    def __unicode__(self):
        return u''


def clear_commentarea_cache(comment):
    """
    Clean the plugin output cache of a rendered plugin.
    """
    parent = comment.content_object
    for instance in CommentsAreaItem.objects.parent(parent):
        instance.clear_cache()


# Allow admin changes to invalidate the cache.
@receiver(signals.post_save, sender=CommentModel)
@receiver(signals.post_delete, sender=CommentModel)
def _on_comment_changed(instance, **kwargs):
    clear_commentarea_cache(instance)


# Allow frontend actions to invalidate the cache.
@receiver(comments_signals.comment_was_posted)
@receiver(comments_signals.comment_was_flagged)
def _on_comment_posted(comment, **kwargs):
    clear_commentarea_cache(comment)


########NEW FILE########
__FILENAME__ = commentsarea_tags
"""
A proxy to automatically switch to the ``threadedcomments`` template tags if they are available.
"""
from django.contrib.comments.templatetags import comments
from django import template
from django.core.exceptions import ImproperlyConfigured
from django.template.loader import render_to_string
from fluent_contents.plugins.commentsarea import appsettings

register = template.Library()


if appsettings.FLUENT_COMMENTSAREA_THREADEDCOMMENTS:
    # Support threadedcomments
    from threadedcomments.templatetags import threadedcomments_tags  # If this import fails, the module version is too old.
    register.filters.update(threadedcomments_tags.register.filters)
    register.tags.update(threadedcomments_tags.register.tags)

    # https://github.com/HonzaKral/django-threadedcomments didn't have a 'render_comment_list' tag for a long time.
    if 'render_comment_list' not in register.tags:
        raise ImproperlyConfigured(
            "The current version of django-threadedcomments is not up-to-date.\n"
            "Please install django-threadedcomments >= 0.9")
else:
    # Standard comments
    register.filters.update(comments.register.filters)
    register.tags.update(comments.register.tags)

########NEW FILE########
__FILENAME__ = content_plugins
from django.conf import settings
from django.utils.translation import ugettext_lazy as _
from fluent_contents.extensions import ContentPlugin, plugin_pool
from fluent_contents.plugins.disquswidgets.models import DisqusCommentsAreaItem


@plugin_pool.register
class DisqusCommentsPlugin(ContentPlugin):
    model = DisqusCommentsAreaItem
    category = _('Interactivity')
    render_template = "fluent_contents/plugins/disquswidgets/comments.html"


    def get_context(self, request, instance, **kwargs):
        parent_url = instance.parent.get_absolute_url()
        return {
            'instance': instance,
            'DISQUS_WEBSITE_SHORTNAME': settings.DISQUS_WEBSITE_SHORTNAME,  # for convenience, pass setting

            # Template config setters are hard to use, provide context here!
            'disqus_identifier': parent_url.strip('/'),  # URL is expected to be relative.
            'disqus_url': parent_url,
            'disqus_developer': 0,
            #disqus_title
        }

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):
    depends_on = (
        ("fluent_contents", "0001_initial"),
    )

    def forwards(self, orm):
        
        # Adding model 'DisqusCommentsAreaItem'
        db.create_table('contentitem_disquswidgets_disquscommentsareaitem', (
            ('contentitem_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['fluent_contents.ContentItem'], unique=True, primary_key=True)),
            ('allow_new', self.gf('django.db.models.fields.BooleanField')(default=True)),
        ))
        db.send_create_signal('disquswidgets', ['DisqusCommentsAreaItem'])


    def backwards(self, orm):
        
        # Deleting model 'DisqusCommentsAreaItem'
        db.delete_table('contentitem_disquswidgets_disquscommentsareaitem')


    models = {
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'disquswidgets.disquscommentsareaitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'DisqusCommentsAreaItem', 'db_table': "'contentitem_disquswidgets_disquscommentsareaitem'", '_ormbases': ['fluent_contents.ContentItem']},
            'allow_new': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'contentitem_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['fluent_contents.ContentItem']", 'unique': 'True', 'primary_key': 'True'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['disquswidgets']

########NEW FILE########
__FILENAME__ = models
from django.db import models
from django.utils.translation import ugettext_lazy as _
from fluent_contents.models import ContentItem


class DisqusCommentsAreaItem(ContentItem):
    allow_new = models.BooleanField(_("Allow posting new comments"), default=True)

    class Meta:
        verbose_name = _('Disqus comments area')
        verbose_name_plural = _('Disqus comments areas')

    def __unicode__(self):
        return u''
########NEW FILE########
__FILENAME__ = content_plugins
"""
Form designer link plugin.

This plugin displays a form at the page, that was created with form_designer.
To customize the output, configure the ``django-form-designer`` application via the settings file.
For example, use:

 * ``FORM_DESIGNER_DEFAULT_FORM_TEMPLATE`` or ``FORM_TEMPLATES`` to control the form output (e.g. render it with ``django-uni-form``).
 * ``FORM_DESIGNER_FIELD_CLASSES`` to define which field types are allowed.
 * ``FORM_DESIGNER_WIDGET_CLASSES`` to define which widgets are allowed.
"""
from inspect import getargspec
from django.contrib.messages.api import get_messages
from django.utils.translation import ugettext_lazy as _
from fluent_contents.extensions import ContentPlugin, plugin_pool
from fluent_contents.plugins.formdesignerlink.models import FormDesignerLink
from form_designer import settings as form_designer_settings
from form_designer.views import process_form


# Find out which version of process_form is available.
# The 'is_cms_plugin' was renamed to 'disable_redirection' at some revision.
_keywords = getargspec(process_form).args
_disable_redirection = 'disable_redirection'
for _name in ('disable_redirection', 'is_cms_plugin'):
    if _name in _keywords:
        _disable_redirection = _name


@plugin_pool.register
class FormDesignerLinkPlugin(ContentPlugin):
    model = FormDesignerLink
    category = _('Interactivity')
    cache_output = False


    def get_render_template(self, request, instance, **kwargs):
        # Overwritten to return a template from the instance.
        return instance.form_definition.form_template_name or self.render_template or form_designer_settings.DEFAULT_FORM_TEMPLATE


    def render(self, request, instance, **kwargs):
        # While overwriting get_context() would be sufficient here, this is rather easier to understand.
        # Implemented a custom rendering function instead.

        # The process_form() function is designed with Django CMS in mind,
        # and responds to both the GET and POST request.
        context = process_form(request, instance.form_definition, {}, **{_disable_redirection: True})
        context['messages'] = get_messages(request)  # No matter what, because the template needs it.

        # Render the plugin
        render_template = self.get_render_template(request, instance, **kwargs)
        return self.render_to_string(request, render_template, context)

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):
    depends_on = (
        ("fluent_contents", "0001_initial"),
    )

    def forwards(self, orm):
        
        # Adding model 'FormDesignerLink'
        db.create_table('contentitem_formdesignerlink_formdesignerlink', (
            ('contentitem_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['fluent_contents.ContentItem'], unique=True, primary_key=True)),
            ('form_definition', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['form_designer.FormDefinition'])),
        ))
        db.send_create_signal('formdesignerlink', ['FormDesignerLink'])


    def backwards(self, orm):
        
        # Deleting model 'FormDesignerLink'
        db.delete_table('contentitem_formdesignerlink_formdesignerlink')


    models = {
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'form_designer.formdefinition': {
            'Meta': {'object_name': 'FormDefinition'},
            'action': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'allow_get_initial': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'display_logged': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'error_message': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'form_template_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'log_data': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'mail_from': ('form_designer.fields.TemplateCharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'mail_subject': ('form_designer.fields.TemplateCharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'mail_to': ('form_designer.fields.TemplateCharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'mail_uploaded_files': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'message_template': ('form_designer.fields.TemplateTextField', [], {'null': 'True', 'blank': 'True'}),
            'method': ('django.db.models.fields.CharField', [], {'default': "'POST'", 'max_length': '10'}),
            'name': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '255', 'db_index': 'True'}),
            'private_hash': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40'}),
            'public_hash': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40'}),
            'require_hash': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'save_uploaded_files': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'submit_label': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'success_clear': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'success_message': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'success_redirect': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'formdesignerlink.formdesignerlink': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'FormDesignerLink', 'db_table': "'contentitem_formdesignerlink_formdesignerlink'", '_ormbases': ['fluent_contents.ContentItem']},
            'contentitem_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['fluent_contents.ContentItem']", 'unique': 'True', 'primary_key': 'True'}),
            'form_definition': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['form_designer.FormDefinition']"})
        }
    }

    complete_apps = ['formdesignerlink']

########NEW FILE########
__FILENAME__ = models
from django.db import models
from django.utils.translation import ugettext_lazy as _
from fluent_contents.models import ContentItem
from form_designer.models import FormDefinition


class FormDesignerLink(ContentItem):
    form_definition = models.ForeignKey(FormDefinition, verbose_name=_('Form'))

    class Meta:
        verbose_name = _('Form link')
        verbose_name_plural = _('Form links')

    def __unicode__(self):
        return self.form_definition.title if self.form_definition else u''

########NEW FILE########
__FILENAME__ = content_plugins
"""
Plugin for rendering Gist snippets, hosted by Github.
"""
from django.utils.http import urlquote
from django.utils.safestring import mark_safe
from django.utils.translation import ugettext_lazy as _
from fluent_contents.extensions import ContentPlugin, plugin_pool
from fluent_contents.plugins.gist.models import GistItem


@plugin_pool.register
class GistPlugin(ContentPlugin):
    model = GistItem
    category = _('Programming')


    def render(self, request, instance, **kwargs):
        url = u'http://gist.github.com/{0}.js'.format(instance.gist_id)
        if instance.filename:
            url += u'?file={0}'.format(urlquote(instance.filename))

        return mark_safe(u'<script src="{0}"></script>'.format(url))

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):
    depends_on = (
        ("fluent_contents", "0001_initial"),
    )

    def forwards(self, orm):
        
        # Adding model 'GistItem'
        db.create_table('contentitem_gist_gistitem', (
            ('contentitem_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['fluent_contents.ContentItem'], unique=True, primary_key=True)),
            ('gist_id', self.gf('django.db.models.fields.IntegerField')()),
            ('filename', self.gf('django.db.models.fields.CharField')(max_length=128, blank=True)),
        ))
        db.send_create_signal('gist', ['GistItem'])


    def backwards(self, orm):
        
        # Deleting model 'GistItem'
        db.delete_table('contentitem_gist_gistitem')


    models = {
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'gist.gistitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'GistItem', 'db_table': "'contentitem_gist_gistitem'", '_ormbases': ['fluent_contents.ContentItem']},
            'contentitem_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['fluent_contents.ContentItem']", 'unique': 'True', 'primary_key': 'True'}),
            'filename': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'gist_id': ('django.db.models.fields.IntegerField', [], {})
        }
    }

    complete_apps = ['gist']

########NEW FILE########
__FILENAME__ = 0002_auto__chg_field_gistitem_gist_id
# -*- coding: utf-8 -*-
from south.utils import datetime_utils as datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Changing field 'GistItem.gist_id'
        db.alter_column(u'contentitem_gist_gistitem', 'gist_id', self.gf('django.db.models.fields.CharField')(max_length=128))

    def backwards(self, orm):

        # Changing field 'GistItem.gist_id'
        db.alter_column(u'contentitem_gist_gistitem', 'gist_id', self.gf('django.db.models.fields.IntegerField')())

    models = {
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language_code': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '15', 'db_index': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': u"orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1', 'db_index': 'True'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        u'gist.gistitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'GistItem', 'db_table': "u'contentitem_gist_gistitem'", '_ormbases': ['fluent_contents.ContentItem']},
            u'contentitem_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['fluent_contents.ContentItem']", 'unique': 'True', 'primary_key': 'True'}),
            'filename': ('django.db.models.fields.CharField', [], {'max_length': '128', 'blank': 'True'}),
            'gist_id': ('django.db.models.fields.CharField', [], {'max_length': '128'})
        }
    }

    complete_apps = ['gist']
########NEW FILE########
__FILENAME__ = models
from django.db import models
from django.utils.translation import ugettext_lazy as _
from fluent_contents.models import ContentItem

class GistItem(ContentItem):
    """
    A reference to a gist item (gist.github.com) that is rendered as source code.
    """
    gist_id = models.CharField(_("Gist number"), max_length=128, help_text=_('Go to <a href="https://gist.github.com/" target="_blank">https://gist.github.com/</a> and copy the number of the Gist snippet you want to display.'))
    filename = models.CharField(_("Gist filename"), max_length=128, blank=True, help_text=_('Leave the filename empty to display all files in the Gist.'))

    class Meta:
        verbose_name = _('GitHub Gist snippet')
        verbose_name_plural = _('GitHub Gist snippets')

    def __unicode__(self):
        return unicode(self.gist_id)

########NEW FILE########
__FILENAME__ = content_plugins
"""
Google apps widgets for your site.
"""
from django.utils.html import escape
from django.utils.http import urlquote
from django.utils.safestring import mark_safe
from django.utils.translation import ugettext_lazy as _
from fluent_contents.extensions import ContentPlugin, plugin_pool
from fluent_contents.plugins.googledocsviewer.models import GoogleDocsViewerItem


@plugin_pool.register
class GoogleDocsViewerPlugin(ContentPlugin):
    """
    Plugin to add a Google Docs viewer to the page.
    This can be used to display a PDF file inline.

    Note then when using the Google Docs viewer on your site,
    Google assumes you agree with the Terms of Service,
    see: https://docs.google.com/viewer/TOS
    """
    model = GoogleDocsViewerItem
    category = _('Media')


    def render(self, request, instance, **kwargs):
        url = 'http://docs.google.com/viewer?url={url}&embedded=true'.format(url=urlquote(instance.url, ''))
        return mark_safe(u'<iframe class="googledocsviewer" src="{src}" width="{width}" height="{height}"></iframe>'.format(
            src=escape(url),
            width=instance.width,
            height=instance.height
        ))

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):
    depends_on = (
        ("fluent_contents", "0001_initial"),
    )

    def forwards(self, orm):
        
        # Adding model 'GoogleDocsViewerItem'
        db.create_table('contentitem_googledocsviewer_googledocsvieweritem', (
            ('contentitem_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['fluent_contents.ContentItem'], unique=True, primary_key=True)),
            ('url', self.gf('django.db.models.fields.URLField')(max_length=200)),
            ('width', self.gf('django.db.models.fields.CharField')(default='100%', max_length=10)),
            ('height', self.gf('django.db.models.fields.CharField')(default='600', max_length=10)),
        ))
        db.send_create_signal('googledocsviewer', ['GoogleDocsViewerItem'])


    def backwards(self, orm):
        
        # Deleting model 'GoogleDocsViewerItem'
        db.delete_table('contentitem_googledocsviewer_googledocsvieweritem')


    models = {
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'googledocsviewer.googledocsvieweritem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'GoogleDocsViewerItem', 'db_table': "'contentitem_googledocsviewer_googledocsvieweritem'", '_ormbases': ['fluent_contents.ContentItem']},
            'contentitem_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['fluent_contents.ContentItem']", 'unique': 'True', 'primary_key': 'True'}),
            'height': ('django.db.models.fields.CharField', [], {'default': "'600'", 'max_length': '10'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200'}),
            'width': ('django.db.models.fields.CharField', [], {'default': "'100%'", 'max_length': '10'})
        }
    }

    complete_apps = ['googledocsviewer']

########NEW FILE########
__FILENAME__ = models
from django.db import models
from django.utils.translation import ugettext_lazy as _
from fluent_contents.models import ContentItem
from fluent_contents.utils import validate_html_size


class GoogleDocsViewerItem(ContentItem):
    """
    A Google Docs viewer that is displayed at the page.
    """
    url = models.URLField(_("File URL"), help_text=_("Specify the URL of an online document, for example a PDF or DOCX file."))
    width = models.CharField(_("Width"), max_length=10, validators=[validate_html_size], default="100%", help_text=_("Specify the size in pixels, or a percentage of the container area size."))
    height = models.CharField(_("Height"), max_length=10, validators=[validate_html_size], default="600", help_text=_("Specify the size in pixels."))

    class Meta:
        verbose_name = _("Embedded document")
        verbose_name_plural = _("Embedded document")

    def __unicode__(self):
        return self.url

########NEW FILE########
__FILENAME__ = content_plugins
"""
Plugin to add an ``<iframe>`` to the page.
"""
from django.utils.html import escape
from django.utils.safestring import mark_safe
from django.utils.translation import ugettext_lazy as _
from fluent_contents.extensions import ContentPlugin, plugin_pool
from fluent_contents.plugins.iframe.models import IframeItem


@plugin_pool.register
class IframePlugin(ContentPlugin):
    model = IframeItem
    category = _('Advanced')


    def render(self, request, instance, **kwargs):
        return mark_safe(u'<iframe class="iframe" src="{src}" width="{width}" height="{height}"></iframe>'.format(
            src=escape(instance.src),
            width=instance.width,
            height=instance.height
        ))

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):
    depends_on = (
        ("fluent_contents", "0001_initial"),
    )

    def forwards(self, orm):
        
        # Adding model 'IframeItem'
        db.create_table('contentitem_iframe_iframeitem', (
            ('contentitem_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['fluent_contents.ContentItem'], unique=True, primary_key=True)),
            ('src', self.gf('django.db.models.fields.URLField')(max_length=200)),
            ('width', self.gf('django.db.models.fields.CharField')(default='100%', max_length=10)),
            ('height', self.gf('django.db.models.fields.CharField')(default='600', max_length=10)),
        ))
        db.send_create_signal('iframe', ['IframeItem'])


    def backwards(self, orm):
        
        # Deleting model 'IframeItem'
        db.delete_table('contentitem_iframe_iframeitem')


    models = {
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'iframe.iframeitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'IframeItem', 'db_table': "'contentitem_iframe_iframeitem'", '_ormbases': ['fluent_contents.ContentItem']},
            'contentitem_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['fluent_contents.ContentItem']", 'unique': 'True', 'primary_key': 'True'}),
            'height': ('django.db.models.fields.CharField', [], {'default': "'600'", 'max_length': '10'}),
            'src': ('django.db.models.fields.URLField', [], {'max_length': '200'}),
            'width': ('django.db.models.fields.CharField', [], {'default': "'100%'", 'max_length': '10'})
        }
    }

    complete_apps = ['iframe']

########NEW FILE########
__FILENAME__ = models
from django.db import models
from django.utils.translation import ugettext_lazy as _
from fluent_contents.models import ContentItem
from fluent_contents.utils import validate_html_size


class IframeItem(ContentItem):
    """
    An ``<iframe>`` that is displayed at the page..
    """
    src = models.URLField(_("Page URL"))
    width = models.CharField(_("Width"), max_length=10, validators=[validate_html_size], default="100%", help_text=_("Specify the size in pixels, or a percentage of the container area size."))
    height = models.CharField(_("Height"), max_length=10, validators=[validate_html_size], default="600", help_text=_("Specify the size in pixels."))

    class Meta:
        verbose_name = _("Iframe")
        verbose_name_plural = _("Iframes")

    def __unicode__(self):
        return self.src

########NEW FILE########
__FILENAME__ = appsettings
"""
Settings for the markup item.
"""
from django.conf import settings

# NOTE: The checks whether FLUENT_MARKUP_LANGUAGES contains valid values happens in __init__.py
FLUENT_MARKUP_LANGUAGES = getattr(settings, "FLUENT_MARKUP_LANGUAGES", ['restructuredtext', 'markdown', 'textile'])
FLUENT_MARKUP_MARKDOWN_EXTRAS = getattr(settings, "FLUENT_MARKUP_MARKDOWN_EXTRAS", [])

# Experimental:
FLUENT_MARKUP_USE_DJANGO_MARKUP = getattr(settings, 'FLUENT_MARKUP_USE_DJANGO_MARKUP', False)

########NEW FILE########
__FILENAME__ = backend
"""
The rendering support of the markup plugin.

This uses the backends from the actual text processing libraries.
"""
from django.core.exceptions import ImproperlyConfigured
from django.utils.safestring import mark_safe
from fluent_contents.plugins.markup import appsettings


def render_restructuredtext(text):
    from docutils.core import publish_string
    return publish_string(text, writer_name='html')

def render_markdown(text):
    from markdown import markdown
    return markdown(text, ','.join(appsettings.FLUENT_MARKUP_MARKDOWN_EXTRAS))

def render_textile(text):
    from textile import textile
    return textile(text)

# Copy, and allow adding more options.
# Previously, this used django.contrib.markup.templatetags.markup,
# but since that's gone, the languages are defined here.
SUPPORTED_LANGUAGES = {
    'restructuredtext': render_restructuredtext,
    'markdown': render_markdown,
    'textile': render_textile
}

_languageNames = {
    'restructuredtext': 'reStructuredText',
    'markdown': 'Markdown',
    'textile': 'Textile',
}

if appsettings.FLUENT_MARKUP_USE_DJANGO_MARKUP:
    # With django-markup installed, it can be used instead of out default filters.
    # Since most django-markup filters are meant for simple text enhancements,
    # only use the filters which are really full text markup languages.
    # NOTE: the enhanced markdown above will also be replaced. Use the MARKUP_SETTINGS setting to configure django-markup instead.
    from django_markup.markup import formatter
    for filter_name, FilterClass in formatter.filter_list.iteritems():
        real_filters = SUPPORTED_LANGUAGES.keys() + ['creole']
        if filter_name in real_filters:
            _languageNames[filter_name] = FilterClass.title
            SUPPORTED_LANGUAGES[filter_name] = lambda text: mark_safe(formatter(text, filter_name))

# Format as choices
LANGUAGE_CHOICES = [(n, _languageNames.get(n, n.capitalize())) for n in SUPPORTED_LANGUAGES.keys()]
LANGUAGE_NAMES = dict(LANGUAGE_CHOICES)


def render_text(text, language=None):
    """
    Render the text, reuses the template filters provided by Django.
    """
    # Get the filter
    text_filter = SUPPORTED_LANGUAGES.get(language, None)
    if not text_filter:
        raise ImproperlyConfigured("markup filter does not exist: {0}. Valid options are: {1}".format(
            language, ', '.join(SUPPORTED_LANGUAGES.keys())
        ))

    # Convert.
    return text_filter(text)

########NEW FILE########
__FILENAME__ = content_plugins
"""
Markup plugin, rendering human readable formatted text to HTML.

This plugin supports several markup languages:

  reStructuredText: Used for Python documentation.
  Markdown: Used for GitHub and Stackoverflow comments (both have a dialect/extended version)
  Textile: A extensive markup format, also used in Redmine and partially in Basecamp.

"""
from django.utils.safestring import mark_safe
from django.utils.translation import ugettext_lazy as _
from fluent_contents.extensions import ContentPlugin, plugin_pool
from fluent_contents.plugins.markup.models import MarkupItem, MarkupItemForm, LANGUAGE_MODEL_CLASSES
from fluent_contents.plugins.markup import backend, appsettings


class MarkupPluginBase(ContentPlugin):
    """
    Base plugin for markup item models.
    The actual plugins are dynamically created.
    """
    model = MarkupItem
    category = _('Markup')
    form = MarkupItemForm
    admin_form_template = ContentPlugin.ADMIN_TEMPLATE_WITHOUT_LABELS

    class Media:
        css = {'screen': ('fluent_contents/plugins/markup/markup_admin.css',)}


    def render(self, request, instance, **kwargs):
        try:
            html = backend.render_text(instance.text, instance.language)
        except Exception, e:
            html = self.render_error(e)

        # Included in a DIV, so the next item will be displayed below.
        return mark_safe('<div class="markup">' + html + '</div>\n')


# Dynamically create plugins for every language type.
# Allows adding them separately in the admin, while using the same database table.
for language, model in LANGUAGE_MODEL_CLASSES.iteritems():
    if language not in appsettings.FLUENT_MARKUP_LANGUAGES:
        continue

    form = type("{0}MarkupItemForm".format(language.capitalize()), (MarkupItemForm,), {
        'default_language': language,
    })

    classname = "{0}MarkupPlugin".format(language.capitalize())
    PluginClass = type(classname, (MarkupPluginBase,), {
        'model': model,
        'form': form,
    })

    #globals()[classname] = PluginClass
    plugin_pool.register(PluginClass)

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):
    depends_on = (
        ("fluent_contents", "0001_initial"),
    )

    def forwards(self, orm):
        
        # Adding model 'MarkupItem'
        db.create_table('contentitem_markup_markupitem', (
            ('contentitem_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['fluent_contents.ContentItem'], unique=True, primary_key=True)),
            ('text', self.gf('django.db.models.fields.TextField')()),
            ('language', self.gf('django.db.models.fields.CharField')(max_length=30)),
        ))
        db.send_create_signal('markup', ['MarkupItem'])


    def backwards(self, orm):
        
        # Deleting model 'MarkupItem'
        db.delete_table('contentitem_markup_markupitem')


    models = {
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'markup.markupitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'MarkupItem', 'db_table': "'contentitem_markup_markupitem'", '_ormbases': ['fluent_contents.ContentItem']},
            'contentitem_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['fluent_contents.ContentItem']", 'unique': 'True', 'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '30'}),
            'text': ('django.db.models.fields.TextField', [], {})
        }
    }

    complete_apps = ['markup']

########NEW FILE########
__FILENAME__ = 0002_add_language_index
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding index on 'MarkupItem', fields ['language']
        db.create_index('contentitem_markup_markupitem', ['language'])


    def backwards(self, orm):
        
        # Removing index on 'MarkupItem', fields ['language']
        db.delete_index('contentitem_markup_markupitem', ['language'])


    models = {
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'markup.markupitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'MarkupItem', 'db_table': "'contentitem_markup_markupitem'", '_ormbases': ['fluent_contents.ContentItem']},
            'contentitem_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['fluent_contents.ContentItem']", 'unique': 'True', 'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '30', 'db_index': 'True'}),
            'text': ('django.db.models.fields.TextField', [], {})
        }
    }

    complete_apps = ['markup']

########NEW FILE########
__FILENAME__ = models
from django.core.exceptions import ValidationError
from django.db import models
from django.utils.text import Truncator
from django.utils.translation import ugettext_lazy as _
from polymorphic.manager import PolymorphicManager
from fluent_contents.forms import ContentItemForm
from fluent_contents.models import ContentItem
from fluent_contents.plugins.markup import appsettings, backend

LANGUAGE_MODEL_CLASSES = {}

__all__ = [
    'LANGUAGE_MODEL_CLASSES',
]


class MarkupItemForm(ContentItemForm):
    """
    A custom form that validates the markup.
    """
    default_language = None

    def clean_text(self):
        try:
            backend.render_text(self.cleaned_data['text'], self.instance.language or self.default_language)
        except Exception, e:
            raise ValidationError("There is an error in the markup: %s" % e)
        return self.cleaned_data['text']



class MarkupItem(ContentItem):
    """
    A snippet of markup (restructuredtext, markdown, or textile) to display at a page.
    """
    text = models.TextField(_('markup'))

    # Store the language to keep rendering intact while switching settings.
    language = models.CharField(_('Language'), max_length=30, editable=False, db_index=True, choices=backend.LANGUAGE_CHOICES)

    class Meta:
        verbose_name = _('Markup code')
        verbose_name_plural = _('Markup code')

    def __unicode__(self):
        return Truncator(self.text).words(20)

    def __init__(self, *args, **kwargs):
        super(MarkupItem, self).__init__(*args, **kwargs)

        # Extra polymorphic!
        ProxyModelClass = LANGUAGE_MODEL_CLASSES.get(self.language, None)
        if ProxyModelClass:
            self.__class__ = ProxyModelClass



class MarkupLanguageManager(PolymorphicManager):
    def __init__(self, fixed_language):
        super(MarkupLanguageManager, self).__init__()
        self.fixed_language = fixed_language

    def get_query_set(self):
        return super(MarkupLanguageManager, self).get_query_set().filter(language=self.fixed_language)



def _create_markup_model(fixed_language):
    """
    Create a new MarkupItem model that saves itself in a single language.
    """
    title = backend.LANGUAGE_NAMES.get(fixed_language) or fixed_language

    objects = MarkupLanguageManager(fixed_language)

    def save(self, *args, **kwargs):
        self.language = fixed_language
        MarkupItem.save(self, *args, **kwargs)

    class Meta:
        verbose_name = title
        verbose_name_plural = _('%s items') % title
        proxy = True

    classname = "{0}MarkupItem".format(fixed_language.capitalize())

    new_class = type(classname, (MarkupItem,), {
        '__module__': MarkupItem.__module__,
        'objects': objects,
        'save': save,
        'Meta': Meta,
    })

    # Make easily browsable
    LANGUAGE_MODEL_CLASSES[fixed_language] = new_class
    return new_class


# Create proxy models for all supported languages. This allows reusage of the same database table.
# It does not impact the frontend, as django-polymorphic requests the MarkupItem base class (which is then upcasted in __init__()).
# the admin interface will query the database per language, as it has an inline per plugin type.
for language in backend.SUPPORTED_LANGUAGES.keys():
    if language not in appsettings.FLUENT_MARKUP_LANGUAGES:
        continue

    new_class = _create_markup_model(language)
    #globals()[new_class.__name__] = new_class
    #__all__.append(new_class.__name__)

########NEW FILE########
__FILENAME__ = appsettings
from django.conf import settings


# Define the source for the OEmbed provider list.
# By default, use a fixed set of providers, to avoid random other HTML content in the web site.
FLUENT_OEMBED_SOURCE = getattr(settings, 'FLUENT_OEMBED_SOURCE', 'basic')   # basic, embedly, noembed, list

# Allow to extend any source, whether it's basic/embedly/noembed/list
FLUENT_OEMBED_EXTRA_PROVIDERS = tuple(getattr(settings, 'FLUENT_OEMBED_EXTRA_PROVIDERS', ()))

# Before micawber 0.2.6 the default source was "list".
# However, micawber contains a more up-to-date list nowadays, so it doesn't make sense to keep a list here.
FLUENT_OEMBED_PROVIDER_LIST = getattr(settings, 'FLUENT_OEMBED_PROVIDER_LIST', ())

# Keep this for backwards compatibility, it's no longer advertised in the docs.
FLUENT_OEMBED_PROVIDER_LIST += tuple(getattr(settings, 'FLUENT_OEMBED_PROVIDER_LIST_EXTRA', ()))

# Embedly API key
MICAWBER_EMBEDLY_KEY = getattr(settings, 'MICAWBER_EMBEDLY_KEY', None)

########NEW FILE########
__FILENAME__ = backend
"""
Backend for fetching OEmbed data.

This module can also be used by other external apps.
"""
import threading
from micawber import Provider, ProviderRegistry, bootstrap_basic, bootstrap_embedly
from micawber.providers import bootstrap_noembed   # Export was missing in 0.2.6 patch, my mistake.
from django.core.exceptions import ImproperlyConfigured
from . import appsettings


__all__ = (
    'get_oembed_providers',
    'has_provider_for_url',
    'get_oembed_data',
)


# Globally cached provider list,
# so embed.ly list is fetched only once.
_provider_list = None
_provider_lock = threading.Lock()


def get_oembed_providers():
    """
    Get the list of OEmbed providers.
    """
    global _provider_list, _provider_lock
    if _provider_list is not None:
        return _provider_list

    # Allow only one thread to build the list, or make request to embed.ly.
    _provider_lock.acquire()
    try:
        # And check whether that already succeeded when the lock is granted.
        if _provider_list is None:
            _provider_list = _build_provider_list()
    finally:
        # Always release if there are errors
        _provider_lock.release()

    return _provider_list


def _build_provider_list():
    """
    Construct the provider registry, using the app settings.
    """
    registry = None
    if appsettings.FLUENT_OEMBED_SOURCE == 'basic':
        registry = bootstrap_basic()
    elif appsettings.FLUENT_OEMBED_SOURCE == 'embedly':
        params = {}
        if appsettings.MICAWBER_EMBEDLY_KEY:
            params['key'] = appsettings.MICAWBER_EMBEDLY_KEY
        registry = bootstrap_embedly(**params)
    elif appsettings.FLUENT_OEMBED_SOURCE == 'noembed':
        registry = bootstrap_noembed(nowrap=1)
    elif appsettings.FLUENT_OEMBED_SOURCE == 'list':
        # Fill list manually in the settings, e.g. to have a fixed set of supported secure providers.
        registry = ProviderRegistry()
        for regex, provider in appsettings.FLUENT_OEMBED_PROVIDER_LIST:
            registry.register(regex, Provider(provider))
    else:
        raise ImproperlyConfigured("Invalid value of FLUENT_OEMBED_SOURCE, only 'basic', 'list', 'noembed' or 'embedly' is supported.")

    # Add any extra providers defined in the settings
    for regex, provider in appsettings.FLUENT_OEMBED_EXTRA_PROVIDERS:
        registry.register(regex, Provider(provider))

    return registry


def has_provider_for_url(url):
    """
    Verify whether there is a provider for the URL.
    """
    registry = get_oembed_providers()
    return registry.provider_for_url(url) is not None


def get_oembed_data(url, max_width=None, max_height=None, **params):
    """
    Fetch the OEmbed object, return the response as dictionary.
    """
    if max_width:  params['maxwidth'] = max_width
    if max_height: params['maxheight'] = max_height

    registry = get_oembed_providers()
    return registry.request(url, **params)

########NEW FILE########
__FILENAME__ = content_plugins
"""
Definition of the plugin.
"""
from django.utils.translation import ugettext_lazy as _
from fluent_contents.extensions import ContentPlugin, plugin_pool
from fluent_contents.plugins.oembeditem.models import OEmbedItem
import re

re_safe = re.compile(r'[^\w_-]')


@plugin_pool.register
class OEmbedPlugin(ContentPlugin):
    model = OEmbedItem
    category = _('Media')
    admin_form_template = "admin/fluent_contents/plugins/oembeditem/admin_form.html"
    render_template = "fluent_contents/plugins/oembed/default.html"

    #: Custom render template
    render_template_base = "fluent_contents/plugins/oembed/{type}.html"

    fieldsets = (
        (None, {
            'fields': (
                'embed_url',
                ('embed_max_width', 'embed_max_height'),
            ),
        }),
    )

    class Media:
        css = {
            'screen': (
                'fluent_contents/plugins/oembed/oembed_admin.css',
            )
        }


    def get_render_template(self, request, instance, **kwargs):
        """
        Allow to style the item based on the type.
        """
        safe_filename = re_safe.sub('', instance.type or 'default')
        return [
            self.render_template_base.format(type=safe_filename),
            self.render_template
        ]

########NEW FILE########
__FILENAME__ = fields
from django.core.exceptions import ValidationError
from django.db.models import URLField
from django.utils.translation import ugettext_lazy as _
from fluent_contents.plugins.oembeditem import backend


class OEmbedUrlField(URLField):
    """
    URL Field which validates whether the URL is supported by the OEmbed provider.

    This feature is provided as model field, so other apps can use the same logic too.
    """
    def __init__(self, *args, **kwargs):
        kwargs.setdefault('help_text', _("Enter the URL of the online content to embed (e.g. a YouTube or Vimeo video, SlideShare presentation, etc..)"))
        super(OEmbedUrlField, self).__init__(*args, **kwargs)

    def clean(self, *args, **kwargs):
        url = super(OEmbedUrlField, self).clean(*args, **kwargs)

        if not backend.has_provider_for_url(url):
            raise ValidationError(_("The URL is not valid for embedding content"))  # or is not configured as provider.

        return url


try:
    from south.modelsinspector import add_introspection_rules
except ImportError:
    pass
else:
    add_introspection_rules([], ["^" + __name__.replace(".", "\.") + "\.OEmbedUrlField"])

########NEW FILE########
__FILENAME__ = debug_oembed
from django.core.management.base import BaseCommand, CommandError
from pprint import pformat
from micawber.exceptions import ProviderNotFoundException, ProviderException
from fluent_contents.plugins.oembeditem.backend import get_oembed_data


class Command(BaseCommand):
    args = '<url>'
    help = "Display the OEmbed results of an URL"

    def handle(self, *args, **options):
        if not args:
            raise CommandError("Missing URL parameter")

        for url in args:
            try:
                data = get_oembed_data(url)
            except ProviderNotFoundException:
                self.stderr.write("* No OEmbed provider found for '{0}'!\n".format(url))
            except ProviderException as e:
                # Real urllib2 exception is sadly hidden by micawber.
                self.stderr.write("* {0}\n".format(e))
            else:
                self.stdout.write("* OEmbed data for '{0}':\n".format(url))

                for key in sorted(data.iterkeys()):
                    self.stdout.write('  - {0}: {1}\n'.format(key, pformat(data[key])))

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):
    depends_on = (
        ("fluent_contents", "0001_initial"),
    )

    def forwards(self, orm):
        # Adding model 'OEmbedItem'
        db.create_table('contentitem_oembeditem_oembeditem', (
            ('contentitem_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['fluent_contents.ContentItem'], unique=True, primary_key=True)),
            ('embed_url', self.gf('django.db.models.fields.URLField')(max_length=200)),
            ('embed_max_width', self.gf('django.db.models.fields.PositiveIntegerField')(null=True, blank=True)),
            ('embed_max_height', self.gf('django.db.models.fields.PositiveIntegerField')(null=True, blank=True)),
            ('type', self.gf('django.db.models.fields.CharField')(max_length=20, null=True, blank=True)),
            ('url', self.gf('django.db.models.fields.URLField')(max_length=200, null=True, blank=True)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=512, null=True, blank=True)),
            ('description', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('author_name', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('author_url', self.gf('django.db.models.fields.URLField')(max_length=200, null=True, blank=True)),
            ('provider_name', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('provider_url', self.gf('django.db.models.fields.URLField')(max_length=200, null=True, blank=True)),
            ('thumbnail_url', self.gf('django.db.models.fields.URLField')(max_length=200, null=True, blank=True)),
            ('thumbnail_height', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('thumbnail_width', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('height', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('width', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('html', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
        ))
        db.send_create_signal('oembeditem', ['OEmbedItem'])

    def backwards(self, orm):
        # Deleting model 'OEmbedItem'
        db.delete_table('contentitem_oembeditem_oembeditem')

    models = {
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1', 'db_index': 'True'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'oembeditem.oembeditem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'OEmbedItem', 'db_table': "'contentitem_oembeditem_oembeditem'", '_ormbases': ['fluent_contents.ContentItem']},
            'author_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'author_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'contentitem_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['fluent_contents.ContentItem']", 'unique': 'True', 'primary_key': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'embed_max_height': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'embed_max_width': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'embed_url': ('fluent_contents.plugins.oembeditem.fields.OEmbedUrlField', [], {'max_length': '200'}),
            'height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'html': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'provider_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'provider_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'thumbnail_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'thumbnail_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'thumbnail_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['oembeditem']
########NEW FILE########
__FILENAME__ = models
from django.core.exceptions import ValidationError
from django.db import models
from django.utils.translation import ugettext_lazy as _
from micawber import ProviderException
from fluent_contents.models.db import ContentItem
from fluent_contents.plugins.oembeditem.fields import OEmbedUrlField
from fluent_contents.plugins.oembeditem import backend


class AbstractOEmbedItem(ContentItem):
    """
    The base class for an OEmbedItem,
    This allows to create custom models easily.

    .. versionadded:: 1.0
    """
    TYPE_PHOTO = 'photo'
    TYPE_VIDEO = 'video'
    TYPE_RICH = 'rich'  # HTML
    TYPE_LINK = 'link'

    # Fetch parameters
    embed_url = OEmbedUrlField(_("URL to embed"))
    embed_max_width = models.PositiveIntegerField(_("Max width"), blank=True, null=True)
    embed_max_height = models.PositiveIntegerField(_("Max height"), blank=True, null=True)

    # The cached response:
    type = models.CharField(editable=False, max_length=20, null=True, blank=True)
    url = models.URLField(editable=False, null=True, blank=True)
    title = models.CharField(editable=False, max_length=512, null=True, blank=True)
    description = models.TextField(editable=False, null=True, blank=True)

    author_name = models.CharField(editable=False, max_length=255, null=True, blank=True)
    author_url = models.URLField(editable=False, null=True, blank=True)
    provider_name = models.CharField(editable=False, max_length=255, null=True, blank=True)
    provider_url = models.URLField(editable=False, null=True, blank=True)

    thumbnail_url = models.URLField(editable=False, null=True, blank=True)
    thumbnail_height = models.IntegerField(editable=False, null=True, blank=True)
    thumbnail_width = models.IntegerField(editable=False, null=True, blank=True)

    height = models.IntegerField(editable=False, null=True, blank=True)
    width = models.IntegerField(editable=False, null=True, blank=True)
    html = models.TextField(editable=False, null=True, blank=True)


    class Meta:
        abstract = True
        verbose_name = _("Online media")
        verbose_name_plural = _("Online media")


    def __unicode__(self):
        return self.title or self.embed_url


    def __init__(self, *args, **kwargs):
        super(AbstractOEmbedItem, self).__init__(*args, **kwargs)
        self._old_embed_url = self.embed_url
        self._old_embed_max_width = self.embed_max_width
        self._old_embed_max_height = self.embed_max_height


    def save(self, *args, **kwargs):
        self.update_oembed_data()  # if clean() did not run, still update the oembed
        super(AbstractOEmbedItem, self).save(*args, **kwargs)


    def clean(self):
        # Avoid getting server errors when the URL is not valid.
        try:
            self.update_oembed_data()
        except ProviderException as e:
            raise ValidationError(str(e))


    def update_oembed_data(self, force=False, **backend_params):
        """
        Update the OEmbeddata if needed.

        .. versionadded:: 1.0 Added force and backend_params parameters.
        """
        if force or self._input_changed():
            # Fetch new embed code
            params = self.get_oembed_params(self.embed_url)
            params.update(backend_params)
            response = backend.get_oembed_data(self.embed_url, **params)

            # Save it
            self.store_response(response)

            # Track field changes
            self._old_embed_url = self.embed_url
            self._old_embed_max_width = self.embed_max_width
            self._old_embed_max_height = self.embed_max_height


    def get_oembed_params(self, embed_url):
        """
        .. versionadded:: 1.0

           Allow to define the parameters that are passed to the backend to fetch the current URL.
        """
        return {
            'max_width': self.embed_max_width,
            'max_height': self.embed_max_height,
        }


    def _input_changed(self):
        return not self.type \
            or self._old_embed_url != self.embed_url \
            or self._old_embed_max_width != self.embed_max_width \
            or self._old_embed_max_height != self.embed_max_height


    def store_response(self, response):
        # Store the OEmbed response
        # Unused: cache_age
        # Security considerations: URLs are checked by Django for http:// or ftp://
        KEYS = (
            'type', 'title', 'description', 'author_name', 'author_url', 'provider_url', 'provider_name',
            'thumbnail_width', 'thumbnail_height', 'thumbnail_url', 'height', 'width', 'html', 'url'
        )

        for key in KEYS:
            if response.has_key(key):
                setattr(self, key, response[key])



class OEmbedItem(AbstractOEmbedItem):
    """
    Embedded media via OEmbed
    """

    class Meta:
        verbose_name = _("Online media")
        verbose_name_plural = _("Online media")
########NEW FILE########
__FILENAME__ = appsettings
from django.conf import settings

FLUENT_PICTURE_UPLOAD_TO = getattr(settings, 'FLUENT_PICTURE_UPLOAD_TO', '.')

########NEW FILE########
__FILENAME__ = content_plugins
from django.contrib.admin.widgets import AdminTextareaWidget
from django.utils.translation import ugettext_lazy as _
from fluent_contents.extensions import ContentPlugin, plugin_pool
from fluent_contents.plugins.picture.models import PictureItem


@plugin_pool.register
class PicturePlugin(ContentPlugin):
    """
    Plugin for rendering pictures.
    """
    model = PictureItem
    category = _('Media')
    render_template = "fluent_contents/plugins/picture/default.html"

    formfield_overrides = {
        'caption': {
            'widget': AdminTextareaWidget(attrs={'cols': 30, 'rows': 4, 'class': 'vTextField'}),
        },
    }
    radio_fields = {
        'align': ContentPlugin.HORIZONTAL
    }

    class Media:
        css = {
            'screen': (
                'fluent_contents/plugins/picture/picture_admin.css',
            )
        }

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):
    depends_on = (
        ("fluent_contents", "0001_initial"),
    )

    def forwards(self, orm):
        # Adding model 'PictureItem'
        db.create_table('contentitem_picture_pictureitem', (
            ('contentitem_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['fluent_contents.ContentItem'], unique=True, primary_key=True)),
            ('image', self.gf('django.db.models.fields.files.ImageField')(max_length=100)),
            ('caption', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('align', self.gf('django.db.models.fields.CharField')(max_length=10, blank=True)),
            ('url', self.gf('django.db.models.fields.URLField')(max_length=200, blank=True)),
        ))
        db.send_create_signal('picture', ['PictureItem'])


    def backwards(self, orm):
        # Deleting model 'PictureItem'
        db.delete_table('contentitem_picture_pictureitem')


    models = {
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1', 'db_index': 'True'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'picture.pictureitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'PictureItem', 'db_table': "'contentitem_picture_pictureitem'", '_ormbases': ['fluent_contents.ContentItem']},
            'align': ('django.db.models.fields.CharField', [], {'max_length': '10', 'blank': 'True'}),
            'caption': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'contentitem_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['fluent_contents.ContentItem']", 'unique': 'True', 'primary_key': 'True'}),
            'image': ('django.db.models.fields.files.ImageField', [], {'max_length': '100'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'blank': 'True'})
        }
    }

    complete_apps = ['picture']
########NEW FILE########
__FILENAME__ = 0002_add_open_in_new_window
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'PictureItem.in_new_window'
        db.add_column(u'contentitem_picture_pictureitem', 'in_new_window',
                      self.gf('django.db.models.fields.BooleanField')(default=False),
                      keep_default=False)


        # Changing field 'PictureItem.url'
        db.alter_column(u'contentitem_picture_pictureitem', 'url', self.gf('any_urlfield.models.fields.AnyUrlField')(max_length=300))

        # Changing field 'PictureItem.image'
        db.alter_column(u'contentitem_picture_pictureitem', 'image', self.gf('any_imagefield.models.fields.AnyImageField')(max_length=100))

    def backwards(self, orm):
        # Deleting field 'PictureItem.in_new_window'
        db.delete_column(u'contentitem_picture_pictureitem', 'in_new_window')


        # Changing field 'PictureItem.url'
        db.alter_column(u'contentitem_picture_pictureitem', 'url', self.gf('django.db.models.fields.URLField')(max_length=200))

        # Changing field 'PictureItem.image'
        db.alter_column(u'contentitem_picture_pictureitem', 'image', self.gf('django.db.models.fields.files.ImageField')(max_length=100))

    models = {
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': u"orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1', 'db_index': 'True'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        u'picture.pictureitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'PictureItem', 'db_table': "u'contentitem_picture_pictureitem'", '_ormbases': ['fluent_contents.ContentItem']},
            'align': ('django.db.models.fields.CharField', [], {'max_length': '10', 'blank': 'True'}),
            'caption': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            u'contentitem_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['fluent_contents.ContentItem']", 'unique': 'True', 'primary_key': 'True'}),
            'image': ('any_imagefield.models.fields.AnyImageField', [], {'max_length': '100'}),
            'in_new_window': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'url': ('any_urlfield.models.fields.AnyUrlField', [], {'max_length': '300', 'blank': 'True'})
        }
    }

    complete_apps = ['picture']
########NEW FILE########
__FILENAME__ = models
from django.db import models
from django.utils.translation import ugettext_lazy as _
from fluent_contents.extensions import PluginImageField, PluginUrlField
from fluent_contents.models.db import ContentItem
from . import appsettings


class PictureItem(ContentItem):
    """
    Display a picture
    """
    ALIGN_LEFT = 'left'
    ALIGN_CENTER = 'center'
    ALIGN_RIGHT = 'right'
    ALIGN_CHOICES = (
        (ALIGN_LEFT, _("Left")),
        (ALIGN_CENTER, _("Center")),
        (ALIGN_RIGHT, _("Right")),
    )

    image = PluginImageField(_("Image"), upload_to=appsettings.FLUENT_PICTURE_UPLOAD_TO)
    caption = models.TextField(_("Caption"), blank=True)
    align = models.CharField(_("Align"), max_length=10, choices=ALIGN_CHOICES, blank=True)
    url = PluginUrlField(_("URL"), blank=True)
    in_new_window = models.BooleanField(_("Open in a new window"), default=False, blank=True)

    class Meta:
        verbose_name = _("Picture")
        verbose_name_plural = _("Pictures")

    def __unicode__(self):
        return self.caption or unicode(self.image)

    @property
    def align_class(self):
        """
        The CSS class for alignment.
        """
        if self.align == self.ALIGN_LEFT:
            return 'align-left'
        elif self.align == self.ALIGN_CENTER:
            return 'align-center'
        elif self.align == self.ALIGN_RIGHT:
            return 'align-right'
        else:
            return ''

########NEW FILE########
__FILENAME__ = content_plugins
from django.utils.safestring import mark_safe
from django.utils.translation import ugettext_lazy as _
from fluent_contents.extensions import ContentPlugin, plugin_pool
from fluent_contents.plugins.rawhtml.models import RawHtmlItem


@plugin_pool.register
class RawHtmlPlugin(ContentPlugin):
    """
    Plugin for rendering raw HTML output.
    This can be used to insert embed codes in a webpage,
    for example for Google Docs, YouTube or SlideShare.
    """
    model = RawHtmlItem
    category = _('Advanced')
    admin_form_template = ContentPlugin.ADMIN_TEMPLATE_WITHOUT_LABELS

    class Media:
        css = {'screen': ('fluent_contents/plugins/rawhtml/rawhtml_admin.css',)}


    def render(self, request, instance, **kwargs):
        return mark_safe(instance.html)

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):
    depends_on = (
        ("fluent_contents", "0001_initial"),
    )

    def forwards(self, orm):
        
        # Adding model 'RawHtmlItem'
        db.create_table('contentitem_rawhtml_rawhtmlitem', (
            ('contentitem_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['fluent_contents.ContentItem'], unique=True, primary_key=True)),
            ('html', self.gf('django.db.models.fields.TextField')()),
        ))
        db.send_create_signal('rawhtml', ['RawHtmlItem'])


    def backwards(self, orm):
        
        # Deleting model 'RawHtmlItem'
        db.delete_table('contentitem_rawhtml_rawhtmlitem')


    models = {
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'rawhtml.rawhtmlitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'RawHtmlItem', 'db_table': "'contentitem_rawhtml_rawhtmlitem'", '_ormbases': ['fluent_contents.ContentItem']},
            'contentitem_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['fluent_contents.ContentItem']", 'unique': 'True', 'primary_key': 'True'}),
            'html': ('django.db.models.fields.TextField', [], {})
        }
    }

    complete_apps = ['rawhtml']

########NEW FILE########
__FILENAME__ = models
from django.db import models
from django.utils.html import strip_tags
from django.utils.translation import ugettext_lazy as _
from fluent_contents.models import ContentItem

class RawHtmlItem(ContentItem):
    html = models.TextField(_('HTML code'), help_text=_("Enter the HTML code to display, like the embed code of an online widget."))

    class Meta:
        verbose_name = _('HTML code')
        verbose_name_plural = _('HTML code')

    def __unicode__(self):
        return strip_tags(self.html).strip()

########NEW FILE########
__FILENAME__ = admin
from django.conf import settings
from django.contrib import admin
from django.utils.translation import ugettext_lazy as _
from parler.admin import TranslatableAdmin
from fluent_contents import appsettings
from fluent_contents.admin import PlaceholderFieldAdmin
from .models import SharedContent


class SharedContentAdmin(TranslatableAdmin, PlaceholderFieldAdmin):
    """
    Admin screen for the shared content, displayed in the global Django admin.
    """
    list_display = ('title', 'slug')

    def get_prepopulated_fields(self, request, obj=None):
        # Needed instead of prepopulated_fields=.. for django-parler==0.9
        if obj is not None and obj.pk:
            # Avoid overwriting the slug when adding a new language.
            return {}
        else:
            return {
                'slug': ('title',)
            }

    # Using declared_fieldsets for Django 1.4, otherwise fieldsets= would work too.
    declared_fieldsets = (
        (None, {
            'fields': ('title', 'contents')
        }),
        (_("Publication settings"), {
            'fields': ('slug',),
            'classes': ('collapse',),
        })
    )

    def queryset(self, request):
        # sharedcontent is filtered only visually, not in the queryset
        qs = super(SharedContentAdmin, self).queryset(request)
        if appsettings.FLUENT_CONTENTS_FILTER_SITE_ID:
            qs = qs.parent_site(settings.SITE_ID)
        return qs


admin.site.register(SharedContent, SharedContentAdmin)

########NEW FILE########
__FILENAME__ = content_plugins
from django.conf import settings
from django.utils.translation import ugettext_lazy as _
from fluent_contents import appsettings
from fluent_contents.extensions import ContentPlugin, ContentItemForm, plugin_pool
from fluent_contents.plugins.sharedcontent.models import SharedContentItem
from fluent_contents.rendering import render_placeholder


class SharedContentItemForm(ContentItemForm):
    """
    Admin form for shared content item.
    """
    def __init__(self, *args, **kwargs):
        super(SharedContentItemForm, self).__init__(*args, **kwargs)

        # Filter dynamically, not with limit_choices_to.
        # This supports a threadlocal SITE_ID that django-multisite uses for example.
        if appsettings.FLUENT_CONTENTS_FILTER_SITE_ID:
            field = self.fields['shared_content']
            field.queryset = field.queryset.parent_site(settings.SITE_ID)


@plugin_pool.register
class SharedContentPlugin(ContentPlugin):
    """
    Plugin for sharing content at the page.
    """
    model = SharedContentItem
    form = SharedContentItemForm
    category = _('Advanced')
    cache_output = False  # Individual items are cached, complete block not yet.

    def render(self, request, instance, **kwargs):
        # Not using "template" parameter yet of render_placeholder().
        # The render_placeholder() returns a ContentItemOutput object, which contains both the media and HTML code.
        # Hence, no mark_safe() or escaping is applied here.
        shared_content = instance.shared_content
        return render_placeholder(request, shared_content.contents, parent_object=shared_content, fallback_language=True)

    # NOTE: typically, get_frontend_media() should be overwritten,
    # but render_placeholder() already tracks all media in the request.

########NEW FILE########
__FILENAME__ = managers
from parler.managers import TranslatableManager, TranslatableQuerySet


class SharedContentQuerySet(TranslatableQuerySet):
    """
    The QuerySet for SharedContent models.
    """

    def parent_site(self, site):
        """
        Filter to the given site.
        """
        return self.filter(parent_site=site)


class SharedContentManager(TranslatableManager):
    """
    Extra methods attached to ``SharedContent.objects`` .
    """
    queryset_class = SharedContentQuerySet

    def parent_site(self, site):
        """
        Filter to the given site.
        """
        return self.get_query_set().parent_site(site)

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):
    depends_on = (
        ("fluent_contents", "0001_initial"),
    )

    def forwards(self, orm):
        # Adding model 'SharedContent'
        db.create_table('sharedcontent_sharedcontent', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=200)),
            ('slug', self.gf('django.db.models.fields.SlugField')(unique=True, max_length=50)),
        ))
        db.send_create_signal('sharedcontent', ['SharedContent'])

        # Adding model 'SharedContentItem'
        db.create_table('contentitem_sharedcontent_sharedcontentitem', (
            ('contentitem_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['fluent_contents.ContentItem'], unique=True, primary_key=True)),
            ('shared_content', self.gf('django.db.models.fields.related.ForeignKey')(related_name='shared_content_items', to=orm['sharedcontent.SharedContent'])),
        ))
        db.send_create_signal('sharedcontent', ['SharedContentItem'])


    def backwards(self, orm):
        # Deleting model 'SharedContent'
        db.delete_table('sharedcontent_sharedcontent')

        # Deleting model 'SharedContentItem'
        db.delete_table('contentitem_sharedcontent_sharedcontentitem')


    models = {
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1', 'db_index': 'True'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'sharedcontent.sharedcontent': {
            'Meta': {'object_name': 'SharedContent'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        'sharedcontent.sharedcontentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'SharedContentItem', 'db_table': "'contentitem_sharedcontent_sharedcontentitem'", '_ormbases': ['fluent_contents.ContentItem']},
            'contentitem_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['fluent_contents.ContentItem']", 'unique': 'True', 'primary_key': 'True'}),
            'shared_content': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shared_content_items'", 'to': "orm['sharedcontent.SharedContent']"})
        }
    }

    complete_apps = ['sharedcontent']
########NEW FILE########
__FILENAME__ = 0002_add_translation_model
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'SharedContent_Translation'
        db.create_table(u'sharedcontent_sharedcontent_translation', (
            (u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('language_code', self.gf('django.db.models.fields.CharField')(max_length=15, db_index=True)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=200)),
            ('master', self.gf('django.db.models.fields.related.ForeignKey')(related_name='translations', null=True, to=orm['sharedcontent.SharedContent'])),
        ))
        db.send_create_signal(u'sharedcontent', ['SharedContent_Translation'])

        # Adding unique constraint on 'SharedContent_Translation', fields ['language_code', 'master']
        db.create_unique(u'sharedcontent_sharedcontent_translation', ['language_code', 'master_id'])


    def backwards(self, orm):
        # Removing unique constraint on 'SharedContent_Translation', fields ['language_code', 'master']
        db.delete_unique(u'sharedcontent_sharedcontent_translation', ['language_code', 'master_id'])

        # Deleting model 'SharedContent_Translation'
        db.delete_table(u'sharedcontent_sharedcontent_translation')


    models = {
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language_code': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '15', 'db_index': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': u"orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1', 'db_index': 'True'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        u'sharedcontent.sharedcontent': {
            'Meta': {'object_name': 'SharedContent'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        u'sharedcontent.sharedcontent_translation': {
            'Meta': {'unique_together': "[('language_code', 'master')]", 'object_name': 'SharedContent_Translation'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language_code': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'master': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'null': 'True', 'to': u"orm['sharedcontent.SharedContent']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        u'sharedcontent.sharedcontentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'SharedContentItem', 'db_table': "u'contentitem_sharedcontent_sharedcontentitem'", '_ormbases': ['fluent_contents.ContentItem']},
            u'contentitem_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['fluent_contents.ContentItem']", 'unique': 'True', 'primary_key': 'True'}),
            'shared_content': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shared_content_items'", 'to': u"orm['sharedcontent.SharedContent']"})
        }
    }

    complete_apps = ['sharedcontent']
########NEW FILE########
__FILENAME__ = 0003_migrate_translated_fields
# -*- coding: utf-8 -*-
import datetime
from django.core.exceptions import ObjectDoesNotExist
from south.db import db
from south.v2 import DataMigration
from django.db import models
from fluent_contents import appsettings


class Migration(DataMigration):

    def forwards(self, orm):
        db.execute(
            'INSERT INTO sharedcontent_sharedcontent_translation(title, language_code, master_id)'
            ' SELECT title, %s, id FROM sharedcontent_sharedcontent',
            [appsettings.FLUENT_CONTENTS_DEFAULT_LANGUAGE_CODE]
        )

    def backwards(self, orm):
        # Convert all fields back to the single-language table.
        for sharedcontent in orm['sharedcontent.SharedContent'].objects.all():
            translations = orm['sharedcontent.SharedContent_Translation'].objects.filter(master_id=sharedcontent.id)
            try:
                # Try default translation
                translation = translations.get(language_code=appsettings.FLUENT_CONTENTS_DEFAULT_LANGUAGE_CODE)
            except ObjectDoesNotExist:
                try:
                    # Try internal fallback
                    translation = translations.get(language_code__in=('en-us', 'en'))
                except ObjectDoesNotExist:
                    # Hope there is a single translation
                    translation = translations.get()

            sharedcontent.title = translation.title
            sharedcontent.save()

    models = {
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language_code': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '15', 'db_index': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': u"orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1', 'db_index': 'True'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        u'sharedcontent.sharedcontent': {
            'Meta': {'object_name': 'SharedContent'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        u'sharedcontent.sharedcontent_translation': {
            'Meta': {'unique_together': "[('language_code', 'master')]", 'object_name': 'SharedContent_Translation'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language_code': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'master': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'null': 'True', 'to': u"orm['sharedcontent.SharedContent']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        u'sharedcontent.sharedcontentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'SharedContentItem', 'db_table': "u'contentitem_sharedcontent_sharedcontentitem'", '_ormbases': ['fluent_contents.ContentItem']},
            u'contentitem_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['fluent_contents.ContentItem']", 'unique': 'True', 'primary_key': 'True'}),
            'shared_content': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shared_content_items'", 'to': u"orm['sharedcontent.SharedContent']"})
        }
    }

    complete_apps = ['sharedcontent']
    symmetrical = True

########NEW FILE########
__FILENAME__ = 0004_remove_untranslated_fields
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Deleting field 'SharedContent.title'
        db.delete_column(u'sharedcontent_sharedcontent', 'title')


    def backwards(self, orm):
        # Adding field 'SharedContent.title'
        db.add_column(u'sharedcontent_sharedcontent', 'title',
                      self.gf('django.db.models.fields.CharField')(default='', max_length=200),
                      keep_default=False)


    models = {
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language_code': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '15', 'db_index': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': u"orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1', 'db_index': 'True'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        u'sharedcontent.sharedcontent': {
            'Meta': {'object_name': 'SharedContent'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'})
        },
        u'sharedcontent.sharedcontent_translation': {
            'Meta': {'unique_together': "[('language_code', 'master')]", 'object_name': 'SharedContent_Translation'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language_code': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'master': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'null': 'True', 'to': u"orm['sharedcontent.SharedContent']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        u'sharedcontent.sharedcontentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'SharedContentItem', 'db_table': "u'contentitem_sharedcontent_sharedcontentitem'", '_ormbases': ['fluent_contents.ContentItem']},
            u'contentitem_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['fluent_contents.ContentItem']", 'unique': 'True', 'primary_key': 'True'}),
            'shared_content': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shared_content_items'", 'to': u"orm['sharedcontent.SharedContent']"})
        }
    }

    complete_apps = ['sharedcontent']
########NEW FILE########
__FILENAME__ = 0005_upgrade_to_django_parler10
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # The automatically generated model name was changed, table layout remains the same.
        # This migration only updates the frozen model definitions.
        pass

    def backwards(self, orm):
        pass

    models = {
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language_code': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '15', 'db_index': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': u"orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1', 'db_index': 'True'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        u'sharedcontent.sharedcontent': {
            'Meta': {'object_name': 'SharedContent'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'})
        },
        u'sharedcontent.sharedcontentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'SharedContentItem', 'db_table': "u'contentitem_sharedcontent_sharedcontentitem'", '_ormbases': ['fluent_contents.ContentItem']},
            u'contentitem_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['fluent_contents.ContentItem']", 'unique': 'True', 'primary_key': 'True'}),
            'shared_content': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shared_content_items'", 'to': u"orm['sharedcontent.SharedContent']"})
        },
        u'sharedcontent.sharedcontenttranslation': {
            'Meta': {'unique_together': "[('language_code', 'master')]", 'object_name': 'SharedContentTranslation', 'db_table': "u'sharedcontent_sharedcontent_translation'"},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language_code': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'master': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'null': 'True', 'to': u"orm['sharedcontent.SharedContent']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        }
    }

    complete_apps = ['sharedcontent']
########NEW FILE########
__FILENAME__ = 0006_add_multisite_support
# -*- coding: utf-8 -*-
import datetime
from django.conf import settings
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Removing unique constraint on 'SharedContent', fields ['slug']
        db.delete_unique(u'sharedcontent_sharedcontent', ['slug'])

        # Adding field 'SharedContent.parent_site'
        db.add_column(u'sharedcontent_sharedcontent', 'parent_site',
                      self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sites.Site'], default=settings.SITE_ID),
                      keep_default=False)

        # Adding unique constraint on 'SharedContent', fields ['site', 'slug']
        db.create_unique(u'sharedcontent_sharedcontent', ['parent_site_id', 'slug'])


    def backwards(self, orm):
        # Removing unique constraint on 'SharedContent', fields ['parent_site', 'slug']
        db.delete_unique(u'sharedcontent_sharedcontent', ['parent_site_id', 'slug'])

        # Deleting field 'SharedContent.parent_site'
        db.delete_column(u'sharedcontent_sharedcontent', 'parent_site_id')

        # Adding unique constraint on 'SharedContent', fields ['slug']
        db.create_unique(u'sharedcontent_sharedcontent', ['slug'])


    models = {
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language_code': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '15', 'db_index': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': u"orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1', 'db_index': 'True'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        u'sharedcontent.sharedcontent': {
            'Meta': {'unique_together': "(('parent_site', 'slug'),)", 'object_name': 'SharedContent'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_site': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sites.Site']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'})
        },
        u'sharedcontent.sharedcontentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'SharedContentItem', 'db_table': "u'contentitem_sharedcontent_sharedcontentitem'", '_ormbases': ['fluent_contents.ContentItem']},
            u'contentitem_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['fluent_contents.ContentItem']", 'unique': 'True', 'primary_key': 'True'}),
            'shared_content': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'shared_content_items'", 'to': u"orm['sharedcontent.SharedContent']"})
        },
        u'sharedcontent.sharedcontenttranslation': {
            'Meta': {'unique_together': "[(u'language_code', u'master')]", 'object_name': 'SharedContentTranslation', 'db_table': "u'sharedcontent_sharedcontent_translation'"},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language_code': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            u'master': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'translations'", 'null': 'True', 'to': u"orm['sharedcontent.SharedContent']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        },
        u'sites.site': {
            'Meta': {'ordering': "('domain',)", 'object_name': 'Site', 'db_table': "'django_site'"},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        }
    }

    complete_apps = ['sharedcontent']

########NEW FILE########
__FILENAME__ = models
from django.contrib.sites.models import Site
from django.db import models
from django.utils.translation import ugettext_lazy as _
from parler.models import TranslatableModel, TranslatedFields
from fluent_contents.models import ContentItem, PlaceholderField, ContentItemRelation
from .managers import SharedContentManager


def _get_current_site():
    return Site.objects.get_current()


class SharedContent(TranslatableModel):
    """
    The parent hosting object for shared content
    """
    translations = TranslatedFields(
        title = models.CharField(_("Title"), max_length=200)
    )

    parent_site = models.ForeignKey(Site, editable=False, default=_get_current_site)
    slug = models.SlugField(_("Template code"), help_text=_("This unique name can be used refer to this content in in templates."))
    contents = PlaceholderField("shared_content", verbose_name=_("Contents"))

    # NOTE: settings such as "template_name", and which plugins are allowed can be added later.

    # Adding the reverse relation for ContentItem objects
    # causes the admin to list these objects when moving the shared content
    contentitem_set = ContentItemRelation()

    objects = SharedContentManager()

    class Meta:
        verbose_name = _("Shared content")
        verbose_name_plural = _("Shared content")
        unique_together = (
            ('parent_site', 'slug'),
        )

    def __unicode__(self):
        return self.title


class SharedContentItem(ContentItem):
    """
    The contentitem to include in a page.
    """
    shared_content = models.ForeignKey(SharedContent, verbose_name=_('Shared content'), related_name='shared_content_items')

    class Meta:
        verbose_name = _('Shared content')
        verbose_name_plural = _('Shared content')

    def __unicode__(self):
        return unicode(self.shared_content)

########NEW FILE########
__FILENAME__ = sharedcontent_tags
from django.template import Library, TemplateSyntaxError
from django.contrib.sites.models import Site
from fluent_contents import rendering
from fluent_contents.plugins.sharedcontent.models import SharedContent
from tag_parser import template_tag
from tag_parser.basetags import BaseNode

register = Library()


@template_tag(register, 'sharedcontent')
class SharedContentNode(BaseNode):
    """
    Render a shared content block. Usage:

    .. code-block:: django+html

        {% sharedcontent "sidebar" %}

    Optionally, a template can be used to render the content items:

    .. code-block:: html+django

        {% sharedcontent "sidebar" template="mysite/parts/slot_placeholder.html" %}

    That template should loop over the content items, for example:

    .. code-block:: html+django

        {% for contentitem, html in contentitems %}
          {% if not forloop.first %}<div class="splitter"></div>{% endif %}
          {{ html }}
        {% endfor %}
    """
    min_args = 1
    max_args = 1
    allowed_kwargs = ('template',)


    @classmethod
    def validate_args(cls, tag_name, *args, **kwargs):
        if len(args) != 1:
            raise TemplateSyntaxError("""{0} tag allows one arguments: 'slot name' and optionally: template="..".""".format(tag_name))

        super(SharedContentNode, cls).validate_args(tag_name, *args)


    def render_tag(self, context, *tag_args, **tag_kwargs):
        request = self.get_request(context)
        (slot,) = tag_args

        # Get the placeholder
        try:
            site = Site.objects.get_current()
            sharedcontent = SharedContent.objects.parent_site(site).get(slug=slot)
        except SharedContent.DoesNotExist:
            return "<!-- shared content '{0}' does not yet exist -->".format(slot)

        template_name = tag_kwargs.get('template') or None
        return rendering.render_placeholder(request, sharedcontent.contents, sharedcontent, template_name=template_name, fallback_language=True)

########NEW FILE########
__FILENAME__ = appsettings
"""
Settings for the text item.
"""
from django.conf import settings

FLUENT_TEXT_CLEAN_HTML = getattr(settings, "FLUENT_TEXT_CLEAN_HTML", False)
FLUENT_TEXT_SANITIZE_HTML = getattr(settings, "FLUENT_TEXT_SANITIZE_HTML", False)

########NEW FILE########
__FILENAME__ = content_plugins
"""
Definition of the plugin.
"""
from django.utils.safestring import mark_safe
from fluent_contents.extensions import ContentPlugin, plugin_pool
from fluent_contents.plugins.text.models import TextItem


@plugin_pool.register
class TextPlugin(ContentPlugin):
    model = TextItem
    admin_init_template = "admin/fluent_contents/plugins/text/admin_init.html"
    admin_form_template = ContentPlugin.ADMIN_TEMPLATE_WITHOUT_LABELS

    def render(self, request, instance, **kwargs):
        # Included in a DIV, so the next item will be displayed below.
        return mark_safe('<div class="text">' + instance.text + '</div>\n')

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):
    depends_on = (
        ("fluent_contents", "0001_initial"),
    )

    def forwards(self, orm):
        
        # Adding model 'TextItem'
        db.create_table('contentitem_text_textitem', (
            ('contentitem_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['fluent_contents.ContentItem'], unique=True, primary_key=True)),
            ('text', self.gf('django.db.models.fields.TextField')(blank=True)),
        ))
        db.send_create_signal('text', ['TextItem'])


    def backwards(self, orm):
        
        # Deleting model 'TextItem'
        db.delete_table('contentitem_text_textitem')


    models = {
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'text.textitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'TextItem', 'db_table': "'contentitem_text_textitem'", '_ormbases': ['fluent_contents.ContentItem']},
            'contentitem_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['fluent_contents.ContentItem']", 'unique': 'True', 'primary_key': 'True'}),
            'text': ('django.db.models.fields.TextField', [], {'blank': 'True'})
        }
    }

    complete_apps = ['text']

########NEW FILE########
__FILENAME__ = models
from django.utils.html import strip_tags
from django.utils.text import Truncator
from django.utils.translation import ugettext_lazy as _
from fluent_contents.extensions import PluginHtmlField
from fluent_contents.models import ContentItem
from fluent_contents.plugins.text import appsettings
from django_wysiwyg.utils import clean_html, sanitize_html


class TextItem(ContentItem):
    """
    A snippet of HTML text to display on a page.
    """
    text = PluginHtmlField(_('text'), blank=True)

    class Meta:
        verbose_name = _('Text')
        verbose_name_plural = _('Text')

    def __unicode__(self):
        return Truncator(strip_tags(self.text)).words(20)

    def save(self, *args, **kwargs):
        # Make well-formed if requested
        if appsettings.FLUENT_TEXT_CLEAN_HTML:
            self.text = clean_html(self.text)

        # Remove unwanted tags if requested
        if appsettings.FLUENT_TEXT_SANITIZE_HTML:
            self.text = sanitize_html(self.text)

        super(TextItem, self).save(*args, **kwargs)

########NEW FILE########
__FILENAME__ = appsettings
"""
Settings for the twitterfeed item.
"""
from django.conf import settings

FLUENT_TWITTERFEED_AVATAR_SIZE = getattr(settings, "FLUENT_TWITTERFEED_AVATAR_SIZE", 32)
FLUENT_TWITTERFEED_REFRESH_INTERVAL = getattr(settings, "FLUENT_TWITTERFEED_REFRESH_INTERVAL", 0)
FLUENT_TWITTERFEED_TEXT_TEMPLATE = getattr(settings, "FLUENT_TWITTERFEED_TEXT_TEMPLATE", "{avatar}{text} {time}")


# The text template can hold any variable of the JavaScript extract_template_data() function,
# However, the most relevent fields are:
#
# {screen_name}
# {avatar}
# {text}
# {time}  (the relative time)
# {user_url}
# {tweet_url}

########NEW FILE########
__FILENAME__ = content_plugins
from django.utils.translation import ugettext_lazy as _
from fluent_contents.extensions import ContentPlugin, plugin_pool
from fluent_contents.plugins.twitterfeed import appsettings
from fluent_contents.plugins.twitterfeed.models import TwitterRecentEntriesItem, TwitterSearchItem


class BaseTwitterPlugin(ContentPlugin):
    category = _('Media')

    def get_context(self, request, instance, **kwargs):
        context = super(BaseTwitterPlugin, self).get_context(request, instance, **kwargs)
        context.update({
            'AVATAR_SIZE': int(appsettings.FLUENT_TWITTERFEED_AVATAR_SIZE),
            'REFRESH_INTERVAL': int(appsettings.FLUENT_TWITTERFEED_REFRESH_INTERVAL),
            'TEXT_TEMPLATE': appsettings.FLUENT_TWITTERFEED_TEXT_TEMPLATE,
        })
        return context


@plugin_pool.register
class TwitterRecentEntriesPlugin(BaseTwitterPlugin):
    """
    The plugin to display recent twitter entries of a user.
    """
    model = TwitterRecentEntriesItem
    render_template = "plugins/twitterfeed/recent_entries.html"


@plugin_pool.register
class TwitterSearchPlugin(BaseTwitterPlugin):
    """
    The plugin to display recent twitter entries of a user.
    """
    model = TwitterSearchItem
    render_template = "plugins/twitterfeed/search.html"

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):
    depends_on = (
        ("fluent_contents", "0001_initial"),
    )

    def forwards(self, orm):
        
        # Adding model 'TwitterRecentEntriesItem'
        db.create_table('contentitem_twitterfeed_twitterrecententriesitem', (
            ('contentitem_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['fluent_contents.ContentItem'], unique=True, primary_key=True)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=200, blank=True)),
            ('twitter_user', self.gf('django.db.models.fields.CharField')(max_length=75)),
            ('amount', self.gf('django.db.models.fields.PositiveSmallIntegerField')(default=5)),
            ('footer_text', self.gf('django.db.models.fields.CharField')(max_length=200, blank=True)),
            ('include_retweets', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('include_replies', self.gf('django.db.models.fields.BooleanField')(default=False)),
        ))
        db.send_create_signal('twitterfeed', ['TwitterRecentEntriesItem'])

        # Adding model 'TwitterSearchItem'
        db.create_table('contentitem_twitterfeed_twittersearchitem', (
            ('contentitem_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['fluent_contents.ContentItem'], unique=True, primary_key=True)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=200, blank=True)),
            ('query', self.gf('django.db.models.fields.CharField')(default='', max_length=200)),
            ('amount', self.gf('django.db.models.fields.PositiveSmallIntegerField')(default=5)),
            ('footer_text', self.gf('django.db.models.fields.CharField')(max_length=200, blank=True)),
            ('include_retweets', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('include_replies', self.gf('django.db.models.fields.BooleanField')(default=False)),
        ))
        db.send_create_signal('twitterfeed', ['TwitterSearchItem'])


    def backwards(self, orm):
        
        # Deleting model 'TwitterRecentEntriesItem'
        db.delete_table('contentitem_twitterfeed_twitterrecententriesitem')

        # Deleting model 'TwitterSearchItem'
        db.delete_table('contentitem_twitterfeed_twittersearchitem')


    models = {
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'fluent_contents.contentitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'ContentItem'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contentitems'", 'null': 'True', 'to': "orm['fluent_contents.Placeholder']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_fluent_contents.contentitem_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sort_order': ('django.db.models.fields.IntegerField', [], {'default': '1', 'db_index': 'True'})
        },
        'fluent_contents.placeholder': {
            'Meta': {'unique_together': "(('parent_type', 'parent_id', 'slot'),)", 'object_name': 'Placeholder'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'parent_id': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
            'parent_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']", 'null': 'True', 'blank': 'True'}),
            'role': ('django.db.models.fields.CharField', [], {'default': "'m'", 'max_length': '1'}),
            'slot': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'db_index': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'})
        },
        'twitterfeed.twitterrecententriesitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'TwitterRecentEntriesItem', 'db_table': "'contentitem_twitterfeed_twitterrecententriesitem'", '_ormbases': ['fluent_contents.ContentItem']},
            'amount': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '5'}),
            'contentitem_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['fluent_contents.ContentItem']", 'unique': 'True', 'primary_key': 'True'}),
            'footer_text': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'include_replies': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'include_retweets': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'twitter_user': ('django.db.models.fields.CharField', [], {'max_length': '75'})
        },
        'twitterfeed.twittersearchitem': {
            'Meta': {'ordering': "('placeholder', 'sort_order')", 'object_name': 'TwitterSearchItem', 'db_table': "'contentitem_twitterfeed_twittersearchitem'", '_ormbases': ['fluent_contents.ContentItem']},
            'amount': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '5'}),
            'contentitem_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['fluent_contents.ContentItem']", 'unique': 'True', 'primary_key': 'True'}),
            'footer_text': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'}),
            'include_replies': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'include_retweets': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'query': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '200'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '200', 'blank': 'True'})
        }
    }

    complete_apps = ['twitterfeed']

########NEW FILE########
__FILENAME__ = models
from django.db import models
from django.utils.translation import ugettext_lazy as _
from fluent_contents.models.db import ContentItem


class TwitterRecentEntriesItem(ContentItem):
    """
    Content item to display recent entries of a twitter user.
    """
    title = models.CharField(_('Title'), max_length=200, blank=True, help_text=_('You may use Twitter markup here, such as a #hashtag or @username.'))

    twitter_user = models.CharField(_('Twitter user'), max_length=75)
    amount = models.PositiveSmallIntegerField(_('Number of results'), default=5)

    footer_text = models.CharField(_('Footer text'), max_length=200, blank=True, help_text=_('You may use Twitter markup here, such as a #hashtag or @username.'))
    include_retweets = models.BooleanField(_("Include retweets"))
    include_replies = models.BooleanField(_("Include replies"))

    def __unicode__(self):
        return self.title or self.twitter_user

    class Meta:
        verbose_name = _('Recent twitter entries')
        verbose_name_plural = _('Recent twitter entries')


class TwitterSearchItem(ContentItem):
    """
    Content item to display recent entries of a twitter user.
    """
    title = models.CharField(_('Title'), max_length=200, blank=True, help_text=_('You may use Twitter markup here, such as a #hashtag or @username.'))

    query = models.CharField(_('Search for'), max_length=200, default='', help_text=_('<a href="https://support.twitter.com/articles/71577" target="_blank">Twitter search syntax</a> is allowed.'))
    amount = models.PositiveSmallIntegerField(_('Number of results'), default=5)

    footer_text = models.CharField(_('Footer text'), max_length=200, blank=True, help_text=_('You may use Twitter markup here, such as a #hashtag or @username.'))
    include_retweets = models.BooleanField(_("Include retweets"))
    include_replies = models.BooleanField(_("Include replies"))

    def __unicode__(self):
        return self.title or self.query

    class Meta:
        verbose_name = _('Twitter search feed')
        verbose_name_plural = _('Twitter search feed')

########NEW FILE########
__FILENAME__ = twitterfeed_tags
from django.template import Library
from django.utils.safestring import mark_safe
from twitter_text import TwitterText

register = Library()


@register.filter
def urlize_twitter(text):
    """
    Replace #hashtag and @username references in a tweet with HTML text.
    """
    tt = TwitterText(text)
    html = tt.autolink.auto_link()
    html = html.replace('twitter.com/search?q=', 'twitter.com/search/realtime/')
    return mark_safe(html)

########NEW FILE########
__FILENAME__ = rendering
"""
This module provides functions to render placeholder content manually.
Contents is cached in memcache whenever possible, only the remaining items are queried.
The templatetags also use these functions to render the :class:`~fluent_contents.models.ContentItem` objects.
"""
import os
from django.conf import settings
from django.core.cache import cache
from django.forms import Media
from django.template.context import RequestContext
from django.template.loader import render_to_string, select_template
from django.utils.html import conditional_escape, escape
from django.utils.safestring import mark_safe
from django.utils.translation import get_language
from fluent_contents import appsettings
from fluent_contents.cache import get_rendering_cache_key
from fluent_contents.extensions import PluginNotFound, ContentPlugin
from fluent_contents.models import ContentItemOutput
import logging

# This code is separate from the templatetags,
# so it can be called outside the templates as well.

logger = logging.getLogger(__name__)



def render_placeholder(request, placeholder, parent_object=None, template_name=None, limit_parent_language=True, fallback_language=None):
    """
    Render a :class:`~fluent_contents.models.Placeholder` object.
    Returns a :class:`~fluent_contents.models.ContentItemOutput` object
    which contains the HTML output and :class:`~django.forms.Media` object.

    :param request: The current request object.
    :type request: :class:`~django.http.HttpRequest`
    :param placeholder: The placeholder object.
    :type placeholder: :class:`~fluent_contents.models.Placeholder`
    :param parent_object: Optional, the parent object of the placeholder (already implied by the placeholder)
    :param template_name: Optional template name used to concatenate the placeholder output.
    :type template_name: str
    :param limit_parent_language: Whether the items should be limited to the parent language.
    :type limit_parent_language: bool
    :param fallback_language: The fallback language to use if there are no items in the current language. Passing ``True`` uses the default :ref:`FLUENT_CONTENTS_DEFAULT_LANGUAGE_CODE`.
    :type fallback_language: bool/str
    """
    # Get the items
    items = placeholder.get_content_items(parent_object, limit_parent_language=limit_parent_language)
    if fallback_language and not items:
        language_code = appsettings.FLUENT_CONTENTS_DEFAULT_LANGUAGE_CODE if fallback_language is True else fallback_language
        items = placeholder.get_content_items(parent_object, limit_parent_language=False).translated(language_code)

    output = _render_items(request, placeholder, items, template_name=template_name)

    if is_edit_mode(request):
        output.html = _wrap_placeholder_output(output.html, placeholder)

    return output


def render_content_items(request, items, template_name=None):
    """
    Render a list of :class:`~fluent_contents.models.ContentItem` objects as HTML string.
    This is a variation of the :func:`render_placeholder` function.

    Note that the items are not filtered in any way by parent or language.
    The items are rendered as-is.
    """
    if not items:
        output = ContentItemOutput(mark_safe(u"<!-- no items to render -->"))
    else:
        output = _render_items(request, None, items, template_name=template_name)

    if is_edit_mode(request):
        output.html = _wrap_anonymous_output(output.html)

    return output


def set_edit_mode(request, state):
    """
    Enable the edit mode; placeholders and plugins will be wrapped in a ``<div>`` that exposes metadata for frontend editing.
    """
    setattr(request, '_fluent_contents_edit_mode', bool(state))


def is_edit_mode(request):
    """
    Return whether edit mode is enabled; output is wrapped in ``<div>`` elements with metadata for frontend editing.
    """
    return getattr(request, '_fluent_contents_edit_mode', False)


def register_frontend_media(request, media):
    """
    Add a :class:`~django.forms.Media` class to the current request.
    This will be rendered by the ``render_plugin_media`` template tag.
    """
    if not hasattr(request, '_fluent_contents_frontend_media'):
        request._fluent_contents_frontend_media = Media()

    _add_media(request._fluent_contents_frontend_media, media)


def get_frontend_media(request):
    """
    Return the media that was registered in the request object.
    """
    return getattr(request, '_fluent_contents_frontend_media', None) or Media()


def _render_items(request, placeholder, items, template_name=None):
    edit_mode = is_edit_mode(request)
    item_output = {}
    output_ordering = []
    placeholder_cache_name = '@global@' if placeholder is None else placeholder.slot

    if not hasattr(items, "non_polymorphic"):
        # The items is either a list of manually created items, or it's a QuerySet.
        # Can't prevent reading the subclasses only, so don't bother with caching here.
        remaining_items = items
        output_ordering = [item.pk or id(item) for item in items]
    else:
        items = items.non_polymorphic()

        # First try to fetch all items non-polymorphic from memcache
        # If these are found, there is no need to query the derived data from the database.
        remaining_items = []
        for i, contentitem in enumerate(items):
            output_ordering.append(contentitem.pk)
            output = None
            try:
                # Respect the cache output setting of the plugin
                if appsettings.FLUENT_CONTENTS_CACHE_OUTPUT and contentitem.plugin.cache_output and contentitem.pk:
                    output = contentitem.plugin.get_cached_output(placeholder_cache_name, contentitem)

                    # Support transition to new output format.
                    if not isinstance(output, ContentItemOutput):
                        output = None
                        logger.debug("Flushed cached output of {0}#{1} to store new format (key: {2}) ".format(contentitem.plugin.type_name, contentitem.pk, placeholder_cache_name))
            except PluginNotFound:
                pass

            # For debugging, ignore cached values when the template is updated.
            if output and settings.DEBUG:
                cachekey = get_rendering_cache_key(placeholder_cache_name, contentitem)
                if _is_template_updated(request, contentitem, cachekey):
                    output = None

            if output:
                item_output[contentitem.pk] = output
            else:
                remaining_items.append(contentitem)

        # Fetch derived table data for all objects not found in memcached
        if remaining_items:
            remaining_items = items.get_real_instances(remaining_items)

    # See if the queryset contained anything.
    # This test is moved here, to prevent earlier query execution.
    if not items:
        return ContentItemOutput(mark_safe(u"<!-- no items in placeholder '{0}' -->".format(escape(_get_placeholder_name(placeholder)))))
    elif remaining_items:
        # Render remaining items
        for contentitem in remaining_items:
            try:
                plugin = contentitem.plugin
            except PluginNotFound as e:
                output = ContentItemOutput(mark_safe(u'<!-- error: {0} -->\n'.format(str(e))))
            else:
                # Plugin output is likely HTML, but it should be placed in mark_safe() to raise awareness about escaping.
                # This is just like Django's Input.render() and unlike Node.render().
                output = plugin._render_contentitem(request, contentitem)

                if appsettings.FLUENT_CONTENTS_CACHE_OUTPUT and plugin.cache_output and contentitem.pk:
                    contentitem.plugin.set_cached_output(placeholder_cache_name, contentitem, output)

                if edit_mode:
                    output.html = _wrap_contentitem_output(output.html, contentitem)

            item_id = contentitem.pk or id(contentitem)
            item_output[item_id] = output

    # Order all rendered items in the correct sequence.  The derived tables could be truncated/reset,
    # so the base class model indexes don't necessary match with the derived indexes. Hence the dict + KeyError handling.
    #
    # The media is also collected in the same ordering, in case it's handled by django-compressor for example.
    output_ordered = []
    merged_media = Media()
    for pk in output_ordering:
        try:
            output = item_output[pk]
            output_ordered.append(output.html)
            _add_media(merged_media, output.media)
        except KeyError:
            # The get_real_instances() didn't return an item for the derived table. This happens when either:
            # - that table is truncated/reset, while there is still an entry in the base ContentItem table.
            #   A query at the derived table happens every time the page is being rendered.
            # - the model was completely removed which means there is also a stale ContentType object.
            item = next(item for item in items if item.pk == pk)
            try:
                class_name = item.plugin.type_name
            except PluginNotFound:
                # Derived table isn't there because the model has been removed.
                # There is a stale ContentType object, no plugin associated or loaded.
                class_name = 'content type is stale'

            output_ordered.append(u"<!-- Missing derived model for ContentItem #{id}: {cls}. -->\n".format(id=pk, cls=class_name))
            logger.warning("Missing derived model for ContentItem #{id}: {cls}.".format(id=pk, cls=class_name))
            pass


    # Combine all rendered items. Allow rendering the items with a template,
    # to inserting separators or nice start/end code.
    if not template_name:
        merged_output = mark_safe(''.join(output_ordered))
    else:
        context = {
            'contentitems': zip(items, output_ordered),
            'edit_mode': edit_mode,
        }
        merged_output = render_to_string(template_name, context, context_instance=RequestContext(request))

    return ContentItemOutput(merged_output, merged_media)


def _wrap_placeholder_output(html, placeholder):
    return mark_safe('<div class="cp-editable-placeholder" id="cp-editable-placeholder-{slot}" data-placeholder-id="{id}" data-placeholder-slot="{slot}">' \
           '{html}' \
           '</div>\n'.format(
        html=conditional_escape(html),
        id=placeholder.id,
        slot=placeholder.slot,
    ))


def _wrap_anonymous_output(html):
    return mark_safe('<div class="cp-editable-placeholder">' \
           '{html}' \
           '</div>\n'.format(
        html=conditional_escape(html),
    ))


def _wrap_contentitem_output(html, contentitem):
    return mark_safe('<div class="cp-editable-contentitem" data-itemtype="{itemtype}" data-item-id="{id}">' \
           '{html}' \
           '</div>\n'.format(
        html=conditional_escape(html),
        itemtype=contentitem.__class__.__name__,  # Same as ContentPlugin.type_name
        id=contentitem.id,
    ))


def _get_placeholder_name(placeholder):
    # TODO: Cheating here with knowledge of "fluent_contents.plugins.sharedcontent" package:
    #       prevent unclear message in <!-- no items in '..' placeholder --> debug output.
    if placeholder.slot == 'shared_content':
        sharedcontent = placeholder.parent
        return "shared_content:{0}".format(sharedcontent.slug)

    return placeholder.slot


def _add_media(dest, media):
    # Do what django.forms.Media.__add__() does without creating a new object.
    dest.add_css(media._css)
    dest.add_js(media._js)


def _is_template_updated(request, contentitem, cachekey):
    if not settings.DEBUG:
        return False
    # For debugging only: tell whether the template is updated,
    # so the cached values can be ignored.

    plugin = contentitem.plugin
    if plugin.get_render_template.__func__ is not ContentPlugin.get_render_template.__func__:
        # oh oh, really need to fetch the real object.
        # Won't be needed that often.
        contentitem = contentitem.get_real_instance()  # This is only needed with DEBUG=True
        template_names = plugin.get_render_template(request, contentitem)
    else:
        template_names = plugin.render_template

    if not template_names:
        return False
    if isinstance(template_names, basestring):
        template_names = [template_names]

    # With TEMPLATE_DEBUG = True, each node tracks it's origin.
    node0 = select_template(template_names).nodelist[0]
    attr = 'source' if hasattr(node0, 'source') else 'origin'  # attribute depends on object type
    try:
        template_filename = getattr(node0, attr)[0].name
    except (AttributeError, IndexError):
        return False

    cache_stat = cache.get(cachekey + ".debug-stat")
    current_stat = os.path.getmtime(template_filename)
    if cache_stat != current_stat:
        cache.set(cachekey + ".debug-stat", current_stat)
        return True

########NEW FILE########
__FILENAME__ = fluent_contents_tags
"""
The ``fluent_contents_tags`` module provides two template tags for rendering placeholders:
It can be loaded using:

.. code-block:: html+django

    {% load fluent_contents_tags %}

A placeholder which is stored in a :class:`~fluent_contents.models.PlaceholderField` can
be rendered with the following syntax:

.. code-block:: html+django

    {% render_placeholder someobject.placeholder %}

To support CMS interfaces, placeholder slots can be defined in the template.
This is done using the following syntax:

.. code-block:: html+django

    {% page_placeholder currentpage "slotname" %}
    {% page_placeholder currentpage "slotname" title="Admin title" role="main" %}

The CMS interface can scan for those tags using the :ref:`fluent_contents.analyzer` module.
"""
from django.db.models import Manager
from django.template import Library, Variable, TemplateSyntaxError
from django.utils.safestring import SafeUnicode
from fluent_contents.models import Placeholder
from fluent_contents import rendering
from tag_parser import parse_token_kwargs
from tag_parser.basetags import BaseNode

register = Library()


@register.tag
def page_placeholder(parser, token):
    """
    Render a placeholder for a given object. Syntax:

    .. code-block:: html+django

        {% page_placeholder currentpage "slotname"  %}

    Additionally, extra meta information can be provided for the admin interface.

    .. code-block:: html+django

        {% page_placeholder currentpage "slotname" title="Tab title" role="main %}

    If the currentpage variable is named ``page``, it can be left out.

    The extra information can be extracted with the
    :func:`~PagePlaceholderNode.get_title` and :func:`~PagePlaceholderNode.get_role`
    functions of the :class:`~PagePlaceholderNode` class.

    Optionally, a template can be used to render the placeholder:

    .. code-block:: html+django

        {% page_placeholder currentpage "slotname" template="mysite/parts/slot_placeholder.html" %}

    That template should loop over the content items, for example:

    .. code-block:: html+django

        {% for contentitem, html in contentitems %}
          {% if not forloop.first %}<div class="splitter"></div>{% endif %}
          {{ html }}
        {% endfor %}
    """
    return PagePlaceholderNode.parse(parser, token)


class PagePlaceholderNode(BaseNode):
    """
    The template node of the ``page_placeholder`` tag.
    It renders a placeholder of a provided parent object.
    The template tag can also contain additional metadata,
    which can be returned by scanning for this node using the :ref:`fluent_contents.analyzer` module.
    """
    allowed_kwargs = ('title', 'role', 'template', 'fallback')
    min_args = 1
    max_args = 2


    def __init__(self, tag_name, parent_expr, slot_expr, template_expr, fallback_expr, meta_kwargs):
        super(PagePlaceholderNode, self).__init__(tag_name, parent_expr, slot_expr, template=template_expr, **meta_kwargs)

        self.parent_expr = parent_expr
        self.slot_expr = slot_expr
        self.template_expr = template_expr
        self.fallback_expr = fallback_expr
        self.meta_kwargs = meta_kwargs


    @classmethod
    def parse(cls, parser, token):
        """
        Parse the node syntax:

        .. code-block:: html+django

            {% page_placeholder parentobj slotname title="test" role="m" %}
        """
        tag_name, args, kwargs = parse_token_kwargs(parser, token, allowed_kwargs=cls.allowed_kwargs, compile_args=True, compile_kwargs=True)

        if len(args) == 2:
            parent_expr = args[0]
            slot_expr = args[1]
        elif len(args) == 1:
            # Allow 'page' by default. Works with most CMS'es, including django-fluent-pages.
            parent_expr = Variable('page')
            slot_expr = args[0]
        else:
            raise TemplateSyntaxError("""{0} tag allows two arguments: 'parent object' 'slot name' and optionally: title=".." role="..".""".format(tag_name))

        cls.validate_args(tag_name, *args, **kwargs)

        template_expr = kwargs.pop('template', None)
        fallback_expr = kwargs.pop('fallback', None)
        return cls(
            tag_name=tag_name,
            parent_expr=parent_expr,
            slot_expr=slot_expr,
            template_expr=template_expr,
            fallback_expr=fallback_expr,
            meta_kwargs=kwargs  # The remaining non-functional args for CMS admin page.
        )


    def get_slot(self):
        """
        Return the string literal that is used for the placeholder slot in the template.
        When the variable is not a string literal, ``None`` is returned.
        """
        return self._extract_literal(self.slot_expr)


    def _extract_literal(self, templatevar):
        # FilterExpression contains another 'var' that either contains a Variable or SafeUnicode object.
        if hasattr(templatevar, 'var'):
            templatevar = templatevar.var
            if isinstance(templatevar, SafeUnicode):
                # Literal in FilterExpression, can return.
                return templatevar
            else:
                # Variable in FilterExpression, not going to work here.
                return None

        if templatevar[0] in ('"', "'") and templatevar[-1] in ('"', "'"):
            return templatevar[1:-1]
        else:
            return None


    def _extract_bool(self, templatevar):
        # FilterExpression contains another 'var' that either contains a Variable or SafeUnicode object.
        if hasattr(templatevar, 'var'):
            templatevar = templatevar.var
            if isinstance(templatevar, SafeUnicode):
                # Literal in FilterExpression, can return.
                return templatevar
            else:
                # Variable in FilterExpression, not going to work here.
                return None

        return self._is_true(templatevar)


    def _is_true(self, value):
        return value in (1, '1', 'true', 'True', True)


    def get_title(self):
        """
        Return the string literal that is used in the template.
        The title is used in the admin screens.
        """
        try:
            return self._extract_literal(self.meta_kwargs['title'])
        except KeyError:
            slot = self.get_slot()
            if slot is not None:
                return slot.replace('_', ' ').title()

            return None


    def get_role(self):
        """
        Return the string literal that is used in the template.
        The role can be "main", "sidebar" or "related", or shorted to "m", "s", "r".
        """
        try:
            return self._extract_literal(self.meta_kwargs['role'])
        except KeyError:
            return None


    def get_fallback_language(self):
        """
        Return whether to use the fallback language.
        """
        try:
            # Note: currently not supporting strings yet.
            return self._extract_bool(self.fallback_expr) or None
        except KeyError:
            return False


    def render(self, context):
        request = self.get_request(context)

        # Get the placeholder
        parent = self.parent_expr.resolve(context)
        slot = self.slot_expr.resolve(context)
        fallback_language = self._is_true(self.fallback_expr.resolve(context)) if self.fallback_expr else False
        try:
            placeholder = Placeholder.objects.get_by_slot(parent, slot)
        except Placeholder.DoesNotExist:
            return "<!-- placeholder '{0}' does not yet exist -->".format(slot)

        template_name = self.template_expr.resolve(context) if self.template_expr else None

        output = rendering.render_placeholder(request, placeholder, parent, template_name=template_name, fallback_language=fallback_language)
        rendering.register_frontend_media(request, output.media)   # Assume it doesn't hurt. TODO: should this be optional?
        return output.html


@register.tag
def render_placeholder(parser, token):
    """
    Render a shared placeholder. Syntax:

    .. code-block:: html+django

        {% render_placeholder someobject.placeholder %}
    """
    return RenderPlaceholderNode.parse(parser, token)


class RenderPlaceholderNode(BaseNode):
    """
    The template node of the ``render_placeholder`` tag.
    It renders the provided placeholder object.
    """
    min_args = 1
    max_args = 1

    @classmethod
    def validate_args(cls, tag_name, *args, **kwargs):
        if len(args) != 1:
            raise TemplateSyntaxError("""{0} tag allows only one parameter: a placeholder object.""".format(tag_name))

        super(RenderPlaceholderNode, cls).validate_args(tag_name, *args, **kwargs)


    def render_tag(self, context, *tag_args, **tag_kwargs):
        request = self.get_request(context)

        try:
            placeholder = _get_placeholder_arg(self.args[0], tag_args[0])
        except RuntimeWarning as e:
            return u"<!-- {0} -->".format(e)

        # To support filtering the placeholders by parent language, the parent object needs to be known.
        # Fortunately, the PlaceholderFieldDescriptor makes sure this doesn't require an additional query.
        parent_object = placeholder.parent

        output = rendering.render_placeholder(request, placeholder, parent_object)
        rendering.register_frontend_media(request, output.media)   # Assume it doesn't hurt. TODO: should this be optional?
        return output.html


def _get_placeholder_arg(arg_name, placeholder):
    """
    Validate and return the Placeholder object that the template variable points to.
    """
    if placeholder is None:
        raise RuntimeWarning(u"placeholder object is None")
    elif isinstance(placeholder, Placeholder):
        return placeholder
    elif isinstance(placeholder, Manager):
        try:
            return placeholder.all()[0]
        except IndexError:
            raise RuntimeWarning(u"No placeholders found for query '{0}.all.0'".format(arg_name))
    else:
        raise ValueError(u"The field '{0}' does not refer to a placeholder object!".format(arg_name))


@register.tag
def render_content_items_media(parser, token):
    """
    Render the JS/CSS includes for the media which was collected during the handling of the request.
    This tag should be placed at the bottom of the page.

    .. code-block:: html+django

        {% render_content_items_media %}
        {% render_content_items_media js %}
        {% render_content_items_media css %}
    """
    return RenderContentItemsMedia.parse(parser, token)


class RenderContentItemsMedia(BaseNode):
    """
    The template node of the ``render_plugin_media`` tag.
    It renders the media object object.
    """
    compile_args = False
    compile_kwargs = False
    min_args = 0
    max_args = 1

    @classmethod
    def validate_args(cls, tag_name, *args, **kwargs):
        super(RenderContentItemsMedia, cls).validate_args(tag_name, *args, **kwargs)
        if args:
            if args[0] not in ('css', 'js'):
                raise TemplateSyntaxError("'{0}' tag only supports `css` or `js` as first argument".format(tag_name))

    def render_tag(self, context, *tag_args, **tag_kwargs):
        request = self.get_request(context)

        media = rendering.get_frontend_media(request)
        if not media or not (media._js or media._css):
            return u''

        if not tag_args:
            return media.render()
        elif tag_args[0] == 'js':
            return u'\n'.join(media.render_js())
        elif tag_args[0] == 'css':
            return u'\n'.join(media.render_css())
        else:
            return ''

########NEW FILE########
__FILENAME__ = placeholder_admin_tags
from django.template import Library, Node
from django.template.base import TemplateSyntaxError
from fluent_contents.admin.contentitems import BaseContentItemInline
from tag_parser import template_tag, parse_as_var, parse_token_kwargs

register = Library()

@register.filter
def only_content_item_inlines(inlines):
    return [i for i in inlines if isinstance(i, BaseContentItemInline)]


@register.filter
def only_content_item_formsets(formsets):
    return [f for f in formsets if isinstance(f.opts, BaseContentItemInline)]


@register.filter
def has_no_visible_fields(inline_admin_form):
    # fieldset = admin Fieldset object.

    for name, options in inline_admin_form.fieldsets:
        for name_slot in options.get('fields', ()):
            # Lines can include (field, field)
            if not hasattr(name_slot, "__iter__"):
                name_slot = [name_slot]
            for name in name_slot:
                if not inline_admin_form.form.fields[name].widget.is_hidden:
                    return False

    return True


@register.filter
def group_plugins_into_categories(plugins):
    """
    Return all plugins, grouped by category.
    The structure is a {"Categorynane": [list of plugin classes]}
    """
    if not plugins:
        return {}
    plugins = sorted(plugins, key=lambda p: p.verbose_name)
    categories = {}

    for plugin in plugins:
        title = unicode(plugin.category or u"")  # enforce resolving ugettext_lazy proxies.
        if not categories.has_key(title):
            categories[title] = []
        categories[title].append(plugin)

    return categories


@register.filter
def plugin_categories_to_list(plugin_categories):
    if not plugin_categories:
        return []
    categories_list = plugin_categories.items()
    categories_list.sort(key=lambda item: item[0])  # sort category names
    return categories_list


@register.filter
def plugin_categories_to_choices(categories):
    """
    Return a tuple of plugin model choices, suitable for a select field.
    Each tuple is a ("TypeName", "Title") value.
    """
    choices = []
    for category, items in categories.iteritems():
        if items:
            plugin_tuples = tuple((plugin.type_name, plugin.verbose_name) for plugin in items)
            if category:
                choices.append((category, plugin_tuples))
            else:
                choices += plugin_tuples

    choices.sort(key=lambda item: item[0])
    return choices


@template_tag(register, 'getfirstof')
class GetFirstOfNode(Node):
    def __init__(self, filters, var_name):
        self.filters = filters    # list of FilterExpression nodes.
        self.var_name = var_name

    def render(self, context):
        value = None
        for filterexpr in self.filters:
            # The ignore_failures argument is the most important, otherwise
            # the value is converted to the TEMPLATE_STRING_IF_INVALID which happens with the with block.
            value = filterexpr.resolve(context, ignore_failures=True)
            if value is not None:
                break

        context[self.var_name] = value
        return ''

    @classmethod
    def parse(cls, parser, token):
        """
        Parse the node: {% getfirstof val1 val2 as val3 %}
        parser: a Parser class.
        token: a Token class.
        """
        bits, var_name = parse_as_var(parser, token)
        tag_name, choices, _ = parse_token_kwargs(parser, bits, allowed_kwargs=())

        if var_name is None:
            raise TemplateSyntaxError("Expected syntax: {{% {0} val1 val2 as val %}}".format(tag_name))

        return cls(choices, var_name)

########NEW FILE########
__FILENAME__ = placeholder_tags
import warnings
warnings.warn("fluent_contents.templatetags.placeholder_tags is deprecated; use fluent_contents_tags instead",
              DeprecationWarning)

from .fluent_contents_tags import (
    register,
    page_placeholder, PagePlaceholderNode,
    render_placeholder, RenderPlaceholderNode
)

########NEW FILE########
__FILENAME__ = admin
from pprint import pformat
from django.conf import settings
from django.contrib.admin import AdminSite
from django.contrib.auth.models import User
from django.contrib.messages.middleware import MessageMiddleware
from django.core.urlresolvers import reverse
from django.test import RequestFactory
from fluent_contents.models import Placeholder
from fluent_contents.tests.testapp.admin import PlaceholderFieldTestPageAdmin
from fluent_contents.tests.testapp.models import PlaceholderFieldTestPage, RawHtmlTestItem
from fluent_contents.tests.utils import AppTestCase, override_settings


class AdminTest(AppTestCase):
    """
    Test the admin functions.
    """

    def setUp(self):
        # Admin objects for all tests.
        self.factory = RequestFactory()
        self.admin_site = AdminSite()
        self.admin_user = User.objects.get(is_superuser=True)

        self.settings = override_settings(
            MIDDLEWARE_CLASSES = (
                'django.middleware.common.CommonMiddleware',
                'django.contrib.sessions.middleware.SessionMiddleware',
                'django.middleware.csrf.CsrfViewMiddleware',
                'django.contrib.auth.middleware.AuthenticationMiddleware',
                'django.contrib.messages.middleware.MessageMiddleware',
            )
        )
        self.settings.enable()


    def tearDown(self):
        self.settings.disable()


    def test_add_page(self):
        """
        Test adding an object with placeholder field via the admin.
        """
        self.admin_site.register(PlaceholderFieldTestPage, PlaceholderFieldTestPageAdmin)
        modeladmin = self.admin_site._registry[PlaceholderFieldTestPage]

        # Making a POST call with an unused ID should add the recipe.
        contents_slot = PlaceholderFieldTestPage.contents.slot
        formdata = self._get_management_form_data(modeladmin)
        formdata.update({
            'title': 'TEST1',
            'placeholder-fs-TOTAL_FORMS': '1',
            'placeholder-fs-MAX_NUM_FORMS': '',   # Needed for Django <= 1.4.3
            'placeholder-fs-INITIAL_FORMS': '0',  # Needed for Django 1.3
            'placeholder-fs-0-slot': contents_slot,
            'placeholder-fs-0-role': Placeholder.MAIN,
            'rawhtmltestitem-TOTAL_FORMS': '1',
            'rawhtmltestitem-MAX_NUM_FORMS': '',
            'rawhtmltestitem-INITIAL_FORMS': '0',
            'rawhtmltestitem-0-placeholder': '',                   # The placeholder is not defined yet, as item is not yet created.
            'rawhtmltestitem-0-placeholder_slot': contents_slot,   # BaseContentItemFormSet resolves the placeholder after it's created
            'rawhtmltestitem-0-sort_order': '1',
            'rawhtmltestitem-0-html': u'<b>foo</b>',
        })
        response = self._post_add(modeladmin, formdata)
        self.assertEquals(response.status_code, 302, "No redirect, received:\n\n{0}".format(self._render_response(response)))

        # Check that the page exists.
        page = PlaceholderFieldTestPage.objects.get(title='TEST1')

        # Check that the placeholder is created,
        # and properly links back to it's parent.
        placeholder = page.contents
        self.assertEqual(placeholder.slot, contents_slot)
        self.assertEqual(placeholder.role, Placeholder.MAIN)
        self.assertEqual(placeholder.parent, page)

        # Check that the ContentItem is created,
        # and properly links back to it's parent.
        rawhtmltestitem = RawHtmlTestItem.objects.get(html=u'<b>foo</b>')
        self.assertEqual(rawhtmltestitem.placeholder, placeholder)
        self.assertEqual(rawhtmltestitem.parent, page)

        # Also check reverse relation of placeholder
        rawhtmltestitem = placeholder.contentitems.all()[0]
        self.assertEqual(rawhtmltestitem.html, u'<b>foo</b>')


    def _post_add(self, modeladmin, formdata):
        opts = modeladmin.opts
        url = reverse('admin:{0}_{1}_add'.format(opts.app_label, opts.module_name))

        # Build request
        formdata['csrfmiddlewaretoken'] = 'foo'
        request = self.factory.post(url, data=formdata)
        request.COOKIES[settings.CSRF_COOKIE_NAME] = 'foo'

        # Add properties which middleware would typically do
        request.session = {}
        request.user = self.admin_user
        MessageMiddleware().process_request(request)

        # Make a direct call, circumvents login page.
        return modeladmin.add_view(request)


    def _get_management_form_data(self, modeladmin):
        """
        Return the formdata that the management forms need.
        """
        opts = modeladmin.opts
        url = reverse('admin:{0}_{1}_add'.format(opts.app_label, opts.module_name))
        request = self.factory.get(url)
        request.user = self.admin_user

        if hasattr(modeladmin, 'get_inline_instances'):
            inline_instances = modeladmin.get_inline_instances(request)  # Django 1.4
        else:
            inline_instances = [inline_class(modeladmin.model, self.admin_site) for inline_class in modeladmin.inlines]

        forms = []
        for inline_instance in inline_instances:
            FormSet = inline_instance.get_formset(request)
            formset = FormSet(instance=modeladmin.model())
            forms.append(formset.management_form)

        # In a primitive way, get the form fields.
        # This is not exactly the same as a POST, since that runs through clean()
        formdata = {}
        for form in forms:
            for boundfield in form:
                formdata[boundfield.html_name] = boundfield.value()

        return formdata


    def _render_response(self, response):
        if hasattr(response, 'render'):
            # TemplateResponse
            return u"== Context ==\n{0}\n\n== Response ==\n{1}".format(pformat(response.context_data), response.render().content)
        else:
            return response.content

########NEW FILE########
__FILENAME__ = templatetags
from django.template import Template, Context, VariableDoesNotExist, TemplateSyntaxError
from django.test import RequestFactory
from template_analyzer import get_node_instances
from fluent_contents.models import Placeholder
from fluent_contents.templatetags.fluent_contents_tags import PagePlaceholderNode
from fluent_contents.tests.testapp.models import TestPage, RawHtmlTestItem, PlaceholderFieldTestPage
from fluent_contents.tests.utils import AppTestCase
from fluent_contents.analyzer import get_template_placeholder_data


class TemplateTagTests(AppTestCase):
    """
    Test cases for template tags
    """
    dummy_request = RequestFactory().get('/')
    install_apps = (
        'fluent_contents.tests.testapp',
    )


    def test_page_placeholder_metadata(self):
        """
        The ``page_placeholder`` tag should expose metadata, which ``fluent_contents.analyzer`` can read.
        """
        template = Template("""{% load fluent_contents_tags %}{% page_placeholder page "slot1" title="SlotTest1" role="s" %}""")

        # Test raw Placeholder extraction
        raw_placeholders = get_node_instances(template, PagePlaceholderNode)
        self.assertEqual(len(raw_placeholders), 1)
        self.assertEqual(raw_placeholders[0].get_slot(), 'slot1')
        self.assertEqual(raw_placeholders[0].get_title(), 'SlotTest1')
        self.assertEqual(raw_placeholders[0].get_role(), 's')

        # Now test the public API, that returns PlaceholderData objects.
        data = get_template_placeholder_data(template)
        self.assertEqual(len(data), 1)
        self.assertEqual(data[0].slot, 'slot1')
        self.assertEqual(data[0].title, 'SlotTest1')
        self.assertEqual(data[0].role, 's')


        # Test2: fallback code
        template = Template("""{% load fluent_contents_tags %}{% page_placeholder page "slot_test2" %}""")

        # Test raw Placeholder extraction
        raw_placeholders = get_node_instances(template, PagePlaceholderNode)
        self.assertEqual(len(raw_placeholders), 1)
        self.assertEqual(raw_placeholders[0].get_slot(), 'slot_test2')
        self.assertEqual(raw_placeholders[0].get_title(), 'Slot Test2')
        self.assertEqual(raw_placeholders[0].get_role(), None)

        # Test the public API
        data = get_template_placeholder_data(template)
        self.assertEqual(len(data), 1)
        self.assertEqual(data[0].slot, 'slot_test2')
        self.assertEqual(data[0].title, 'Slot Test2')
        self.assertEqual(data[0].role, 'm')  # Defaults to "main"


    def test_page_placeholder(self):
        """
        The ``page_placeholder`` tag should render the content associated with it.
        """
        # Attach contents to the parent object.
        page1 = TestPage.objects.create(contents="TEST!")
        placeholder1 = Placeholder.objects.create_for_object(page1, 'slot1')
        item1 = RawHtmlTestItem.objects.create_for_placeholder(placeholder1, html='<b>Item1!</b>', sort_order=1)
        item2 = RawHtmlTestItem.objects.create_for_placeholder(placeholder1, html='<b>Item2!</b>', sort_order=2)

        # Test standard output
        html = self._render("""{% load fluent_contents_tags %}{% page_placeholder page1 "slot1" %}""", {'page1': page1})
        self.assertEqual(html, u'<b>Item1!</b><b>Item2!</b>')

        # Test standard output + template variable
        html = self._render("""{% load fluent_contents_tags %}{% page_placeholder page1 "slot1" template="testapp/placeholder_splitter.html" %}""", {'page1': page1})
        self.assertEqual(html.replace('\n', ''), u'<b>Item1!</b><div class="splitter"></div><b>Item2!</b>')

        # Test if the "page" variable is used as default argument
        html = self._render("""{% load fluent_contents_tags %}{% page_placeholder "slot1" %}""", {'page': page1})
        self.assertEqual(html, u'<b>Item1!</b><b>Item2!</b>')

        # Test of invalid slots fail silently. Give the user the chance to enter the data in the CMS.
        html = self._render("""{% load fluent_contents_tags %}{% page_placeholder page1 "invalid_slot1" %}""", {'page1': page1})
        self.assertEqual(html, u"<!-- placeholder 'invalid_slot1' does not yet exist -->")

        # Test if a missing "page" variable fails.
        self.assertRaises(VariableDoesNotExist, lambda: self._render("""{% load fluent_contents_tags %}{% page_placeholder "slot1" %}""", {}))

        # Test if a missing arguments are reported
        self.assertRaises(TemplateSyntaxError, lambda: Template("""{% load fluent_contents_tags %}{% page_placeholder %}"""))
        self.assertRaises(TemplateSyntaxError, lambda: Template("""{% load fluent_contents_tags %}{% page_placeholder arg1 arg2 arg3 %}"""))


    def test_render_placeholder(self):
        """
        The ``render_placeholder`` tag should render objects by reference.
        """
        # Attach contents to the parent object.
        page2 = PlaceholderFieldTestPage.objects.create()
        placeholder1 = Placeholder.objects.create_for_object(page2, 'field_slot1')
        item1 = RawHtmlTestItem.objects.create_for_placeholder(placeholder1, html='<b>Item1!</b>', sort_order=1)
        item2 = RawHtmlTestItem.objects.create_for_placeholder(placeholder1, html='<b>Item2!</b>', sort_order=2)

        # Test standard behavior, with an object reference
        html = self._render("""{% load fluent_contents_tags %}{% render_placeholder placeholder1 %}""", {'placeholder1': placeholder1})
        self.assertEqual(html, u'<b>Item1!</b><b>Item2!</b>')

        # Test passing Placeholder via PlaceholderField (actually tests the PlaceholderFieldDescriptor)
        html = self._render("""{% load fluent_contents_tags %}{% render_placeholder page2.contents %}""", {'page2': page2})
        self.assertEqual(html, u'<b>Item1!</b><b>Item2!</b>')

        # Test passing a related object manager.
        html = self._render("""{% load fluent_contents_tags %}{% render_placeholder page2.placeholder_set %}""", {'page2': page2})
        self.assertEqual(html, u'<b>Item1!</b><b>Item2!</b>')

        # Test if None values fail silently
        html = self._render("""{% load fluent_contents_tags %}{% render_placeholder none_object %}""", {'none_object': None})
        self.assertEqual(html, u'<!-- placeholder object is None -->')

        # Test if invalid objects are reported.
        # This requires `TEMPLATE_DEBUG = False` in Django 1.3
        self.assertRaises(ValueError, lambda: self._render("""{% load fluent_contents_tags %}{% render_placeholder 123 %}""", {}))
        self.assertRaises(ValueError, lambda: self._render("""{% load fluent_contents_tags %}{% render_placeholder int_object %}""", {'int_object': 456}))

        # Test if a missing arguments are reported
        self.assertRaises(TemplateSyntaxError, lambda: Template("""{% load fluent_contents_tags %}{% render_placeholder %}"""))
        self.assertRaises(TemplateSyntaxError, lambda: Template("""{% load fluent_contents_tags %}{% render_placeholder arg1 arg2 %}"""))


    def _render(self, template_code, context_data):
        """
        Render a template
        """
        template = Template(template_code)
        context = Context(context_data)
        context['request'] = self.dummy_request
        return template.render(context)

########NEW FILE########
__FILENAME__ = admin
from django.contrib import admin
from fluent_contents.admin import PlaceholderFieldAdmin
from .models import PlaceholderFieldTestPage


class PlaceholderFieldTestPageAdmin(PlaceholderFieldAdmin):
    """
    Admin interface for the PlaceholderFieldTestPage model.
    """
    pass


admin.site.register(PlaceholderFieldTestPage, PlaceholderFieldTestPageAdmin)

########NEW FILE########
__FILENAME__ = content_plugins
from django.utils.safestring import mark_safe
from fluent_contents.extensions import ContentPlugin, plugin_pool
from fluent_contents.tests.testapp.models import RawHtmlTestItem


@plugin_pool.register
class RawHtmlTestPlugin(ContentPlugin):
    """
    The most basic "raw HTML" plugin item, for testing.
    """
    model = RawHtmlTestItem

    def render(self, request, instance, **kwargs):
        return mark_safe(instance.html)

########NEW FILE########
__FILENAME__ = models
from django.db import models
from fluent_contents.models import ContentItem, PlaceholderField, PlaceholderRelation, ContentItemRelation


class TestPage(models.Model):
    """
    A plain model, for testing placeholders.
    """
    contents = models.TextField("Contents")

    class Meta:
        verbose_name = "Test page"
        verbose_name_plural = "Test pages"


class PlaceholderFieldTestPage(models.Model):
    """
    A model with PlaceholderField, for testing,
    """
    title = models.CharField(max_length=200)
    contents = PlaceholderField("field_slot1")

    placeholder_set = PlaceholderRelation()
    contentitem_set = ContentItemRelation()

    class Meta:
        verbose_name = "Test page"
        verbose_name_plural = "Test pages"

    def __unicode__(self):
        return self.title


class RawHtmlTestItem(ContentItem):
    """
    The most basic "raw HTML" content item, for testing.
    """
    html = models.TextField("HTML code")

    class Meta:
        verbose_name = 'Test HTML code'
        verbose_name_plural = 'Test HTML codes'

    def __unicode__(self):
        return self.html

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls import patterns, include, url
from django.contrib import admin

admin.autodiscover()

urlpatterns = patterns('',
    url(r'^admin/', include(admin.site.urls)),

    #url(r'^comments/', include('django.contrib.comments.urls')),
    #url(r'^forms/', include('form_designer.urls')),
)

########NEW FILE########
__FILENAME__ = utils
from functools import wraps
from django.conf import settings, UserSettingsHolder
from django.contrib.auth.models import User
from django.core.management import call_command
from django.contrib.sites.models import Site
from django.db.models import loading
from django.template.loaders import app_directories
from django.test import TestCase
from django.utils.importlib import import_module
import os


class AppTestCase(TestCase):
    """
    Tests for URL resolving.
    """
    user = None
    install_apps = (
        'fluent_contents.tests.testapp',
    )


    @classmethod
    def setUpClass(cls):
        if cls.install_apps:
            # When running this app via `./manage.py test fluent_pages`, auto install the test app + models.
            run_syncdb = False
            for appname in cls.install_apps:
                if appname not in settings.INSTALLED_APPS:
                    print 'Adding {0} to INSTALLED_APPS'.format(appname)
                    settings.INSTALLED_APPS += (appname,)
                    run_syncdb = True

                    # Flush caches
                    testapp = import_module(appname)
                    loading.cache.loaded = False
                    app_directories.app_template_dirs += (
                        os.path.join(os.path.dirname(testapp.__file__), 'templates'),
                    )
                    print appname, os.path.join(os.path.dirname(testapp.__file__), 'templates')

            if run_syncdb:
                call_command('syncdb', verbosity=0)  # may run south's overlaid version

        # Create basic objects
        # 1.4 does not create site automatically with the defined SITE_ID, 1.3 does.
        Site.objects.get_or_create(id=settings.SITE_ID, defaults=dict(domain='django.localhost', name='django at localhost'))
        (cls.user, _) = User.objects.get_or_create(is_superuser=True, is_staff=True, username="admin")


    def assert200(self, url, msg_prefix=''):
        """
        Test that an URL exists.
        """
        if msg_prefix:
            msg_prefix += ": "
        self.assertEquals(self.client.get(url).status_code, 200, unicode(msg_prefix) + u"Page at {0} should be found.".format(url))


    def assert404(self, url, msg_prefix=''):
        """
        Test that an URL does not exist.
        """
        if msg_prefix:
            msg_prefix += ": "
        self.assertEquals(self.client.get(url).status_code, 404, unicode(msg_prefix) + u"Page at {0} should return 404.".format(url))


try:
    from django.test.utils import override_settings  # Django 1.4
except ImportError:
    class override_settings(object):
        """
        Acts as either a decorator, or a context manager. If it's a decorator it
        takes a function and returns a wrapped function. If it's a contextmanager
        it's used with the ``with`` statement. In either event entering/exiting
        are called before and after, respectively, the function/block is executed.
        """
        def __init__(self, **kwargs):
            self.options = kwargs
            self.wrapped = settings._wrapped

        def __enter__(self):
            self.enable()

        def __exit__(self, exc_type, exc_value, traceback):
            self.disable()

        def __call__(self, test_func):
            from django.test import TransactionTestCase
            if isinstance(test_func, type) and issubclass(test_func, TransactionTestCase):
                original_pre_setup = test_func._pre_setup
                original_post_teardown = test_func._post_teardown
                def _pre_setup(innerself):
                    self.enable()
                    original_pre_setup(innerself)
                def _post_teardown(innerself):
                    original_post_teardown(innerself)
                    self.disable()
                test_func._pre_setup = _pre_setup
                test_func._post_teardown = _post_teardown
                return test_func
            else:
                @wraps(test_func)
                def inner(*args, **kwargs):
                    with self:
                        return test_func(*args, **kwargs)
            return inner

        def enable(self):
            override = UserSettingsHolder(settings._wrapped)
            for key, new_value in self.options.items():
                setattr(override, key, new_value)
            settings._wrapped = override

        def disable(self):
            settings._wrapped = self.wrapped

########NEW FILE########
__FILENAME__ = ajax
"""
Generic Ajax functionality
"""
import json
from django.http import HttpResponse


class JsonResponse(HttpResponse):
    """
    A convenient HttpResponse class, which encodes the response in JSON format.
    """
    def __init__(self, jsondata, status=200):
        self.jsondata = jsondata
        super(JsonResponse, self).__init__(json.dumps(jsondata), content_type='application/json', status=status)

########NEW FILE########
__FILENAME__ = compat
try:
    # Python 3
    from django.utils.encoding import smart_text as smart_unicode
except ImportError:
    try:
        from django.utils.encoding import smart_unicode
    except ImportError:
        from django.forms.util import smart_unicode


__all__ = (
    'smart_unicode',
)
########NEW FILE########
__FILENAME__ = validators
from django.core.exceptions import ValidationError
from django.utils.translation import ugettext_lazy as _
import re


def validate_html_size(value):
    """
    Validate whether a value can be used in a HTML ``width`` or ``height`` value.
    The value can either be a number, or end with a percentage sign.
    Raises a :class:`~django.core.exceptions.ValidationError` if the value is invalid.
    """
    if not re.match(r'^\d+%?$', value):
        raise ValidationError(_("Value should be a number or percentage."))

########NEW FILE########
__FILENAME__ = runtests
#!/usr/bin/env python
import sys
from django.conf import settings
from django.core.management import execute_from_command_line

if not settings.configured:
    settings.configure(
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
            }
        },
        INSTALLED_APPS = (
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.messages',
            'django.contrib.sites',
            'django.contrib.admin',
            'fluent_contents',
            'fluent_contents.tests.testapp',
        ),
        ROOT_URLCONF = 'fluent_contents.tests.testapp.urls',
        FLUENT_CONTENTS_CACHE_OUTPUT = True,
        SITE_ID = 3
    )

def runtests():
    argv = sys.argv[:1] + ['test', 'fluent_contents', '--traceback'] + sys.argv[1:]
    execute_from_command_line(argv)

if __name__ == '__main__':
    runtests()

########NEW FILE########
