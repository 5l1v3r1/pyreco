__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# django-oauth-access documentation build configuration file, created by
# sphinx-quickstart on Fri May 28 12:50:21 2010.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
sys.path.append(os.path.abspath('.'))
sys.path.append(os.path.abspath('..'))
os.environ["DJANGO_SETTINGS_MODULE"] = "settings"

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = [
    'sphinx.ext.autodoc',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.txt'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'django-oauth-access'
copyright = u'2010, Eldarion'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '0.1'
# The full version, including alpha/beta/rc tags.
release = '0.1.dev20'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  Major themes that come with
# Sphinx are currently 'default' and 'sphinxdoc'.
html_theme = 'eldarion'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
html_theme_path = ['_theme']

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
html_logo = "_theme/eldarion/static/eldarion_logo_medium.png"

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# If nonempty, this is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = ''

# Output file base name for HTML help builder.
htmlhelp_basename = 'doadoc'


# -- Options for LaTeX output --------------------------------------------------

# The paper size ('letter' or 'a4').
#latex_paper_size = 'letter'

# The font size ('10pt', '11pt' or '12pt').
#latex_font_size = '10pt'

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'django-oauth-access.tex', u'django-oauth-access Documentation',
   u'Eldarion', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Additional stuff for the LaTeX preamble.
#latex_preamble = ''

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'django-oauth-access', u'django-oauth-access Documentation',
     [u'Eldarion'], 1)
]

########NEW FILE########
__FILENAME__ = settings

########NEW FILE########
__FILENAME__ = access
import cgi
import datetime
import httplib2
import logging
import socket
import urllib
import urlparse

from django.conf import settings
from django.core.exceptions import ImproperlyConfigured
from django.core.urlresolvers import reverse
from django.utils import simplejson as json

from django.contrib.sites.models import Site

import oauth2 as oauth

from oauth_access.exceptions import NotAuthorized, MissingToken
from oauth_access.models import UserAssociation
from oauth_access.utils.anyetree import etree
from oauth_access.utils.loader import load_path_attr


logger = logging.getLogger("oauth_access.access")


class UnknownResponse(Exception):
    pass


class ServiceFail(Exception):
    pass


class OAuthAccess(object):
    
    def __init__(self, service):
        self.service = service
        self.signature_method = oauth.SignatureMethod_HMAC_SHA1()
        self.consumer = oauth.Consumer(self.key, self.secret)
    
    @property
    def key(self):
        return self._obtain_setting("keys", "KEY")
    
    @property
    def secret(self):
        return self._obtain_setting("keys", "SECRET")
    
    @property
    def request_token_url(self):
        return self._obtain_setting("endpoints", "request_token")
    
    @property
    def access_token_url(self):
        return self._obtain_setting("endpoints", "access_token")
    
    @property
    def authorize_url(self):
        return self._obtain_setting("endpoints", "authorize")
    
    @property
    def provider_scope(self):
        return self._obtain_setting("endpoints", "provider_scope", False)
    
    def _obtain_setting(self, k1, k2, required=True):
        name = "OAUTH_ACCESS_SETTINGS"
        service = self.service
        try:
            return getattr(settings, name)[service][k1][k2]
        except AttributeError:
            raise ImproperlyConfigured("%s must be defined in settings" % (name,))
        except KeyError, e:
            key = e.args[0]
            if key == service:
                raise ImproperlyConfigured("%s must contain '%s'" % (name, service))
            # check this here, because the service key should exist regardless
            if not required:
                return None
            elif key == k1:
                raise ImproperlyConfigured("%s must contain '%s' for '%s'" % (name, k1, service))
            elif key == k2:
                raise ImproperlyConfigured("%s must contain '%s' for '%s' in '%s'" % (name, k2, k1, service))
            else:
                raise
    
    def unauthorized_token(self):
        if not hasattr(self, "_unauthorized_token"):
            self._unauthorized_token = self.fetch_unauthorized_token()
        return self._unauthorized_token
    
    def fetch_unauthorized_token(self):
        parameters = {
            "oauth_callback": self.callback_url,
        }
        client = oauth.Client(self.consumer)
        response, content = client.request(self.request_token_url,
            method = "POST",
            # parameters must be urlencoded (which are then re-decoded by
            # and re-encoded by oauth2 -- seems lame)
            body = urllib.urlencode(parameters),
        )
        if response["status"] != "200":
            raise UnknownResponse(
                "Got %s from %s:\n\n%s" % (
                    response["status"], self.request_token_url, content
                ))
        return oauth.Token.from_string(content)
    
    @property
    def callback_url(self):
        current_site = Site.objects.get(pk=settings.SITE_ID)
        # @@@ http fix
        base_url = "http://%s" % current_site.domain
        callback_url = reverse("oauth_access_callback", kwargs={
            "service": self.service,
        })
        return "%s%s" % (base_url, callback_url)
    
    def authorized_token(self, token, verifier=None):
        parameters = {}
        if verifier:
            parameters.update({
                "oauth_verifier": verifier,
            })
        client = oauth.Client(self.consumer, token=token)
        response, content = client.request(self.access_token_url,
            method = "POST",
            # parameters must be urlencoded (which are then re-decoded by
            # oauth2 -- seems lame)
            body = urllib.urlencode(parameters),
        )
        if response["status"] != "200":
            raise UnknownResponse(
                "Got %s from %s:\n\n%s" % (
                    response["status"], self.access_token_url, content
                ))
        return oauth.Token.from_string(content)
    
    def check_token(self, unauth_token, parameters):
        if self.service != "facebook" and unauth_token is None:
            raise MissingToken
        if unauth_token:
            token = oauth.Token.from_string(unauth_token)
            if token.key == parameters.get("oauth_token", "no_token"):
                verifier = parameters.get("oauth_verifier")
                return self.authorized_token(token, verifier)
            else:
                return None
        else:
            code = parameters.get("code")
            if code:
                params = dict(
                    client_id = self.key,
                    redirect_uri = self.callback_url,
                )
                params["client_secret"] = self.secret
                params["code"] = code
                raw_data = urllib.urlopen(
                    "%s?%s" % (
                        self.access_token_url, urllib.urlencode(params)
                    )
                ).read()
                response = cgi.parse_qs(raw_data)
                return OAuth20Token(
                    response["access_token"][-1],
                    int(response["expires"][-1])
                )
            else:
                # @@@ this error case is not nice
                return None
    
    @property
    def callback(self):
        return load_path_attr(self._obtain_setting("endpoints", "callback"))
    
    def authorization_url(self, token=None):
        if token is None:
            # OAuth 2.0
            params = dict(
                client_id = self.key,
                redirect_uri = self.callback_url,
            )
            scope = self.provider_scope
            if scope is not None:
                params["scope"] = ",".join(scope)
            return self.authorize_url + "?%s" % urllib.urlencode(params)
        else:
            request = oauth.Request.from_consumer_and_token(
                self.consumer,
                token = token,
                http_url = self.authorize_url,
            )
            request.sign_request(self.signature_method, self.consumer, token)
            return request.to_url()
    
    def persist(self, user, token, identifier=None):
        expires = hasattr(token, "expires") and token.expires or None
        defaults = {
            "token": str(token),
            "expires": expires,
        }
        if identifier is not None:
            defaults["identifier"] = identifier
        assoc, created = UserAssociation.objects.get_or_create(
            user = user,
            service = self.service,
            defaults = defaults,
        )
        if not created:
            assoc.token = str(token)
            assoc.expires = expires
            assoc.save()
    
    def lookup_user(self, identifier):
        queryset = UserAssociation.objects.all()
        queryset = queryset.select_related("user")
        queryset = queryset.filter(service=self.service)
        try:
            assoc = queryset.get(identifier=identifier)
        except UserAssociation.DoesNotExist:
            return None
        else:
            return assoc.user
    
    def make_api_call(self, kind, url, token, method="GET", **kwargs):
        if isinstance(token, OAuth20Token):
            request_kwargs = dict(method=method)
            if method == "POST":
                params = {
                    "access_token": str(token),
                }
                params.update(kwargs["params"])
                request_kwargs["body"] = urllib.urlencode(params)
            else:
                url += "?%s" % urllib.urlencode(dict(access_token=str(token)))
            http = httplib2.Http()
            response, content = http.request(url, **request_kwargs)
        else:
            if isinstance(token, basestring):
                token = oauth.Token.from_string(token)
            client = Client(self.consumer, token=token)
            # @@@ LinkedIn requires Authorization header which is supported in
            # sub-classed version of Client (originally from oauth2)
            request_kwargs = dict(method=method, force_auth_header=True)
            if method == "POST":
                request_kwargs["body"] = urllib.urlencode(kwargs["params"])
            response, content = client.request(url, **request_kwargs)
        if response["status"] == "401":
            raise NotAuthorized()
        if not content:
            raise ServiceFail("no content")
        logger.debug("response: %r" % response)
        logger.debug("content: %r" % content)
        if kind == "raw":
            return content
        elif kind == "json":
            try:
                return json.loads(content)
            except ValueError:
                # @@@ might be better to return a uniform cannot parse
                # exception and let caller determine if it is service fail
                raise ServiceFail("JSON parse error")
        elif kind == "xml":
            return etree.ElementTree(etree.fromstring(content))
        else:
            raise Exception("unsupported API kind")


class Client(oauth.Client):
    """
    Custom client to support forcing Authorization header (which is required
    by LinkedIn). See http://github.com/brosner/python-oauth2/commit/82a05f96878f187f67c1af44befc1bec562e5c1f
    """
    
    def request(self, uri, method="GET", body=None, headers=None,
      redirections=httplib2.DEFAULT_MAX_REDIRECTS, connection_type=None,
      force_auth_header=False):
        
        DEFAULT_CONTENT_TYPE = "application/x-www-form-urlencoded"
        
        if not isinstance(headers, dict):
            headers = {}
        
        is_multipart = method == "POST" and headers.get("Content-Type", DEFAULT_CONTENT_TYPE) != DEFAULT_CONTENT_TYPE
        
        if body and method == "POST" and not is_multipart:
            parameters = dict(urlparse.parse_qsl(body))
        else:
            parameters = None
        
        req = oauth.Request.from_consumer_and_token(self.consumer,
            token=self.token, http_method=method, http_url=uri,
            parameters=parameters)
        
        req.sign_request(self.method, self.consumer, self.token)
        
        if force_auth_header:
            headers.update(req.to_header())
        
        if method == "POST":
            headers["Content-Type"] = headers.get("Content-Type", DEFAULT_CONTENT_TYPE)
            if is_multipart:
                headers.update(req.to_header())
            else:
                if not force_auth_header:
                    body = req.to_postdata()
                else:
                    body = urllib.urlencode(req.get_nonoauth_parameters(), True)
        elif method == "GET":
            if not force_auth_header:
                uri = req.to_url()
        else:
            if not force_auth_header:
                # don't call update twice.
                headers.update(req.to_header())
        
        return httplib2.Http.request(self, uri, method=method, body=body,
            headers=headers, redirections=redirections,
            connection_type=connection_type)


class OAuth20Token(object):
    
    def __init__(self, token, expires=None):
        self.token = token
        if expires is not None:
            self.expires = datetime.datetime.now() + datetime.timedelta(seconds=expires)
        else:
            self.expires = None
    
    def __str__(self):
        return str(self.token)

########NEW FILE########
__FILENAME__ = callback
from django.core.urlresolvers import reverse
from django.http import HttpResponse
from django.shortcuts import redirect

from django.contrib.auth import login
from django.contrib.auth.models import User


class Callback(object):
    
    def __call__(self, request, access, token):
        if not request.user.is_authenticated():
            authenticated = False
            user_data = self.fetch_user_data(request, access, token)
            user = self.lookup_user(request, access, user_data)
            if user is None:
                ret = self.handle_no_user(request, access, token, user_data)
                # allow handle_no_user to create a user if need be
                if isinstance(ret, User):
                    user = ret
            else:
                ret = self.handle_unauthenticated_user(request, user, access, token, user_data)
            if isinstance(ret, HttpResponse):
                return ret
        else:
            authenticated = True
            user = request.user
        redirect_to = self.redirect_url(request)
        if user:
            kwargs = {}
            if not authenticated:
                kwargs["identifier"] = self.identifier_from_data(user_data)
            access.persist(user, token, **kwargs)
        return redirect(redirect_to)
    
    def fetch_user_data(self, request, access, token):
        raise NotImplementedError()
    
    def lookup_user(self, request, access, user_data):
        return access.lookup_user(identifier=self.identifier_from_data(user_data))
    
    def redirect_url(self, request):
        raise NotImplementedError()


class AuthenticationCallback(Callback):
    
    def handle_no_user(self, request, access, token, user_data):
        request.session["oauth_signup_data"] = {
            "token": token,
            "user_data": user_data,
        }
        return redirect(
            reverse(
                "oauth_access_finish_signup", kwargs={
                    "service": access.service
                }
            )
        )
    
    def handle_unauthenticated_user(self, request, user, access, token, user_data):
        self.login_user(request, user)
    
    def login_user(self, request, user):
        user.backend = "django.contrib.auth.backends.ModelBackend"
        login(request, user)

########NEW FILE########
__FILENAME__ = exceptions
class NotAuthorized(Exception):
    pass


class MissingToken(Exception):
    pass
########NEW FILE########
__FILENAME__ = models
import datetime

from django.db import models

from django.contrib.auth.models import User


class UserAssociation(models.Model):
    
    user = models.ForeignKey(User)
    service = models.CharField(max_length=75, db_index=True)
    identifier = models.CharField(max_length=255, db_index=True)
    token = models.CharField(max_length=200)
    expires = models.DateTimeField(null=True)
    
    class Meta:
        unique_together = [("user", "service")]
    
    def expired(self):
        if not self.expires:
            return True
        return datetime.datetime.now() < self.expires

########NEW FILE########
__FILENAME__ = oauth_access_tags
from django import template

from oauth_access.models import UserAssociation


register = template.Library()


@register.filter
def authed_via(user, service):
    if user.is_authenticated():
        try:
            assoc = UserAssociation.objects.get(user=user, service=service)
        except UserAssociation.DoesNotExist:
            return False
        return assoc.expired()
    else:
        return False

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *



urlpatterns = patterns("",
    url(
        regex = r"^login/(?P<service>\w+)/$",
        view = "oauth_access.views.oauth_login",
        name = "oauth_access_login",
    ),
    url(
        regex = r"^callback/(?P<service>\w+)/$",
        view = "oauth_access.views.oauth_callback",
        name = "oauth_access_callback"
    ),
    url(
        regex = r"^finish_signup/(?P<service>\w+)/$",
        view = "oauth_access.views.finish_signup",
        name = "oauth_access_finish_signup"
    )
)
########NEW FILE########
__FILENAME__ = anyetree
"""
Get an Etree library.  Usage::

    >>> from anyetree import etree

Returns some etree library. Looks for (in order of decreasing preference):

    * ``lxml.etree`` (http://cheeseshop.python.org/pypi/lxml/)
    * ``xml.etree.cElementTree`` (built into Python 2.5)
    * ``cElementTree`` (http://effbot.org/zone/celementtree.htm)
    * ``xml.etree.ElementTree`` (built into Python 2.5)
    * ``elementree.ElementTree (http://effbot.org/zone/element-index.htm)
"""


__all__ = ["etree"]


SEARCH_PATHS = [
    "lxml.etree",
    "xml.etree.cElementTree",
    "cElementTree",
    "xml.etree.ElementTree",
    "elementtree.ElementTree",
]

etree = None

for name in SEARCH_PATHS:
    try:
        # @@@ move to import_module
        etree = __import__(name, {}, {}, [""])
        break
    except ImportError:
        continue

if etree is None:
    raise ImportError("No suitable ElementTree implementation found.")
########NEW FILE########
__FILENAME__ = loader
from django.core.exceptions import ImproperlyConfigured
try:
    from django.utils.importlib import import_module
except ImportError:
    from importlib import import_module



def load_path_attr(path):
    i = path.rfind(".")
    module, attr = path[:i], path[i+1:]
    try:
        mod = import_module(module)
    except ImportError, e:
        raise ImproperlyConfigured("Error importing %s: '%s'" % (module, e))
    try:
        attr = getattr(mod, attr)
    except AttributeError:
        raise ImproperlyConfigured("Module '%s' does not define a '%s'" % (module, attr))
    return attr

########NEW FILE########
__FILENAME__ = views
from django.http import HttpResponseRedirect
from django.shortcuts import render_to_response
from django.template import RequestContext

from oauth_access.access import OAuthAccess
from oauth_access.exceptions import MissingToken


def oauth_login(request, service,
        redirect_field_name="next", redirect_to_session_key="redirect_to"):
    access = OAuthAccess(service)
    if not service == "facebook":
        token = access.unauthorized_token()
        request.session["%s_unauth_token" % service] = token.to_string()
    else:
        token = None
    if hasattr(request, "session"):
        request.session[redirect_to_session_key] = request.GET.get(redirect_field_name)
    return HttpResponseRedirect(access.authorization_url(token))


def oauth_callback(request, service):
    ctx = RequestContext(request)
    access = OAuthAccess(service)
    unauth_token = request.session.get("%s_unauth_token" % service, None)
    try:
        auth_token = access.check_token(unauth_token, request.GET)
    except MissingToken:
        ctx.update({"error": "token_missing"})
    else:
        if auth_token:
            return access.callback(request, access, auth_token)
        else:
            # @@@ not nice for OAuth 2
            ctx.update({"error": request.GET.get("error", "token_mismatch")})
    return render_to_response("oauth_access/oauth_error.html", ctx)


def finish_signup(request, service):
    access = OAuthAccess(service)
    return access.callback.finish_signup(request, service)
        

########NEW FILE########
