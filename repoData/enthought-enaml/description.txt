RefactorDoc: Docstring refactor shpinx extension
================================================

The RefactorDoc extension parses the function and class docstrings as
they are retrieved by the autodoc extension and refactors the section
blocks into sphinx friendly rst. The extension shares similarities with
alternatives (such as numpydoc) but aims at reflacting the original form
of the docstring.

Key aims of RefactorDoc are:

    - Do not change the order of sections.
    - Allow sphinx directives between (and inside) section blocks.
    - Easier to debug (native support for debugging) and extend.

Repository
----------

The RefactorDoc extension lives at Github. You can clone the repository
using::

    git clone ...

Installation
------------

Please copy the ``refactor_doc.py`` in the source directory
(or a sub_directory) of your documentation and update your ``conf.py``
as follows:

    - Add the path where the extension exists in the python path::

        sys.path.insert(0, os.path.abspath('/extension'))

    - Add refactor-doc to the extensions variable::

        extensions = [...,
              'refactor_doc',
              ...,
             ]

The runnable files in this directory are::

    lotka_volterra.py
    sine_plot_example.py

The remaining files are just support files.

This example uses an older version of Enaml and has not been ported to the
latest code yet.

==============================
Enaml is not a Markup Language
==============================
**E**\naml is **N**\ot **A** **M**\arkup **L**\anguage. Enaml is a library for
creating professional quality user interfaces with minimal effort. Enaml combines
a domain specific declarative language with a constraints based layout system to
allow users to easily define rich UIs with complex and flexible layouts. Enaml
applications can transparently run on multiple backends (Qt and Wx) and on
multiple operating systems (Windows, OSX, Linux).

Other great Enaml features include

    1) Declarative UI specification langauge that is a strict superset of Python
    2) Architecture design which encourages Model View separation
    3) Subscription based operators which allow state and events to freely flow between models and views
    4) Ability to easily subclass widgets to override functionality of builtin widgets
    5) Support for custom UI widgets
    6) Class based widget design encourages re-use of UI code
    7) Well documented code base that is easy to understand

Enaml is heavily inspired by Qt's QML system, but Enaml uses native
widgets (as opposed to drawing on a 2D canvas) and is toolkit independent.
Currently supported/in-development toolkits include Qt4 and Wx. The Qt
toolkit is strongly recommended over Wx.

Enaml is extensible and makes it extremely easy for the user to define
their own widgets, override existing widgets, create a new backend toolkit,
or even hook the runtime to apply their own expression dependency behavior.
About the only thing not hookable is the Enaml language syntax itself.

The enamldoc package provides a Sphinx extension for documenting Enaml objects.

Prerequisites
-------------
* Python >= 2.6 (not Python 3)
* Traits
* Casuarius (https://github.com/enthought/casuarius)
* PySide or PyQt4 (only if using the Qt backend)
* wxPython (only if using the wx backend)
* PLY (Python Lex-Yacc), for parsing *.enaml* files
* Sphinx (only if building the docs)

Emacs major mode for editing Enaml files
========================================

This file creates a new mode (based on python-mode) to highlight keywords specific to Enaml files.  Just copy the file enaml.el to a location in your load-path (typically "~/.emacs.d" for an individual user).  Then add the following lines to your .emacs file::

(require 'enaml)
(setq auto-mode-alist (cons '("\\.enaml$" . enaml-mode) auto-mode-alist))

Inline python code should still be highlighted as in python-mode.

Vim Tools for Enaml Files
-------------------------

These are simple indent rules and syntax highlighting files for Vim. They inherit
most of their behavior from their Python counterparts in the standard Vim
runtime. Just place them in their appropriate directories under your .vim/
directory. Add the following line to your ~/.vimrc to enable them for .enaml files:

    autocmd BufNewFile,BufRead,BufEnter *.enaml setfiletype enaml


