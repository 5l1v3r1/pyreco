__FILENAME__ = cms_plugins
from __future__ import division

from django.contrib import admin
from django import forms
from django.db import models

from cms.plugin_pool import plugin_pool
from cms.plugin_base import CMSPluginBase


from widgetry import fk_lookup

from arkestra_utilities.settings import VIDEO_HOSTING_SERVICES
from arkestra_utilities.admin_mixins import AutocompleteMixin, SupplyRequestMixin

from links import schema

from models import ImageSetItem, ImageSetPlugin, EmbeddedVideoSetItem, EmbeddedVideoSetPlugin

class ImageSetItemPluginForm(forms.ModelForm):
    class Meta:
        model=ImageSetItem

    def __init__(self, *args, **kwargs):
        super(ImageSetItemPluginForm, self).__init__(*args, **kwargs)
        if self.instance.pk is not None and self.instance.destination_content_type:
            destination_content_type = self.instance.destination_content_type.model_class()
        else:
            destination_content_type = None
        self.fields['destination_object_id'].widget = fk_lookup.GenericFkLookup('id_%s-destination_content_type' % self.prefix, destination_content_type)
        self.fields['destination_content_type'].widget.choices = schema.content_type_choices()

    def clean(self):
        super(ImageSetItemPluginForm, self).clean()
        # the Link is optional, but unless both fields both Type and Item fields are provided,
        # reset them to None
        if not self.cleaned_data["destination_content_type"] or not self.cleaned_data["destination_object_id"]:
            self.cleaned_data["destination_content_type"]=None
            self.cleaned_data["destination_object_id"]=None


        if "click here" in self.cleaned_data["alt_text"].lower():
            raise forms.ValidationError("'Click here'?! In alt text?! You cannot be serious. Fix this at once.")

        return self.cleaned_data


class ImageSetItemFormFormSet(forms.models.BaseInlineFormSet):
    def clean(self):
        super(ImageSetItemFormFormSet, self).clean()

        some_have_links = False
        some_do_not_have_links = False

        for form in self.forms:
            # if a subform is invalid Django explicity raises
            # an AttributeError for cleaned_data
            try:
                # only forms with an image field count - the others might be blank
                if form.cleaned_data:
                    if form.cleaned_data.get("destination_content_type") and form.cleaned_data.get("destination_object_id"):
                        some_have_links = True
                    else:
                        some_do_not_have_links = True
            except AttributeError:
                pass

        # #  if some_have_links and some_do_not_have_links then that's inconsistent
        # if some_have_links and some_do_not_have_links:
        #     message = "I won't put links on any of your images until they all have links"
        #     messages.add_message(self.request, messages.WARNING, message)


class ImageSetItemEditor(SupplyRequestMixin, admin.StackedInline, AutocompleteMixin):
    form = ImageSetItemPluginForm
    model=ImageSetItem
    extra=1

    fieldset_basic = ('', {'fields': ((
        'image',
        'alt_text',
        ),)})
    fieldset_advanced = ('Caption', {
        'fields': (
            ( 'auto_image_title', 'manual_image_title'),
            ( 'auto_image_caption', 'manual_image_caption'),
        ),
        'classes': ('collapse',)
        })
    fieldset_control = ('Control', {
        'fields': (
            ( 'inline_item_ordering', 'active'),
        ),
        'classes': ('collapse',)
        })
    fieldsets = (
        fieldset_basic,
        fieldset_advanced,
        ("Link", {
            'fields': (
                ('destination_content_type', 'destination_object_id',),
                ('auto_link_title', 'manual_link_title'), ( 'auto_link_description', 'manual_link_description'),
            ),
            'description': "Links will only be applied if <em>all</em> images in the set have links.",
            'classes': ('collapse',),
        }),
        fieldset_control,
        )
    formfield_overrides = {
        models.TextField: {'widget': forms.Textarea(attrs={'cols':30, 'rows':3,},),},
    }

class ImageSetPluginForm(forms.ModelForm):
    class Meta:
        model=ImageSetPlugin
    # when the user adds link to some but not items, we need to issue a warning
    # this should warn them, but allow them to force a save
    # def clean(self):
    #     force = self.cleaned_data.get('force_save')
    #     if not force:
    #         self.fields['force_save'] = forms.BooleanField(initial=True, widget=forms.HiddenInput())
    #         raise forms.ValidationError('You gotta check something')
    #     return self.cleaned_data


class ImageSetPublisher(SupplyRequestMixin, CMSPluginBase):
    form = ImageSetPluginForm
    model = ImageSetPlugin
    name = "Image/link set"
    text_enabled = True
    raw_id_fields = ('image',)
    inlines = (ImageSetItemEditor,)
    admin_preview = False
    fieldset_basic = ('Size & proportions', {'fields': (
        ('kind', 'notes',),
        ('width', 'aspect_ratio',)
        ,)})
    fieldset_advanced = ('Advanced', {'fields': (( 'float', 'height'),), 'classes': ('collapse',)})
    fieldset_items_per_row = ('For Multiple and Lightbox plugins only', {'fields': ('items_per_row',), 'classes': ('collapse',)})
    fieldsets = (fieldset_basic, fieldset_items_per_row, fieldset_advanced)
    readonly_fields = ["notes", ]

    def __init__(self, model = None, admin_site = None):
        self.admin_preview = False
        self.text_enabled = True
        super(ImageSetPublisher, self).__init__(model, admin_site)

    def notes(self,instance):
        if not instance.imageset_item.count():
            message = u"There are currently no items in this set."
        elif instance.imageset_item.count() == 1:
            message = u"There is currently only one item in this set."
        else:
            message = u"There are currently %s items in this set." % instance.imageset_item.count()
        return message

    def render(self, context, imageset, placeholder):

        kind = imageset.select_imageset_kind()
        if kind:
            getattr(imageset, kind)(context)
            context.update({
                'imageset':imageset,
                })
        self.render_template = imageset.template
        return context

    def __unicode__(self):
        return self

    def icon_src(self, instance):
        if instance.imageset_item.count() == 1:
            try:
                return instance.imageset_item.all()[0].image.thumbnails['admin_tiny_icon']
            except KeyError:
                pass
        elif instance.kind == "basic":
            return "/static/plugin_icons/imageset_basic.png"
        elif instance.kind == "lightbox-single":
            return "/static/plugin_icons/lightbox.png"
        elif instance.kind == "lightbox":
            return "/static/plugin_icons/lightbox.png"
        elif instance.kind == "slider":
            return "/static/plugin_icons/image_slider.png"
        else:
            return "/static/plugin_icons/imageset.png"

plugin_pool.register_plugin(ImageSetPublisher)


def set_image_caption(image):
    # prefer the manually-entered caption on the plugin, otherwise the one from the filer
    if image.caption or (image.use_description_as_caption and image.image.description):
        return image.caption or image.image.description


class EmbeddedVideoSetItemEditor(SupplyRequestMixin, admin.StackedInline, AutocompleteMixin):
    model=EmbeddedVideoSetItem
    extra=1
    fieldsets = (
        (None, {
            'fields': (
                ('service', 'video_code', 'aspect_ratio'),
                ('video_title', 'video_autoplay'),
                ('active', 'inline_item_ordering'),
            ),
        }),
    )


class EmbeddedVideoPlugin(CMSPluginBase):
    model = EmbeddedVideoSetPlugin
    admin_preview = False

    name = "Embedded video set"
    text_enabled = True
    inlines = (EmbeddedVideoSetItemEditor,)


    def notes(self,instance):
        if not instance.embeddedvideoset_item.count():
            message = u"There are currently no items in this set."
        elif instance.imageset_item.count() == 1:
            message = u"There is currently only one item in this set."
        else:
            message = u"There are currently %s items in this set." % instance.imageset_item.count()
        return message

    def render(self, context, embeddedvideoset, placeholder):

        # don't do anything if there are no items in the embeddedvideoset
        if embeddedvideoset.active_items:
            video = embeddedvideoset.active_items.order_by('?')[0]

            # calculate the width of the block the image will be in
            embeddedvideoset.get_container_width(context)
            width = embeddedvideoset.container_width
            height = int(embeddedvideoset.container_width/video.aspect_ratio)

            self.render_template = VIDEO_HOSTING_SERVICES[video.service]["template"]
            context.update({
                'embeddedvideoset': embeddedvideoset,
                'video': video,
                'width': width,
                'height': height,
                })

        else:
            self.render_template = "null.html"
        return context


    def __unicode__(self):
        return self

    def icon_src(self, instance):
        return "/static/plugin_icons/embedded_videos.png"


plugin_pool.register_plugin(EmbeddedVideoPlugin)


                    # gcbirzan's suggestion on how to calculate LIGHTBOX_COLUMNS
                    # d={}
                    # def mid(n):
                    #     middle = int(n**.5)
                    #     for diff in range(3):
                    #         if n % (middle + diff) == 0:
                    #             return middle + diff
                    #
                    #
                    # for n in range(2, 100):
                    #     for diff in range(3):
                    #         res = mid(n+diff)
                    #         if not res:
                    #             continue
                    #         d[n] = res
                    #         break
                    #
                    #
                    # print "****", d
                    # print d[len(items)]

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'FilerImage'
        db.create_table('cmsplugin_filerimage', (
            ('cmsplugin_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['cms.CMSPlugin'], unique=True, primary_key=True)),
            ('image', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Image'])),
            ('width', self.gf('django.db.models.fields.FloatField')(default=1000.0, null=True, blank=True)),
            ('height', self.gf('django.db.models.fields.PositiveIntegerField')(null=True, blank=True)),
            ('aspect_ratio', self.gf('django.db.models.fields.FloatField')(default=0, null=True)),
            ('alt_text', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('use_description_as_caption', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('caption', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('use_autoscale', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('float', self.gf('django.db.models.fields.CharField')(max_length=10, null=True, blank=True)),
        ))
        db.send_create_signal('arkestra_image_plugin', ['FilerImage'])

        # Adding model 'ImageSetPlugin'
        db.create_table('cmsplugin_imagesetplugin', (
            ('cmsplugin_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['cms.CMSPlugin'], unique=True, primary_key=True)),
            ('kind', self.gf('django.db.models.fields.CharField')(default='basic', max_length=50)),
            ('width', self.gf('django.db.models.fields.FloatField')(default=1000.0)),
            ('height', self.gf('django.db.models.fields.PositiveIntegerField')(null=True, blank=True)),
            ('aspect_ratio', self.gf('django.db.models.fields.FloatField')(default=0, null=True)),
            ('float', self.gf('django.db.models.fields.CharField')(max_length=10, null=True, blank=True)),
            ('items_per_row', self.gf('django.db.models.fields.PositiveSmallIntegerField')(null=True, blank=True)),
        ))
        db.send_create_signal('arkestra_image_plugin', ['ImageSetPlugin'])

        # Adding model 'ImageSetItem'
        db.create_table('arkestra_image_plugin_imagesetitem', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('plugin', self.gf('django.db.models.fields.related.ForeignKey')(related_name='imageset_item', to=orm['arkestra_image_plugin.ImageSetPlugin'])),
            ('image', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Image'])),
            ('alt_text', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('auto_image_title', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('manual_image_title', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('auto_image_caption', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('manual_image_caption', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('auto_link_title', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('manual_link_title', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('auto_link_description', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('manual_link_description', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('destination_content_type', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='links_to_imagesetitem', null=True, to=orm['contenttypes.ContentType'])),
            ('destination_object_id', self.gf('django.db.models.fields.PositiveIntegerField')(null=True, blank=True)),
        ))
        db.send_create_signal('arkestra_image_plugin', ['ImageSetItem'])


    def backwards(self, orm):
        
        # Deleting model 'FilerImage'
        db.delete_table('cmsplugin_filerimage')

        # Deleting model 'ImageSetPlugin'
        db.delete_table('cmsplugin_imagesetplugin')

        # Deleting model 'ImageSetItem'
        db.delete_table('arkestra_image_plugin_imagesetitem')


    models = {
        'arkestra_image_plugin.filerimage': {
            'Meta': {'object_name': 'FilerImage', 'db_table': "'cmsplugin_filerimage'", '_ormbases': ['cms.CMSPlugin']},
            'alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'aspect_ratio': ('django.db.models.fields.FloatField', [], {'default': '0', 'null': 'True'}),
            'caption': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'float': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'height': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']"}),
            'use_autoscale': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'use_description_as_caption': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'width': ('django.db.models.fields.FloatField', [], {'default': '1000.0', 'null': 'True', 'blank': 'True'})
        },
        'arkestra_image_plugin.imagesetitem': {
            'Meta': {'ordering': "('id',)", 'object_name': 'ImageSetItem'},
            'alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'auto_image_caption': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_image_title': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_link_description': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_link_title': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links_to_imagesetitem'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']"}),
            'manual_image_caption': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'manual_image_title': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'manual_link_description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'manual_link_title': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'imageset_item'", 'to': "orm['arkestra_image_plugin.ImageSetPlugin']"})
        },
        'arkestra_image_plugin.imagesetplugin': {
            'Meta': {'object_name': 'ImageSetPlugin', 'db_table': "'cmsplugin_imagesetplugin'", '_ormbases': ['cms.CMSPlugin']},
            'aspect_ratio': ('django.db.models.fields.FloatField', [], {'default': '0', 'null': 'True'}),
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'float': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'height': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'items_per_row': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'kind': ('django.db.models.fields.CharField', [], {'default': "'basic'", 'max_length': '50'}),
            'width': ('django.db.models.fields.FloatField', [], {'default': '1000.0'})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['arkestra_image_plugin']

########NEW FILE########
__FILENAME__ = 0002_embedded_video_plugin
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'EmbeddedVideoSetItem'
        db.create_table('arkestra_image_plugin_embeddedvideosetitem', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('plugin', self.gf('django.db.models.fields.related.ForeignKey')(related_name='embeddedvideoset_item', to=orm['arkestra_image_plugin.EmbeddedVideoSetPlugin'])),
            ('service', self.gf('django.db.models.fields.CharField')(max_length=50)),
            ('video_code', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('video_title', self.gf('django.db.models.fields.CharField')(max_length=250)),
            ('video_autoplay', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('aspect_ratio', self.gf('django.db.models.fields.FloatField')(default=1.333)),
        ))
        db.send_create_signal('arkestra_image_plugin', ['EmbeddedVideoSetItem'])

        # Adding model 'EmbeddedVideoSetPlugin'
        db.create_table('cmsplugin_embeddedvideosetplugin', (
            ('cmsplugin_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['cms.CMSPlugin'], unique=True, primary_key=True)),
            ('width', self.gf('django.db.models.fields.FloatField')(default=1000.0)),
        ))
        db.send_create_signal('arkestra_image_plugin', ['EmbeddedVideoSetPlugin'])


    def backwards(self, orm):
        # Deleting model 'EmbeddedVideoSetItem'
        db.delete_table('arkestra_image_plugin_embeddedvideosetitem')

        # Deleting model 'EmbeddedVideoSetPlugin'
        db.delete_table('cmsplugin_embeddedvideosetplugin')


    models = {
        'arkestra_image_plugin.embeddedvideosetitem': {
            'Meta': {'ordering': "('id',)", 'object_name': 'EmbeddedVideoSetItem'},
            'aspect_ratio': ('django.db.models.fields.FloatField', [], {'default': '1.333'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'embeddedvideoset_item'", 'to': "orm['arkestra_image_plugin.EmbeddedVideoSetPlugin']"}),
            'service': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'video_autoplay': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_code': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'video_title': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'arkestra_image_plugin.embeddedvideosetplugin': {
            'Meta': {'object_name': 'EmbeddedVideoSetPlugin', 'db_table': "'cmsplugin_embeddedvideosetplugin'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'width': ('django.db.models.fields.FloatField', [], {'default': '1000.0'})
        },
        'arkestra_image_plugin.filerimage': {
            'Meta': {'object_name': 'FilerImage', 'db_table': "'cmsplugin_filerimage'", '_ormbases': ['cms.CMSPlugin']},
            'alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'aspect_ratio': ('django.db.models.fields.FloatField', [], {'default': '0', 'null': 'True'}),
            'caption': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'float': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'height': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']"}),
            'use_autoscale': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'use_description_as_caption': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'width': ('django.db.models.fields.FloatField', [], {'default': '1000.0', 'null': 'True', 'blank': 'True'})
        },
        'arkestra_image_plugin.imagesetitem': {
            'Meta': {'ordering': "('id',)", 'object_name': 'ImageSetItem'},
            'alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'auto_image_caption': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_image_title': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_link_description': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_link_title': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links_to_imagesetitem'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']"}),
            'manual_image_caption': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'manual_image_title': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'manual_link_description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'manual_link_title': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'imageset_item'", 'to': "orm['arkestra_image_plugin.ImageSetPlugin']"})
        },
        'arkestra_image_plugin.imagesetplugin': {
            'Meta': {'object_name': 'ImageSetPlugin', 'db_table': "'cmsplugin_imagesetplugin'", '_ormbases': ['cms.CMSPlugin']},
            'aspect_ratio': ('django.db.models.fields.FloatField', [], {'default': '0', 'null': 'True'}),
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'float': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'height': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'items_per_row': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'kind': ('django.db.models.fields.CharField', [], {'default': "'basic'", 'max_length': '50'}),
            'width': ('django.db.models.fields.FloatField', [], {'default': '1000.0'})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 1, 26, 0, 0)'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['arkestra_image_plugin']
########NEW FILE########
__FILENAME__ = 0003_auto__add_field_embeddedvideosetitem_inline_item_ordering__add_field_e
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'EmbeddedVideoSetItem.inline_item_ordering'
        db.add_column('arkestra_image_plugin_embeddedvideosetitem', 'inline_item_ordering',
                      self.gf('django.db.models.fields.PositiveSmallIntegerField')(default=0),
                      keep_default=False)

        # Adding field 'EmbeddedVideoSetItem.active'
        db.add_column('arkestra_image_plugin_embeddedvideosetitem', 'active',
                      self.gf('django.db.models.fields.BooleanField')(default=True),
                      keep_default=False)

        # Adding field 'ImageSetItem.inline_item_ordering'
        db.add_column('arkestra_image_plugin_imagesetitem', 'inline_item_ordering',
                      self.gf('django.db.models.fields.PositiveSmallIntegerField')(default=0),
                      keep_default=False)

        # Adding field 'ImageSetItem.active'
        db.add_column('arkestra_image_plugin_imagesetitem', 'active',
                      self.gf('django.db.models.fields.BooleanField')(default=True),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'EmbeddedVideoSetItem.inline_item_ordering'
        db.delete_column('arkestra_image_plugin_embeddedvideosetitem', 'inline_item_ordering')

        # Deleting field 'EmbeddedVideoSetItem.active'
        db.delete_column('arkestra_image_plugin_embeddedvideosetitem', 'active')

        # Deleting field 'ImageSetItem.inline_item_ordering'
        db.delete_column('arkestra_image_plugin_imagesetitem', 'inline_item_ordering')

        # Deleting field 'ImageSetItem.active'
        db.delete_column('arkestra_image_plugin_imagesetitem', 'active')


    models = {
        'arkestra_image_plugin.embeddedvideosetitem': {
            'Meta': {'ordering': "('id',)", 'object_name': 'EmbeddedVideoSetItem'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'aspect_ratio': ('django.db.models.fields.FloatField', [], {'default': '1.333'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'inline_item_ordering': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'embeddedvideoset_item'", 'to': "orm['arkestra_image_plugin.EmbeddedVideoSetPlugin']"}),
            'service': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'video_autoplay': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_code': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'video_title': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'arkestra_image_plugin.embeddedvideosetplugin': {
            'Meta': {'object_name': 'EmbeddedVideoSetPlugin', 'db_table': "'cmsplugin_embeddedvideosetplugin'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'width': ('django.db.models.fields.FloatField', [], {'default': '1000.0'})
        },
        'arkestra_image_plugin.filerimage': {
            'Meta': {'object_name': 'FilerImage', 'db_table': "'cmsplugin_filerimage'", '_ormbases': ['cms.CMSPlugin']},
            'alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'aspect_ratio': ('django.db.models.fields.FloatField', [], {'default': '0', 'null': 'True'}),
            'caption': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'float': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'height': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']"}),
            'use_autoscale': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'use_description_as_caption': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'width': ('django.db.models.fields.FloatField', [], {'default': '1000.0', 'null': 'True', 'blank': 'True'})
        },
        'arkestra_image_plugin.imagesetitem': {
            'Meta': {'ordering': "('id',)", 'object_name': 'ImageSetItem'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'auto_image_caption': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_image_title': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_link_description': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_link_title': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links_to_imagesetitem'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']"}),
            'inline_item_ordering': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
            'manual_image_caption': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'manual_image_title': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'manual_link_description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'manual_link_title': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'imageset_item'", 'to': "orm['arkestra_image_plugin.ImageSetPlugin']"})
        },
        'arkestra_image_plugin.imagesetplugin': {
            'Meta': {'object_name': 'ImageSetPlugin', 'db_table': "'cmsplugin_imagesetplugin'", '_ormbases': ['cms.CMSPlugin']},
            'aspect_ratio': ('django.db.models.fields.FloatField', [], {'default': '0', 'null': 'True'}),
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'float': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'height': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'items_per_row': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'kind': ('django.db.models.fields.CharField', [], {'default': "'basic'", 'max_length': '50'}),
            'width': ('django.db.models.fields.FloatField', [], {'default': '1000.0'})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 1, 29, 0, 0)'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['arkestra_image_plugin']
########NEW FILE########
__FILENAME__ = 0004_convert_old_filer_plugin
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models

class Migration(DataMigration):

    def forwards(self, orm):
        # loop over FilerImage instances
        for item in orm.FilerImage.objects.all():
                        
            # collect FilerImage attributes to copy
            cmsplugin_ptr = item.cmsplugin_ptr
            width = item.width or 1000
            height = item.height
            floatvalue = item.float
            aspect_ratio = item.aspect_ratio or 0

            # collect CMSPlugin attributes to copy
            language = item.language
            position = item.position
            id = item.id

            # collect CMSPlugin attributes to copy
            parent = item.parent
            tree_id = item.tree_id
            lft = item.lft
            rght = item.rght
            level = item.level
            placeholder = item.placeholder
            
            # collect ImageSetItem attributes to copy
            image = item.image
            alt_text = item.alt_text
            auto_image_caption = item.use_description_as_caption
            manual_image_caption = item.caption
            
            
            # create and save an ImageSet instance
            imageset = orm.ImageSetPlugin(
                plugin_type="ImageSetPublisher", 
                cmsplugin_ptr=cmsplugin_ptr,
                width=width,
                height=height,
                float=floatvalue,
                aspect_ratio=aspect_ratio,
                language=language,
                position=position,
                id=id,
                parent=parent,
                tree_id=tree_id,
                lft=lft,
                rght=rght,
                level=level,
                placeholder=placeholder,
                )
            imageset.save()
                
            # create and save an ImageSetItem
            imagesetitem = orm.ImageSetItem(
                plugin=imageset, 
                image=image,
                alt_text=alt_text,
                auto_image_caption=auto_image_caption,
                manual_image_caption=manual_image_caption
                ) 
            imagesetitem.save() 

    def backwards(self, orm):
        "Write your backwards methods here."

    models = {
        'arkestra_image_plugin.embeddedvideosetitem': {
            'Meta': {'ordering': "('inline_item_ordering', 'id')", 'object_name': 'EmbeddedVideoSetItem'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'aspect_ratio': ('django.db.models.fields.FloatField', [], {'default': '1.333'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'inline_item_ordering': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'embeddedvideoset_item'", 'to': "orm['arkestra_image_plugin.EmbeddedVideoSetPlugin']"}),
            'service': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'video_autoplay': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_code': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'video_title': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'arkestra_image_plugin.embeddedvideosetplugin': {
            'Meta': {'object_name': 'EmbeddedVideoSetPlugin', 'db_table': "'cmsplugin_embeddedvideosetplugin'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'width': ('django.db.models.fields.FloatField', [], {'default': '1000.0'})
        },
        'arkestra_image_plugin.filerimage': {
            'Meta': {'object_name': 'FilerImage', 'db_table': "'cmsplugin_filerimage'", '_ormbases': ['cms.CMSPlugin']},
            'alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'aspect_ratio': ('django.db.models.fields.FloatField', [], {'default': '0', 'null': 'True'}),
            'caption': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'float': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'height': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']"}),
            'use_autoscale': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'use_description_as_caption': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'width': ('django.db.models.fields.FloatField', [], {'default': '1000.0', 'null': 'True', 'blank': 'True'})
        },
        'arkestra_image_plugin.imagesetitem': {
            'Meta': {'ordering': "('inline_item_ordering', 'id')", 'object_name': 'ImageSetItem'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'auto_image_caption': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_image_title': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_link_description': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_link_title': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links_to_imagesetitem'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'on_delete': 'models.PROTECT'}),
            'inline_item_ordering': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
            'manual_image_caption': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'manual_image_title': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'manual_link_description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'manual_link_title': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'imageset_item'", 'to': "orm['arkestra_image_plugin.ImageSetPlugin']"})
        },
        'arkestra_image_plugin.imagesetplugin': {
            'Meta': {'object_name': 'ImageSetPlugin', 'db_table': "'cmsplugin_imagesetplugin'", '_ormbases': ['cms.CMSPlugin']},
            'aspect_ratio': ('django.db.models.fields.FloatField', [], {'default': '0', 'null': 'True'}),
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'float': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'height': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'items_per_row': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'kind': ('django.db.models.fields.CharField', [], {'default': "'basic'", 'max_length': '50'}),
            'width': ('django.db.models.fields.FloatField', [], {'default': '1000.0'})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 4, 10, 0, 0)'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['arkestra_image_plugin']
    symmetrical = True

########NEW FILE########
__FILENAME__ = 0005_remove_filer_plugin
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Deleting model 'FilerImage'
        db.delete_table('cmsplugin_filerimage')


    def backwards(self, orm):
        # Adding model 'FilerImage'
        db.create_table('cmsplugin_filerimage', (
            ('image', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Image'])),
            ('float', self.gf('django.db.models.fields.CharField')(max_length=10, null=True, blank=True)),
            ('use_description_as_caption', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('height', self.gf('django.db.models.fields.PositiveIntegerField')(null=True, blank=True)),
            ('alt_text', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('width', self.gf('django.db.models.fields.FloatField')(default=1000.0, null=True, blank=True)),
            ('cmsplugin_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['cms.CMSPlugin'], unique=True, primary_key=True)),
            ('caption', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('use_autoscale', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('aspect_ratio', self.gf('django.db.models.fields.FloatField')(default=0, null=True)),
        ))
        db.send_create_signal('arkestra_image_plugin', ['FilerImage'])


    models = {
        'arkestra_image_plugin.embeddedvideosetitem': {
            'Meta': {'ordering': "('inline_item_ordering', 'id')", 'object_name': 'EmbeddedVideoSetItem'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'aspect_ratio': ('django.db.models.fields.FloatField', [], {'default': '1.333'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'inline_item_ordering': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'embeddedvideoset_item'", 'to': "orm['arkestra_image_plugin.EmbeddedVideoSetPlugin']"}),
            'service': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'video_autoplay': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_code': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'video_title': ('django.db.models.fields.CharField', [], {'max_length': '250'})
        },
        'arkestra_image_plugin.embeddedvideosetplugin': {
            'Meta': {'object_name': 'EmbeddedVideoSetPlugin', 'db_table': "'cmsplugin_embeddedvideosetplugin'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'width': ('django.db.models.fields.FloatField', [], {'default': '1000.0'})
        },
        'arkestra_image_plugin.imagesetitem': {
            'Meta': {'ordering': "('inline_item_ordering', 'id')", 'object_name': 'ImageSetItem'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'auto_image_caption': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_image_title': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_link_description': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_link_title': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links_to_imagesetitem'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'on_delete': 'models.PROTECT'}),
            'inline_item_ordering': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
            'manual_image_caption': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'manual_image_title': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'manual_link_description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'manual_link_title': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'imageset_item'", 'to': "orm['arkestra_image_plugin.ImageSetPlugin']"})
        },
        'arkestra_image_plugin.imagesetplugin': {
            'Meta': {'object_name': 'ImageSetPlugin', 'db_table': "'cmsplugin_imagesetplugin'", '_ormbases': ['cms.CMSPlugin']},
            'aspect_ratio': ('django.db.models.fields.FloatField', [], {'default': '0', 'null': 'True'}),
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'float': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'height': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'items_per_row': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'kind': ('django.db.models.fields.CharField', [], {'default': "'basic'", 'max_length': '50'}),
            'width': ('django.db.models.fields.FloatField', [], {'default': '1000.0'})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 4, 10, 0, 0)'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['arkestra_image_plugin']
########NEW FILE########
__FILENAME__ = models
from __future__ import division

from django.utils.translation import ugettext_lazy as _
from django.db import models
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes import generic

from cms.models import CMSPlugin

from filer.fields.image import FilerImageField

from arkestra_utilities.import_free_model_mixins import ArkestraGenericPluginItemOrdering
from arkestra_utilities.settings import VIDEO_HOSTING_SERVICES
from arkestra_utilities.output_libraries.plugin_widths import get_placeholder_width, calculate_container_width

from links.models import LinkMethodsMixin

from arkestra_utilities.settings import IMAGESET_ITEM_PADDING, LIGHTBOX_COLUMNS


class ImageSetTypePluginMixin(object):

    def get_container_width(self, context):
        # Based on the plugin settings and placeholder width, calculate image container width

        # work out native image aspect ratio
        self.has_borders = False

        # width values
        # None:     use native width
        # <0:       an absolute value
        # <=100:    a percentage of placeholder's width
        # 1000:     automatic, based on placeholder's width

        placeholder_width = get_placeholder_width(context, self)

        if self.width > 0 and self.width <= 100:
            width = placeholder_width/100.0 * self.width
            auto = False
        else:
            width = placeholder_width
            auto = True

        # calculate the width of the block the image will be in
        self.container_width = int(calculate_container_width(context, self, width, auto))
        return self.container_width # return it for further processing

    def get_plugin_width(self, image=None):
        # given plugin.width and plugin.container_width and optionally an image,
        # return the width we'll use for the plugin. Mostly it will be the same as
        # plugin.container_width, but for native and absolute sizes we ignore that

        # no plugin width? use native image width or container width
        if not self.width:
            if image:
                # use native image width
                width = image.width
            else:
                # use container width
                width = 0
        # negative plugin widths are absolutes
        elif self.width < 0:
            width = -self.width
        else:
            width = 0
        return width

    def shave_if_floated(plugin, width):
        # shave off 5 point if the image is floated, to make room for a margin
        # see arkestra.css, span.image.left and span.image.right
        if plugin.float and plugin.width > 0:
            # print "-5 for float"
                return width - 5

    def calculate_aspect_ratio(self, item_list):
        return sum(
            [float(
                item.image.width)/item.image.height for item in item_list]
            )/len(item_list)

    def calculate_plugin_dimensions(self, calculated_width, calculated_aspect_ratio):

        # calculated_width and self.aspect_ratio determine height
        if self.aspect_ratio > 0:
            return int(calculated_width), int(calculated_width / self.aspect_ratio)

        # no self.aspect_ratio, so self.height applies
        elif self.aspect_ratio == 0 and self.height:
            # self.width exists, so use calculated_width and self.height
            if self.width:
                return int(calculated_width), int(self.height)
            # no width has been set; calculate it from self.height
            else:
                return int(self.height * calculated_aspect_ratio), int(self.height)

        # native width, aspect ratio and height
        elif self.aspect_ratio == -1 or self.aspect_ratio == 0:
            return int(calculated_width), int(calculated_width/calculated_aspect_ratio)
        else:
            return int(calculated_width), int(calculated_width/calculated_aspect_ratio)


class ImageSetPlugin(CMSPlugin, ImageSetTypePluginMixin):
    IMAGESET_KINDS = (
        ("basic", "Basic"),
        ("multiple", "Multiple image gallery"),
        ("lightbox", "Lightbox with gallery"),
        ("lightbox-single", "Lightbox without gallery"),
        ("slider", "Slider"),
        )
    kind = models.CharField(choices = IMAGESET_KINDS, max_length = 50, default = "basic")
    IMAGE_WIDTHS = (
        (1000.0, u"Automatic"),
        (u'Relative to column', (
            (100.0, u"100%"),
            (75.0, u"75%"),
            (66.7, u"66%"),
            (50.0, u"50%"),
            (33.3, u"33%"),
            (25.0, u"25%"),
            )
        ),
        (u'Absolute widths', (
            (-50.0, u'50 x 50'),
            (-175.0, u'175 pixels'),
            (-350.0, u'350 pixels'),
            )
        ),
        (0.0, u"Native"),
    )
    width = models.FloatField(u"Width of set", choices = IMAGE_WIDTHS, default = 1000.0)
    height = models.PositiveIntegerField(null=True, blank=True,
        help_text = "Only applies when <strong>Aspect ratio</strong> is <em>Automatic</em>")

    ASPECT_RATIOS = (
        (0, u'Automatic'),
        (9.0, u'9x1'),
        (3.0, u'3x1'),
        (1.778, u'16x9'),
        (1.618, u'Golden ratio (horizontal)'),
        (1.5, u'3x2'),
        (1.333, u'4x3'),
        (1.0, u'Square'),
        (.75, u'3x4'),
        (.667, u'2x3'),
        (0.618, u'Golden ratio (vertical)'),
        (0.563, u'16x9'),
        (0.3, u'1x3'),
        (-1.0, u'Force native'),
        )
    aspect_ratio = models.FloatField(null=True, choices = ASPECT_RATIOS, default = 0,
        help_text = "<em>Automatic</em>: native aspect ratio if possible, calculated otherwise")

    LEFT = "left"
    RIGHT = "right"
    FLOAT_CHOICES = ((LEFT, _("left")),
                     (RIGHT, _("right")),
                     )
    float = models.CharField(_("float"), max_length=10, blank=True, null=True, choices=FLOAT_CHOICES)
    items_per_row = models.PositiveSmallIntegerField(blank = True, null = True,
        help_text = "Only applies to gallery-type plugins")

    @property
    def items_have_links(self):
        return all(item.destination_content_object is not None for item in self.imageset_item.all())

    @property
    def active_items(self):
        return self.imageset_item.active_items()

    def select_imageset_kind(self):
        if not self.active_items:
            self.template = "null.html"
            return None
        self.items = self.active_items
        # at least two items are required for a slider
        if self.kind == "slider" and self.active_items.count() > 1:
            self.template = "arkestra_image_plugin/slider.html"
            return "slider"
        # multiple_images() prepares a gallery of images
        elif self.kind == "lightbox" or \
            (self.kind == "multiple" and self.active_items.count() > 1):
            self.template = "arkestra_image_plugin/%s.html" %self.kind
            return "multiple_images"
        # lightbox_single can work with one iamge
        elif self.kind == "lightbox-single":
            self.template = "arkestra_image_plugin/lightbox.html"
            return "lightbox_single"
        else:
            self.template = "arkestra_image_plugin/single_image.html"
            return "single_image"

    def single_image(self, context={"placeholder_width": 500}):
        # choose an image at random from the set
        self.item = self.items.order_by('?')[0]
        # get width
        width = self.get_plugin_width(self.item.image) or self.get_container_width(context)
        # shave if floated
        width = self.shave_if_floated(width) or width
        # calculate height
        self.item.width, self.item.height = self.calculate_plugin_dimensions(
            width,
            self.calculate_aspect_ratio([self.item.image])
            )

        self.item.caption_width = self.item.width
        self.items = [self.item]

    def multiple_images(self, context={"placeholder_width": 500}):
        # for lightboxes and multiple image sets

        self.padding = IMAGESET_ITEM_PADDING
        padding_adjuster = IMAGESET_ITEM_PADDING * 2

        # don't allow more items_per_row than there are items
        if self.items_per_row > self.items.count():
            self.items_per_row = self.items.count()

        items_per_row = self.items_per_row or LIGHTBOX_COLUMNS.get(self.items.count(), 8)

        # each item will be the same width - the user gets no say in this

        each_item_width = self.get_container_width(context) / items_per_row
        aspect_ratio = self.calculate_aspect_ratio(self.items)
        each_item_width, each_item_height = self.calculate_plugin_dimensions(
            each_item_width,
            aspect_ratio
            )

        # fancybox icons and multiple images with links have padding, so:
        if self.kind == "lightbox" or self.items_have_links:
            each_item_width = each_item_width - padding_adjuster
        else:
            # otherwise give them a margin
            each_item_width = int(each_item_width - (items_per_row-1) * padding_adjuster/items_per_row)

        # set up each item
        # for counter, item in enumerate(self.items, start = 1):
        # enable this when we no longer need to support Python 2.5
        for counter, item in enumerate(self.items):
            counter=counter+1
            # mark end-of-row items in case the CSS needs it
            if not counter%items_per_row:
                item.lastinrow = True

            item.width = item.caption_width = each_item_width
            item.height = each_item_height

    def lightbox_single(self, context={"placeholder_width": 500}):
        self.padding = IMAGESET_ITEM_PADDING
        padding_adjuster = IMAGESET_ITEM_PADDING * 2
        # convert to a list
        self.items = list(self.items)
        # choose the first image from the set
        self.item = self.items[0]

        # get width
        width = self.get_plugin_width(self.item.image) or self.get_container_width(context)
        # shave if floated
        width = self.shave_if_floated(width) or width

        # fancybox icons  have padding, so:
        width = width - padding_adjuster

        # calculate height
        self.item.width, self.item.height = self.calculate_plugin_dimensions(
            width, self.calculate_aspect_ratio([self.item])
            )
        # item.caption = set_image_caption(self.item)
        # item.width,item.height = int(item.width), int(item.height)
        self.item.caption_width = self.item.width

    def slider(self, context={"placeholder_width": 500}):
        # loops over the items in the set, and calculates their sizes
        # for use in a slider
        width = self.get_plugin_width() or self.get_container_width(context)

        self.size = (self.calculate_plugin_dimensions(
            width, self.calculate_aspect_ratio(self.items)
            ))

        for item in self.items:
            (item.width, item.height) = self.size

    def __unicode__(self):
        return u"image-set-%s" % self.kind

    def copy_relations(self, oldinstance):
        for plugin_item in oldinstance.imageset_item.all():
            plugin_item.pk = None
            plugin_item.plugin = self
            plugin_item.save()


class ImageSetItem(ArkestraGenericPluginItemOrdering, LinkMethodsMixin, models.Model):
    class Meta:
        ordering=('inline_item_ordering', 'id',)
    plugin = models.ForeignKey(ImageSetPlugin, related_name="imageset_item")
    image = FilerImageField(on_delete=models.PROTECT)
    alt_text = models.CharField(
        blank=True,
        max_length=255,
        help_text = """
        The image's meaning, message or function (if any). Leave empty for
        items with links.
        """
        )
    auto_image_title = models.BooleanField(_("Auto image title"),
        default=False,
        help_text = "Use the image's name field as a title")
    manual_image_title = models.TextField(_("Manual image title"),
        blank=True, null=True)

    auto_image_caption = models.BooleanField(_("Auto image caption"),
        default=False,
        help_text = "Use the image's description field as caption")
    manual_image_caption = models.TextField(_("Manual image caption"),
        blank=True, null=True)

    auto_link_title = models.BooleanField(_("Auto link title"),
        default=False,
        help_text = "Use the link destination's title")

    manual_link_title = models.TextField(_("Manual link title"),
        blank=True, null=True)

    auto_link_description = models.BooleanField(_("Auto link description"),
        default=False,
        help_text = "Use the link destination's description metadata")
    manual_link_description = models.TextField(_("Manual link description"),
        blank=True, null=True)

    destination_content_type = models.ForeignKey(ContentType, verbose_name="Type", related_name = "links_to_%(class)s", null = True, blank = True)
    destination_object_id = models.PositiveIntegerField(verbose_name="Item", null = True, blank = True)
    destination_content_object = generic.GenericForeignKey('destination_content_type', 'destination_object_id')

    def __unicode__(self):
        if self.destination_object_id:
            return u"%s (links to: %s %s)" % (self.image.label, self.destination_content_type, self.destination_content_object)
        elif self.image:
            return self.image.label
        else:
            return u"Image Publication %s" % self.caption
        return ''

    @property
    def image_title(self):
        return self.manual_image_title or (self.auto_image_title and self.image.name)

    @property
    def image_caption(self):
        return self.manual_image_caption or (self.auto_image_caption and self.image.description)

    @property
    def link_title(self):
        if self.plugin.items_have_links:
            return self.manual_link_title or (self.auto_link_title and self.destination_content_object)

    @property
    def link_description(self):
        if self.plugin.items_have_links:
            return self.manual_link_description or (self.auto_link_description and self.description)

    @property
    def alt(self):
        if self.plugin.items_have_links:
            return self.alt_text or self.destination_content_object
        else:
            return ""

    @property
    def image_size(self):
        return u'%sx%s' % (int(self.width), int(self.height))


class EmbeddedVideoSetPlugin(CMSPlugin, ImageSetTypePluginMixin):
    IMAGE_WIDTHS = (
        (1000.0, u"Automatic"),
        (u'Relative to column', (
            (100.0, u"100%"),
            (75.0, u"75%"),
            (66.7, u"66%"),
            (50.0, u"50%"),
            (33.3, u"33%"),
            (25.0, u"25%"),
            )
        ),
    )
    width = models.FloatField(choices = IMAGE_WIDTHS, default = 1000.0)

    @property
    def active_items(self):
        return self.embeddedvideoset_item.filter(active=True)

    def __unicode__(self):
        return u"embedded-video-set-%s" % self.id

    def copy_relations(self, oldinstance):
        for plugin_item in oldinstance.embeddedvideoset_item.all():
            plugin_item.pk = None
            plugin_item.plugin = self
            plugin_item.save()

class EmbeddedVideoSetItem(ArkestraGenericPluginItemOrdering):
    class Meta:
        ordering=('inline_item_ordering', 'id',)
    plugin = models.ForeignKey(
        EmbeddedVideoSetPlugin,
        related_name="embeddedvideoset_item"
        )
    SERVICES = [(service, values["name"]) for service,values in VIDEO_HOSTING_SERVICES.items()]
    service = models.CharField(choices = SERVICES, max_length = 50)
    video_code = models.CharField(max_length=255,
        help_text = "Not the full URL."
        )
    video_title = models.CharField(_("Title"), max_length=250)
    # video_caption = models.TextField(
    #     _("Video caption"),
    #     blank=True, null=True
    #     )
    video_autoplay = models.BooleanField(_("Autoplay"), default=False)

    ASPECT_RATIOS = (
        (3.0, u'3x1'),
        (1.778, u'16x9'),
        (1.618, u'Golden ratio (horizontal)'),
        (1.5, u'3x2'),
        (1.333, u'4x3'),
        (1.0, u'Square'),
        (.75, u'3x4'),
        (.667, u'2x3'),
        (0.618, u'Golden ratio (vertical)'),
        (0.563, u'9x16'),
        (0.3, u'1x3'),
        )
    aspect_ratio = models.FloatField(choices = ASPECT_RATIOS, default = 1.333,
        help_text = "Adjust to match video file"
        )

    def __unicode__(self):
        return self.video_title

########NEW FILE########
__FILENAME__ = testrunner
from django.conf import settings

settings.configure(DEBUG=True, TEMPLATE_DEBUG=True,
    TEMPLATE_DIRS=('/home/web-apps/myapp', '/home/web-apps/base'))

########NEW FILE########
__FILENAME__ = tests
from django.test import TestCase
from django import forms
from django.core.files import File as DjangoFile

from cms.models.placeholdermodel import Placeholder
from cms.api import add_plugin

from filer.models.imagemodels import Image
from filer.tests.helpers import create_image


from arkestra_image_plugin.models import EmbeddedVideoSetItem, ImageSetItem, ImageSetPlugin, ImageSetTypePluginMixin


class ImageSetTypePluginMixinContainerWidthTests(TestCase):
    def setUp(self):
        self.placeholder = Placeholder(slot=u"some_slot")
        self.placeholder.save()
        self.plugin = add_plugin(
            self.placeholder,
            u"ImageSetPublisher",
            u"en",
            kind="basic"
        )
        self.context = {"placeholder_width": 500,} # fake context for testing widths


    def test_imagelinkset_plugin_container_width_1000(self):
        # automatic - will *usually* be 100%
        self.plugin.width = 1000.0
        self.plugin.get_container_width({"placeholder_width": 500,})
        self.assertEqual(self.plugin.container_width, 500)

    def test_imagelinkset_plugin_container_width_100_of_500(self):
        # 100% of 500
        self.plugin.width = 100
        self.plugin.get_container_width({"placeholder_width": 500,})
        self.assertEqual(self.plugin.container_width, 500)

    def test_imagelinkset_plugin_container_width_100_of_800(self):
        # 100% of 800
        self.plugin.width = 100
        self.plugin.get_container_width({"placeholder_width": 800,})
        self.assertEqual(self.plugin.container_width, 800)

    def test_imagelinkset_plugin_container_width_50_of_500(self):
        # 50% of 500
        self.plugin.width = 50
        self.plugin.get_container_width({"placeholder_width": 500,})
        self.assertEqual(self.plugin.container_width, 250)

    def test_imagelinkset_plugin_container_width_33_of_500(self):
        # 33.3% of 500 - coerced to integer
        self.plugin.width = 33.3
        self.plugin.get_container_width({"placeholder_width": 500,})
        self.assertEqual(self.plugin.container_width, 166)


class ImageSetTypePluginMixinContainerGetPluginWidthTests(TestCase):
    """
    For testing methods of the Imageset plugin that don't require fully-
    constructed plugin instances
    """
    def setUp(self):
        # create & save plugin
        self.plugin = ImageSetPlugin()
        self.plugin.save()
        # create & save images
        self.image1 = Image(_width=100, _height=100)
        self.image1.save()

    # output: 0 = auto, +ve if set explicitly
    # native only acts if an image is provided

    def test_defaults(self):
        # automatic
        self.assertEqual(self.plugin.get_plugin_width(), 0)

    def test_defaults_with_image(self):
        # automatic; ignore image
        self.assertEqual(self.plugin.get_plugin_width(self.image1), 0)

    def test_no_image_native_plugin_width(self):
        # native but no image so auto
        self.plugin.width = 0
        self.assertEqual(self.plugin.get_plugin_width(), 0)

    def test_no_image_absolute_plugin_width(self):
        # absolute
        self.plugin.width = -250
        self.assertEqual(self.plugin.get_plugin_width(), 250)

    def test_image_native_plugin_width(self):
        # native and image so use image's width
        self.plugin.width = 0
        self.assertEqual(self.plugin.get_plugin_width(self.image1), 100)

    def test_image_absolute_width(self):
        # absolute; ignore image
        self.plugin.width = -250
        self.assertEqual(self.plugin.get_plugin_width(self.image1), 250)

class ImageSetTypePluginEasyMethodTests(TestCase):
    """
    For testing methods of the Imageset plugin that don't require fully-
    constructed plugin instances
    """
    def setUp(self):
        # create & save plugin
        self.plugin = ImageSetPlugin()
        self.plugin.save()
        # create & save images
        self.image1 = Image(_width=100, _height=100)
        self.image2 = Image(_width=200, _height=100)
        self.image3 = Image(_width=200, _height=100)
        self.image1.save()
        self.image2.save()
        self.image3.save()
        # create & save plugin items
        self.item1 = ImageSetItem(
            plugin=self.plugin,
            image=self.image1)
        self.item2 = ImageSetItem(
            plugin=self.plugin,
            image=self.image2)
        self.item3 = ImageSetItem(
            plugin=self.plugin,
            image=self.image3)
        self.item1.save()
        self.item2.save()
        self.item3.save()

    def test_calculate_aspect_ratio(self):
        # calculated aspect ratio should be mean aspect ratio of all items
        self.assertEqual(
            self.plugin.calculate_aspect_ratio([self.item1, self.item2]),
            1.5
        )

    def test_active_items(self):
        self.assertListEqual(
            list(self.plugin.active_items),
            [self.item1, self.item2, self.item3]
        )

    def test_active_items_one_inactive(self):
        self.item2.active = False
        self.item2.save()
        self.assertListEqual(
            list(self.plugin.active_items),
            [self.item1, self.item3]
        )

    def test_active_items_reordered(self):
        self.item1.inline_item_ordering = 1
        self.item1.save()
        self.assertListEqual(
            list(self.plugin.active_items),
            [self.item2, self.item3, self.item1]
        )

    def test_imagelinkset_select_imageset_kind_single(self):
        # basic = single_image, single_image.html
        self.plugin.kind = "basic"
        self.item1.save()
        self.item2.save()
        self.item3.save()
        self.assertEquals(self.plugin.select_imageset_kind(), "single_image")
        self.assertEquals(self.plugin.template, "arkestra_image_plugin/single_image.html")

    def test_imagelinkset_select_imageset_kind_multiple(self):
        # multiple = multiple_images, multiple_images.html
        self.plugin.kind = "multiple"
        self.item1.save()
        self.item2.save()
        self.item3.save()
        self.assertEquals(self.plugin.select_imageset_kind(), "multiple_images")
        self.assertEquals(self.plugin.template, "arkestra_image_plugin/multiple.html")

    def test_imagelinkset_select_imageset_kind_lightbox(self):
        # lightbox = lightbox, lightbox.html
        self.plugin.kind = "lightbox"
        self.item1.save()
        self.item2.save()
        self.item3.save()
        self.assertEquals(self.plugin.select_imageset_kind(), "multiple_images")
        self.assertEquals(self.plugin.template, "arkestra_image_plugin/lightbox.html")

    def test_imagelinkset_select_imageset_kind_lightbox_single(self):
        # lightbox = lightbox, lightbox.html
        self.plugin.kind = "lightbox-single"
        self.item1.save()
        self.item2.save()
        self.item3.save()
        self.assertEquals(self.plugin.select_imageset_kind(), "lightbox_single")
        self.assertEquals(self.plugin.template, "arkestra_image_plugin/lightbox.html")

    def test_imagelinkset_select_imageset_kind_items_no_kind(self):
        # no kind declared? single_image, single_image.html
        self.assertEquals(self.plugin.select_imageset_kind(), "single_image")
        self.assertEquals(self.plugin.template, "arkestra_image_plugin/single_image.html")

    def test_imagelinkset_select_imageset_kind_no_items(self):
        # no active_items? None, null.html
        self.item1.active = False
        self.item2.active = False
        self.item3.active = False
        self.item1.save()
        self.item2.save()
        self.item3.save()
        self.assertEquals(self.plugin.select_imageset_kind(), None)
        self.assertEquals(self.plugin.template, "null.html")

    def test_imagelinkset_select_imageset_kind_multiple_one_item(self):
        # only one item? single_image, single_image.html
        self.plugin.kind = "multiple"
        self.item1.active = False
        self.item2.active = False
        self.item1.save()
        self.item2.save()
        self.assertEquals(self.plugin.select_imageset_kind(), "single_image")
        self.assertEquals(self.plugin.template, "arkestra_image_plugin/single_image.html")

    def test_imagelinkset_select_imageset_kind_lightbox_single_one_item(self):
        # only one item lightbox single item? use lightbox_single
        self.plugin.kind = "lightbox-single"
        self.item1.active = False
        self.item2.active = False
        self.item1.save()
        self.item2.save()
        self.assertEquals(self.plugin.select_imageset_kind(), "lightbox_single")
        self.assertEquals(self.plugin.template, "arkestra_image_plugin/lightbox.html")

    def test_imagelinkset_calculate_plugin_dimensions_positive_self_aspect_ratio(self):
        # calculated_width and self.aspect_ratio determine height
        self.plugin.width = 1000.0 # automatic
        self.plugin.aspect_ratio = 2
        self.plugin.height = 0
        self.assertEquals(
            self.plugin.calculate_plugin_dimensions(299, 7.353),
            (299,149)
        )

    def test_imagelinkset_calculate_plugin_dimensions_height_no_aspect_ratio_width(self):
        # self.height and calculated_width determine size
        self.plugin.width = 1000.0 # automatic
        self.plugin.aspect_ratio = 0
        self.plugin.height = 200.1
        self.assertEquals(
            self.plugin.calculate_plugin_dimensions(130.7, 7.353),
            (130,200)
        )

    def test_imagelinkset_calculate_plugin_dimensions_height_no_aspect_ratio_no_width(self):
        # self.height and calculated_width determine size
        self.plugin.width = 0 # native
        self.plugin.aspect_ratio = 0
        self.plugin.height = 200
        self.assertEquals(
            self.plugin.calculate_plugin_dimensions(130, 7.353),
            (1470,200)
        )

    def test_imagelinkset_calculate_plugin_dimensions_no_height_no_aspect_ratio_no_width(self):
        # self.height and calculated_width determine size
        self.plugin.width = 0 # native
        self.plugin.aspect_ratio = 0
        self.plugin.height = None
        self.assertEquals(
            self.plugin.calculate_plugin_dimensions(500.5, 2.5),
            (500,200)
        )

    def test_imagelinkset_calculate_plugin_dimensions_no_height_aspect_ratio_no_width(self):
        # self.height and calculated_width determine size
        self.plugin.width = 0 # native
        self.plugin.aspect_ratio = 1
        self.plugin.height = None
        self.assertEquals(
            self.plugin.calculate_plugin_dimensions(505.5, 2),
            (505,505)
        )

class ImagesetsReturnCorrectItems(TestCase):

    def setUp(self):
        # create & save plugin
        self.plugin = ImageSetPlugin()
        self.plugin.save()
        # create & save images
        self.image1 = Image(_width=100, _height=100)
        self.image2 = Image(_width=200, _height=100)
        self.image3 = Image(_width=300, _height=100)
        self.image1.save()
        self.image2.save()
        self.image3.save()
        # create & save plugin items
        self.item1 = ImageSetItem(
            plugin=self.plugin,
            image=self.image1)
        self.item2 = ImageSetItem(
            plugin=self.plugin,
            image=self.image2)
        self.item3 = ImageSetItem(
            plugin=self.plugin,
            image=self.image3)
        self.item1.save()
        self.item2.save()
        self.item3.save()

    # basic
    # multiple
    # slider
    # lightbox single

    # are the right items being returned?

    def test_imagelinkset_plugin_basic_returns_one_active_item(self):
        self.plugin.items = self.plugin.active_items
        self.plugin.single_image()
        self.assertIn(self.plugin.item, self.plugin.active_items)

    def test_imagelinkset_plugin_multiple_returns_all_active_item(self):
        self.plugin.items = self.plugin.active_items
        self.plugin.multiple_images()
        self.assertListEqual(
            list(self.plugin.items),
            list(self.plugin.active_items)
        )

    def test_imagelinkset_plugin_slider_returns_all_active_item(self):
        self.plugin.items = self.plugin.active_items
        self.plugin.slider()
        self.assertListEqual(
            list(self.plugin.items),
            list(self.plugin.active_items)
        )

    def test_imagelinkset_plugin_lightbox_single_one_active_item(self):
        self.plugin.items = self.plugin.active_items
        self.plugin.lightbox_single()
        self.assertListEqual(
            list(self.plugin.items),
            list(self.plugin.active_items)
        )
        self.assertEqual(
            self.plugin.item,
            list(self.plugin.active_items)[0]
        )

class ImagesetsReturnCorrectImageSizesAutomaticWidthAndAspectRatio(TestCase):

    def setUp(self):
        # create & save plugin
        self.plugin = ImageSetPlugin()
        self.plugin.save()
        # create & save images
        self.image1 = Image(_width=100, _height=100)
        self.image2 = Image(_width=200, _height=100)
        self.image3 = Image(_width=300, _height=100)
        self.image1.save()
        self.image2.save()
        self.image3.save()
        # create & save plugin items
        self.item1 = ImageSetItem(
            plugin=self.plugin,
            image=self.image1)
        self.item2 = ImageSetItem(
            plugin=self.plugin,
            image=self.image2)
        self.item3 = ImageSetItem(
            plugin=self.plugin,
            image=self.image3)
        self.item1.save()
        self.item2.save()
        self.item3.save()

    def test_imagelinkset_plugin_item_size(self):
        self.item1.active = self.item2.active = False
        self.item1.save()
        self.item2.save()
        self.plugin.items = self.plugin.active_items
        self.plugin.single_image()
        item = self.plugin.item
        self.assertEqual(
            (item.width, item.height),
            (500,166)
        )

    def test_imagelinkset_plugin_multiple_image_sizes(self):
        self.plugin.items = self.plugin.active_items
        self.plugin.multiple_images()
        item = self.plugin.items[0]
        self.assertEqual(
            (item.width, item.height),
            (152, 83)
        )

    def test_imagelinkset_plugin_slider_image_sizes(self):
        self.plugin.items = self.plugin.active_items
        self.plugin.slider()
        item = self.plugin.items[0]
        self.assertEqual(
            self.plugin.size,
            (500,250)
        )
        self.assertEqual(
            (item.width, item.height),
            (500, 250)
        )

    def test_imagelinkset_plugin_lightbox_single_image_sizes(self):
        self.plugin.items = self.plugin.active_items
        self.plugin.lightbox_single()
        item = self.plugin.items[0]
        self.assertEqual(
            (item.width, item.height),
            (480,480)
        )

class ImagesetsReturnCorrectImageSizesOneThirdWidthAndAspectRatio(TestCase):

    def setUp(self):
        # create & save plugin
        self.plugin = ImageSetPlugin()
        self.plugin.width = 33.3
        self.plugin.save()
        # create & save images
        self.image1 = Image(_width=100, _height=100)
        self.image2 = Image(_width=200, _height=100)
        self.image3 = Image(_width=300, _height=100)
        self.image1.save()
        self.image2.save()
        self.image3.save()
        # create & save plugin items
        self.item1 = ImageSetItem(
            plugin=self.plugin,
            image=self.image1)
        self.item2 = ImageSetItem(
            plugin=self.plugin,
            image=self.image2)
        self.item3 = ImageSetItem(
            plugin=self.plugin,
            image=self.image3)
        self.item1.save()
        self.item2.save()
        self.item3.save()

    def test_imagelinkset_plugin_item_size(self):
        self.item1.active = self.item2.active = False
        self.item1.save()
        self.item2.save()
        self.plugin.items = self.plugin.active_items
        self.plugin.single_image()
        item = self.plugin.item
        self.assertEqual(
            (item.width, item.height),
            (166, 55)
        )

    def test_imagelinkset_plugin_multiple_image_sizes(self):
        self.plugin.items = self.plugin.active_items
        self.plugin.multiple_images()
        item = self.plugin.items[0]
        self.assertEqual(
            (item.width, item.height),
            (41, 27)
        )

    def test_imagelinkset_plugin_slider_image_sizes(self):
        self.plugin.items = self.plugin.active_items
        self.plugin.slider()
        item = self.plugin.items[0]
        self.assertEqual(
            self.plugin.size,
            (166, 83)
        )
        self.assertEqual(
            (item.width, item.height),
            (166, 83)
        )

    def test_imagelinkset_plugin_lightbox_single_image_sizes(self):
        self.plugin.items = self.plugin.active_items
        self.plugin.lightbox_single()
        item = self.plugin.items[0]
        self.assertEqual(
            (item.width, item.height),
            (146, 146)
        )


class ImagesetsReturnCorrectImageSizesAutomaticWidthNativeRatio(TestCase):

    def setUp(self):
        # create & save plugin
        self.plugin = ImageSetPlugin()
        self.plugin.aspect_ratio = -1.0
        self.plugin.save()
        # create & save images
        self.image1 = Image(_width=100, _height=100)
        self.image2 = Image(_width=200, _height=100)
        self.image3 = Image(_width=300, _height=100)
        self.image1.save()
        self.image2.save()
        self.image3.save()
        # create & save plugin items
        self.item1 = ImageSetItem(
            plugin=self.plugin,
            image=self.image1)
        self.item2 = ImageSetItem(
            plugin=self.plugin,
            image=self.image2)
        self.item3 = ImageSetItem(
            plugin=self.plugin,
            image=self.image3)
        self.item1.save()
        self.item2.save()
        self.item3.save()

    def test_imagelinkset_plugin_item_size(self):
        self.item1.active = self.item2.active = False
        self.item1.save()
        self.item2.save()
        self.plugin.items = self.plugin.active_items
        self.plugin.single_image()
        item = self.plugin.item
        self.assertEqual(
            (item.width, item.height),
            (500, 166)
        )

    def test_imagelinkset_plugin_multiple_image_sizes(self):
        self.plugin.items = self.plugin.active_items
        self.plugin.multiple_images()
        item = self.plugin.items[0]
        self.assertEqual(
            (item.width, item.height),
            (152, 83)
        )

    def test_imagelinkset_plugin_slider_image_sizes(self):
        self.plugin.items = self.plugin.active_items
        self.plugin.slider()
        item = self.plugin.items[0]
        self.assertEqual(
            self.plugin.size,
            (500,250)
        )
        self.assertEqual(
            (item.width, item.height),
            (500, 250)
        )

    def test_imagelinkset_plugin_lightbox_single_image_sizes(self):
        self.plugin.items = self.plugin.active_items
        self.plugin.lightbox_single()
        item = self.plugin.items[0]
        self.assertEqual(
            (item.width, item.height),
            (480,480)
        )

class ImagesetsReturnCorrectImageSizesAutomaticForcedAspectRatio(TestCase):

    def setUp(self):
        # create & save plugin
        self.plugin = ImageSetPlugin()
        self.plugin.aspect_ratio = 1.333
        self.plugin.save()
        # create & save images
        self.image1 = Image(_width=100, _height=100)
        self.image2 = Image(_width=200, _height=100)
        self.image3 = Image(_width=300, _height=100)
        self.image1.save()
        self.image2.save()
        self.image3.save()
        # create & save plugin items
        self.item1 = ImageSetItem(
            plugin=self.plugin,
            image=self.image1)
        self.item2 = ImageSetItem(
            plugin=self.plugin,
            image=self.image2)
        self.item3 = ImageSetItem(
            plugin=self.plugin,
            image=self.image3)
        self.item1.save()
        self.item2.save()
        self.item3.save()

    def test_imagelinkset_plugin_item_size(self):
        self.item1.active = self.item2.active = False
        self.item1.save()
        self.item2.save()
        self.plugin.items = self.plugin.active_items
        self.plugin.single_image()
        item = self.plugin.item
        self.assertEqual(
            (item.width, item.height),
            (500, 375)
        )

    def test_imagelinkset_plugin_multiple_image_sizes(self):
        self.plugin.items = self.plugin.active_items
        self.plugin.multiple_images()
        item = self.plugin.items[0]
        self.assertEqual(
            (item.width, item.height),
            (152, 125)
        )

    def test_imagelinkset_plugin_slider_image_sizes(self):
        self.plugin.items = self.plugin.active_items
        self.plugin.slider()
        item = self.plugin.items[0]
        self.assertEqual(
            self.plugin.size,
            (500,375)
        )
        self.assertEqual(
            (item.width, item.height),
            (500, 375)
        )

    def test_imagelinkset_plugin_lightbox_single_image_sizes(self):
        self.plugin.items = self.plugin.active_items
        self.plugin.lightbox_single()
        item = self.plugin.items[0]
        self.assertEqual(
            (item.width, item.height),
            (480, 360)
        )


class ImageLinkSetItemTests(TestCase):
    def test_imagelinkset_image_size(self):
        item1 = ImageSetItem()
        item1.width, item1.height = 160, 30
        self.assertEquals(
            item1.image_size,
            u"160x30"
        )

    def test_imagelinkset_image_size_is_integers(self):
        item1 = ImageSetItem()
        item1.width, item1.height = 160.4, 30.33
        self.assertEquals(
            item1.image_size,
            u"160x30"
        )

class EmbeddedVideoTests(TestCase):
    def test_embedded_video_plugin_item(self):
        """
        test the output of the embedded video plugin
        """
        # create a placeholder
        placeholder = Placeholder(slot=u"some_slot")
        placeholder.save() # a good idea, if not strictly necessary

        # add the plugin
        plugin = add_plugin(placeholder, u"EmbeddedVideoPlugin", u"en",
            width = 1000.0,
            )
        plugin.save()

        # get the corresponding plugin instance
        instance = plugin.get_plugin_instance()[1]
        self.assertEquals(plugin.active_items.count(), 0)
        self.assertEquals(instance.render({}, plugin, placeholder), {})

        # add a video to the plugin - but it's not active
        item1 = EmbeddedVideoSetItem(
            plugin=plugin,
            service="vimeo",
            video_code="1234",
            video_title="one",
            active=False,
            inline_item_ordering=1
            )
        item1.save()
        self.assertEquals(instance.render({}, plugin, placeholder), {})
        self.assertEquals(instance.render_template, "null.html")

        # now the item is active
        item1.active=True
        item1.save()
        self.assertDictEqual(
            instance.render({}, plugin, placeholder),
            {
                'width': 100,
                'video': item1,
                'embeddedvideoset': plugin,
                'height': 75,
            }
            )
        self.assertEquals(instance.render_template, "embedded_video/vimeo.html")

        # change aspect_ratio
        item1.aspect_ratio=1.0
        item1.save()
        self.assertDictEqual(
            instance.render({}, plugin, placeholder),
            {
                'width': 100,
                'video': item1,
                'embeddedvideoset': plugin,
                'height': 100,
            }
            )

        # add a second video to the plugin
        item2 = EmbeddedVideoSetItem(
            plugin=plugin,
            service="vimeo",
            video_code="5678",
            video_title="two",
            )
        item2.save()
        self.assertEquals(list(plugin.active_items), [item2, item1])

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *

urlpatterns = patterns('',
    
    # news and events items
    (r"^arkestra-lightbox-item/(?P<id>\d+)/(?P<lightbox_max_dimension>\d+)/$", "arkestra_image_plugin.views.lightbox_item"),
    (r"^arkestra-lightbox-item/(?P<id>\d+)/$", "arkestra_image_plugin.views.lightbox_item"),
    )
                                                                                               
########NEW FILE########
__FILENAME__ = views
from __future__ import division

from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext

from easy_thumbnails.files import get_thumbnailer

from models import ImageSetItem

def lightbox_item(request, id=None, lightbox_max_dimension=400):     
    item = get_object_or_404(ImageSetItem, id=id)
    lightbox_max_dimension=int(lightbox_max_dimension)
    context = RequestContext(request)
    thumbnail_options = {} 

    # get width, height and lightbox_max_dimension
    lightbox_width, lightbox_height = item.image.width, item.image.height
    
    # get scaler value from width, height
    if max([lightbox_width, lightbox_height]) > lightbox_max_dimension:
        scaler = min(lightbox_max_dimension / dimension for dimension in [lightbox_width, lightbox_height]) 
        # set size of lightbox using scaler 
        item.width, item.height = lightbox_width * scaler, lightbox_height * scaler        
    else:
        item.width, item.height = lightbox_width, lightbox_height

    item.width, item.height = int(item.width), int(item.height)
                        
    thumbnail_options.update({
        'size': (item.width, item.height), 
        'subject_location': item.image.subject_location,
        })

    # get thumbnailer object for the image
    thumbnailer = get_thumbnailer(item.image)

    # apply options and get url
    item.large_url = thumbnailer.get_thumbnail(thumbnail_options).url  

    return render_to_response(
        "arkestra_image_plugin/lightbox_item.html",
        {
        "imageset_item":item,
        },
        RequestContext(request),
        )

########NEW FILE########
__FILENAME__ = admin
from models import Insert
from django import forms


class InsertForm(forms.ModelForm):
    class Meta:
        model = Insert
        widgets = {'description': forms.Textarea(
              attrs={'cols':80, 'rows':5,},
            ),
        }

from cms.admin.placeholderadmin import PlaceholderAdmin # if it's at the start of the file, it breaks imports somehow

from django.contrib import admin


class InsertAdmin(PlaceholderAdmin):
    pass

admin.site.register(Insert, InsertAdmin)

########NEW FILE########
__FILENAME__ = admin_mixins
from django.db.models import ForeignKey
from django import forms
from django.contrib.admin import SimpleListFilter
from django.utils.translation import ugettext_lazy as _
from django.utils.safestring import mark_safe

from cms.utils import cms_static_url

from widgetry import fk_lookup
from widgetry.tabs.placeholderadmin import ModelAdminWithTabsAndCMSPlaceholder

from contacts_and_people.models import Entity
from links.utils import get_or_create_external_link


class AutocompleteMixin(object):
    class Media:
        js = [
            cms_static_url('js/libs/jquery.ui.core.js'),
        ]
        css = {
            'all': ('/static/jquery/themes/base/ui.all.css',)
        }

    def formfield_for_dbfield(self, db_field, **kwargs):
        """
        Overrides the default widget for Foreignkey fields if they are
        specified in the related_search_fields class attribute.
        """
        if (isinstance(db_field, ForeignKey) and
                db_field.name in self.related_search_fields):
            kwargs['widget'] = fk_lookup.FkLookup(db_field.rel.to)

        return super(AutocompleteMixin, self).formfield_for_dbfield(
            db_field,
            **kwargs
            )


# makes the request available to the admin form
# useful for using the messages framework, and required for admin that
# uses Arkestra's external_url functionality
class SupplyRequestMixin(object):
    def get_form(self, request, obj=None, **kwargs):
        form_class = super(SupplyRequestMixin, self).get_form(
            request, obj, **kwargs
            )
        form_class.request = request
        return form_class


class HostedByFilter(SimpleListFilter):
    title = _('hosting Entity')
    parameter_name = 'entity'

    def lookups(self, request, model_admin):
        return (
            ('my', _('My entities')),
            ('nobody', _('None')),
        )

    def queryset(self, request, queryset):
        entities = Entity.objects.all()
        myentities = entities.filter(people__in=request.user.person_user.all())
        if self.value() == 'my':
            return queryset.filter(hosted_by__in=myentities)
        if self.value() == 'nobody':
            return queryset.exclude(hosted_by__in=entities)

fieldsets = {
    'basic': ['', {'fields': ['title',  'short_title', 'summary']}],
    'host': ['', {'fields': ['hosted_by']}],
    'image': ['', {'fields': ['image']}],
    'publishing_control': [
        'Publishing control', {'fields': ['published', 'in_lists']}
        ],
    'body':  ['', {
        'fields': ['body'],
        'classes': ['plugin-holder', 'plugin-holder-nopage'],
        }],
    'where_to_publish': ['', {'fields': ['publish_to']}],
    'people': ['', {'fields': ['please_contact']}],
    'date': ['', {'fields': ['date']}],
    'importance': ['', {'fields': ['importance']}],
    'url': [
        'If this is an external item',
        {'fields': ['external_url', 'input_url']}
        ],
    'slug': ['If this is an internal item', {'fields': ['slug']}],
    'location': ['', {'fields': ['precise_location', 'access_note']}],
    'address_report': ['', {'fields': ['address_report']}],
    'email': ['', {'fields': ['email']}],
    }


# WidgetifiedModelAdmin provides some hooks and widgets for the more
# fully-featured admin, such as tabs, autocomplete search
class WidgetifiedModelAdmin(
        SupplyRequestMixin,
        AutocompleteMixin,
        ModelAdminWithTabsAndCMSPlaceholder,
        ):

    def _media(self):
        return super(
            AutocompleteMixin,
            self
        ).media + super(
            ModelAdminWithTabsAndCMSPlaceholder,
            self
        ).media
    media = property(_media)

    def formfield_for_manytomany(self, db_field, request, **kwargs):
        if db_field.name == "publish_to":
            kwargs["queryset"] = Entity.objects.filter(
                website__published=True
                )
        return super(AutocompleteMixin, self).formfield_for_manytomany(
            db_field, request, **kwargs
            )


# GenericModelAdmin provides extra attributes
class GenericModelAdmin(WidgetifiedModelAdmin):
    tabs = (
        ['Basic', {
            'fieldsets': (
                fieldsets["basic"],
                fieldsets["host"],
                fieldsets["image"],
                fieldsets["publishing_control"],
                ),
            }],
        ['Body', {'fieldsets': [fieldsets["body"]]}],
        ['Where to Publish', {'fieldsets': [fieldsets["where_to_publish"]]}],
        ['Related people', {'fieldsets': [fieldsets["people"]]}],

    )

    filter_horizontal = (
        'please_contact',
        'publish_to',
        )

    search_fields = ['title', 'short_title', 'summary']
    related_search_fields = ['hosted_by']


class InputURLMixin(forms.ModelForm):
    # really this is simply acting as a base admin form for various models
    # but not just GenericModels:
    #
    #   PersonForm(InputURLMixin):
    #   EntityForm(InputURLMixin)
    #   LinkItemForm(InputURLMixin)
    #   GenericModelForm(InputURLMixin)
    #       NewsAndEventsForm(GenericModelForm)
    #           NewsArticleForm(NewsAndEventsForm)
    #           Event(NewsAndEventsForm)
    #       VacancyStudentshipForm(GenericModelForm)
    #           VacancyForm(VacancyStudentshipForm)
    #           StudentshipForm(VacancyStudentshipForm)
    #
    # when https://code.djangoproject.com/ticket/19617 is fixed
    # we can do something nicer

    input_url = forms.CharField(
        max_length=255, required=False,
        help_text=u"""
            <strong>External URL</strong> not found above? Enter a new one.""",
        )


class GenericModelForm(InputURLMixin):
    class Meta:
        widgets = {'summary': forms.Textarea(attrs={'cols': 80, 'rows': 2})}

    def clean(self):
        super(GenericModelForm, self).clean()

        # create the short_title automatically if necessary
        if not self.cleaned_data["short_title"] and \
                self.cleaned_data.get("title"):
            if len(self.cleaned_data["title"]) > 70:
                raise forms.ValidationError("""
                    Please provide a short (less than 70 characters) version
                    of the Title for the Short title field.
                    """)
            else:
                self.cleaned_data["short_title"] = self.cleaned_data["title"]

        # check ExternalLink-related issues
        self.cleaned_data["external_url"] = get_or_create_external_link(
            self.request,
            self.cleaned_data.get("input_url", None),  # a manually entered url
            # a url chosen with autocomplete
            self.cleaned_data.get("external_url", None),
            self.cleaned_data.get("title"),  # link title
            self.cleaned_data.get("summary"),  # link description
            )

        # misc checks
        if not self.cleaned_data["external_url"]:
            if not self.cleaned_data["hosted_by"]:
                raise forms.ValidationError("""
                    A Host is required except for items on external websites -
                    please provide either a Host or an External URL
                    """)
            # must have body or url in order to be published
            if not self.instance and self.instance.body.cmsplugin_set.all():
            # if not self.cleaned_data["body"]:
                message = u"""
                    This will not be published until either an external URL or
                    Plugin has been added. Perhaps you ought to do that now.
                    """
                messages.add_message(self.request, messages.WARNING, message)

        return self.cleaned_data


class ButtonLinkWidget(forms.widgets.Widget):
    def __init__(self, attrs=None, *args, **kwargs):
        super(ButtonLinkWidget, self).__init__(attrs, *args, **kwargs)

    def render(self, name, value, attrs=None):
        return mark_safe(u"""
            <input type="button" value="%s" onclick="window.open(\'%s\')" />
            """ % (
            value, self.attrs.get("link")
            )
        )

########NEW FILE########
__FILENAME__ = models
'''
Created on Sep 3, 2009

@author: stefanfoulis
'''

########NEW FILE########
__FILENAME__ = tabs
from django import forms, template
from django.contrib.admin import helpers
from django.contrib.admin.options import ModelAdmin
from django.contrib.admin.util import unquote
from django.contrib.contenttypes.models import ContentType
from django.core.exceptions import PermissionDenied
from django.db import models, transaction
from django.forms.formsets import all_valid
from django.http import Http404
from django.shortcuts import render_to_response
from django.utils.encoding import force_unicode
from django.utils.html import escape
from django.utils.safestring import mark_safe
from django.utils.translation import ugettext as _


"""

tabs = (
    ('Tab name', {'classes': ('specialCssClass',),
                  'fieldsets': (
                      ('Fieldset Name', {
                                      'fields': ('user', 'name', 'title',),
                                      'classes': ('collapse',)
                                  }),
                      ('Fieldset Name 2', {
                                      'fields': ('user', 'name', 'title',),
                                      'classes': ('collapse',)
                                  }),
                        ),
                 'inlines': (InlineThingy, OtherInlineThingy,)
                 }),
                    
    ('Other Tab Name', {'classes'
)

"""



class Tabset(object):
    '''
    Like AdminForm in a normal setup, but provides Tab instances instead of formsets.
   
    '''
    has_tabs = True
    def __init__(self, form, tabs, prepopulated_fields):
        self.form = form
        self.tabs = []
        for name, options in tabs:
            self.tabs.append(Tab(self.form, name, **options))
        
        self.prepopulated_fields = [{
            'field': form[field_name],
            'dependencies': [form[f] for f in dependencies]
        } for field_name, dependencies in prepopulated_fields.items()]

    def __iter__(self):
        for tab in self.tabs:
            yield tab
    
    def first_field(self):
        return None
    
    def _media(self):
        media = self.form.media
        for tab in self:
            media = media + tab.media
        return media
    media = property(_media)
    
    def get_tab_that_has_inline(self, inline_class_name):
        for tab in self:
            if inline_class_name in tab.inline_names:
                return tab
        return None
        
class Tab(helpers.AdminForm):
    '''
    A subclass of AdminForm. It adds a name and a description and additionally
    also contains the InlineFormsets
    '''
    def __init__(self, form, name=None, fieldsets=(), inlines=(), classes=(), description=None):
        self.form = form
        self.name = name
        # TODO: fieldsets should also be able to contain InlineFormsets
        self.fieldsets = helpers.normalize_fieldsets(fieldsets)
        self.inline_names = inlines
        self.inlines = []
        
        self.classes = u' '.join(classes)
        self.description = description
    
    def has_errors(self):
        if not hasattr(self,'_has_errors'):
            self._has_errors = False
            for inline in self.inlines:
                if inline.formset.is_bound and not inline.formset.is_valid():
                    self._has_errors = True
                    break
            for fieldset in self:
                for fieldline in fieldset:
                    for field in fieldline.fields:
                        if self.form[field].errors:
                            self._has_errors = True
                            break
        return self._has_errors
            
    def _media(self):
        # formset media is already handled in the view
        return super(Tab, self)._media()
    media = property(_media)
            
                      
        

class ModelAdminWithTabs(ModelAdmin):
    tabs = []
    def add_view(self, request, form_url='', extra_context=None):
        """
        Like the original add_view from ModelAdmin. Alterations are marked
        with 
        # ----start
        # ----end
        """
        
        "The 'add' admin view for this model."
        model = self.model
        opts = model._meta

        if not self.has_add_permission(request):
            raise PermissionDenied

        ModelForm = self.get_form(request)
        formsets = []
        if request.method == 'POST':
            form = ModelForm(request.POST, request.FILES)
            if form.is_valid():
                form_validated = True
                new_object = self.save_form(request, form, change=False)
            else:
                form_validated = False
                new_object = self.model()
            prefixes = {}
            for FormSet in self.get_formsets(request):
                prefix = FormSet.get_default_prefix()
                prefixes[prefix] = prefixes.get(prefix, 0) + 1
                if prefixes[prefix] != 1:
                    prefix = "%s-%s" % (prefix, prefixes[prefix])
                formset = FormSet(data=request.POST, files=request.FILES,
                                  instance=new_object,
                                  save_as_new=request.POST.has_key("_saveasnew"),
                                  prefix=prefix)
                formsets.append(formset)
            if all_valid(formsets) and form_validated:
                self.save_model(request, new_object, form, change=False)
                form.save_m2m()
                for formset in formsets:
                    self.save_formset(request, form, formset, change=False)

                self.log_addition(request, new_object)
                return self.response_add(request, new_object)
        else:
            # Prepare the dict of initial data from the request.
            # We have to special-case M2Ms as a list of comma-separated PKs.
            initial = dict(request.GET.items())
            for k in initial:
                try:
                    f = opts.get_field(k)
                except models.FieldDoesNotExist:
                    continue
                if isinstance(f, models.ManyToManyField):
                    initial[k] = initial[k].split(",")
            form = ModelForm(initial=initial)
            prefixes = {}
            for FormSet in self.get_formsets(request):
                prefix = FormSet.get_default_prefix()
                prefixes[prefix] = prefixes.get(prefix, 0) + 1
                if prefixes[prefix] != 1:
                    prefix = "%s-%s" % (prefix, prefixes[prefix])
                formset = FormSet(instance=self.model(), prefix=prefix)
                formsets.append(formset)
        
        # --start--
        adminForm = Tabset(form, self.tabs, self.prepopulated_fields)
        # --original--
        # adminForm = helpers.AdminForm(form, list(self.get_fieldsets(request)), self.prepopulated_fields)
        # --end--
        media = self.media + adminForm.media
        
        # --start-- (identical to the one in change_view, except for not passing obj in get_fieldsets)
        inline_admin_formsets = []
        for inline, formset in zip(self.inline_instances, formsets):
            fieldsets = list(inline.get_fieldsets(request))
            inline_admin_formset = helpers.InlineAdminFormSet(inline, formset, fieldsets)
            
            tab = adminForm.get_tab_that_has_inline(inline.__class__.__name__)
            if not tab==None:
                tab.inlines.append(inline_admin_formset)
            else:
                inline_admin_formsets.append(inline_admin_formset)
            media = media + inline_admin_formset.media
        # --original--
        '''
        inline_admin_formsets = []
        for inline, formset in zip(self.inline_instances, formsets):
            fieldsets = list(inline.get_fieldsets(request))
            inline_admin_formset = helpers.InlineAdminFormSet(inline, formset, fieldsets)
            inline_admin_formsets.append(inline_admin_formset)
            media = media + inline_admin_formset.media
        '''
        # --end--
        
        context = {
            'title': _('Add %s') % force_unicode(opts.verbose_name),
            'adminform': adminForm,
            'is_popup': request.REQUEST.has_key('_popup'),
            'show_delete': False,
            'media': mark_safe(media),
            'inline_admin_formsets': inline_admin_formsets,
            'errors': helpers.AdminErrorList(form, formsets),
            'root_path': self.admin_site.root_path,
            'app_label': opts.app_label,
        }
        context.update(extra_context or {})
        return self.render_change_form(request, context, form_url=form_url, add=True)
    add_view = transaction.commit_on_success(add_view)
    
    def change_view(self, request, object_id, extra_context=None):
        """
        Like the original change_view from ModelAdmin. Alterations are marked
        with 
        # ----start
        # ----end
        """
        
        "The 'change' admin view for this model."
        model = self.model
        opts = model._meta

        try:
            obj = self.queryset(request).get(pk=unquote(object_id))
        except model.DoesNotExist:
            # Don't raise Http404 just yet, because we haven't checked
            # permissions yet. We don't want an unauthenticated user to be able
            # to determine whether a given object exists.
            obj = None

        if not self.has_change_permission(request, obj):
            raise PermissionDenied

        if obj is None:
            raise Http404(_('%(name)s object with primary key %(key)r does not exist.') % {'name': force_unicode(opts.verbose_name), 'key': escape(object_id)})

        if request.method == 'POST' and request.POST.has_key("_saveasnew"):
            return self.add_view(request, form_url='../add/')

        ModelForm = self.get_form(request, obj)
        formsets = []
        if request.method == 'POST':
            form = ModelForm(request.POST, request.FILES, instance=obj)
            if form.is_valid():
                form_validated = True
                new_object = self.save_form(request, form, change=True)
            else:
                form_validated = False
                new_object = obj
            prefixes = {}
            for FormSet in self.get_formsets(request, new_object):
                prefix = FormSet.get_default_prefix()
                prefixes[prefix] = prefixes.get(prefix, 0) + 1
                if prefixes[prefix] != 1:
                    prefix = "%s-%s" % (prefix, prefixes[prefix])
                formset = FormSet(request.POST, request.FILES,
                                  instance=new_object, prefix=prefix)
                formsets.append(formset)

            if all_valid(formsets) and form_validated:
                self.save_model(request, new_object, form, change=True)
                form.save_m2m()
                for formset in formsets:
                    self.save_formset(request, form, formset, change=True)

                change_message = self.construct_change_message(request, form, formsets)
                self.log_change(request, new_object, change_message)
                return self.response_change(request, new_object)

        else:
            form = ModelForm(instance=obj)
            prefixes = {}
            for FormSet in self.get_formsets(request, obj):
                prefix = FormSet.get_default_prefix()
                prefixes[prefix] = prefixes.get(prefix, 0) + 1
                if prefixes[prefix] != 1:
                    prefix = "%s-%s" % (prefix, prefixes[prefix])
                formset = FormSet(instance=obj, prefix=prefix)
                formsets.append(formset)
        # --start--
        adminForm = Tabset(form, self.tabs, self.prepopulated_fields)
        # --original--
        # adminForm = helpers.AdminForm(form, self.get_fieldsets(request, obj), self.prepopulated_fields)
        # --end--
        media = self.media + adminForm.media
        
        # --start--
        inline_admin_formsets = []
        for inline, formset in zip(self.inline_instances, formsets):
            fieldsets = list(inline.get_fieldsets(request, obj))
            inline_admin_formset = helpers.InlineAdminFormSet(inline, formset, fieldsets)
            
            tab = adminForm.get_tab_that_has_inline(inline.__class__.__name__)
            if not tab==None:
                tab.inlines.append(inline_admin_formset)
            else:
                inline_admin_formsets.append(inline_admin_formset)
            media = media + inline_admin_formset.media
        # --original--
        '''
        inline_admin_formsets = []
        for inline, formset in zip(self.inline_instances, formsets):
            fieldsets = list(inline.get_fieldsets(request, obj))
            inline_admin_formset = helpers.InlineAdminFormSet(inline, formset, fieldsets)
            inline_admin_formsets.append(inline_admin_formset)
            
            media = media + inline_admin_formset.media
        '''
        # --end--   
        
        context = {
            'title': _('Change %s') % force_unicode(opts.verbose_name),
            'adminform': adminForm,
            'object_id': object_id,
            'original': obj,
            'is_popup': request.REQUEST.has_key('_popup'),
            'media': mark_safe(media),
            'inline_admin_formsets': inline_admin_formsets,
            'errors': helpers.AdminErrorList(form, formsets),
            'root_path': self.admin_site.root_path,
            'app_label': opts.app_label,
        }
        context.update(extra_context or {})
        return self.render_change_form(request, context, change=True, obj=obj)
    change_view = transaction.commit_on_success(change_view)
    
    def render_change_form(self, request, context, add=False, change=False, form_url='', obj=None):
        opts = self.model._meta
        app_label = opts.app_label
        ordered_objects = opts.get_ordered_objects()
        context.update({
            'add': add,
            'change': change,
            'has_add_permission': self.has_add_permission(request),
            'has_change_permission': self.has_change_permission(request, obj),
            'has_delete_permission': self.has_delete_permission(request, obj),
            'has_file_field': True, # FIXME - this should check if form or formsets have a FileField,
            'has_absolute_url': hasattr(self.model, 'get_absolute_url'),
            'ordered_objects': ordered_objects,
            'form_url': mark_safe(form_url),
            'opts': opts,
            'content_type_id': ContentType.objects.get_for_model(self.model).id,
            'save_as': self.save_as,
            'save_on_top': self.save_on_top,
            'root_path': self.admin_site.root_path,
        })
        context_instance = template.RequestContext(request, current_app=self.admin_site.name)
        return render_to_response(self.change_form_template or [
            "admin/%s/%s/tabbed_change_form.html" % (app_label, opts.object_name.lower()),
            "admin/%s/tabbed_change_form.html" % app_label,
            "admin/tabbed_change_form.html"
        ], context, context_instance=context_instance)
    
    def _declared_fieldsets(self):
        if self.tabs:
            fieldsets = []
            for name, tab in self.tabs:
                fieldsets += list(tab.get('fieldsets', []))
            return fieldsets
        elif self.fieldsets:
            return self.fieldsets
        elif self.fields:
            return [(None, {'fields': self.fields})]
        return None
    declared_fieldsets = property(_declared_fieldsets)

########NEW FILE########
__FILENAME__ = context_processors
from arkestra_utilities.settings import PAGE_TITLE_HEADING_LEVEL, IN_BODY_HEADING_LEVEL, IN_BODY_HEADING_LEVEL, MULTIPLE_ENTITY_MODE

def arkestra_templates(request):
    """
    Adds useful Arkestra information to the context.
    """
    return {
        'PAGE_TITLE_HEADING_LEVEL': PAGE_TITLE_HEADING_LEVEL,
        'IN_BODY_HEADING_LEVEL': IN_BODY_HEADING_LEVEL,
        "SHOW_EVENT_TYPES": IN_BODY_HEADING_LEVEL,
        "MULTIPLE_ENTITY_MODE": MULTIPLE_ENTITY_MODE,
        }

########NEW FILE########
__FILENAME__ = generic_lister
import six

from datetime import datetime

from django.db.models import Q

from django_easyfilters import FilterSet

from arkestra_utilities.settings import (
    MULTIPLE_ENTITY_MODE, PLUGIN_HEADING_LEVEL_DEFAULT
    )
from generic_models import ArkestraGenericModel


class ArkestraGenericFilterSet(FilterSet):
    template_file = "django-easyfilters/arkestra_default.html"
    fields = []


class ArkestraGenericList(object):

    limit_to = None
    order_by = ""
    group_dates = True

    entity = None
    type = "plugin"
    list_format = "vertical"
    request = None

    item_collections = []
    other_item_kinds = []
    model = ArkestraGenericModel
    item_template = "arkestra/generic_list_item.html"

    def __init__(self, **kwargs):
        vars(self).update(kwargs)
        self.now = datetime.now()

    def build(self):
        self.items = self.model.objects.listable_objects()

        # other, optional methods that a sub-class might invoke:
        #
        # select items for this context:
        # self.set_items_for_entity() or
        # set_items_for_person
        #
        # create a collection of other items (archived, forthcoming, etc):
        # self.archived_items = self.items
        #
        # trim and re-order the list; apply extra date information:
        # self.remove_expired()
        # self.re_order_by_importance()
        # self.truncate_items()
        # self.set_show_when()

    def set_items_for_entity(self):
        # usually, the context for lists is the Entity we're publishing the
        # lists for, but this could be Place or Person for Events, for example
        # takes:    self.items
        # sets:     self.items
        if MULTIPLE_ENTITY_MODE and self.entity:
            self.items = self.items.filter(
                Q(hosted_by=self.entity) | Q(publish_to=self.entity)
                ).distinct()

    def set_items_for_person(self):
        self.items = self.items.filter(please_contact=self.person)

    def create_item_collections(self):
        # usually, we can simply pass along the items we have, but sometimes
        # we will need to obtain lists of particular sets of the items - for
        # example, we need various collections to generate Events menus
        # self.other_item_kinds lists these
        # takes:    self.items
        # sets:     self.items (the main set, always)
        #           self.forthcoming_events (for example, optional)
        #
        pass

    # the following methods are optional; if required, they will be called by
    # self.additional_list_processing()

    # methods for lists that filter and search

    def filter_on_search_terms(self):
        # check each search_field in the filter
        for search_field in self.search_fields:
            field_name = search_field["field_name"]

            # if the field_name's in the URL
            if field_name in self.request.GET:

                # a query dict could contain multiple identical keys
                # but we don't care, we'll only ever work with one
                # and we will discard any others
                query = self.request.GET[field_name]

                # record the URL's query string so we can put it back
                search_field["value"] = query

                q_object = Q()
                for search_key in search_field["search_keys"]:
                    lookup = {search_key: query}
                    q_object |= Q(**lookup)
                self.items = self.items.distinct().filter(q_object)

        # the hidden search fields are where we record query strings from
        # django-easy-filter choices
        self.hidden_search_fields = []

        for field in self.filter_set.fields:
            if isinstance(field, six.string_types):
                key = field
            else:
                key = field[0]
            if key not in [
                search_field["field_name"]
                    for search_field in self.search_fields]:
                for query_value in self.request.GET.getlist(key):
                    # the field_name and query_value populate some <input>
                    # elements
                    self.hidden_search_fields.append(
                        {
                            "field_name": key,
                            "value": query_value,
                        })

    # other operations on the list of items
    # all take and set self.items

    def remove_expired(self):
        # in some lists, items that are too old should be removed
        pass

    def re_order_by_importance(self):
        # in some lists, items should be re-ordered
        # acts on self.order_by
        pass

    def truncate_items(self):
        # in some lists, we only ask for a certain number of items
        # acts on self.limit_to
        if self.order_by == "importance/date":
            if self.items and len(self.items) > self.limit_to:
                self.items = self.items[:self.limit_to]

        elif self.items.count() > self.limit_to:
            self.items = self.items[:self.limit_to]

    # methods that inspect self.items and set something useful

    def set_show_when(self):
        # in some lists, we regroup by date
        # we only show date groups when warranted
        no_of_get_whens = len(set(
            getattr(item, "get_when", None)
            for item in self.items
            ))
        self.show_when = self.group_dates and not (
            "horizontal" in self.list_format or
            no_of_get_whens < 2
            )

    def other_items(self):
        # build a list of links to relevant other items
        # self.other_item_kinds lists these
        # see NewsList.other_items() for an example
        return []

    def is_showable(self):
        try:
            if self.items.exists():
                return True
        except AttributeError:
            if self.items:
                return True
        if self.other_items():
            return True


class ArkestraGenericFilterList(ArkestraGenericList):
    filter_set = ArkestraGenericFilterSet

    def build(self):
        self.items = self.model.objects.listable_objects()
        self.filter_on_search_terms()
        self.itemfilter = self.filter_set(self.items, self.request.GET)


class ArkestraGenericLister(object):

    # attributes that must be passed on to the Lists
    limit_to = None
    order_by = "date"
    item_format = "details image"
    group_dates = True  # if set_show_when() is used

    # attributes that the Lists don't need
    entity = None
    layout = ""
    heading_level = PLUGIN_HEADING_LEVEL_DEFAULT
    list_format = "vertical"

    # may be required by in GenericList

    # also always required
    display = ""    # what sets of items - i.e. models - to display
    lists = None    # the lists created for each
    request = None

    def __init__(self, **kwargs):
        vars(self).update(kwargs)

        kwargs.setdefault("limit_to", self.limit_to)
        kwargs.setdefault("order_by", self.order_by)
        kwargs.setdefault("item_format", self.item_format)
        kwargs.setdefault("group_dates", self.group_dates)

        self.lists = []

        for kind, listclass in self.listkinds:
            if kind in self.display:

                # any attributes supplied as kwargs
                list_ = listclass(**kwargs)

                list_.build()
                if list_.is_showable():
                    self.lists.append(list_)

        self.determine_layout_settings()
        self.set_layout_classes()

    def other_items(self):
        pass

    def determine_layout_settings(self):
        """
        Sets:
            list_format
        """
        # set columns for horizontal lists
        if "horizontal" in self.list_format:
            self.list_format = "row columns%s %s" % (
                self.limit_to,
                self.list_format
                )

            # loop over the list of items
            for list_ in self.lists:
                # list_.items is itself a Python list
                # give each a "column" CSS class
                for item in list_.items:
                    item.column_class = "column"
                # give the first (if it exists) a "firstcolumn" CSS class
                if list_.items:
                    list_.items[0].column_class += " firstcolumn"

                    # coercing to list() prevents a possible attempt to
                    # apply negative slicing to a queryset
                    # See https://github.com/evildmp/Arkestra/issues/111
                    list(list_.items)[-1].column_class += " lastcolumn"

        elif "vertical" in self.list_format:
            self.list_format = "vertical"

    def set_layout_classes(self):
        """
        Lays out the plugin's divs
        """
        self.row_class = "row"
        # if divs will be side-by-side
        if self.layout == "sidebyside" and len(self.lists) > 1:
            self.row_class = self.row_class+" columns" + str(len(self.lists))
            self.lists[0].div_class = "column firstcolumn"
            self.lists[-1].div_class = "column lastcolumn"

########NEW FILE########
__FILENAME__ = generic_models
from django.utils.translation import ugettext_lazy as _
from django.db import models
from django.contrib.contenttypes.models import ContentType

from django.conf import settings

from cms.models.fields import PlaceholderField

from filer.fields.image import FilerImageField

from arkestra_utilities.settings import (
    PLUGIN_HEADING_LEVELS, PLUGIN_HEADING_LEVEL_DEFAULT
    )
from arkestra_utilities.managers import ArkestraGenericModelManager

from links.models import ObjectLink

from contacts_and_people.models import Entity, Person


class ArkestraGenericModel(models.Model):
    class Meta:
        abstract = True

    objects = ArkestraGenericModelManager()

    # needs to be overriden in the sub-class with the appropriate string
    # for example: "contact-entity"
    # see link_to_more() below
    auto_page_view_name = ""

    # core fields
    title = models.CharField(
        max_length=255,
        help_text="e.g. Outrage as man bites dog in unprovoked attack"
        )
    short_title = models.CharField(
        max_length=255,  null=True, blank=True,
        help_text=u"e.g. Man bites dog (if blank, will be copied from Title)"
        )
    summary = models.TextField(
        verbose_name="Summary",
        null=False, blank=False,
        help_text="""
            e.g. Cardiff man arrested in latest wave of man-on-dog violence
            (maximum two lines)"""
        )
    published = models.BooleanField(
        default=False, verbose_name=_(u"Is published"), db_index=True,
        help_text=_(u"Select when ready to be published")
        )
    in_lists = models.BooleanField(
        _(u"Display in lists"), default=True, db_index=True,
        help_text=_(u"If deselected, this item will not appear in lists")
        )
    body = PlaceholderField(
        'body', help_text="Not used or required for external items"
        )
    image = FilerImageField(on_delete=models.SET_NULL, null=True, blank=True)

    # universal plugin fields
    hosted_by = models.ForeignKey(
        Entity,
        on_delete=models.SET_DEFAULT,
        default=Entity.objects.default_entity_id(),
        related_name='%(class)s_hosted_events', null=True, blank=True,
        help_text=u"The entity responsible for publishing this item")
    publish_to = models.ManyToManyField(
        Entity, verbose_name="Also publish to",
        null=True, blank=True,
        related_name="%(class)s_publish_to",
        help_text=u"Use sensibly",
        )
    please_contact = models.ManyToManyField(
        Person,
        related_name='%(class)s_person',
        help_text=u"The person to whom enquiries should be directed",
        null=True, blank=True
        )
    IMPORTANCES = (
        (0, u"Normal"),
        (1, u"More important"),
        (10, u"Most important"),
        )
    importance = models.PositiveIntegerField(
        null=True, blank=False,
        default=0, choices=IMPORTANCES,
        help_text=u"Important items will be featured in lists")

    def __unicode__(self):
        return self.short_title

    @property
    def has_expired(self):
        # the item is too old to appear in current lists, and should only be
        # listed in archives
        return False

    @property
    # if they are not being gathered together, mark them as important
    def get_importance(self):
        if self.importance:
            return "important"
        else:
            return ""

    @property
    def get_hosted_by(self):
        return self.hosted_by or Entity.objects.base_entity()

    # when looking at an instance of this model, we can ask for a link to
    # more of the same for the same entity
    def link_to_more(self):
        if self.get_hosted_by:
            return self.get_hosted_by.get_auto_page_url(
                self.auto_page_view_name
                )
        else:
            return ""

    @property
    def get_template(self):
        if self.get_hosted_by:
            return self.get_hosted_by.get_template()
        else:
            return settings.CMS_TEMPLATES[0][0]

    @property
    def get_entity(self):
        """
        Real-world information, can be None
        """
        return self.hosted_by or \
            Entity.objects.get(id=Entity.objects.base_entity())

    @property
    def links(self):
        model = ContentType.objects.get_for_model(self)
        links = ObjectLink.objects.filter(
            content_type__pk=model.id,
            object_id=self.id).order_by('destination_content_type')
        return links

    @property
    def external_url(self):
        # if the inheriting model doesn't have an external_url attribute,
        # we'll give it a None one just in case this is needed
        return None

    @property
    def is_uninformative(self):
        if (
            self.external_url or self.body.cmsplugin_set.all()
            or self.please_contact.all() or self.links
            ):

            return False
        else:
            return True


class ArkestraGenericPluginOptions(models.Model):
    class Meta:
        abstract = True

    entity = models.ForeignKey(
        Entity,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        help_text="Leave blank for autoselect",
        related_name="%(class)s_plugin")
    LAYOUTS = (
        ("sidebyside", u"Side-by-side"),
        ("stacked", u"Stacked"),
        )
    layout = models.CharField(
        "Plugin layout",
        max_length=25,
        choices=LAYOUTS, default="sidebyside"
        )
    FORMATS = (
        ("title", u"Title only"),
        ("details image", u"Details"),
        )
    format = models.CharField(
        "Item format", max_length=25, choices=FORMATS,
        default="details image"
        )
    heading_level = models.PositiveSmallIntegerField(
        choices=PLUGIN_HEADING_LEVELS,
        default=PLUGIN_HEADING_LEVEL_DEFAULT
        )
    ORDERING = (
        ("date", u"Date alone"),
        ("importance/date", u"Importance & date"),
        )
    order_by = models.CharField(
        max_length=25, choices=ORDERING, default="importance/date"
        )
    LIST_FORMATS = (
        ("vertical", u"Vertical"),
        ("horizontal", u"Horizontal"),
        )
    list_format = models.CharField(
        "List format", max_length=25,
        choices=LIST_FORMATS, default="vertical"
        )
    group_dates = models.BooleanField("Show date groups", default=True)
    limit_to = models.PositiveSmallIntegerField(
        "Maximum number of items",
        default=5, null=True, blank=True,
        help_text=u"Leave blank for no limit"
        )

    def sub_heading_level(self):
        # requires that we change 0 to None in the database
        if self.heading_level is None:
            # this means the user has chosen "No heading"
            # we need to give sub_heading_level a value
            return 6
        else:
            # so if headings are h3, sub-headings are h4
            return self.heading_level + 1


class ArkestraGenericPluginForm(object):
    def clean(self):
        super(ArkestraGenericPluginForm, self).clean()
        if "horizontal" in self.cleaned_data["list_format"]:
            self.cleaned_data["order_by"] = "importance/date"
            self.cleaned_data["format"] = "details image"
            self.cleaned_data["layout"] = "stacked"
            self.cleaned_data["group_dates"] = False
            if self.cleaned_data["limit_to"] > 3:
                self.cleaned_data["limit_to"] = 3
            if self.cleaned_data["limit_to"] < 2:
                self.cleaned_data["limit_to"] = 2
        # 0 is a silly number, and interferes with the way we calculate later
        if self.cleaned_data["limit_to"] == 0:
            self.cleaned_data["limit_to"] = None
        return self.cleaned_data


class ArkestraGenericPlugin(object):
    text_enabled = True
    admin_preview = False
    # default render_template - change it in your ArkestraGenericPlugin if
    # required
    render_template = "arkestra/generic_lister.html"

    def icon_src(self, instance):
        return "/static/plugin_icons/generic.png"

########NEW FILE########
__FILENAME__ = import_free_model_mixins
# this file exists to help avoid circular imports - it imports nothing from
# Arkestra

from django.db import models

class ArkestraGenericPluginItemManager(models.Manager):
    def active_items(self):
        return self.filter(active=True)
        
class ArkestraGenericPluginItemOrdering(models.Model):
    class Meta:
        abstract = True
        ordering = ['-position']

    objects = ArkestraGenericPluginItemManager()
    inline_item_ordering = models.PositiveSmallIntegerField(
        "Position",
        help_text="0 is first", 
        default = 0, 
        ) 
    active = models.BooleanField(default=True)

########NEW FILE########
__FILENAME__ = managers
import operator

from datetime import datetime, timedelta

from django.db import models
from django.db.models import Q
from arkestra_utilities.settings import MULTIPLE_ENTITY_MODE, AGE_AT_WHICH_ITEMS_EXPIRE

class ArkestraGenericModelManager(models.Manager):
    def get_by_natural_key(self, slug):
        return self.get(slug=slug)

    def listable_objects(self):
        return self.model.objects.filter(
            published=True,
            in_lists=True,
            )


    # # this method is not yet used, but will be used as part of the wholesale
    # # rewriting of this code
    # def published_items(self):
    #     return self.model.objects.filter(
    #         published=True,
    #         date__lte = datetime.now(),
    #         )
    # 
    # def listable_published_items(self):
    #     return self.model.objects.filter(
    #         published=True,
    #         date__lte = datetime.now(),
    #         in_lists=True,
    #         )
    # 
    # def get_items_list(
    #     self,
    #     entity=None,
    #     show_expired=True,
    #     order_by="date",
    #     format="",
    #     ):
    # 
    #     items = self.model.objects.filter(
    #         published=True,
    #         in_lists=True,
    #         date__lte=datetime.now(),
    #         )
    # 
    #     if MULTIPLE_ENTITY_MODE and entity:
    #         items = items.filter(
    #             Q(hosted_by=entity) | Q(publish_to=entity)
    #             ).distinct()
    # 
    #     if AGE_AT_WHICH_ITEMS_EXPIRE and not show_expired:
    #         expiry_date = datetime.now() - \
    #            timedelta(days=AGE_AT_WHICH_ITEMS_EXPIRE)
    #         items = items.filter(date__gte=expiry_date)
    # 
    # 
    #     if order_by == "importance/date":
    # 
    #         ordinary_items = []
    # 
    #         # split the within-date items for this entity into two sets
    #         publishable_items = items
    # 
    #         sticky_items = items.order_by('-importance').filter(
    #             Q(hosted_by=entity) | Q(is_sticky_everywhere = True),
    #             sticky_until__gte=datetime.today(),
    #             )
    #         non_sticky_items = items.exclude(
    #             Q(hosted_by=entity) | Q(is_sticky_everywhere = True),
    #             sticky_until__gte=datetime.today(),
    #             )
    # 
    #         top_items = list(sticky_items)
    # 
    #         # now go through the non-top items, and find any that can be
    #         # promoted
    #         # get the set of dates where possible promotable items can be found
    #         dates = non_sticky_items.dates('date', 'day').reverse()
    # 
    #         for date in dates:
    # 
    #             # get all non-top items from this date
    #             possible_top_items = non_sticky_items.filter(
    #                 date__year=date.year,
    #                 date__month=date.month,
    #                 date__day=date.day
    #                 )
    # 
    #             # promotable items have importance > 0
    #             # add the promotable ones to the top items list
    #             top_items.extend(possible_top_items.filter(
    #                 Q(hosted_by=entity) | Q(is_sticky_everywhere = True),
    #                 importance__gte = 1)
    #                 )
    # 
    #             # if this date set contains any unimportant items, then
    #             # there are no more to promote
    #             demotable_items = possible_top_items.exclude(
    #                 Q(hosted_by=entity) | Q(is_sticky_everywhere = True),
    #                 importance__gte = 1
    #                 )
    #             if demotable_items.count() > 0:
    #                 # put those unimportant items into ordinary items
    #                 ordinary_items.extend(demotable_items)
    #                 # and stop looking for any more
    #                 break
    # 
    #         # and add everything left in non-sticky items before this date
    #         if dates:
    #             remaining_items = non_sticky_items.filter(date__lte=date)
    #             ordinary_items.extend(remaining_items)
    #             for item in top_items:
    #                 item.sticky = True
    #                 if format == "title":
    #                     item.importance = None
    #             ordinary_items.sort(
    #                 key=operator.attrgetter('date'),
    #                 reverse = True
    #                 )
    #         items = top_items + ordinary_items
    # 
    #     return items
    # 
    # # --------------------------
    # 
    # def get_items(self, instance):
    #     publishable_items = self.get_publishable_items(instance)
    #     if instance.order_by == "importance/date":
    #         items = self.get_items_ordered_by_importance_and_date(instance, publishable_items)
    #         return items
    #     else:
    #         return publishable_items
    # 
    # def get_publishable_items(self, instance):
    #     # returns items that can be published, latest items first
    #     publishable_items = self.get_items_for_entity(instance) \
    #         .filter(date__lte = datetime.today(), published=True, in_lists=True) \
    #         .order_by('-date')
    #     return publishable_items
    # 
    # def get_items_for_entity(self, instance):
    #     # returns every items item associated with this entity,
    #     # or all items items if MULTIPLE_ENTITY_MODE is False, or
    #     # instance.entity is unspecified
    #     if MULTIPLE_ENTITY_MODE and instance.entity:
    #         items_for_entity = self.model.objects.filter(
    #             Q(hosted_by=instance.entity) | Q(publish_to=instance.entity)
    #             ).distinct()
    #     else:
    #         items_for_entity = self.model.objects.all()
    #     # print "All items", all_items.count()
    #     return items_for_entity
    # 
    # def get_items_ordered_by_importance_and_date(
    #     self,
    #     instance,
    #     publishable_items
    #     ):
    # 
    #     ordinary_items = []
    # 
    #     # split the within-date items for this entity into two sets
    #     publishable_items = self.get_publishable_items(instance)
    # 
    #     sticky_items = publishable_items.order_by('-importance').filter(
    #         Q(hosted_by=instance.entity) | Q(is_sticky_everywhere = True),
    #         sticky_until__gte=datetime.today(),
    #         )
    #     non_sticky_items = publishable_items.exclude(
    #         Q(hosted_by=instance.entity) | Q(is_sticky_everywhere = True),
    #         sticky_until__gte=datetime.today(),
    #         )
    # 
    #     top_items = list(sticky_items)
    # 
    #     # now go through the non-top items, and find any that can be promoted
    #     # get the set of dates where possible promotable items can be found
    #     dates = non_sticky_items.dates('date', 'day').reverse()
    # 
    #     for date in dates:
    # 
    #         # get all non-top items from this date
    #         possible_top_items = non_sticky_items.filter(
    #             date__year=date.year,
    #             date__month=date.month,
    #             date__day=date.day
    #             )
    # 
    #         # promotable items have importance > 0
    #         # add the promotable ones to the top items list
    #         top_items.extend(possible_top_items.filter(
    #             Q(hosted_by=instance.entity) | Q(is_sticky_everywhere = True),
    #             importance__gte = 1)
    #             )
    # 
    #         # if this date set contains any unimportant items, then
    #         # there are no more to promote
    #         demotable_items = possible_top_items.exclude(
    #             Q(hosted_by=instance.entity) | Q(is_sticky_everywhere = True),
    #             importance__gte = 1
    #             )
    #         if demotable_items.count() > 0:
    #             # put those unimportant items into ordinary items
    #             ordinary_items.extend(demotable_items)
    #             # and stop looking for any more
    #             break
    # 
    #     # and add everything left in non-sticky items before this date
    #     if dates:
    #         remaining_items = non_sticky_items.filter(date__lte=date)
    #         ordinary_items.extend(remaining_items)
    #         for item in top_items:
    #             item.sticky = True
    #             if instance.format == "title":
    #                 item.importance = None
    #         ordinary_items.sort(
    #             key=operator.attrgetter('date'),
    #             reverse = True
    #             )
    #     return top_items + ordinary_items





########NEW FILE########
__FILENAME__ = menu
from django.utils.safestring import mark_safe
from django.conf import settings
from django.core.cache import cache
from django.db.models.loading import get_model

from cms.models import Page

from menus.base import NavigationNode
from menus.menu_pool import menu_pool
from menus.base import Modifier

from arkestra_utilities.settings import ARKESTRA_MENUS


try:
    # django CMS < 2.4
    CACHE_DURATIONS = settings.CMS_CACHE_DURATIONS['menus']
except AttributeError:
    # django CMS 2.4 +
    from cms.utils import get_cms_setting
    CACHE_DURATIONS = get_cms_setting('CACHE_DURATIONS')['menus']


menus = []
for menu in ARKESTRA_MENUS:
    # old style
    if type(menu) is dict:

        if menu.get("lister_name"):
            lister_module = __import__(
                menu["lister_module"],
                fromlist=[menu["lister_name"]]
                )
            menu["lister"] = getattr(lister_module, menu["lister_name"])

        menus.append(menu)

    # new style
    elif type(menu) is str:
        module_name, dot, class_name = menu.rpartition(".")
        menu_class = __import__(
            module_name,
            fromlist=[class_name]
            )
        menus.append(getattr(menu_class, class_name))

# ArkestraPages(Modifier) checks whether there are Entities that have automatic
# pages (contacts & people, news & events, etc) that should be featured in the
# menu.
#
# These menu might have this structure:
#
#   Department of Witchcraft    [the home page of the Entity]
#       About witchcraft        [an ordinary CMS Page]
#       Cats & hats             [an ordinary CMS Page]
#       News & Events           [an Arkestra automatic page]
#           Previous Events     [an Arkestra automatic page - won't appear in
#                                menu unless News & Events is selected]
#           News Archive        [an Arkestra automatic page - won't appear in
#                                menu unless News & Events is selected]
#       Contacts & People       [an Arkestra automatic page]
#


class ArkestraPages(Modifier):
    def modify(self, request, nodes, namespace, root_id, post_cut, breadcrumb):

        # this currently relies on the pre-cut nodes
        self.nodes = nodes
        self.auto_page_url = getattr(request, "auto_page_url", None)
        self.request = request

        if menus and not post_cut:
            key = "ArkestraPages.modify()" + request.path + "pre_cut"
            cached_pre_cut_nodes = cache.get(key, None)
            if cached_pre_cut_nodes:
                return cached_pre_cut_nodes

            # loop over all the nodes returned by the nodes in the Menu classes
            for node in self.nodes:
                # for each node, try to find a matching Page that is an
                # Entity's home page
                try:
                    page = Page.objects.get(id=node.id, entity__isnull=False)
                except Page.DoesNotExist:
                    node.entity = False
                else:
                    node.entity = page.entity.all()[0]
                    for menu_class in menus:
                        if type(menu_class) is dict:
                            self.do_old_menu(node, menu_class, node.entity)

                        else:
                            self.do_menu(node, menu_class, node.entity)



            # print "    ++ saving cache", key
            cache.set(key, self.nodes, CACHE_DURATIONS)
            # print "    **", len(self.nodes), "nodes in", datetime.now() -
            # start_time, "for ArkestraPages.modify()"
            return self.nodes
        else:
            # print "** post_cut"
            # for node in self.nodes:
            #     # we have found a node for a Page with an Entity, so check it
            #       against arkestra_menus
            #     for menu in arkestra_menus:
            #         # self.do_menu(node, menu, node.entity)
            #         pass
            return self.nodes

    def do_menu(self, node, menu_class, entity):

        entity_model = getattr(menu_class, "entity_model", None)
        # check if we are we using an entity_model
        if entity_model:
            try:
                # can we get and entity_model instance?
                entity_model_instance = entity_model.objects.get(entity=entity)
                # if it doesn't want the page published, give up
                if entity_model_instance.publish_page is False:
                    return
                menu_title = entity_model_instance.menu_title
            # if no entity_model instance has been created for this entity
            except entity_model.DoesNotExist:
                return

        # not using an entity_model; determine menu_title from class
        else:
            menu_title = menu_class.menu_title

        # check if we're using a lister,
        if getattr(menu_class, "lister", None):
            lister_ = menu_class.lister(entity=entity)
            if not lister_.lists:
                return

        # if we haven't bailed out yet, create the menu node
        new_node = self.create_new_node(
            title=menu_title,
            url=entity.get_auto_page_url(menu_class.url),
            parent=node,
            )

        # does this menu call for sub-menu items?
        if getattr(menu_class, "sub_menus", None):
            for list_ in lister_.lists:
                # and go through the other_items lists for each,
                # creating a node for each
                for other_item in list_.other_items():
                    self.create_new_node(
                        title=other_item["title"],
                        url=other_item["link"],
                        parent=new_node,
                    )

    def do_old_menu(self, node, menu_class, entity):
        # does this entity have this kind of auto-page in the menu?
        if getattr(entity, menu_class["auto_page_attribute"]):
            if menu_class.get("lister"):
                # create an instance of the lister with appropriate attributes
                lister_ = menu_class.get("lister")(entity=entity)
                # use the instance to create an instance of the plugin
                # publisher
                if lister_.lists:
                    new_node = self.create_new_node(
                        title=getattr(entity, menu_class["title_attribute"]),
                        url=entity.get_auto_page_url(
                            menu_class["url_attribute"]
                            ),
                        parent=node
                        )
                    # does this menu call for sub-menu items?
                    if menu_class.get("sub_menus", None):
                        for list_ in lister_.lists:
                            # and go through the other_items lists for each,
                            # creating a node for each
                            for other_item in list_.other_items():
                                self.create_new_node(
                                    title=other_item["title"],
                                    url=other_item["link"],
                                    parent=new_node,
                                )

            else:
                new_node = self.create_new_node(
                    title=getattr(entity, menu_class["title_attribute"]),
                    url=entity.get_auto_page_url(menu_class["url_attribute"]),
                    parent=node,
                    )
            # if new_node:
            #     for sub_menu in menu["sub_menus"]:
            #         self.do_menu(node, sub_menu, entity)

        # return new_nodes

    def create_new_node(self, title, url, parent):
        # create a new node for the menu
        new_node = NavigationNode(
            title=mark_safe(title),
            url=url,
            id=None
            )
        new_node.parent = parent
        parent.children.append(new_node)
        self.nodes.append(new_node)

        # is this node selected?
        if new_node.get_absolute_url() == self.auto_page_url:

            new_node.selected = True
            node_to_mark = new_node
            while node_to_mark.parent:
                node_to_mark.parent.selected = False
                node_to_mark.parent.ancestor = True
                node_to_mark = node_to_mark.parent
        else:
            new_node.selected = False
        return new_node


menu_pool.register_modifier(ArkestraPages)

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'Insert'
        db.create_table('arkestra_utilities_insert', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('insertion_point', self.gf('django.db.models.fields.SlugField')(unique=True, max_length=60)),
            ('content', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['cms.Placeholder'], null=True)),
            ('description', self.gf('django.db.models.fields.TextField')(max_length=256, null=True)),
        ))
        db.send_create_signal('arkestra_utilities', ['Insert'])


    def backwards(self, orm):
        # Deleting model 'Insert'
        db.delete_table('arkestra_utilities_insert')


    models = {
        'arkestra_utilities.insert': {
            'Meta': {'object_name': 'Insert'},
            'content': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'insertion_point': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        }
    }

    complete_apps = ['arkestra_utilities']
########NEW FILE########
__FILENAME__ = mixins
from django.db import models
from django.core.urlresolvers import reverse

from links.models import ExternalLink


class URLModelMixin(models.Model):
    # for models that can have external (hosted elsewhere) items
    class Meta:
        abstract = True

    # sublasses *must* be provided with a view_name attribute

    # url fields
    external_url = models.ForeignKey(
        ExternalLink,
        related_name="%(class)s_item",
        on_delete=models.PROTECT,
        blank=True, null=True,
        help_text=u"Select an item from the External Links database."
        )
    slug = models.SlugField(
        unique=True, max_length=60, blank=True,
        help_text=u"""
        Do not meddle with this unless you know exactly what you're doing!
        """,
        error_messages={"unique": "unique"}
        )

    def __unicode__(self):
        return self.title

    def get_absolute_url(self):
        if self.external_url:
            return self.external_url.url
        else:
            return reverse(self.view_name, kwargs={"slug": self.slug})


class LocationModelMixin(models.Model):
    # provides location fields, for people, contacts, events, etc
    class Meta:
        abstract = True
    precise_location = models.CharField(
        help_text=u"Location <em>within</em> the building, for visitors",
        max_length=255, null=True, blank=True
        )
    access_note = models.CharField(
        help_text=u"Notes on access/visiting hours/etc",
        max_length=255, null=True, blank=True
        )

########NEW FILE########
__FILENAME__ = models
from cms.models.fields import PlaceholderField
from django.contrib.admin.models import LogEntry
from django.contrib.auth.models import User
from django.db import models

class ArkestraUser(User):
    class Meta:
        proxy = True

    def edits(self):
        return LogEntry.objects.filter(user = self).order_by('-id')
        
    def last_10_edits(self):
        last_edit = self.edits()[10]

        return last_edit
        
    def last_edit(self):    
        last_edit = self.edits()[0].action_time
        
        return last_edit

        
class Insert(models.Model):
    insertion_point=models.SlugField(unique=True, max_length=60,
        help_text="Matches the parameter passed to the {% insert %} tag in "
        "your templates")
    content = PlaceholderField('insert')
    description =  models.TextField(max_length=256, null=True, blank=False,
        help_text="To help remind you what this is for")

    def __unicode__(self):
        return self.insertion_point

########NEW FILE########
__FILENAME__ = modifier_pool
from django.conf import settings
from django.utils.importlib import import_module

class WidthAdjuster(object):
    def mark():
        return
    def modify():
        return

class AdjusterPool(object):
    """
    Contains the set of adjusters that can provide Arkestra with hints about the widths (or other attributes) of placeholders and their contents
    """
    def __init__(self):
        self.adjusters = {}
        self.discovered = False
    
    def discover_modifers(self):  
        """
        Looks for adjusters that need to be registered
        """  
        if self.discovered:
            return    
        for app in settings.INSTALLED_APPS:
            try:
                import_module('.plugin_modifiers', app)
            except ImportError:
                pass
        from plugin_modifiers import register
        register()
        self.discovered = True

    def register_adjuster(self, modifier_class):
        # print "registering", modifier_class
        assert issubclass(modifier_class, WidthAdjuster)
        # should we check if it's already registered?
        self.adjusters.setdefault(modifier_class.kind, []).append(modifier_class)

adjuster_pool = AdjusterPool()    
adjuster_pool.discover_modifers()
########NEW FILE########
__FILENAME__ = dates
from django.contrib.humanize.templatetags.humanize import naturalday

def nice_date(date, date_format=None):
    """
    For date values that are tomorrow, today or yesterday compared to
    present day returns representing string. Otherwise, returns a string
    formatted according to settings.DATE_FORMAT.
    """
    datestring = naturalday(date, date_format)
    return datestring and datestring[0].upper() + datestring[1:]

########NEW FILE########
__FILENAME__ = plugin_widths
from BeautifulSoup import BeautifulSoup
from cms.plugins.text.models import Text
from arkestra_utilities.modifier_pool import adjuster_pool

def get_placeholder_width(context, plugin):
    """
    Gets the width placeholder in which a plugin finds itself
        
	{% with
	    adjust_width=current_page.flags.no_page_title   # adjust_width depends on some context variable
	    width_adjuster="absolute"                       # the adjustment will be to an absolute value
	    width_adjustment=200                            # the value in pixels
	    
	    image_border_reduction=8
	    
	    background_classes="background"
	    background_adjuster="px"
	    background_adjustment=32
	    %}    
    	{% placeholder body %}
    {% endwith %}

    """
    # try to get placeholder_width context variable; if not, then width;
    # if not, use 100 (100 is for admin)

    placeholder_width = context.get("placeholder_width")
    placeholder_width = placeholder_width or context.get("width")
    placeholder_width = float(placeholder_width or 100.0)

    # run all registered placeholder_width modifiers
    for cls in adjuster_pool.adjusters["placeholder_width"]:
        inst = cls()
        placeholder_width = inst.modify(context, placeholder_width)
        
    return placeholder_width

def get_plugin_ancestry(plugin):
    """
    Builds a list of plugins, from the instance downwards, but excluding the root plugin
    """
    plugins = []
    # print "plugin", type(plugin)
    while plugin.parent:
        plugins.append(plugin)
        plugin = plugin.parent 
    return reversed(plugins)

def calculate_container_width(context, instance, width, auto=False):
    markers = {}

    # we could in theory have nested text/layout plugins, but in practice
    # probably never will - it's not necessary, given the inner row/column
    # capabilities of the semantic editor - so this list of plugins will usually just contain the plugin we're working on 
    plugins = get_plugin_ancestry(instance)
    
    for plugin in plugins:
        # get the body field (i.e. output HTML) of the Text object this item is inserted into
        body = Text.objects.get(id=plugin.parent_id).body 
        # soup it up
        soup = BeautifulSoup(''.join(body)) 
        # find the element with that id in the HTML
        target = soup.find(id="plugin_obj_"+str(plugin.id)) 
                    
        # run plugin_width modifiers
        for cls in adjuster_pool.adjusters["plugin_width"]:
            inst = cls()
            width = inst.modify(context, target, width, auto)

        elements = reversed(target.findParents()) # get the tree of elements and reverse it
        # we start with the root (i.e. document)

        for element in elements:
            # run image_width modifiers
            # check for attributes that have a cumulative adjusting affect - we need to act each time we find one
            for cls in adjuster_pool.adjusters["image_width"]:
                inst = cls()
                width = inst.modify(context, element, width)

            # run mark_and_modify modifiers, to mark only
            # check for attributes that have an effect only once - act after the loop
            for cls in adjuster_pool.adjusters["mark_and_modify"]:
                inst = cls()
                markers = inst.mark(context, element, markers)
            
    # run mark_and_modify modifiers, to modify
    for cls in adjuster_pool.adjusters["mark_and_modify"]:
        inst = cls()
        width = inst.modify(context, markers, width)
        
    return width

########NEW FILE########
__FILENAME__ = plugin_modifiers
from modifier_pool import adjuster_pool, WidthAdjuster
import re

"""

There are various kinds of WidthAdjuster modifiers:

* placeholder_width

works out the width of the cms placeholder



* plugin_width

works out the overall width of the plugin (image, carousel, video, whatever) including its borders etc

* image_width

works out the exact size of the images required

* mark_and_modify



"""


class SimplePlaceholderWidthAdjuster(WidthAdjuster):
    kind="placeholder_width"
    
    def modify(self, context, placeholder_width):
        # check for conditions that adjust the placeholder width
        adjust_width = context.get("adjust_width", False)
        # can be "percent", "relative", "absolute", "divider"
        adjuster = context.get("width_adjuster", None) 
        adjustment = float(context.get("width_adjustment", 0))
    
        if adjust_width:
            # print "need to adjust"
            if adjuster == "divider":
                placeholder_width = placeholder_width/adjustment
            elif adjuster == "multiplier":
                placeholder_width = placeholder_width * adjustment
            elif adjuster == "percent":
                placeholder_width = placeholder_width * adjustment/100
            elif adjuster == "relative":
                placeholder_width = placeholder_width + adjustment
            elif adjuster == "absolute":
                placeholder_width = adjustment
            placeholder_width = int(placeholder_width)
            # print "adjusted placeholder width:", placeholder_width
        return placeholder_width


class AutoSpaceFloat(WidthAdjuster):
    """
    this truth table gives us clues about how to decide on width reductions.
    The three conditions that make up the key are: 
        auto
        space [the space-on-left/right classes that we use]
        floated
    the reduce_by value is a percentage
    """
    reduce_by = {
        (False, False, False):  100.0,  # given width, no left/right space, not floated
        (False, False, True):   100.0,  # given width, no left/right space, floated
        (False, True, False):    67.0,  # given width, left/right space, not floated
        (False, True, True):    100.0,  # given width, left/right space, floated
        (True, False, False):   100.0,  # auto width, no left/right space, not floated
        (True, False, True):     50.0,  # auto width, no left/right space, floated
        (True, True, False):     67.0,  # auto width, left/right space, not floated
        (True, True, True):      50.0,  # auto width, left/right space, floated
        }

    space = False
    floated = False
    kind="plugin_width"

    def modify(self, context, target, width, auto):
        # check for attributes that use the reduce_key
        grandparent = target.parent.parent
        if grandparent: 
            grandparent_class = grandparent.get("class", "")
            self.space = "space-on" in grandparent_class
            self.floated = "images-left" in grandparent_class or "images-right" in grandparent_class
        reduce_key = (auto, self.space, self.floated)
        width = width * self.reduce_by[reduce_key] / 100
        return width
        
class ReduceForBackground(WidthAdjuster):
    kind="image_width"
    """
    Do any of the elements containing this image have a background? If so, reduce the width.
    """
    def modify(self, context, element, width):
        element_class = element.get("class", "") # and its HTML class
        background_classes = context.get("background_classes", "outline tint")
        if any((word in element_class for word in background_classes.split())):
            width = width - context.get("background_reduction", 32)
        return width

class ColumnWidths(WidthAdjuster):
    kind="image_width"
    """
    These values are given as variables here because we never quite know how
    values such as 2.0/5 will be calculated - this way, we need not worry what
    the values will be
    """
    one            = 1.0
    half           = 1.0/2
    one_third      = 1.0/3
    one_quarter    = 1.0/4
    one_fifth      = 1.0/5
    one_sixth      = 1.0/6
    two_thirds     = 2.0/3
    three_quarters = 3.0/4
    two_fifths     = 2.0/5
    three_fifths   = 3.0/5

    """
    See the column widths styles in arkestra.css - they need to match these */
    """
    column_widths = {
        one: 1.0,
        half: 48.0,
        one_third: 30.6667,
        one_quarter: 22.0,
        one_fifth: 16.8,
        one_sixth: 13.3333,
        two_thirds: 65.4,
        three_quarters: 74.0,
        two_fifths: 37.73,
        three_fifths: 58.4,
    }
    
    def modify(self, context, element, width):
        # print "============ ColumnWidths "
        element_class = element.get("class", "") # and its HTML class
        # if this is a column whose parent is a row        
        if re.search(r"\column\b", element_class) and "columns" in element.parent.get("class", ""):
            # columns is the number of columns, or 1 if not specified
            columns = float(element.parent.get("class", "").split("columns")[1][0] or 1)
            # print "    this is a column:", element_class
            # if double or triplewidth
            if "triplecolumn" in element_class:
                columnwidth = 3.0
            elif "doublecolumn" in element_class:
                columnwidth = 2.0
            else:
                columnwidth = 1
            # now use the value of columnwidth/columns as a key to the column_widths dict
            width = width * self.column_widths[columnwidth/columns]/100
        return width

class ImageBorders(WidthAdjuster):
    kind="mark_and_modify"
    
    def mark(self, context, element, markers):
        image_border_class = context.get("image_border_class", "image-borders")
        no_image_border_class = context.get("no_image_border_class", "no-image-borders")
        element_class = element.get("class", "") # and its HTML class
        if image_border_class in element_class:
            # print "has borders"
            markers["has_borders"] = True
        if no_image_border_class in element_class:     
            markers["has_borders"] = False
        return markers
    
    def modify(self, context, markers, width):
        if markers.get("has_borders"):
            # print "-16 for borders"
            width = width - context.get("image_border_reduction", 16)
        return width

def register():
    adjuster_pool.register_adjuster(SimplePlaceholderWidthAdjuster)
    adjuster_pool.register_adjuster(AutoSpaceFloat)
    adjuster_pool.register_adjuster(ReduceForBackground)
    adjuster_pool.register_adjuster(ColumnWidths)
    adjuster_pool.register_adjuster(ImageBorders)

########NEW FILE########
__FILENAME__ = settings
from django.conf import settings

# *Don't* be tempted to change anything in this file.
# If you do need to change a setting, copy it to your project's settings
# file, and change it there; it'll override the setiing here.

# -------- Fundamental entity settings ----------------------

# ARKESTRA_BASE_ENTITY
# This is the only item you need to put safely in your project's settings file
#
# 1. copy this to arkestra_settings in your project folder
# 2. make sure it's correct
# 3. very rarely, you might have to change it to keep it correct

ARKESTRA_BASE_ENTITY = getattr(settings, "ARKESTRA_BASE_ENTITY", None)

# MULTIPLE_ENTITY_MODE is for projects hosting the site of more than one entity
# This does not necessarily entail a site for complex organisation,
# or for a number of different organisations - being able to redirect
# news and events items to particular entities for example requires
# MULTIPLE_ENTITY_MODE to be True

MULTIPLE_ENTITY_MODE = getattr(settings, "MULTIPLE_ENTITY_MODE", True)

DEFAULT_CONTACTS_PAGE_TITLE = getattr(settings, "DEFAULT_CONTACTS_PAGE_TITLE", "Contacts & people")
DEFAULT_NEWS_PAGE_TITLE = getattr(settings, "DEFAULT_NEWS_PAGE_TITLE", "News & events")
DEFAULT_VACANCIES_PAGE_TITLE = getattr(settings, "DEFAULT_VACANCIES_PAGE_TITLE", "Vacancies & studentships")
DEFAULT_PUBLICATIONS_PAGE_TITLE = getattr(settings, "DEFAULT_PUBLICATIONS_PAGE_TITLE", "Publications")

# -------- News & Events ----------------------

# How many items should be displayed on main news & events pages,
# such as /news-and-events
LISTER_MAIN_PAGE_LIST_LENGTH = getattr(settings, "LISTER_MAIN_PAGE_LIST_LENGTH", 6)

# the age in days at which items can be considered to have expired and should be
# archived
AGE_AT_WHICH_ITEMS_EXPIRE = getattr(settings, "AGE_AT_WHICH_ITEMS_EXPIRE", 180)

# in All forthcoming events lists, gather top events  together
COLLECT_TOP_ALL_FORTHCOMING_EVENTS = getattr(settings, "COLLECT_TOP_ALL_FORTHCOMING_EVENTS", True)

# show event type (e.g. "Seminar")
SHOW_EVENT_TYPES = getattr(settings, "SHOW_EVENT_TYPES", False)

STANDARD_FEED_ENTRY_COUNT = getattr(settings,'STANDARD_FEED_ENTRY_COUNT', 5)

NEWS_AND_EVENTS_LAYOUT = getattr(settings, "NEWS_AND_EVENTS_LAYOUT", "sidebyside")

# -------- Date formats ----------------------

DATE_FORMAT = getattr(settings, "ARKESTRA_DATE_FORMATS", "jS F Y")

ARKESTRA_DATE_FORMATS = getattr(settings, "ARKESTRA_DATE_FORMATS",
    {
    "date_groups": "F Y",
    "not_this_year": "jS F Y",
    "not_this_month": "jS F",
    "this_month": "jS",
    }
    )

# admin

ENABLE_CONTACTS_AND_PEOPLE_AUTH_ADMIN_INTEGRATION = getattr(settings, "ENABLE_CONTACTS_AND_PEOPLE_AUTH_ADMIN_INTEGRATION", False)

# -------- Headings ----------------------

# global value for the heading level for page titles (e.g. entity names in entity pages)
PAGE_TITLE_HEADING_LEVEL = getattr(settings, "PAGE_TITLE_HEADING_LEVEL", 1)

# The default (typically, the next down from the PAGE_TITLE_HEADING_LEVEL)
IN_BODY_HEADING_LEVEL = getattr(settings, "IN_BODY_HEADING_LEVEL", 2)
PLUGIN_HEADING_LEVEL_DEFAULT = getattr(settings, "PLUGIN_HEADING_LEVEL_DEFAULT", 2)

# The heading levels available to plugins
PLUGIN_HEADING_LEVELS = getattr(settings, "PLUGIN_HEADING_LEVELS", (
    (0, u"No heading"),
    # (1, u"Heading 1"), # assuming that your templates reserve <h1> for page titles, don't allow for plugins
    (2, u"Heading 2"),
    (3, u"Heading 3"),
    (4, u"Heading 4"),
    (5, u"Heading 5"),
    )
    )

# image processing

IMAGESET_ITEM_PADDING = getattr(settings, "IMAGESET_ITEM_PADDING", 10) # should be relative to templates!

# a dictionary to show how many items per row depending on the number of items
LIGHTBOX_COLUMNS = getattr(
    settings,
    "LIGHTBOX_COLUMNS",
    {1:1, 2:2, 3:3, 4:4, 5:5, 6:3, 7:4, 8:4, 9:3, 10:5, 11:4, 12:4, 13:5, 14:5, 15:5, 16:4, 17:6, 18:6, 19:5, 20:5, 21:6, 22:6, 23:6, 24:6, 25:5 }
    )

PERMITTED_FILETYPES = getattr(settings, "PERMITTED_FILETYPES", ["pdf",])


# links

LINK_SCHEMA = getattr(settings, 'LINK_SCHEMA', {})

# The video processing system

USE_CELERY_FOR_VIDEO_ENCODING = getattr(settings, "USE_CELERY_FOR_VIDEO_ENCODING", False)

VIDEO_HOSTING_SERVICES = getattr(settings, "VIDEO_HOSTING_SERVICES", {
    "vimeo": {"name": "Vimeo", "template": "embedded_video/vimeo.html"},
    "youtube": {"name": "YouTube", "template": "embedded_video/youtube.html"},
    }
    )

# -------- Django CMS ----------------------

CMS_SEO_FIELDS = getattr(settings, "CMS_SEO_FIELDS", True)
CMS_MENU_TITLE_OVERWRITE = getattr(settings, "CMS_MENU_TITLE_OVERWRITE", True)

# -------- Menus ----------------------

# Built in menu modifiers are in contacts_and_people.menu


from news_and_events.menu import menu_dict as news_and_events_menu
from contacts_and_people.menu import menu_dict as contacts_and_people_menu
from vacancies_and_studentships.menu import menu_dict as vacancies_and_studentships_menu


ARKESTRA_MENUS = getattr(
    settings,
    "ARKESTRA_MENUS",
    [
        news_and_events_menu,
        contacts_and_people_menu,
        vacancies_and_studentships_menu,
    ]
)

# Do you want all menu branches to expand?
EXPAND_ALL_MENU_BRANCHES = getattr(settings, "EXPAND_ALL_MENU_BRANCHES", False)


# -------- Django ----------------------

LOGIN_REDIRECT_URL = getattr(
    settings,
    "LOGIN_REDIRECT_URL",
    "/admin/"
    )
    #  what happens after login - why is this required?

########NEW FILE########
__FILENAME__ = arkestra_date_tags
from django import template

from datetime import datetime
from django.template.defaultfilters import date
from arkestra_utilities.output_libraries.dates import nice_date

register = template.Library()

@register.simple_tag(takes_context=True)
def date(context, date=date):
    """
    The `date` argument is a context attribute containing the date you want
    published; if not specified, then "date" will be used by default.
    """
    if date:
        date_format = "jS F Y"
        now = datetime.now()
        # this year? don't include the year
        if date.year == now.year:
            date_format = "jS F"
        # nicedate will use tomorrow, today or yesterday when appropriate
        date = nice_date(date, date_format)
        return date

########NEW FILE########
__FILENAME__ = arkestra_filters
from django import template

register = template.Library()

@register.filter
def truncatewords_by_chars(value, arg):
    """
    Truncate words based on the number of characters
    based on original truncatewords filter code
    
    Receives a parameter separated by spaces where each field means:
     - limit: number of characters after which the string is truncated
     - lower bound: if char number is higher than limit, truncate by lower bound
     - higher bound: if char number is less than limit, truncate by higher bound
    """
    from django.utils.text import truncate_words
    try:
        args = arg.split(' ')
        limit = int(args[0])
        lower = int(args[1])
        higher = int(args[2])
    except ValueError: # Invalid literal for int().
        return value
    if len(value) >= limit:
        return truncate_words(value, lower)
    if len(value) < limit:
        return truncate_words(value, higher)
########NEW FILE########
__FILENAME__ = insert_tags
from django import template
from django.template.defaultfilters import safe

from arkestra_utilities.models import Insert

from classytags.arguments import Argument
from classytags.core import Tag, Options

register = template.Library()

class RenderInserter(Tag):
    name = 'insert'
    options = Options(
        Argument('insertion_point'),
        Argument('width', default=None, required=False),
    )

    def render_tag(self, context, insertion_point, width):
        inserter, created = Insert.objects.get_or_create(insertion_point = insertion_point)
        request = context.get('request', None)
        if not request:
            return ''
        if not inserter.content:
            return ''
        return safe(inserter.content.render(context, width))
register.tag(RenderInserter)

########NEW FILE########
__FILENAME__ = testrunner
from django.conf import settings

settings.configure(DEBUG=True, TEMPLATE_DEBUG=True,
    TEMPLATE_DIRS=('/home/web-apps/myapp', '/home/web-apps/base'))

########NEW FILE########
__FILENAME__ = tests
from django.test import TestCase
from django.http import HttpRequest, QueryDict

from contacts_and_people.models import Entity, Person

from arkestra_utilities.text import concatenate
from generic_lister import (
    ArkestraGenericLister, ArkestraGenericList, ArkestraGenericFilterSet,
    ArkestraGenericFilterList
    )
from generic_models import ArkestraGenericModel


class TestConcatenate(TestCase):
    def test_concatenate_with_no_arguments(self):
        self.assertEqual(concatenate(), "")

    def test_concatenate_with_no_strings(self):
        self.assertEqual(
            concatenate(with_string="-"),
            ""
            )

    def test_concatenate_with_strings(self):
        self.assertEqual(
            concatenate(strings=["La", "vita", "nuda"]),
            "Lavitanuda"
            )

    def test_concatenate_with_strings_and_with_strings(self):
        self.assertEqual(
            concatenate(with_string="-", strings=["La", "vita", "nuda"]),
            "La-vita-nuda"
            )

    def test_concatenate_with_unnamed_arguments(self):
        self.assertEqual(
            concatenate(["La", "vita", "nuda"], "-"),
            "La-vita-nuda"
            )


class TestModel(ArkestraGenericModel):
    pass


class TestFilterSet(ArkestraGenericFilterSet):
    fields = ['title']


class ItemList(ArkestraGenericList):
    model = TestModel
    filter_set = TestFilterSet


class ListBuildItemsTests(TestCase):
    def test_build_no_items(self):

        # items and listable_objects() should be []
        itemlist = ItemList()
        itemlist.build()

        self.assertItemsEqual(
            itemlist.items,
            itemlist.model.objects.listable_objects()
            )
        self.assertItemsEqual(itemlist.items, [])

    def test_build_items(self):
        # build() should assign all objects to items
        item = TestModel(in_lists=True, published=True)
        item.save()

        itemlist = ItemList()
        itemlist.build()

        self.assertItemsEqual(
            itemlist.items,
            itemlist.model.objects.listable_objects()
            )
        self.assertItemsEqual(itemlist.items, [item])


class ListSetItemsTests(TestCase):
    def setUp(self):
        self.school = Entity(name="School of Medicine")
        self.school.save()

        self.item1 = TestModel(title="1")
        self.item1.save()
        self.item2 = TestModel(title="2")
        self.item2.save()

    def test_item_not_for_entity_is_not_listed(self):
        # the object is not for this entity, should not be in items
        itemlist = ItemList(entity=self.school)
        itemlist.items = TestModel.objects.all()

        itemlist.set_items_for_entity()

        self.assertItemsEqual(
            itemlist.items,
            []
            )

    def test_hosted_by_item_is_listed(self):
        # object is hosted_by, should be published
        self.item1.hosted_by = self.school
        self.item1.save()
        itemlist = ItemList(entity=self.school)
        itemlist.items = TestModel.objects.all()

        itemlist.set_items_for_entity()

        self.assertItemsEqual(
            itemlist.items,
            [self.item1]
            )

    def test_set_items_for_entity_in_publish_to(self):
        # object has publish_to, should be published
        self.item1.publish_to.add(self.school)
        itemlist = ItemList(entity=self.school)
        itemlist.items = TestModel.objects.all()

        itemlist.set_items_for_entity()

        self.assertItemsEqual(
            itemlist.items,
            [self.item1]
            )

    def test_set_items_for_entity_wrong_entity(self):
        # the object is different entity, should not be in items
        itemlist = ItemList(entity=100)
        itemlist.items = TestModel.objects.all()

        itemlist.set_items_for_entity()

        self.assertItemsEqual(
            itemlist.items,
            []
            )

    def test_set_items_for_person(self):
        p = Person()
        p.save()
        self.item1.please_contact.add(p)

        itemlist = ItemList()
        itemlist.items = TestModel.objects.all()
        itemlist.person = p
        itemlist.set_items_for_person()

        self.assertEqual(
            list(itemlist.items),
            [self.item1]
        )


class FilterListTests(TestCase):
    def setUp(self):
        self.item1 = TestModel(title="1")
        self.item2 = TestModel(title="2")
        self.item3 = TestModel(title="3", summary="1")
        self.item1.save()
        self.item2.save()
        self.item3.save()

        self.itemlist = ItemList()
        self.itemlist.search_fields = [
            {
                "field_name": "text",
                "field_label": "Title/summary",
                "placeholder": "Search",
                "search_keys": [
                    "title__icontains",
                    "summary__icontains",
                    ],
                },
            ]
        self.itemlist.items = TestModel.objects.all()
        self.itemlist.request = HttpRequest()

    def test_filter_on_search_terms_no_matches(self):
        query = QueryDict('text=4')
        self.itemlist.request.GET = query
        self.itemlist.filter_on_search_terms()
        self.assertItemsEqual(
            self.itemlist.items,
            []
            )

    def test_filter_on_search_terms_matches_1(self):
        query = QueryDict('text=2')
        self.itemlist.request.GET = query
        self.itemlist.filter_on_search_terms()
        self.assertItemsEqual(
            self.itemlist.items,
            [self.item2]
            )

    def test_filter_on_search_terms_matches_2(self):
        query = QueryDict('text=1')
        self.itemlist.request.GET = query
        self.itemlist.filter_on_search_terms()
        self.assertItemsEqual(
            self.itemlist.items,
            [self.item1, self.item3]
            )


class ListShowWhenTests(TestCase):
    def test_no_show_when(self):
        item1 = TestModel()
        item2 = TestModel()
        item3 = TestModel()

        itemlist = ItemList()
        itemlist.group_dates = True
        itemlist.items = [item1, item2, item3]
        itemlist.set_show_when()

        self.assertFalse(itemlist.show_when)

    def test_show_when(self):
        item1 = TestModel()
        item2 = TestModel()
        item3 = TestModel()

        item1.get_when = 1
        item2.get_when = 2
        item3.get_when = 3

        itemlist = ItemList()
        itemlist.group_dates = True
        itemlist.items = [item1, item2, item3]
        itemlist.set_show_when()

        self.assertTrue(itemlist.show_when)


class ListTruncateItems(TestCase):
    # truncate_items() should use .count() on querysets and len() on lists
    # it should act on the order_by attribute of the List
    def setUp(self):
        self.item1 = TestModel(title="1")
        self.item1.save()
        self.item2 = TestModel(title="2")
        self.item2.save()
        self.itemlist = ItemList()
        self.itemlist.items = TestModel.objects.all()

    def test_stays_a_queryset(self):
        self.itemlist.order_by = "date"
        self.itemlist.limit_to = 2
        self.itemlist.truncate_items()

        self.assertIsNone(self.itemlist.items._result_cache)
        self.assertEqual(list(self.itemlist.items), [self.item1, self.item2])

    def test_becomes_a_list(self):
        self.itemlist.order_by = "importance/date"
        self.itemlist.limit_to = 2
        self.itemlist.truncate_items()

        self.assertIsNotNone(self.itemlist.items._result_cache)
        self.assertEqual(list(self.itemlist.items), [self.item1, self.item2])


class ListIsShowable(TestCase):
    # is_showable() tells us whether a list should be shown

    def test_nothing_to_show(self):
        itemlist = ItemList()
        itemlist.build()
        self.assertFalse(itemlist.is_showable())

    def test_one_published_item_to_show(self):
        item = TestModel(published=True, in_lists=True)
        item.save()
        itemlist = ItemList()
        itemlist.build()
        self.assertTrue(itemlist.is_showable())


    def test_one_published_item_to_show_in_list(self):
        item = TestModel(published=True, in_lists=True)
        item.save()
        itemlist = ItemList()
        itemlist.build()
        itemlist.items = []
        self.assertFalse(itemlist.is_showable())

    def test_only_other_items_exist(self):

        class ItemList(ArkestraGenericList):
            model = TestModel
            filter_set = TestFilterSet

            def other_items(self):
                return True

        item = TestModel(published=True, in_lists=True)
        item.save()
        itemlist = ItemList()
        itemlist.build()
        itemlist.items = []
        self.assertTrue(itemlist.is_showable())


class ListerTests(TestCase):


    def test_empty_lists_do_not_appear_in_lister(self):

        lister = ArkestraGenericLister(
            listkinds=[
                ("list1", ItemList)
            ],
            display="list1"
        )
        self.assertEqual(
            lister.lists, []
        )


# these classes and the FilterSetTests check that ArkestraGenericFilterSet
# does not inadvertantly get interfered with
class BasicFilterSet(ArkestraGenericFilterSet):
    pass


class BasicList(ArkestraGenericFilterList):
    model = TestModel
    filter_set = BasicFilterSet


class BasicGenericList(ArkestraGenericFilterList):
    model = TestModel


class FilterSetTests(TestCase):

    def test_filter_has_correct_fields(self):
        self.assertItemsEqual(BasicGenericList.filter_set.fields, [])

    def test_filter_has_correct_fields(self):
        self.assertItemsEqual(BasicList.filter_set.fields, [])

########NEW FILE########
__FILENAME__ = test_every_page
from django.test.client import Client
from django.contrib.sites.models import Site

print Site.objects.all()

client = Client()

########NEW FILE########
__FILENAME__ = test_helpers
# this file contains some useful objects and functions 
# for use in other tests


########NEW FILE########
__FILENAME__ = text
# a collection of small text utilities

# usage: concatenate(strings=["one", "two", ""], with_string=", ")
# returns: "one, two"
def concatenate(strings=[], with_string=""):
    return with_string.join(string for string in strings if string)

########NEW FILE########
__FILENAME__ = utilities
import pickle
import hashlib


def generate_key(*args, **kwargs):
    return hashlib.sha224(pickle.dumps([args, kwargs])).hexdigest()

########NEW FILE########
__FILENAME__ = views
from django.views.generic.base import View
from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext
from django.http import Http404

from arkestra_utilities.settings import MULTIPLE_ENTITY_MODE

from contacts_and_people.models import Entity

# a handy class-based view for lists of an Entity's items - news, events,
# clinical trials or whatever they might be
class ArkestraGenericView(View):
    # override the auto_page_attibute in sub-classes to check
    auto_page_attribute = None

    def get(self, request, *args, **kwargs):
        self.get_entity()

    def get_entity(self):
        slug = self.kwargs.get('slug', None)
        if slug:
            entity = get_object_or_404(Entity, slug=slug)
        else:
            entity = Entity.objects.base_entity()

        if not (entity.website and entity.website.published):
            raise Http404

        if self.auto_page_attribute and not getattr(
            entity, self.auto_page_attribute, None
        ):
            raise Http404

        self.entity = entity

    def response(self, request):
        request.auto_page_url = request.path
        # request.path = entity.get_website.get_absolute_url()
        # for the menu, so it knows where we are
        request.current_page = self.entity.get_website
        context = RequestContext(request)
        context.update({
            "entity": self.entity,
            "title": self.title,
            "meta": self.meta,
            "pagetitle": self.pagetitle,
            "main_page_body_file": self.main_page_body_file,

            # this will need to be dealt with!
            "intro_page_placeholder": self.entity.news_page_intro,

            'lister': self.lister,
            }
        )

        return render_to_response(
            "arkestra_utilities/entity_auto_page.html",
            context,
        )

########NEW FILE########
__FILENAME__ = wym_editor
from os.path import join

from django import forms
from django.utils.safestring import mark_safe
from django.conf import settings

from cms.plugins.text.settings import WYM_TOOLS, WYM_CONTAINERS, WYM_CLASSES, WYM_STYLES

class WYMEditor(forms.Textarea):
    class Media:
        js = [join(settings.CMS_MEDIA_URL, path) for path in (
            'wymeditor/jquery.wymeditor.js',
            'wymeditor/plugins/resizable/jquery.wymeditor.resizable.js',
            'js/wymeditor.placeholdereditor.js',
            #'js/lib/ui.core.js',
            #'js/placeholder_editor_registry.js',
        )]
        """css = {
            'all': [join(settings.CMS_MEDIA_URL, path) for path in (
                        'css/jquery/cupertino/jquery-ui.css',
                    )],
        }"""

    def __init__(self, language=None, attrs=None):
        self.language = language or settings.LANGUAGE_CODE[:2]
        self.attrs = {'class': 'wymeditor'}
        if attrs:
            self.attrs.update(attrs)
        super(WYMEditor, self).__init__(attrs)

    def render(self, name, value, attrs=None):
        rendered = super(WYMEditor, self).render(name, value, attrs)
        context = {
            'name': name,
            'language': self.language,
            'CMS_MEDIA_URL': settings.CMS_MEDIA_URL,
            'WYM_TOOLS': mark_safe(WYM_TOOLS),
            'WYM_CONTAINERS': mark_safe(WYM_CONTAINERS),
            'WYM_CLASSES': mark_safe(WYM_CLASSES),
            'WYM_STYLES': mark_safe(WYM_STYLES),
        }
        return rendered + mark_safe(u'''<script type="text/javascript">
            $(document).ready(function(){
                $('#id_%(name)s').wymeditor({
                    lang: '%(language)s',
                    skin: 'django',
                    skinPath: '%(CMS_MEDIA_URL)sjs/wymeditor/skins/django/',
                    updateSelector: '.submit-row input[type=submit]',
                    updateEvent: 'click',
                    logoHtml: '',
                    toolsItems: [
                        %(WYM_TOOLS)s
                    ],
                    containersItems: [
                            %(WYM_CONTAINERS)s
                        ],
                    classesItems: [
                            %(WYM_CLASSES)s
                        ],
                    editorStyles: [
                        %(WYM_STYLES)s
                        ],
                    
                });
            });
            </script>''' % context)
        
########NEW FILE########
__FILENAME__ = admin
from django.contrib import admin
from django import forms
from models import Category, SubCategory, Product

#first create a custom form to use in admin
class ProductAdminForm(forms.ModelForm):
    #The product model is defined with out the category, so add one in for display
    category = forms.ModelChoiceField(queryset=Category.objects.all().order_by('name'), widget=forms.Select(attrs={'id':'category'}), required=False)
    #This field is used exclusively for the javascript so that I can select the 
    #correct category when editing an existing product
    selected_cat = forms.CharField(widget=forms.HiddenInput, required=False)

    class Meta:
        model = Product

    class Media:
        #Alter these paths depending on where you put your media 
        js = (
            'js/mootools-1.2.3-core-yc.js',
            'js/products.js',
        )
    
    def __init__(self, *args, **kwargs):
        super(ProductAdminForm, self).__init__(*args, **kwargs)
        self.fields['selected_cat'].initial = self.instance.subcategory.category.id

class ProductAdmin(admin.ModelAdmin):
    form = ProductAdminForm
    #I don't like using a fieldset here, because it makes the form more brittle,
    #if you change the model for form be sure to update the fieldset.
    #I'm using it in this instance because I need for category to show up 
    #right above the subcategory

admin.site.register(Product, ProductAdmin)

class CategoryAdmin(admin.ModelAdmin):
    pass
    
class SubCategoryAdmin(admin.ModelAdmin):
    pass

admin.site.register(Category, CategoryAdmin)
admin.site.register(SubCategory, SubCategoryAdmin)

########NEW FILE########
__FILENAME__ = 0001_initial

from south.db import db
from django.db import models
from chaining.models import *

class Migration:
    
    def forwards(self, orm):
        
        # Adding model 'Category'
        db.create_table('chaining_category', (
            ('id', orm['chaining.Category:id']),
            ('name', orm['chaining.Category:name']),
        ))
        db.send_create_signal('chaining', ['Category'])
        
        # Adding model 'SubCategory'
        db.create_table('chaining_subcategory', (
            ('id', orm['chaining.SubCategory:id']),
            ('category', orm['chaining.SubCategory:category']),
            ('name', orm['chaining.SubCategory:name']),
        ))
        db.send_create_signal('chaining', ['SubCategory'])
        
        # Adding model 'Product'
        db.create_table('chaining_product', (
            ('id', orm['chaining.Product:id']),
            ('name', orm['chaining.Product:name']),
            ('subcategory', orm['chaining.Product:subcategory']),
        ))
        db.send_create_signal('chaining', ['Product'])
        
    
    
    def backwards(self, orm):
        
        # Deleting model 'Category'
        db.delete_table('chaining_category')
        
        # Deleting model 'SubCategory'
        db.delete_table('chaining_subcategory')
        
        # Deleting model 'Product'
        db.delete_table('chaining_product')
        
    
    
    models = {
        'chaining.category': {
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'chaining.product': {
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'db_index': 'True'}),
            'subcategory': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['chaining.SubCategory']"})
        },
        'chaining.subcategory': {
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['chaining.Category']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        }
    }
    
    complete_apps = ['chaining']

########NEW FILE########
__FILENAME__ = models
from django.db import models

class Category(models.Model):
    name = models.CharField(max_length=255)

    class Meta:
        verbose_name_plural = 'Categories'

    def __unicode__(self):
        return self.name

class SubCategory(models.Model):
    category = models.ForeignKey('Category')
    name = models.CharField(max_length=255)

    class Meta:
        verbose_name = 'Sub-Category'
        verbose_name_plural = 'Sub-Categories'

    def __unicode__(self):
        return self.name


class Product(models.Model):
    name = models.SlugField(max_length=255)
    subcategory = models.ForeignKey(SubCategory)
    
    def __unicode__(self):
        return self.name.title()


########NEW FILE########
__FILENAME__ = views
from django.http import HttpResponse
from django.core import serializers
from models import SubCategory

def subcategory(request, category_id):
    queryset = SubCategory.objects.filter(category=category_id)
    content = serializers.serialize('json', queryset, fields=('pk','name'))
    return HttpResponse(content, content_type='application/json')

########NEW FILE########
__FILENAME__ = admin
from django.conf import settings

from django.contrib import admin, messages
from django.contrib.admin import SimpleListFilter
from django.contrib.contenttypes import generic
from django.contrib.auth.models import User

from django import forms

from django.utils.safestring import mark_safe
from django.utils.translation import ugettext_lazy as _

from treeadmin.admin import TreeAdmin

from arkestra_utilities.widgets.combobox import ComboboxField
from widgetry.tabs.placeholderadmin import ModelAdminWithTabsAndCMSPlaceholder

from contacts_and_people import models

from links.admin import ObjectLinkInline
from links.utils import get_or_create_external_link

from arkestra_utilities.admin_mixins import AutocompleteMixin, SupplyRequestMixin, InputURLMixin, fieldsets
from arkestra_utilities.settings import ENABLE_CONTACTS_AND_PEOPLE_AUTH_ADMIN_INTEGRATION

HAS_PUBLICATIONS = 'publications' in settings.INSTALLED_APPS


# ------------------------- Membership admin -------------------------

class MembershipInline(AutocompleteMixin, admin.TabularInline):
    # for all membership inline admin
    model = models.Membership
    extra = 1
    related_search_fields = {
        'person': ('surname',),
        'entity': ('name',),
    }
    editable_search_fields = ('person', 'entity',)


class MembershipForEntityInline(MembershipInline): # for Entity admin
    exclude = ('display_role',)
    extra = 3
    ordering = ['-importance_to_entity',]


class MembershipForPersonInline(MembershipInline): # for Person admin
    exclude = ('display_role',)
    ordering = ['-importance_to_person',]


class MembershipAdmin(admin.ModelAdmin):
    list_display = ('person', 'entity', 'importance_to_person', 'importance_to_entity',)
    ordering = ['person',]
    related_search_fields = [
        'person',
        'entity',
    ]

# ------------------------- Phone contact admin -------------------------

class PhoneContactInlineForm(forms.ModelForm):
    label = ComboboxField(label = "label", choices=models.PhoneContact.LABEL_CHOICES, required=False)
    country_code = forms.CharField(label="Country code", initial = "44", widget=forms.TextInput(attrs={'size':'4'}))
    area_code = forms.CharField(label="Area code", initial = "29", widget=forms.TextInput(attrs={'size':'5'}))
    number = forms.CharField(label="Number", widget=forms.TextInput(attrs={'size':'10'}))
    internal_extension = forms.CharField(label="Internal extension", widget=forms.TextInput(attrs={'size':'6'}), required=False)

    class Meta:
        model = models.PhoneContact


class PhoneContactInline(generic.GenericTabularInline):
    extra = 3
    model = models.PhoneContact
    form = PhoneContactInlineForm


class PersonAndEntityAdmin(SupplyRequestMixin, AutocompleteMixin, ModelAdminWithTabsAndCMSPlaceholder):

    def _media(self):
        return super(AutocompleteMixin, self).media + super(ModelAdminWithTabsAndCMSPlaceholder, self).media
    media = property(_media)

# ------------------------- PersonLite admin -------------------------

class PersonLiteForm(forms.ModelForm):
    class Meta:
        model = models.PersonLite

    def clean(self):
        super(PersonLiteForm, self).clean()
        if hasattr(self.instance, "person"):
            raise forms.ValidationError(mark_safe(u"A PersonLite who is also a Person must be edited using the Person Admin Interface"))
        return self.cleaned_data


class PersonLiteAdmin(admin.ModelAdmin):
    search_fields = ('surname', 'given_name',)
    form = PersonLiteForm

    def save_model(self, request, obj, form, change):
        """
          OVERRIDING
          If this PersonLite object is infact also a Person object, you cannot ammend it via PersonLiteAdmin
          If PersonLiteForm.clean() is doing its job, it shouldn't be possible to reach the else statement
        """
        if not hasattr(obj, "person"):
            obj.save()

# ------------------------- Person admin -------------------------

class PersonForm(InputURLMixin):
    class Meta:
        model = models.Person

    def __init__(self, *args, **kwargs):
        # disable the user combo if a user aleady has been assigned
        super(PersonForm, self).__init__(*args, **kwargs)
        instance = getattr(self, 'instance', None)
        if instance and instance.id and instance.user:
            self.fields['user'].widget = DisplayUsernameWidget()
            self.fields['user'].help_text = "Once a user has been assigned, it cannot be changed"

    def clean_please_contact(self):
        data = self.cleaned_data['please_contact']
        # only do the check when in "change" mode. there can't be a loop if in "new" mode
        # because nobody can link to us if we did not exist yet before.
        if hasattr(self, 'instance') and type(self.instance) == type(data):
            self.instance.please_contact = data
            has_loop_error, person_list = self.instance.check_please_contact_has_loop(self.instance)
            if has_loop_error:
                r = []
                for p in person_list:
                    r.append(u'"%s"' % p)
                r = u' &rarr; '.join(r)
                raise forms.ValidationError(mark_safe(u"Please prevent loops: %s" % r))
        return data

    def clean(self):
        super(PersonForm, self).clean()

        # set the title
        title = self.cleaned_data["title"] or ""
        link_title = u" ".join(name_part for name_part in [unicode(title), self.cleaned_data["given_name"], self.cleaned_data["surname"]] if name_part)

        # check ExternalLink-related issues
        self.cleaned_data["external_url"] = get_or_create_external_link(self.request,
            self.cleaned_data.get("input_url", None), # a manually entered url
            self.cleaned_data.get("external_url", None), # a url chosen with autocomplete
            self.cleaned_data.get("link_title"), # link title
            "", # link description
            )

        return self.cleaned_data

def create_action(entity):
    def action(modeladmin,request,queryset):
        for person in queryset:
            m = models.Membership(person=person,entity=entity,role="Member")
            m.save()
    name="entity_%s" % (entity,)
    return (name, (action, name,"Add selected Person to %s as 'Member'" % (entity,)))


class HasHomeRole(SimpleListFilter):
    title = _('Has home role')
    parameter_name = 'homerole'

    def lookups(self, request, model_admin):
        return (
            ('ok', _('OK')),
            ('missing', _('Missing')),
        )

    def queryset(self, request, queryset):
        if self.value() == 'ok':
            return queryset.filter(member_of__importance_to_person=5)
        if self.value() == 'missing':
            return queryset.exclude(member_of__importance_to_person=5)

class PersonIsExternal(SimpleListFilter):
    title = _('Profile is hosted')
    parameter_name = 'hosted'

    def lookups(self, request, model_admin):
        return (
            ('external', _('Externally')),
            ('internal', _('In Arkestra')),
        )

    def queryset(self, request, queryset):
        if self.value() == 'external':
            return queryset.exclude(external_url=None)
        if self.value() == 'internal':
            return queryset.filter(external_url=None)


class PersonEntity(SimpleListFilter):
    title = _('Entity membership')
    parameter_name = 'entity'

    def lookups(self, request, model_admin):
        return (
            ('my', _('My entities')),
            ('nobody', _('None')),
        )

    def queryset(self, request, queryset):
        entities = models.Entity.objects.all()
        myentities = entities.filter(people__in=request.user.person_user.all())
        if self.value() == 'my':
            return queryset.filter(entities__in=myentities)
        if self.value() == 'nobody':
            return queryset.exclude(entities__in=entities)


class PersonAdmin(PersonAndEntityAdmin):
    search_fields = ['given_name','surname','institutional_username',]
    form = PersonForm
    list_filter = (HasHomeRole, PersonIsExternal, PersonEntity, 'active')
    list_display = ('surname', 'given_name','get_entity_short_name', 'active')
    filter_horizontal = ('entities',)
    prepopulated_fields = {'slug': ('given_name', 'middle_names', 'surname',)}
    readonly_fields = ['address_report',]

    def address_report(self, instance):
        if instance.building and instance.get_full_address == instance.get_entity.get_full_address:
            return "Warning: this Person has the Specify Building field set, probably unnecessarily."
        else:
            return "%s" % (", ".join(instance.get_full_address)) or "<span class='errors'>Warning: this person has no address.</span>"

    address_report.short_description = "Address"
    address_report.allow_tags = True

    name_fieldset = ('Name', {'fields': ('title', 'given_name', 'middle_names', 'surname',),})
    override_fieldset = ('Over-ride default output', {
        'fields': ('please_contact', 'building',),
        'classes': ('collapse',)
        })
    advanced_fieldset =  (
        'Institutional settings', {
            'fields': ('active', 'user', 'institutional_username', 'staff_id',),
        })
    description_fieldset = (
        '', {
        'fields': ('description',),
        'classes': ('plugin-holder', 'plugin-holder-nopage',)
        })
    tabs = [
        ('Personal details', {'fieldsets': (name_fieldset, fieldsets["image"])}),
        ('Contact information', {
                'fieldsets': (fieldsets["email"], fieldsets["address_report"], fieldsets["location"], override_fieldset),
                'inlines': [PhoneContactInline,]
                }),
        ('Description', {'fieldsets': (description_fieldset,)}),
        ('Entities', {'inlines':(MembershipForPersonInline,)}),
        ('Links', {'inlines': (ObjectLinkInline,),}),
        ('Advanced settings', {'fieldsets': (fieldsets["url"], fieldsets["slug"], advanced_fieldset)}),
    ]

    related_search_fields = ('external_url', 'please_contact', 'override_entity', 'user', 'building')

    def get_actions(self,request):
        return dict(create_action(e) for e in models.Entity.objects.all())


class DisplayUsernameWidget(forms.TextInput):
    def render(self, name, value, attrs=None):
        user = User.objects.get(pk=value)
        default = super(DisplayUsernameWidget,self).render(name, value, attrs)
        return mark_safe(u'<span>Assigned user: <strong>%s</strong></span><div style="display: none;">%s</div>' % (user,default))

# ------------------------- EntityLite admin -------------------------

class EntityLiteForm(forms.ModelForm):
    class Meta:
        model = models.EntityLite

    def clean(self):
        super(EntityLiteForm, self).clean()
        if hasattr(self.instance, "entity"):
            raise forms.ValidationError(mark_safe(u"An EntityLite who is also a full Entity must be edited using the Entity Admin Interface"))
        return self.cleaned_data


class EntityLiteAdmin(admin.ModelAdmin):
    form = EntityLiteForm

    def save_model(self, request, obj, form, change):
        """
          OVERRIDING
          If this EntityLite object is infact also an Entity object, you cannot ammend it via EntityLiteAdmin
          If EntityLiteForm.clean() is doing its job, it shouldn't be possible to reach the else statement
        """
        if not hasattr(obj, "entity"):
            obj.save()

# ------------------------- Entity admin -------------------------

class EntityForm(InputURLMixin):
    class Meta:
        model = models.Entity

    def clean(self):
        super(EntityForm, self).clean()
        if self.cleaned_data["website"]:
            try:
                # does an instance exist in the database with the same website?
                entity = models.Entity.objects.get(website=self.cleaned_data["website"])
            except:
                # nothing matched, so we can safely go ahead with this one
                pass
            else:
                # one existed already - if it's this one that's OK
                if not self.instance.pk == entity.pk:
                    raise forms.ValidationError('Another entity (%s) already has the same home page (%s).' % (entity, self.cleaned_data["website"]))


        # check ExternalLink-related issues
        self.cleaned_data["external_url"] = get_or_create_external_link(self.request,
            self.cleaned_data.get("input_url", None), # a manually entered url
            self.cleaned_data.get("external_url", None), # a url chosen with autocomplete
            self.cleaned_data.get("name"), # link title
            "", # link description
        )

        if not self.cleaned_data["website"] and not self.cleaned_data["external_url"]:
            message = "This entity has neither a home page nor an External URL. Are you sure you want to do that?"
            messages.add_message(self.request, messages.WARNING, message)
        if not self.cleaned_data["short_name"]:
            self.cleaned_data["short_name"] = self.cleaned_data["name"]
        return self.cleaned_data


class EntityIsExternal(SimpleListFilter):
    title = _('website hosted')
    parameter_name = 'hosted'

    def lookups(self, request, model_admin):
        return (
            ('external', _('Externally')),
            ('internal', _('In Arkestra')),
            ('nowebsite', _('No website')),
        )

    def queryset(self, request, queryset):
        if self.value() == 'external':
            return queryset.exclude(external_url=None)
        if self.value() == 'internal':
            return queryset.exclude(website=None)
        if self.value() == 'nowebsite':
            return queryset.filter(website=None, external_url=None)

class MyEntity(SimpleListFilter):
    title = _('Entity membership')
    parameter_name = 'entity'

    def lookups(self, request, model_admin):
        return (
            ('my', _('My entities')),
        )

    def queryset(self, request, queryset):
        if self.value() == 'my':
            return queryset.filter(people__in=request.user.person_user.all())


class EntityAdmin(PersonAndEntityAdmin, TreeAdmin):
    filter_include_ancestors = False
    search_fields = ['name',]
    form = EntityForm
    list_display = ('name',)
    list_filter = (EntityIsExternal, MyEntity, 'abstract_entity')
    list_max_show_all = 400
    list_per_page = 400
    related_search_fields = ['parent', 'building', 'website', 'external_url',]
    prepopulated_fields = {
            'slug': ('name',)
            }
    readonly_fields = ['address_report']
    filter_include_ancestors = True

    def address_report(self, instance):
        if not instance.abstract_entity:
            return "%s" % (", ".join(instance.get_full_address)) or "Warning: this Entity has no address."
        else:
            return "This is an abstract entity and therefore has no address"

    address_report.short_description = "Address"

    name_fieldset = ('Name', {'fields': ('name', 'short_name')})
    website_fieldset = ('', {'fields': ('website',)})
    entity_hierarchy_fieldset = ('Entity hierarchy', {
        'fields': ('parent', 'display_parent', 'abstract_entity'),
    })
    building_fieldset = ('', {'fields': ('building', 'building_recapitulates_entity_name',),})

    contact_page_fieldset = (
        ('Automatic contacts & people page', {
            'fields': ('auto_contacts_page', 'contacts_page_menu_title',),
        }),
        ('Text for the contacts & people page', {
            'fields': ('contacts_page_intro',),
            'classes': ('plugin-holder', 'plugin-holder-nopage'),
        }),
        )
    news_page_fieldset = (
        ('Automatic news & events page', {
            'fields': ('auto_news_page', 'news_page_menu_title',),
        }),
        ('Text for the news & events page', {
            'fields': ('news_page_intro',),
            'classes': ('plugin-holder', 'plugin-holder-nopage'),
        }),
        )
    vacancies_page_fieldset = (
        ('Automatic vacancies & studentships page', {
            'fields': ('auto_vacancies_page', 'vacancies_page_menu_title',),
        }),
        ('Text for the vacancies & studentships page', {
            'fields': ('vacancies_page_intro',),
            'classes': ('plugin-holder', 'plugin-holder-nopage'),
        }),
        )

    tabs = [
        ('Basic information', {'fieldsets': (name_fieldset, fieldsets["image"], website_fieldset, entity_hierarchy_fieldset)}),
        ('Location', {'fieldsets': (fieldsets["address_report"], building_fieldset, fieldsets["location"],)}),
        ('Contact', {
            'fieldsets': (fieldsets["email"],),
            'inlines': (PhoneContactInline,)
        }),
        ('Contacts & people', {'fieldsets': contact_page_fieldset}),
        ('News & events', {'fieldsets': news_page_fieldset}),
        ('Vacancies & studentships', {'fieldsets': vacancies_page_fieldset}),
        ('People', {'inlines':(MembershipForEntityInline,)}),
        ('Advanced settings', {'fieldsets': (fieldsets["url"], fieldsets["slug"],) }),
        ]

    if 'publications' in settings.INSTALLED_APPS:
        publications_fieldset = (
            'Publications', {
                'fields': ('auto_publications_page', 'publications_page_menu_title',),
             }),
        tabs.append(
            ('Publications', {'fieldsets': publications_fieldset})
        )


# ------------------------- Building and site admin -------------------------

class BuildingAdminForm(forms.ModelForm):

    class Meta:
        model = models.Building


    def clean(self):
        super(BuildingAdminForm, self).clean()
        if self.cleaned_data["number"] and not self.cleaned_data["street"]:
            raise forms.ValidationError("Silly. You can't have a street number but no street, can you?")
        if self.cleaned_data["additional_street_address"] and not self.cleaned_data["street"]:
            self.cleaned_data["street"] = self.cleaned_data["additional_street_address"]
            self.cleaned_data["additional_street_address"] = None
        if not (self.cleaned_data["postcode"] or self.cleaned_data["name"] or self.cleaned_data["street"]):
            raise forms.ValidationError("That's not much of an address, is it?")
        return self.cleaned_data


class BuildingInline(admin.StackedInline):
    model = models.Building
    extra = 1


class SiteAdmin(admin.ModelAdmin):
    list_display = ('site_name', 'post_town', 'country', 'buildings')


class BuildingAdmin(ModelAdminWithTabsAndCMSPlaceholder):
    list_filter = ('site',)
    list_display = ('__unicode__', 'site', 'has_map')
    search_fields = ['name','number','street','postcode','site__site_name']
    form = BuildingAdminForm
    address_fieldsets = (('', {'fields': ('name', 'number', 'street', 'additional_street_address', 'postcode', 'site', 'slug'),}),)
    details_fieldsets = (('', {'fields': ('summary', 'image',),}),)
    description_fieldsets = (('', {
        'fields': ('description',),
        'classes': ('plugin-holder', 'plugin-holder-nopage'),
        }),)
    getting_here_fieldsets = (('', {
        'fields': ('getting_here',),
        'classes': ('plugin-holder', 'plugin-holder-nopage'),
        }),)
    access_and_parking_fieldsets = (('', {
        'fields': ('access_and_parking',),
        'classes': ('plugin-holder', 'plugin-holder-nopage'),
        }),)
    map_fieldsets = (('', {'fields': ('map', 'latitude', 'longitude', 'zoom',),}),)
    tabs = (
        ('Address', {'fieldsets': address_fieldsets,}),
        ('Details', {'fieldsets': details_fieldsets,}),
        ('Description', {'fieldsets': description_fieldsets,}),
        ('Getting here', {'fieldsets': getting_here_fieldsets,}),
        ('Access and parking', {'fieldsets': access_and_parking_fieldsets,}),
        ('Map', {'fieldsets': map_fieldsets,}),
    )

try:
    admin.site.register(models.Person, PersonAdmin)
except admin.sites.AlreadyRegistered:
    pass


admin.site.register(models.Building,BuildingAdmin)
admin.site.register(models.Entity,EntityAdmin)
admin.site.register(models.Site,SiteAdmin)
admin.site.register(models.Title)

# ------------------------- admin hacks -------------------------
# Allows us to create Users who don't have passwords - because their
# passwords will be dealt with by LDAP
#
# So we:
#   1   unregister UserAdmin
#   2   import the extra things we need
#   3   create two forms:
#       *   MyNoPasswordCapableUserCreationForm for adding users
#       *   MyNoPasswordCapableUserChangeForm for editing users
#       each of these gets a new has_password field and __init__()/save()/clean() methods
#   4   redefine the UserAdmin.fieldsets and UserAdmin.add_fieldsets
#   5   define a custom UserAdmin to use all the above
#   6   register the custom UserAdmin

if ENABLE_CONTACTS_AND_PEOPLE_AUTH_ADMIN_INTEGRATION:
    admin.site.unregister(User)
    from django.contrib.auth.forms import UserCreationForm, UserChangeForm, AdminPasswordChangeForm
    from django.contrib.auth.admin import UserAdmin

    class MyNoPasswordCapableUserCreationForm(UserCreationForm):
        has_password = forms.BooleanField(
            label="has password",
            help_text="LDAP users don't need a password",
            required=False,
            initial=True
            )

        def clean(self):
            data = self.cleaned_data
            if self.cleaned_data['has_password'] in (False, None,):
                if 'password1' in self.errors.keys():
                    del self.errors['password1']
                if 'password2' in self.errors.keys():
                    del self.errors['password2']
                # save() will remove this temp password again.
                self.cleaned_data['password1'] = self.cleaned_data['password2'] = 'xxxxxxxxxxxxxxx'
            return data

        def save(self, commit=True):
            instance = super(MyNoPasswordCapableUserCreationForm, self).save(commit=False)
            if self.cleaned_data['has_password'] in (False, None,):
                instance.set_unusable_password()
            if commit:
                instance.save()
                if hasattr(instance, 'save_m2m'):
                    instance.save_m2m()
                return instance
            else:
                return instance

    class MyNoPasswordCapableUserChangeForm(UserChangeForm):
        has_password = forms.BooleanField(
            label="has password",
            help_text="LDAP users don't need a password",
            required=False,
            initial=True
            )

        def __init__(self, *args, **kwargs):
            r = super(MyNoPasswordCapableUserChangeForm,self).__init__(*args, **kwargs)
            instance = kwargs.get('instance',None)
            if instance and instance.id:
                if instance.has_usable_password():
                    self.initial['has_password'] = True
                else:
                    self.initial['has_password'] = False
            return r

        def save(self, commit=True):
            instance = super(MyNoPasswordCapableUserChangeForm, self).save(commit=False)
            if self.cleaned_data['has_password'] in (False, None,):
                instance.set_unusable_password()
            if commit:
                instance.save()
                if hasattr(instance, 'save_m2m'):
                    instance.save_m2m()
                return instance
            else:
                return instance

    user_admin_fieldsets = list(UserAdmin.fieldsets)
    user_admin_fieldsets[0] = (None, {'fields': ('username', ('password', 'has_password',),)})

    user_admin_add_fieldsets = list(UserAdmin.add_fieldsets)
    user_admin_add_fieldsets[0] = (None, {'fields': ('username', ('password', 'has_password',),)})


    class MyUserAdmin(UserAdmin):
        fieldsets = user_admin_fieldsets
        add_fieldsets = user_admin_add_fieldsets
        form = MyNoPasswordCapableUserChangeForm
        add_form = MyNoPasswordCapableUserCreationForm
        filter_horizontal = ('user_permissions', 'groups') # not needed in Django 1.5

    admin.site.register(User, MyUserAdmin)

########NEW FILE########
__FILENAME__ = cms_plugins
from django.http import HttpResponseRedirect, HttpResponse
from django.utils.translation import ugettext as _

from cms.plugin_base import CMSPluginBase
from cms.plugin_pool import plugin_pool
from models import EntityAutoPageLinkPluginEditor, EntityDirectoryPluginEditor, EntityMembersPluginEditor

from arkestra_utilities import admin_tabs_extension
from arkestra_utilities.admin_mixins import AutocompleteMixin

from templatetags.entity_tags import work_out_entity
from models import Membership


class EntityAutoPageLinkPluginPublisher(AutocompleteMixin, CMSPluginBase):
    model = EntityAutoPageLinkPluginEditor
    name = _("Entity auto page link")
    render_template = "entity-auto-page-link.html"
    text_enabled = True
 
    # autocomplete fields
    related_search_fields = ['entity',]
    
    def render(self, context, instance, placeholder):

        # get a tuple containing for example:
        #    Kind                 slug       title_field                 flag for auto page
        # (u'Contacts & people', 'contact', 'contacts_page_menu_title', 'auto_contacts_page')
        LINK_TUPLE = EntityAutoPageLinkPluginEditor.AUTO_PAGES[instance.link_to]
        kind = LINK_TUPLE[1]
        field_name = LINK_TUPLE[2]
        auto_page_flag = LINK_TUPLE[3]
        
        entity = work_out_entity(context, None)
        link_entity = instance.entity or entity
        if link_entity:
            #  instance.entity not set, or instance.entity = entity
            if entity == link_entity:
                link_title = getattr(entity, field_name)
            #  instance.entity set and instance.entity != entity (so we provide its name)
            else:
                link_title = instance.entity.short_name + ': ' + getattr(instance.entity,field_name)
                entity = instance.entity

            if getattr(entity, auto_page_flag):
                link = entity.get_auto_page_url(kind)               
                link_title = instance.text_override or link_title
            
                context.update({ 
                    'link': link,
                    'link_title': link_title,
                })
            return context
    
    def icon_src(self, instance):
        return "/static/plugin_icons/entity_auto_page_link.png"

class EntityDirectoryPluginPublisher(AutocompleteMixin, CMSPluginBase):
    model = EntityDirectoryPluginEditor
    name = _("Directory")
    render_template = "directory.html"
    text_enabled = True
 
    # autocomplete fields
    related_search_fields = ['entity',]

    def icon_src(self, instance):
        return "/static/plugin_icons/entity_directory.png"
        
    def render(self, context, instance, placeholder):
        if instance.entity:
            entity = instance.entity
        else:
            entity = work_out_entity(context, None)
        descendants = entity.get_descendants()
        if descendants:
            # find our base level
            first_level = descendants[0].level
            # filter to maximum sub-level depth    
            if instance.levels:
                maximum_level = first_level + instance.levels
                descendants = descendants.filter(level__lt = maximum_level)
            # apply all the attributes we need to our descendant entities
            for descendant in descendants:
                # reset the level, so that first_level is 0
                descendant.level = descendant.level - first_level
                if descendant.website and (descendant.level < instance.display_descriptions_to_level or instance.display_descriptions_to_level == None):                    
                    descendant.description = descendant.website.get_meta_description()

        context.update({
            'entities': descendants,
            'directory': instance,
        })
        return context


class EntityMembersPluginPublisher(AutocompleteMixin, CMSPluginBase):
    """
    Returns all the memberships in the entity and its descendants; the template groups them by entity"""
    model = EntityMembersPluginEditor
    name = _("Member list")
    render_template = "entity_members_plugin.html"
    text_enabled = True
 
    # autocomplete fields
    related_search_fields = ['entity',]

    def icon_src(self, instance):
        return "/static/plugin_icons/entity_members.png"
           
    def render(self, context, instance, placeholder):
        if instance.entity:
            entity = instance.entity
        else:
            entity = work_out_entity(context, None)

        entities = entity.get_descendants(include_self = True)
        
        memberships = Membership.objects.filter(entity__in = entities).order_by('entity', '-importance_to_entity')

        nest = memberships.values('entity',).distinct().count() > 1 or False

        context.update({
            'entity': entity,
            'memberships': memberships,
            'nest': nest,
            })
        return context

plugin_pool.register_plugin(EntityDirectoryPluginPublisher)
plugin_pool.register_plugin(EntityMembersPluginPublisher)
plugin_pool.register_plugin(EntityAutoPageLinkPluginPublisher)

########NEW FILE########
__FILENAME__ = link_schemas
# register all interesting models for search

from contacts_and_people import models, admin
from links import schema, LinkWrapper
from django.utils.encoding import smart_unicode
from django.contrib.auth.admin import UserAdmin
from easy_thumbnails.files import get_thumbnailer


class PersonWrapper(LinkWrapper):
    search_fields = admin.PersonAdmin.search_fields
    special_attributes = ["phone", "email", "get_full_address", "get_building"]
    block_level_item_template = "contacts_and_people/person_block_level_list_item.html"
    link_format_choices = (
        (u"title", u"Name only"),
        (u"details", u"Name & summary (role)"),
        (u"details image", u"Name, summary (role) & image"),
        (u"details contact image", u"Name, summary (role), contact information & image"),
        (u"details contact", u"Name, summary (role) & contact information"),
        )

    def summary(self):
        data = []
        data.append(smart_unicode(self.obj.get_role))
        data.append(smart_unicode(self.obj.get_entity))
        return ', '.join(data)

    def thumbnail_url(self):
        try:
            size = self.THUMBNAIL_SIZE
            source = self.obj.image.file
            return get_thumbnailer(source).get_thumbnail({
                'subject_location': u'',
                'upscale': True,
                'crop': True,
                'size': (size, size)
            }).url
        except Exception, e:
            print "Error in personwrapper", e
            url = None
        return url

    def image(self):
        return self.obj.image

    def heading(self):
        return "Related people"

    def phone(self):
        return self.obj.get_phone_contacts()

    def email(self):
        return self.obj.get_email()

    def get_full_address(self):
        return self.obj.get_full_address

    def get_building(self):
        return self.obj.get_building

schema.register_wrapper(models.Person, PersonWrapper)


class UserWrapper(LinkWrapper):
    search_fields = UserAdmin.search_fields

    def title(self):
        return "%s: %s" % (self.obj.get_full_name(), self.obj.__unicode__())

    def short_text(self):
        return u"%s %s" % (self.obj.first_name, self.obj.last_name)

    def summary(self):
        data = [group.__unicode__() for group in self.obj.groups.all()]
        if self.obj.is_staff:
            data.append(u"Admin user")
        if self.obj.is_superuser:
            data.append(u"Super user")
        data.append(u"Last login: %s" % unicode(self.obj.last_login))
        return '<br /> '.join(data)

schema.register_wrapper(models.User, UserWrapper)


class EntityWrapper(LinkWrapper):
    search_fields = admin.EntityAdmin.search_fields
    special_attributes = ["phone", "email", "get_full_address", "get_building"]
    block_level_item_template = "contacts_and_people/entity_block_level_list_item.html"
    link_format_choices = (
        (u"title", u"Name only"),
        (u"details", u"Name & summary (description)"),
        (u"details image", u"Name, summary (description) & image"),
        (u"details contact image", u"Name, summary (description), contact information & image"),
        (u"details contact", u"Name, summary (description) & contact information"),
        )

    def summary(self):
        if self.obj.abstract_entity:
            return "Abstract entity - description unavailable"
        if self.obj.external_url:
            return "External entity at " + self.obj.external_url.url
        if self.obj.get_website and self.obj.get_website.get_meta_description():
            return self.obj.get_website.get_meta_description()
        else:
            return ""

    def image(self):
        return self.obj.image

    def heading(self):
        return "Related pages"

    def url(self):
        return self.obj.get_website_url() or "This entity can't be linked to"

    def short_text(self):
        return unicode(self.obj.short_name)

    def admin_metadata(self):
        entity_path = "<strong>Path:</strong> %s" % u" &rsaquo; ".join(
            entity.short_name for entity in self.obj.get_ancestors(
                include_self=True
                )
            )
        if self.summary():
            return entity_path
        elif self.obj.get_website:
            return u"""
            %s<br /><span class='errornote'>The page <em>%s</em> has no
            description metadata. If you are responsible for this page, please
            address this problem <strong>immediately.</strong></span>
            """ % (entity_path, unicode(self.obj.get_website))
        else:
            return u"""
            %s<br /><span class='errornote'>This entity has neither a home page
            nor an External URL.</span>
            """ % entity_path

    def phone(self):
        return self.obj.phone_contacts.all()

    def email(self):
        return self.obj.email

    def get_full_address(self):
        return self.obj.get_full_address

    def get_building(self):
        return self.obj.get_building

schema.register_wrapper([models.Entity], EntityWrapper)


class BuildingWrapper(LinkWrapper):
    search_fields = admin.BuildingAdmin.search_fields
    block_level_item_template = "contacts_and_people/building_block_level_list_item.html"
    special_attributes = ["map"]
    link_format_choices = (
        (u"title", u"Name only"),
        (u"details", u"Name & summary (address)"),
        (u"details image", u"Name, summary (address) & image"),
        )

    def summary(self):
        return ", ".join(self.obj.get_postal_address[1:])

    def heading(self):
        return "Places"

    def image(self):
        return self.obj.image

    def map(self):
        return self.obj.has_map()

    def thumbnail_url(self):
        try:
            size = self.THUMBNAIL_SIZE
            source = self.obj.image.file
            return get_thumbnailer(source).get_thumbnail({
                'subject_location': u'',
                'upscale': True,
                'crop': True,
                'size': (size, size)
            }).url
        except Exception, e:
            print e
            url = None
        return url

schema.register_wrapper([models.Building], BuildingWrapper)

########NEW FILE########
__FILENAME__ = menu
menu_dict = {
    "application": "contacts_and_people",
    "auto_page_attribute": "auto_contacts_page",
    "cms_plugin_model_name": None,
    "title_attribute": "contacts_page_menu_title",
    "url_attribute": "contact-entity",
    "sub_menus": ()
    }

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'Site'
        db.create_table('contacts_and_people_site', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('site_name', self.gf('django.db.models.fields.CharField')(unique=True, max_length=50)),
            ('post_town', self.gf('django.db.models.fields.CharField')(max_length=50)),
            ('country', self.gf('django.db.models.fields.CharField')(max_length=50)),
            ('description', self.gf('django.db.models.fields.TextField')(max_length=500, null=True, blank=True)),
        ))
        db.send_create_signal('contacts_and_people', ['Site'])

        # Adding model 'Building'
        db.create_table('contacts_and_people_building', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('number', self.gf('django.db.models.fields.CharField')(max_length=10, null=True, blank=True)),
            ('street', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('additional_street_address', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('postcode', self.gf('django.db.models.fields.CharField')(max_length=9, null=True, blank=True)),
            ('site', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['contacts_and_people.Site'])),
            ('slug', self.gf('django.db.models.fields.SlugField')(db_index=True, max_length=255, unique=True, null=True, blank=True)),
            ('image', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Image'], null=True, blank=True)),
            ('summary', self.gf('django.db.models.fields.TextField')(default='', max_length=256)),
            ('description', self.gf('django.db.models.fields.related.ForeignKey')(related_name='building_description', null=True, to=orm['cms.Placeholder'])),
            ('getting_here', self.gf('django.db.models.fields.related.ForeignKey')(related_name='getting_here', null=True, to=orm['cms.Placeholder'])),
            ('access_and_parking', self.gf('django.db.models.fields.related.ForeignKey')(related_name='building_access_and_parking', null=True, to=orm['cms.Placeholder'])),
            ('map', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('latitude', self.gf('django.db.models.fields.FloatField')(null=True, blank=True)),
            ('longitude', self.gf('django.db.models.fields.FloatField')(null=True, blank=True)),
            ('zoom', self.gf('django.db.models.fields.IntegerField')(default=17, null=True, blank=True)),
        ))
        db.send_create_signal('contacts_and_people', ['Building'])

        # Adding model 'PhoneContact'
        db.create_table('contacts_and_people_phonecontact', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('label', self.gf('django.db.models.fields.CharField')(max_length=64, null=True, blank=True)),
            ('country_code', self.gf('django.db.models.fields.CharField')(default='44', max_length=5)),
            ('area_code', self.gf('django.db.models.fields.CharField')(default='029', max_length=5)),
            ('number', self.gf('django.db.models.fields.CharField')(max_length=12)),
            ('internal_extension', self.gf('django.db.models.fields.CharField')(max_length=6, null=True, blank=True)),
            ('content_type', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['contenttypes.ContentType'])),
            ('object_id', self.gf('django.db.models.fields.IntegerField')(db_index=True)),
        ))
        db.send_create_signal('contacts_and_people', ['PhoneContact'])

        # Adding model 'EntityLite'
        db.create_table('contacts_and_people_entitylite', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=100)),
        ))
        db.send_create_signal('contacts_and_people', ['EntityLite'])

        # Adding model 'Entity'
        db.create_table('contacts_and_people_entity', (
            ('entitylite_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['contacts_and_people.EntityLite'], unique=True, primary_key=True)),
            ('url', self.gf('django.db.models.fields.URLField')(max_length=200, null=True, blank=True)),
            ('external_url', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='entity_item', null=True, to=orm['links.ExternalLink'])),
            ('slug', self.gf('django.db.models.fields.SlugField')(db_index=True, unique=True, max_length=60, blank=True)),
            ('precise_location', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('access_note', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('email', self.gf('django.db.models.fields.EmailField')(max_length=75, null=True, blank=True)),
            ('image', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Image'], null=True, blank=True)),
            ('short_name', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('abstract_entity', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('parent', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='children', null=True, to=orm['contacts_and_people.Entity'])),
            ('display_parent', self.gf('django.db.models.fields.BooleanField')(default=True)),
            ('building_recapitulates_entity_name', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('building', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['contacts_and_people.Building'], null=True, blank=True)),
            ('website', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='entity', unique=True, null=True, to=orm['cms.Page'])),
            ('auto_news_page', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('news_page_menu_title', self.gf('django.db.models.fields.CharField')(default='News & events', max_length=50)),
            ('news_page_intro', self.gf('django.db.models.fields.related.ForeignKey')(related_name='news_page_intro', null=True, to=orm['cms.Placeholder'])),
            ('auto_contacts_page', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('contacts_page_menu_title', self.gf('django.db.models.fields.CharField')(default='Contacts & people', max_length=50)),
            ('contacts_page_intro', self.gf('django.db.models.fields.related.ForeignKey')(related_name='contacts_page_intro', null=True, to=orm['cms.Placeholder'])),
            ('auto_vacancies_page', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('vacancies_page_menu_title', self.gf('django.db.models.fields.CharField')(default='Vacancies & studentships', max_length=50)),
            ('vacancies_page_intro', self.gf('django.db.models.fields.related.ForeignKey')(related_name='vacancies_page_intro', null=True, to=orm['cms.Placeholder'])),
            # ('auto_publications_page', self.gf('django.db.models.fields.BooleanField')(default=False)),
            # ('publications_page_menu_title', self.gf('django.db.models.fields.CharField')(default='Publications', max_length=50)),
            ('lft', self.gf('django.db.models.fields.PositiveIntegerField')(db_index=True)),
            ('rght', self.gf('django.db.models.fields.PositiveIntegerField')(db_index=True)),
            ('tree_id', self.gf('django.db.models.fields.PositiveIntegerField')(db_index=True)),
            ('level', self.gf('django.db.models.fields.PositiveIntegerField')(db_index=True)),
        ))
        db.send_create_signal('contacts_and_people', ['Entity'])

        # Adding model 'Title'
        db.create_table('contacts_and_people_title', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('title', self.gf('django.db.models.fields.CharField')(unique=True, max_length=50)),
            ('abbreviation', self.gf('django.db.models.fields.CharField')(unique=True, max_length=20)),
        ))
        db.send_create_signal('contacts_and_people', ['Title'])

        # Adding model 'PersonLite'
        db.create_table('contacts_and_people_personlite', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('title', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['contacts_and_people.Title'], to_field='abbreviation', null=True, blank=True)),
            ('given_name', self.gf('django.db.models.fields.CharField')(max_length=50, null=True, blank=True)),
            ('middle_names', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('surname', self.gf('django.db.models.fields.CharField')(max_length=50)),
        ))
        db.send_create_signal('contacts_and_people', ['PersonLite'])

        # Adding model 'Person'
        db.create_table('contacts_and_people_person', (
            ('personlite_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['contacts_and_people.PersonLite'], unique=True, primary_key=True)),
            ('url', self.gf('django.db.models.fields.URLField')(max_length=200, null=True, blank=True)),
            ('external_url', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='person_item', null=True, to=orm['links.ExternalLink'])),
            ('slug', self.gf('django.db.models.fields.SlugField')(db_index=True, unique=True, max_length=60, blank=True)),
            ('precise_location', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('access_note', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('email', self.gf('django.db.models.fields.EmailField')(max_length=75, null=True, blank=True)),
            ('image', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Image'], null=True, blank=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='person_user', unique=True, null=True, to=orm['auth.User'])),
            ('institutional_username', self.gf('django.db.models.fields.CharField')(max_length=10, null=True, blank=True)),
            ('active', self.gf('django.db.models.fields.BooleanField')(default=True)),
            ('description', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['cms.Placeholder'], null=True)),
            ('building', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['contacts_and_people.Building'], null=True, blank=True)),
            ('override_entity', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='people_override', null=True, to=orm['contacts_and_people.Entity'])),
            ('please_contact', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='contact_for', null=True, to=orm['contacts_and_people.Person'])),
            ('staff_id', self.gf('django.db.models.fields.CharField')(max_length=20, null=True, blank=True)),
            ('data_feed_locked', self.gf('django.db.models.fields.BooleanField')(default=False)),
        ))
        db.send_create_signal('contacts_and_people', ['Person'])

        # Adding model 'Teacher'
        db.create_table('contacts_and_people_teacher', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('person', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='teacher', unique=True, null=True, to=orm['contacts_and_people.Person'])),
            ('dummy_field_one', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('dummy_field_two', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
        ))
        db.send_create_signal('contacts_and_people', ['Teacher'])

        # Adding model 'Membership'
        db.create_table('contacts_and_people_membership', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('person', self.gf('django.db.models.fields.related.ForeignKey')(related_name='member_of', to=orm['contacts_and_people.Person'])),
            ('entity', self.gf('django.db.models.fields.related.ForeignKey')(related_name='members', to=orm['contacts_and_people.Entity'])),
            ('display_role', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='display_roles', null=True, to=orm['contacts_and_people.Membership'])),
            ('key_contact', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('role', self.gf('django.db.models.fields.CharField')(max_length=50, null=True, blank=True)),
            ('importance_to_person', self.gf('django.db.models.fields.IntegerField')(default=1, null=True, blank=True)),
            ('importance_to_entity', self.gf('django.db.models.fields.IntegerField')(default=1, null=True, blank=True)),
        ))
        db.send_create_signal('contacts_and_people', ['Membership'])

        # Adding model 'EntityAutoPageLinkPluginEditor'
        db.create_table('cmsplugin_entityautopagelinkplugineditor', (
            ('cmsplugin_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['cms.CMSPlugin'], unique=True, primary_key=True)),
            ('link_to', self.gf('django.db.models.fields.CharField')(max_length=50)),
            ('entity', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='auto_page_plugin', null=True, to=orm['contacts_and_people.Entity'])),
            ('text_override', self.gf('django.db.models.fields.CharField')(max_length=256, null=True, blank=True)),
        ))
        db.send_create_signal('contacts_and_people', ['EntityAutoPageLinkPluginEditor'])

        # Adding model 'EntityDirectoryPluginEditor'
        db.create_table('cmsplugin_entitydirectoryplugineditor', (
            ('cmsplugin_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['cms.CMSPlugin'], unique=True, primary_key=True)),
            ('entity', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='directory_plugin', null=True, to=orm['contacts_and_people.Entity'])),
            ('levels', self.gf('django.db.models.fields.PositiveSmallIntegerField')(null=True, blank=True)),
            ('display_descriptions_to_level', self.gf('django.db.models.fields.PositiveSmallIntegerField')(default=0, null=True, blank=True)),
            ('link_icons', self.gf('django.db.models.fields.BooleanField')(default=True)),
            ('use_short_names', self.gf('django.db.models.fields.BooleanField')(default=True)),
        ))
        db.send_create_signal('contacts_and_people', ['EntityDirectoryPluginEditor'])

        # Adding model 'EntityMembersPluginEditor'
        db.create_table('cmsplugin_entitymembersplugineditor', (
            ('cmsplugin_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['cms.CMSPlugin'], unique=True, primary_key=True)),
            ('entity', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='entity_members_plugin', null=True, to=orm['contacts_and_people.Entity'])),
        ))
        db.send_create_signal('contacts_and_people', ['EntityMembersPluginEditor'])


    def backwards(self, orm):
        
        # Deleting model 'Site'
        db.delete_table('contacts_and_people_site')

        # Deleting model 'Building'
        db.delete_table('contacts_and_people_building')

        # Deleting model 'PhoneContact'
        db.delete_table('contacts_and_people_phonecontact')

        # Deleting model 'EntityLite'
        db.delete_table('contacts_and_people_entitylite')

        # Deleting model 'Entity'
        db.delete_table('contacts_and_people_entity')

        # Deleting model 'Title'
        db.delete_table('contacts_and_people_title')

        # Deleting model 'PersonLite'
        db.delete_table('contacts_and_people_personlite')

        # Deleting model 'Person'
        db.delete_table('contacts_and_people_person')

        # Deleting model 'Teacher'
        db.delete_table('contacts_and_people_teacher')

        # Deleting model 'Membership'
        db.delete_table('contacts_and_people_membership')

        # Deleting model 'EntityAutoPageLinkPluginEditor'
        db.delete_table('cmsplugin_entityautopagelinkplugineditor')

        # Deleting model 'EntityDirectoryPluginEditor'
        db.delete_table('cmsplugin_entitydirectoryplugineditor')

        # Deleting model 'EntityMembersPluginEditor'
        db.delete_table('cmsplugin_entitymembersplugineditor')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.page': {
            'Meta': {'ordering': "('site', 'tree_id', 'lft')", 'object_name': 'Page'},
            'changed_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'in_navigation': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'limit_visibility_in_menu': ('django.db.models.fields.SmallIntegerField', [], {'default': 'None', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'login_required': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'moderator_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '1', 'blank': 'True'}),
            'navigation_extenders': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'page_flags': ('django.db.models.fields.TextField', [], {'null': True, 'blank': True}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['cms.Page']"}),
            'placeholders': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['cms.Placeholder']", 'symmetrical': 'False'}),
            'publication_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'publication_end_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'publisher_is_draft': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'publisher_public': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'publisher_draft'", 'unique': 'True', 'null': 'True', 'to': "orm['cms.Page']"}),
            'publisher_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'reverse_id': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '40', 'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sites.Site']"}),
            'soft_root': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'template': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contacts_and_people.building': {
            'Meta': {'ordering': "('site', 'street', 'number', 'name')", 'object_name': 'Building'},
            'access_and_parking': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_access_and_parking'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'additional_street_address': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_description'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'getting_here': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'getting_here'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'latitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'longitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'map': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'postcode': ('django.db.models.fields.CharField', [], {'max_length': '9', 'null': 'True', 'blank': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Site']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'db_index': 'True', 'max_length': '255', 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'street': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {'default': "''", 'max_length': '256'}),
            'zoom': ('django.db.models.fields.IntegerField', [], {'default': '17', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.entity': {
            'Meta': {'ordering': "['tree_id', 'lft']", 'object_name': 'Entity', '_ormbases': ['contacts_and_people.EntityLite']},
            'abstract_entity': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'auto_contacts_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_news_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_publications_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_vacancies_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'blank': 'True'}),
            'building_recapitulates_entity_name': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'contacts_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contacts_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'contacts_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Contacts & people'", 'max_length': '50'}),
            'display_parent': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entitylite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.EntityLite']", 'unique': 'True', 'primary_key': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'entity_item'", 'null': 'True', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'news_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'news_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'news_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'News & events'", 'max_length': '50'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['contacts_and_people.Entity']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'publications_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Publications'", 'max_length': '50'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'db_index': 'True', 'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'vacancies_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'vacancies_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'vacancies_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Vacancies & studentships'", 'max_length': '50'}),
            'website': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'entity'", 'unique': 'True', 'null': 'True', 'to': "orm['cms.Page']"})
        },
        'contacts_and_people.entityautopagelinkplugineditor': {
            'Meta': {'object_name': 'EntityAutoPageLinkPluginEditor', 'db_table': "'cmsplugin_entityautopagelinkplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'auto_page_plugin'", 'null': 'True', 'to': "orm['contacts_and_people.Entity']"}),
            'link_to': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.entitydirectoryplugineditor': {
            'Meta': {'object_name': 'EntityDirectoryPluginEditor', 'db_table': "'cmsplugin_entitydirectoryplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'display_descriptions_to_level': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'directory_plugin'", 'null': 'True', 'to': "orm['contacts_and_people.Entity']"}),
            'levels': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'link_icons': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'use_short_names': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'contacts_and_people.entitylite': {
            'Meta': {'object_name': 'EntityLite'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'contacts_and_people.entitymembersplugineditor': {
            'Meta': {'object_name': 'EntityMembersPluginEditor', 'db_table': "'cmsplugin_entitymembersplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'entity_members_plugin'", 'null': 'True', 'to': "orm['contacts_and_people.Entity']"})
        },
        'contacts_and_people.membership': {
            'Meta': {'ordering': "('-importance_to_entity', 'person__surname')", 'object_name': 'Membership'},
            'display_role': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'display_roles'", 'null': 'True', 'to': "orm['contacts_and_people.Membership']"}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'members'", 'to': "orm['contacts_and_people.Entity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'importance_to_entity': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'importance_to_person': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'key_contact': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'person': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_of'", 'to': "orm['contacts_and_people.Person']"}),
            'role': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.person': {
            'Meta': {'ordering': "['surname', 'given_name', 'user']", 'object_name': 'Person', '_ormbases': ['contacts_and_people.PersonLite']},
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'blank': 'True'}),
            'data_feed_locked': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entities': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'people'", 'to': "orm['contacts_and_people.Entity']", 'through': "orm['contacts_and_people.Membership']", 'blank': 'True', 'symmetrical': 'False', 'null': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'person_item'", 'null': 'True', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'institutional_username': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'override_entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'people_override'", 'null': 'True', 'to': "orm['contacts_and_people.Entity']"}),
            'personlite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.PersonLite']", 'unique': 'True', 'primary_key': 'True'}),
            'please_contact': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'contact_for'", 'null': 'True', 'to': "orm['contacts_and_people.Person']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'db_index': 'True', 'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'staff_id': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'person_user'", 'unique': 'True', 'null': 'True', 'to': "orm['auth.User']"})
        },
        'contacts_and_people.personlite': {
            'Meta': {'object_name': 'PersonLite'},
            'given_name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'middle_names': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'surname': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Title']", 'to_field': "'abbreviation'", 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.phonecontact': {
            'Meta': {'ordering': "('label',)", 'object_name': 'PhoneContact'},
            'area_code': ('django.db.models.fields.CharField', [], {'default': "'029'", 'max_length': '5'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'country_code': ('django.db.models.fields.CharField', [], {'default': "'44'", 'max_length': '5'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'internal_extension': ('django.db.models.fields.CharField', [], {'max_length': '6', 'null': 'True', 'blank': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '12'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'})
        },
        'contacts_and_people.site': {
            'Meta': {'ordering': "('country', 'site_name', 'post_town')", 'object_name': 'Site'},
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'description': ('django.db.models.fields.TextField', [], {'max_length': '500', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post_town': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'site_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contacts_and_people.teacher': {
            'Meta': {'object_name': 'Teacher'},
            'dummy_field_one': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'dummy_field_two': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'person': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'teacher'", 'unique': 'True', 'null': 'True', 'to': "orm['contacts_and_people.Person']"})
        },
        'contacts_and_people.title': {
            'Meta': {'ordering': "['title']", 'object_name': 'Title'},
            'abbreviation': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        },
        'links.externallink': {
            'Meta': {'ordering': "['title']", 'object_name': 'ExternalLink'},
            'description': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'external_site': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'to': "orm['links.LinkType']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'links.externalsite': {
            'Meta': {'ordering': "['site']", 'object_name': 'ExternalSite'},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'links.linktype': {
            'Meta': {'object_name': 'LinkType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'scheme': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'sites.site': {
            'Meta': {'ordering': "('domain',)", 'object_name': 'Site', 'db_table': "'django_site'"},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        }
    }

    complete_apps = ['contacts_and_people']

########NEW FILE########
__FILENAME__ = 0002_auto__chg_field_entityautopagelinkplugineditor_entity__chg_field_perso
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Changing field 'EntityAutoPageLinkPluginEditor.entity'
        db.alter_column('cmsplugin_entityautopagelinkplugineditor', 'entity_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, on_delete=models.SET_NULL, to=orm['contacts_and_people.Entity']))

        # Changing field 'PersonLite.title'
        db.alter_column('contacts_and_people_personlite', 'title_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['contacts_and_people.Title'], to_field='abbreviation', null=True, on_delete=models.SET_NULL))
        # # Deleting field 'Entity.auto_publications_page'
        # db.delete_column('contacts_and_people_entity', 'auto_publications_page')
        # 
        # # Deleting field 'Entity.publications_page_menu_title'
        # db.delete_column('contacts_and_people_entity', 'publications_page_menu_title')


        # Changing field 'Entity.parent'
        db.alter_column('contacts_and_people_entity', 'parent_id', self.gf('mptt.fields.TreeForeignKey')(null=True, to=orm['contacts_and_people.Entity']))

        # Changing field 'Entity.website'
        db.alter_column('contacts_and_people_entity', 'website_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, on_delete=models.SET_NULL, to=orm['cms.Page'], unique=True))

        # Changing field 'Entity.building'
        db.alter_column('contacts_and_people_entity', 'building_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['contacts_and_people.Building'], null=True, on_delete=models.SET_NULL))

        # Changing field 'EntityDirectoryPluginEditor.entity'
        db.alter_column('cmsplugin_entitydirectoryplugineditor', 'entity_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, on_delete=models.SET_NULL, to=orm['contacts_and_people.Entity']))

        # Changing field 'EntityMembersPluginEditor.entity'
        db.alter_column('cmsplugin_entitymembersplugineditor', 'entity_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, on_delete=models.SET_NULL, to=orm['contacts_and_people.Entity']))

        # Changing field 'Person.building'
        db.alter_column('contacts_and_people_person', 'building_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['contacts_and_people.Building'], null=True, on_delete=models.SET_NULL))

        # Changing field 'Person.override_entity'
        db.alter_column('contacts_and_people_person', 'override_entity_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, on_delete=models.SET_NULL, to=orm['contacts_and_people.Entity']))

        # Changing field 'Person.user'
        db.alter_column('contacts_and_people_person', 'user_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, on_delete=models.SET_NULL, to=orm['auth.User'], unique=True))

        # Changing field 'Person.please_contact'
        db.alter_column('contacts_and_people_person', 'please_contact_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, on_delete=models.SET_NULL, to=orm['contacts_and_people.Person']))

    def backwards(self, orm):

        # Changing field 'EntityAutoPageLinkPluginEditor.entity'
        db.alter_column('cmsplugin_entityautopagelinkplugineditor', 'entity_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['contacts_and_people.Entity']))

        # Changing field 'PersonLite.title'
        db.alter_column('contacts_and_people_personlite', 'title_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['contacts_and_people.Title'], to_field='abbreviation', null=True))
        # # Adding field 'Entity.auto_publications_page'
        # db.add_column('contacts_and_people_entity', 'auto_publications_page',
                      # self.gf('django.db.models.fields.BooleanField')(default=False),
                      # keep_default=False)

        # # Adding field 'Entity.publications_page_menu_title'
        # db.add_column('contacts_and_people_entity', 'publications_page_menu_title',
                      # self.gf('django.db.models.fields.CharField')(default='Publications', max_length=50),
                      # keep_default=False)


        # Changing field 'Entity.parent'
        db.alter_column('contacts_and_people_entity', 'parent_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['contacts_and_people.Entity']))

        # Changing field 'Entity.website'
        db.alter_column('contacts_and_people_entity', 'website_id', self.gf('django.db.models.fields.related.ForeignKey')(unique=True, null=True, to=orm['cms.Page']))

        # Changing field 'Entity.building'
        db.alter_column('contacts_and_people_entity', 'building_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['contacts_and_people.Building'], null=True))

        # Changing field 'EntityDirectoryPluginEditor.entity'
        db.alter_column('cmsplugin_entitydirectoryplugineditor', 'entity_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['contacts_and_people.Entity']))

        # Changing field 'EntityMembersPluginEditor.entity'
        db.alter_column('cmsplugin_entitymembersplugineditor', 'entity_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['contacts_and_people.Entity']))

        # Changing field 'Person.building'
        db.alter_column('contacts_and_people_person', 'building_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['contacts_and_people.Building'], null=True))

        # Changing field 'Person.override_entity'
        db.alter_column('contacts_and_people_person', 'override_entity_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['contacts_and_people.Entity']))

        # Changing field 'Person.user'
        db.alter_column('contacts_and_people_person', 'user_id', self.gf('django.db.models.fields.related.ForeignKey')(unique=True, null=True, to=orm['auth.User']))

        # Changing field 'Person.please_contact'
        db.alter_column('contacts_and_people_person', 'please_contact_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['contacts_and_people.Person']))

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 1, 13, 0, 0)'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.page': {
            'Meta': {'ordering': "('tree_id', 'lft')", 'object_name': 'Page'},
            'changed_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'in_navigation': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'limit_visibility_in_menu': ('django.db.models.fields.SmallIntegerField', [], {'default': 'None', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'login_required': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'moderator_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'blank': 'True'}),
            'navigation_extenders': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['cms.Page']"}),
            'placeholders': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['cms.Placeholder']", 'symmetrical': 'False'}),
            'publication_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'publication_end_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'publisher_is_draft': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'publisher_public': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'publisher_draft'", 'unique': 'True', 'null': 'True', 'to': "orm['cms.Page']"}),
            'publisher_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'reverse_id': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '40', 'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sites.Site']"}),
            'soft_root': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'template': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contacts_and_people.building': {
            'Meta': {'ordering': "('site', 'street', 'number', 'name')", 'object_name': 'Building'},
            'access_and_parking': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_access_and_parking'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'additional_street_address': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_description'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'getting_here': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'getting_here'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'latitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'longitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'map': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'postcode': ('django.db.models.fields.CharField', [], {'max_length': '9', 'null': 'True', 'blank': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'place'", 'to': "orm['contacts_and_people.Site']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'street': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {'default': "''", 'max_length': '256'}),
            'zoom': ('django.db.models.fields.IntegerField', [], {'default': '17', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.entity': {
            'Meta': {'ordering': "['tree_id', 'lft']", 'object_name': 'Entity', '_ormbases': ['contacts_and_people.EntityLite']},
            'abstract_entity': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'auto_contacts_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_news_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_vacancies_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'building_recapitulates_entity_name': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'contacts_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contacts_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'contacts_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Contacts & people'", 'max_length': '50'}),
            'display_parent': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entitylite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.EntityLite']", 'unique': 'True', 'primary_key': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'entity_item'", 'null': 'True', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'news_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'news_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'news_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'News & events'", 'max_length': '50'}),
            'parent': ('mptt.fields.TreeForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['contacts_and_people.Entity']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'vacancies_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'vacancies_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'vacancies_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Vacancies & studentships'", 'max_length': '50'}),
            'website': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'entity'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['cms.Page']", 'blank': 'True', 'unique': 'True'})
        },
        'contacts_and_people.entityautopagelinkplugineditor': {
            'Meta': {'object_name': 'EntityAutoPageLinkPluginEditor', 'db_table': "'cmsplugin_entityautopagelinkplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'auto_page_plugin'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'link_to': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.entitydirectoryplugineditor': {
            'Meta': {'object_name': 'EntityDirectoryPluginEditor', 'db_table': "'cmsplugin_entitydirectoryplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'display_descriptions_to_level': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'directory_plugin'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'levels': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'link_icons': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'use_short_names': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'contacts_and_people.entitylite': {
            'Meta': {'object_name': 'EntityLite'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'contacts_and_people.entitymembersplugineditor': {
            'Meta': {'object_name': 'EntityMembersPluginEditor', 'db_table': "'cmsplugin_entitymembersplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'entity_members_plugin'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"})
        },
        'contacts_and_people.membership': {
            'Meta': {'ordering': "('-importance_to_entity', 'person__surname')", 'object_name': 'Membership'},
            'display_role': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'display_roles'", 'null': 'True', 'to': "orm['contacts_and_people.Membership']"}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'members'", 'to': "orm['contacts_and_people.Entity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'importance_to_entity': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'importance_to_person': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'key_contact': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'person': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_of'", 'to': "orm['contacts_and_people.Person']"}),
            'role': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.person': {
            'Meta': {'ordering': "['surname', 'given_name', 'user']", 'object_name': 'Person', '_ormbases': ['contacts_and_people.PersonLite']},
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'data_feed_locked': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entities': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'people'", 'to': "orm['contacts_and_people.Entity']", 'through': "orm['contacts_and_people.Membership']", 'blank': 'True', 'symmetrical': 'False', 'null': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'person_item'", 'null': 'True', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'institutional_username': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'override_entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'people_override'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'personlite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.PersonLite']", 'unique': 'True', 'primary_key': 'True'}),
            'please_contact': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'contact_for'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Person']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'staff_id': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'person_user'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']", 'blank': 'True', 'unique': 'True'})
        },
        'contacts_and_people.personlite': {
            'Meta': {'object_name': 'PersonLite'},
            'given_name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'middle_names': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'surname': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Title']", 'to_field': "'abbreviation'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'})
        },
        'contacts_and_people.phonecontact': {
            'Meta': {'ordering': "('label',)", 'object_name': 'PhoneContact'},
            'area_code': ('django.db.models.fields.CharField', [], {'default': "'029'", 'max_length': '5'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'country_code': ('django.db.models.fields.CharField', [], {'default': "'44'", 'max_length': '5'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'internal_extension': ('django.db.models.fields.CharField', [], {'max_length': '6', 'null': 'True', 'blank': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '12'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'})
        },
        'contacts_and_people.site': {
            'Meta': {'ordering': "('country', 'site_name', 'post_town')", 'object_name': 'Site'},
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'description': ('django.db.models.fields.TextField', [], {'max_length': '500', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post_town': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'site_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contacts_and_people.teacher': {
            'Meta': {'object_name': 'Teacher'},
            'dummy_field_one': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'dummy_field_two': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'person': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'teacher'", 'unique': 'True', 'null': 'True', 'to': "orm['contacts_and_people.Person']"})
        },
        'contacts_and_people.title': {
            'Meta': {'ordering': "['title']", 'object_name': 'Title'},
            'abbreviation': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        },
        'links.externallink': {
            'Meta': {'ordering': "['title']", 'object_name': 'ExternalLink'},
            'description': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'external_site': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'to': "orm['links.LinkType']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'links.externalsite': {
            'Meta': {'ordering': "['domain']", 'object_name': 'ExternalSite'},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'links.linktype': {
            'Meta': {'object_name': 'LinkType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'scheme': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'sites.site': {
            'Meta': {'ordering': "('domain',)", 'object_name': 'Site', 'db_table': "'django_site'"},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        }
    }

    complete_apps = ['contacts_and_people']
########NEW FILE########
__FILENAME__ = 0003_renaming_column_personlite_title
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        db._constraint_cache = {} # force _fill_constraint_cache()
        db.rename_column('contacts_and_people_personlite', 'title_id', 'title_backup_id')
        db.add_column('contacts_and_people_personlite', 'title', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True), keep_default=False)

    def backwards(self, orm):
        db.delete_column('contacts_and_people_personlite', 'title')
        db.rename_column('contacts_and_people_personlite', 'title_backup_id', 'title_id')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 3, 11, 0, 0)'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.page': {
            'Meta': {'ordering': "('site', 'tree_id', 'lft')", 'object_name': 'Page'},
            'changed_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'in_navigation': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'limit_visibility_in_menu': ('django.db.models.fields.SmallIntegerField', [], {'default': 'None', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'login_required': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'moderator_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '1', 'blank': 'True'}),
            'navigation_extenders': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['cms.Page']"}),
            'placeholders': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['cms.Placeholder']", 'symmetrical': 'False'}),
            'publication_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'publication_end_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'publisher_is_draft': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'publisher_public': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'publisher_draft'", 'unique': 'True', 'null': 'True', 'to': "orm['cms.Page']"}),
            'publisher_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'reverse_id': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '40', 'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sites.Site']"}),
            'soft_root': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'template': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contacts_and_people.building': {
            'Meta': {'ordering': "('site', 'street', 'number', 'name')", 'object_name': 'Building'},
            'access_and_parking': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_access_and_parking'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'additional_street_address': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_description'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'getting_here': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'getting_here'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'latitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'longitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'map': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'postcode': ('django.db.models.fields.CharField', [], {'max_length': '9', 'null': 'True', 'blank': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'place'", 'to': "orm['contacts_and_people.Site']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'street': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {'default': "''", 'max_length': '256'}),
            'zoom': ('django.db.models.fields.IntegerField', [], {'default': '17', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.entity': {
            'Meta': {'ordering': "['tree_id', 'lft']", 'object_name': 'Entity', '_ormbases': ['contacts_and_people.EntityLite']},
            'abstract_entity': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'auto_contacts_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_news_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_vacancies_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'building_recapitulates_entity_name': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'contacts_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contacts_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'contacts_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Contacts & people'", 'max_length': '50'}),
            'display_parent': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entitylite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.EntityLite']", 'unique': 'True', 'primary_key': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'entity_item'", 'null': 'True', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'news_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'news_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'news_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'News & events'", 'max_length': '50'}),
            'parent': ('mptt.fields.TreeForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['contacts_and_people.Entity']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'vacancies_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'vacancies_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'vacancies_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Vacancies & studentships'", 'max_length': '50'}),
            'website': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'entity'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['cms.Page']", 'blank': 'True', 'unique': 'True'})
        },
        'contacts_and_people.entityautopagelinkplugineditor': {
            'Meta': {'object_name': 'EntityAutoPageLinkPluginEditor', 'db_table': "'cmsplugin_entityautopagelinkplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'auto_page_plugin'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'link_to': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.entitydirectoryplugineditor': {
            'Meta': {'object_name': 'EntityDirectoryPluginEditor', 'db_table': "'cmsplugin_entitydirectoryplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'display_descriptions_to_level': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'directory_plugin'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'levels': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'link_icons': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'use_short_names': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'contacts_and_people.entitylite': {
            'Meta': {'object_name': 'EntityLite'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'contacts_and_people.entitymembersplugineditor': {
            'Meta': {'object_name': 'EntityMembersPluginEditor', 'db_table': "'cmsplugin_entitymembersplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'entity_members_plugin'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"})
        },
        'contacts_and_people.membership': {
            'Meta': {'ordering': "('-importance_to_entity', 'person__surname')", 'object_name': 'Membership'},
            'display_role': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'display_roles'", 'null': 'True', 'to': "orm['contacts_and_people.Membership']"}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'members'", 'to': "orm['contacts_and_people.Entity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'importance_to_entity': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'importance_to_person': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'key_contact': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'person': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_of'", 'to': "orm['contacts_and_people.Person']"}),
            'role': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.person': {
            'Meta': {'ordering': "['surname', 'given_name', 'user']", 'object_name': 'Person', '_ormbases': ['contacts_and_people.PersonLite']},
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'data_feed_locked': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entities': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'people'", 'to': "orm['contacts_and_people.Entity']", 'through': "orm['contacts_and_people.Membership']", 'blank': 'True', 'symmetrical': 'False', 'null': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'person_item'", 'null': 'True', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'institutional_username': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'override_entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'people_override'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'personlite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.PersonLite']", 'unique': 'True', 'primary_key': 'True'}),
            'please_contact': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'contact_for'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Person']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'staff_id': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'person_user'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']", 'blank': 'True', 'unique': 'True'})
        },
        'contacts_and_people.personlite': {
            'Meta': {'object_name': 'PersonLite'},
            'given_name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'middle_names': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'surname': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'title_backup': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Title']", 'to_field': "'abbreviation'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'})
        },
        'contacts_and_people.phonecontact': {
            'Meta': {'ordering': "('label',)", 'object_name': 'PhoneContact'},
            'area_code': ('django.db.models.fields.CharField', [], {'default': "'029'", 'max_length': '5'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'country_code': ('django.db.models.fields.CharField', [], {'default': "'44'", 'max_length': '5'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'internal_extension': ('django.db.models.fields.CharField', [], {'max_length': '6', 'null': 'True', 'blank': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '12'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'})
        },
        'contacts_and_people.site': {
            'Meta': {'ordering': "('country', 'site_name', 'post_town')", 'object_name': 'Site'},
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'description': ('django.db.models.fields.TextField', [], {'max_length': '500', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post_town': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'site_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contacts_and_people.teacher': {
            'Meta': {'object_name': 'Teacher'},
            'dummy_field_one': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'dummy_field_two': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'person': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'teacher'", 'unique': 'True', 'null': 'True', 'to': "orm['contacts_and_people.Person']"})
        },
        'contacts_and_people.title': {
            'Meta': {'ordering': "['title']", 'object_name': 'Title'},
            'abbreviation': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        },
        'links.externallink': {
            'Meta': {'ordering': "['title']", 'object_name': 'ExternalLink'},
            'description': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'external_site': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'to': "orm['links.LinkType']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'links.externalsite': {
            'Meta': {'ordering': "['domain']", 'object_name': 'ExternalSite'},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'links.linktype': {
            'Meta': {'object_name': 'LinkType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'scheme': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'sites.site': {
            'Meta': {'ordering': "('domain',)", 'object_name': 'Site', 'db_table': "'django_site'"},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        }
    }

    complete_apps = ['contacts_and_people']
########NEW FILE########
__FILENAME__ = 0004_backup_column_personlite_title
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models
from django.core.exceptions import ObjectDoesNotExist

class Migration(DataMigration):

    def forwards(self, orm):
        
        for pl in orm.PersonLite.objects.all():
            if pl.title_backup:
                try:
                    title = orm.Title.objects.get(abbreviation=pl.title_backup.abbreviation)
                except ObjectDoesNotExist:
                    pass
                else:
                    pl.title = title.id
                    pl.save()
        
    def backwards(self, orm):
        raise RuntimeError("Cannot reverse this migration.")

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 3, 11, 0, 0)'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.page': {
            'Meta': {'ordering': "('site', 'tree_id', 'lft')", 'object_name': 'Page'},
            'changed_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'in_navigation': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'limit_visibility_in_menu': ('django.db.models.fields.SmallIntegerField', [], {'default': 'None', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'login_required': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'moderator_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '1', 'blank': 'True'}),
            'navigation_extenders': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['cms.Page']"}),
            'placeholders': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['cms.Placeholder']", 'symmetrical': 'False'}),
            'publication_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'publication_end_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'publisher_is_draft': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'publisher_public': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'publisher_draft'", 'unique': 'True', 'null': 'True', 'to': "orm['cms.Page']"}),
            'publisher_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'reverse_id': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '40', 'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sites.Site']"}),
            'soft_root': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'template': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contacts_and_people.building': {
            'Meta': {'ordering': "('site', 'street', 'number', 'name')", 'object_name': 'Building'},
            'access_and_parking': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_access_and_parking'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'additional_street_address': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_description'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'getting_here': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'getting_here'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'latitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'longitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'map': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'postcode': ('django.db.models.fields.CharField', [], {'max_length': '9', 'null': 'True', 'blank': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'place'", 'to': "orm['contacts_and_people.Site']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'street': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {'default': "''", 'max_length': '256'}),
            'zoom': ('django.db.models.fields.IntegerField', [], {'default': '17', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.entity': {
            'Meta': {'ordering': "['tree_id', 'lft']", 'object_name': 'Entity', '_ormbases': ['contacts_and_people.EntityLite']},
            'abstract_entity': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'auto_contacts_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_news_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_vacancies_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'building_recapitulates_entity_name': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'contacts_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contacts_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'contacts_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Contacts & people'", 'max_length': '50'}),
            'display_parent': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entitylite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.EntityLite']", 'unique': 'True', 'primary_key': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'entity_item'", 'null': 'True', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'news_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'news_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'news_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'News & events'", 'max_length': '50'}),
            'parent': ('mptt.fields.TreeForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['contacts_and_people.Entity']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'vacancies_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'vacancies_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'vacancies_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Vacancies & studentships'", 'max_length': '50'}),
            'website': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'entity'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['cms.Page']", 'blank': 'True', 'unique': 'True'})
        },
        'contacts_and_people.entityautopagelinkplugineditor': {
            'Meta': {'object_name': 'EntityAutoPageLinkPluginEditor', 'db_table': "'cmsplugin_entityautopagelinkplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'auto_page_plugin'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'link_to': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.entitydirectoryplugineditor': {
            'Meta': {'object_name': 'EntityDirectoryPluginEditor', 'db_table': "'cmsplugin_entitydirectoryplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'display_descriptions_to_level': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'directory_plugin'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'levels': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'link_icons': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'use_short_names': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'contacts_and_people.entitylite': {
            'Meta': {'object_name': 'EntityLite'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'contacts_and_people.entitymembersplugineditor': {
            'Meta': {'object_name': 'EntityMembersPluginEditor', 'db_table': "'cmsplugin_entitymembersplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'entity_members_plugin'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"})
        },
        'contacts_and_people.membership': {
            'Meta': {'ordering': "('-importance_to_entity', 'person__surname')", 'object_name': 'Membership'},
            'display_role': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'display_roles'", 'null': 'True', 'to': "orm['contacts_and_people.Membership']"}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'members'", 'to': "orm['contacts_and_people.Entity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'importance_to_entity': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'importance_to_person': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'key_contact': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'person': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_of'", 'to': "orm['contacts_and_people.Person']"}),
            'role': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.person': {
            'Meta': {'ordering': "['surname', 'given_name', 'user']", 'object_name': 'Person', '_ormbases': ['contacts_and_people.PersonLite']},
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'data_feed_locked': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entities': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'people'", 'to': "orm['contacts_and_people.Entity']", 'through': "orm['contacts_and_people.Membership']", 'blank': 'True', 'symmetrical': 'False', 'null': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'person_item'", 'null': 'True', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'institutional_username': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'override_entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'people_override'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'personlite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.PersonLite']", 'unique': 'True', 'primary_key': 'True'}),
            'please_contact': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'contact_for'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Person']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'staff_id': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'person_user'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']", 'blank': 'True', 'unique': 'True'})
        },
        'contacts_and_people.personlite': {
            'Meta': {'object_name': 'PersonLite'},
            'given_name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'middle_names': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'surname': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'title_backup': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Title']", 'to_field': "'abbreviation'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'})
        },
        'contacts_and_people.phonecontact': {
            'Meta': {'ordering': "('label',)", 'object_name': 'PhoneContact'},
            'area_code': ('django.db.models.fields.CharField', [], {'default': "'029'", 'max_length': '5'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'country_code': ('django.db.models.fields.CharField', [], {'default': "'44'", 'max_length': '5'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'internal_extension': ('django.db.models.fields.CharField', [], {'max_length': '6', 'null': 'True', 'blank': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '12'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'})
        },
        'contacts_and_people.site': {
            'Meta': {'ordering': "('country', 'site_name', 'post_town')", 'object_name': 'Site'},
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'description': ('django.db.models.fields.TextField', [], {'max_length': '500', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post_town': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'site_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contacts_and_people.teacher': {
            'Meta': {'object_name': 'Teacher'},
            'dummy_field_one': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'dummy_field_two': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'person': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'teacher'", 'unique': 'True', 'null': 'True', 'to': "orm['contacts_and_people.Person']"})
        },
        'contacts_and_people.title': {
            'Meta': {'ordering': "['title']", 'object_name': 'Title'},
            'abbreviation': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        },
        'links.externallink': {
            'Meta': {'ordering': "['title']", 'object_name': 'ExternalLink'},
            'description': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'external_site': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'to': "orm['links.LinkType']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'links.externalsite': {
            'Meta': {'ordering': "['domain']", 'object_name': 'ExternalSite'},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'links.linktype': {
            'Meta': {'object_name': 'LinkType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'scheme': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'sites.site': {
            'Meta': {'ordering': "('domain',)", 'object_name': 'Site', 'db_table': "'django_site'"},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        }
    }

    complete_apps = ['contacts_and_people']
    symmetrical = True

########NEW FILE########
__FILENAME__ = 0005_delete_column_personlite_title_backup
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        db.delete_column('contacts_and_people_personlite', 'title_backup_id')
        # Renaming column for 'PersonLite.title' to match new field type.
        db.rename_column('contacts_and_people_personlite', 'title', 'title_id')
        # Changing field 'PersonLite.title'
        db.alter_column('contacts_and_people_personlite', 'title_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['contacts_and_people.Title'], null=True, on_delete=models.SET_NULL))
        # Adding index on 'PersonLite', fields ['title']
        #db.create_index('contacts_and_people_personlite', ['title_id'])

    def backwards(self, orm):
        # Removing index on 'PersonLite', fields ['title']
        #db.delete_index('contacts_and_people_personlite', ['title_id'])

        # Adding field 'PersonLite.title_backup'
        db.add_column('contacts_and_people_personlite', 'title_backup',
                      self.gf('django.db.models.fields.related.ForeignKey')(to=orm['contacts_and_people.Title'], to_field='abbreviation', null=True, on_delete=models.SET_NULL, blank=True),
                      keep_default=False)


        # Renaming column for 'PersonLite.title' to match new field type.
        db.rename_column('contacts_and_people_personlite', 'title_id', 'title')
        # Changing field 'PersonLite.title'
        db.alter_column('contacts_and_people_personlite', 'title', self.gf('django.db.models.fields.IntegerField')(null=True))

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 3, 11, 0, 0)'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.page': {
            'Meta': {'ordering': "('site', 'tree_id', 'lft')", 'object_name': 'Page'},
            'changed_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'in_navigation': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'limit_visibility_in_menu': ('django.db.models.fields.SmallIntegerField', [], {'default': 'None', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'login_required': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'moderator_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '1', 'blank': 'True'}),
            'navigation_extenders': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['cms.Page']"}),
            'placeholders': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['cms.Placeholder']", 'symmetrical': 'False'}),
            'publication_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'publication_end_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'publisher_is_draft': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'publisher_public': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'publisher_draft'", 'unique': 'True', 'null': 'True', 'to': "orm['cms.Page']"}),
            'publisher_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'reverse_id': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '40', 'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sites.Site']"}),
            'soft_root': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'template': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contacts_and_people.building': {
            'Meta': {'ordering': "('site', 'street', 'number', 'name')", 'object_name': 'Building'},
            'access_and_parking': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_access_and_parking'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'additional_street_address': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_description'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'getting_here': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'getting_here'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'latitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'longitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'map': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'postcode': ('django.db.models.fields.CharField', [], {'max_length': '9', 'null': 'True', 'blank': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'place'", 'to': "orm['contacts_and_people.Site']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'street': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {'default': "''", 'max_length': '256'}),
            'zoom': ('django.db.models.fields.IntegerField', [], {'default': '17', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.entity': {
            'Meta': {'ordering': "['tree_id', 'lft']", 'object_name': 'Entity', '_ormbases': ['contacts_and_people.EntityLite']},
            'abstract_entity': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'auto_contacts_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_news_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_vacancies_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'building_recapitulates_entity_name': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'contacts_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contacts_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'contacts_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Contacts & people'", 'max_length': '50'}),
            'display_parent': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entitylite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.EntityLite']", 'unique': 'True', 'primary_key': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'entity_item'", 'null': 'True', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'news_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'news_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'news_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'News & events'", 'max_length': '50'}),
            'parent': ('mptt.fields.TreeForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['contacts_and_people.Entity']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'vacancies_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'vacancies_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'vacancies_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Vacancies & studentships'", 'max_length': '50'}),
            'website': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'entity'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['cms.Page']", 'blank': 'True', 'unique': 'True'})
        },
        'contacts_and_people.entityautopagelinkplugineditor': {
            'Meta': {'object_name': 'EntityAutoPageLinkPluginEditor', 'db_table': "'cmsplugin_entityautopagelinkplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'auto_page_plugin'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'link_to': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.entitydirectoryplugineditor': {
            'Meta': {'object_name': 'EntityDirectoryPluginEditor', 'db_table': "'cmsplugin_entitydirectoryplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'display_descriptions_to_level': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'directory_plugin'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'levels': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'link_icons': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'use_short_names': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'contacts_and_people.entitylite': {
            'Meta': {'object_name': 'EntityLite'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'contacts_and_people.entitymembersplugineditor': {
            'Meta': {'object_name': 'EntityMembersPluginEditor', 'db_table': "'cmsplugin_entitymembersplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'entity_members_plugin'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"})
        },
        'contacts_and_people.membership': {
            'Meta': {'ordering': "('-importance_to_entity', 'person__surname')", 'object_name': 'Membership'},
            'display_role': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'display_roles'", 'null': 'True', 'to': "orm['contacts_and_people.Membership']"}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'members'", 'to': "orm['contacts_and_people.Entity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'importance_to_entity': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'importance_to_person': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'key_contact': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'person': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_of'", 'to': "orm['contacts_and_people.Person']"}),
            'role': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.person': {
            'Meta': {'ordering': "['surname', 'given_name', 'user']", 'object_name': 'Person', '_ormbases': ['contacts_and_people.PersonLite']},
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'data_feed_locked': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entities': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'people'", 'to': "orm['contacts_and_people.Entity']", 'through': "orm['contacts_and_people.Membership']", 'blank': 'True', 'symmetrical': 'False', 'null': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'person_item'", 'null': 'True', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'institutional_username': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'override_entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'people_override'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'personlite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.PersonLite']", 'unique': 'True', 'primary_key': 'True'}),
            'please_contact': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'contact_for'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Person']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'staff_id': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'person_user'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['auth.User']", 'blank': 'True', 'unique': 'True'})
        },
        'contacts_and_people.personlite': {
            'Meta': {'object_name': 'PersonLite'},
            'given_name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'middle_names': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'surname': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Title']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'})
        },
        'contacts_and_people.phonecontact': {
            'Meta': {'ordering': "('label',)", 'object_name': 'PhoneContact'},
            'area_code': ('django.db.models.fields.CharField', [], {'default': "'029'", 'max_length': '5'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'country_code': ('django.db.models.fields.CharField', [], {'default': "'44'", 'max_length': '5'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'internal_extension': ('django.db.models.fields.CharField', [], {'max_length': '6', 'null': 'True', 'blank': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '12'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'})
        },
        'contacts_and_people.site': {
            'Meta': {'ordering': "('country', 'site_name', 'post_town')", 'object_name': 'Site'},
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'description': ('django.db.models.fields.TextField', [], {'max_length': '500', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post_town': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'site_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contacts_and_people.teacher': {
            'Meta': {'object_name': 'Teacher'},
            'dummy_field_one': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'dummy_field_two': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'person': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'teacher'", 'unique': 'True', 'null': 'True', 'to': "orm['contacts_and_people.Person']"})
        },
        'contacts_and_people.title': {
            'Meta': {'ordering': "['title']", 'object_name': 'Title'},
            'abbreviation': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        },
        'links.externallink': {
            'Meta': {'ordering': "['title']", 'object_name': 'ExternalLink'},
            'description': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'external_site': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'to': "orm['links.LinkType']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'links.externalsite': {
            'Meta': {'ordering': "['domain']", 'object_name': 'ExternalSite'},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'links.linktype': {
            'Meta': {'object_name': 'LinkType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'scheme': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'sites.site': {
            'Meta': {'ordering': "('domain',)", 'object_name': 'Site', 'db_table': "'django_site'"},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        }
    }

    complete_apps = ['contacts_and_people']
########NEW FILE########
__FILENAME__ = 0006_auto__chg_field_entity_image__chg_field_entity_external_url__chg_field
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Changing field 'Entity.image'
        db.alter_column('contacts_and_people_entity', 'image_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Image'], null=True, on_delete=models.SET_NULL))

        # Changing field 'Entity.external_url'
        db.alter_column('contacts_and_people_entity', 'external_url_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, on_delete=models.PROTECT, to=orm['links.ExternalLink']))

        # Changing field 'Membership.display_role'
        db.alter_column('contacts_and_people_membership', 'display_role_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, on_delete=models.SET_NULL, to=orm['contacts_and_people.Membership']))

        # Changing field 'Building.image'
        db.alter_column('contacts_and_people_building', 'image_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Image'], null=True, on_delete=models.SET_NULL))

        # Changing field 'Building.site'
        db.alter_column('contacts_and_people_building', 'site_id', self.gf('django.db.models.fields.related.ForeignKey')(on_delete=models.PROTECT, to=orm['contacts_and_people.Site']))

        # Changing field 'Person.image'
        db.alter_column('contacts_and_people_person', 'image_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Image'], null=True, on_delete=models.SET_NULL))

        # Changing field 'Person.user'
        db.alter_column('contacts_and_people_person', 'user_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, on_delete=models.PROTECT, to=orm['auth.User'], unique=True))

        # Changing field 'Person.external_url'
        db.alter_column('contacts_and_people_person', 'external_url_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, on_delete=models.PROTECT, to=orm['links.ExternalLink']))

    def backwards(self, orm):

        # Changing field 'Entity.image'
        db.alter_column('contacts_and_people_entity', 'image_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Image'], null=True))

        # Changing field 'Entity.external_url'
        db.alter_column('contacts_and_people_entity', 'external_url_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['links.ExternalLink']))

        # Changing field 'Membership.display_role'
        db.alter_column('contacts_and_people_membership', 'display_role_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['contacts_and_people.Membership']))

        # Changing field 'Building.image'
        db.alter_column('contacts_and_people_building', 'image_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Image'], null=True))

        # Changing field 'Building.site'
        db.alter_column('contacts_and_people_building', 'site_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['contacts_and_people.Site']))

        # Changing field 'Person.image'
        db.alter_column('contacts_and_people_person', 'image_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Image'], null=True))

        # Changing field 'Person.user'
        db.alter_column('contacts_and_people_person', 'user_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, on_delete=models.SET_NULL, to=orm['auth.User'], unique=True))

        # Changing field 'Person.external_url'
        db.alter_column('contacts_and_people_person', 'external_url_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['links.ExternalLink']))

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 3, 22, 0, 0)'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.page': {
            'Meta': {'ordering': "('site', 'tree_id', 'lft')", 'object_name': 'Page'},
            'changed_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'in_navigation': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'limit_visibility_in_menu': ('django.db.models.fields.SmallIntegerField', [], {'default': 'None', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'login_required': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'moderator_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '1', 'blank': 'True'}),
            'navigation_extenders': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'page_flags': ('django.db.models.fields.TextField', [], {'null': True, 'blank': True}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['cms.Page']"}),
            'placeholders': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['cms.Placeholder']", 'symmetrical': 'False'}),
            'publication_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'publication_end_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'publisher_is_draft': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'publisher_public': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'publisher_draft'", 'unique': 'True', 'null': 'True', 'to': "orm['cms.Page']"}),
            'publisher_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'reverse_id': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '40', 'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sites.Site']"}),
            'soft_root': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'template': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contacts_and_people.building': {
            'Meta': {'ordering': "('site', 'street', 'number', 'name')", 'object_name': 'Building'},
            'access_and_parking': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_access_and_parking'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'additional_street_address': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_description'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'getting_here': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'getting_here'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'latitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'longitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'map': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'postcode': ('django.db.models.fields.CharField', [], {'max_length': '9', 'null': 'True', 'blank': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'place'", 'on_delete': 'models.PROTECT', 'to': "orm['contacts_and_people.Site']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'street': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {'default': "''", 'max_length': '256'}),
            'zoom': ('django.db.models.fields.IntegerField', [], {'default': '17', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.entity': {
            'Meta': {'ordering': "['tree_id', 'lft']", 'object_name': 'Entity', '_ormbases': ['contacts_and_people.EntityLite']},
            'abstract_entity': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'auto_contacts_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_news_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_vacancies_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'building_recapitulates_entity_name': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'contacts_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contacts_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'contacts_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Contacts & people'", 'max_length': '50'}),
            'display_parent': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entitylite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.EntityLite']", 'unique': 'True', 'primary_key': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'entity_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'news_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'news_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'news_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'News & events'", 'max_length': '50'}),
            'parent': ('mptt.fields.TreeForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['contacts_and_people.Entity']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'vacancies_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'vacancies_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'vacancies_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Vacancies & studentships'", 'max_length': '50'}),
            'website': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'entity'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['cms.Page']", 'blank': 'True', 'unique': 'True'})
        },
        'contacts_and_people.entityautopagelinkplugineditor': {
            'Meta': {'object_name': 'EntityAutoPageLinkPluginEditor', 'db_table': "'cmsplugin_entityautopagelinkplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'auto_page_plugin'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'link_to': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.entitydirectoryplugineditor': {
            'Meta': {'object_name': 'EntityDirectoryPluginEditor', 'db_table': "'cmsplugin_entitydirectoryplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'display_descriptions_to_level': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'directory_plugin'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'levels': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'link_icons': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'use_short_names': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'contacts_and_people.entitylite': {
            'Meta': {'object_name': 'EntityLite'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'contacts_and_people.entitymembersplugineditor': {
            'Meta': {'object_name': 'EntityMembersPluginEditor', 'db_table': "'cmsplugin_entitymembersplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'entity_members_plugin'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"})
        },
        'contacts_and_people.membership': {
            'Meta': {'ordering': "('-importance_to_entity', 'person__surname')", 'object_name': 'Membership'},
            'display_role': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'display_roles'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Membership']"}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'members'", 'to': "orm['contacts_and_people.Entity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'importance_to_entity': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'importance_to_person': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'key_contact': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'person': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_of'", 'to': "orm['contacts_and_people.Person']"}),
            'role': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.person': {
            'Meta': {'ordering': "['surname', 'given_name', 'user']", 'object_name': 'Person', '_ormbases': ['contacts_and_people.PersonLite']},
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'data_feed_locked': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entities': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'people'", 'to': "orm['contacts_and_people.Entity']", 'through': "orm['contacts_and_people.Membership']", 'blank': 'True', 'symmetrical': 'False', 'null': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'person_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'institutional_username': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'override_entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'people_override'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'personlite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.PersonLite']", 'unique': 'True', 'primary_key': 'True'}),
            'please_contact': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'contact_for'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Person']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'staff_id': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'person_user'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['auth.User']", 'blank': 'True', 'unique': 'True'})
        },
        'contacts_and_people.personlite': {
            'Meta': {'object_name': 'PersonLite'},
            'given_name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'middle_names': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'surname': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Title']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'})
        },
        'contacts_and_people.phonecontact': {
            'Meta': {'ordering': "('label',)", 'object_name': 'PhoneContact'},
            'area_code': ('django.db.models.fields.CharField', [], {'default': "'029'", 'max_length': '5'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'country_code': ('django.db.models.fields.CharField', [], {'default': "'44'", 'max_length': '5'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'internal_extension': ('django.db.models.fields.CharField', [], {'max_length': '6', 'null': 'True', 'blank': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '12'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'})
        },
        'contacts_and_people.site': {
            'Meta': {'ordering': "('country', 'site_name', 'post_town')", 'object_name': 'Site'},
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'description': ('django.db.models.fields.TextField', [], {'max_length': '500', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post_town': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'site_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contacts_and_people.teacher': {
            'Meta': {'object_name': 'Teacher'},
            'dummy_field_one': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'dummy_field_two': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'person': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'teacher'", 'unique': 'True', 'null': 'True', 'to': "orm['contacts_and_people.Person']"})
        },
        'contacts_and_people.title': {
            'Meta': {'ordering': "['title']", 'object_name': 'Title'},
            'abbreviation': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        },
        'links.externallink': {
            'Meta': {'ordering': "['title']", 'object_name': 'ExternalLink'},
            'description': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'external_site': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalSite']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['links.LinkType']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'links.externalsite': {
            'Meta': {'ordering': "['domain']", 'object_name': 'ExternalSite'},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'links.linktype': {
            'Meta': {'object_name': 'LinkType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'scheme': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'sites.site': {
            'Meta': {'ordering': "('domain',)", 'object_name': 'Site', 'db_table': "'django_site'"},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        }
    }

    complete_apps = ['contacts_and_people']
########NEW FILE########
__FILENAME__ = 0007_auto__del_teacher__del_field_entity_url__chg_field_building_number__ch
# -*- coding: utf-8 -*-
from south.utils import datetime_utils as datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Deleting model 'Teacher'
        db.delete_table('contacts_and_people_teacher')

        # Deleting field 'Entity.url'
        db.delete_column('contacts_and_people_entity', 'url')


        # Changing field 'Building.number'
        db.alter_column('contacts_and_people_building', 'number', self.gf('django.db.models.fields.CharField')(default='', max_length=10))

        # Changing field 'Building.street'
        db.alter_column('contacts_and_people_building', 'street', self.gf('django.db.models.fields.CharField')(default='', max_length=100))
        # Deleting field 'Person.url'
        db.delete_column('contacts_and_people_person', 'url')


    def backwards(self, orm):
        # Adding model 'Teacher'
        db.create_table('contacts_and_people_teacher', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('person', self.gf('django.db.models.fields.related.ForeignKey')(related_name='teacher', unique=True, null=True, to=orm['contacts_and_people.Person'], blank=True)),
            ('dummy_field_two', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
            ('dummy_field_one', self.gf('django.db.models.fields.CharField')(max_length=100, null=True, blank=True)),
        ))
        db.send_create_signal('contacts_and_people', ['Teacher'])

        # Adding field 'Entity.url'
        db.add_column('contacts_and_people_entity', 'url',
                      self.gf('django.db.models.fields.URLField')(max_length=200, null=True, blank=True),
                      keep_default=False)


        # Changing field 'Building.number'
        db.alter_column('contacts_and_people_building', 'number', self.gf('django.db.models.fields.CharField')(max_length=10, null=True))

        # Changing field 'Building.street'
        db.alter_column('contacts_and_people_building', 'street', self.gf('django.db.models.fields.CharField')(max_length=100, null=True))
        # Adding field 'Person.url'
        db.add_column('contacts_and_people_person', 'url',
                      self.gf('django.db.models.fields.URLField')(max_length=200, null=True, blank=True),
                      keep_default=False)


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2014, 3, 15, 0, 0)'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.page': {
            'Meta': {'ordering': "('site', 'tree_id', 'lft')", 'object_name': 'Page'},
            'changed_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'in_navigation': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'limit_visibility_in_menu': ('django.db.models.fields.SmallIntegerField', [], {'default': 'None', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'login_required': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'moderator_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '1', 'blank': 'True'}),
            'navigation_extenders': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['cms.Page']"}),
            'placeholders': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['cms.Placeholder']", 'symmetrical': 'False'}),
            'publication_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'publication_end_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'publisher_is_draft': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'publisher_public': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'publisher_draft'", 'unique': 'True', 'null': 'True', 'to': "orm['cms.Page']"}),
            'publisher_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'reverse_id': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '40', 'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sites.Site']"}),
            'soft_root': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'template': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contacts_and_people.building': {
            'Meta': {'ordering': "('site', 'street', 'number', 'name')", 'object_name': 'Building'},
            'access_and_parking': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_access_and_parking'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'additional_street_address': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_description'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'getting_here': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'getting_here'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'latitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'longitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'map': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '10', 'blank': 'True'}),
            'postcode': ('django.db.models.fields.CharField', [], {'max_length': '9', 'null': 'True', 'blank': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'place'", 'on_delete': 'models.PROTECT', 'to': "orm['contacts_and_people.Site']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'street': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {'default': "''", 'max_length': '256'}),
            'zoom': ('django.db.models.fields.IntegerField', [], {'default': '17', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.entity': {
            'Meta': {'ordering': "['tree_id', 'lft']", 'object_name': 'Entity', '_ormbases': ['contacts_and_people.EntityLite']},
            'abstract_entity': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'auto_contacts_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_news_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_vacancies_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'building_recapitulates_entity_name': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'contacts_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contacts_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'contacts_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Contacts & people'", 'max_length': '50'}),
            'display_parent': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entitylite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.EntityLite']", 'unique': 'True', 'primary_key': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'entity_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'news_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'news_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'news_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'News & events'", 'max_length': '50'}),
            'parent': ('mptt.fields.TreeForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['contacts_and_people.Entity']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'vacancies_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'vacancies_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'vacancies_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Vacancies & studentships'", 'max_length': '50'}),
            'website': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'entity'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['cms.Page']", 'blank': 'True', 'unique': 'True'})
        },
        'contacts_and_people.entityautopagelinkplugineditor': {
            'Meta': {'object_name': 'EntityAutoPageLinkPluginEditor', 'db_table': "'cmsplugin_entityautopagelinkplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'auto_page_plugin'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'link_to': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.entitydirectoryplugineditor': {
            'Meta': {'object_name': 'EntityDirectoryPluginEditor', 'db_table': "'cmsplugin_entitydirectoryplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'display_descriptions_to_level': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0', 'null': 'True', 'blank': 'True'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'directory_plugin'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'levels': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'link_icons': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'use_short_names': ('django.db.models.fields.BooleanField', [], {'default': 'True'})
        },
        'contacts_and_people.entitylite': {
            'Meta': {'object_name': 'EntityLite'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'contacts_and_people.entitymembersplugineditor': {
            'Meta': {'object_name': 'EntityMembersPluginEditor', 'db_table': "'cmsplugin_entitymembersplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'entity_members_plugin'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"})
        },
        'contacts_and_people.membership': {
            'Meta': {'ordering': "('-importance_to_entity', 'person__surname')", 'object_name': 'Membership'},
            'display_role': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'display_roles'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Membership']"}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'members'", 'to': "orm['contacts_and_people.Entity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'importance_to_entity': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'importance_to_person': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'key_contact': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'person': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_of'", 'to': "orm['contacts_and_people.Person']"}),
            'role': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.person': {
            'Meta': {'ordering': "['surname', 'given_name', 'user']", 'object_name': 'Person', '_ormbases': ['contacts_and_people.PersonLite']},
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'data_feed_locked': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entities': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'people'", 'to': "orm['contacts_and_people.Entity']", 'through': "orm['contacts_and_people.Membership']", 'blank': 'True', 'symmetrical': 'False', 'null': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'person_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'institutional_username': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'override_entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'people_override'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'personlite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.PersonLite']", 'unique': 'True', 'primary_key': 'True'}),
            'please_contact': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'contact_for'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Person']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'staff_id': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'person_user'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['auth.User']", 'blank': 'True', 'unique': 'True'})
        },
        'contacts_and_people.personlite': {
            'Meta': {'object_name': 'PersonLite'},
            'given_name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'middle_names': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'surname': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Title']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'})
        },
        'contacts_and_people.phonecontact': {
            'Meta': {'ordering': "('label',)", 'object_name': 'PhoneContact'},
            'area_code': ('django.db.models.fields.CharField', [], {'default': "'029'", 'max_length': '5'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'country_code': ('django.db.models.fields.CharField', [], {'default': "'44'", 'max_length': '5'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'internal_extension': ('django.db.models.fields.CharField', [], {'max_length': '6', 'null': 'True', 'blank': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '12'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'})
        },
        'contacts_and_people.site': {
            'Meta': {'ordering': "('country', 'site_name', 'post_town')", 'object_name': 'Site'},
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'description': ('django.db.models.fields.TextField', [], {'max_length': '500', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post_town': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'site_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contacts_and_people.title': {
            'Meta': {'ordering': "['title']", 'object_name': 'Title'},
            'abbreviation': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        },
        'links.externallink': {
            'Meta': {'ordering': "['title']", 'object_name': 'ExternalLink'},
            'description': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'external_site': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalSite']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['links.LinkType']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'links.externalsite': {
            'Meta': {'ordering': "['domain']", 'object_name': 'ExternalSite'},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'links.linktype': {
            'Meta': {'object_name': 'LinkType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'scheme': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'sites.site': {
            'Meta': {'ordering': "('domain',)", 'object_name': 'Site', 'db_table': "'django_site'"},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        }
    }

    complete_apps = ['contacts_and_people']
########NEW FILE########
__FILENAME__ = models
#app = contacts_and_people
from django.db import models
from django.db.utils import DatabaseError
from django.contrib.contenttypes import generic
from django.contrib.contenttypes.models import ContentType
from django.contrib.auth.models import User
from django.template.defaultfilters import slugify
from django.utils.functional import cached_property
from django.conf import settings
from django.core.urlresolvers import reverse

from cms.models import Page, CMSPlugin
from cms.models.fields import PlaceholderField

from mptt.models import MPTTModel, TreeForeignKey
from mptt.managers import TreeManager

from filer.fields.image import FilerImageField

from arkestra_utilities.mixins import URLModelMixin
from arkestra_utilities.text import concatenate
from arkestra_utilities.settings import (
    MULTIPLE_ENTITY_MODE, ARKESTRA_BASE_ENTITY, DEFAULT_NEWS_PAGE_TITLE,
    DEFAULT_CONTACTS_PAGE_TITLE, DEFAULT_VACANCIES_PAGE_TITLE,
    DEFAULT_PUBLICATIONS_PAGE_TITLE
    )

import news_and_events


class Site(models.Model):
    """Maintains a list of an institution's geographical sites"""
    site_name = models.CharField(max_length=50, unique=True)
    post_town = models.CharField(max_length=50)
    country = models.CharField(max_length=50)
    description = models.TextField(max_length=500, null=True, blank=True)

    class Meta:
        ordering = ('country', 'site_name', 'post_town')

    def __unicode__(self):
        return self.site_name

    def buildings(self):
        return self.place.all().count()

    @property
    def maps(self):
        return [
            building for building in self.place.all() if building.has_map()
            ]


class BuildingManager(models.Manager):
    def get_by_natural_key(self, slug):
        return self.get(slug=slug)


class Building(models.Model):
    # the Building model should really be named Place
    objects = BuildingManager()
    name = models.CharField(max_length=100, null=True, blank=True)
    number = models.CharField(max_length=10, blank=True)
    street = models.CharField(
        "Street name", max_length=100,
        blank=True
        )
    additional_street_address = models.CharField(
        help_text=u"If required",
        max_length=100, null=True, blank=True)
    postcode = models.CharField(max_length=9, null=True, blank=True)
    site = models.ForeignKey(
        Site, on_delete=models.PROTECT, related_name="place"
        )
    slug = models.SlugField(
        blank=True,
        help_text=u"Leave blank to regenerate; amend only if required",
        max_length=255, null=True, unique=True
        )
    image = FilerImageField(
        on_delete=models.SET_NULL,
        null=True, blank=True
        )
    # for the place page
    summary = models.TextField(
        verbose_name="Summary",
        max_length=256,
        default="",
        help_text="A very short description (maximum two lines)",
        )
    description = PlaceholderField(
        'body', related_name="building_description",
        help_text="A fuller description"
        )
    getting_here = PlaceholderField(
        'simple',
        related_name="getting_here",
        help_text="How to get here"
        )
    access_and_parking = PlaceholderField(
        'simple',
        related_name="building_access_and_parking",
        help_text="Where to park, how to get in, etc"
        )
    map = models.BooleanField(
        "Show map", default=False,
        help_text="Use Google Maps to <a target='_blank' \
        style='text-decoration: underline;' \
        href='http://universimmedia.pagesperso-orange.fr/geo/loc.htm'>look up\
        Latitude & Longitude</a>")
    latitude = models.FloatField(null=True, blank=True)
    longitude = models.FloatField(null=True, blank=True)
    zoom = models.IntegerField(blank=True, null=True, default=17)

    class Meta:
        ordering = ('site', 'street', 'number', 'name',)

    def __unicode__(self):
        """
        A text-friendly way of referring to a building
        """
        if self.name:
            return self.name
        elif self.street:
            return concatenate([self.number, self.street], " ")
        else:
            return self.postcode

    @property
    def admin_identifier(self):
        return u"%s (%s)" % (self.__unicode__(), unicode(self.site))

    def get_absolute_url(self):
        return reverse("contact-place", kwargs={"slug": self.slug})

    def save(self):
        # if the slug is blank, regenerate it
        if not self.slug:
            self.slug = slugify(self.__unicode__())
        super(Building, self).save()

    @property
    def get_postal_address(self):
        """
        Assembles the postal (external) parts of an address
        """
        # print "getting postal address"
        address = []
        if self.name:
            address.append(self.name)
        if self.number or self.street:
            address.append(
                concatenate(
                    strings=[self.number, self.street],
                    with_string=" "
                    )
                )
        if self.additional_street_address:
            address.append(self.additional_street_address)
        # there will always be a site.post_town; no need to check
        fragments = concatenate(
            strings=[self.site.post_town, self.postcode],
            with_string=" "
            )
        address.append(fragments)
        return address

    def has_map(self):
        return (
            self.latitude is not None and self.longitude is not None
            and self.zoom and self.map
            )
    has_map.boolean = True

    @cached_property
    def events(self):
        # invoke the lister to find out more
        lister = news_and_events.lister.EventsPlaceLister(
            place=self,
            entity=None,
            display="events",
            order_by="date",
            item_format="details image",
            # request=instance.request
            )
        return lister

    @property
    def get_website(self):
        return None


class PhoneContact(models.Model):
    LABEL_CHOICES = (
        ('', '-----'),
        ('Office', 'Office'),
        ('Laboratory', 'Laboratory'),
        ('Mobile', 'Mobile'),
        ('Fax', 'Fax'),
        ('Out of hours', 'Out of hours'),
        ('Pager', 'Pager'),
        )
    label = models.CharField(max_length=64, null=True, blank=True)
    country_code = models.CharField(max_length=5, default="44")
    area_code = models.CharField(
        max_length=5, default="029", help_text="Not 02920"
        )
    number = models.CharField(max_length=12)
    internal_extension = models.CharField(max_length=6, null=True, blank=True)
    content_type = models.ForeignKey(ContentType)
    object_id = models.IntegerField(db_index=True)
    content_object = generic.GenericForeignKey()

    class Meta:
        ordering = ('label',)

    def __unicode__(self):
        return u"%s: %s" % (self.label, self.number)


class CommonFields(URLModelMixin):
    precise_location = models.CharField(
        help_text=u"Precise location <em>within</em> the building, \
        for visitors",
        max_length=255, null=True, blank=True
        )
    access_note = models.CharField(
        help_text=u"Notes on access/visiting hours/etc",
        max_length=255, null=True, blank=True
        )
    email = models.EmailField(
        verbose_name="Email address", null=True, blank=True
        )
    phone_contacts = generic.GenericRelation(PhoneContact)
    image = FilerImageField(on_delete=models.SET_NULL, null=True, blank=True)

    class Meta:
        abstract = True


class EntityLite(models.Model):
    name = models.CharField(
        max_length=100, help_text="e.g. Department of Haematology"
        )

    def __unicode__(self):
        return unicode(self.name)


class EntityManager(TreeManager):
    def get_by_natural_key(self, slug):
        return self.get(slug=slug)

    def base_entity(self):
        try:
            # are Entities available at all?
            list(Entity.objects.all())
            # print "** Entity objects are available from the database"
        except:
            # no - the database isn't ready
            # print "** Entity objects are not available from the database"
            pass
        else:
            # we managed to get Entity.objects.all()
            # we don't use default_entity (or default_entity_id) in
            # MULTIPLE_ENTITY_MODE
            try:
                # print "trying to match", ARKESTRA_BASE_ENTITY
                entity = self.model.objects.get(id=ARKESTRA_BASE_ENTITY)
            # it can't be found, maybe because of a misconfiguation or because
            # we haven't added any Entities yet
            except (Entity.DoesNotExist, DatabaseError):
                # print "** Either the Entity does not exist, or I got a
                # DatabaseError:"
                # print "**", e
                pass
            else:
                # print "** I successfully found a default entity:", entity
                return entity

    # only used in single-entity mode
    def default_entity_id(self):
        if self.base_entity and not MULTIPLE_ENTITY_MODE:
            return ARKESTRA_BASE_ENTITY


class Entity(MPTTModel, EntityLite, CommonFields):
    objects = EntityManager()

    # URLModelMixin's get_absolute_url() requires a view_name
    view_name = "contact-entity"

    short_name = models.CharField(
        blank=True, help_text="e.g. Haematology",
        max_length=100, null=True, verbose_name="Short name for menus"
        )
    abstract_entity = models.BooleanField(
        "abstract", default=False,
        help_text=u"Select if this <em>group</em> of entities, but not an \
            entity itself, or if it's just a grouping of people",)
    parent = TreeForeignKey(
        'self', null=True, blank=True, related_name='children'
        )
    display_parent = models.BooleanField(
        u"Include parent entity's name in address", default=True,
        help_text=u"Deselect if this entity recapitulates its parent's name"
        )
    building_recapitulates_entity_name = models.BooleanField(
        default=False,
        help_text=u"""
        Removes the first line of the address - use to avoid, for
        example:<br /><em>Department of Haematology<br />Haematology
        Building<br />...</em>
        """
        )
    building = models.ForeignKey(
        Building,
        null=True, blank=True,
        on_delete=models.SET_NULL,
        help_text=u"Select the place where this Entity is based"
        )
    website = models.ForeignKey(
        Page, verbose_name="Home page",
        related_name='entity', unique=True, null=True, blank=True,
        on_delete=models.SET_NULL,
        help_text=u"Select the Page that is the home page of this Entity \
        (leave blank if this is an external Entity)",)

    auto_news_page = models.BooleanField(
        u"Publish an automatic news & events page",
        default=False,
        )
    news_page_menu_title = models.CharField(
        u"Title",
        max_length=50,
        default=DEFAULT_NEWS_PAGE_TITLE
        )
    news_page_intro = PlaceholderField(
        'body',
        related_name="news_page_intro",
        )

    auto_contacts_page = models.BooleanField(
        u"Publish an automatic contacts & people page", default=False,
        )
    contacts_page_menu_title = models.CharField(
        u"Title",
        max_length=50,
        default=DEFAULT_CONTACTS_PAGE_TITLE,
        )
    contacts_page_intro = PlaceholderField(
        'body',
        related_name="contacts_page_intro",
        help_text="Text for the Contacts & people page"
        )

    auto_vacancies_page = models.BooleanField(
        u"Publish an automatic vacancies & studentships page",
        default=False,
        )
    vacancies_page_menu_title = models.CharField(
        u"Title",
        max_length=50,
        default=DEFAULT_VACANCIES_PAGE_TITLE,
        )
    vacancies_page_intro = PlaceholderField(
        'body',
        related_name="vacancies_page_intro",
        )

    if 'publications' in settings.INSTALLED_APPS:
        auto_publications_page = models.BooleanField(
            u"Publish a publications page for this entity automatcally",
            default=False
            )
        publications_page_menu_title = models.CharField(
            u"Title",
            max_length=50,
            default=DEFAULT_PUBLICATIONS_PAGE_TITLE,
            )

    class Meta:
        verbose_name_plural = "Entities"
        ordering = ['tree_id', 'lft']

    # def natural_key(self):
    #     return (self.slug)

    def __unicode__(self):
        return self.name

    @property
    def get_real_ancestor(self):
        """
        Find the nearest non-abstract Entity amongst this Entity's ancestors
        """
        for ancestor in self.get_ancestors(ascending=True):
            if not ancestor.abstract_entity:
                return ancestor

    @property
    def get_building(self):
        """
        Return the Building for this Entity (or its nearest parent)
        """
        if self.abstract_entity:
            return
        elif self.building:
            return self.building
        else:
            try:
                return self.get_real_ancestor.get_building
            except AttributeError:
                return None

    @property
    def _get_institutional_address(self):
        """
        Lists the parts of an address within the institution (Section of YYY,
        Department of XXX and YYY, School of ZZZ)
        """
        if self.abstract_entity:
            return
        else:
            ancestors = []
            showparent = self.display_parent
            for entity in self.get_ancestors(ascending=True) \
                    .exclude(abstract_entity=True):

                if showparent:
                    ancestors.append(entity)
                showparent = entity.display_parent
            return ancestors

    @property
    def get_full_address(self):
        """
        Returns the full address of the entity
        """
        if self.abstract_entity:
            return []
        else:
            address = self._get_institutional_address
            building = self.get_building
            if building:
                if self.building_recapitulates_entity_name:
                    address.extend(building.get_postal_address[1:])
                else:
                    address.extend(building.get_postal_address)
                return address

    @property
    def get_website(self):
        """
        Return the Django CMS page that this Entity has attached to it (or to
        its nearest parent)
        """
        if self.website:
            return self.website
        else:
            try:
                return self.parent.get_website
            except AttributeError:
                return None

    def get_website_url(self):
        """
        Return the Django CMS page's url that this Entity has attached to it
        (or to its nearest parent)
        """
        if self.website:
            return self.website.get_absolute_url()
        elif self.external_url:
            return self.external_url.url
        elif self.parent:
            # try
            return self.parent.get_website_url()
        else:  # except
            return None

    def get_auto_page_url(self, view_name):
        """
        Returns a URL not for the entity, but for its /contact page,
        /news-and-events, or whatever.

        If the entity is the base entity, doesn't add the entity slug to
        the URL
        """
        if not view_name:
            return ""
        # external entities don't have info pages
        elif self.external_url:
            return ""
        # info pages for base entity
        elif self == Entity.objects.base_entity():
            return reverse(view_name)
        # info pages for other entities
        else:
            return reverse(view_name, kwargs={"slug": self.slug})

    def get_template(self):
        """
        Returns a template for any pages that need to render based on this
        entity
        """
        if self.get_website:
            return self.get_website.get_template()
        else:
            return settings.CMS_TEMPLATES[0][0]

    def get_contacts(self):
        """
        Return designated contacts for the entity
        """
        return self.members.filter(
            person__active=True,
            key_contact=True
            ).order_by('importance_to_entity')

    def get_people_with_roles(self, key_members_only=False):
        """
        Publishes an ordered list of key members grouped by their most
        significant roles in the entity

        Ranks roles by importance to entity, then gathers people under that
        role

        Optionally, will return *all* members with roles
        """
        memberships = self.members.\
            filter(person__active=True).\
            exclude(role="").\
            order_by(
                '-importance_to_entity',
                'person__surname',
                'person__given_name'
                )

        if key_members_only:
            memberships = memberships.filter(importance_to_entity__gte=3)
        # create a set with which to check for duplicates
        duplicates = set()
        membership_list = []
        for membership in memberships:
            # if this is the first time we've seen this role...
            if membership.role not in duplicates:
                # put this role on the duplicates list for future reference,
                # and add everyone with that role to the membership_list
                duplicates.add(membership.role)
                membership_list.extend(
                    memberships.filter(role=membership.role)
                )
        # returns a list of memberships, in the right order - we use a regroup
        # tag to group them by person in the template
        return membership_list

    def get_key_people(self):
        return self.get_people_with_roles(key_members_only=True)

    def get_roles_for_members(self, members):
        """
        Given a list of its members (as Persons), returns the best role for
        each.

        The roles returned are in alphabetical order by Person.
        """
        for m in members:
            ms = m.member_of
            # get the best named membership in the entity
            named_memberships = ms.filter(entity=self) \
                .exclude(role="").order_by('-importance_to_person')
            if named_memberships:
                m.membership = named_memberships[0]
            else:
                # see if there's a display_role membership - actually this one
                # should go first
                display_role_memberships = ms.filter(entity=self) \
                    .exclude(display_role=None). \
                    order_by('-importance_to_person',)
                if display_role_memberships:
                    m.membership = display_role_memberships[0].display_role
                else:
                    # find the best named membership anywhere we can
                    best_named_ms = ms.exclude(role="") \
                        .order_by('-importance_to_person',)
                    if best_named_ms:
                        m.membership = best_named_ms[0]
                    else:
                        # add the unnamed membership for this entity - it's
                        # all we have
                        unnamed_mss = ms.order_by('-importance_to_person',)
                        m.membership = unnamed_mss[0]
        return members

    def get_people(self, letter=None):
        """
        Publishes a list of every member, and of every member of all children
        """
        people = Person.objects.filter(
            active=True,
            member_of__entity__in=self.get_descendants(include_self=True)). \
            order_by('surname', 'given_name', 'middle_names').distinct()

        if letter:
            people = people.filter(surname__istartswith=letter)

        return people

    def get_people_and_initials(self, letter=None):
        """
        Returns a list of people and/or their initials for use in people lists

        More than 20 people, or a letter was provided? Return initials
        Fewer than 20 people? Return the people
        """
        people = self.get_people(letter)
        # letter or long list? show initials
        if letter or people.count() > 20:
            initials = set(person.surname[0].upper() for person in people)
            initials = list(initials)
            initials.sort()
            # no letter but list is long? initials only
            if not letter:
                people = people[:0]
        # no letter, short list? don't show initials
        else:
            initials = None
        return (people, initials)


class Title(models.Model):
    title = models.CharField(max_length=50, unique=True)
    abbreviation = models.CharField(max_length=20, unique=True)

    class Meta:
        ordering = ['title']

    def __unicode__(self):
        return self.abbreviation


class PersonLite(models.Model):
    title = models.ForeignKey(
        'contacts_and_people.Title',
        blank=True, null=True,
        on_delete=models.SET_NULL)
    given_name = models.CharField(max_length=50, blank=True, null=True)
    middle_names = models.CharField(max_length=100, blank=True, null=True)
    surname = models.CharField(max_length=50)

    def __unicode__(self):
        # to-do: make it smarter, i.e. don't include empty/None strings
        return u"%s %s %s" % (self.given_name, self.middle_names, self.surname)

    def __getInitials(self):
        if self.given_name != '' and self.middle_names != '':
            return self.given_name[0] + '.' + self.middle_names[0] + '.'
        elif self.given_name != '':
            return self.given_name[0] + '.'
        else:
            return ''
    initials = property(__getInitials,)


class PersonManager(models.Manager):
    def get_by_natural_key(self, slug):
        return self.get(slug=slug)


class Person(PersonLite, CommonFields):
    objects = PersonManager()

    # URLModelMixin's get_absolute_url() requires a view_name
    view_name = "contact-person"

    user = models.ForeignKey(
        User,
        related_name='person_user',
        unique=True,
        blank=True, null=True,
        verbose_name='Arkestra User',
        on_delete=models.PROTECT
        )
    institutional_username = models.CharField(
        max_length=10, blank=True, null=True
        )
    active = models.BooleanField(default=True,)
    description = PlaceholderField('body')
    entities = models.ManyToManyField(
        Entity, related_name='people',
        through='Membership', blank=True, null=True
        )
    building = models.ForeignKey(
        Building,
        verbose_name='Specify building',
        help_text=u"""
            <strong>Only</strong> required if this Person's <strong>Home
            entity</strong> has a different address
        """,
        blank=True, null=True,
        on_delete=models.SET_NULL
        )
    override_entity = models.ForeignKey(
        Entity, verbose_name='Specify entity',
        help_text=u"""
            <strong>Temporarily specify</strong> an entity for contact
            information - over-rides entity and postal address
            """,
        related_name='people_override',
        blank=True, null=True,
        on_delete=models.SET_NULL
        )
    please_contact = models.ForeignKey(
        'self',
        help_text=u"""
            Publish another person's details as contact information for this
            person
        """,
        related_name='contact_for',
        blank=True, null=True,
        on_delete=models.SET_NULL)
    staff_id = models.CharField(null=True, blank=True, max_length=20)
    data_feed_locked = models.BooleanField(default=False)

    # def natural_key(self):
    #     return (self.slug)

    class Meta:
        ordering = ['surname', 'given_name', 'user']
        verbose_name_plural = "People"

    def __unicode__(self):
        title = self.title or ""
        return u" ".join(
            name_part for name_part in (
                unicode(title),
                self.given_name,
                self.surname
            ) if name_part
        )

    @property
    def get_role(self):
        """
        Returns a Membership object.

        Works the Membership object representing a Person's best role, which
        has to be in a real, not abstract, entity, and it must be at least
        Significant (gte = 2) to the person

        If it can't find any role, it returns None.
        """
        memberships = self.member_of.filter(
            entity__abstract_entity=False,
            importance_to_person__gte=2).order_by('-importance_to_person')
        if memberships:
            return memberships[0]
        else:  # the poor person had no memberships
            return None

    @property
    def get_entity(self):
        """
        Works out a person's best entity, based on get_role

        A person needs at least a named role to have an entity.
        """
        if self.override_entity and not self.override_entity.abstract_entity:
            return self.override_entity
        elif self.get_role:
            return self.get_role.entity
        return None

    def get_entity_short_name(self):
        if self.get_entity:
            return self.get_entity.short_name
        else:
            return u""
    get_entity_short_name.short_description = "Entity"

    @property
    def get_building(self):
        """
        Returns a Person's Building, if possible
        """
        if self.building:
            return self.building
        elif self.get_entity:
            return self.get_entity.get_building

    @property
    def get_full_address(self):
        """
        Works out a person's address, based on their home/best entity or
        information that overrides this
        """
        if self.get_entity:  # needs an entity to work
            if self.building:
                address = self.get_entity._get_institutional_address
                address.extend(self.building.get_postal_address)
                return address
            else:
                return self.get_entity.get_full_address
        else:
            return []

    def get_please_contact(self):
        """
        Works out whether to display someone else's contact details
        """
        if self.please_contact:
            return self.please_contact.get_please_contact()
        else:
            return self

    def get_phone_contacts(self):
        return self.get_please_contact().phone_contacts.all()

    def get_email(self):
        return self.get_please_contact().email

    @property
    def real_entity_memberships(self):
        # returns Memberships of non-abstract entities the person belongs to
        return self.member_of.filter(entity__abstract_entity=False)

    def gather_entities(self):
        """
        Returns all the entities that a person belongs to, including implicit
        membership
        """
        entitylist = set()
        for entity in self.entities.all():
            entitylist.add(entity)
            entitylist.update(entity.get_ancestors())
        #set(entity for entity in entitylist if not entity.abstract_entity)
        return entitylist

    def check_please_contact_has_loop(self, compare_to, person_list=None):
        if person_list is None:
            person_list = [compare_to]
        if not self == compare_to:
            person_list.append(self)
        if self.please_contact:
            if compare_to == self.please_contact:
                person_list.append(compare_to)
                return True, person_list
            else:
                return self.please_contact.check_please_contact_has_loop(
                    compare_to, person_list
                    )
        else:
            return False, person_list

    def save(self, *args, **kwargs):
        do_check_please_contact_loop = kwargs.pop(
            'do_check_please_contact_loop', True
            )
        if do_check_please_contact_loop and self.check_please_contact_has_loop(
                compare_to=self) is True:
            raise Exception  # TODO: raise a more appropriate exception
        return super(Person, self).save(*args, **kwargs)


class Membership(models.Model):
    PERSON_DISPLAY_PRIORITY = (
        (1, 'No role'),
        (2, 'Significant'),
        (3, 'More significant'),
        (4, 'Very significant'),
        (5, 'Home'),
        )
    ENTITY_DISPLAY_PRIORITY = (
        (1, 'No role'),
        (2, 'Has a role'),
        (3, 'Key member'),
        (4, 'Keyer member'),
        (5, 'Keyest member'),
        )
    person = models.ForeignKey(Person, related_name='member_of')
    entity = models.ForeignKey(Entity, related_name='members')
    # this is currently too complex to manage - in this version it remains
    # unused
    display_role = models.ForeignKey(
        'self',
        related_name="display_roles",
        null=True, blank=True,
        on_delete=models.SET_NULL)
    key_contact = models.BooleanField(default=False)
    role = models.CharField(max_length=50, null=True, blank=True)
    # how important the role is to the person
    importance_to_person = models.IntegerField(
        blank=True, null=True,
        choices=PERSON_DISPLAY_PRIORITY, default=1
        )
    # how important the role is to the entity
    importance_to_entity = models.IntegerField(
        blank=True, null=True,
        choices=ENTITY_DISPLAY_PRIORITY, default=1
        )

    class Meta:
        ordering = ('-importance_to_entity', 'person__surname')

    def __unicode__(self):
        if self.display_role:
            return "%s-%s" % (
                unicode(self.entity.short_name), unicode(self.display_role)
                )
        else:
            return unicode(self.role)

    def save(self, *args, **kwargs):
        """
        The rules:
                order                 importance_to_entity
        ---------------------       ---------------------
        has no role:    1           has no role:    1
        has a role:     2-4         has a role:     2
        home:           5           key member:     3-5
        """
        # if there's just one membership, make it home; if this one is home,
        # make home on all the others false
        memberships = self.person.member_of.all()
        if self.importance_to_person == 5:
            for membership in memberships:

                if membership.importance_to_person == 5:
                    membership.importance_to_person = 4
                super(Membership, membership).save()
            self.importance_to_person = 5
        # if no role is set, then it can't be home or a key membership, and
        # orders must be the lowest
        if not self.role:
            self.importance_to_person = 1
        # if there is a role set, orders must be > 1
        else:
            # with a role, order must be at least 2
            if self.importance_to_person < 2:
                self.importance_to_person = 2
            # and importance_to_entity must be 2
            if self.importance_to_entity < 2:
                self.importance_to_entity = 2
        super(Membership, self).save(*args, **kwargs)


class EntityAutoPageLinkPluginEditor(CMSPlugin):
    AUTO_PAGES = {
        'contacts-and-people': (
            u'Contacts & people',
            'contact-entity',
            'contacts_page_menu_title',
            'auto_contacts_page'
            ),
        'news-and-events': (
            u'News & events',
            'news-and-events',
            'news_page_menu_title',
            'auto_news_page'
            ),
        'vacancies-and-studentships': (
            u'Vacancies & studentships',
            'vacancies-and-studentships',
            'vacancies_page_menu_title',
            'auto_vacancies_page'
            ),
        'publications': (
            u'Publications',
            'publications',
            'publications_page_menu_title',
            'auto_publications_page'),
        }
    link_to = models.CharField(
        max_length=50,
        choices=[(x, y[0]) for x, y in sorted(AUTO_PAGES.items())]
        )
    entity = models.ForeignKey(
        Entity, null=True, blank=True,
        help_text="Leave blank for autoselect",
        related_name="auto_page_plugin",
        on_delete=models.SET_NULL)
    text_override = models.CharField(
        max_length=256, null=True, blank=True,
        help_text="Override the default link text"
        )


class EntityDirectoryPluginEditor(CMSPlugin):
    DIRECTORY_TYPE = (
        ('children', u'Immediate children only'),
        ('descendants', u'All descendants'),
        )
    entity = models.ForeignKey(
        Entity, null=True, blank=True,
        help_text="Leave blank for autoselect",
        related_name="directory_plugin",
        on_delete=models.SET_NULL
        )

    levels = models.PositiveSmallIntegerField(
        help_text=u'Leave blank/set to 0 to display all sub-levels',
        null=True, blank=True
        )
    display_descriptions_to_level = models.PositiveSmallIntegerField(
        default=0,
        help_text=u'Blank for all levels, 0 for none, 1 for first', null=True,
        blank=True
        )
    link_icons = models.BooleanField(
        help_text=u"Display link icons (first level only)",
        default=True
        )
    use_short_names = models.BooleanField(default=True)


class EntityMembersPluginEditor(CMSPlugin):
    entity = models.ForeignKey(
        Entity, null=True, blank=True,
        help_text="Leave blank for autoselect",
        related_name="entity_members_plugin",
        on_delete=models.SET_NULL
        )

# try:
#     mptt.register(Entity)
# except mptt.AlreadyRegistered:
#     pass

# default_entity_id is used to autofill the default entity where required,
# when MULTIPLE_ENTITY_MODE = False
# default_entity is used throughout the system
# make default_entity and default_entity_id available
# default_entity = Entity.objects.base_entity() # get it from the Entity
# custom manager method
# if default_entity and not MULTIPLE_ENTITY_MODE:
#     default_entity_id = ARKESTRA_BASE_ENTITY
# else:
#     default_entity_id = None


# crazymaniac's wild monkeypatch#
# """
# THE FOLLOWING CODE IS A LOADED GUN AND MAY VERY WELL BACKFIRE.
#
# I STRONGLY ADVICE AGAINST USING THIS CODE AND IF YOU STILL WANT TO USE IT,
# YOU ARE
# DOING SO AT YOUR OWN RISK.
# """
#
# from cms.admin.forms import PageForm
# from cms.admin.pageadmin import PageAdmin

# set up the attributes of the the meta_description in the PageForm
# PageForm.base_fields['meta_description'].required = True
# PageForm.base_fields['meta_description'].label = "Summary"
# PageForm.base_fields['meta_description'].help_text = \
# "A <em>brief</em> (25-30 words maximum) summary of the page's message or
# contents in the clearest, simplest language possible."

# get the SEO settings fields
# tmp = list(PageAdmin.fieldsets[4][1]['fields'])

# we can't amend the fieldsets tuple itself, so we'll just leave the SEO
# fieldset blank
# this is in fact a good metaphor for the empty nature of SEO
# tmp.remove('meta_keywords')
# tmp.remove('meta_description')
# tmp.remove('page_title')
# PageAdmin.fieldsets[4][1]['fields'] = tmp

# rescue the meta_description field from its undeserved obscurity
# and put it in the first fieldset on the page
# PageAdmin.fieldsets[0][1]['fields'].insert(1, 'meta_description')

# page_title really belongs in the Advanced settings fieldset
# PageAdmin.fieldsets[03][1]['fields'].insert(1, 'page_title')

########NEW FILE########
__FILENAME__ = entity_admin_tags
from django import template

register = template.Library()

def show_entity_tree_item(context, entity):
    """
    For the entity tree in admin
    """
    if context.has_key("cl"):
        filtered = False # context['cl'].is_filtered()
    elif context.has_key('filtered'):
        filtered = context['filtered']
    context.update({'filtered':filtered, 'entity':entity})
    return context

show_entity_tree_item = register.inclusion_tag(
        'admin/contacts_and_people/entity/change_list_tree_items.html',
        takes_context=True)(show_entity_tree_item)



########NEW FILE########
__FILENAME__ = entity_tags
from django import template
from contacts_and_people.models import Membership, Entity
#import DoesNotExistError

register = template.Library()

@register.inclusion_tag('directory.html', takes_context=True)
def directory(context, entity = None):
    entity = work_out_entity(context, entity)
    # print entity.get_descendants()
    return { "entities": entity.get_descendants()}


@register.inclusion_tag('includes/people_with_roles.html', takes_context=True)
def people_with_roles(context, letter = None):
    """
   For an Entity, returns a list of members who have roles. 
    """
    entity = work_out_entity(context, None)
    members = list(entity.get_people(letter))
    people = entity.get_roles_for_members(members)
    return {
        'entity' : entity,
        'people': people,
    }  

# think we need some error checking here, in case we get to the last ancestor page without having found an entity
def entity_for_page(page):
    """
    Given a page, returns the entity that has selected the page as its website.
    If the page doesn't have an entity attached to it, will try for the page's parent, and so on.
    """
    if page:
        try:
            return page.entity.get() # return the entity associated with that page
        except Entity.DoesNotExist: # page didn't have an entity
            return entity_for_page(page.parent)
    else:
        return None

# this ought to be a context processor, maybe
def work_out_entity(context,entity):
    """
    One of Arkestra's core functions
    """
    # first, try to get the entity from the context
    entity = context.get('entity', None)
    if not entity:
        # otherwise, see if we can get it from a cms page
        request = context['request']
        if request.current_page:
            entity = entity_for_page(request.current_page)
        else: # we must be in a plugin, either in the page or in admin
            page = context['plugin'].get("page", None)
            if page:
                entity = entity_for_page(page)
            else:
                entity = None
    return entity

########NEW FILE########
__FILENAME__ = person_tags
from django import template
from contacts_and_people.models import Membership, Entity

register = template.Library()

@register.inclusion_tag('entitytrees.html', takes_context=True)
def membership_tree_roots(context, person):
    """
    Produces a list of tree roots. For each of these, uses
    make_membership_tree to display the entities in the tree that the person
    belongs to.
    """
    roots = Entity.objects.root_nodes()
    return {
        'roots': list(roots),
        'person': person,
    }

@register.inclusion_tag('entitytree.html')
def make_membership_tree(person, node):
    """
    Builds a tree representation of the entities that the person belongs to.
    
    This function recurses, by using the template entitytree.html which in turn
    calls this function
    
    This can certainly be made more efficient - it renders to the template far
    too many times
    """    
    if node in person.gather_entities():
        if not node.abstract_entity or node.is_root_node():
            node.display = True
        memberships = Membership.objects.filter(entity=node, person = person)
        roles = []
        for membership in memberships:   
            if membership.role:
                if membership.importance_to_person == 5:
                    node.home = True
                roles.append(membership.role)
        return {
            'node': node,
            'person': person,
            'roles': roles,
        }

########NEW FILE########
__FILENAME__ = building
from django.test import TestCase
from django.core.urlresolvers import reverse

from contacts_and_people.models import Site, Building


class BuildingIdentifierTests(TestCase):
    """tests for Building.__unicode__()"""
    def test_unicode_with_name_returns_name(self):
        building = Building(
            name="Main Building",
            street="St Mary's Street",
            number="37a",
            postcode="CF5 1QE",
            )
        self.assertEqual(building.__unicode__(), "Main Building")

    def test_unicode_with_no_name_returns_street_address(self):
        building = Building(
            street="St Mary's Street",
            number="37a",
            postcode="CF5 1QE",
            )
        self.assertEqual(building.__unicode__(), "37a St Mary's Street")

    def test_unicode_with_no_name_or_street_returns_postcode(self):
        building = Building(
            postcode="CF5 1QE",
            )
        self.assertEqual(building.__unicode__(), "CF5 1QE")


class BuildingGetPostalAddressTests(TestCase):
    """for the Building model"""
    def setUp(self):
        # a geographical Site
        self.cardiff = Site(
            site_name="Main site",
            post_town="Cardiff",
            country="UK",
            )

    def test_get_postal_address_with_name_includes_name(self):
        building = Building(
            name="Main Building",
            street="St Mary's Street",
            number="37a",
            postcode="CF5 1QE",
            site=self.cardiff
            )
        self.assertEqual(
            ['Main Building', "37a St Mary's Street", 'Cardiff CF5 1QE'],
            building.get_postal_address
        )

    def test_get_postal_address_with_missing_components(self):
        building = Building(
            site=self.cardiff
            )
        self.assertEqual(
            ['Cardiff'],
            building.get_postal_address
        )


class BuildingTests(TestCase):
    """Other tests of smaller methods etc"""
    def test_admin_identifier(self):
        building = Building(
            name="Main Building",
            site=Site()
            )
        self.assertEqual(
            building.admin_identifier,
            u"%s (%s)" % (building.__unicode__(), unicode(building.site))
            )

    def test_has_map_is_always_boolean(self):
        building = Building(
            latitude=None,
            longitude=None,
            zoom=17,
            map=False
            )
        self.assertFalse(building.has_map())

        building.map = True
        self.assertFalse(building.has_map())

        building.longitude = 0
        building.latitude = 0
        self.assertTrue(building.has_map())

        building.longitude = 1
        building.latitude = 1
        self.assertTrue(building.has_map())

    def test_reverse_url(self):
        self.assertEqual(
            reverse("contact-place", kwargs={"slug": "some-slug"}),
            "/place/some-slug/"
            )

    def test_save(self):
        site = Site(
            site_name="Main site",
            post_town="Cardiff",
            country="UK",
            )
        site.save()
        building = Building(
            name="Main Building",
            site=site,
            slug="main-building"
            )
        building.save()
        # slug has been manually-set
        self.assertEqual(building.slug, "main-building")

        # a blank slug will be automatically regenerated
        building.slug = ""
        building.save()
        self.assertEqual(building.slug, "main-building")

########NEW FILE########
__FILENAME__ = contactsandpeople
from django.test import TestCase
from django.core.urlresolvers import reverse, resolve
from django.test.client import RequestFactory
from django.http import Http404

from contacts_and_people.models import (
    Site, Person, Building, Entity, Membership
    )
from contacts_and_people.views import contacts_and_people
from links.models import ExternalLink


class SiteTests(TestCase):
    def setUp(self):
        #  a geographical Site
        self.cardiff = Site(
            site_name="Main site",
            post_town="Cardiff",
            country="UK",
            )
        self.cardiff.save()

    def test_no_building_no_maps(self):
        """
        test Site.maps property
        """
        #  no Buildings on this site, should be an empty list
        self.assertEquals(self.cardiff.maps, [])

    def test_building_but_no_map_settings_no_maps(self):
        #  add a Building
        self.main_building = Building(
            name="Main Building",
            street="St Mary's Street",
            site=self.cardiff,
            )
        self.main_building.save()
        self.assertEquals(self.cardiff.maps, [])

    def test_building_and_map_settings(self):
        #  give the building a map
        self.main_building = Building(
            name="Main Building",
            street="St Mary's Street",
            site=self.cardiff,
            map=True,
            latitude=10,
            longitude=10,
            zoom=10,
            )
        self.main_building.save()
        self.assertEquals(self.cardiff.maps, [self.main_building])

    def test_get_absolute_url(self):
        #  give the building a map
        self.main_building = Building(
            name="Main Building",
            street="St Mary's Street",
            site=self.cardiff,
            )
        self.main_building.save()
        self.assertEquals(
            self.main_building.get_absolute_url(),
            "/place/main-building/"
            )


class EntityGetAbsoluteURLTests(TestCase):
    def test_has_no_url(self):
        self.assertEqual(Entity(slug="slug").get_absolute_url(), "/contact/slug/")


class EntityManagerTests(TestCase):
    def setUp(self):
        pass

    def test_base_entity_with_empty_database(self):
        """
        test EntityManager.base_entity
        """
        #  no Entities, should be None
        self.assertEquals(Entity.objects.base_entity(), None)

    def test_base_entity_with_one_entity(self):
        """
        test EntityManager.base_entity
        """
        #  one Entities, should be that
        self.school = Entity(
            name="School of Medicine",
            slug="medicine",
            )
        self.school.save()
        self.assertEquals(Entity.objects.base_entity(), self.school)


class EntityTestObjectsMixin(object):
    """
    Create a set of inter-related objects that we'll use in a series of tests
    """

    def setUp(self):
        #  a geographical Site
        self.cardiff = Site(
            site_name="Main site",
            post_town="Cardiff",
            country="UK",
            )
        self.cardiff.save()

        #  a couple of Buildings on the Site
        self.main_building = Building(
            name="Main Building",
            street="St Mary's Street",
            site=self.cardiff,
            )
        self.main_building.save()

        self.heart_testing_centre = Building(
            name="Heart Testing Centre",
            street="Queen Street",
            site=self.cardiff,
            )
        self.heart_testing_centre.save()

        #  create some Entities in a hierarchy

        #    School of Medicine
        #        Departments (an abstract entity)
        #            Department of Cardiology
        #                Section of Heart Research
        #                Heart Testing Centre
        #                Department of Cardiology Student Centre
        #        Web editors (an abstract entity)

        self.school = Entity(
            name="School of Medicine",
            building=self.main_building,
            slug="medicine",
            )
        self.school.save()

        self.departments = Entity(
            name="departments",
            parent=self.school,
            slug="departments",
            abstract_entity=True,
            building=self.heart_testing_centre,
            # this should be ignored by everything!
            )
        self.departments.save()

        self.department = Entity(
            name="Department of Cardiology",
            parent=self.departments,
            slug="cardiology",
            )
        self.department.save()

        self.section = Entity(
            name="Section of Heart Research",
            parent=self.department,
            slug="heart-research",
            )
        self.section.save()

        self.testing_centre = Entity(
            name="Testing Centre",
            parent=self.department,
            slug="testing-centre",
            building_recapitulates_entity_name=True,
            building=self.heart_testing_centre,
            )
        self.testing_centre.save()

        self.student_centre = Entity(
            name="Department of Cardiology Student Centre",
            parent=self.department,
            slug="student-centre",
            display_parent=False,
            )
        self.student_centre.save()

        self.web_editors = Entity(
            name="Group of web editors",
            parent=self.school,
            slug="web-editors",
            abstract_entity=True,
            )
        self.web_editors.save()

        # set up a Person - we will add memberships later in the tests
        self.smith = Person(slug="smith")
        self.smith.save()


class EntityGetRolesForMembersTests(EntityTestObjectsMixin, TestCase):
    def test_get_roles(self):
        smith_school_membership = Membership(
            person=self.smith,
            entity=self.school,
            importance_to_person=5,
            importance_to_entity=5,
            role="Dean",
            )
        smith_school_membership.save()
        people = [self.smith]
        self.assertEquals(
            self.school.get_roles_for_members(people),
            [self.smith]
            )


class EntityAddressTests(EntityTestObjectsMixin, TestCase):
    def test_get_building_works_when_building_is_assigned(self):
        self.assertEquals(self.school.get_building, self.main_building)

    def test_abstract_entity_never_has_a_building(self):
        self.assertEquals(self.departments.get_building, None)

    def test_child_inherits_building_from_parent(self):
        self.assertEquals(self.section.get_building, self.main_building)

    def test_descendant_inherits_building_from_real_ancestor(self):
        self.assertEquals(self.department.get_building, self.main_building)

    def test_section_entity_get_institutional_address(self):
        #   a list of its section's ancestors excluding abstract entities
        self.assertEquals(
            self.section._get_institutional_address,
            [self.department, self.school]
            )

    def test_student_centre_entity_get_institutional_address(self):
        #  for student_centre, should exclude department
        self.assertEquals(
            self.student_centre._get_institutional_address,
            [self.school]
            )

    def test_entity_get_full_address(self):
        """
        test Entity.get_full_address
        check that Entities report the correct full addresses
        """

    def test_school_entity_get_full_address(self):
        #  an entity with a building
        self.assertEquals(
            self.school.get_full_address,
            [u'Main Building', u"St Mary's Street", u'Cardiff']
            )

    def test_abstract_entity_get_full_address(self):
        #  an abstract entity has no address
        self.assertEquals(self.departments.get_full_address, [])

    def test_abstract_entity_skipped_in_address(self):
        #  abstract entity is skipped in address
        self.assertEquals(
            self.department.get_full_address,
            [self.school, u'Main Building', u"St Mary's Street", u'Cardiff']
            )

    def test_dont_display_parent_in_address(self):
        #  an entity that doesn't display its parent in the address
        self.assertEquals(
            self.student_centre.get_full_address,
            [self.school, u'Main Building', u"St Mary's Street", u'Cardiff']
            )

    def test_building_recapitulates_entity_name_in_address(self):
        #  an entity with building_recapitulates_entity_name flag shares
        #  its name with the building & drops the 1st line of postal address
        self.assertEquals(
            self.testing_centre.get_full_address,
            [self.department, self.school, u"Queen Street", u'Cardiff']
            )


class PersonTests(EntityTestObjectsMixin, TestCase):
    """
    test Person methods: get_role, get_entity, get_building, get_full_address
    check that Person reports the correct information in different
    circumstances
    """

    def test_person_get_absolute_url(self):
        self.assertEquals(
            self.smith.get_absolute_url(),
            "/person/smith/"
            )

    def test_person_with_no_memberships(self):
        #  smith has no Memberships
        self.assertEquals(list(self.smith.real_entity_memberships), [])
        self.assertEquals(self.smith.get_role, None)
        self.assertEquals(self.smith.get_entity, None)
        self.assertEquals(self.smith.get_building, None)
        self.assertEquals(self.smith.get_full_address, [])

    def test_person_with_abstract_entity_memberships(self):
        #  smith is a web editor; only has a membership of an abstract entity
        smith_web_editor_membership = Membership(
            person=self.smith,
            entity=self.web_editors,
            importance_to_person=5,
            importance_to_entity=4,
            role="Lead web editor",
            )
        smith_web_editor_membership.save()

        self.assertEquals(list(self.smith.real_entity_memberships), [])
        self.assertEquals(self.smith.get_role, None)
        self.assertEquals(self.smith.get_entity, None)
        self.assertEquals(self.smith.get_building, None)
        self.assertEquals(self.smith.get_full_address, [])

    def test_person_with_abstract_entity_and_real_entity_memberships(self):
        #  smith's best entity so far is technician in the department
        smith_web_editor_membership = Membership(
            person=self.smith,
            entity=self.web_editors,
            importance_to_person=5,
            importance_to_entity=4,
            role="Lead web editor",
            )
        smith_web_editor_membership.save()

        smith_department_membership = Membership(
            person=self.smith,
            entity=self.department,
            # less important than his other one
            importance_to_entity=4,
            role="Technician",
            )
        smith_department_membership.save()

        self.assertEquals(
            list(self.smith.real_entity_memberships),
            [smith_department_membership]
            )
        self.assertEquals(self.smith.get_role, smith_department_membership)
        self.assertEquals(self.smith.get_entity, self.department)
        self.assertEquals(self.smith.get_building, self.main_building)
        self.assertEquals(
            self.smith.get_full_address,
            [self.school, u'Main Building', u"St Mary's Street", u'Cardiff']
            )

    def test_person_with_better_entity_membership(self):
        #  now smith has a better entity: school
        smith_web_editor_membership = Membership(
            person=self.smith,
            entity=self.web_editors,
            importance_to_person=5,
            importance_to_entity=4,
            role="Lead web editor",
            )
        smith_web_editor_membership.save()

        smith_department_membership = Membership(
            person=self.smith,
            entity=self.department,
            # less important than his other one
            importance_to_person=2,
            importance_to_entity=4,
            role="Technician",
            )
        smith_department_membership.save()

        smith_school_membership = Membership(
            person=self.smith,
            entity=self.school,
            importance_to_person=5,
            importance_to_entity=5,
            role="Dean",
            )
        smith_school_membership.save()

        self.assertEquals(
            list(self.smith.real_entity_memberships),
            [smith_school_membership, smith_department_membership]
            )
        self.assertEquals(self.smith.get_role, smith_school_membership)
        self.assertEquals(self.smith.get_entity, self.school)
        self.assertEquals(self.smith.get_building, self.main_building)
        self.assertEquals(
            self.smith.get_full_address,
            [u'Main Building', u"St Mary's Street", u'Cardiff']
            )

        #  now smith's best entity will be department
        smith_department_membership.importance_to_person = 5
        smith_department_membership.save()

        self.assertEquals(
            list(self.smith.real_entity_memberships),
            [smith_school_membership, smith_department_membership]
            )
        self.assertEquals(self.smith.get_role, smith_department_membership)
        self.assertEquals(self.smith.get_entity, self.department)
        self.assertEquals(self.smith.get_building, self.main_building)
        self.assertEquals(
            self.smith.get_full_address,
            [self.school, u'Main Building', u"St Mary's Street", u'Cardiff']
            )
        #  check his membership of school has been downgraded by the save()
        self.assertEquals(
            Membership.objects.get(
                pk=smith_school_membership.pk
                ).importance_to_person,
            4
        )


class ResolveURLsTests(TestCase):
    def test_resolve_base_entity_url(self):
        resolver = resolve('/contact/')
        self.assertEqual(resolver.view_name, "contact-entity")

    def test_resolve_named_entity_url(self):
        resolver = resolve('/contact/some-slug/')
        self.assertEqual(resolver.view_name, "contact-entity")

    def test_resolve_person_url(self):
        resolver = resolve('/person/slug/')
        self.assertEqual(resolver.view_name, "contact-person")

    def test_resolve_person_tab_url(self):
        resolver = resolve('/person/slug/tab/')
        self.assertEqual(resolver.view_name, "contact-person-tab")

    def test_resolve_people(self):
        resolver = resolve('/people/entity/')
        self.assertEqual(resolver.view_name, "contact-people")

    def test_resolve_person_tab_url(self):
        resolver = resolve('/people/entity/a/')
        self.assertEqual(resolver.view_name, "contact-people-letter")


class ReverseURLsTests(TestCase):
    def test_person_reverse_url(self):
        self.assertEqual(
            reverse("contact-person", kwargs={"slug": "some-slug"}),
            "/person/some-slug/"
            )

    def test_person_tab_reverse_url(self):
        self.assertEqual(
            reverse(
                "contact-person-tab",
                kwargs={"slug": "some-slug", "active_tab": "yibbers"}),
            "/person/some-slug/yibbers/"
            )

    def test_place_reverse_url(self):
        self.assertEqual(
            reverse("contact-place", kwargs={"slug": "some-slug"}),
            "/place/some-slug/"
            )

    def test_place_tab_reverse_url(self):
        self.assertEqual(
            reverse(
                "contact-place-tab",
                kwargs={"slug": "some-slug", "active_tab": "yibbers"}),
            "/place/some-slug/yibbers/"
            )

    def test_contact_people_reverse_url(self):
        self.assertEqual(
            reverse("contact-people", kwargs={"slug": "some-slug"}),
            "/people/some-slug/"
            )

    def test_contact_people_letter_reverse_url(self):
        self.assertEqual(
            reverse(
                "contact-people-letter",
                kwargs={"slug": "some-slug", "letter": "w"}),
            "/people/some-slug/w/"
            )

    def test_contact_entity_reverse_url(self):
        self.assertEqual(
            reverse("contact-entity", kwargs={"slug": "some-slug"}),
            "/contact/some-slug/"
            )

    def test_contact_base_entity_reverse_url(self):
        self.assertEqual(
            reverse("contact-entity"),
            "/contact/"
            )


class EntityGetRelatedInfoPageTests(EntityTestObjectsMixin, TestCase):

    def test_external_entity(self):
        #  an external entity can't have any related info pages
        external_url = ExternalLink(title="Example", url="http://example.com")
        self.school.external_url = external_url
        self.assertEquals(
            Entity(external_url = external_url).get_auto_page_url("contact-entity"),
            ""
            )

    def test_auto_page_url_no_kind_string_provided(self):
        self.assertEquals(
            Entity(slug="slug").get_auto_page_url(""),
            ""
            )

    def test_auto_page_url(self):
        self.assertEquals(
            Entity(slug="slug").get_auto_page_url("contact-entity"),
            "/contact/slug/"
            )

class EntityViewTests(TestCase):
    def test_contacts_and_people_no_slug_match(self):
        self.assertRaises(
            Http404,
            contacts_and_people, RequestFactory().get("/"), "slug"
            )

    def test_contacts_and_people_slug_match_but_external(self):
        e = ExternalLink(title="external link", url="http://example.com/", id=1)
        e.save()
        entity = Entity(
            name="School of Medicine",
            slug="medicine",
            external_url=e
            )
        entity.save()

        self.assertRaises(
            Http404,
            contacts_and_people, RequestFactory().get("/"), "medicine"
            )

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import patterns, include, url

urlpatterns = patterns(
    'contacts_and_people.views',

    # person
    url(r"^person/(?P<slug>[-\w]+)/$",
        view="person",
        name="contact-person"
        ),
    url(r"^person/(?P<slug>[-\w]+)/(?P<active_tab>[-\w]*)/$",
        view="person",
        name="contact-person-tab"
        ),

    # place
    url(r"^place/(?P<slug>[-\w]+)/$",
        view="place",
        name="contact-place"
        ),
    url(r"^place/(?P<slug>[-\w]+)/(?P<active_tab>[-\w]*)/$",
        view="place",
        name="contact-place-tab"
        ),

    # lists of people in an entity
    url(
        r"^people/(?P<slug>[-\w]+)/$",
        view="people",
        name="contact-people"
        ),
    url(
        r"^people/(?P<slug>[-\w]+)/(?P<letter>\w)/$",
        view="people",
        name="contact-people-letter"
        ),

    # main contacts & people page
    url(
        r"^contact/(?:(?P<slug>[-\w]+)/)?$",
        view="contacts_and_people",
        name="contact-entity"
        ),

    # news, events, vacancies, studentships
    (r'^', include('news_and_events.urls')),
    (r'^', include('vacancies_and_studentships.urls')),

    # housekeeping
    (r'^', include('housekeeping.urls')),
    (r'^', include('arkestra_image_plugin.urls')),
    )

########NEW FILE########
__FILENAME__ = views
from django.utils.translation import ugettext_lazy as _
from django.db.models import Q
import django.http as http
from django.http import Http404
from django.template import RequestContext
from django.shortcuts import render_to_response, get_object_or_404

from links.link_functions import object_links

from models import Person, Building, Membership, Entity


from django.conf import settings

applications = getattr(settings, 'INSTALLED_APPS')

# required for publications
if 'publications' in applications:
    from publications.models import Researcher


def contacts_and_people(request, slug):
    slug = slug or getattr(Entity.objects.base_entity(), "slug", None)
    entity = get_object_or_404(Entity, slug=slug, external_url=None)

    # for the menu, because next we mess up the path
    request.auto_page_url = request.path

    # for the menu, so it knows where we are
    # request.path = entity.get_website.get_absolute_url()
    request.current_page = entity.get_website
    template = entity.get_template()
    main_page_body_file = "contacts_and_people/entity_contacts_and_people.html"

    # meta values - title and meta
    title = "Contact information for %s" % entity
    meta = {
        "description": """
            Addresses, phone numbers, staff lists and other contact information
            """,
        }

    people, initials = entity.get_people_and_initials()

    # only show pagetitle if there are people
    if people:
        pagetitle = u"Contacts & people"
    else:
        pagetitle = u""

    # are there Key People to show?
    if entity.get_key_people(): # if so we will show a list of people with key roles, then a list of other people
        people_list_heading = _(u"Also")
        # now remove the Key People from the people list
        people = [
            person for person in people if person not in set(
                [role.person for role in entity.get_key_people()]
            )
        ]
    else: # otherwise, just a list of the people with roles
        people_list_heading = _(u"People")
    # convert the list of Persons into a list of Members
    people = entity.get_roles_for_members(people)
    search_fields = [
        {
            "field_name": "name",
            "field_label": "Name",
            "placeholder": "Surname or first name",
            "search_keys": [
                "given_name__icontains",
                "surname__icontains",
                ],
            },
        {
            "field_name": "role",
            "field_label": "Roles",
            "placeholder": "All roles",
            "search_keys": [
                "member_of__role__icontains",
                ]
            }
        ]

    people_qs = entity.get_people()
    search = False

    for search_field in search_fields:
        field_name = search_field["field_name"]
        if field_name in request.GET:
            query = request.GET[field_name]
            search_field["value"] = query
            if query:
                search = True

            q_object = Q()
            for search_key in search_field["search_keys"]:
                lookup = {search_key: query}
                q_object |= Q(**lookup)
            people_qs = people_qs.distinct().filter(q_object)

    if search:
        people_qs = entity.get_roles_for_members(people_qs)

    return render_to_response(
        # this is a catch-all template, that then uses includes to bring in
        # extra information
        "arkestra_utilities/entity_auto_page.html",
        {
            "entity":entity,
            "pagetitle": pagetitle,
            "entity.website.template": template,
            "main_page_body_file": main_page_body_file,
            "email": entity.email,
            "title": title,
            "meta": meta,
            "precise_location": entity.precise_location,
            "intro_page_placeholder": entity.contacts_page_intro,
            "phone": entity.phone_contacts.all(),
            "full_address" : entity.get_full_address,
            "building" : entity.get_building,
            "people": people,
            "people_list_heading": people_list_heading,
            "initials_list": initials,
            "search_fields": search_fields,
            "people_qs": people_qs,
            "search": search,
        },
        RequestContext(request),
        )

def people(
    request,
    slug=getattr(Entity.objects.base_entity(), "slug", None),
    letter=None
    ):
    """
    Responsible for lists of people
    """
    # general values needed to set up and construct the page and menus
    slug = slug or getattr(Entity.objects.base_entity(), "slug", None)
    entity = get_object_or_404(Entity, slug=slug, external_url=None)

    # for the menu, because next we mess up the path
    request.auto_page_url = entity.get_auto_page_url("contact-entity")

    # for the menu, so it knows where we are
    # request.path = entity.get_website.get_absolute_url()
    request.current_page = entity.get_website
    template = entity.get_template()
    main_page_body_file = "includes/people_list_with_index.html"

    # meta values - title and meta
    meta = {u"description": "People in %s" % entity}
    title = u"%s: people" % entity

    # content values
    people, initials = entity.get_people_and_initials()

    if letter:
        people = entity.get_people(letter)
        title = u"%s, people by surname: %s" % (entity, letter.upper())

    return render_to_response(
        "arkestra_utilities/entity_auto_page.html",
        {
            "entity":entity,
            "pagetitle": entity,
            "entity.website.template": template,
            "main_page_body_file": main_page_body_file,

            "title": title,
            "meta": meta,

            "people": people,
            "initials_list": initials,
            "letter": letter,
        },
        RequestContext(request),
    )


def publications(request, slug):
    entity = Entity.objects.get(slug=slug)
    request.current_page = entity.website
    return render_to_response(
        "contacts_and_people/publications.html",
        {"entity":entity,},
        RequestContext(request),
    )


def person(request, slug, active_tab=""):
    """
    Responsible for the person pages
    """
    person = get_object_or_404(Person, slug=slug, active=True)
    person.links = object_links(person)

    # we have a home_role, but we should also provide a role, even where it's
    # good enough to give us an address
    home_role = person.get_role

    if home_role:
        entity = home_role.entity
    # don't rely on home_role.entity - could be None or overridden
    entity = person.get_entity

    building = person.get_building

    email = person.get_email()
    phone = person.get_phone_contacts()

    # contact = person.get_please_contact()

    if person.please_contact:
        precise_location = None
    else:
        precise_location = person.precise_location
    access_note = person.access_note

    if home_role:
        description = ", ".join((home_role.__unicode__(), entity.__unicode__()))
        request.current_page = entity.get_website
    else:
        description = Entity.objects.base_entity().__unicode__()
        request.current_page = Entity.objects.base_entity().get_website

    meta = {
        "description": ": ".join((person.__unicode__(), description))
    }

    if entity:
        template = entity.get_template()
    # no memberships, no useful information
    else:
        template = Entity.objects.base_entity().get_template()

    tabs_dict = { # information for each kind of person tab
        "default": {
            "tab": "contact",
            "title": "Contact information",
            "address": "",
            "meta_description_content": person,
        },
        "research": {
            "tab": "research",
            "title": "Research",
            "address": "research",
            "meta_description_content": unicode(person) + " - research interests",
        },
        "publications": {
            "tab": "publications",
            "title": "Publications",
            "address": "publications",
            "meta_description_content": unicode(person) + " - publications",
        },
    }

    # mark the active tab, if there is one
    if active_tab:
        try:
            tabs_dict[active_tab]["active"] = True
        except KeyError:
            raise http.Http404

    # add tabs to the list of tabs
    tabs = []
    tabs.append(tabs_dict["default"])

    if 'publications' in applications:
        try:
            if person.researcher and person.researcher.publishes:
                r = person.researcher
                if r.synopsis and r.description:
                        if r.synopsis.cmsplugin_set.all() \
                                or r.description.cmsplugin_set.all():
                            tabs.append(tabs_dict["research"])
                if r.authored.exists():
                    tabs.append(tabs_dict["publications"])
        except Researcher.DoesNotExist:
            pass

    # were there any tabs created?
    if tabs:
        if not active_tab:
            # find out what to add to the url for this tab
            active_tab=tabs[0]["address"]
            # mark the tab as active for the template
            tabs[0]["active"]=True
        # fewer than 2? not worth having tabs!
        if len(tabs)==1:
            tabs=[]

    meta_description_content = tabs_dict[active_tab or "default"]["meta_description_content"]
    if active_tab:
        active_tab = "_" + active_tab

    meta = {
        "description": meta_description_content,
        }

    # there's a problem here - pages such as Cardiff's /person/dr-kathrine-jane-craig/ don't
    # get the menu right - why?
    # print "****", request.auto_page_url, request.path, request.current_page, entity.get_website

    return render_to_response(
        "contacts_and_people/person%s.html" % active_tab,
        {
            "person":person, # personal information
            "home_role": home_role, # entity and position
            "entity": entity,
            "template": template, # from entity
            "building": building,
            "email": email, # from person or please_contact
            "precise_location": precise_location, # from person, or None
            "phone": phone,
            "full_address" : person.get_full_address,
            "access_note": access_note, # from person
            "tabs": tabs,
            "tab_object": person,
            "active_tab": active_tab,
            "meta": meta,
        },
        RequestContext(request),
    )

def place(request, slug, active_tab=""):
    """
    Receives active_tab from the slug.

    The template receives "_" + active_tab to identify the correct template (from includes).
    """
    place = get_object_or_404(Building, slug=slug)
    tabs_dict = { # information for each kind of place page
        "about": {
            "tab": "about",
            "title": "About",
            "address": "",
            "meta_description_content": place.summary,
        },
        "map": {
            "tab": "map",
            "title": "Map",
            "address": "map",
            "meta_description_content": "Map for " + place.__unicode__(),
        },
        "getting-here": {
            "tab": "getting-here",
            "title": "Getting here",
            "address": "getting-here",
            "meta_description_content": "How to get to " + place.__unicode__(),
        },
        "events": {
            "tab": "events",
            "title": "What's on here",
            "address": "events",
            "meta_description_content": "What's on at " + place.__unicode__(),
        },
    }

    if active_tab and not active_tab in tabs_dict:
        raise Http404

    # mark the active tab, if there is one
    if active_tab in tabs_dict:
        tabs_dict[active_tab]["active"] = True

    # add tabs to the list of tabs
    tabs = [tabs_dict["about"]]
    if place.has_map():
        tabs.append(tabs_dict["map"])
    if (place.getting_here and place.getting_here.cmsplugin_set.all()) \
        or (place.access_and_parking and place.access_and_parking.cmsplugin_set.all()):
        tabs.append(tabs_dict["getting-here"])
    if place.events:
        tabs.append(tabs_dict["events"])

    if not active_tab:
        # find out what to add to the url for this tab
        active_tab=tabs[0]["address"]
        # mark the tab as active for the template
        tabs[0]["active"]=True
    # fewer than 2? not worth having tabs!
    if len(tabs)==1:
        tabs=[]

    meta_description_content = tabs_dict[active_tab or "about"]["meta_description_content"]
    if active_tab:
        active_tab = "_" + active_tab

    meta = {
        "description": meta_description_content,
        }
    page = Entity.objects.base_entity().get_website
    request.current_page = page
    template = page.get_template()

    # the three lines above were those below - which look quite wrong

    # if default_entity:
    #     page = default_entity.get_website
    #     request.current_page = page
    #     template = page.get_template()
    # else:
    #     page =  entity.get_website
    #     request.current_page = page # for the menu, so it knows where we are
    #     template = page.get_template()

    return render_to_response(
        "contacts_and_people/place%s.html" % active_tab,
        {
        "place":place,
        "tabs": tabs,
        "tab_object": place,
        "active_tab": active_tab,
        "template": template,
        "meta": meta,
        },
        RequestContext(request),        )


def ajaxGetMembershipForPerson(request):
    #Which person was/is selected
    try:
        person_id = int(request.GET.get("person_id"))
    except ValueError:
        person_id = 0
    #If editing a current displayrole
    try:
        displayrole_id = int(request.GET.get("displayrole_id"))
    except ValueError:
        displayrole_id = 0
    #If editing a current membership
    try:
        membership_id = int(request.GET.get("membership_id"))
    except ValueError:
        membership_id = 0
    #Server response to AJAX
    response = http.HttpResponse()
    #BLANK option
    response.write ('<option value="">---------</option>')
    #If valid person selected make <option> list of all their existing memberships
    if (person_id > 0):
        membership_forperson_list = Membership.objects.filter(
            person__id=person_id
            ).order_by('entity__name')

        for membership in membership_forperson_list:
            #dont include this membership if it is the one we are editing
            if membership.id != membership_id:
                # add a SELECTED clause if this is the display_role that
                # was previously chosen
                if membership.id == displayrole_id:
                    is_selected = " selected "
                else:
                    is_selected = ""
                # return an <option> entry for that membership
                response.write('<option ' + is_selected + ' value="' + unicode(membership.id) + '">' + \
                    unicode(membership.entity) + ' - ' + unicode(membership.role) + \
                    '</option>')
    #Done
    return response

########NEW FILE########
__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# Arkestra documentation build configuration file, created by
# sphinx-quickstart on Sun Jun 19 00:26:12 2011.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = []

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Arkestra'
copyright = u'Daniele Procida'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '2.0'
# The full version, including alpha/beta/rc tags.
release = 'dev'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'Arkestradoc'


# -- Options for LaTeX output --------------------------------------------------

# The paper size ('letter' or 'a4').
#latex_paper_size = 'letter'

# The font size ('10pt', '11pt' or '12pt').
#latex_font_size = '10pt'

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'Arkestra.tex', u'Arkestra Documentation',
   u'Daniele Procida', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Additional stuff for the LaTeX preamble.
#latex_preamble = ''

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'arkestra', u'Arkestra Documentation',
     [u'Daniele Procida'], 1)
]

def setup(app):
    app.add_stylesheet('../../../arkestra.css')

########NEW FILE########
__FILENAME__ = arkestra_settings
# Before we do anything else, get some default settings built into Arkestra.
# They are not just Arkestra settings, but settings for other applications
# that Arkestra requires to be just so.


# These are the only settings you really need.
# If you need to modify other aspects of Arkestra's behaviour, see the
# settings that are available in arkestra_utilities.settings; copy them
# here and modify them here (not there)

# ------------------------ Arkestra settings

# must match the id of your base or default entity
ARKESTRA_BASE_ENTITY = 1

# MULTIPLE_ENTITY_MODE is for projects hosting the site of more than one entity
# This does not necessarily entail a site for complex organisation,
# or for a number of different organisations - being able to redirect
# news and events items to particular entities for example requires
# MULTIPLE_ENTITY_MODE to be True

MULTIPLE_ENTITY_MODE = True

# how will video be encoded? by a thread? well, that's OK just for proof of
# concept
# but not really viable for anything else. We can use celery instead - but you
# have
# to set it up - see the Django Celery section in settings

USE_CELERY_FOR_VIDEO_ENCODING = False


# ------------------------ Semantic editor

import os
from settings import STATIC_URL
SEMANTICEDITOR_MEDIA_URL = os.path.join(STATIC_URL, "semanticeditor/")


# ------------------------ Link system

# what filetypes can the user provide links to?
PERMITTED_FILETYPES = {
    "pdf": "Portable Document Format",
    "txt": "Plain text",
    "doc": "MS Word (avoid using if possible)",
    "rtf": "Rich Text Format",
    "csv": "Comma-separated values",
    }


# -------- Headings ----------------------

# global value for the heading level for page titles (e.g. entity names in
# entity pages)
PAGE_TITLE_HEADING_LEVEL = 1

# The default (typically, the next down from the PAGE_TITLE_HEADING_LEVEL)
IN_BODY_HEADING_LEVEL = 2
PLUGIN_HEADING_LEVEL_DEFAULT = 2

########NEW FILE########
__FILENAME__ = deployment_settings
from settings import *

DEBUG = False
TEMPLATE_DEBUG = DEBUG
THUMBNAIL_DEBUG = False # if True, will cause template syntax errors for missing images
########NEW FILE########
__FILENAME__ = legacy_finders
from django.contrib.staticfiles.storage import AppStaticStorage
from django.contrib.staticfiles.finders import AppDirectoriesFinder

class LegacyAppMediaStorage(AppStaticStorage):
    source_dir = 'media'

class LegacyAppDirectoriesFinder(AppDirectoriesFinder):
    storage_class = LegacyAppMediaStorage
########NEW FILE########
__FILENAME__ = settings
# Django settings for example project.

import os.path

# Make it work straight from the checkout!
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '../'))

# set the BASE_PATH for convenience's sake
BASE_PATH = os.path.normpath(os.path.dirname(__file__))

DEBUG = True
TEMPLATE_DEBUG = DEBUG

ADMINS = (
    # ('Your Name', 'your_email@example.com'),
)

MANAGERS = ADMINS

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3', # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': 'example.db',                      # Or path to database file if using sqlite3.
        'USER': '',                      # Not used with sqlite3.
        'PASSWORD': '',                  # Not used with sqlite3.
        'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
    }
}

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# On Unix systems, a value of None will cause Django to use the same
# timezone as the operating system.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'Europe/London'
DATE_FORMAT = "jS F Y"
TIME_FORMAT = "H\.i"

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale.
USE_L10N = True

# If you set this to False, Django will not use timezone-aware datetimes.
USE_TZ = False

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
MEDIA_ROOT = BASE_PATH+'/media'

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = '/media/'

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = os.path.join(BASE_PATH, "static")

# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = '/static/'

# URL prefix for admin static files -- CSS, JavaScript and images.
# Make sure to use a trailing slash.
# Examples: "http://foo.com/static/admin/", "/static/admin/".
ADMIN_MEDIA_PREFIX = '/static/admin/'

# Additional locations of static files
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    # 'legacy_finders.LegacyAppDirectoriesFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

# Make this unique, and don't share it with anybody.
SECRET_KEY = '+l!v($pn27-@l_7=9&amp;r-^wl!cqyn=yi3npu9dv02@c@th-or7n'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
#     'django.template.loaders.eggs.Loader',
)

TEMPLATE_CONTEXT_PROCESSORS = (
    'django.core.context_processors.debug',
    "django.core.context_processors.request",
    "django.contrib.auth.context_processors.auth",
    "django.core.context_processors.i18n",
    "django.core.context_processors.media",
    'django.core.context_processors.static',
    # 'django.core.context_processors.csrf',
    'django.contrib.messages.context_processors.messages',

    "cms.context_processors.media",
    'sekizai.context_processors.sekizai',

    "arkestra_utilities.context_processors.arkestra_templates",
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # Uncomment the next line for simple clickjacking protection:
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # 'cms.middleware.multilingual.MultilingualURLMiddleware',
    'cms.middleware.page.CurrentPageMiddleware',
    'cms.middleware.user.CurrentUserMiddleware',
    'cms.middleware.toolbar.ToolbarMiddleware',

    'pagination.middleware.PaginationMiddleware',
)

ROOT_URLCONF = 'example.urls'

# Python dotted path to the WSGI application used by Django's runserver.
WSGI_APPLICATION = 'example.wsgi.application'

TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    BASE_PATH+'/templates/',
)

INSTALLED_APPS = (

     # Django CMS applications

    'arkestra_utilities',
    'cms',
    'menus',
    # 'appmedia',
    'cms.plugins.text',
    'cms.plugins.snippet',
    'sekizai',
    # 'djcelery',     # will need to be enabled for celery processing

    # Arkestra applications

    'contacts_and_people',
    'vacancies_and_studentships',
    'news_and_events',
    'links',
    'arkestra_utilities.widgets.combobox',
    'arkestra_image_plugin',
    # 'publications',
    # 'symplectic',
    'video',
    'housekeeping',

    # other applications

    'polymorphic',
    'semanticeditor',
    'mptt',
    'easy_thumbnails',
    'typogrify',
    'filer',
    'widgetry',
    'south',
    'treeadmin',
    'pagination',

    # core Django applications
    # these should be last, so we can override their templates

    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admin',
    'django.contrib.admindocs',
    'django.contrib.humanize',
    'django.contrib.markup'
)

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}

THUMBNAIL_PROCESSORS = (
    'easy_thumbnails.processors.colorspace',
    'easy_thumbnails.processors.autocrop',
    'filer.thumbnail_processors.scale_and_crop_with_subject_location',
    'easy_thumbnails.processors.filters',
    )

# ------------------------ Django Celery
try:
    import djcelery
    djcelery.setup_loader()

    BROKER_HOST = "localhost"
    BROKER_PORT = 5672
    BROKER_USER = "guest"
    BROKER_PASSWORD = "guest"
    BROKER_VHOST = "/"
except ImportError:
    pass


# ------------------------ Django Filer

FILER_FILE_MODELS = (
        'video.models.Video',
        'filer.models.imagemodels.Image',
        'filer.models.filemodels.File',
    )

# ------------------------ Django CMS

gettext = lambda s: s

CMS_SOFTROOT = True
CMS_PERMISSION = True
CMS_SEO_FIELDS = True


# this is only here because I don't know how to make other apps find it otherwise, and they rely on it.
CMS_MEDIA_URL = STATIC_URL + 'cms/'

CMS_TEMPLATES = (
    ('institute.html', gettext('Institute of Mediaeval Medicine')),
)

CMS_PAGE_FLAGS = (
    ('no_local_menu', 'Hide local menu') ,
    ('no_horizontal_menu', 'No horizontal menu') ,
    ('no_page_title', "Don't display page title") ,
    )

CMS_PLACEHOLDER_CONF = {
    'body': {
        # "plugins": (
        #     'SemanticTextPlugin',
        #     'CMSVacanciesPlugin',
        #     'CMSNewsAndEventsPlugin',
        #     'SnippetPlugin',
        #     'LinksPlugin',
        #     'CMSPublicationsPlugin',
        #     'ImagePlugin',
        #     'ImageSetPublisher',
        #     'EntityAutoPageLinkPluginPublisher',
        #     'EntityMembersPluginPublisher',
        #     'FilerImagePlugin',
        #     'EntityDirectoryPluginPublisher',
        #     'CarouselPluginPublisher',
        #     'FocusOnPluginPublisher',
        #     'VideoPluginPublisher',
        #     ),
        "extra_context": {
            "width":"880",
            },
        "name": gettext("body"),
    },
}

LANGUAGES = (
('en', gettext('English')),
('de', gettext('German')),
('cy', gettext('Cymraeg')),
)

# ------------------------ WYMeditor/SemanticEditor

# these override the settings in cms.plugins.text.settings

WYM_TOOLS = ",\n".join([
    "{'name': 'Italic', 'title': 'Emphasis', 'css': 'wym_tools_emphasis'}",
    "{'name': 'Bold', 'title': 'Strong', 'css': 'wym_tools_strong'}",
    "{'name': 'InsertOrderedList', 'title': 'Ordered_List', 'css': 'wym_tools_ordered_list'}",
    "{'name': 'InsertUnorderedList', 'title': 'Unordered_List', 'css': 'wym_tools_unordered_list'}",
    "{'name': 'Indent', 'title': 'Indent', 'css': 'wym_tools_indent'}",
    "{'name': 'Outdent', 'title': 'Outdent', 'css': 'wym_tools_outdent'}",
    "{'name': 'Undo', 'title': 'Undo', 'css': 'wym_tools_undo'}",
    "{'name': 'Redo', 'title': 'Redo', 'css': 'wym_tools_redo'}",
    "{'name': 'ToggleHtml', 'title': 'HTML', 'css': 'wym_tools_html'}",
])

WYM_CONTAINERS = ",\n".join([
    "{'name': 'P', 'title': 'Paragraph', 'css': 'wym_containers_p'}",
   # "{'name': 'H1', 'title': 'Heading_1', 'css': 'wym_containers_h1'}", # I assume you reserve <h1> for your page templates
    "{'name': 'H2', 'title': 'Heading_2', 'css': 'wym_containers_h2'}",
    "{'name': 'H3', 'title': 'Heading_3', 'css': 'wym_containers_h3'}",
    "{'name': 'H4', 'title': 'Heading_4', 'css': 'wym_containers_h4'}",
    "{'name': 'H5', 'title': 'Heading_5', 'css': 'wym_containers_h5'}",
    "{'name': 'H6', 'title': 'Heading_6', 'css': 'wym_containers_h6'}",
#    "{'name': 'PRE', 'title': 'Preformatted', 'css': 'wym_containers_pre'}",
   "{'name': 'BLOCKQUOTE', 'title': 'Blockquote', 'css': 'wym_containers_blockquote'}",
   # "{'name': 'TH', 'title': 'Table_Header', 'css': 'wym_containers_th'}", # not ready for this yet
])

from arkestra_settings import *# import pdb; pdb.set_trace()

########NEW FILE########
__FILENAME__ = test_settings
# Django settings for example project.

import os.path

# Make it work straight from the checkout!
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '../'))

# set the BASE_PATH for convenience's sake
BASE_PATH = os.path.normpath(os.path.dirname(__file__))

DEBUG = True
TEMPLATE_DEBUG = DEBUG

ADMINS = (
    # ('Your Name', 'your_email@example.com'),
)

MANAGERS = ADMINS

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3', # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': 'test_example.db',                      # Or path to database file if using sqlite3.
        'USER': '',                      # Not used with sqlite3.
        'PASSWORD': '',                  # Not used with sqlite3.
        'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
    }
}

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# On Unix systems, a value of None will cause Django to use the same
# timezone as the operating system.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'Europe/London'
DATE_FORMAT = "jS F Y"
TIME_FORMAT = "H\.i"

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale.
USE_L10N = True

# If you set this to False, Django will not use timezone-aware datetimes.
USE_TZ = False

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
MEDIA_ROOT = BASE_PATH+'/media'

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = '/media/'

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = os.path.join(BASE_PATH, "static")

# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = '/static/'

# URL prefix for admin static files -- CSS, JavaScript and images.
# Make sure to use a trailing slash.
# Examples: "http://foo.com/static/admin/", "/static/admin/".
ADMIN_MEDIA_PREFIX = '/static/admin/'

# Additional locations of static files
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    # 'legacy_finders.LegacyAppDirectoriesFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

# Make this unique, and don't share it with anybody.
SECRET_KEY = '+l!v($pn27-@l_7=9&amp;r-^wl!cqyn=yi3npu9dv02@c@th-or7n'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
#     'django.template.loaders.eggs.Loader',
)

TEMPLATE_CONTEXT_PROCESSORS = (
    'django.core.context_processors.debug',
    "django.core.context_processors.request",
    "django.contrib.auth.context_processors.auth",
    "django.core.context_processors.i18n",
    "django.core.context_processors.media",
    'django.core.context_processors.static',
    # 'django.core.context_processors.csrf',
    'django.contrib.messages.context_processors.messages',

    "cms.context_processors.media",
    'sekizai.context_processors.sekizai',

    "arkestra_utilities.context_processors.arkestra_templates",
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # Uncomment the next line for simple clickjacking protection:
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # 'cms.middleware.multilingual.MultilingualURLMiddleware',
    'cms.middleware.page.CurrentPageMiddleware',
    'cms.middleware.user.CurrentUserMiddleware',
    'cms.middleware.toolbar.ToolbarMiddleware',

    'pagination.middleware.PaginationMiddleware',
)

ROOT_URLCONF = 'example.urls'

# Python dotted path to the WSGI application used by Django's runserver.
WSGI_APPLICATION = 'example.wsgi.application'

TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    BASE_PATH+'/templates/',
)

INSTALLED_APPS = (

     # Django CMS applications

    'arkestra_utilities',
    'cms',
    'menus',
    # 'appmedia',
    'cms.plugins.text',
    'cms.plugins.snippet',
    'sekizai',
    # 'djcelery',     # will need to be enabled for celery processing

    # Arkestra applications

    'contacts_and_people',
    'vacancies_and_studentships',
    'news_and_events',
    'links',
    'arkestra_utilities.widgets.combobox',
    'arkestra_image_plugin',
    'video',
    'housekeeping',

    # other applications

    'polymorphic',
    'semanticeditor',
    'mptt',
    'easy_thumbnails',
    'typogrify',
    'filer',
    'widgetry',
    # 'south', # don't leave this disabled
    'treeadmin',
    'pagination',

    # core Django applications
    # these should be last, so we can override their templates

    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admin',
    'django.contrib.admindocs',
    'django.contrib.humanize',
    'django.contrib.markup'
)

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}

THUMBNAIL_PROCESSORS = (
    'easy_thumbnails.processors.colorspace',
    'easy_thumbnails.processors.autocrop',
    'filer.thumbnail_processors.scale_and_crop_with_subject_location',
    'easy_thumbnails.processors.filters',
    )

# ------------------------ Django Celery
try:
    import djcelery
    djcelery.setup_loader()

    BROKER_HOST = "localhost"
    BROKER_PORT = 5672
    BROKER_USER = "guest"
    BROKER_PASSWORD = "guest"
    BROKER_VHOST = "/"
except ImportError:
    pass


# ------------------------ Django Filer

FILER_FILE_MODELS = (
        'video.models.Video',
        'filer.models.imagemodels.Image',
        'filer.models.filemodels.File',
    )

# ------------------------ Django CMS

gettext = lambda s: s

CMS_SOFTROOT = True
CMS_PERMISSION = True
CMS_SEO_FIELDS = True


# this is only here because I don't know how to make other apps find it otherwise, and they rely on it.
CMS_MEDIA_URL = STATIC_URL + 'cms/'

CMS_TEMPLATES = (
    ('institute.html', gettext('Institute of Mediaeval Medicine')),
)

CMS_PAGE_FLAGS = (
    ('no_local_menu', 'Hide local menu') ,
    ('no_horizontal_menu', 'No horizontal menu') ,
    ('no_page_title', "Don't display page title") ,
    )

CMS_PLACEHOLDER_CONF = {
    'body': {
        # "plugins": (
        #     'SemanticTextPlugin',
        #     'CMSVacanciesPlugin',
        #     'CMSNewsAndEventsPlugin',
        #     'SnippetPlugin',
        #     'LinksPlugin',
        #     'CMSPublicationsPlugin',
        #     'ImagePlugin',
        #     'ImageSetPublisher',
        #     'EntityAutoPageLinkPluginPublisher',
        #     'EntityMembersPluginPublisher',
        #     'FilerImagePlugin',
        #     'EntityDirectoryPluginPublisher',
        #     'CarouselPluginPublisher',
        #     'FocusOnPluginPublisher',
        #     'VideoPluginPublisher',
        #     ),
        "extra_context": {
            "width":"880",
            },
        "name": gettext("body"),
    },
}

LANGUAGES = (
('en', gettext('English')),
('de', gettext('German')),
('cy', gettext('Cymraeg')),
)

WYM_TOOLS = ",\n".join([
    "{'name': 'Italic', 'title': 'Emphasis', 'css': 'wym_tools_emphasis'}",
    "{'name': 'Bold', 'title': 'Strong', 'css': 'wym_tools_strong'}",
    "{'name': 'InsertOrderedList', 'title': 'Ordered_List', 'css': 'wym_tools_ordered_list'}",
    "{'name': 'InsertUnorderedList', 'title': 'Unordered_List', 'css': 'wym_tools_unordered_list'}",
    "{'name': 'Indent', 'title': 'Indent', 'css': 'wym_tools_indent'}",
    "{'name': 'Outdent', 'title': 'Outdent', 'css': 'wym_tools_outdent'}",
    "{'name': 'Undo', 'title': 'Undo', 'css': 'wym_tools_undo'}",
    "{'name': 'Redo', 'title': 'Redo', 'css': 'wym_tools_redo'}",
    "{'name': 'ToggleHtml', 'title': 'HTML', 'css': 'wym_tools_html'}",
])

WYM_CONTAINERS = ",\n".join([
    "{'name': 'P', 'title': 'Paragraph', 'css': 'wym_containers_p'}",
   # "{'name': 'H1', 'title': 'Heading_1', 'css': 'wym_containers_h1'}", # I assume you reserve <h1> for your page templates
    "{'name': 'H2', 'title': 'Heading_2', 'css': 'wym_containers_h2'}",
    "{'name': 'H3', 'title': 'Heading_3', 'css': 'wym_containers_h3'}",
    "{'name': 'H4', 'title': 'Heading_4', 'css': 'wym_containers_h4'}",
    "{'name': 'H5', 'title': 'Heading_5', 'css': 'wym_containers_h5'}",
    "{'name': 'H6', 'title': 'Heading_6', 'css': 'wym_containers_h6'}",
#    "{'name': 'PRE', 'title': 'Preformatted', 'css': 'wym_containers_pre'}",
   "{'name': 'BLOCKQUOTE', 'title': 'Blockquote', 'css': 'wym_containers_blockquote'}",
   # "{'name': 'TH', 'title': 'Table_Header', 'css': 'wym_containers_th'}", # not ready for this yet
])

ARKESTRA_BASE_ENTITY = 1

MULTIPLE_ENTITY_MODE = True

USE_CELERY_FOR_VIDEO_ENCODING = False

SEMANTICEDITOR_MEDIA_URL = os.path.join(STATIC_URL, "semanticeditor/")

PERMITTED_FILETYPES = {
    "pdf": "Portable Document Format",
    "txt": "Plain text",
    "doc": "MS Word (avoid using if possible)",
    "rtf": "Rich Text Format",
    "csv": "Comma-separated values",
    }

PAGE_TITLE_HEADING_LEVEL = 1

IN_BODY_HEADING_LEVEL = 2
PLUGIN_HEADING_LEVEL_DEFAULT = 2

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls import patterns, include, url
from django.conf.urls.static import static
from django.conf import settings

# Uncomment the next two lines to enable the admin:
from django.contrib import admin
admin.autodiscover()

urlpatterns = patterns('',
    url(r'^admin/doc/', include('django.contrib.admindocs.urls')),

    url(r'^admin/', include(admin.site.urls)),

    (r'^semantic/', include('semanticeditor.urls')),
    (r"", include("contacts_and_people.urls")),

    (r'^jsi18n/(?P<packages>\S+?)/$', 'django.views.i18n.javascript_catalog'),
)

if settings.DEBUG:
    urlpatterns+= static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
               
urlpatterns += patterns('',
    url('^autocomplete/$', 'widgetry.views.search', name='widgetry-search'),
    url(r'^', include('cms.urls')),
)


########NEW FILE########
__FILENAME__ = wsgi
"""
WSGI config for example project.

This module contains the WSGI application used by Django's development server
and any production WSGI deployments. It should expose a module-level variable
named ``application``. Django's ``runserver`` and ``runfcgi`` commands discover
this application via the ``WSGI_APPLICATION`` setting.

Usually you will have the standard Django WSGI application here, but it also
might make sense to replace the whole Django WSGI application with a custom one
that later delegates to the Django one. For example, you could introduce WSGI
middleware here, or combine a Django application with an application of another
framework.

"""
import os

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "example.settings")

# This application object is used by any WSGI server configured to use this
# file. This includes Django's development server, if the WSGI_APPLICATION
# setting points here.
from django.core.wsgi import get_wsgi_application
application = get_wsgi_application()

# Apply WSGI middleware here.
# from helloworld.wsgi import HelloWorldApplication
# application = HelloWorldApplication(application)

########NEW FILE########
__FILENAME__ = manage
#!/usr/bin/env python
import os
import sys

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "example.settings")

    from django.core.management import execute_from_command_line

    execute_from_command_line(sys.argv)

########NEW FILE########
__FILENAME__ = testrunner
import os
import sys
from django.core import management

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "example.test_settings")

    management.call_command(
        'test',
        'arkestra_utilities',
        'contacts_and_people',
        'news_and_events',
        'vacancies_and_studentships',
        'links',
        # verbosity=2,
        )
########NEW FILE########
__FILENAME__ = clean_plugins
"""
This module will remove junk from plugins
"""

from cms.models import Placeholder
from cms.models.pluginmodel import CMSPlugin
from cms.plugins.text.models import Text

from BeautifulSoup import BeautifulSoup
import re

import django.http as http
from django.db.models import get_model
import django.shortcuts as shortcuts
from django.template import RequestContext
from django.contrib.auth.decorators import login_required

@login_required
def clean(request, slug = "dryrun"):
    # this dictionary stores the information for the conversions
    if slug == "execute":
        execute = True
    else:
        execute = False
    trashed_styles=[]
    trashed_nbsps=[]
    trashed_paragraphs=[]
    trashed_style_attributes=[]
    double_spaces=[]
    click_heres=[]
    
    for plugin in Text.objects.all():
        modified = False
                
        if "&#160;" in plugin.body:
            plugin.body = plugin.body.replace("&#160;", " ")
            trashed_nbsps.append(plugin)
            print plugin, "    nbsp"
            modified = True
        
        if u"\xa0" in plugin.body:
            plugin.body = plugin.body.replace(u"\xa0", " ")
            trashed_nbsps.append(plugin)
            print plugin, "    encoded nbsp"
            modified = True
        
        if "  " in plugin.body:
            # plugin.body = plugin.body.replace("  ", " ")
            plugin.body = ' '.join(plugin.body.split())
            double_spaces.append(plugin)
            modified = True
            print plugin, "    doublespace"

        if "<p></p>" in plugin.body or "<p> </p>" in plugin.body:
            plugin.body = plugin.body.replace("<p></p>", "")
            plugin.body = plugin.body.replace("<p> </p>", "")
            trashed_paragraphs.append(plugin)
            modified = True
            print plugin, "    empty p"


        if "click here".lower() in plugin.body.lower():
            click_heres.append(plugin)
            print plugin, "    click here"

        # soup = plugin.body
        soup = BeautifulSoup(''.join(plugin.body)) # soup it up
        style_elements = soup.findAll("style")  # find the element with that id in the HTML
        modified_soup = False
    
        if style_elements:
            [style_element.extract() for style_element in style_elements]
            print plugin, "    style element"
            trashed_styles.append(plugin)
            modified_soup = True

        for attribute in ["style", "width", "height", "align"]:
            
            illegal_attributes = soup.findAll(attrs={attribute: True})
            if illegal_attributes:
                for illegal_attribute in illegal_attributes:
                    print "-------------- illegal attribute --------------"
                    print plugin
                    print "was:", illegal_attribute
                    print "will delete attribute:", attribute, " which is:", illegal_attribute[attribute]
                    del illegal_attribute[attribute]
                    print "now:", illegal_attribute
                modified_soup = True
        if modified_soup:
            modified= True
            plugin.body = unicode(soup)                    

        
        if execute and modified:
            # print "Saving", plugin.cmsplugin_ptr_id, plugin
            plugin.save()
            
    return shortcuts.render_to_response(
        "housekeeping/statistics.html", {
            "execute": execute,
            "trashed_styles": trashed_styles,
            "trashed_nbsps": trashed_nbsps,
            "trashed_paragraphs": trashed_paragraphs,
            "double_spaces": double_spaces,
            "click_heres": click_heres,
            },
        RequestContext(request),
        )

########NEW FILE########
__FILENAME__ = convert_to_placeholders
from django.db.models import get_model

from django.conf import settings

from cms.models import Placeholder
from cms.models.pluginmodel import CMSPlugin
from cms.plugins.text.models import Text
from cms.api import add_plugin      


def convert(action = "dryrun"):
    # this dictionary store the information for the conversions
    execute=action
    models_dictionary = {
        "messages": {},                             # a general set of messages for the user
        "modules":  {
            "news_and_events.models": {             # each module containing the models must be represented, like this
                "application": "News & Events",     # this is the human-friendly name of the module
                "models": {                         # a dictionary with each model in that module
                    "NewsArticle": {                # the actual name of the class
                        "fields": [                 # a list of the fields we're working on
                            {                       # a dictionary for each field
                                "old_field": "content",
                                "new_field": "body",                
                                "slot": "body",
                                },
                            ],
                        "model": "News articles",   # the human-friendly name of the model
                        "actions": {},              # an empty dictionary where we we store the results
                        },
                    "Event": {                      # a second model in that module
                        "fields": [                 
                            {                       
                                "old_field": "content",
                                "new_field": "body",                
                                "slot": "body",
                                },
                            ],
                        "model": "Events",
                        "actions": {},
                        },
                    },
                },
            "vacancies_and_studentships.models": {  # and a second module
                "application": "Vacancies & Studentships",
                "models": {
                    "Vacancy": {
                        "fields": [                 
                            {                       
                                "old_field": "description",
                                "new_field": "body",                
                                "slot": "body",
                                },
                            ],
                        "model": "Vacancies",
                        "actions": {},
                        },
                    "Studentship": {
                        "fields": [                 
                            {                       
                                "old_field": "description",
                                "new_field": "body",                
                                "slot": "body",
                                },
                                ],
                        "model": "Studentships",
                        "actions": {},
                        },
                    },
                },
            "publications.models": {                
                "application": "Publications",
                "models": {
                    "Researcher": {
                        "fields": [                 
                            {                       
                                "old_field": "research_synopsis",
                                "new_field": "synopsis",                
                                "slot": "body",
                                },
                            {                       
                                "old_field": "research_description",
                                "new_field": "description",                
                                "slot": "body",
                                },
                            ],
                        "model": "Researcher",
                        "actions": {},
                        },
                    },
                },
            },
        }

    print "------executing --------"
    # loop over the modules
    for module, module_values in models_dictionary["modules"].items():
        
        # loop over the models in the module
        for model, model_values in module_values["models"].items():
            
            # mmodel is the human-readable name of the model, used for the report summary
            mmodel = models_dictionary["modules"][module]["models"][model]["model"]
            models_dictionary["messages"][mmodel]={}

            # import the model
            actual_model = getattr(__import__(module, globals(), locals(), module_values["models"], -1), model)
                                            
            # loop over the fields that need converting
            for field in model_values["fields"]:

                old_field = field["old_field"]
                new_field = field["new_field"]
                slot = field["slot"]

                # create a summary report for this field
                models_dictionary["messages"][mmodel][old_field]={}

                try:
                    getattr(actual_model, new_field)
                except AttributeError:
                    message = "field " + new_field + " is missing - check the model and try agin"
                    models_dictionary["messages"][mmodel][old_field]["Error"]=message
                    continue
                    
                junk_content = []   # a record of those items with nothing but <br /> in them
                moved_items =[]     # a record of the items we migrated to placeholders

                # loop over each item in the class
                for item in actual_model.objects.all():
                    
                    old_field_content = getattr(item, old_field)  # the old field we want to convert
                    
                    # now the serious business of converting the fields
            
                    # if the item lacks a placeholder, create the placeholder and the reference to it
                    if old_field_content and not getattr(item, new_field, None):

                        # check to see if it's worth converting
                        if len(old_field_content) > 10:

                            # create the placeholder
                            placeholder=Placeholder(slot=slot)
                            if execute == "execute":
                                placeholder.save()
        
                            # refer to the placeholder from the item
                            setattr(item, new_field, placeholder)
        
                            if execute == "execute":
                                add_plugin(placeholder, "SemanticTextPlugin", settings.CMS_LANGUAGES[0][0], body = old_field_content)
                                                                                                                            
                            # setattr(item, old_field, "")
                            if execute == "execute":
                                item.status = "Converted to placeholder"
                            else:
                                item.status = "Unconverted"
                                        
                        else:
                            # this item is so short it must be junk
                            if execute == "execute":
                                setattr(item, old_field, "")
                            
                                item.status = "Junk field - too short; was deleted instead of converted:" + old_field_content
                            else:    
                                item.status = "Junk field - too short; will be deleted instead of converted:" + old_field_content
                            # make a note that this was a junk item
                            junk_content.append(item)
                                # make a note that we moved this item

                        moved_items.append(item)

                    if execute == "execute":
                        item.save()
                        
 
                # information about junk content items
                if execute == "execute":
                    message = " ".join((str(len(junk_content)), "junk items not converted items"))
                else:
                    message = " ".join((str(len(junk_content)), "junk items found"))                    

                models_dictionary["messages"][mmodel][old_field]["Junk fields"]=message

                # information about items that have been/need to be converted
                if execute == "execute":
                    message = str(len(moved_items)) + " items were converted to placeholder " + new_field
                else:
                    message = str(len(moved_items)) + " items need to be converted to placeholder " + new_field
            
                models_dictionary["messages"][mmodel][old_field]["Conversions"]=message
            
                # list every item that was copied for the full report
                if execute == "execute":
                    action = "Fields that were copied"
                else:
                    action = "Fields to be copied"
                    
                models_dictionary["modules"][module]["models"][model]["actions"][action]=moved_items
                
    report = {
        "action": execute,
        "task": "convert-placeholders",
        "converted": models_dictionary,
        "template": "housekeeping/convert_to_placeholders.html"
        }        

    return report
########NEW FILE########
__FILENAME__ = repair_mptt
'''
Created on Sep 10, 2009

@author: stefanfoulis

/repair_mptt/cms.page/

'''
from cms.models import Page
import django.http as http
from django.db.models import get_model
import django.shortcuts as shortcuts
from django.template import RequestContext
from django.contrib.auth.decorators import login_required


def setup():
    from django.contrib.auth.models import User
    from cms.utils.permissions import set_current_user
    set_current_user(User.objects.get(id=1))
def check_no_moderator():
    print "  checking that CMS_MODERATOR is set to False"
    from django.conf import settings
    if settings.CMS_MODERATOR:
        print "!! Please set CMS_MODERATOR=False in settings before using this script !!"
        print 'aborted'
        raise Exception("!! Please set CMS_MODERATOR=False in settings before using this script !!")



def fix_tree_id(model):
    print "  rewriting tree_id..."
    #from django.db.models import Avg, Max, Min, Count
    #base_tree_id = Page.objects.filter(parent=None).aggregate(tree_id=Max('tree_id'))['tree_id'] + 1
    base_tree_id = 1    
    for node in model.objects.filter(parent=None).order_by('tree_id'):
        node.tree_id = base_tree_id
        node.save()
        r_fix_tree_id(node.children.all(), base_tree_id)
        base_tree_id += 1
    return "I fixed some trees"
    
def r_fix_tree_id(nodes, tree_id):
    for node in nodes:
        node.tree_id = tree_id
        if node.__class__ == Page:
            node.save(no_signals=True)
        else:
            node.save()
        r_fix_tree_id(node.children.all(), tree_id)      

def fix_leftright(model,do_alteration=True):
    setup()
    check_no_moderator()
    print "  fixing left and right..."
    def recur(node, counter):
        node.lft = counter
        counter += 1
        for child in node.children.all().order_by('tree_id', 'parent', 'lft'):
            counter = recur(child, counter)
        node.rght = counter
        counter += 1
        if node.__class__ == Page:
            node.save(no_signals=True)
        else:
            node.save()
        return counter
    for root_node in model.objects.filter(parent=None).order_by('tree_id', 'parent', 'lft'):
        counter = recur(root_node, 1)
        # sanity check
        total_nodes = model.objects.filter(tree_id=root_node.tree_id).count()
        if not total_nodes * 2 == counter-1:
            print "            something is wrong! %s != %s" % (total_nodes * 2, counter-1)
    return "did some leftright checking"
    
def fix_level(model):
    setup()
    print "  fixing level..."
    bad_level_count = 0
    level = 0
    all_nodes = model.objects.order_by('tree_id', 'parent', 'lft')
    for root_node in all_nodes.filter(parent=None):
        bad_level_count += r_fix_level(root_node, level=level)
    print "        fixed level of %s nodes" % bad_level_count
    return "I fixed level of %s nodes" % bad_level_count

def r_fix_level(node, level):
    bad_level_count = 0
    if not node.level == level:
        node.level = level
        if node.__class__ == Page:
            node.save(no_signals=True)
        else:
            node.save()
        bad_level_count += 1
    else:
        pass#print "    comparing level of page id:%s level:%s to level:%s: ok" % (page, page.level, level)
    for subnode in node.children.all():
        bad_level_count += r_fix_level(subnode, level+1)
    return bad_level_count


@login_required
def fix(request,slug):
    print "fixing mptt tree"
    model = get_model(*slug.split('.'))
    #print type(model)
    if model == Page:
        print "it's a page"
    #print model.objects.all()
        setup()
        check_no_moderator()
    tree_report = fix_tree_id(model)
    level_report = fix_level(model)
    leftright_report = fix_leftright(model)
    print "all done"
    #return http.HttpResponse("fixed")
    return shortcuts.render_to_response(
        "housekeeping/test.html",
        {"tree_report":tree_report,
        "level_report":level_report,
        "leftright_report":leftright_report,},
        RequestContext(request),
        )
    
    
    
def check_leftright():
    report = []
    report.append("Checking left/right")
    print "  checking left and right..."
    errors = {}
    def add_error(node, msg):
        if not node.id in errors.keys():
            errors[node.id] = [u"node: %s" % node]
        errors[node.id].append(msg)
    def recur(node, counter):
        if not node.lft == counter: add_error(node, u"lft is %s, should be %s." % (node.lft, counter))
        counter += 1
        for child in node.children.all().order_by('tree_id', 'parent', 'lft'):
            counter = recur(child, counter)
        if not node.rght == counter: add_error(node, u"rght is %s, should be %s." % (node.rght, counter))
        counter += 1
        return counter
    for root_page in Page.objects.filter(parent=None).order_by('tree_id', 'parent', 'lft'):
        counter = recur(root_page, 1)
        # sanity check
        total_pages = Page.objects.filter(tree_id=root_page.tree_id).count()
        if not total_pages * 2 == counter-1:
            print "            something is wrong! %s != %s" % (total_pages * 2, counter-1)
            report.append("something is wrong! %s != %s" % (total_pages * 2, counter-1))
    from pprint import pprint
    pprint(errors)
    return errors
########NEW FILE########
__FILENAME__ = statistics
from cms.models import Page, CMSPlugin
from contacts_and_people.models import Person, Entity, Membership, Building
from news_and_events.models import NewsArticle, Event
from django.contrib.auth.models import User, Group
import django.http as http
from django.db.models import get_model
import django.shortcuts as shortcuts
from django.template import RequestContext
from django.contrib.auth.decorators import login_required
from django.conf import settings
from arkestra_utilities.models import ArkestraUser

@login_required
def stats(request):
    pages = Page.objects.count()
    people = Person.objects.count()
    entities = Entity.objects.count()
    roles = Membership.objects.count() 
    newsarticles = NewsArticle.objects.count() 
    events = Event.objects.count() 
    users = ArkestraUser.objects.filter(is_active = True, is_staff = True) 
    groups = Group.objects.all().order_by("name")
    plugins = CMSPlugin.objects.count() 
    return shortcuts.render_to_response(
        "housekeeping/statistics.html", {
            "pages": pages,
            "people": people,
            "roles": roles,
            "entities": entities,
            "newsarticles": newsarticles,
            "events": events,
            "users": users,
            "plugins": plugins,
            "groups": groups,
            "base_template": settings.CMS_TEMPLATES[0][0],
            },
        RequestContext(request),
        )
        
@login_required
def userstats(request,slug):
    print "userstats", slug
    user = User.objects.get(username=slug)
    #print user
    return shortcuts.render_to_response(
        "housekeeping/user_statistics.html", {
            "user": user,
            }
        )        
########NEW FILE########
__FILENAME__ = tasks
import django.http as http
from django.db.models import get_model
import django.shortcuts as shortcuts
from django.template import RequestContext
from django.contrib.auth.decorators import login_required
from django.conf import settings

from convert_to_placeholders import convert 
from tidy_links import tidy_links 

@login_required
def tasks(request, task = None, action = "dryrun"):
    report = {}

    if task == "convert-placeholders":
        report = convert(action)
    elif task == "tidy-links":
        report = tidy_links(action)
    else:
        # nothing matched, so just do the menu
        return shortcuts.render_to_response(
        "housekeeping/housekeeping.html", {
                "base_template": settings.CMS_TEMPLATES[0][0],
                },
            RequestContext(request),
            )
        
    return shortcuts.render_to_response(
        report["template"], {
            "task": task,
            "action": action,
            "report": report,
            "base_template": settings.CMS_TEMPLATES[0][0],
            },
        RequestContext(request),
        )
                                           
########NEW FILE########
__FILENAME__ = statistics_tags
from django import template
register = template.Library()

from cms.models import Page, CMSPlugin
from contacts_and_people.models import Person, Entity, Membership, Building
from news_and_events.models import NewsArticle, Event
from django.contrib.auth.models import User
from django.contrib.admin.models import LogEntry


def statistics(parser, token):
    print "in statistics template tag"
    return CurrentStats()
  
class CurrentStats(template.Node):
    def render(self, context):
        print "in render"
        stats={}
        stats["pages"] = Page.objects.count()
        stats["people"] = Person.objects.count()
        stats["entities"] = Entity.objects.count()
        stats["roles"] = Membership.objects.count() 
        stats["newsarticles"] = NewsArticle.objects.count() 
        stats["events"] = Event.objects.count() 
        stats["webeditors"] = User.objects.filter(is_active = True, is_staff = True).count() 
        stats["plugins"]  = CMSPlugin.objects.count()
        context["statistics"] = stats
        return ""
        
register.tag(statistics)

@register.inclusion_tag('last_edit.html',takes_context = True)
def last_edit(context):
    """
    Returns the date of the user's most recent admin action.
    """
    user = context["user"]
    try:
        last_edit = LogEntry.objects.filter(user = user).order_by('-id')[0].action_time
        print last_edit
    except IndexError:
        last_edit = "Never"
    print " -------- statistics.last_edit --------"
    return {'last_edit': last_edit}

########NEW FILE########
__FILENAME__ = tidy_links
"""
This module will try to clean up the external links database
"""

from links.models import ExternalLink, ObjectLink, GenericLinkListPluginItem, LinkType, ExternalSite

# from cms.models import Placeholder
# from cms.models.pluginmodel import CMSPlugin
# from cms.plugins.text.models import Text
# 
# from BeautifulSoup import BeautifulSoup
# import re
# 
# import django.http as http
# from django.db.models import get_model
import django.shortcuts as shortcuts
from django.template import RequestContext
from django.contrib.auth.decorators import login_required
from django.contrib.contenttypes.models import ContentType

from django.core.exceptions import ObjectDoesNotExist



def tidy_links(action = "dryrun"):
    if action == "execute":
        execute = True
    else:
        execute = False

    messages = {}
    links, de_duplicated_links = de_duplicate_links(execute) # , messages["Duplicate links"]
    sites_to_delete, unused_sites  = check_sites(execute) #, messages["External sites"] 
    models_dictionary = convert_url_fields(execute) # summary["Fields requiring conversion"] = 
        
    report = {
        "action": execute,
        "links": links,
        "de_duplicated_links": de_duplicated_links,
        "unused_sites": unused_sites,
        "sites_to_delete": sites_to_delete,
        "models_dictionary": models_dictionary,
        "template": "housekeeping/tidy_links.html"
        }        

    return report
    

def de_duplicate_links(execute):
    # a message to summarise state
    summary = "Everything seems in order, no action required"
        
    # find out what link.kinds are permissible
    permissible_kinds = LinkType.objects.all()
    
    # get the content_type of ExternalLinks
    content_type = ContentType.objects.get_for_model(ExternalLink)
    
    # get a set of ObjectLinks and GenericLinkListPluginItems that are ExternalLinks
    object_links = ObjectLink.objects.filter(destination_content_type = content_type)
    plugin_links = GenericLinkListPluginItem.objects.filter(destination_content_type = content_type)
    
    # create a set of ExternalLinks
    links = ExternalLink.objects.all().order_by('url')
    
    # we need this the first time around the loop - next time, good-link will be a real one
    
    de_duplicated_links = []
    good_link = None
    
    # loop over our set of links
    for link in links:
        
        # to help find duplicates, remove the trailing slash if there is one
        if link.url:
            # we don't actually want to touch link.url, so we create a temporary variable
            url = link.url
            if url[-1] == "/":
                url = url[0:-1]
                
            # keep some infomrmation about where the duplicates were used
            link.objects = []
            link.plugins = []

            # do we already have a good_link to compare with?
            if good_link:
                # is it a duplicate
                print good_link.url.lower(), url.lower()
                if (good_link.url.lower() == url.lower()) or  (good_link.url.lower()[0:-1] == url.lower()):
                    print "duplicate", url
                    # add this to the list of duplicates for the good_link
                    good_link.duplicates.append(link)
                                                
                    # for each one, change it so it uses the good_link instead
                    for object_link in object_links.filter(destination_object_id = link.id):
                        object_link.destination_object_id = good_link.id
                    
                        if execute:
                            object_link.save()
                        link.objects.append(object_link)
                
                    # for each one, change it so it uses the good_link instead
                    for plugin_link in plugin_links.filter(destination_object_id = link.id):
                        plugin_link.destination_object_id = good_link.id

                        if execute:
                            plugin_link.save()
                        link.plugins.append(plugin_link)

                    # delete the duplicate
                    if execute:
                        print "    deleting", link
                        link.delete()

                    de_duplicated_links.append(good_link)
                # this link wasn't a duplicate
                else:
                    if execute:
                        # force a save, to trigger the code in save()
                        link.save()
                    good_link = link
                    # each good link starts off with no duplicates
                    good_link.duplicates = []
            else:
                # the first time we find a good link, assign it
                print "assigning link"
                good_link = link

        else:
            # delete this link because it's blank
            link.blank = True
            if execute:
                link.delete()
        
        # check that every link is of a permissible type
        if not link.kind in permissible_kinds:
            link.kind_warning = True

    de_duplicated_links = set(de_duplicated_links)
    
    duplicates = len(de_duplicated_links)

    return links, de_duplicated_links
            
def check_sites(execute):
    # deletes sites without children or links
    sites_to_delete = ExternalSite.objects.filter(children=None, links=None)
    for site in sites_to_delete:
        if execute:
            site.delete()      
    unused_sites = ExternalSite.objects.filter(children=None, links=None)
    return sites_to_delete, unused_sites
 
def convert_url_fields(execute):
    # gets hold of URL fields and turns them into FK fields to links in the database
    models_dictionary = {
        "messages": {},                             # a general set of messages for the user
        "modules":  {
            "news_and_events.models": {             # each module containing the models must be represented, like this
                "application": "News & Events",     # this is the human-friendly name of the module
                "models": {                         # a dictionary with each model in that module
                    "NewsArticle": {                # the actual name of the class
                        "fields": [                 # a list of the fields we're working on
                            {                       # a dictionary for each field
                                "url_field": "url",
                                "title_field": "title",
                                "description_field": "summary", # unlike the others this is optional
                                "new_field": "external_url",                
                                },
                            ],
                        "model": "News articles",   # the human-friendly name of the model
                        "actions": {},              # an empty dictionary where we we store the results
                        },
                    "Event": {                      # a second model in that module
                        "fields": [                 
                            {                       
                                "url_field": "url",
                                "title_field": "title",
                                "description_field": "summary",
                                "new_field": "external_url",                
                                },
                            ],
                        "model": "Events",
                        "actions": {},
                        },
                    },
                },
            "contacts_and_people.models": {             # each module containing the models must be represented, like this
                "application": "Contacts & People",     # this is the human-friendly name of the module
                "models": {                         # a dictionary with each model in that module
                    "Entity": {                # the actual name of the class
                        "fields": [                 # a list of the fields we're working on
                            {                       # a dictionary for each field
                                "url_field": "url",
                                "title_field": "name",
                                "new_field": "external_url",                
                                },
                            ],
                        "model": "Entity",   # the human-friendly name of the model
                        "actions": {},              # an empty dictionary where we we store the results
                        },
                    "Person": {                      # a second model in that module
                        "fields": [                 
                            {                       
                                "url_field": "url",
                                "title_field": "__unicode__",
                                "new_field": "external_url",                
                                },
                            ],
                        "model": "Person",
                        "actions": {},
                        },
                    },
                },
            "vacancies_and_studentships.models": {             # each module containing the models must be represented, like this
                "application": "Vacancies and Studentships",     # this is the human-friendly name of the module
                "models": {                         # a dictionary with each model in that module
                    "Vacancy": {                # the actual name of the class
                        "fields": [                 # a list of the fields we're working on
                            {                       # a dictionary for each field
                                "url_field": "url",
                                "title_field": "title",
                                "description_field": "summary",
                                "new_field": "external_url",                
                                },
                            ],
                        "model": "Vacancy",   # the human-friendly name of the model
                        "actions": {},              # an empty dictionary where we we store the results
                        },
                    "Studentship": {                      # a second model in that module
                        "fields": [                 
                            {                       
                                "url_field": "url",
                                "title_field": "title",
                                "description_field": "summary",
                                "new_field": "external_url",                
                                },
                            ],
                        "model": "Studentship",
                        "actions": {},
                        },
                    },
                },
            },
        }
       
    # loop over the modules
    for module, module_values in models_dictionary["modules"].items():
        # models_dictionary["modules"][module]={}
        
        # loop over the models in the module
        for model, model_values in module_values["models"].items():
            
            # mmodel is the human-readable name of the model, used for the report summary
            mmodel = models_dictionary["modules"][module]["models"][model]["model"]
            # create a messages list for this model
            messages = []

            # import the model
            actual_model = getattr(__import__(module, globals(), locals(), module_values["models"], -1), model)
                                            
            # loop over the fields that need converting
            for field in model_values["fields"]:
                print field
                
                url_field = field["url_field"]
                title_field = field["title_field"]
                description_field = field.get("description_field", None)
                new_field = field["new_field"]

                # create a summary report for this field
                # models_dictionary["messages"][mmodel][url_field]={}

                try:
                    getattr(actual_model, new_field)
                except AttributeError:
                    message = "field " + new_field + " is missing - check the model and try agin"
                    messages.append(message)


            if not messages:
                message = "Checked " + str(actual_model.objects.count()) + " items"
                items_to_convert =[]
                messages.append(message)
                
                
                # loop over each item in the class
                for item in actual_model.objects.all():

                    url_field_content = getattr(item, url_field)  # the old fields we want to save
                    title_field_content = getattr(item, title_field)  # the old fields we want to save
                    if description_field: # remember this one is optional
                        description_field_content = getattr(item, description_field)  # the old fields we want to save
                    else:
                        description_field_content = ""
                    new_field_content = getattr(item, new_field)  # the old fields we want to save
                    if url_field_content:
                        items_to_convert.append(item)
                        # if the link exists, assign a FK to it, otherwise create it then assign
                        if execute:
                            link, created = ExternalLink.objects.get_or_create(url=url_field_content, defaults={'title': title_field_content, 'description': description_field_content})
                            setattr(item, new_field, link)
                            setattr(item, url_field, "")
                            item.save()
                            if created:
                                message = "Created new link: " + url_field_content
                                messages.append(message)
                        else:
                            matches = ExternalLink.objects.filter(url=url_field_content).count()
                            message = "Need to create new link: " + url_field_content, matches
                            messages.append(message)
                message = "Items requiring conversion: " + str(len(items_to_convert))
                messages.insert(1, message)                    
            models_dictionary["modules"][module]["models"][model]["messages"]=messages
                
                            
    return models_dictionary
########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import *
from django.contrib import admin

urlpatterns = patterns('',
    (r"^housekeeping/statistics/", "housekeeping.statistics.stats"),

    # /housekeeping/repair_mptt/contacts_and_people.Entity/
    (r"^housekeeping/repair_mptt/(?P<slug>[-\w\\.]+)/$", "housekeeping.repair_mptt.fix"),

    # then, try to match /housekeeping/<task>/<execute>
    (r"^housekeeping/(?P<task>[^/]+)/(?P<action>[^/]+)/$", "housekeeping.tasks.tasks"),


    # # no match? 
    (r"^housekeeping/", "housekeeping.tasks.tasks"),


    # (r"^housekeeping/clean_plugins/", "housekeeping.clean_plugins.clean"),
    # 
    # 
    
    # (r"^statistics/user/(?P<slug>[-\w]+)$", "housekeeping.statistics.userstats"),
    )    
########NEW FILE########
__FILENAME__ = admin
from django import forms
from django.contrib import admin, messages
from django.contrib.contenttypes import generic

from widgetry import fk_lookup

from treeadmin.admin import TreeAdmin

from arkestra_utilities.admin_mixins import (
    AutocompleteMixin, SupplyRequestMixin, InputURLMixin
    )

from links import schema
from links.models import (
    ObjectLink, ExternalLink, ExternalSite, LinkType
    )
from links.utils import check_urls


class LinkAdmin(admin.ModelAdmin, AutocompleteMixin):
    related_search_fields = ['destination_content_type']

from chained_selectbox.forms import FKChainedChoicesForm
from chained_selectbox.form_fields import ChainedChoiceField


class LinkItemForm(InputURLMixin, FKChainedChoicesForm):

    def __init__(self, *args, **kwargs):
        super(LinkItemForm, self).__init__(*args, **kwargs)
        if self.instance.pk is not None: #  has already been saved()?
            if self.instance.destination_content_type:
                destination_content_type = self.instance.destination_content_type.model_class()
        else:
            destination_content_type = None
        # look up the correct widget from the content type
        widget = fk_lookup.GenericFkLookup(
            'id_%s-destination_content_type' % self.prefix,
            destination_content_type,
            )
        self.fields['destination_object_id'].widget = widget
        self.fields['destination_content_type'].widget.choices = schema.content_type_choices()

    # different destination_content_types need different link formatting options
    format = ChainedChoiceField(
        parent_field='destination_content_type',
        ajax_url='/chainedselectchoices'
        )


class ObjectLinkInline(generic.GenericStackedInline):
    model = ObjectLink
    form = LinkItemForm
    extra = 3
    fieldsets = (
        (None, {
            'fields': (
                'destination_content_type', 'destination_object_id',
                # 'external_link_input_url',
                'text_override',
                ('format', 'key_link',),
            ),
        }),
        ('Overrides', {
            'fields': (
                'metadata_override',
                'heading_override',
                'summary_override',
                'html_title_attribute',
            ),
            'classes': ('collapse',),
        })
    )


class ExternalLinkForm(forms.ModelForm):
    class Meta:
        model = ExternalLink

    def clean(self):
        #  now that this is here, do we need all the checks Arkestra does?
        super(ExternalLinkForm, self).clean()
        url = self.cleaned_data.get('url', "")
        title = self.cleaned_data.get('title', "")

        check_urls(url)

        # check if the url is a duplicate
        # if the url exists, and this would be a new instance in the database,
        # it's a duplicate
        if self.Meta.model.objects.filter(url=url) and not self.instance.pk:
            message = "Sorry, this link appears to exist already"
            raise forms.ValidationError(message)

        # warn if the title is a duplicate
        # if the title exists, and this would be a new instance in the
        # database, it's a duplicate
        if self.Meta.model.objects.filter(title=title) and not self.instance.pk:
            message = """
                Warning: the link title %s already exists in the database -
                consider changing it.
                """ % title
            messages.add_message(self.request, messages.WARNING, message)

        return self.cleaned_data


class ExternalLinkAdmin(SupplyRequestMixin, admin.ModelAdmin):
    readonly_fields = ('external_site', 'kind',)
    search_fields = ('title', 'external_site__site', 'description', 'url')
    list_display = ('title', 'url', )
    form = ExternalLinkForm

    def save_model(self, request, obj, form, change):
        return super(ExternalLinkAdmin, self).save_model(
            request,
            obj,
            form,
            change
            )


class LinkTypeAdmin(admin.ModelAdmin):
    pass


class ExternalSiteForm(forms.ModelForm):
    class Meta:
        model = ExternalSite

    def clean(self):
        #  if the site isn't named, use the domain name
        super(ExternalSiteForm, self).clean()
        site = self.cleaned_data.get("site", None)
        domain = self.cleaned_data.get("domain", None)
        if not site:
            self.cleaned_data["site"] = domain
        return self.cleaned_data


class ExternalSiteAdmin(TreeAdmin):
    readonly_fields = ('parent',)
    form = ExternalSiteForm
    list_display = ('domain', 'site',)
    filter_include_ancestors = True


admin.site.register(ExternalLink, ExternalLinkAdmin)
admin.site.register(ExternalSite, ExternalSiteAdmin)
admin.site.register(LinkType, LinkTypeAdmin)


"""
# patch the cms page admin to show generic links
if getattr(settings,'SHOW_GENERIC_LINKS_INLINE_FOR_CMS_PAGE_ADMIN', False):
    from cms.admin.pageadmin import PageAdmin
    from cms.models import Page
    admin.site.unregister(Page)
    print dir(admin.site)
    if not hasattr(PageAdmin,'inlines'):
        PageAdmin.inlines = []
    else:
        PageAdmin.inlines = list(PageAdmin.inlines)
    PageAdmin.inlines = PageAdmin.inlines + [ObjectLinkInline]
    admin.site.register(Page, PageAdmin)
"""

########NEW FILE########
__FILENAME__ = cms_plugins
from django.contrib import admin

from cms.plugin_base import CMSPluginBase
from cms.plugin_pool import plugin_pool

from arkestra_utilities.output_libraries.plugin_widths import (
    get_placeholder_width, calculate_container_width
    )
from arkestra_utilities.admin_mixins import SupplyRequestMixin

from links.admin import LinkItemForm
from links.models import (
    GenericLinkListPlugin, GenericLinkListPluginItem,
    CarouselPlugin, CarouselPluginItem, FocusOnPluginEditor,
    FocusOnPluginItemEditor
    )


class PluginInlineLink(SupplyRequestMixin, admin.StackedInline):
    model = GenericLinkListPluginItem
    form = LinkItemForm
    extra = 3
    fieldsets = (
        (None, {
            'fields': (
                'destination_content_type', 'destination_object_id',
                'text_override',
                ('format', 'key_link',),
                ('inline_item_ordering', 'active', ),
            ),
        }),
        ('Overrides', {
            'fields': (
                'metadata_override',
                'heading_override',
                'summary_override',
                'html_title_attribute',
            ),
            'classes': ('collapse',),
        })
    )


class LinksPlugin(CMSPluginBase):
    model = GenericLinkListPlugin
    name = "Link(s)"
    render_template = "links/cms_plugins/links.html"
    text_enabled = True

    raw_id_fields = ('image',)
    fieldsets = (
        (None, {
            'fields': (
                ('insert_as', 'use_link_icons',),
                ('separator', 'final_separator',)
            ),
        }),
    )
    inlines = (PluginInlineLink,)

    def icon_src(self, instance):
        return "/static/plugin_icons/links.png"

    def render(self, context, instance, placeholder):
        links = [
            link for link in instance.links_item.active_items().exclude(
                destination_object_id=None) if link.destination_content_object
            ]
        if links:
            # are there at least two items? if so, the second-last has a
            # final_separator
            if len(links) > 1:
                links[-2].separator = instance.final_separator
            # are there at least three items? if so, all up to third-last have
            # a separator
            if len(links) > 2:
                for link in links[0:-2]:
                    link.separator = instance.separator
            context.update({
                'object': instance,
                'use_link_icons': instance.use_link_icons,
                'links': links,
                'placeholder': placeholder,
                'separator': instance.separator
            })
        else:
            self.render_template = "null.html"
        return context


plugin_pool.register_plugin(LinksPlugin)


class FocusOnInlineItemAdmin(admin.StackedInline):
    model = FocusOnPluginItemEditor
    form = LinkItemForm
    fieldsets = (
        (None, {
            'fields': (
                'destination_content_type', 'destination_object_id',
            ),
        }),
        ('Overrides', {
            'fields': (
                'short_text_override', 'text_override', 'description_override',
                'image_override',
            ),
            'classes': ('collapse',),
        })
    )


class FocusOnPluginPublisher(CMSPluginBase):
    model = FocusOnPluginEditor
    name = "FocusOn"
    render_template = "links/cms_plugins/focuson.html"
    text_enabled = True
    inlines = [FocusOnInlineItemAdmin]

    def icon_src(self, instance):
        return "/static/plugin_icons/focus_on.png"

    def render(self, context, instance, placeholder):
        focuson = instance.focuson_item.order_by('?')[0]
        focuson.heading_level = instance.heading_level
        context.update({
            'focuson': focuson,
            'placeholder': placeholder,
            })
        return context

plugin_pool.register_plugin(FocusOnPluginPublisher)


class PluginInlineCarousel(admin.StackedInline):
    model = CarouselPluginItem
    form = LinkItemForm
    extra = 3
    max_num = 5
    fieldsets = (
        (None, {
            'fields': (
                ('destination_content_type', 'destination_object_id'),
                ('link_title', 'image'),
                ('inline_item_ordering', 'active'),
            ),
        }),
    )


class CarouselPluginPublisher(CMSPluginBase):
    model = CarouselPlugin
    name = "Carousel"
    render_template = "links/cms_plugins/carousel.html"
    text_enabled = True
    raw_id_fields = ('image',)
    inlines = (PluginInlineCarousel,)
    admin_preview = False

    def icon_src(self, instance):
        return "/static/plugin_icons/carousel.png"

    def render(self, context, instance, placeholder):
        segments = list(instance.carousel_item.active_items().exclude(
            destination_object_id=None
            ))
        if len(segments) > 1:

            # widths a fraction of nominal container width (deprecated)
            placeholder_width = get_placeholder_width(context, instance)
            if instance.width <= 10:
                width = placeholder_width/instance.width

            # widths relative to placeholder width
            else:
                # widths a percentage of placeholder width
                if instance.width <= 100:
                    width = placeholder_width/100.0 * instance.width
                    auto = False

                # automatic width
                elif instance.width == 1000:
                    width = placeholder_width
                    auto = True

                # calculate the width of the block the image will be in
                width = calculate_container_width(
                    context,
                    instance,
                    width,
                    auto
                    )
            width = int(width) - 2  # make room for left/right borders
            label_width = width/len(segments)

            heights = []
            for segment in segments:
                divider = 1.0/float(segment.image.width)
                height_multiplier = float(segment.image.height)*divider
                heights.append(height_multiplier)
                if ((width * label_width)/100.0) / float(len(segment.link_title)) > 6.0:
                    # if the label width divided by no. of characters in
                    # label is > 10 (i.e. we allow about 10px width per
                    # character, then we'll assume the label can fit on a
                    # single line)
                    segment.line_class = "single-line"
                else:
                    segment.line_class = "double-line"
                segment.label_width = int(label_width - 1)
            heights.sort()
            height_multiplier = heights[0]
            segments[-1].label_class = "right"
            segments[-1].label_width = int(label_width + width % len(segments))

            if instance.aspect_ratio:
                height = width / instance.aspect_ratio
            else:
                height = width * height_multiplier
            size = (int(width), int(height))
            context.update({
                'carousel': instance,
                'segments': segments,
                'size': size,

            })

        else:
            self.render_template = "null.html"
        return context

plugin_pool.register_plugin(CarouselPluginPublisher)

########NEW FILE########
__FILENAME__ = fields

########NEW FILE########
__FILENAME__ = link_functions
from django.contrib.contenttypes.models import ContentType
from links.models import ObjectLink

def object_links(content_object):
    model = ContentType.objects.get_for_model(content_object)
    links = ObjectLink.objects.filter(content_type__pk=model.id, object_id = content_object.id).order_by('destination_content_type')
    # for link in links:
    #     print "**", link.wrapped_destination_obj.obj, link.heading()

    # test for link.heading() - if "", then no heading was defined for this type
    # this is a way to catch cases where an image was added as a file link
    links = [link for link in links if link.wrapped_destination_obj.obj and link.heading]

    def mykey(obj): # would a lambda be nicer here?
        return obj.wrapped_destination_obj.heading

    links.sort(key=mykey)
    #links.sort(key=operator.attrgetter('wrapped_destination_obj.heading()'))
    return links
########NEW FILE########
__FILENAME__ = link_schemas
from django.conf import settings

from cms.models import Page

from filer.models import File, Image

from arkestra_utilities.settings import PERMITTED_FILETYPES

from links import models, admin, schema, LinkWrapper


schema.register(
    models.ExternalLink,
    search_fields=admin.ExternalLinkAdmin.search_fields,
    url='url',
    summary='description',
    heading='"External links"',
    )


class PageLinkWrapper(LinkWrapper):
    search_fields = ['title_set__title']
    link_format_choices = (
        (u"title", u"Name only"),
        (u"details", u"Name & summary (description)"),
        )

    def title(self):
        return self.obj.get_title()

    def short_text(self):
        return self.obj.get_menu_title()

    def summary(self):
        return self.obj.get_meta_description()

    def metadata(self):
        ancestors = self.obj.get_cached_ancestors()
        r = []
        for ancestor in ancestors:
            r.append(u"%s" % ancestor.get_menu_title())
        r.append(self.obj.get_menu_title())
        return u" &raquo; ".join(r)

    def heading(self):
        return "Related pages"

schema.register_wrapper(Page, PageLinkWrapper)


class FileLinkWrapper(LinkWrapper):
    search_fields = ['name', 'original_filename', 'sha1', 'description']

    # methods used by the Wrapper attributes
    def filetype(self):
        return PERMITTED_FILETYPES[self.obj.extension]

    def folder_path(self):
        # find the item's folder_path
        if self.obj.folder:
            folder = self.obj.folder
            path = [unicode(folder)]
            while folder.parent:
                path.insert(0, unicode(folder.parent))
                folder = folder.parent
            folder_path = u" &rsaquo; ".join(path)
        else:
            folder_path = file.logical_folder.name
        return folder_path

    def errors(self):
        file = self.obj
        # an empty list for errors to report
        errors = []

        # improperly filed? warn
        if self.folder_path == "unfiled files":
            errors.append(
                "This file is unfiled, and may be deleted without warning"
                )

        # no file name? warn
        if not file.name:
            errors.append("Name field is missing")

        # errors? list them all together
        if errors:
            error_items = "<br />".join(
                ["<em class='item_description'>%s</em>" % e for e in errors]
                )
            error_message = """
                <span class='errornote'>Is this your file?<br />%s</span>
                """ % error_items
        else:
            error_message = ""
        return error_message

    # Wrapper attributes
    def summary(self):
        return self.obj.description or ""

    def admin_metadata(self):
        # the following functionality will have to be restored in such a
        # way that we don't return admin messages to the frontend - later

        return u"%s<br /><em>Folder:</em> %s<br />%s" % (
            self.filetype() or "",
            self.folder_path(),
            self.errors()
            )

    def heading(self):
        return u"Files"

    def url(self):
        return self.obj.url


schema.register_wrapper(File, FileLinkWrapper)


class ImageLinkWrapper(FileLinkWrapper):
    def image(self):
        return self.obj

    def admin_metadata(self):
        return u"<em>Folder:</em> %s<br />%s" % (
            self.folder_path(),
            self.errors()
            )

schema.register_wrapper(Image, ImageLinkWrapper)


if 'form_designer' in settings.INSTALLED_APPS:
    from form_designer.models import FormDefinition

    schema.register(
        FormDefinition,
        search_fields=['title'],
        summary='body',
        )

########NEW FILE########
__FILENAME__ = links
from .models import LinkType, ExternalLink

# from django.core.management.base import BaseCommand, NoArgsCommand, CommandError
# from django.contrib.contenttypes.models import ContentType
# 
# 
# from links.models import LinkType, ExternalLink
# 
# from optparse import make_option
# 
# class Command(BaseCommand):
# 
#     help = 'Reports and fixes links'
# 
#     def handle(self, **options):
#         self.stdout.write('Successfully ran command')
# 
#     def handle_noargs(self, **options):
#         self.stdout.write('Successfully ran command')
# 
# def duplicates():
#     # find out what link.kinds are permissible
#     permissible_kinds = LinkType.objects.all()
#     
#     # get the content_type of ExternalLinks
#     content_type = ContentType.objects.get_for_model(ExternalLink)
#     
#     print permissible_kinds, content_type

########NEW FILE########
__FILENAME__ = report
from django.core.management.base import NoArgsCommand

# from links.models import ExternalLink, ObjectLink, GenericLinkListPluginItem, LinkType, ExternalSite


class ReportCommand(NoArgsCommand):
    help = "Reports on Arkestra links application"

    def handle_noargs(self, **options):
        """
        Obtains a report on links
        """
        self.stdout.write("Obtaining links report\n")

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'ObjectLink'
        db.create_table('links_objectlink', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('destination_content_type', self.gf('django.db.models.fields.related.ForeignKey')(related_name='links_to_objectlink', to=orm['contenttypes.ContentType'])),
            ('destination_object_id', self.gf('django.db.models.fields.PositiveIntegerField')()),
            ('include_description', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('text_override', self.gf('django.db.models.fields.CharField')(max_length=256, null=True, blank=True)),
            ('description_override', self.gf('django.db.models.fields.TextField')(max_length=256, null=True, blank=True)),
            ('heading_override', self.gf('django.db.models.fields.CharField')(max_length=256, null=True, blank=True)),
            ('metadata_override', self.gf('django.db.models.fields.CharField')(max_length=256, null=True, blank=True)),
            ('html_title_attribute', self.gf('django.db.models.fields.CharField')(max_length=256, null=True, blank=True)),
            ('content_type', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['contenttypes.ContentType'])),
            ('object_id', self.gf('django.db.models.fields.PositiveIntegerField')()),
        ))
        db.send_create_signal('links', ['ObjectLink'])

        # Adding model 'ExternalLink'
        db.create_table('links_externallink', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=256)),
            ('url', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('external_site', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='links', null=True, to=orm['links.ExternalSite'])),
            ('description', self.gf('django.db.models.fields.TextField')(max_length=256, null=True, blank=True)),
            ('kind', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='links', null=True, to=orm['links.LinkType'])),
        ))
        db.send_create_signal('links', ['ExternalLink'])

        # Adding model 'LinkType'
        db.create_table('links_linktype', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('scheme', self.gf('django.db.models.fields.CharField')(unique=True, max_length=50)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=50)),
        ))
        db.send_create_signal('links', ['LinkType'])

        # Adding model 'ExternalSite'
        db.create_table('links_externalsite', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('site', self.gf('django.db.models.fields.CharField')(max_length=50, null=True)),
            ('domain', self.gf('django.db.models.fields.CharField')(max_length=256, null=True, blank=True)),
            ('parent', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='children', null=True, to=orm['links.ExternalSite'])),
            ('lft', self.gf('django.db.models.fields.PositiveIntegerField')(db_index=True)),
            ('rght', self.gf('django.db.models.fields.PositiveIntegerField')(db_index=True)),
            ('tree_id', self.gf('django.db.models.fields.PositiveIntegerField')(db_index=True)),
            ('level', self.gf('django.db.models.fields.PositiveIntegerField')(db_index=True)),
        ))
        db.send_create_signal('links', ['ExternalSite'])

        # Adding model 'GenericLinkListPlugin'
        db.create_table('cmsplugin_genericlinklistplugin', (
            ('cmsplugin_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['cms.CMSPlugin'], unique=True, primary_key=True)),
            ('insert_as', self.gf('django.db.models.fields.PositiveSmallIntegerField')(default=1)),
            ('use_link_icons', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('separator', self.gf('django.db.models.fields.CharField')(default=', ', max_length=20, null=True, blank=True)),
            ('final_separator', self.gf('django.db.models.fields.CharField')(default=' and ', max_length=20, null=True, blank=True)),
        ))
        db.send_create_signal('links', ['GenericLinkListPlugin'])

        # Adding model 'GenericLinkListPluginItem'
        db.create_table('links_genericlinklistpluginitem', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('destination_content_type', self.gf('django.db.models.fields.related.ForeignKey')(related_name='links_to_genericlinklistpluginitem', to=orm['contenttypes.ContentType'])),
            ('destination_object_id', self.gf('django.db.models.fields.PositiveIntegerField')()),
            ('include_description', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('text_override', self.gf('django.db.models.fields.CharField')(max_length=256, null=True, blank=True)),
            ('description_override', self.gf('django.db.models.fields.TextField')(max_length=256, null=True, blank=True)),
            ('heading_override', self.gf('django.db.models.fields.CharField')(max_length=256, null=True, blank=True)),
            ('metadata_override', self.gf('django.db.models.fields.CharField')(max_length=256, null=True, blank=True)),
            ('html_title_attribute', self.gf('django.db.models.fields.CharField')(max_length=256, null=True, blank=True)),
            ('plugin', self.gf('django.db.models.fields.related.ForeignKey')(related_name='links', to=orm['links.GenericLinkListPlugin'])),
            ('key_link', self.gf('django.db.models.fields.BooleanField')(default=False)),
        ))
        db.send_create_signal('links', ['GenericLinkListPluginItem'])

        # Adding model 'CarouselPlugin'
        db.create_table('cmsplugin_carouselplugin', (
            ('cmsplugin_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['cms.CMSPlugin'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=50)),
            ('width', self.gf('django.db.models.fields.FloatField')(default=100.0)),
            ('aspect_ratio', self.gf('django.db.models.fields.FloatField')(default=1.5, null=True, blank=True)),
        ))
        db.send_create_signal('links', ['CarouselPlugin'])

        # Adding model 'CarouselPluginItem'
        db.create_table('links_carouselpluginitem', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('destination_content_type', self.gf('django.db.models.fields.related.ForeignKey')(related_name='links_to_carouselpluginitem', to=orm['contenttypes.ContentType'])),
            ('destination_object_id', self.gf('django.db.models.fields.PositiveIntegerField')()),
            ('plugin', self.gf('django.db.models.fields.related.ForeignKey')(related_name='carousel_item', to=orm['links.CarouselPlugin'])),
            ('image', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Image'])),
            ('link_title', self.gf('django.db.models.fields.CharField')(max_length=35)),
        ))
        db.send_create_signal('links', ['CarouselPluginItem'])

        # Adding model 'FocusOnPluginEditor'
        db.create_table('cmsplugin_focusonplugineditor', (
            ('cmsplugin_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['cms.CMSPlugin'], unique=True, primary_key=True)),
            ('heading_level', self.gf('django.db.models.fields.PositiveSmallIntegerField')(default=3)),
        ))
        db.send_create_signal('links', ['FocusOnPluginEditor'])

        # Adding model 'FocusOnPluginItemEditor'
        db.create_table('links_focusonpluginitemeditor', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('destination_content_type', self.gf('django.db.models.fields.related.ForeignKey')(related_name='links_to_focusonpluginitemeditor', to=orm['contenttypes.ContentType'])),
            ('destination_object_id', self.gf('django.db.models.fields.PositiveIntegerField')()),
            ('plugin', self.gf('django.db.models.fields.related.ForeignKey')(related_name='focuson_items', to=orm['links.FocusOnPluginEditor'])),
            ('text_override', self.gf('django.db.models.fields.CharField')(max_length=256, null=True, blank=True)),
            ('short_text_override', self.gf('django.db.models.fields.CharField')(max_length=256, null=True, blank=True)),
            ('description_override', self.gf('django.db.models.fields.TextField')(max_length=256, null=True, blank=True)),
            ('image_override', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Image'], null=True, blank=True)),
        ))
        db.send_create_signal('links', ['FocusOnPluginItemEditor'])


    def backwards(self, orm):
        
        # Deleting model 'ObjectLink'
        db.delete_table('links_objectlink')

        # Deleting model 'ExternalLink'
        db.delete_table('links_externallink')

        # Deleting model 'LinkType'
        db.delete_table('links_linktype')

        # Deleting model 'ExternalSite'
        db.delete_table('links_externalsite')

        # Deleting model 'GenericLinkListPlugin'
        db.delete_table('cmsplugin_genericlinklistplugin')

        # Deleting model 'GenericLinkListPluginItem'
        db.delete_table('links_genericlinklistpluginitem')

        # Deleting model 'CarouselPlugin'
        db.delete_table('cmsplugin_carouselplugin')

        # Deleting model 'CarouselPluginItem'
        db.delete_table('links_carouselpluginitem')

        # Deleting model 'FocusOnPluginEditor'
        db.delete_table('cmsplugin_focusonplugineditor')

        # Deleting model 'FocusOnPluginItemEditor'
        db.delete_table('links_focusonpluginitemeditor')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        },
        'links.carouselplugin': {
            'Meta': {'object_name': 'CarouselPlugin', 'db_table': "'cmsplugin_carouselplugin'", '_ormbases': ['cms.CMSPlugin']},
            'aspect_ratio': ('django.db.models.fields.FloatField', [], {'default': '1.5', 'null': 'True', 'blank': 'True'}),
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'width': ('django.db.models.fields.FloatField', [], {'default': '100.0'})
        },
        'links.carouselpluginitem': {
            'Meta': {'ordering': "['id']", 'object_name': 'CarouselPluginItem'},
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_carouselpluginitem'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']"}),
            'link_title': ('django.db.models.fields.CharField', [], {'max_length': '35'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carousel_item'", 'to': "orm['links.CarouselPlugin']"})
        },
        'links.externallink': {
            'Meta': {'ordering': "['title']", 'object_name': 'ExternalLink'},
            'description': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'external_site': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'to': "orm['links.LinkType']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'links.externalsite': {
            'Meta': {'ordering': "['site']", 'object_name': 'ExternalSite'},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'links.focusonplugineditor': {
            'Meta': {'object_name': 'FocusOnPluginEditor', 'db_table': "'cmsplugin_focusonplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'heading_level': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '3'})
        },
        'links.focusonpluginitemeditor': {
            'Meta': {'ordering': "['id']", 'object_name': 'FocusOnPluginItemEditor'},
            'description_override': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_focusonpluginitemeditor'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image_override': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'focuson_items'", 'to': "orm['links.FocusOnPluginEditor']"}),
            'short_text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'})
        },
        'links.genericlinklistplugin': {
            'Meta': {'object_name': 'GenericLinkListPlugin', 'db_table': "'cmsplugin_genericlinklistplugin'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'final_separator': ('django.db.models.fields.CharField', [], {'default': "' and '", 'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'insert_as': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'separator': ('django.db.models.fields.CharField', [], {'default': "', '", 'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'use_link_icons': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'links.genericlinklistpluginitem': {
            'Meta': {'ordering': "['id']", 'object_name': 'GenericLinkListPluginItem'},
            'description_override': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_genericlinklistpluginitem'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'heading_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'html_title_attribute': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'include_description': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'key_link': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'metadata_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links'", 'to': "orm['links.GenericLinkListPlugin']"}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'})
        },
        'links.linktype': {
            'Meta': {'object_name': 'LinkType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'scheme': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'links.objectlink': {
            'Meta': {'object_name': 'ObjectLink'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'description_override': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_objectlink'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'heading_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'html_title_attribute': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'include_description': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'metadata_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['links']

########NEW FILE########
__FILENAME__ = 0002_auto__add_field_objectlink_key_link
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'ObjectLink.key_link'
        db.add_column('links_objectlink', 'key_link',
                      self.gf('django.db.models.fields.BooleanField')(default=False),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'ObjectLink.key_link'
        db.delete_column('links_objectlink', 'key_link')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 1, 15, 0, 0)'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        },
        'links.carouselplugin': {
            'Meta': {'object_name': 'CarouselPlugin', 'db_table': "'cmsplugin_carouselplugin'", '_ormbases': ['cms.CMSPlugin']},
            'aspect_ratio': ('django.db.models.fields.FloatField', [], {'default': '1.5', 'null': 'True', 'blank': 'True'}),
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'width': ('django.db.models.fields.FloatField', [], {'default': '100.0'})
        },
        'links.carouselpluginitem': {
            'Meta': {'ordering': "['id']", 'object_name': 'CarouselPluginItem'},
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_carouselpluginitem'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']"}),
            'link_title': ('django.db.models.fields.CharField', [], {'max_length': '35'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carousel_item'", 'to': "orm['links.CarouselPlugin']"})
        },
        'links.externallink': {
            'Meta': {'ordering': "['title']", 'object_name': 'ExternalLink'},
            'description': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'external_site': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'to': "orm['links.LinkType']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'links.externalsite': {
            'Meta': {'ordering': "['domain']", 'object_name': 'ExternalSite'},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'links.focusonplugineditor': {
            'Meta': {'object_name': 'FocusOnPluginEditor', 'db_table': "'cmsplugin_focusonplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'heading_level': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '2'})
        },
        'links.focusonpluginitemeditor': {
            'Meta': {'ordering': "['id']", 'object_name': 'FocusOnPluginItemEditor'},
            'description_override': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_focusonpluginitemeditor'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image_override': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'focuson_item'", 'to': "orm['links.FocusOnPluginEditor']"}),
            'short_text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'})
        },
        'links.genericlinklistplugin': {
            'Meta': {'object_name': 'GenericLinkListPlugin', 'db_table': "'cmsplugin_genericlinklistplugin'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'final_separator': ('django.db.models.fields.CharField', [], {'default': "' and '", 'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'insert_as': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'separator': ('django.db.models.fields.CharField', [], {'default': "', '", 'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'use_link_icons': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'links.genericlinklistpluginitem': {
            'Meta': {'ordering': "['id']", 'object_name': 'GenericLinkListPluginItem'},
            'description_override': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_genericlinklistpluginitem'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'heading_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'html_title_attribute': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'include_description': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'key_link': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'metadata_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_item'", 'to': "orm['links.GenericLinkListPlugin']"}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'})
        },
        'links.linktype': {
            'Meta': {'object_name': 'LinkType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'scheme': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'links.objectlink': {
            'Meta': {'object_name': 'ObjectLink'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'description_override': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_objectlink'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'heading_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'html_title_attribute': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'include_description': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'key_link': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'metadata_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['links']
########NEW FILE########
__FILENAME__ = 0003_auto__add_field_genericlinklistpluginitem_inline_item_ordering__add_fi
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'GenericLinkListPluginItem.inline_item_ordering'
        db.add_column('links_genericlinklistpluginitem', 'inline_item_ordering',
                      self.gf('django.db.models.fields.PositiveSmallIntegerField')(default=0),
                      keep_default=False)

        # Adding field 'GenericLinkListPluginItem.active'
        db.add_column('links_genericlinklistpluginitem', 'active',
                      self.gf('django.db.models.fields.BooleanField')(default=True),
                      keep_default=False)

        # Adding field 'CarouselPluginItem.inline_item_ordering'
        db.add_column('links_carouselpluginitem', 'inline_item_ordering',
                      self.gf('django.db.models.fields.PositiveSmallIntegerField')(default=0),
                      keep_default=False)

        # Adding field 'CarouselPluginItem.active'
        db.add_column('links_carouselpluginitem', 'active',
                      self.gf('django.db.models.fields.BooleanField')(default=True),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'GenericLinkListPluginItem.inline_item_ordering'
        db.delete_column('links_genericlinklistpluginitem', 'inline_item_ordering')

        # Deleting field 'GenericLinkListPluginItem.active'
        db.delete_column('links_genericlinklistpluginitem', 'active')

        # Deleting field 'CarouselPluginItem.inline_item_ordering'
        db.delete_column('links_carouselpluginitem', 'inline_item_ordering')

        # Deleting field 'CarouselPluginItem.active'
        db.delete_column('links_carouselpluginitem', 'active')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 1, 29, 0, 0)'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        },
        'links.carouselplugin': {
            'Meta': {'object_name': 'CarouselPlugin', 'db_table': "'cmsplugin_carouselplugin'", '_ormbases': ['cms.CMSPlugin']},
            'aspect_ratio': ('django.db.models.fields.FloatField', [], {'default': '1.5', 'null': 'True', 'blank': 'True'}),
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'width': ('django.db.models.fields.FloatField', [], {'default': '100.0'})
        },
        'links.carouselpluginitem': {
            'Meta': {'ordering': "['id']", 'object_name': 'CarouselPluginItem'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_carouselpluginitem'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']"}),
            'inline_item_ordering': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
            'link_title': ('django.db.models.fields.CharField', [], {'max_length': '35'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carousel_item'", 'to': "orm['links.CarouselPlugin']"})
        },
        'links.externallink': {
            'Meta': {'ordering': "['title']", 'object_name': 'ExternalLink'},
            'description': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'external_site': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'to': "orm['links.LinkType']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'links.externalsite': {
            'Meta': {'ordering': "['domain']", 'object_name': 'ExternalSite'},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'links.focusonplugineditor': {
            'Meta': {'object_name': 'FocusOnPluginEditor', 'db_table': "'cmsplugin_focusonplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'heading_level': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '2'})
        },
        'links.focusonpluginitemeditor': {
            'Meta': {'ordering': "['id']", 'object_name': 'FocusOnPluginItemEditor'},
            'description_override': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_focusonpluginitemeditor'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image_override': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'focuson_item'", 'to': "orm['links.FocusOnPluginEditor']"}),
            'short_text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'})
        },
        'links.genericlinklistplugin': {
            'Meta': {'object_name': 'GenericLinkListPlugin', 'db_table': "'cmsplugin_genericlinklistplugin'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'final_separator': ('django.db.models.fields.CharField', [], {'default': "' and '", 'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'insert_as': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'separator': ('django.db.models.fields.CharField', [], {'default': "', '", 'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'use_link_icons': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'links.genericlinklistpluginitem': {
            'Meta': {'ordering': "['inline_item_ordering', 'id']", 'object_name': 'GenericLinkListPluginItem'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'description_override': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_genericlinklistpluginitem'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'heading_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'html_title_attribute': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'include_description': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'inline_item_ordering': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
            'key_link': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'metadata_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_item'", 'to': "orm['links.GenericLinkListPlugin']"}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'})
        },
        'links.linktype': {
            'Meta': {'object_name': 'LinkType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'scheme': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'links.objectlink': {
            'Meta': {'object_name': 'ObjectLink'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'description_override': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_objectlink'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'heading_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'html_title_attribute': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'include_description': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'key_link': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'metadata_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['links']
########NEW FILE########
__FILENAME__ = 0004_auto__chg_field_externallink_kind__chg_field_externallink_external_sit
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Changing field 'ExternalLink.kind'
        db.alter_column('links_externallink', 'kind_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, on_delete=models.SET_NULL, to=orm['links.LinkType']))

        # Changing field 'ExternalLink.external_site'
        db.alter_column('links_externallink', 'external_site_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, on_delete=models.PROTECT, to=orm['links.ExternalSite']))

    def backwards(self, orm):

        # Changing field 'ExternalLink.kind'
        db.alter_column('links_externallink', 'kind_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['links.LinkType']))

        # Changing field 'ExternalLink.external_site'
        db.alter_column('links_externallink', 'external_site_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['links.ExternalSite']))

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 3, 22, 0, 0)'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        },
        'links.carouselplugin': {
            'Meta': {'object_name': 'CarouselPlugin', 'db_table': "'cmsplugin_carouselplugin'", '_ormbases': ['cms.CMSPlugin']},
            'aspect_ratio': ('django.db.models.fields.FloatField', [], {'default': '1.5', 'null': 'True', 'blank': 'True'}),
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'width': ('django.db.models.fields.FloatField', [], {'default': '100.0'})
        },
        'links.carouselpluginitem': {
            'Meta': {'ordering': "['inline_item_ordering', 'id']", 'object_name': 'CarouselPluginItem'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_carouselpluginitem'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']"}),
            'inline_item_ordering': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
            'link_title': ('django.db.models.fields.CharField', [], {'max_length': '35'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carousel_item'", 'to': "orm['links.CarouselPlugin']"})
        },
        'links.externallink': {
            'Meta': {'ordering': "['title']", 'object_name': 'ExternalLink'},
            'description': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'external_site': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalSite']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['links.LinkType']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'links.externalsite': {
            'Meta': {'ordering': "['domain']", 'object_name': 'ExternalSite'},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'links.focusonplugineditor': {
            'Meta': {'object_name': 'FocusOnPluginEditor', 'db_table': "'cmsplugin_focusonplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'heading_level': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '2'})
        },
        'links.focusonpluginitemeditor': {
            'Meta': {'ordering': "['id']", 'object_name': 'FocusOnPluginItemEditor'},
            'description_override': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_focusonpluginitemeditor'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image_override': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'focuson_item'", 'to': "orm['links.FocusOnPluginEditor']"}),
            'short_text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'})
        },
        'links.genericlinklistplugin': {
            'Meta': {'object_name': 'GenericLinkListPlugin', 'db_table': "'cmsplugin_genericlinklistplugin'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'final_separator': ('django.db.models.fields.CharField', [], {'default': "' and '", 'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'insert_as': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'separator': ('django.db.models.fields.CharField', [], {'default': "', '", 'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'use_link_icons': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'links.genericlinklistpluginitem': {
            'Meta': {'ordering': "['inline_item_ordering', 'id']", 'object_name': 'GenericLinkListPluginItem'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'description_override': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_genericlinklistpluginitem'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'heading_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'html_title_attribute': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'include_description': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'inline_item_ordering': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
            'key_link': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'metadata_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_item'", 'to': "orm['links.GenericLinkListPlugin']"}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'})
        },
        'links.linktype': {
            'Meta': {'object_name': 'LinkType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'scheme': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'links.objectlink': {
            'Meta': {'object_name': 'ObjectLink'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'description_override': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_objectlink'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'heading_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'html_title_attribute': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'include_description': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'key_link': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'metadata_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['links']
########NEW FILE########
__FILENAME__ = 0005_auto__chg_field_externalsite_domain__chg_field_externalsite_site__chg_
# -*- coding: utf-8 -*-
from south.utils import datetime_utils as datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Changing field 'ExternalSite.domain'
        db.alter_column('links_externalsite', 'domain', self.gf('django.db.models.fields.CharField')(default='', max_length=256))

        # Changing field 'ExternalSite.site'
        db.alter_column('links_externalsite', 'site', self.gf('django.db.models.fields.CharField')(default='', max_length=50))

        # Changing field 'ExternalLink.description'
        db.alter_column('links_externallink', 'description', self.gf('django.db.models.fields.TextField')(default='', max_length=256))

        # Changing field 'GenericLinkListPlugin.final_separator'
        db.alter_column('cmsplugin_genericlinklistplugin', 'final_separator', self.gf('django.db.models.fields.CharField')(max_length=20))

        # Changing field 'GenericLinkListPlugin.separator'
        db.alter_column('cmsplugin_genericlinklistplugin', 'separator', self.gf('django.db.models.fields.CharField')(max_length=20))

        # Adding field 'GenericLinkListPluginItem.format'
        db.add_column('links_genericlinklistpluginitem', 'format',
                      self.gf('django.db.models.fields.CharField')(default='title', max_length=25),
                      keep_default=False)





        # Rename field 'GenericLinkListPluginItem.description_override'
        db.rename_column(
            'links_genericlinklistpluginitem',
            'description_override',
            'summary_override'
            )



        # Rename field 'ObjectLink.description_override'
        db.rename_column(
            'links_objectlink',
            'description_override',
            'summary_override'
            )






        # Changing field 'GenericLinkListPluginItem.text_override'
        db.alter_column('links_genericlinklistpluginitem', 'text_override', self.gf('django.db.models.fields.CharField')(default='', max_length=256))

        # Changing field 'GenericLinkListPluginItem.metadata_override'
        db.alter_column('links_genericlinklistpluginitem', 'metadata_override', self.gf('django.db.models.fields.CharField')(default='', max_length=256))

        # Changing field 'GenericLinkListPluginItem.html_title_attribute'
        db.alter_column('links_genericlinklistpluginitem', 'html_title_attribute', self.gf('django.db.models.fields.CharField')(default='', max_length=256))

        # Changing field 'GenericLinkListPluginItem.heading_override'
        db.alter_column('links_genericlinklistpluginitem', 'heading_override', self.gf('django.db.models.fields.CharField')(default='', max_length=256))

        # Adding field 'ObjectLink.format'
        db.add_column('links_objectlink', 'format',
                      self.gf('django.db.models.fields.CharField')(default='title', max_length=25),
                      keep_default=False)



        # Changing field 'ObjectLink.text_override'
        db.alter_column('links_objectlink', 'text_override', self.gf('django.db.models.fields.CharField')(default='', max_length=256))

        # Changing field 'ObjectLink.metadata_override'
        db.alter_column('links_objectlink', 'metadata_override', self.gf('django.db.models.fields.CharField')(default='', max_length=256))

        # Changing field 'ObjectLink.html_title_attribute'
        db.alter_column('links_objectlink', 'html_title_attribute', self.gf('django.db.models.fields.CharField')(default='', max_length=256))

        # Changing field 'ObjectLink.heading_override'
        db.alter_column('links_objectlink', 'heading_override', self.gf('django.db.models.fields.CharField')(default='', max_length=256))

        # Changing field 'FocusOnPluginItemEditor.short_text_override'
        db.alter_column('links_focusonpluginitemeditor', 'short_text_override', self.gf('django.db.models.fields.CharField')(default='', max_length=256))

        # Changing field 'FocusOnPluginItemEditor.text_override'
        db.alter_column('links_focusonpluginitemeditor', 'text_override', self.gf('django.db.models.fields.CharField')(default='', max_length=256))

        # Changing field 'FocusOnPluginItemEditor.description_override'
        db.alter_column('links_focusonpluginitemeditor', 'description_override', self.gf('django.db.models.fields.TextField')(default='', max_length=256))

    def backwards(self, orm):

        # Changing field 'ExternalSite.domain'
        db.alter_column('links_externalsite', 'domain', self.gf('django.db.models.fields.CharField')(max_length=256, null=True))

        # Changing field 'ExternalSite.site'
        db.alter_column('links_externalsite', 'site', self.gf('django.db.models.fields.CharField')(max_length=50, null=True))

        # Changing field 'ExternalLink.description'
        db.alter_column('links_externallink', 'description', self.gf('django.db.models.fields.TextField')(max_length=256, null=True))

        # Changing field 'GenericLinkListPlugin.final_separator'
        db.alter_column('cmsplugin_genericlinklistplugin', 'final_separator', self.gf('django.db.models.fields.CharField')(max_length=20, null=True))

        # Changing field 'GenericLinkListPlugin.separator'
        db.alter_column('cmsplugin_genericlinklistplugin', 'separator', self.gf('django.db.models.fields.CharField')(max_length=20, null=True))


        # Deleting field 'GenericLinkListPluginItem.format'
        db.delete_column('links_genericlinklistpluginitem', 'format')

        # Rename summary back to description
        db.rename_column('links_genericlinklistpluginitem', 'summary_override',  'description_override')


        # Changing field 'GenericLinkListPluginItem.text_override'
        db.alter_column('links_genericlinklistpluginitem', 'text_override', self.gf('django.db.models.fields.CharField')(max_length=256, null=True))

        # Changing field 'GenericLinkListPluginItem.metadata_override'
        db.alter_column('links_genericlinklistpluginitem', 'metadata_override', self.gf('django.db.models.fields.CharField')(max_length=256, null=True))

        # Changing field 'GenericLinkListPluginItem.html_title_attribute'
        db.alter_column('links_genericlinklistpluginitem', 'html_title_attribute', self.gf('django.db.models.fields.CharField')(max_length=256, null=True))

        # Changing field 'GenericLinkListPluginItem.heading_override'
        db.alter_column('links_genericlinklistpluginitem', 'heading_override', self.gf('django.db.models.fields.CharField')(max_length=256, null=True))


        # Rename field 'ObjectLink.description_override'
        db.rename_column('links_objectlink', 'summary_override', 'description_override')


        # Deleting field 'ObjectLink.format'
        db.delete_column('links_objectlink', 'format')



        # Changing field 'ObjectLink.text_override'
        db.alter_column('links_objectlink', 'text_override', self.gf('django.db.models.fields.CharField')(max_length=256, null=True))

        # Changing field 'ObjectLink.metadata_override'
        db.alter_column('links_objectlink', 'metadata_override', self.gf('django.db.models.fields.CharField')(max_length=256, null=True))

        # Changing field 'ObjectLink.html_title_attribute'
        db.alter_column('links_objectlink', 'html_title_attribute', self.gf('django.db.models.fields.CharField')(max_length=256, null=True))

        # Changing field 'ObjectLink.heading_override'
        db.alter_column('links_objectlink', 'heading_override', self.gf('django.db.models.fields.CharField')(max_length=256, null=True))

        # Changing field 'FocusOnPluginItemEditor.short_text_override'
        db.alter_column('links_focusonpluginitemeditor', 'short_text_override', self.gf('django.db.models.fields.CharField')(max_length=256, null=True))

        # Changing field 'FocusOnPluginItemEditor.text_override'
        db.alter_column('links_focusonpluginitemeditor', 'text_override', self.gf('django.db.models.fields.CharField')(max_length=256, null=True))

        # Changing field 'FocusOnPluginItemEditor.description_override'
        db.alter_column('links_focusonpluginitemeditor', 'description_override', self.gf('django.db.models.fields.TextField')(max_length=256, null=True))

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2014, 4, 10, 0, 0)'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        },
        'links.carouselplugin': {
            'Meta': {'object_name': 'CarouselPlugin', 'db_table': "'cmsplugin_carouselplugin'", '_ormbases': ['cms.CMSPlugin']},
            'aspect_ratio': ('django.db.models.fields.FloatField', [], {'default': '1.5', 'null': 'True', 'blank': 'True'}),
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'width': ('django.db.models.fields.FloatField', [], {'default': '100.0'})
        },
        'links.carouselpluginitem': {
            'Meta': {'ordering': "['inline_item_ordering', 'id']", 'object_name': 'CarouselPluginItem'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_carouselpluginitem'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']"}),
            'inline_item_ordering': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
            'link_title': ('django.db.models.fields.CharField', [], {'max_length': '35'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carousel_item'", 'to': "orm['links.CarouselPlugin']"})
        },
        'links.externallink': {
            'Meta': {'ordering': "['title']", 'object_name': 'ExternalLink'},
            'description': ('django.db.models.fields.TextField', [], {'max_length': '256', 'blank': 'True'}),
            'external_site': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalSite']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['links.LinkType']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'links.externalsite': {
            'Meta': {'ordering': "['domain']", 'object_name': 'ExternalSite'},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'links.focusonplugineditor': {
            'Meta': {'object_name': 'FocusOnPluginEditor', 'db_table': "'cmsplugin_focusonplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'heading_level': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '3'})
        },
        'links.focusonpluginitemeditor': {
            'Meta': {'ordering': "['id']", 'object_name': 'FocusOnPluginItemEditor'},
            'description_override': ('django.db.models.fields.TextField', [], {'max_length': '256', 'blank': 'True'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_focusonpluginitemeditor'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image_override': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'focuson_item'", 'to': "orm['links.FocusOnPluginEditor']"}),
            'short_text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'})
        },
        'links.genericlinklistplugin': {
            'Meta': {'object_name': 'GenericLinkListPlugin', 'db_table': "'cmsplugin_genericlinklistplugin'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'final_separator': ('django.db.models.fields.CharField', [], {'default': "' and '", 'max_length': '20', 'blank': 'True'}),
            'insert_as': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'separator': ('django.db.models.fields.CharField', [], {'default': "', '", 'max_length': '20', 'blank': 'True'}),
            'use_link_icons': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'links.genericlinklistpluginitem': {
            'Meta': {'ordering': "['inline_item_ordering', 'id']", 'object_name': 'GenericLinkListPluginItem'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_genericlinklistpluginitem'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'format': ('django.db.models.fields.CharField', [], {'default': "'title'", 'max_length': '25'}),
            'heading_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'}),
            'html_title_attribute': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'inline_item_ordering': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
            'key_link': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'metadata_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_item'", 'to': "orm['links.GenericLinkListPlugin']"}),
            'summary_override': ('django.db.models.fields.TextField', [], {'max_length': '256', 'blank': 'True'}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'})
        },
        'links.linktype': {
            'Meta': {'object_name': 'LinkType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'scheme': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'links.objectlink': {
            'Meta': {'object_name': 'ObjectLink'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_objectlink'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'format': ('django.db.models.fields.CharField', [], {'default': "'title'", 'max_length': '25'}),
            'heading_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'}),
            'html_title_attribute': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'key_link': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'metadata_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'summary_override': ('django.db.models.fields.TextField', [], {'max_length': '256', 'blank': 'True'}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'})
        }
    }

    complete_apps = ['links']
########NEW FILE########
__FILENAME__ = 0006_change_link_format
# -*- coding: utf-8 -*-
from south.utils import datetime_utils as datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models

class Migration(DataMigration):

    def forwards(self, orm):

        for item in orm.ObjectLink.objects.all():
            if item.include_description:
                item.format = "details image"
            else:
                item.format = "title"
            item.save()

        for item in orm.GenericLinkListPluginItem.objects.all():
            if item.include_description:
                item.format = "details image"
            else:
                item.format = "title"
            item.save()

    def backwards(self, orm):

        for item in orm.ObjectLink.objects.all():
            if "details" in item.format:
                item.include_description = 1
            else:
                item.include_description = 0
            item.save()

        for item in orm.GenericLinkListPluginItem.objects.all():
            if "details" in item.format:
                item.include_description = 1
            else:
                item.include_description = 0
            item.save()


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2014, 4, 10, 0, 0)'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        },
        'links.carouselplugin': {
            'Meta': {'object_name': 'CarouselPlugin', 'db_table': "'cmsplugin_carouselplugin'", '_ormbases': ['cms.CMSPlugin']},
            'aspect_ratio': ('django.db.models.fields.FloatField', [], {'default': '1.5', 'null': 'True', 'blank': 'True'}),
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'width': ('django.db.models.fields.FloatField', [], {'default': '100.0'})
        },
        'links.carouselpluginitem': {
            'Meta': {'ordering': "['inline_item_ordering', 'id']", 'object_name': 'CarouselPluginItem'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_carouselpluginitem'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']"}),
            'inline_item_ordering': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
            'link_title': ('django.db.models.fields.CharField', [], {'max_length': '35'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carousel_item'", 'to': "orm['links.CarouselPlugin']"})
        },
        'links.externallink': {
            'Meta': {'ordering': "['title']", 'object_name': 'ExternalLink'},
            'description': ('django.db.models.fields.TextField', [], {'max_length': '256', 'blank': 'True'}),
            'external_site': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalSite']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['links.LinkType']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'links.externalsite': {
            'Meta': {'ordering': "['domain']", 'object_name': 'ExternalSite'},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'links.focusonplugineditor': {
            'Meta': {'object_name': 'FocusOnPluginEditor', 'db_table': "'cmsplugin_focusonplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'heading_level': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '3'})
        },
        'links.focusonpluginitemeditor': {
            'Meta': {'ordering': "['id']", 'object_name': 'FocusOnPluginItemEditor'},
            'description_override': ('django.db.models.fields.TextField', [], {'max_length': '256', 'blank': 'True'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_focusonpluginitemeditor'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image_override': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'focuson_item'", 'to': "orm['links.FocusOnPluginEditor']"}),
            'short_text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'})
        },
        'links.genericlinklistplugin': {
            'Meta': {'object_name': 'GenericLinkListPlugin', 'db_table': "'cmsplugin_genericlinklistplugin'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'final_separator': ('django.db.models.fields.CharField', [], {'default': "' and '", 'max_length': '20', 'blank': 'True'}),
            'insert_as': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'separator': ('django.db.models.fields.CharField', [], {'default': "', '", 'max_length': '20', 'blank': 'True'}),
            'use_link_icons': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'links.genericlinklistpluginitem': {
            'Meta': {'ordering': "['inline_item_ordering', 'id']", 'object_name': 'GenericLinkListPluginItem'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_genericlinklistpluginitem'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'format': ('django.db.models.fields.CharField', [], {'default': "'title'", 'max_length': '25'}),
            'heading_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'}),
            'html_title_attribute': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'include_description': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'inline_item_ordering': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
            'key_link': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'metadata_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_item'", 'to': "orm['links.GenericLinkListPlugin']"}),
            'summary_override': ('django.db.models.fields.TextField', [], {'max_length': '256', 'blank': 'True', 'null': 'True'}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'})
        },
        'links.linktype': {
            'Meta': {'object_name': 'LinkType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'scheme': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'links.objectlink': {
            'Meta': {'object_name': 'ObjectLink'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_objectlink'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'format': ('django.db.models.fields.CharField', [], {'default': "'title'", 'max_length': '25'}),
            'heading_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'}),
            'html_title_attribute': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'include_description': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'key_link': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'metadata_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'summary_override': ('django.db.models.fields.TextField', [], {'max_length': '256', 'blank': 'True', 'null': 'True'}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'})
        }
    }

    complete_apps = ['links']
    symmetrical = True

########NEW FILE########
__FILENAME__ = 0007_auto__del_field_genericlinklistpluginitem_include_description__chg_fie
# -*- coding: utf-8 -*-
from south.utils import datetime_utils as datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Deleting field 'GenericLinkListPluginItem.include_description'
        db.delete_column('links_genericlinklistpluginitem', 'include_description')


        # Changing field 'GenericLinkListPluginItem.summary_override'
        db.alter_column('links_genericlinklistpluginitem', 'summary_override', self.gf('django.db.models.fields.TextField')(default='', max_length=256))
        # Deleting field 'ObjectLink.include_description'
        db.delete_column('links_objectlink', 'include_description')


        # Changing field 'ObjectLink.summary_override'
        db.alter_column('links_objectlink', 'summary_override', self.gf('django.db.models.fields.TextField')(default='', max_length=256))

    def backwards(self, orm):
        # Adding field 'GenericLinkListPluginItem.include_description'
        db.add_column('links_genericlinklistpluginitem', 'include_description',
                      self.gf('django.db.models.fields.BooleanField')(default=False),
                      keep_default=False)


        # Changing field 'GenericLinkListPluginItem.summary_override'
        db.alter_column('links_genericlinklistpluginitem', 'summary_override', self.gf('django.db.models.fields.TextField')(max_length=256, null=True))
        # Adding field 'ObjectLink.include_description'
        db.add_column('links_objectlink', 'include_description',
                      self.gf('django.db.models.fields.BooleanField')(default=False),
                      keep_default=False)


        # Changing field 'ObjectLink.summary_override'
        db.alter_column('links_objectlink', 'summary_override', self.gf('django.db.models.fields.TextField')(max_length=256, null=True))

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2014, 4, 10, 0, 0)'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        },
        'links.carouselplugin': {
            'Meta': {'object_name': 'CarouselPlugin', 'db_table': "'cmsplugin_carouselplugin'", '_ormbases': ['cms.CMSPlugin']},
            'aspect_ratio': ('django.db.models.fields.FloatField', [], {'default': '1.5', 'null': 'True', 'blank': 'True'}),
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'width': ('django.db.models.fields.FloatField', [], {'default': '100.0'})
        },
        'links.carouselpluginitem': {
            'Meta': {'ordering': "['inline_item_ordering', 'id']", 'object_name': 'CarouselPluginItem'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_carouselpluginitem'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']"}),
            'inline_item_ordering': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
            'link_title': ('django.db.models.fields.CharField', [], {'max_length': '35'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'carousel_item'", 'to': "orm['links.CarouselPlugin']"})
        },
        'links.externallink': {
            'Meta': {'ordering': "['title']", 'object_name': 'ExternalLink'},
            'description': ('django.db.models.fields.TextField', [], {'max_length': '256', 'blank': 'True'}),
            'external_site': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalSite']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['links.LinkType']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'links.externalsite': {
            'Meta': {'ordering': "['domain']", 'object_name': 'ExternalSite'},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'links.focusonplugineditor': {
            'Meta': {'object_name': 'FocusOnPluginEditor', 'db_table': "'cmsplugin_focusonplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'heading_level': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '3'})
        },
        'links.focusonpluginitemeditor': {
            'Meta': {'ordering': "['id']", 'object_name': 'FocusOnPluginItemEditor'},
            'description_override': ('django.db.models.fields.TextField', [], {'max_length': '256', 'blank': 'True'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_focusonpluginitemeditor'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image_override': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'focuson_item'", 'to': "orm['links.FocusOnPluginEditor']"}),
            'short_text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'})
        },
        'links.genericlinklistplugin': {
            'Meta': {'object_name': 'GenericLinkListPlugin', 'db_table': "'cmsplugin_genericlinklistplugin'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'final_separator': ('django.db.models.fields.CharField', [], {'default': "' and '", 'max_length': '20', 'blank': 'True'}),
            'insert_as': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '1'}),
            'separator': ('django.db.models.fields.CharField', [], {'default': "', '", 'max_length': '20', 'blank': 'True'}),
            'use_link_icons': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'links.genericlinklistpluginitem': {
            'Meta': {'ordering': "['inline_item_ordering', 'id']", 'object_name': 'GenericLinkListPluginItem'},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_genericlinklistpluginitem'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'format': ('django.db.models.fields.CharField', [], {'default': "'title'", 'max_length': '25'}),
            'heading_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'}),
            'html_title_attribute': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'inline_item_ordering': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
            'key_link': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'metadata_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'}),
            'plugin': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_item'", 'to': "orm['links.GenericLinkListPlugin']"}),
            'summary_override': ('django.db.models.fields.TextField', [], {'max_length': '256', 'blank': 'True'}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'})
        },
        'links.linktype': {
            'Meta': {'object_name': 'LinkType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'scheme': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'links.objectlink': {
            'Meta': {'object_name': 'ObjectLink'},
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'destination_content_type': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'links_to_objectlink'", 'to': "orm['contenttypes.ContentType']"}),
            'destination_object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'format': ('django.db.models.fields.CharField', [], {'default': "'title'", 'max_length': '25'}),
            'heading_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'}),
            'html_title_attribute': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'key_link': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'metadata_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'}),
            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
            'summary_override': ('django.db.models.fields.TextField', [], {'max_length': '256', 'blank': 'True'}),
            'text_override': ('django.db.models.fields.CharField', [], {'max_length': '256', 'blank': 'True'})
        }
    }

    complete_apps = ['links']
########NEW FILE########
__FILENAME__ = models
from urlparse import urlparse

from django.core.exceptions import ObjectDoesNotExist, MultipleObjectsReturned
from django.db import models
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes import generic

from cms.models import CMSPlugin

from filer.fields.image import FilerImageField

import mptt

from arkestra_utilities.import_free_model_mixins import ArkestraGenericPluginItemOrdering
from arkestra_utilities.settings import (
    PLUGIN_HEADING_LEVELS, PLUGIN_HEADING_LEVEL_DEFAULT
    )

from links import schema


class LinkMethodsMixin(object):

    # if there are any special_attributes set on the LinkWrapper subclass
    # we want them here so we can refer back to the method of the same name
    # on the subclass
    def __init__(self, *args, **kwargs):
        super(LinkMethodsMixin, self).__init__(*args, **kwargs)
        for attr in getattr(self.wrapped_destination_obj, "special_attributes"):
            setattr(self, attr, getattr(self.wrapped_destination_obj, attr))

    def _smart_get_attribute_for_destination(self, field_basename):
        # returns object.someattr_override, or object.someattr
        override_value = getattr(self, "%s_override" % field_basename, None)
        value = getattr(self.wrapped_destination_obj, field_basename, '')
        return override_value or value

    @property
    def wrapped_destination_obj(self):
        return schema.get_wrapper(
            self.destination_content_object.__class__
            )(self.destination_content_object)

    """
    The properties of any link attribute - as in {{ link.attribute }} *must* be
    listed here - otherwise, simply nothing will be returned.

    If an attribute matches:

    1. is it an override attribute from the link instance? If so, use that.
    Otherwise:

    2. look at the application's link_schema, and see what that returns. If
    there's nothing in there:

    3. look at links.schema_registry.LinkWrapper. Returns the matching
    attribute from the model in the application's link_schema; otherwise:

    4. looks at widgetry.views.SearchItemWrapper and looks for the attribute
    there. If it matches, return that, or the fallback
    """

    # the favoured representation of the item
    def __unicode__(self):
        if self.destination_content_object:
            return self.text_override or self.destination_content_object.__unicode__()
        else:
            return ""

    # we ought to remove the url attribute from use in the link schema,
    # and use get_absolute_url instead.
    def get_absolute_url(self):
        return self.wrapped_destination_obj.get_absolute_url()

    @property
    def url(self):
        return self.wrapped_destination_obj.url

    # a simple text summary
    @property
    def summary(self):
        return self._smart_get_attribute_for_destination('summary')

    @property
    def date(self):
        return self.wrapped_destination_obj.date

    # the heading under which items will be grouped
    @property
    def heading(self):
        return self._smart_get_attribute_for_destination('heading')

    # for admin purposes only
    @property
    def admin_metadata(self):
        return self._smart_get_attribute_for_destination('admin_metadata')

    @property
    def image(self):
        return self._smart_get_attribute_for_destination('image')

    @property
    def thumbnail_url(self):
        return self._smart_get_attribute_for_destination('thumbnail_url')

    # if this item should have its own special template
    @property
    def block_level_item_template(self):
        return self.wrapped_destination_obj.block_level_item_template


class BaseLink(models.Model):
    """
    All links, whether placed using the Admin Inline mechanism or as plugins,
    require this information
    """
    destination_content_type = models.ForeignKey(
        ContentType,
        verbose_name="Type",
        related_name="links_to_%(class)s"
        )
    destination_object_id = models.PositiveIntegerField(verbose_name="Item")
    destination_content_object = generic.GenericForeignKey(
        'destination_content_type', 'destination_object_id'
        )

    class Meta:
        abstract = True
        ordering = ['id']


class Link(BaseLink, LinkMethodsMixin):
    """
    Abstract base class for link items as they appear in lists - used by
    ObjectLinks and links.GenericLinkListPluginItem
    """


    FORMATS = (
        ("title", u"Title only"),
        ("details image", u"Details"),
        )
    format = models.CharField(
        "Item format", max_length=25,
        default="title"
        )

    text_override = models.CharField(
        verbose_name="Link text, if required",
        max_length=256,
        blank=True,
        help_text="Will override the automatic default link text"
        )
    summary_override = models.TextField(
        max_length=256,
        blank=True,
        help_text="Will override the automatic default description text"
        )
    heading_override = models.CharField(
        max_length=256,
        blank=True,
        help_text="Override the default group heading"
        )
    metadata_override = models.CharField(
        max_length=256,
        blank=True,
        help_text="Override the link destination's default metadata"
        )
    html_title_attribute = models.CharField(
        max_length=256,
        blank=True,
        help_text="Add an HTML <em>title</em> attribute"
        )
    key_link = models.BooleanField(
        help_text="Make this item stand out in the list"
        )

    class Meta:
        abstract = True


class ObjectLink(Link):
    """
    When content_object object is rendered via its view, {% links %} in the
    template will display all the instances of this model that match its
    content_object field.
    """

    class Meta:
        verbose_name = "Link"

    content_type = models.ForeignKey(ContentType)
    object_id = models.PositiveIntegerField()
    # the content object the link is attached to
    content_object = generic.GenericForeignKey('content_type', 'object_id')


class GenericLinkListPluginItem(ArkestraGenericPluginItemOrdering, Link):
    """
    Similar to ObjectLink above, but this one isn't attached to an object such
    as a NewsArticle, but to a plugin.
    """
    plugin = models.ForeignKey(
        "GenericLinkListPlugin",
        related_name="links_item"
        )

    class Meta:
        ordering = ['inline_item_ordering', 'id']


"""
As well as links to objects within the system, we need to maintain a database
of links to external web resources
"""


class ExternalLink(models.Model):
    """
    Links to external sites
    """
    title = models.CharField(max_length=256)
    # this would have unique = True, but it makes it too hard to migrate from
    # databases with duplicates
    url = models.CharField(max_length=255)
    external_site = models.ForeignKey(
        'ExternalSite',
        related_name="links",
        null=True,
        blank=True,
        on_delete=models.PROTECT
        )
    description = models.TextField(
        max_length=256,
        blank=True
        )
    kind = models.ForeignKey(
        'LinkType',
        null=True,
        blank=True,
        on_delete=models.SET_NULL,
        related_name='links'
        )

    class Meta:
        ordering = ['title']

    def __unicode__(self):
        return self.title or self.url

    def get_absolute_url(self):
        return self.url

    def save(self, *args, **kwargs):
        # here we either find the ExternalSite to attach to, or create it if it
        # doesn't exist
        # split url into component parts
        purl = urlparse(self.url)

        # apply scheme (clean() has already checked that it's permissible, but
        # check again because we save in housekeeping too)
        try:
            self.kind = LinkType.objects.get(scheme=purl.scheme)
        except ObjectDoesNotExist:
            # don't save
            return

        # get domain name
        domain = purl.netloc.partition(":")[0]

        # if we can find an exact domain match, make that the one
        try:
            self.external_site = ExternalSite.objects.get(domain=domain)
        # if we can't, we'll have to make it
        except (ObjectDoesNotExist, MultipleObjectsReturned):
            external_site = ExternalSite(domain=domain, site=domain)
            external_site.save()
            self.external_site = external_site
        super(ExternalLink, self).save(*args, **kwargs)


class LinkType(models.Model):
    scheme = models.CharField(
        max_length=50,
        help_text=u"e.g. 'http', 'mailto', etc",
        unique=True
        )
    name = models.CharField(
        max_length=50,
        help_text=u"e.g. 'Hypertext', 'email', etc"
        )

    def __unicode__(self):
        return self.scheme


class ExternalSite(models.Model):

    site = models.CharField(
        "site name",
        max_length=50,
        help_text=u"e.g. 'BBC News', 'Welsh Assembly Goverment', etc",
        )
    domain = models.CharField(
        "domain name",
        max_length=256,
        blank=True,
        help_text=u"Do not amend unless you know what you are doing",
        )
    parent = models.ForeignKey(
        'self',
        blank=True,
        null=True,
        related_name='children'
    )

    class Meta:
        verbose_name = "domain"
        ordering = ['domain']

    def __unicode__(self):
        # if this site is unnamed, let's see if it has a named ancestor
        if self.site == self.domain:
            # get a list of domains like: cf.ac.uk, ac.uk, uk
            for domain in self.get_ancestors(ascending=True):
                # has this one been given a name?
                if domain.site != domain.domain:
                    return domain.site
        return self.site

    def save(self):

        # to-do: strip off port, if it exists

        # find the domain's parent domain
        parent_domain = self.domain.partition(".")[-1]

        # assuming that this domain exists
        if not self.domain == "":
            try:
                # try giving it an existing parent
                self.parent = ExternalSite.objects.get(domain=parent_domain)
            except ObjectDoesNotExist:
                # no such parent? better create it
                parent = ExternalSite(domain=parent_domain, site=parent_domain)

                # check that it will have a domain attribute
                if parent.domain:
                    # save it, then assign a FK to it
                    parent.save()
                    self.parent = parent
            super(ExternalSite, self).save()
        else:
            # we won't create a nameless domain!
            pass


try:
    mptt.register(ExternalSite)
except mptt.AlreadyRegistered:
    pass


class GenericLinkListPlugin(CMSPlugin):
    INSERTION_MODES = (
        (0, u"Inline in text"),
        (1, u"Unordered List - <ul>"),
        (2, u"Paragraphs - <p>"),
        )
    insert_as = models.PositiveSmallIntegerField(
        choices=INSERTION_MODES,
        default=1
        )
    use_link_icons = models.BooleanField(
        help_text="Place an icon on each link below (links in lists only)"
        )
    separator = models.CharField(
        help_text="Applies to Inline links only; default is ', '",
        max_length=20,
        blank=True,
        default=", "
        )
    final_separator = models.CharField(
        help_text="Applies to Inline links only; default is ' and '",
        max_length=20,
        blank=True,
        default=" and "
        )

    def copy_relations(self, oldinstance):
        for plugin_item in oldinstance.links_item.all():
            plugin_item.pk = None
            plugin_item.plugin = self
            plugin_item.save()


class CarouselPlugin(CMSPlugin):
    """
    The carousel inserted into a Page
    """
    CAROUSEL_WIDTHS = (
        (u'Widths relative to the containing column', (
            (100.0, u"100%"),
            (75.0, u"75%"),
            (66.7, u"66%"),
            (50.0, u"50%"),
            (33.3, u"33%"),
            (25.0, u"25%"),
            )
        ),
        ('Deprecated - do not use', (
            (1.0, u'Full'),
            (1.33, u'Three-quarters of the page'),
            (1.5, u'Two-thirds of the page'),
            (2.0, u'Half of the page'),
            (3.0, u'One-third of the page'),
            (4.0, u'One-quarter of the page'),
            )
        ),
    )
    ASPECT_RATIOS = (
        (2.5, u'5x2'),
        (2.0, u'2x1'),
        (1.5, u'3x2'),
        (1.333, u'4x3'),
        (1.0, u'Square'),
        (.75, u'3x4'),
        (.667, u'2x3'),
    )

    name = models.CharField(max_length=50)
    width = models.FloatField(choices=CAROUSEL_WIDTHS, default=100.0)
    aspect_ratio = models.FloatField(
        null=True,
        blank=True,
        choices=ASPECT_RATIOS, default=1.5
        )

    def copy_relations(self, oldinstance):
        for plugin_item in oldinstance.carousel_item.all():
            plugin_item.pk = None
            plugin_item.plugin = self
            plugin_item.save()


class CarouselPluginItem(
    BaseLink,
    LinkMethodsMixin,
    ArkestraGenericPluginItemOrdering
    ):

    plugin = models.ForeignKey(
        CarouselPlugin,
        related_name="carousel_item"
        )
    image = FilerImageField()
    link_title = models.CharField(max_length=35)

    class Meta:
        ordering = ['inline_item_ordering', 'id']


class FocusOnPluginEditor(CMSPlugin):
    heading_level = models.PositiveSmallIntegerField(
        choices=PLUGIN_HEADING_LEVELS,
        default=PLUGIN_HEADING_LEVEL_DEFAULT
        )

    def copy_relations(self, oldinstance):
        for plugin_item in oldinstance.focuson_item.all():
            plugin_item.pk = None
            plugin_item.plugin = self
            plugin_item.save()


class FocusOnPluginItemEditor(LinkMethodsMixin, BaseLink):
    plugin = models.ForeignKey(
        FocusOnPluginEditor,
        related_name="focuson_item"
        )
    text_override = models.CharField(
        max_length=256,
        blank=True,
        help_text="Override the default link text"
        )
    short_text_override = models.CharField(
        max_length=256,
        blank=True,
        help_text="Override the default Focus on title text"
        )
    description_override = models.TextField(
        max_length=256,
        blank=True,
        help_text="Override the item's default description"
        )
    image_override = FilerImageField(blank=True, null=True,)

########NEW FILE########
__FILENAME__ = schema_registry
from django.contrib.contenttypes.models import ContentType
from django.conf import settings

from widgetry.views import search, WrapperFactory, SearchItemWrapper
from widgetry import signals as widgetry_signals


class LinkWrapper(SearchItemWrapper):
    # sub-classes should override this to provide special attributes
    special_attributes = []


    # gets default identifier, title, description and thumbnail methods
    # from SearchItemWrapper

    def block_level_item_template(self):
        return "includes/links_block_level_list_item.html"


# any fields that are to be allowed as search fields must be listed here
# unless they are defined as methods on the LinkWrapper subclass for that model
ATTRIBUTES = [
    'summary',
    'heading',
    'url',
    'get_absolute_url',
    'admin_metadata',
    'image',
    'block_level_item_template'
]


class MyWrapperFactory(WrapperFactory):
    pass


wrapper_factory = MyWrapperFactory(LinkWrapper, ATTRIBUTES)


class Registry(object):

    def __init__(self):
        self.wrappers = dict()
        self.content_types = dict()
        self.discovered = False
        # these signals make sure that whenever a widgetry function is used
        # the schemas from links are actually registered
        widgetry_signals.search_request.connect(self.discover_links_schemas)
        widgetry_signals.get_wrapper.connect(self.discover_links_schemas)

    def register(self, klasses, search_fields, **kwargs):
        # register with an autogenerated wrapper
        if not isinstance(klasses, list):
            klasses = [klasses]
        if not search_fields:
            raise Exception("link schema registration: search_fields missing")
        for klass in klasses:
            wrapper = wrapper_factory.build(
                '%sAutoGenerated' % klass.__name__,
                search_fields, kwargs
                )
            self.register_wrapper(klass, wrapper)

    def register_wrapper(self, klasses, wrapper):
        # register with a manual wrapper
        if not isinstance(klasses, list):
            klasses = [klasses]
        for klass in klasses:
            #print u"registering %s to %s" % (klass, wrapper)
            self.wrappers[klass] = wrapper
            self.content_types[klass] = ContentType.objects.get_for_model(klass)
            # also register any links with the search/autocomplete system
            if not search.is_registered(klass):
                # but only if it is not registered yet
                #print u"schema: %s is already registerd for search, not
                # adding" % klass
                search.register_wrapper(klass, wrapper)

    def get_wrapper(self, model_or_string):
        self.discover_links_schemas()
        #print "get wrapper %s" % model_or_string
        if isinstance(model_or_string, str):
            app_label, model_name = model_or_string.split('.')
            content_type = ContentType.objects.get(
                app_label=app_label,
                model=model_name
                )
            model = content_type.model_class()
        else:
            model = model_or_string
        #print "return wrapper for %s" % model
        #print self.wrappers
        if model in self.wrappers:
            wrapper = self.wrappers[model]
        else:
            wrapper = LinkWrapper
        #print "    wrapper: %s" % wrapper
        return wrapper

    def is_registered(self, model):
        self.discover_links_schemas()
        return model in self.wrappers

    def content_type_choices(self):
        self.discover_links_schemas()
        choices = [('', '----')]
        #q_obj = None
        for model_class, content_type in sorted(self.content_types.items()):
            #new_q = Q(app_label = model_class._meta.app_name, )
            choices.append((
                content_type.pk,
                u"%s: %s" % (
                    content_type.app_label.replace('_', ' '),
                    content_type.name
                    )
                ))
        return choices

    def discover_links_schemas(self, *args, **kwargs):
        '''
        run through all installed apps to find link schema definitions.
        This needs to get called rather late, because it needs access to
        models and admin
        '''
        if self.discovered:
            return
        for app in settings.INSTALLED_APPS:
            __import__(app, {}, {}, ['link_schemas'])
        self.discovered = True

schema = Registry()

########NEW FILE########
__FILENAME__ = externalsite_admin_tags
from django import template

register = template.Library()

def show_externalsite_tree_item(context, externalsite):
    if context.has_key("cl"):
        filtered = False#context['cl'].is_filtered()
    elif context.has_key('filtered'):
        filtered = context['filtered']
    context.update({'filtered':filtered, 'externalsite':externalsite})
    return context
show_externalsite_tree_item = register.inclusion_tag(
        'admin/links/externalsite/change_list_tree_items.html',
        takes_context=True)(show_externalsite_tree_item)

########NEW FILE########
__FILENAME__ = link_tags
from django import template
from django.contrib.contenttypes.models import ContentType

import re

from links.models import ObjectLink

register = template.Library()

"""
@register.inclusion_tag('links/cms_plugins/links.html', takes_context = True)
def links(context):
    # print "in links"
    #Publishes all the links attached to this object - superseded by the more complex version below
    content_object = context.get('content_object', None)
    if content_object:
        model = ContentType.objects.get_for_model(content_object)
        links = ObjectLink.objects.filter(content_type__pk=model.id, object_id = content_object.id)
        return {'links' : links,        
        }
"""

@register.tag
def get_links(parser, token):
    """
    Place {% get_links as links %} in your template.
    As long as your item is available in the template as {{ content_object }}, you'll 
    have access to any links placed on it.
    
    An as a template:
    
	{% if links %}
    	{% regroup links by wrapped_destination_obj.heading as link_types %}
    	{% for kind in link_types %}
    		<h{{ IN_BODY_HEADING_LEVEL }}>{{kind.grouper}}</h{{ IN_BODY_HEADING_LEVEL }}>
            <ul class= "none">
               	{% for link in kind.list %}
               		<li>
               			<a href = "{{ link.url }}">{% if link.text %}{{ link.text }}
               				{% else %}{{ link.destination_content_object }}
               				{% endif %}
               			</a>{% if link.include_description and link.description %}<br />{{ link.description }}{% endif %}
               		</li>
               	{% endfor %}
           </ul>
    	{% endfor %}
    {% endif %}

    should do the trick.
    
    However, it's just as simple to pass links to the context in the view.
    
    The only reason for doing it this way is to get links into the context of from a 
    view we can't easily set up ourselves, for example that of another application.
    
    There doesn't seem to be much point in using for views that we can easily edit.
    """
    try:
        tag_name, arg = token.contents.split(None, 1)
    except ValueError:
        raise template.TemplateSyntaxError, "%r tag requires arguments" % token.contents.split()[0]
    m = re.search(r'as (\w+)', arg)
    if not m:
        raise template.TemplateSyntaxError, "%r tag had invalid arguments" % tag_name
    var_name = m.groups()[0]
    return LinksNode(var_name)

class LinksNode(template.Node):
    def __init__(self, var_name):
        self.var_name = var_name
    
    def render(self, context):
        content_object = context.get('content_object', None)
        if content_object:
            model = ContentType.objects.get_for_model(content_object)
            links = ObjectLink.objects.filter(content_type__pk=model.id, object_id = content_object.id).order_by('destination_content_type')
            context[self.var_name] = links
        return ''


########NEW FILE########
__FILENAME__ = tests
from django.test import TestCase
from django import forms
from django.contrib.contenttypes.models import ContentType

from cms.models.placeholdermodel import Placeholder
from cms.api import add_plugin

from filer.models.imagemodels import Image

from links.models import Link, GenericLinkListPluginItem, CarouselPluginItem
from links.admin import check_urls

from contacts_and_people.models import (
    Site, Person, Building, Entity, Membership
    )
from contacts_and_people.tests import EntityTestObjectsMixin


class SearchTests(EntityTestObjectsMixin, TestCase):

    def test_entity_description(self):

        link_to_school = Link(
            destination_content_type=ContentType.objects.get_for_model(
                self.school
                ),
            destination_object_id=self.school.id,
            )

        self.assertEquals(link_to_school.__unicode__(), self.school.name)

        link_to_building = Link(
            destination_content_type = ContentType.objects.get_for_model(self.main_building),
            destination_object_id = self.main_building.id,
            )

        self.assertEquals(
            link_to_building.__unicode__(),
            self.main_building.__unicode__()
            )
        self.assertEquals(
            link_to_building.summary(),
            u"St Mary's Street, Cardiff"
            )

        """
        Currently autocomplete searches on description, but this isn't good enough.

        Sometimes when searching in the admin, we need to return useful information for the user, such as warnings about some of the objects.

        However, searching on the front end should not necessarily return warnings in the same way.

        So we should have an "admin_description" (or something) attribute on which to search as well.
        """
class ExternalLinkTests(TestCase):

    def test_good_url(self):
        # http://vurt.org/ should be accepted without a murmur
        self.assertEquals([], check_urls("http://vurt.org/"))

    def test_unknown_scheme(self):
        # an unknown urlscheme should raise a forms.ValidationError
        self.assertRaisesMessage(
            forms.ValidationError,
            u'Sorry, link type bogusurlscheme is not permitted. Permitted types are https, http, mailto and ftp.',
            check_urls,
            "bogusurlscheme://vurt.org/"
            )

    def test_missing_scheme(self):
        # a missing urlscheme should raise a forms.ValidationError
        self.assertRaisesMessage(
            forms.ValidationError,
            u'Please provide a complete URL, such as "http://example.com/" or "mailto:example@example.com". Permitted schemes are https, http, mailto and ftp.',
            check_urls,
            "vurt.org/"
            )

    def test_host_not_found(self):
        # a hostname we can't find should raise a forms.ValidationError
        self.assertRaisesMessage(
            forms.ValidationError,
            u'Hostname vurt.vurt.vurt.vurt.org not found. Please check that it is correct.',
            check_urls,
            "http://vurt.vurt.vurt.vurt.org/"
            )

    def test_404(self):
        # a link we can't open shouuld return a message
        self.assertDictEqual(
            check_urls("http://vurt.org/zxcvbnmmnbvcxz/")[0],
            {'message': 'Warning: the link http://vurt.org/zxcvbnmmnbvcxz/ appears not to work. Please check that it is correct.', 'level': 30}
)

    # def test_does_not_match(self):
    #     a link we can't open shouuld return a message
    #     not sure how this can be tested
    #     "Warning: your URL " + url + " doesn't match the site's, which is: " + url_test.geturl()

    def test_mail_to(self):
        # a link we can't open should return a message
        self.assertDictEqual(
            check_urls("mailto:daniele@vurt.org")[0],
            {'message': "Warning: this email address hasn't been checked. I hope it's correct.", 'level': 30}
            )



class LinkListPluginTests(EntityTestObjectsMixin, TestCase):

    def test_links_plugin_item(self):
        """
        test the output of the link set plugin
        """
        placeholder = Placeholder(slot=u"some_slot")
        placeholder.save() # a good idea, if not strictly necessary

        # add the plugin
        plugin = add_plugin(placeholder, u"LinksPlugin", u"en",
            )
        plugin.save()

        # get the corresponding plugin instance
        instance = plugin.get_plugin_instance()[1]


        # add an item to the plugin
        item1 = GenericLinkListPluginItem(
            plugin=plugin,
            destination_content_type = ContentType.objects.get_for_model(self.school),
            destination_object_id = self.school.id,
            active=False,
            )
        item1.save()
        self.assertEquals(
            instance.render({}, plugin, placeholder),
            {}
        )

        # now the item is active
        item1.active=True
        item1.save()
        self.assertEqual(
            instance.render({}, plugin, placeholder)["links"],
            [item1]
        )

        # add a second image to the plugin
        item2 = GenericLinkListPluginItem(
            plugin=plugin,
            destination_content_type = ContentType.objects.get_for_model(self.school),
            destination_object_id = self.school.id,
            )
        item2.save()
        self.assertListEqual(
            instance.render({}, plugin, placeholder)["links"],
            [item1, item2]
        )

        # now the ordering should be reversed
        item1.inline_item_ordering=1
        item1.save()
        self.assertListEqual(
            instance.render({}, plugin, placeholder)["links"],
            [item2, item1]
        )


class CarouselPluginTests(EntityTestObjectsMixin, TestCase):
    def test_carousel_plugin(self):
        """
        test the output of the link set plugin
        """
        img = Image(_width=100, _height=100)
        img.save()

        placeholder = Placeholder(slot=u"some_slot")
        placeholder.save() # a good idea, if not strictly necessary

        # add the plugin
        plugin = add_plugin(
            placeholder,
            u"CarouselPluginPublisher",
            u"en",
            width = 1000.0
        )
        plugin.save()

        # get the corresponding plugin instance
        instance = plugin.get_plugin_instance()[1]
        self.assertEquals(instance.render({}, plugin, placeholder), {})

        # add an item to the plugin
        item1 = CarouselPluginItem(
            plugin=plugin,
            destination_content_type = ContentType.objects.get_for_model(self.school),
            destination_object_id = self.school.id,
            link_title=u"item1 link title",
            active=False,
            image_id=img.id,
            )
        item1.save()
        self.assertEquals(instance.render({}, plugin, placeholder), {})

        # now the item is active
        item1.active=True
        item1.save()
        self.assertEquals(instance.render({}, plugin, placeholder), {})

        # add a second image to the plugin
        item2 = CarouselPluginItem(
            plugin=plugin,
            destination_content_type = ContentType.objects.get_for_model(self.school),
            destination_object_id = self.school.id,
            link_title=u"item1 link title",
            image_id=img.id,
            )
        item2.save()
        self.assertListEqual(
            instance.render({}, plugin, placeholder)["segments"],
            [item1, item2]
        )

        # now the ordering should be reversed
        item1.inline_item_ordering=1
        item1.save()
        rendered_plugin = instance.render({}, plugin, placeholder)
        self.assertListEqual(
            rendered_plugin["segments"],
            [item2, item1]
        )

        # check size calculations
        self.assertEqual(
            rendered_plugin["size"],
            (98,65)
        )
        # if we delete the image the items should be deleted too
        img.delete()
        self.assertEquals(instance.render({}, plugin, placeholder), {})

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls import patterns, include, url
import views

# Uncomment the next two lines to enable the admin:

urlpatterns = patterns('',
    url(
        r'^chainedselectchoices$',
        views.ChainedSelectChoices.as_view(),
        name = 'chained_select_choices'
    ),
)

########NEW FILE########
__FILENAME__ = utils
from urlparse import urlparse 
from urllib import urlopen

from django import forms
from django.contrib import messages

from links.models import ObjectLink, ExternalLink, ExternalSite, LinkType

def check_urls(url, allowed_schemes = None):
    """
    Checks and reports on a URL that might end up in the database.
    Returns a list of message dicts
    """
    message_list = []
    
    allowed_schemes = allowed_schemes or [kind.scheme for kind in LinkType.objects.all()]
    
    # parse the url and get some attributes
    purl = urlparse(url)
    scheme = purl.scheme
    
    # make sure it's a kind we allow before anything else
    if not scheme in allowed_schemes:
        permitted_schemes = (", ".join(allowed_schemes[:-1]) + " and " + allowed_schemes[-1]) if len(allowed_schemes) > 1 else allowed_schemes[0]
        if scheme:
            message = "Sorry, link type %s is not permitted. Permitted types are %s." % (scheme, permitted_schemes)
        else:
            message = 'Please provide a complete URL, such as "http://example.com/" or "mailto:example@example.com". Permitted schemes are %s.' % permitted_schemes

        raise forms.ValidationError(message)
    
    # for hypertext types only
    if str(scheme) == "http" or scheme == "https":
        # can we reach the domain?
        try:
            url_test = urlopen(url)
        except IOError:
            message = "Hostname " + purl.netloc + " not found. Please check that it is correct."
            raise forms.ValidationError(message)

        # check for a 404 (needs python 2.6)
        try:
            code = url_test.getcode()
        except AttributeError:
            message_list.append({
                "message": "Warning: I couldn't check your link %s. Please check that it works." %url, 
                "level": messages.WARNING
                })
        else:
            if code == 404:
                message_list.append({
                    "message": "Warning: the link %s appears not to work. Please check that it is correct." %url, 
                    "level": messages.WARNING
                    })
        
        # check for a redirect
        if url_test.geturl() != url:
            message_list.append({
                "message": "Warning: your URL " + url + " doesn't match the site's, which is: " + url_test.geturl(), 
                "level": messages.WARNING
                })
        
    # for mailto types only
    elif str(scheme) == "mailto":
        message_list.append({
            "message": "Warning: this email address hasn't been checked. I hope it's correct.", 
            "level": messages.WARNING
            })
            
    return message_list

def get_or_create_external_link(request, input_url, external_url, title, description=""):
    """
    When provided with candidate attributes for an ExternalLink object, will:
    * return the URL of an ExternalLink that matches
    * create an ExternalLink if there's no match, then return its URL
    """
    message_list = []
    
    if input_url or external_url:
        # run checks - doesn't return anything 
        message_list.extend(
            check_urls(input_url or external_url.url, ["https", "http"])      
            )

    if external_url:
        message_list.append({
            "message": "This is an external item: %s." % external_url.url, 
            "level": messages.INFO
            })
        
        if input_url:
            message_list.append({
                "message": "You can't have both External URL and Input URL fields, so I have ignored your Input URL.", 
                "level": messages.WARNING
                })


    elif input_url:
        if not title:
            ExternalLink.objects.get(url=input_url)
        
        # get or create the external_link based on the url
        external_url, created = ExternalLink.objects.get_or_create(url=input_url, defaults = {
            "url": input_url,
            "title": title,
            "description": description,
        })

        if created:
            message_list.append({
                "message": "A link for this item has been added to the External Links database: %s." % external_url.url, 
                "level": messages.INFO
                })

        else:
            message_list.append({
                "message": "Using existing External Link: %s." % external_url.url, 
                "level": messages.INFO
                })

    for message in message_list:
       messages.add_message(
        request,
        message["level"],
        message["message"]
        )

    return external_url

########NEW FILE########
__FILENAME__ = views
from django.utils.cache import add_never_cache_headers
import json
from django.core.serializers.json import DjangoJSONEncoder
from django.http import HttpResponse
from django.views.generic.detail import BaseDetailView
from django.contrib.contenttypes.models import ContentType
from schema_registry import schema


class ChainedSelectChoices(BaseDetailView):
    """
    View to handel the ajax request for the field options.
    """

    def get(self, request, *args, **kwargs):

        parent_value = request.GET.get("parent_value")

        wrapper = schema.wrappers[
            ContentType.objects.get(id=parent_value).model_class()
            ]

        default_choices = (
            ("title", u"Title only"),
            ("details", u"Title & summary"),
            ("details image", u"Title, summary & image"),
            )

        choices = getattr(
            wrapper,
            "link_format_choices",
            default_choices
            )

        response = HttpResponse(
            json.dumps(choices, cls=DjangoJSONEncoder),
            mimetype='application/javascript'
        )
        add_never_cache_headers(response)
        return response

########NEW FILE########
__FILENAME__ = admin
from datetime import datetime

from django import forms
from django.contrib import admin, messages
from django.contrib.admin import SimpleListFilter
from django.utils.translation import ugettext_lazy as _

from treeadmin.admin import TreeAdmin

from arkestra_utilities.admin_mixins import GenericModelAdmin, GenericModelForm, HostedByFilter, fieldsets

from links.admin import ObjectLinkInline

from models import NewsArticle, NewsSource, Event, EventType


class NewsAndEventsForm(GenericModelForm):
    # a shared form for news and events
    pass


class NewsAndEventsAdmin(GenericModelAdmin):
    exclude = ('content',)
    list_display = ('short_title', 'date', 'hosted_by',)
    list_editable = ('hosted_by',)
    related_search_fields = ['hosted_by', 'external_url',]
    prepopulated_fields = {'slug': ['title']}
    list_max_show_all = 1000
    list_per_page = 1000

# this or something like it can be enabled when the
# autocomplete-stop-sworking-after-adding-an-inlin
# bug has been addressed
# it will hugely speed up loading of news, events etc with lots of people in the m2m

# class NewsPersonInline(AutocompleteMixin, admin.TabularInline):
#     model = NewsArticle.please_contact.through
#     related_search_fields = ["person", ]
#     extra = 1
#     def _media(self):
#         return super(AutocompleteMixin, self).media
#     media = property(_media)


class NewsArticleForm(NewsAndEventsForm):
    class Meta(NewsAndEventsForm.Meta):
        model = NewsArticle

    def clean(self):
        super(NewsArticleForm, self).clean()

        # sticky_until value must be greater than (later) than date
        date = datetime.date(self.cleaned_data['date'])
        self.cleaned_data['sticky_until'] = self.cleaned_data.get('sticky_until', date)
        # if importance = 0, it's not sticky

        self.cleaned_data['sticky_until'] = self.cleaned_data['sticky_until'] or datetime.date(self.cleaned_data['date'])
        if self.cleaned_data['importance'] == 0:
            self.cleaned_data['sticky_until'] = None
        elif self.cleaned_data['sticky_until'] < datetime.date(self.cleaned_data['date']):
            self.cleaned_data['sticky_until'] = datetime.date(self.cleaned_data['date'])
        return self.cleaned_data


class NewsArticleAdmin(NewsAndEventsAdmin):
    # some general settings
    form = NewsArticleForm
    list_filter = ('date', HostedByFilter)
    read_only_fields = ('sticky_until')
    # inlines = [MembershipInline,]
    fieldset_stickiness = ('How this item should behave in lists', {'fields': ('sticky_until', 'is_sticky_everywhere',)})
    tabs = (
        ('Basic', {'fieldsets': (fieldsets["basic"], fieldsets["host"], fieldsets["image"], fieldsets["publishing_control"],),}),
        ('Date & significance', {'fieldsets': (fieldsets["date"], fieldsets["importance"], fieldset_stickiness)}),
        ('Body', {'fieldsets': (fieldsets["body"],)}),
        ('Where to Publish', {'fieldsets': (fieldsets["where_to_publish"],)}),
        ('Related people', {'fieldsets': (fieldsets["people"],)}),
        ('Links', {'inlines': [ObjectLinkInline]}),
        ('Advanced Options', {'fieldsets': (fieldsets["url"], fieldsets["slug"],)}),
        )


class EventForm(NewsAndEventsForm):
    class Meta(NewsAndEventsForm.Meta):
        model = Event

    def clean(self):
        # 1. obtain missing information from parent
        parent = self.cleaned_data['parent']
        if parent:
            # the many-to-many fields can be inherited
            m2m_fields = ['publish_to',  ] #organisers ,'enquiries', 'registration_enquiries',
            for field_name in m2m_fields:
                self.cleaned_data[field_name] = self.cleaned_data[field_name] or list(getattr(parent,field_name).all())
            # other fields
            attribute_list = ['building', 'precise_location', 'hosted_by', 'access_note']
            for field_name in attribute_list:
                self.cleaned_data[field_name] = self.cleaned_data[field_name] or getattr(parent,field_name)
            # if parent is single day event, and this one has no date set, inherit the parent's
            if not self.cleaned_data["date"]:
                if parent.single_day_event:
                    self.cleaned_data["date"] = self.cleaned_data["end_date"] = parent.date
                    self.cleaned_data["single_day_event"] = True
                    message = u"You didn't say, but I am guessing that this is a single-day event on " + unicode(self.cleaned_data["date"]) + u"."
                    messages.add_message(self.request, messages.INFO, message)
                else:
                    raise forms.ValidationError(u"I'm terribly sorry, I can't work out when this event is supposed to start. You'll have to enter that information yourself.")

        # 2. go and do the checks in the parent class
        super(EventForm, self).clean()

        # 3. check dates
        if self.cleaned_data["date"]:
            if self.cleaned_data["series"]:
                raise forms.ValidationError("An event with a start date can't also be a series of events. Please correct this.")
            elif self.cleaned_data["end_date"] == self.cleaned_data["date"]:
                self.cleaned_data["single_day_event"] = True
            elif not self.cleaned_data["end_date"]:
                self.cleaned_data["single_day_event"] = True
                message = u"You didn't enter an end date, so I have assumed this is a single-day event"
                messages.add_message(self.request, messages.INFO, message)
            elif not self.cleaned_data["single_day_event"]:
                if self.cleaned_data["end_date"] < self.cleaned_data["date"]:
                    raise forms.ValidationError('This event appears to end before it starts, which is very silly. Please correct the dates.')
                if not self.cleaned_data["start_time"] and self.cleaned_data["end_time"]:
                    self.cleaned_data["end_time"] = None
                    message = u"You didn't enter a start time, so I deleted the end time. I hope that's OK."
                    messages.add_message(self.request, messages.WARNING, message)

            if self.cleaned_data["single_day_event"]:
                self.cleaned_data["end_date"] = self.cleaned_data["date"]
                if not self.cleaned_data["start_time"]:
                    message = u"You have a lovely smile."
                    messages.add_message(self.request, messages.INFO, message)
                    self.cleaned_data["end_time"] = None
                elif self.cleaned_data["end_time"] and self.cleaned_data["end_time"] < self.cleaned_data["start_time"]:
                    raise forms.ValidationError('This event appears to end before it starts, which is very silly. Please correct the times.')

            self.cleaned_data['jumps_queue_on'] = self.cleaned_data['jumps_queue_on'] or self.cleaned_data['date']
            if self.cleaned_data['importance'] == 0:
                self.cleaned_data['jumps_queue_on'] = None
            elif self.cleaned_data['jumps_queue_on'] > self.cleaned_data['date']:
                self.cleaned_data['jumps_queue_on'] = self.cleaned_data['date']

        # an event without a start date can be assumed to be a series of events
        else:
            self.cleaned_data["series"] = True
            message = u"You didn't enter a start date, so I will assume this is a series of events."
            messages.add_message(self.request, messages.INFO, message)
            self.cleaned_data['date'] = self.cleaned_data['end_date'] = self.cleaned_data['start_time'] = self.cleaned_data['end_time'] = None
            self.cleaned_data['single_day_event'] = False
            self.cleaned_data['jumps_queue_on'] = None
            self.cleaned_data['importance'] = 0
        return self.cleaned_data

    '''
    def clean_enquiries(self):
        data = self.cleaned_data['enquiries']
        parent = self.cleaned_data['parent']
        print "cleaning enquiries: %s (%s) parent: %s (%s)" % (data,type(data), parent, type(parent))
        if not data and parent:
            print "  getting defaultdata from parent"
            data = list(parent.enquiries.all())
        return data
    '''


class EventIsSeries(SimpleListFilter):
    title = _('actual/series')
    parameter_name = 'series'

    def lookups(self, request, model_admin):
        return (
            ('actual', _('Actual')),
            ('series', _('Series')),
        )

    def queryset(self, request, queryset):
        if self.value() == 'actual':
            return queryset.filter(series=False)
        if self.value() == 'series':
            return queryset.filter(series=True)


class EventAdmin(NewsAndEventsAdmin, TreeAdmin):

    # some general settings
    form = EventForm
    filter_horizontal = (
        'please_contact',
        'publish_to',
        'registration_enquiries',
        'featuring',
        )
    ordering = ['type',]
    list_display = ('short_title', 'hosted_by', 'date')
    list_editable = ()
    list_filter = (EventIsSeries, 'date', HostedByFilter)
    save_as = True

    filter_include_ancestors = True

    # autocomplete fields
    related_search_fields = ['hosted_by','parent','building', 'external_url']


    # the tabs
    fieldset_type = ('Type', {'fields': ('type',)},)
    fieldset_building = ('Building', {'fields': ('building',)},)
    fieldset_when = ('When', {'fields': ('series', 'single_day_event', ('date', 'start_time'), ('end_date', 'end_time'))})
    fieldsets_relationships = (
        ('Parent & children', {
            'fields': ('parent', 'child_list_heading',),},),
        ('When displaying the children of this item in lists', {
            'fields': ('show_titles', 'display_series_summary',),},),
        )
    fieldset_registration = ('Registration enquiries', {'fields': ('registration_enquiries',)})
    fieldset_featuring = ('Featured people', {'fields': ('featuring',)})
    fieldset_jumpiness = ('How this item should behave in lists', {'fields': ('jumps_queue_on', 'jumps_queue_everywhere')})
    tabs = (
            ('Basic', {'fieldsets': (fieldsets["basic"], fieldset_type, fieldsets["host"], fieldsets["image"], fieldsets["publishing_control"],)}),
            ('Date & significance', {'fieldsets':
                (
                    fieldset_when,
                    fieldsets["importance"],
                    fieldset_jumpiness,)}
                    ),
            ('Location', {'fieldsets': (fieldset_building, fieldsets["location"],)}),
            ('Parent & children', {'fieldsets': fieldsets_relationships}),
            ('Body', {'fieldsets': (fieldsets["body"],)}),
            ('Where to Publish', {'fieldsets': (fieldsets["where_to_publish"],)}),
            ('People', {'fieldsets': (fieldset_featuring, fieldsets["people"], fieldset_registration)}),
            ('Links', {'inlines': (ObjectLinkInline,),}),
            ('Advanced Options', {'fieldsets': (fieldsets["url"], fieldsets["slug"],)}),
        )


class EventTypeAdmin(admin.ModelAdmin):
    pass


class NewsSourceAdmin(admin.ModelAdmin):
    pass


admin.site.register(Event,EventAdmin)
admin.site.register(NewsSource,NewsSourceAdmin)
admin.site.register(EventType,EventTypeAdmin)
admin.site.register(NewsArticle,NewsArticleAdmin)

########NEW FILE########
__FILENAME__ = cms_plugins
from django import forms
from django.utils.translation import ugettext as _

from cms.plugin_base import CMSPluginBase
from cms.plugin_pool import plugin_pool

from arkestra_utilities.generic_models import ArkestraGenericPlugin
from arkestra_utilities.generic_models import ArkestraGenericPluginForm
from arkestra_utilities.admin_mixins import AutocompleteMixin

from contacts_and_people.templatetags.entity_tags import work_out_entity

from models import NewsAndEventsPlugin, NewsArticle, Event
from lister import NewsAndEventsPluginLister

from menu import menu_dict

class NewsAndEventsPluginForm(ArkestraGenericPluginForm, forms.ModelForm):
    class Meta:
        model = NewsAndEventsPlugin


class CMSNewsAndEventsPlugin(ArkestraGenericPlugin, AutocompleteMixin, CMSPluginBase):

    model = NewsAndEventsPlugin
    name = _("News & events")
    form = NewsAndEventsPluginForm
    menu_cues = menu_dict

    fieldsets = (
        (None, {
        'fields': (('display', 'layout', 'list_format',),  ( 'format', 'order_by', 'group_dates',), 'limit_to')
    }),
        ('Advanced options', {
        'classes': ('collapse',),
        'fields': ('entity', 'heading_level', ('news_heading_text', 'events_heading_text'), ('show_previous_events', ),)
    }),
    )

    # autocomplete fields
    related_search_fields = ['entity',]

    def icon_src(self, instance):
        return "/static/plugin_icons/news_and_events.png"

    def render(self, context, instance, placeholder):
        self.entity = getattr(instance, "entity", None) or \
            work_out_entity(context, None)

        self.lister = NewsAndEventsPluginLister(
            entity=self.entity,
            display=instance.display,
            order_by=instance.order_by,
            layout=instance.layout,
            limit_to=instance.limit_to,
            item_format=instance.format,
            list_format=instance.list_format,
            # request=instance.request
            )

        context.update({
            'lister': self.lister,
            'placeholder': placeholder,
            })
        return context


plugin_pool.register_plugin(CMSNewsAndEventsPlugin)

########NEW FILE########
__FILENAME__ = feeds
from django.contrib.syndication.feeds import Feed
from django.contrib.syndication.feeds import FeedDoesNotExist
from django.core.exceptions import ObjectDoesNotExist

from news_and_events.models import NewsArticle
from contacts_and_people.models import Entity, Person

from arkestra_utilities.settings import STANDARD_FEED_ENTRY_COUNT

class LatestNewsArticles(Feed):
    title = "cardiff news"
    description = "all the cardiff news in one place"
    link = '/'
    
    title_template = 'news_and_events/feeds/entry_title.html'
    description_template = 'news_and_events/feeds/entry_description.html'
    
    def items(self):
        return NewsArticle.objects.order_by('-date')


class LatestNewsArticlesForEntity(LatestNewsArticles):
    def get_object(self, bits):
        if len(bits) != 1:
            raise ObjectDoesNotExist
        return Entity.objects.get(slug__exact=bits[0])

    def items(self, obj):
        return NewsArticle.objects.filter(publish_to=obj).order_by('-date')[:STANDARD_FEED_ENTRY_COUNT]
    
    def title(self, obj):
        return u'%s' % obj
    
    def link(self, obj):
        if not obj:
            raise FeedDoesNotExist
        return obj.get_absolute_url()
    
    def description(self, obj):
        return 'News relevant for the entity "%s"' % obj


class LatestNewsArticlesForContactPerson(LatestNewsArticles):
    def get_object(self, bits):
        if len(bits) != 1:
            raise ObjectDoesNotExist
        return Person.objects.get(slug__exact=bits[0])
    
    def items(self, obj):
        return NewsArticle.objects.filter(please_contact=obj).order_by('-date')[:STANDARD_FEED_ENTRY_COUNT]
    
    def title(self, obj):
        return u'%s' % obj
    
    def link(self, obj):
        if not obj:
            raise FeedDoesNotExist
        return obj.get_absolute_url()
    
    def description(self, obj):
        return 'News with the contact "%s"' % obj


class LatestNewsArticlesForRelatedPerson(LatestNewsArticles):
    def get_object(self, bits):
        if len(bits) != 1:
            raise ObjectDoesNotExist
        return Person.objects.get(slug__exact=bits[0])
    
    def items(self, obj):
        return NewsArticle.objects.filter(related_people=obj).order_by('-date')[:STANDARD_FEED_ENTRY_COUNT]
    
    def title(self, obj):
        return u'%s' % obj
    
    def link(self, obj):
        if not obj:
            raise FeedDoesNotExist
        return obj.get_absolute_url()
    
    def description(self, obj):
        return 'News with the the related person "%s"' % obj


########NEW FILE########
__FILENAME__ = feeds_urls
from django.conf.urls.defaults import patterns
from news_and_events import feeds

# inlcude this in your base urls.py:
# 
# feed url: /news/rss/latest/

feeds = {
    'latest': feeds.LatestNewsArticles,
    'latest_by_entity': feeds.LatestNewsArticlesForEntity,
    'latest_by_contact_person': feeds.LatestNewsArticlesForContactPerson,
    'latest_by_related_person': feeds.LatestNewsArticlesForRelatedPerson,
}

urlpatterns = patterns('',
    (r'^(?P<url>.*)/$', 'django.contrib.syndication.views.feed', {'feed_dict': feeds}),
)
########NEW FILE########
__FILENAME__ = link_schemas
# register all interesting models for search

from arkestra_utilities.output_libraries.dates import nice_date
from news_and_events import models, admin
from news_and_events.templatetags.events_tags import event_date_and_time
from links import schema, LinkWrapper

class GenericWrapper(LinkWrapper):
    special_attributes = ["is_uninformative", "external_url"]

    def get_absolute_url(self):
        return self.obj.get_absolute_url()

    def image(self):
        return self.obj.image

    def is_uninformative(self):
        return self.obj.is_uninformative

    def external_url(self):
        return self.obj.external_url

class NewsWrapper(GenericWrapper):
    search_fields = admin.NewsArticleAdmin.search_fields
    heading = "Related news"
    block_level_item_template = "arkestra/generic_list_item.html"


    def date(self):
        return nice_date(self.obj.date)

    def admin_metadata(self):
        date = nice_date(self.obj.date)
        if self.obj.published:
            status = "<strong>Published:</strong>"
        else:
            status = """
                <span class='errornote'>Not published</span>
            """
        return """
        %s %s
        """ % (status, self.date())


schema.register_wrapper([models.NewsArticle], NewsWrapper)


class EventWrapper(GenericWrapper):
    search_fields = admin.EventAdmin.search_fields
    heading = "Related events"
    block_level_item_template = "news_and_events/event_list_item.html"

    special_attributes = [
        "parent",
        "show_parent_series",
        "calculated_summary",
        "get_dates",
        "building",
        "is_uninformative",
        "informative_url",
         "external_url",
         ]

    def parent(self):
        return self.obj.parent

    def show_parent_series(self):
        return self.obj.show_parent_series

    def calculated_summary(self):
        return self.obj.calculated_summary

    def get_dates(self):
        return self.date()

    def building(self):
        return self.obj.building

    def informative_url(self):
        return self.obj.informative_url

    def date(self):
        date_dict = event_date_and_time(context=None, event=self.obj)
        return ", ".join(date_dict["date_and_time"])

    def date_heading(self):
        date_dict = event_date_and_time(context=None, event=self.obj)
        return " & ".join(date_dict["date_and_time_heading"])

    def admin_metadata(self):
        date_heading = self.date_heading().capitalize()
        if self.obj.published and date_heading:
            status = "<strong>%s:</strong>" % date_heading
        elif self.obj.published:
            status = "<strong>Event series</strong>"
        else:
            status = """
                <span class='errornote'>Not published</span>
            """
        return """
        %s %s
        """ % (status, self.date())


schema.register_wrapper([models.Event], EventWrapper)

########NEW FILE########
__FILENAME__ = lister
import operator
from datetime import datetime, timedelta

from django.db.models import Q
from django.utils.translation import ugettext_lazy as _

from arkestra_utilities.generic_lister import (
    ArkestraGenericLister, ArkestraGenericList, ArkestraGenericFilterSet
    )

from arkestra_utilities.settings import (
    NEWS_AND_EVENTS_LAYOUT, LISTER_MAIN_PAGE_LIST_LENGTH,
    AGE_AT_WHICH_ITEMS_EXPIRE, MULTIPLE_ENTITY_MODE
    )

from .models import NewsArticle, Event
import menu


class NewsList(ArkestraGenericList):
    model = NewsArticle
    heading_text = _(u"News")

    def remove_expired(self):
        # remove expired
        if AGE_AT_WHICH_ITEMS_EXPIRE:
            expiry_date = datetime.now() - \
                timedelta(days=AGE_AT_WHICH_ITEMS_EXPIRE)
            self.items = self.items.filter(date__gte=expiry_date)

    def other_items(self):
        # supply a list of links to available other items
        other_items = []

        if "archive" in self.other_item_kinds:
            other_items.append({
                "link": self.entity.get_auto_page_url("news-archive"),
                "title": "News archive",
                "count": self.archived_items.count(),
                })

        if "main" in self.other_item_kinds:
            auto_page_title = menu.menu_dict["title_attribute"]

            if not MULTIPLE_ENTITY_MODE:
                title = getattr(self.entity, auto_page_title)
            else:
                title = "%s %s" % (
                    self.entity.short_name,
                    getattr(self.entity, auto_page_title).lower()
                    )

            other_items.append({
                "link": self.entity.get_auto_page_url("news-and-events"),
                "title": title,
                "css_class": "main"
            })

        return other_items

    def re_order_by_importance(self):
        # re-order by importance as well as date
        if self.order_by == "importance/date":
            ordinary_items = []

            # split the within-date items for this entity into two sets
            sticky_items = self.items.order_by('-importance').filter(
                Q(hosted_by=self.entity) | Q(is_sticky_everywhere=True),
                sticky_until__gte=datetime.today(),
                )
            non_sticky_items = self.items.exclude(
                Q(hosted_by=self.entity) | Q(is_sticky_everywhere=True),
                sticky_until__gte=datetime.today(),
                )

            top_items = list(sticky_items)

            # now go through the non-top items, and find any that can be
            # promoted
            # get the set of dates where possible promotable items can be found
            dates = non_sticky_items.dates('date', 'day').reverse()

            for date in dates:

                # get all non-top items from this date
                possible_top_items = non_sticky_items.filter(
                    date__year=date.year,
                    date__month=date.month,
                    date__day=date.day
                    )

                # promotable items have importance > 0
                # add the promotable ones to the top items list
                top_items.extend(possible_top_items.filter(
                    Q(hosted_by=self.entity) | Q(is_sticky_everywhere=True),
                    importance__gte=1)
                    )

                # if this date set contains any unimportant items, then
                # there are no more to promote
                demotable_items = possible_top_items.exclude(
                    Q(hosted_by=self.entity) | Q(is_sticky_everywhere=True),
                    importance__gte=1
                    )
                if demotable_items.count() > 0:
                    # put those unimportant items into ordinary items
                    ordinary_items.extend(demotable_items)
                    # and stop looking for any more
                    break

            # and add everything left in non-sticky items before this date
            if dates:
                remaining_items = non_sticky_items.filter(date__lte=date)
                ordinary_items.extend(remaining_items)
                for item in top_items:
                    item.sticky = True
                    if self.item_format == "title":
                        item.importance = None
                ordinary_items.sort(
                    key=operator.attrgetter('date'),
                    reverse=True
                    )
            self.items = top_items + ordinary_items

    def build(self):
        self.items = self.model.objects.listable_objects()
        self.set_items_for_entity()
        self.archived_items = self.items
        self.remove_expired()
        self.re_order_by_importance()
        self.truncate_items()
        self.set_show_when()


class NewsListCurrent(NewsList):
    other_item_kinds = ("archive")


class NewsListPlugin(NewsList):
    def build(self):
        self.items = self.model.objects.listable_objects()
        self.set_items_for_entity()
        self.remove_expired()
        self.re_order_by_importance()  # expensive; shame it has to be here
        self.truncate_items()
        self.set_show_when()


class NewsListForPerson(NewsList):

    def build(self):
        self.items = self.model.objects.listable_objects()
        self.set_items_for_person(self)
        self.re_order_by_importance()  # expensive; shame it has to be here
        self.set_show_when()


class NewsArkestraGenericFilterSet(ArkestraGenericFilterSet):
    fields = ['date']


class NewsListArchive(NewsList):
    other_item_kinds = ("main")
    filter_set = NewsArkestraGenericFilterSet
    search_fields = [
        {
            "field_name": "text",
            "field_label": "Search title/summary",
            "placeholder": "Search",
            "search_keys": [
                "title__icontains",
                "summary__icontains",
                ],
            },
        ]

    def build(self):
        self.items = self.model.objects.listable_objects()
        self.set_items_for_entity()
        self.filter_on_search_terms()
        self.itemfilter = self.filter_set(self.items, self.request.GET)


class EventsList(ArkestraGenericList):
    model = Event
    heading_text = _(u"Events")
    item_collections = (
        "actual_events",
        "forthcoming_events",
        "previous_events"
        )
    item_template = "news_and_events/event_list_item.html"

    def build(self):
        self.items = self.model.objects.listable_objects()
        self.set_items_for_entity()
        self.create_item_collections()
        self.truncate_items()
        self.set_show_when()

    def create_item_collections(self):
        if any(
            kind in self.item_collections
            for kind in (
                "actual_events",
                "forthcoming_events",
                "previous_events"
                )):

            self.actual_events = self.items.filter(
                # an actual event is one that:
                # (either has no parent or whose parent is a series) and
                # is not a series itself
                Q(parent=None) | Q(parent__series=True),
                series=False,
                ).order_by('date', 'start_time')

            # (event starting after today) or (not a single-day
            # event and ends after today)
            forthcoming = Q(date__gte=self.now) | \
                Q(single_day_event=False, end_date__gte=self.now)

            if "forthcoming_events" in self.item_collections:
                self.forthcoming_events = self.actual_events.filter(forthcoming)

            if "previous_events" in self.item_collections:
                self.previous_events = self.actual_events.exclude(
                    forthcoming
                    ).reverse()

            self.items = getattr(self, self.item_collections[0])

    def set_items_for_person(self):
        self.items = self.items.filter(please_contact=self.person) | \
            self.items.filter(featuring=self.person)

    def set_items_for_place(self):
        self.items = self.items.filter(building=self.place)

    def other_items(self):
        other_items = []

        if "forthcoming_events" in self.other_item_kinds and self.forthcoming_events.exists():
            other_items.append({
                "link": self.entity.get_auto_page_url("events-forthcoming"),
                "title": "All forthcoming events",
                "count": self.forthcoming_events.count(),
                })

        if "previous_events" in self.other_item_kinds and self.previous_events.exists():
            other_items.append({
                "link": self.entity.get_auto_page_url("events-archive"),
                "title": "Previous events",
                "count": self.previous_events.count(),
                })

        if "main" in self.other_item_kinds:
            auto_page_title = menu.menu_dict["title_attribute"]

            if not MULTIPLE_ENTITY_MODE:
                title = getattr(self.entity, auto_page_title)
            else:
                title = "%s %s" % (
                    self.entity.short_name,
                    getattr(self.entity, auto_page_title).lower()
                    )

            other_items.append({
                "link": self.entity.get_auto_page_url("news-and-events"),
                "title": title,
                "css_class": "main"
            })

        return other_items


class EventsListCurrent(EventsList):
    item_collections = ("forthcoming_events", "previous_events")
    other_item_kinds = ("previous_events", "forthcoming_events")


class EventsListPlugin(EventsList):
    item_collections = ("forthcoming_events",)


class EventsListForPlace(EventsList):
    item_collections = ("forthcoming_events",)

    def build(self):
        self.items = self.model.objects.listable_objects()
        self.set_items_for_place()
        self.create_item_collections()
        self.truncate_items()
        self.set_show_when()


class EventsListForPerson(EventsList):
    item_collections = ("forthcoming_events",)

    def build(self):
        self.items = self.model.objects.listable_objects()
        self.set_items_for_person()
        self.create_item_collections()
        self.truncate_items()
        self.set_show_when()


class EventsArkestraGenericFilterSet(ArkestraGenericFilterSet):
    fields = ['date', 'type']


class EventsFilterList(EventsList):
    filter_set = EventsArkestraGenericFilterSet
    search_fields = [
        {
            "field_name": "text",
            "field_label": "Title/summary",
            "placeholder": "Search",
            "search_keys": [
                "title__icontains",
                "summary__icontains",
                ],
            },
        ]

    def build(self):
        self.items = self.model.objects.listable_objects()
        self.set_items_for_entity()
        self.create_item_collections()
        self.filter_on_search_terms()
        self.itemfilter = self.filter_set(self.items, self.request.GET)


class EventsListForthcoming(EventsFilterList):
    item_collections = ("forthcoming_events", "previous_events")
    other_item_kinds = ("previous_events", "main")


class EventsListArchive(EventsFilterList):
    item_collections = ("previous_events", "forthcoming_events")
    other_item_kinds = ("forthcoming_events", "main")


class NewsAndEventsCurrentLister(ArkestraGenericLister):
    listkinds = [
        ("news", NewsListCurrent),
        ("events", EventsListCurrent),
        ]
    display = "news events"
    order_by = "importance/date"
    layout = NEWS_AND_EVENTS_LAYOUT
    limit_to = LISTER_MAIN_PAGE_LIST_LENGTH


class NewsAndEventsMenuLister(ArkestraGenericLister):
    listkinds = [
        ("news", NewsListCurrent),
        ("events", EventsListCurrent),
        ]
    display = "news and events"
    limit_to = LISTER_MAIN_PAGE_LIST_LENGTH


class NewsAndEventsPluginLister(ArkestraGenericLister):
    listkinds = [
        ("news", NewsListPlugin),
        ("events", EventsListPlugin),
        ]

    def other_items(self):
        link = self.entity.get_auto_page_url(menu.menu_dict["url_attribute"])
        return [{
            "link": link,
            "title": "More %s" % self.display,
            "css_class": "main"
            }]


class NewsAndEventsPersonLister(ArkestraGenericLister):
    layout = NEWS_AND_EVENTS_LAYOUT
    listkinds = [
        ("news", NewsListForPerson),
        ("events", EventsListForPerson),
        ]
    display = "news events"


class NewsArchiveLister(ArkestraGenericLister):
    listkinds = [("news", NewsListArchive)]
    display = "news"


class EventsArchiveLister(ArkestraGenericLister):
    listkinds = [("events", EventsListArchive)]
    display = "events"


class EventsForthcomingLister(ArkestraGenericLister):
    listkinds = [("events", EventsListForthcoming)]
    display = "events"


class EventsPlaceLister(ArkestraGenericLister):
    listkinds = [("events", EventsListForPlace)]
    display = "events"

########NEW FILE########
__FILENAME__ = managers
from django.db import models
from django.db.models import Q
from django.conf import settings
from datetime import datetime
import operator

from arkestra_utilities.managers import ArkestraGenericModelManager
from arkestra_utilities.settings import MULTIPLE_ENTITY_MODE, COLLECT_TOP_ALL_FORTHCOMING_EVENTS

class NewsArticleManager(ArkestraGenericModelManager):

    def listable_objects(self):
        return self.model.objects.filter(
            published=True,
            in_lists=True,
            date__lte = datetime.now(),
            )

class EventManager(ArkestraGenericModelManager):

    # this method is not yet used, but will be used as part of the wholesale
    # rewriting of this code
    def published_items(self):
        return self.model.objects.filter(
            published=True,
            end_date__gte = datetime.now(),
            )

    def listable_published_items(self):
        return self.published_items().filter(
            in_lists=True,
            )

    # --------------------------


    def get_items(self, instance):
        self.get_events(instance) # gets previous_events, forthcoming_events, top_events, ordinary_events
        if instance.view == "archive":
            instance.events = list(instance.previous_events)
        # keep top events together where appropriate - not in long lists if COLLECT_TOP_ALL_FORTHCOMING_EVENTS is False
        elif instance.order_by == "importance/date" and (instance.view == "current" or COLLECT_TOP_ALL_FORTHCOMING_EVENTS):
            self.get_events_ordered_by_importance_and_date(instance)
            instance.events = instance.top_events + instance.ordinary_events
        else:
            instance.events = list(instance.forthcoming_events)
        return instance.events

    def get_events(self, instance):
        """
        returns forthcoming_events, previous_events, series_events
        """
        if instance.type == "for_person":
            all_events = instance.person.event_featuring.all().order_by('date', 'start_time')
        elif instance.type == "for_place":
            all_events = instance.place.event_set.all().order_by('date', 'start_time')
        # most likely, we're getting events related to an entity
        elif MULTIPLE_ENTITY_MODE and instance.entity:
            all_events = self.model.objects.filter(Q(hosted_by=instance.entity) | \
            Q(publish_to=instance.entity)).distinct().order_by('date', 'start_time')
        else:
            all_events = self.model.objects.all().order_by('date', 'start_time')

        all_events = all_events.filter(published=True, in_lists=True)

        actual_events = all_events.filter(
            # if it's (not a series and not a child) - series events are excluded, children too unless:
            # the child's parent is a series and its children can be advertised
            # tough luck if it's the child of a series and can't be advertised
            Q(series = False, parent = None) | \
            Q(parent__series = True),
            )

        instance.forthcoming_events = actual_events.filter(
            # ... and it's (a single-day event starting after today) or (not a single-day event and ends after today)
            Q(single_day_event = True, date__gte = datetime.now()) | \
            Q(single_day_event = False, end_date__gte = datetime.now())
            )

        instance.previous_events = actual_events.exclude(
            # ... and it's (a single-day event starting after today) or (not a single-day event and ends after today)
            Q(single_day_event = True, date__gte = datetime.now()) | \
            Q(single_day_event = False, end_date__gte = datetime.now())
            ).order_by('-date', '-start_time')

        instance.series_events = all_events.filter(series = True)

    def get_events_ordered_by_importance_and_date(self, instance):
        """
        When we need more than just a simple list-by-date, this keeps the top items separate
        """
        ordinary_events = []
        # split the within-date items for this entity into two sets
        actual_events = instance.forthcoming_events
        # top_events jump the queue
        top_events = actual_events.filter(
            Q(hosted_by=instance.entity) | Q(jumps_queue_everywhere = True),
            jumps_queue_on__lte=datetime.today(), jumps_queue_on__isnull=False,
            ).order_by('importance').reverse()
        # non_top events are the rest
        non_top_events = actual_events.exclude(
            Q(hosted_by=instance.entity) | Q(jumps_queue_everywhere = True),
            jumps_queue_on__lte=datetime.today(), jumps_queue_on__isnull=False,
            )

        # now we have to go through the non-top items, and find any that can be promoted to top_events
        # get the set of dates where possible promotable items can be found
        dates = non_top_events.dates('date', 'day')
        for date in dates:
            # get all non-top items from this date
            possible_top_events = non_top_events.filter(
                date = date)
            # promotable items have importance > 0
            # promote the promotable items
            list(top_events).extend(possible_top_events.filter(Q(hosted_by=instance.entity) | \
            Q(jumps_queue_everywhere = True),importance__gte = 1))
            top_events = top_events | possible_top_events.filter(Q(hosted_by=instance.entity) | \
            Q(jumps_queue_everywhere = True),importance__gte = 1)
            # if this date set contains any unimportant items, then there are no more to promote
            demotable_items = possible_top_events.exclude(Q(hosted_by=instance.entity) | \
            Q(jumps_queue_everywhere = True),importance__gte = 1)
            if demotable_items.count() > 0:
                # put those unimportant items into ordinary news
                ordinary_events = demotable_items
                # and stop looking for any more
                break
        # and everything left in non-top items after this date
        if dates:
            remaining_items = non_top_events.filter(date__gt=date)
            if ordinary_events:
                ordinary_events = ordinary_events | remaining_items
            top_events = top_events
            ordinary_events = list(ordinary_events)
            for item in top_events:
                item.sticky = True
                if instance.format == "title":
                    item.importance = None

        instance.top_events, instance.ordinary_events = list(top_events), ordinary_events


########NEW FILE########
__FILENAME__ = menu
menu_dict = {
    "auto_page_attribute": "auto_news_page",
    "title_attribute": "news_page_menu_title",
    "url_attribute": "news-and-events",
    "sub_menus": False,

    "lister_module": "news_and_events.lister",
    "lister_name": "NewsAndEventsMenuLister",
    }

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'NewsArticle'
        db.create_table('news_and_events_newsarticle', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('url', self.gf('django.db.models.fields.URLField')(max_length=200, null=True, blank=True)),
            ('external_url', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='newsarticle_item', null=True, to=orm['links.ExternalLink'])),
            ('slug', self.gf('django.db.models.fields.SlugField')(db_index=True, unique=True, max_length=60, blank=True)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('short_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('summary', self.gf('django.db.models.fields.TextField')()),
            ('published', self.gf('django.db.models.fields.BooleanField')(default=False, db_index=True)),
            ('in_lists', self.gf('django.db.models.fields.BooleanField')(default=True, db_index=True)),
            ('body', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['cms.Placeholder'], null=True)),
            ('image', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Image'], null=True, blank=True)),
            ('hosted_by', self.gf('django.db.models.fields.related.ForeignKey')(default=None, related_name='newsarticle_hosted_events', null=True, blank=True, to=orm['contacts_and_people.Entity'])),
            ('importance', self.gf('django.db.models.fields.PositiveIntegerField')(default=0, null=True)),
            ('content', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('date', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
            ('display_indefinitely', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('external_news_source', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['news_and_events.NewsSource'], null=True, blank=True)),
            ('sticky_until', self.gf('django.db.models.fields.DateField')(default=datetime.date.today, null=True, blank=True)),
            ('is_sticky_everywhere', self.gf('django.db.models.fields.BooleanField')(default=False)),
        ))
        db.send_create_signal('news_and_events', ['NewsArticle'])

        # Adding M2M table for field publish_to on 'NewsArticle'
        db.create_table('news_and_events_newsarticle_publish_to', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('newsarticle', models.ForeignKey(orm['news_and_events.newsarticle'], null=False)),
            ('entity', models.ForeignKey(orm['contacts_and_people.entity'], null=False))
        ))
        db.create_unique('news_and_events_newsarticle_publish_to', ['newsarticle_id', 'entity_id'])

        # Adding M2M table for field please_contact on 'NewsArticle'
        db.create_table('news_and_events_newsarticle_please_contact', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('newsarticle', models.ForeignKey(orm['news_and_events.newsarticle'], null=False)),
            ('person', models.ForeignKey(orm['contacts_and_people.person'], null=False))
        ))
        db.create_unique('news_and_events_newsarticle_please_contact', ['newsarticle_id', 'person_id'])

        # Adding model 'Event'
        db.create_table('news_and_events_event', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('url', self.gf('django.db.models.fields.URLField')(max_length=200, null=True, blank=True)),
            ('external_url', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='event_item', null=True, to=orm['links.ExternalLink'])),
            ('slug', self.gf('django.db.models.fields.SlugField')(db_index=True, unique=True, max_length=60, blank=True)),
            ('precise_location', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('access_note', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('short_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('summary', self.gf('django.db.models.fields.TextField')()),
            ('published', self.gf('django.db.models.fields.BooleanField')(default=False, db_index=True)),
            ('in_lists', self.gf('django.db.models.fields.BooleanField')(default=True, db_index=True)),
            ('body', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['cms.Placeholder'], null=True)),
            ('image', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Image'], null=True, blank=True)),
            ('hosted_by', self.gf('django.db.models.fields.related.ForeignKey')(default=None, related_name='event_hosted_events', null=True, blank=True, to=orm['contacts_and_people.Entity'])),
            ('importance', self.gf('django.db.models.fields.PositiveIntegerField')(default=0, null=True)),
            ('content', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('type', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['news_and_events.EventType'])),
            ('parent', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='children', null=True, to=orm['news_and_events.Event'])),
            ('series', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('show_titles', self.gf('django.db.models.fields.CharField')(default='children', max_length=25)),
            ('display_series_summary', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('child_list_heading', self.gf('django.db.models.fields.CharField')(max_length=50, null=True, blank=True)),
            ('start_date', self.gf('django.db.models.fields.DateField')(null=True, blank=True)),
            ('start_time', self.gf('django.db.models.fields.TimeField')(null=True, blank=True)),
            ('end_date', self.gf('django.db.models.fields.DateField')(null=True, blank=True)),
            ('end_time', self.gf('django.db.models.fields.TimeField')(null=True, blank=True)),
            ('single_day_event', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('building', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['contacts_and_people.Building'], null=True, blank=True)),
            ('jumps_queue_on', self.gf('django.db.models.fields.DateField')(null=True, blank=True)),
            ('jumps_queue_everywhere', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('lft', self.gf('django.db.models.fields.PositiveIntegerField')(db_index=True)),
            ('rght', self.gf('django.db.models.fields.PositiveIntegerField')(db_index=True)),
            ('tree_id', self.gf('django.db.models.fields.PositiveIntegerField')(db_index=True)),
            ('level', self.gf('django.db.models.fields.PositiveIntegerField')(db_index=True)),
        ))
        db.send_create_signal('news_and_events', ['Event'])

        # Adding M2M table for field publish_to on 'Event'
        db.create_table('news_and_events_event_publish_to', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('event', models.ForeignKey(orm['news_and_events.event'], null=False)),
            ('entity', models.ForeignKey(orm['contacts_and_people.entity'], null=False))
        ))
        db.create_unique('news_and_events_event_publish_to', ['event_id', 'entity_id'])

        # Adding M2M table for field please_contact on 'Event'
        db.create_table('news_and_events_event_please_contact', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('event', models.ForeignKey(orm['news_and_events.event'], null=False)),
            ('person', models.ForeignKey(orm['contacts_and_people.person'], null=False))
        ))
        db.create_unique('news_and_events_event_please_contact', ['event_id', 'person_id'])

        # Adding M2M table for field featuring on 'Event'
        db.create_table('news_and_events_event_featuring', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('event', models.ForeignKey(orm['news_and_events.event'], null=False)),
            ('person', models.ForeignKey(orm['contacts_and_people.person'], null=False))
        ))
        db.create_unique('news_and_events_event_featuring', ['event_id', 'person_id'])

        # Adding M2M table for field registration_enquiries on 'Event'
        db.create_table('news_and_events_event_registration_enquiries', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('event', models.ForeignKey(orm['news_and_events.event'], null=False)),
            ('person', models.ForeignKey(orm['contacts_and_people.person'], null=False))
        ))
        db.create_unique('news_and_events_event_registration_enquiries', ['event_id', 'person_id'])

        # Adding model 'EventType'
        db.create_table('news_and_events_eventtype', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('event_type', self.gf('django.db.models.fields.CharField')(max_length=50)),
        ))
        db.send_create_signal('news_and_events', ['EventType'])

        # Adding model 'NewsSource'
        db.create_table('news_and_events_newssource', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('external_news_source', self.gf('django.db.models.fields.CharField')(max_length=50)),
        ))
        db.send_create_signal('news_and_events', ['NewsSource'])

        # Adding model 'NewsAndEventsPlugin'
        db.create_table('cmsplugin_newsandeventsplugin', (
            ('cmsplugin_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['cms.CMSPlugin'], unique=True, primary_key=True)),
            ('entity', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='newsandeventsplugin_plugin', null=True, to=orm['contacts_and_people.Entity'])),
            ('layout', self.gf('django.db.models.fields.CharField')(default='sidebyside', max_length=25)),
            ('format', self.gf('django.db.models.fields.CharField')(default='details image', max_length=25)),
            ('heading_level', self.gf('django.db.models.fields.PositiveSmallIntegerField')(default=3)),
            ('order_by', self.gf('django.db.models.fields.CharField')(default='importance/date', max_length=25)),
            ('list_format', self.gf('django.db.models.fields.CharField')(default='vertical', max_length=25)),
            ('group_dates', self.gf('django.db.models.fields.BooleanField')(default=True)),
            ('limit_to', self.gf('django.db.models.fields.PositiveSmallIntegerField')(default=5, null=True, blank=True)),
            ('display', self.gf('django.db.models.fields.CharField')(default='news & events', max_length=25)),
            ('show_previous_events', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('news_heading_text', self.gf('django.db.models.fields.CharField')(default=u'News', max_length=25)),
            ('events_heading_text', self.gf('django.db.models.fields.CharField')(default=u'Events', max_length=25)),
        ))
        db.send_create_signal('news_and_events', ['NewsAndEventsPlugin'])


    def backwards(self, orm):
        
        # Deleting model 'NewsArticle'
        db.delete_table('news_and_events_newsarticle')

        # Removing M2M table for field publish_to on 'NewsArticle'
        db.delete_table('news_and_events_newsarticle_publish_to')

        # Removing M2M table for field please_contact on 'NewsArticle'
        db.delete_table('news_and_events_newsarticle_please_contact')

        # Deleting model 'Event'
        db.delete_table('news_and_events_event')

        # Removing M2M table for field publish_to on 'Event'
        db.delete_table('news_and_events_event_publish_to')

        # Removing M2M table for field please_contact on 'Event'
        db.delete_table('news_and_events_event_please_contact')

        # Removing M2M table for field featuring on 'Event'
        db.delete_table('news_and_events_event_featuring')

        # Removing M2M table for field registration_enquiries on 'Event'
        db.delete_table('news_and_events_event_registration_enquiries')

        # Deleting model 'EventType'
        db.delete_table('news_and_events_eventtype')

        # Deleting model 'NewsSource'
        db.delete_table('news_and_events_newssource')

        # Deleting model 'NewsAndEventsPlugin'
        db.delete_table('cmsplugin_newsandeventsplugin')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.page': {
            'Meta': {'ordering': "('site', 'tree_id', 'lft')", 'object_name': 'Page'},
            'changed_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'in_navigation': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'limit_visibility_in_menu': ('django.db.models.fields.SmallIntegerField', [], {'default': 'None', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'login_required': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'moderator_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '1', 'blank': 'True'}),
            'navigation_extenders': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'page_flags': ('django.db.models.fields.TextField', [], {'null': True, 'blank': True}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['cms.Page']"}),
            'placeholders': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['cms.Placeholder']", 'symmetrical': 'False'}),
            'publication_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'publication_end_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'publisher_is_draft': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'publisher_public': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'publisher_draft'", 'unique': 'True', 'null': 'True', 'to': "orm['cms.Page']"}),
            'publisher_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'reverse_id': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '40', 'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sites.Site']"}),
            'soft_root': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'template': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contacts_and_people.building': {
            'Meta': {'ordering': "('site', 'street', 'number', 'name')", 'object_name': 'Building'},
            'access_and_parking': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_access_and_parking'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'additional_street_address': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_description'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'getting_here': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'getting_here'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'latitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'longitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'map': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'postcode': ('django.db.models.fields.CharField', [], {'max_length': '9', 'null': 'True', 'blank': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Site']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'db_index': 'True', 'max_length': '255', 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'street': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {'default': "''", 'max_length': '256'}),
            'zoom': ('django.db.models.fields.IntegerField', [], {'default': '17', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.entity': {
            'Meta': {'ordering': "['tree_id', 'lft']", 'object_name': 'Entity', '_ormbases': ['contacts_and_people.EntityLite']},
            'abstract_entity': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'auto_contacts_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_news_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_publications_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_vacancies_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'blank': 'True'}),
            'building_recapitulates_entity_name': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'contacts_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contacts_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'contacts_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Contacts & people'", 'max_length': '50'}),
            'display_parent': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entitylite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.EntityLite']", 'unique': 'True', 'primary_key': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'entity_item'", 'null': 'True', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'news_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'news_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'news_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'News & events'", 'max_length': '50'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['contacts_and_people.Entity']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'publications_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Publications'", 'max_length': '50'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'db_index': 'True', 'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'vacancies_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'vacancies_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'vacancies_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Vacancies & studentships'", 'max_length': '50'}),
            'website': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'entity'", 'unique': 'True', 'null': 'True', 'to': "orm['cms.Page']"})
        },
        'contacts_and_people.entitylite': {
            'Meta': {'object_name': 'EntityLite'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'contacts_and_people.membership': {
            'Meta': {'ordering': "('-importance_to_entity', 'person__surname')", 'object_name': 'Membership'},
            'display_role': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'display_roles'", 'null': 'True', 'to': "orm['contacts_and_people.Membership']"}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'members'", 'to': "orm['contacts_and_people.Entity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'importance_to_entity': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'importance_to_person': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'key_contact': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'person': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_of'", 'to': "orm['contacts_and_people.Person']"}),
            'role': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.person': {
            'Meta': {'ordering': "['surname', 'given_name', 'user']", 'object_name': 'Person', '_ormbases': ['contacts_and_people.PersonLite']},
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'blank': 'True'}),
            'data_feed_locked': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entities': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'people'", 'to': "orm['contacts_and_people.Entity']", 'through': "orm['contacts_and_people.Membership']", 'blank': 'True', 'symmetrical': 'False', 'null': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'person_item'", 'null': 'True', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'institutional_username': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'override_entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'people_override'", 'null': 'True', 'to': "orm['contacts_and_people.Entity']"}),
            'personlite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.PersonLite']", 'unique': 'True', 'primary_key': 'True'}),
            'please_contact': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'contact_for'", 'null': 'True', 'to': "orm['contacts_and_people.Person']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'db_index': 'True', 'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'staff_id': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'person_user'", 'unique': 'True', 'null': 'True', 'to': "orm['auth.User']"})
        },
        'contacts_and_people.personlite': {
            'Meta': {'object_name': 'PersonLite'},
            'given_name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'middle_names': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'surname': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Title']", 'to_field': "'abbreviation'", 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.phonecontact': {
            'Meta': {'ordering': "('label',)", 'object_name': 'PhoneContact'},
            'area_code': ('django.db.models.fields.CharField', [], {'default': "'029'", 'max_length': '5'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'country_code': ('django.db.models.fields.CharField', [], {'default': "'44'", 'max_length': '5'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'internal_extension': ('django.db.models.fields.CharField', [], {'max_length': '6', 'null': 'True', 'blank': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '12'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'})
        },
        'contacts_and_people.site': {
            'Meta': {'ordering': "('country', 'site_name', 'post_town')", 'object_name': 'Site'},
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'description': ('django.db.models.fields.TextField', [], {'max_length': '500', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post_town': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'site_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contacts_and_people.title': {
            'Meta': {'ordering': "['title']", 'object_name': 'Title'},
            'abbreviation': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        },
        'links.externallink': {
            'Meta': {'ordering': "['title']", 'object_name': 'ExternalLink'},
            'description': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'external_site': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'to': "orm['links.LinkType']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'links.externalsite': {
            'Meta': {'ordering': "['site']", 'object_name': 'ExternalSite'},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'links.linktype': {
            'Meta': {'object_name': 'LinkType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'scheme': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'news_and_events.event': {
            'Meta': {'ordering': "['type', 'start_date', 'start_time']", 'object_name': 'Event'},
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'blank': 'True'}),
            'child_list_heading': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'display_series_summary': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'end_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'end_time': ('django.db.models.fields.TimeField', [], {'null': 'True', 'blank': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'event_item'", 'null': 'True', 'to': "orm['links.ExternalLink']"}),
            'featuring': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'event_featuring'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'hosted_by': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'related_name': "'event_hosted_events'", 'null': 'True', 'blank': 'True', 'to': "orm['contacts_and_people.Entity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'importance': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'in_lists': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'jumps_queue_everywhere': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'jumps_queue_on': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['news_and_events.Event']"}),
            'please_contact': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'event_person'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'publish_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'event_publish_to'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Entity']"}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'registration_enquiries': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'event_registration'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'series': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'short_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'show_titles': ('django.db.models.fields.CharField', [], {'default': "'children'", 'max_length': '25'}),
            'single_day_event': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'db_index': 'True', 'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'start_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'start_time': ('django.db.models.fields.TimeField', [], {'null': 'True', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['news_and_events.EventType']"}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
        },
        'news_and_events.eventtype': {
            'Meta': {'ordering': "['event_type']", 'object_name': 'EventType'},
            'event_type': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'news_and_events.newsandeventsplugin': {
            'Meta': {'object_name': 'NewsAndEventsPlugin', 'db_table': "'cmsplugin_newsandeventsplugin'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'display': ('django.db.models.fields.CharField', [], {'default': "'news & events'", 'max_length': '25'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'newsandeventsplugin_plugin'", 'null': 'True', 'to': "orm['contacts_and_people.Entity']"}),
            'events_heading_text': ('django.db.models.fields.CharField', [], {'default': "u'Events'", 'max_length': '25'}),
            'format': ('django.db.models.fields.CharField', [], {'default': "'details image'", 'max_length': '25'}),
            'group_dates': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'heading_level': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '3'}),
            'layout': ('django.db.models.fields.CharField', [], {'default': "'sidebyside'", 'max_length': '25'}),
            'limit_to': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '5', 'null': 'True', 'blank': 'True'}),
            'list_format': ('django.db.models.fields.CharField', [], {'default': "'vertical'", 'max_length': '25'}),
            'news_heading_text': ('django.db.models.fields.CharField', [], {'default': "u'News'", 'max_length': '25'}),
            'order_by': ('django.db.models.fields.CharField', [], {'default': "'importance/date'", 'max_length': '25'}),
            'show_previous_events': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'news_and_events.newsarticle': {
            'Meta': {'ordering': "['-date']", 'object_name': 'NewsArticle'},
            'body': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'display_indefinitely': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'external_news_source': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['news_and_events.NewsSource']", 'null': 'True', 'blank': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'newsarticle_item'", 'null': 'True', 'to': "orm['links.ExternalLink']"}),
            'hosted_by': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'related_name': "'newsarticle_hosted_events'", 'null': 'True', 'blank': 'True', 'to': "orm['contacts_and_people.Entity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'importance': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'in_lists': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'is_sticky_everywhere': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'please_contact': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'newsarticle_person'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'publish_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'newsarticle_publish_to'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Entity']"}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'short_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'db_index': 'True', 'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'sticky_until': ('django.db.models.fields.DateField', [], {'default': 'datetime.date.today', 'null': 'True', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
        },
        'news_and_events.newssource': {
            'Meta': {'object_name': 'NewsSource'},
            'external_news_source': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'sites.site': {
            'Meta': {'ordering': "('domain',)", 'object_name': 'Site', 'db_table': "'django_site'"},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        }
    }

    complete_apps = ['news_and_events']

########NEW FILE########
__FILENAME__ = 0002_auto__chg_field_newsandeventsplugin_entity__chg_field_event_image__chg
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Changing field 'NewsAndEventsPlugin.entity'
        db.alter_column('cmsplugin_newsandeventsplugin', 'entity_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, on_delete=models.SET_NULL, to=orm['contacts_and_people.Entity']))

        # Changing field 'Event.image'
        db.alter_column('news_and_events_event', 'image_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Image'], null=True, on_delete=models.SET_NULL))

        # Changing field 'Event.parent'
        db.alter_column('news_and_events_event', 'parent_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, on_delete=models.PROTECT, to=orm['news_and_events.Event']))

        # Changing field 'Event.type'
        db.alter_column('news_and_events_event', 'type_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['news_and_events.EventType'], on_delete=models.PROTECT))

        # Changing field 'Event.hosted_by'
        db.alter_column('news_and_events_event', 'hosted_by_id', self.gf('django.db.models.fields.related.ForeignKey')(on_delete=models.SET_DEFAULT, to=orm['contacts_and_people.Entity'], null=True))

        # Changing field 'Event.building'
        db.alter_column('news_and_events_event', 'building_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['contacts_and_people.Building'], null=True, on_delete=models.SET_NULL))

        # Changing field 'Event.external_url'
        db.alter_column('news_and_events_event', 'external_url_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, on_delete=models.PROTECT, to=orm['links.ExternalLink']))

        # Changing field 'NewsArticle.hosted_by'
        db.alter_column('news_and_events_newsarticle', 'hosted_by_id', self.gf('django.db.models.fields.related.ForeignKey')(on_delete=models.SET_DEFAULT, to=orm['contacts_and_people.Entity'], null=True))

        # Changing field 'NewsArticle.image'
        db.alter_column('news_and_events_newsarticle', 'image_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Image'], null=True, on_delete=models.SET_NULL))

        # Changing field 'NewsArticle.external_url'
        db.alter_column('news_and_events_newsarticle', 'external_url_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, on_delete=models.PROTECT, to=orm['links.ExternalLink']))

    def backwards(self, orm):

        # Changing field 'NewsAndEventsPlugin.entity'
        db.alter_column('cmsplugin_newsandeventsplugin', 'entity_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['contacts_and_people.Entity']))

        # Changing field 'Event.image'
        db.alter_column('news_and_events_event', 'image_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Image'], null=True))

        # Changing field 'Event.parent'
        db.alter_column('news_and_events_event', 'parent_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['news_and_events.Event']))

        # Changing field 'Event.type'
        db.alter_column('news_and_events_event', 'type_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['news_and_events.EventType']))

        # Changing field 'Event.hosted_by'
        db.alter_column('news_and_events_event', 'hosted_by_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['contacts_and_people.Entity']))

        # Changing field 'Event.building'
        db.alter_column('news_and_events_event', 'building_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['contacts_and_people.Building'], null=True))

        # Changing field 'Event.external_url'
        db.alter_column('news_and_events_event', 'external_url_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['links.ExternalLink']))

        # Changing field 'NewsArticle.hosted_by'
        db.alter_column('news_and_events_newsarticle', 'hosted_by_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['contacts_and_people.Entity']))

        # Changing field 'NewsArticle.image'
        db.alter_column('news_and_events_newsarticle', 'image_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Image'], null=True))

        # Changing field 'NewsArticle.external_url'
        db.alter_column('news_and_events_newsarticle', 'external_url_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['links.ExternalLink']))

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 3, 22, 0, 0)'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.page': {
            'Meta': {'ordering': "('site', 'tree_id', 'lft')", 'object_name': 'Page'},
            'changed_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'in_navigation': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'limit_visibility_in_menu': ('django.db.models.fields.SmallIntegerField', [], {'default': 'None', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'login_required': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'moderator_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '1', 'blank': 'True'}),
            'navigation_extenders': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'page_flags': ('django.db.models.fields.TextField', [], {'null': True, 'blank': True}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['cms.Page']"}),
            'placeholders': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['cms.Placeholder']", 'symmetrical': 'False'}),
            'publication_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'publication_end_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'publisher_is_draft': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'publisher_public': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'publisher_draft'", 'unique': 'True', 'null': 'True', 'to': "orm['cms.Page']"}),
            'publisher_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'reverse_id': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '40', 'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sites.Site']"}),
            'soft_root': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'template': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contacts_and_people.building': {
            'Meta': {'ordering': "('site', 'street', 'number', 'name')", 'object_name': 'Building'},
            'access_and_parking': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_access_and_parking'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'additional_street_address': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_description'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'getting_here': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'getting_here'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'latitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'longitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'map': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'postcode': ('django.db.models.fields.CharField', [], {'max_length': '9', 'null': 'True', 'blank': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'place'", 'on_delete': 'models.PROTECT', 'to': "orm['contacts_and_people.Site']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'street': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {'default': "''", 'max_length': '256'}),
            'zoom': ('django.db.models.fields.IntegerField', [], {'default': '17', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.entity': {
            'Meta': {'ordering': "['tree_id', 'lft']", 'object_name': 'Entity', '_ormbases': ['contacts_and_people.EntityLite']},
            'abstract_entity': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'auto_contacts_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_news_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_vacancies_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'building_recapitulates_entity_name': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'contacts_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contacts_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'contacts_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Contacts & people'", 'max_length': '50'}),
            'display_parent': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entitylite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.EntityLite']", 'unique': 'True', 'primary_key': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'entity_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'news_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'news_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'news_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'News & events'", 'max_length': '50'}),
            'parent': ('mptt.fields.TreeForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['contacts_and_people.Entity']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'vacancies_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'vacancies_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'vacancies_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Vacancies & studentships'", 'max_length': '50'}),
            'website': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'entity'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['cms.Page']", 'blank': 'True', 'unique': 'True'})
        },
        'contacts_and_people.entitylite': {
            'Meta': {'object_name': 'EntityLite'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'contacts_and_people.membership': {
            'Meta': {'ordering': "('-importance_to_entity', 'person__surname')", 'object_name': 'Membership'},
            'display_role': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'display_roles'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Membership']"}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'members'", 'to': "orm['contacts_and_people.Entity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'importance_to_entity': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'importance_to_person': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'key_contact': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'person': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_of'", 'to': "orm['contacts_and_people.Person']"}),
            'role': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.person': {
            'Meta': {'ordering': "['surname', 'given_name', 'user']", 'object_name': 'Person', '_ormbases': ['contacts_and_people.PersonLite']},
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'data_feed_locked': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entities': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'people'", 'to': "orm['contacts_and_people.Entity']", 'through': "orm['contacts_and_people.Membership']", 'blank': 'True', 'symmetrical': 'False', 'null': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'person_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'institutional_username': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'override_entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'people_override'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'personlite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.PersonLite']", 'unique': 'True', 'primary_key': 'True'}),
            'please_contact': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'contact_for'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Person']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'staff_id': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'person_user'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['auth.User']", 'blank': 'True', 'unique': 'True'})
        },
        'contacts_and_people.personlite': {
            'Meta': {'object_name': 'PersonLite'},
            'given_name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'middle_names': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'surname': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Title']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'})
        },
        'contacts_and_people.phonecontact': {
            'Meta': {'ordering': "('label',)", 'object_name': 'PhoneContact'},
            'area_code': ('django.db.models.fields.CharField', [], {'default': "'029'", 'max_length': '5'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'country_code': ('django.db.models.fields.CharField', [], {'default': "'44'", 'max_length': '5'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'internal_extension': ('django.db.models.fields.CharField', [], {'max_length': '6', 'null': 'True', 'blank': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '12'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'})
        },
        'contacts_and_people.site': {
            'Meta': {'ordering': "('country', 'site_name', 'post_town')", 'object_name': 'Site'},
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'description': ('django.db.models.fields.TextField', [], {'max_length': '500', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post_town': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'site_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contacts_and_people.title': {
            'Meta': {'ordering': "['title']", 'object_name': 'Title'},
            'abbreviation': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        },
        'links.externallink': {
            'Meta': {'ordering': "['title']", 'object_name': 'ExternalLink'},
            'description': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'external_site': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalSite']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['links.LinkType']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'links.externalsite': {
            'Meta': {'ordering': "['domain']", 'object_name': 'ExternalSite'},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'links.linktype': {
            'Meta': {'object_name': 'LinkType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'scheme': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'news_and_events.event': {
            'Meta': {'ordering': "['type', 'start_date', 'start_time']", 'object_name': 'Event'},
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'child_list_heading': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'display_series_summary': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'end_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'end_time': ('django.db.models.fields.TimeField', [], {'null': 'True', 'blank': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'event_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'featuring': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'event_featuring'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'hosted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'event_hosted_events'", 'on_delete': 'models.SET_DEFAULT', 'default': 'None', 'to': "orm['contacts_and_people.Entity']", 'blank': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'importance': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'in_lists': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'jumps_queue_everywhere': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'jumps_queue_on': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['news_and_events.Event']"}),
            'please_contact': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'event_person'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'publish_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'event_publish_to'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Entity']"}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'registration_enquiries': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'event_registration'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'series': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'short_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'show_titles': ('django.db.models.fields.CharField', [], {'default': "'children'", 'max_length': '25'}),
            'single_day_event': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'start_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'start_time': ('django.db.models.fields.TimeField', [], {'null': 'True', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['news_and_events.EventType']", 'on_delete': 'models.PROTECT'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
        },
        'news_and_events.eventtype': {
            'Meta': {'ordering': "['event_type']", 'object_name': 'EventType'},
            'event_type': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'news_and_events.newsandeventsplugin': {
            'Meta': {'object_name': 'NewsAndEventsPlugin', 'db_table': "'cmsplugin_newsandeventsplugin'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'display': ('django.db.models.fields.CharField', [], {'default': "'news & events'", 'max_length': '25'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'newsandeventsplugin_plugin'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'events_heading_text': ('django.db.models.fields.CharField', [], {'default': "u'Events'", 'max_length': '25'}),
            'format': ('django.db.models.fields.CharField', [], {'default': "'details image'", 'max_length': '25'}),
            'group_dates': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'heading_level': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '2'}),
            'layout': ('django.db.models.fields.CharField', [], {'default': "'sidebyside'", 'max_length': '25'}),
            'limit_to': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '5', 'null': 'True', 'blank': 'True'}),
            'list_format': ('django.db.models.fields.CharField', [], {'default': "'vertical'", 'max_length': '25'}),
            'news_heading_text': ('django.db.models.fields.CharField', [], {'default': "u'News'", 'max_length': '25'}),
            'order_by': ('django.db.models.fields.CharField', [], {'default': "'importance/date'", 'max_length': '25'}),
            'show_previous_events': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'news_and_events.newsarticle': {
            'Meta': {'ordering': "['-date']", 'object_name': 'NewsArticle'},
            'body': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'display_indefinitely': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'external_news_source': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['news_and_events.NewsSource']", 'null': 'True', 'blank': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'newsarticle_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'hosted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'newsarticle_hosted_events'", 'on_delete': 'models.SET_DEFAULT', 'default': 'None', 'to': "orm['contacts_and_people.Entity']", 'blank': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'importance': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'in_lists': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'is_sticky_everywhere': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'please_contact': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'newsarticle_person'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'publish_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'newsarticle_publish_to'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Entity']"}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'short_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'sticky_until': ('django.db.models.fields.DateField', [], {'default': 'datetime.date.today', 'null': 'True', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
        },
        'news_and_events.newssource': {
            'Meta': {'object_name': 'NewsSource'},
            'external_news_source': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'sites.site': {
            'Meta': {'ordering': "('domain',)", 'object_name': 'Site', 'db_table': "'django_site'"},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        }
    }

    complete_apps = ['news_and_events']
########NEW FILE########
__FILENAME__ = 0003_rename_event_date_field
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Renaming field 'Event.start_date'
        db.rename_column('news_and_events_event', 'start_date', 'date')

    def backwards(self, orm):
        # Renaming field 'Event.date'
        db.rename_column('news_and_events_event', 'date', 'start_date')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 7, 26, 0, 0)'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.page': {
            'Meta': {'ordering': "('site', 'tree_id', 'lft')", 'object_name': 'Page'},
            'changed_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'in_navigation': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'limit_visibility_in_menu': ('django.db.models.fields.SmallIntegerField', [], {'default': 'None', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'login_required': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'moderator_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '1', 'blank': 'True'}),
            'navigation_extenders': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'page_flags': ('django.db.models.fields.TextField', [], {'null': True, 'blank': True}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['cms.Page']"}),
            'placeholders': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['cms.Placeholder']", 'symmetrical': 'False'}),
            'publication_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'publication_end_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'publisher_is_draft': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'publisher_public': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'publisher_draft'", 'unique': 'True', 'null': 'True', 'to': "orm['cms.Page']"}),
            'publisher_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'reverse_id': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '40', 'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sites.Site']"}),
            'soft_root': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'template': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contacts_and_people.building': {
            'Meta': {'ordering': "('site', 'street', 'number', 'name')", 'object_name': 'Building'},
            'access_and_parking': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_access_and_parking'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'additional_street_address': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_description'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'getting_here': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'getting_here'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'latitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'longitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'map': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'postcode': ('django.db.models.fields.CharField', [], {'max_length': '9', 'null': 'True', 'blank': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'place'", 'on_delete': 'models.PROTECT', 'to': "orm['contacts_and_people.Site']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'street': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {'default': "''", 'max_length': '256'}),
            'zoom': ('django.db.models.fields.IntegerField', [], {'default': '17', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.entity': {
            'Meta': {'ordering': "['tree_id', 'lft']", 'object_name': 'Entity', '_ormbases': ['contacts_and_people.EntityLite']},
            'abstract_entity': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'auto_contacts_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_news_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_publications_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_vacancies_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'building_recapitulates_entity_name': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'contacts_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contacts_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'contacts_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Contacts & people'", 'max_length': '50'}),
            'display_parent': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entitylite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.EntityLite']", 'unique': 'True', 'primary_key': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'entity_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            u'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            u'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'news_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'news_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'news_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'News & events'", 'max_length': '50'}),
            'parent': ('mptt.fields.TreeForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['contacts_and_people.Entity']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'publications_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Publications'", 'max_length': '50'}),
            u'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            u'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'vacancies_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'vacancies_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'vacancies_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Vacancies & studentships'", 'max_length': '50'}),
            'website': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'entity'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['cms.Page']", 'blank': 'True', 'unique': 'True'})
        },
        'contacts_and_people.entitylite': {
            'Meta': {'object_name': 'EntityLite'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'contacts_and_people.membership': {
            'Meta': {'ordering': "('-importance_to_entity', 'person__surname')", 'object_name': 'Membership'},
            'display_role': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'display_roles'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Membership']"}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'members'", 'to': "orm['contacts_and_people.Entity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'importance_to_entity': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'importance_to_person': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'key_contact': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'person': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_of'", 'to': "orm['contacts_and_people.Person']"}),
            'role': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.person': {
            'Meta': {'ordering': "['surname', 'given_name', 'user']", 'object_name': 'Person', '_ormbases': ['contacts_and_people.PersonLite']},
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'data_feed_locked': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entities': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'people'", 'to': "orm['contacts_and_people.Entity']", 'through': "orm['contacts_and_people.Membership']", 'blank': 'True', 'symmetrical': 'False', 'null': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'person_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'institutional_username': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'override_entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'people_override'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'personlite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.PersonLite']", 'unique': 'True', 'primary_key': 'True'}),
            'please_contact': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'contact_for'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Person']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'staff_id': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'person_user'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['auth.User']", 'blank': 'True', 'unique': 'True'})
        },
        'contacts_and_people.personlite': {
            'Meta': {'object_name': 'PersonLite'},
            'given_name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'middle_names': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'surname': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Title']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'})
        },
        'contacts_and_people.phonecontact': {
            'Meta': {'ordering': "('label',)", 'object_name': 'PhoneContact'},
            'area_code': ('django.db.models.fields.CharField', [], {'default': "'029'", 'max_length': '5'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'country_code': ('django.db.models.fields.CharField', [], {'default': "'44'", 'max_length': '5'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'internal_extension': ('django.db.models.fields.CharField', [], {'max_length': '6', 'null': 'True', 'blank': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '12'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'})
        },
        'contacts_and_people.site': {
            'Meta': {'ordering': "('country', 'site_name', 'post_town')", 'object_name': 'Site'},
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'description': ('django.db.models.fields.TextField', [], {'max_length': '500', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post_town': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'site_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contacts_and_people.title': {
            'Meta': {'ordering': "['title']", 'object_name': 'Title'},
            'abbreviation': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            u'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            u'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            u'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            u'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        },
        'links.externallink': {
            'Meta': {'ordering': "['title']", 'object_name': 'ExternalLink'},
            'description': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'external_site': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalSite']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['links.LinkType']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'links.externalsite': {
            'Meta': {'ordering': "['domain']", 'object_name': 'ExternalSite'},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            u'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            u'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            u'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            u'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'links.linktype': {
            'Meta': {'object_name': 'LinkType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'scheme': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'news_and_events.event': {
            'Meta': {'ordering': "['type', 'date', 'start_time']", 'object_name': 'Event'},
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'child_list_heading': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'display_series_summary': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'end_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'end_time': ('django.db.models.fields.TimeField', [], {'null': 'True', 'blank': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'event_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'featuring': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'event_featuring'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'hosted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'event_hosted_events'", 'on_delete': 'models.SET_DEFAULT', 'default': 'None', 'to': "orm['contacts_and_people.Entity']", 'blank': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'importance': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'in_lists': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'jumps_queue_everywhere': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'jumps_queue_on': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            u'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            u'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['news_and_events.Event']"}),
            'please_contact': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'event_person'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'publish_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'event_publish_to'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Entity']"}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'registration_enquiries': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'event_registration'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            u'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'series': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'short_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'show_titles': ('django.db.models.fields.CharField', [], {'default': "'children'", 'max_length': '25'}),
            'single_day_event': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'start_time': ('django.db.models.fields.TimeField', [], {'null': 'True', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            u'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['news_and_events.EventType']", 'on_delete': 'models.PROTECT'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
        },
        'news_and_events.eventtype': {
            'Meta': {'ordering': "['event_type']", 'object_name': 'EventType'},
            'event_type': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'news_and_events.newsandeventsplugin': {
            'Meta': {'object_name': 'NewsAndEventsPlugin', 'db_table': "'cmsplugin_newsandeventsplugin'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'display': ('django.db.models.fields.CharField', [], {'default': "'news & events'", 'max_length': '25'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'newsandeventsplugin_plugin'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'events_heading_text': ('django.db.models.fields.CharField', [], {'default': "u'Events'", 'max_length': '25'}),
            'format': ('django.db.models.fields.CharField', [], {'default': "'details image'", 'max_length': '25'}),
            'group_dates': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'heading_level': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '3'}),
            'layout': ('django.db.models.fields.CharField', [], {'default': "'sidebyside'", 'max_length': '25'}),
            'limit_to': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '5', 'null': 'True', 'blank': 'True'}),
            'list_format': ('django.db.models.fields.CharField', [], {'default': "'vertical'", 'max_length': '25'}),
            'news_heading_text': ('django.db.models.fields.CharField', [], {'default': "u'News'", 'max_length': '25'}),
            'order_by': ('django.db.models.fields.CharField', [], {'default': "'importance/date'", 'max_length': '25'}),
            'show_previous_events': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'news_and_events.newsarticle': {
            'Meta': {'ordering': "['-date']", 'object_name': 'NewsArticle'},
            'body': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'display_indefinitely': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'external_news_source': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['news_and_events.NewsSource']", 'null': 'True', 'blank': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'newsarticle_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'hosted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'newsarticle_hosted_events'", 'on_delete': 'models.SET_DEFAULT', 'default': 'None', 'to': "orm['contacts_and_people.Entity']", 'blank': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'importance': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'in_lists': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'is_sticky_everywhere': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'please_contact': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'newsarticle_person'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'publish_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'newsarticle_publish_to'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Entity']"}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'short_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'sticky_until': ('django.db.models.fields.DateField', [], {'default': 'datetime.date.today', 'null': 'True', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
        },
        'news_and_events.newssource': {
            'Meta': {'object_name': 'NewsSource'},
            'external_news_source': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'sites.site': {
            'Meta': {'ordering': "('domain',)", 'object_name': 'Site', 'db_table': "'django_site'"},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        }
    }

    complete_apps = ['news_and_events']
########NEW FILE########
__FILENAME__ = 0004_auto__del_field_event_url__del_field_newsarticle_url
# -*- coding: utf-8 -*-
from south.utils import datetime_utils as datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Deleting field 'Event.url'
        db.delete_column('news_and_events_event', 'url')

        # Deleting field 'NewsArticle.url'
        db.delete_column('news_and_events_newsarticle', 'url')


    def backwards(self, orm):
        # Adding field 'Event.url'
        db.add_column('news_and_events_event', 'url',
                      self.gf('django.db.models.fields.URLField')(max_length=200, null=True, blank=True),
                      keep_default=False)

        # Adding field 'NewsArticle.url'
        db.add_column('news_and_events_newsarticle', 'url',
                      self.gf('django.db.models.fields.URLField')(max_length=200, null=True, blank=True),
                      keep_default=False)


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2014, 3, 15, 0, 0)'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.page': {
            'Meta': {'ordering': "('site', 'tree_id', 'lft')", 'object_name': 'Page'},
            'changed_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'in_navigation': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'limit_visibility_in_menu': ('django.db.models.fields.SmallIntegerField', [], {'default': 'None', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'login_required': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'moderator_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '1', 'blank': 'True'}),
            'navigation_extenders': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['cms.Page']"}),
            'placeholders': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['cms.Placeholder']", 'symmetrical': 'False'}),
            'publication_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'publication_end_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'publisher_is_draft': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'publisher_public': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'publisher_draft'", 'unique': 'True', 'null': 'True', 'to': "orm['cms.Page']"}),
            'publisher_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'reverse_id': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '40', 'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sites.Site']"}),
            'soft_root': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'template': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contacts_and_people.building': {
            'Meta': {'ordering': "('site', 'street', 'number', 'name')", 'object_name': 'Building'},
            'access_and_parking': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_access_and_parking'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'additional_street_address': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_description'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'getting_here': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'getting_here'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'latitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'longitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'map': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '10', 'blank': 'True'}),
            'postcode': ('django.db.models.fields.CharField', [], {'max_length': '9', 'null': 'True', 'blank': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'place'", 'on_delete': 'models.PROTECT', 'to': "orm['contacts_and_people.Site']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'street': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {'default': "''", 'max_length': '256'}),
            'zoom': ('django.db.models.fields.IntegerField', [], {'default': '17', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.entity': {
            'Meta': {'ordering': "['tree_id', 'lft']", 'object_name': 'Entity', '_ormbases': ['contacts_and_people.EntityLite']},
            'abstract_entity': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'auto_contacts_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_news_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_publications_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_vacancies_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'building_recapitulates_entity_name': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'contacts_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contacts_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'contacts_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Contacts & people'", 'max_length': '50'}),
            'display_parent': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entitylite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.EntityLite']", 'unique': 'True', 'primary_key': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'entity_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'news_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'news_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'news_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'News & events'", 'max_length': '50'}),
            'parent': ('mptt.fields.TreeForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['contacts_and_people.Entity']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'publications_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Publications'", 'max_length': '50'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'vacancies_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'vacancies_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'vacancies_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Vacancies & studentships'", 'max_length': '50'}),
            'website': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'entity'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['cms.Page']", 'blank': 'True', 'unique': 'True'})
        },
        'contacts_and_people.entitylite': {
            'Meta': {'object_name': 'EntityLite'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'contacts_and_people.membership': {
            'Meta': {'ordering': "('-importance_to_entity', 'person__surname')", 'object_name': 'Membership'},
            'display_role': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'display_roles'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Membership']"}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'members'", 'to': "orm['contacts_and_people.Entity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'importance_to_entity': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'importance_to_person': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'key_contact': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'person': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_of'", 'to': "orm['contacts_and_people.Person']"}),
            'role': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.person': {
            'Meta': {'ordering': "['surname', 'given_name', 'user']", 'object_name': 'Person', '_ormbases': ['contacts_and_people.PersonLite']},
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'data_feed_locked': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entities': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'people'", 'to': "orm['contacts_and_people.Entity']", 'through': "orm['contacts_and_people.Membership']", 'blank': 'True', 'symmetrical': 'False', 'null': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'person_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'institutional_username': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'override_entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'people_override'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'personlite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.PersonLite']", 'unique': 'True', 'primary_key': 'True'}),
            'please_contact': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'contact_for'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Person']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'staff_id': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'person_user'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['auth.User']", 'blank': 'True', 'unique': 'True'})
        },
        'contacts_and_people.personlite': {
            'Meta': {'object_name': 'PersonLite'},
            'given_name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'middle_names': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'surname': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Title']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'})
        },
        'contacts_and_people.phonecontact': {
            'Meta': {'ordering': "('label',)", 'object_name': 'PhoneContact'},
            'area_code': ('django.db.models.fields.CharField', [], {'default': "'029'", 'max_length': '5'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'country_code': ('django.db.models.fields.CharField', [], {'default': "'44'", 'max_length': '5'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'internal_extension': ('django.db.models.fields.CharField', [], {'max_length': '6', 'null': 'True', 'blank': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '12'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'})
        },
        'contacts_and_people.site': {
            'Meta': {'ordering': "('country', 'site_name', 'post_town')", 'object_name': 'Site'},
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'description': ('django.db.models.fields.TextField', [], {'max_length': '500', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post_town': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'site_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contacts_and_people.title': {
            'Meta': {'ordering': "['title']", 'object_name': 'Title'},
            'abbreviation': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        },
        'links.externallink': {
            'Meta': {'ordering': "['title']", 'object_name': 'ExternalLink'},
            'description': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'external_site': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalSite']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['links.LinkType']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'links.externalsite': {
            'Meta': {'ordering': "['domain']", 'object_name': 'ExternalSite'},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'links.linktype': {
            'Meta': {'object_name': 'LinkType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'scheme': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'news_and_events.event': {
            'Meta': {'ordering': "['date', 'start_time']", 'object_name': 'Event'},
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'child_list_heading': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'display_series_summary': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'end_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'end_time': ('django.db.models.fields.TimeField', [], {'null': 'True', 'blank': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'event_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'featuring': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'event_featuring'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'hosted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'event_hosted_events'", 'on_delete': 'models.SET_DEFAULT', 'default': 'None', 'to': "orm['contacts_and_people.Entity']", 'blank': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'importance': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'in_lists': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'jumps_queue_everywhere': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'jumps_queue_on': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['news_and_events.Event']"}),
            'please_contact': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'event_person'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'publish_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'event_publish_to'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Entity']"}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'registration_enquiries': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'event_registration'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'series': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'short_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'show_titles': ('django.db.models.fields.CharField', [], {'default': "'children'", 'max_length': '25'}),
            'single_day_event': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'start_time': ('django.db.models.fields.TimeField', [], {'null': 'True', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['news_and_events.EventType']", 'on_delete': 'models.PROTECT'})
        },
        'news_and_events.eventtype': {
            'Meta': {'ordering': "['event_type']", 'object_name': 'EventType'},
            'event_type': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'news_and_events.newsandeventsplugin': {
            'Meta': {'object_name': 'NewsAndEventsPlugin', 'db_table': "'cmsplugin_newsandeventsplugin'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'display': ('django.db.models.fields.CharField', [], {'default': "'news & events'", 'max_length': '25'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'newsandeventsplugin_plugin'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'events_heading_text': ('django.db.models.fields.CharField', [], {'default': "u'Events'", 'max_length': '25'}),
            'format': ('django.db.models.fields.CharField', [], {'default': "'details image'", 'max_length': '25'}),
            'group_dates': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'heading_level': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '3'}),
            'layout': ('django.db.models.fields.CharField', [], {'default': "'sidebyside'", 'max_length': '25'}),
            'limit_to': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '5', 'null': 'True', 'blank': 'True'}),
            'list_format': ('django.db.models.fields.CharField', [], {'default': "'vertical'", 'max_length': '25'}),
            'news_heading_text': ('django.db.models.fields.CharField', [], {'default': "u'News'", 'max_length': '25'}),
            'order_by': ('django.db.models.fields.CharField', [], {'default': "'importance/date'", 'max_length': '25'}),
            'show_previous_events': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'news_and_events.newsarticle': {
            'Meta': {'ordering': "['-date']", 'object_name': 'NewsArticle'},
            'body': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'display_indefinitely': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'external_news_source': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['news_and_events.NewsSource']", 'null': 'True', 'blank': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'newsarticle_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'hosted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'newsarticle_hosted_events'", 'on_delete': 'models.SET_DEFAULT', 'default': 'None', 'to': "orm['contacts_and_people.Entity']", 'blank': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'importance': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'in_lists': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'is_sticky_everywhere': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'please_contact': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'newsarticle_person'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'publish_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'newsarticle_publish_to'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Entity']"}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'short_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'sticky_until': ('django.db.models.fields.DateField', [], {'default': 'datetime.date.today', 'null': 'True', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'news_and_events.newssource': {
            'Meta': {'object_name': 'NewsSource'},
            'external_news_source': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'sites.site': {
            'Meta': {'ordering': "('domain',)", 'object_name': 'Site', 'db_table': "'django_site'"},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        }
    }

    complete_apps = ['news_and_events']
########NEW FILE########
__FILENAME__ = models
from django.utils.translation import ugettext_lazy as _
from datetime import datetime
from datetime import date as pythondate

from django.db import models
from django.db.models import Q
from django.db.models.signals import post_save
from django.template.defaultfilters import date, time, slugify

import mptt

from cms.models import CMSPlugin

from contacts_and_people.models import Person, Building


from arkestra_utilities.output_libraries.dates import nice_date
from arkestra_utilities.generic_models import ArkestraGenericPluginOptions, ArkestraGenericModel
from arkestra_utilities.mixins import URLModelMixin, LocationModelMixin
from arkestra_utilities.settings import COLLECT_TOP_ALL_FORTHCOMING_EVENTS, ARKESTRA_DATE_FORMATS, AGE_AT_WHICH_ITEMS_EXPIRE

from managers import NewsArticleManager, EventManager


class NewsAndEvents(ArkestraGenericModel, URLModelMixin):

    content = models.TextField(null=True, blank=True,
        help_text="Not used or required for external items")

    class Meta:
        abstract = True

    def save(self, *args, **kwargs):
        super(NewsAndEvents, self).save(*args, **kwargs)

    auto_page_view_name = "news-and-events"

class NewsArticle(NewsAndEvents):
    objects = NewsArticleManager()


    view_name = "news"

    date = models.DateTimeField(
        default=datetime.now,
        help_text=u"""
            Dateline for the item (the item will not be published until then
            """
            )
    display_indefinitely = models.BooleanField(
        help_text=u"Important news; it won't expire from news lists"
        )
    external_news_source = models.ForeignKey(
        'NewsSource',
        null=True,
        blank=True,
        help_text=u"If this news item is from an external source"
        )
    sticky_until = models.DateField(
        u"Featured until",
        null=True,
        blank=True,
        default=pythondate.today,
        help_text=u"Will remain a featured item until this date"
        )
    is_sticky_everywhere = models.BooleanField(
        u"Featured everywhere",
        default=False,
        help_text=u"Will be featured in other entities's news lists"
        )

    class Meta:
        ordering = ['-date']

    @property
    def has_expired(self):
       # the item is too old to appear in current lists, and should only be
       # listed in archives
       age = datetime.now() - self.date
       if AGE_AT_WHICH_ITEMS_EXPIRE and age.days > AGE_AT_WHICH_ITEMS_EXPIRE:
           return True

    @property
    def get_when(self):
        """
        get_when provides a human-readable attribute under which items can be
        grouped. Usually, this is an easily-readble rendering of the date (e.g.
        "April 2010") but it can also be "Top news", for items to be given
        special prominence.
        """
        if getattr(self, "sticky", None):
            return "Top news"
        get_when = nice_date(self.date, ARKESTRA_DATE_FORMATS["date_groups"])
        return get_when


class Event(NewsAndEvents, LocationModelMixin):
    objects = EventManager()

    view_name = "event"

    type = models.ForeignKey(
        'EventType',
        on_delete=models.PROTECT
        )
    featuring = models.ManyToManyField(
        Person,
        related_name='%(class)s_featuring',
        null=True,
        blank=True,
        help_text="The speakers, lecturers, instructors or other people featured in this event"
        )
    parent = models.ForeignKey(
        'self',
        blank=True,
        null=True,
        on_delete=models.PROTECT,
        related_name='children'
        )
    SERIES = (
        (False, u"an actual event"),
        (True, u"a series of events"),
    )
    series = models.BooleanField("This is", default=False, choices=SERIES)
    SHOW_TITLES = (
        ("series children", u"show title of series followed by title of children"),
        ("series", u"show title of series only"),
        ("children", u"show title of children only"),
    )
    show_titles = models.CharField(
        u"Titles",
        max_length = 25,
        default="children",
        choices=SHOW_TITLES,
        )
    DISPLAY_SERIES_SUMMARY = (
        (False, u"display children's summaries"),
        (True, u"display the summary for the series"),
    )
    display_series_summary = models.BooleanField(u"Summaries",
        default=False,
        choices=DISPLAY_SERIES_SUMMARY,
        )
    child_list_heading = models.CharField(
        max_length=50,
        blank=True,
        help_text= u"e.g. Conference sessions; Lectures in this series")
    date = models.DateField(
        "Start date",
        null=True,
        blank=True,
        help_text=u"Not required for a series of events"
        )
    start_time = models.TimeField(null=True, blank=True)
    end_date = models.DateField(null=True, blank=True)
    end_time = models.TimeField(null=True, blank=True)
    single_day_event = models.BooleanField(default=False)
    building = models.ForeignKey(
        Building,
        null=True, blank=True,
        on_delete=models.SET_NULL
        )
    jumps_queue_on = models.DateField(
        null=True,
        blank=True,
        help_text=u"Will become a featured item on this date"
        )
    jumps_queue_everywhere = models.BooleanField(default=False)
    registration_enquiries = models.ManyToManyField(
        Person,
        related_name = '%(class)s_registration',
        null = True, blank = True,
        help_text=u"The people who responsible for registration, if different from those in <em>Please contact</em>"
        )

    class Meta:
        ordering = ['date', 'start_time']

    @property
    def informative_url(self):
        """
        An event has an 'informative_url' if it itself is uninformative, but it
        is a child of a series
        """
        # print
        # print "========================================"
        # print "checking", self
        # print "is_uninformative", self.is_uninformative
        # print "self.parent", self.parent
        #
        if self.is_uninformative and self.parent and self.parent.series:
            # print self, "parent!"
            return self.parent.get_absolute_url()
        else:
            # print self, "self!"
            return self.get_absolute_url()

    @property
    def show_parent_series(self):
        """
        checks whether we should show the parent series too in lists
        """
        if self.parent and self.parent.series:
            return self.parent.show_titles

    @property
    def is_uninformative(self):
        # print
        # print "============================"
        # print self.body
        # if self.body:
        #     print 1, self.body.cmsplugin_set.all()
        #     print 2, self.external_url
        #     print 3, self.please_contact.all()
        #     print 4, self.registration_enquiries.all()
        # print "----------------------------"
        if self.body and self.body.cmsplugin_set.all() or self.external_url or self.please_contact.all() or self.registration_enquiries.all(): # or self.links_set.all():
            # print "uninformative"
            return False
        else:
            # print "informative"
            return True

    def save(self):
        def slug_is_bad(self):
            if self.slug in [slug.values()[0] for slug in Event.objects.exclude(id=self.id).values("slug")]:
                return True

        if self.slug == "" or slug_is_bad(self):
            self.slug=slugify(self.short_title)
        if slug_is_bad(self):
            suffix = slugify(date(self.date, "Y"))
            if not suffix in self.slug:
                self.slug = self.slug + "-" + suffix
                # print "adding suffix:", suffix, self.slug
        if slug_is_bad(self):
            suffix = slugify(date(self.date, "F"))
            if not suffix in self.slug:
                self.slug = self.slug + "-" + suffix
                # print "adding suffix:", suffix, self.slug
        if slug_is_bad(self):
            suffix = slugify(date(self.date, "d"))
            if not suffix in self.slug:
                self.slug = self.slug + "-" + suffix
                # print "adding suffix:", suffix, self.slug
        while slug_is_bad(self):
            self.slug=self.slug + "-x"
            # print "adding suffix:", "-x"
        super(Event, self).save()

    def get_children_forthcoming(self):
        if self.series:
            return self.children.filter(
                Q(date__gte = datetime.now()) |
                Q(end_date__gte = datetime.now()) |
                Q(series = True)
            ).order_by('date')
        else:
            return self.children.all()

    def get_children_previous(self):
        if self.series:
            return self.children.filter(
                Q(date__lt = datetime.now()) |
                Q(end_date__lt = datetime.now()) |
                Q(series = True)
            ).order_by('-date'
        )

    def get_featuring(self, featuring = None):
        featuring = set(self.featuring.all()) or set()
        if not self.series:
            for child_event in self.children.all():
                featuring.update(child_event.get_featuring(featuring))
        return featuring

    def get_date_if_needed_and_time_heading(self):
        date_time_heading = []
        if not self.series:
            if not self.parent.single_day_event:
                date_time_heading.append("date")
            if self.get_times():
                date_time_heading.append("time")
        return date_time_heading

    def get_date_if_needed_and_time(self):
        date_and_time = []
        date = self.get_dates()
        time = self.get_times()
        if self.parent and self.parent.single_day_event and not time:
            date_and_time.append(date)
        if time:
            date_and_time.append(time)
        return date_and_time

    def get_dates(self):
        if not self.series:
            date = self.date
            end_date = self.end_date
            if not end_date or self.single_day_event:
                end_date = date
            date_format = end_date_format = ARKESTRA_DATE_FORMATS["not_this_year"]
            now = datetime.now()
            if date.year == end_date.year:            # start and end in the same year, so:
                date_format = ARKESTRA_DATE_FORMATS["not_this_month"]                  # start format example: "3rd May"
                if date.month == end_date.month:      # start and end in the same month, so:
                    date_format = ARKESTRA_DATE_FORMATS["this_month"]                # start format example: "21st"
                if end_date.year == now.year:               # they're both this year, so:
                    end_date_format = ARKESTRA_DATE_FORMATS["not_this_month"]                # end format example: "23rd May"
            if self.single_day_event:
                dates = nice_date(date, end_date_format)
            else:
                dates = nice_date(date, date_format) + unicode(_(u" to ")) + nice_date(end_date, end_date_format)
            return dates
        else:
            return "Series"

    def get_times(self):
        start_time = self.start_time
        if self.single_day_event and start_time:
            end_time = self.end_time
            if end_time:
                times = time(start_time) + "&#8209;" + time(end_time)
            else:
                times = time(start_time)
            return times

    def get_image(self):
        return self.image or (self.parent.get_image() if self.parent else None)

    def check_date(self):
        # we need somehow to send a message to the user about this
        if not self.children.all():
            return
        else:
            for child in self.children.all():
                need_to_save = False
                child.check_date()
                if child.date and not self.series:
                    child.check_date()
                    # we start at the leaves and work backwards, so we can
                    # assume all descendants are OK
                    if (not self.date) or (self.date > child.date):
                        self.date = child.date
                        need_to_save = True
                    if not self.end_date:
                        self.end_date = self.date
                    child_end_date = child.end_date
                    if not child_end_date:
                        child_end_date = child.date
                    if  self.end_date < child_end_date:
                        self.end_date = child_end_date
                        need_to_save = True
                    if need_to_save:
                        self.single_day_event = False
                        self.save()
        return

    def apply_parent_attributes(self): # is this required?
        print "we're in event.apply_parent_attributes - the question is why"
        if self.parent:
            self.enquiries = set(self.parent.enquiries.all())
            self.save()
        return

    @property
    def calculated_summary(self):
        if self.parent and self.parent.display_series_summary:
            return self.parent.summary
        else:
            return self.summary

    @property
    def get_when(self):
        if self.date:
            if getattr(self, "sticky", None):
                return "Top events"

            #return self.date
            #now = datetime.now()
            date_format = "F Y" # Aikido Cardiff version
            # date_format = "F Y" # standard version
            #if self.date.year == now.year:               # they're both this year, so:
            #    date_format = "F"                # end format example: "23rd May"
            return date(self.date, date_format)
            #This is the old method of grouping items
            #diff = self.date - datetime.now().date()
            #tddict = {999999999: 'Next month & beyond', 31:'This month', 7: 'This week', }
            #tdlist = sorted(tddict.keys())
            #when_heading =  tddict[tdlist[bisect.bisect(tdlist, diff.days)]]
            #return when_heading
        elif self.series:
            return "Regular events"

    def get_admin_title(self):
        return self.title + " (" + self.get_dates() + ")"


class EventType(models.Model):
    event_type = models.CharField(max_length=50)

    class Meta:
        ordering = ['event_type']

    def __unicode__(self):
        return self.event_type


class NewsSource(models.Model):
    external_news_source = models.CharField(max_length=50)

    def __unicode__(self):
        return self.external_news_source


def receiver_function(sender, **kwargs):
    event = kwargs['instance']
    event.get_root().check_date()

post_save.connect(receiver_function, sender = Event)


class NewsAndEventsPlugin(CMSPlugin, ArkestraGenericPluginOptions):
    DISPLAY = (
        ("news & events", u"News and events"),
        ("news", u"News only"),
        ("events", u"Events only"),
        )
    display = models.CharField(
        "Show",
        max_length=25,
        choices=DISPLAY,
        default="news & events"
        )
    show_previous_events = models.BooleanField()
    news_heading_text = models.CharField(max_length=25, default=_(u"News"))
    events_heading_text = models.CharField(max_length=25, default=_(u"Events"))

try:
    mptt.register(Event)
except mptt.AlreadyRegistered:
    pass

########NEW FILE########
__FILENAME__ = events_tags
from django import template

register = template.Library()

@register.inclusion_tag('event_date_and_time.html', takes_context = True)
def event_date_and_time(context=None, event=None, date_time_info = None):
    date_and_time_heading = []
    date_and_time = []
    if not event:
        event = context.get('event')
    if not event.series:
        dates = event.get_dates()
        if dates and (date_time_info != "no_dates" or event.parent.series or not event.parent.single_day_event):
            date_and_time_heading.append("date")
            date_and_time.append(dates)
        times = event.get_times()
        if times and date_time_info != "no_times":
            date_and_time_heading.append("time")
            date_and_time.append(times)
    return {
        'event': event,
        'date_and_time_heading': date_and_time_heading,
        'date_and_time': date_and_time,
    }

########NEW FILE########
__FILENAME__ = event_admin_tags
from django import template

register = template.Library()

def show_event_tree_item(context, event):
    if context.has_key("cl"):
        filtered = False#context['cl'].is_filtered()
    elif context.has_key('filtered'):
        filtered = context['filtered']
    context.update({'filtered':filtered, 'event':event})
    return context

show_event_tree_item = register.inclusion_tag(
        'admin/news_and_events/event/change_list_tree_items.html',
        takes_context=True)(show_event_tree_item)

########NEW FILE########
__FILENAME__ = news_and_events_tags
from django import template
from news_and_events.models import NewsAndEventsPlugin
# from entity_tags import work_out_entity
from news_and_events.cms_plugins import CMSNewsAndEventsPlugin

#from django.template.defaultfilters import date

register = template.Library()
    
@register.inclusion_tag('arkestra/universal_plugin_lister.html', takes_context=True)
def news_and_events(context, display="news-and-events", heading=3,
        format="details", current_or_archive="current", max_items=None,
        order_by="importance/date", entity=None):
    """
    Depends on Cardiff's row/column CSS
    Publishes a date-ordered list of news and events
    """
    instance = NewsAndEventsPlugin()
    if not entity:
        entity = work_out_entity(context, entity)
    instance.order_by = order_by
    instance.entity = entity
    instance.heading_level = heading
    instance.display = display
    instance.limit_to = max_items
    instance.format = format
    instance.layout = "sidebyside"
    instance.current_or_archive = current_or_archive
    instance.show_more_items = False # because we know that these hardcoded lists don't require it
    CMSNewsAndEventsPlugin().render(context, instance, None)
    return context
    
@register.inclusion_tag('arkestra/universal_plugin_lister.html', takes_context=True)
def person_events(context):
    """
    Depends on Cardiff's row/column CSS
    Publishes a date-ordered list of news and events
    """
    instance = NewsAndEventsPlugin()
    instance.type = "for_person"
    instance.heading_level = 3
    instance.display = "events"
    instance.view = "all_forthcoming"
    instance.order_by = "date"
    instance.format = "details"
    instance.show_images = False
    instance.person = context["person"]
    # get_news_and_events(instance)
    CMSNewsAndEventsPlugin().render(context, instance, None)
    return context
    

@register.inclusion_tag('arkestra/universal_plugin_lister.html', takes_context=True)
def place_events(context):
    """
    Depends on Cardiff's row/column CSS
    Publishes a date-ordered list of news and events
    """
    instance = NewsAndEventsPlugin()
    instance.type = "for_place"
    instance.display = "events"
    instance.view = "current"
    instance.order_by = "date"
    instance.format = "details"
    instance.show_images = False
    instance.limit_to = None
    instance.show_venue = False
    instance.place = context["place"]
    # get_news_and_events(instance)
    CMSNewsAndEventsPlugin().render(context, instance, None)
    return context
    
@register.inclusion_tag('event_index.html', takes_context=True)
def event_index(context):
    """
    """
    index_items = context["news_and_events"].events_index_items
    return {
        "index_items": index_items,
        "indexer": "date.year",
        }

########NEW FILE########
__FILENAME__ = news_tags
from django import template
# from entity_tags import entity_for_page, work_out_entity
from datetime import datetime

register = template.Library()

@register.inclusion_tag('newslist.html', takes_context=True)
def news(context, format="all_info", max_items=20, entity=None):
    """
    Publishes a date-ordered list of news items
    """
    if not entity:
        entity = work_out_entity(context, entity)
    return {
        'entity': entity,
        'news': entity.newsarticle_set.filter(date__lte=datetime.now())[0: max_items],
        'format': format,
    }

@register.inclusion_tag('newslist.html', takes_context=True)
def news_for_this_page(context, max_items):    
    request=context['request']
    page = request.current_page
    entity = entity_for_page(page)
    if entity:
        return {
            'news': entity.newsarticle_set.all()[0:max_items],
        }
    else:    
        return {
            'news': "No news is good news",
        }

########NEW FILE########
__FILENAME__ = tests
from datetime import datetime, timedelta

from django.test import TestCase
from django.test.client import Client
from django.test.utils import override_settings

from django.conf import settings
from django.core.urlresolvers import resolve, reverse
from django.contrib.auth.models import User
from django.http import HttpRequest, QueryDict

from cms.api import create_page

from news_and_events.models import NewsArticle, Event
from news_and_events.lister import (
    NewsAndEventsPluginLister, NewsList, NewsListArchive,
    EventsList, EventsFilterList
    )
from contacts_and_people.models import Entity, Person, Building, Site


@override_settings(USE_TZ=False)
class NewsTests(TestCase):
    def setUp(self):
        # create a news item
        self.tootharticle = NewsArticle(
            title="All about teeth",
            slug="all-about-teeth",
            date=datetime.now(),
            )

    def test_generic_attributes(self):
        self.tootharticle.save()
        # the item has no informative content
        self.assertEqual(self.tootharticle.is_uninformative, True)

        # no Entities in the database, so this can't be hosted_by anything
        self.assertEqual(self.tootharticle.hosted_by, None)

        #  no Entities in the database, so default to settings's template
        self.assertEqual(
            self.tootharticle.get_template,
            settings.CMS_TEMPLATES[0][0]
            )

    def test_date_related_attributes(self):
        self.tootharticle.date = datetime(year=2012, month=12, day=12)
        self.assertEqual(self.tootharticle.get_when, "December 2012")

    def test_link_to_more(self):
        self.assertEqual(
            self.tootharticle.auto_page_view_name,
            "news-and-events"
            )
        self.tootharticle.hosted_by = Entity(slug="slug")
        self.assertEqual(
            self.tootharticle.link_to_more(),
            "/news-and-events/slug/"
            )


@override_settings(CMS_TEMPLATES=(('null.html', "Null"),))
class NewsEventsItemsViewsTests(TestCase):
    def setUp(self):
        # create a news item
        self.tootharticle = NewsArticle(
            title="All about teeth",
            slug="all-about-teeth"
            )

        self.adminuser = User.objects.create_user(
            'arkestra',
            'arkestra@example.com',
            'arkestra'
            )
        self.adminuser.is_staff = True
        self.adminuser.save()

    # news article tests
    def test_unpublished_newsarticle_404(self):
        self.tootharticle.save()

        # Issue a GET request.
        response = self.client.get('/news/all-about-teeth/')

        # Check that the response is 404 because it's not published
        self.assertEqual(response.status_code, 404)

    def test_unpublished_newsarticle_200_for_admin(self):
        self.tootharticle.save()

        # log in a staff user
        self.client.login(username='arkestra', password='arkestra')
        response = self.client.get('/news/all-about-teeth/')
        self.assertEqual(response.status_code, 200)

    def test_published_newsarticle_200_for_everyone(self):
        self.tootharticle.published = True
        self.tootharticle.save()

        # Check that the response is 200 OK.
        response = self.client.get('/news/all-about-teeth/')
        self.assertEqual(response.status_code, 200)

    def test_published_newsarticle_context(self):
        self.tootharticle.published = True
        self.tootharticle.save()
        response = self.client.get('/news/all-about-teeth/')
        self.assertEqual(response.context['newsarticle'], self.tootharticle)


class ResolveURLsTests(TestCase):
    def test_resolve_news_and_events_base_entity(self):
        resolver = resolve('/news-and-events/')
        self.assertEqual(resolver.view_name, "news-and-events")

    def test_resolve_news_and_events_named_entity(self):
        resolver = resolve('/news-and-events/slug/')
        self.assertEqual(resolver.view_name, "news-and-events")

    def test_resolve_news_archive_base_entity(self):
        resolver = resolve('/news-archive/')
        self.assertEqual(resolver.view_name, "news-archive")

    def test_resolve_news_archive_named_entity(self):
        resolver = resolve('/news-archive/slug/')
        self.assertEqual(resolver.view_name, "news-archive")

    def test_resolve_events_archive_base_entity(self):
        resolver = resolve('/previous-events/')
        self.assertEqual(resolver.view_name, "events-archive")

    def test_resolve_events_archive_named_entity(self):
        resolver = resolve('/previous-events/slug/')
        self.assertEqual(resolver.view_name, "events-archive")

    def test_resolve_events_forthcoming_base_entity(self):
        resolver = resolve('/forthcoming-events/')
        self.assertEqual(resolver.view_name, "events-forthcoming")

    def test_resolve_events_forthcoming_named_entity(self):
        resolver = resolve('/forthcoming-events/slug/')
        self.assertEqual(resolver.view_name, "events-forthcoming")


class ReverseURLsTests(TestCase):
    def test_newsarticle_reverse_url(self):
        self.assertEqual(
            reverse("news", kwargs={"slug": "all-about-teeth"}),
            "/news/all-about-teeth/"
            )

    def test_event_reverse_url(self):
        self.assertEqual(
            reverse("event", kwargs={"slug": "all-about-teeth"}),
            "/event/all-about-teeth/"
            )

    def test_news_archive_base_reverse_url(self):
        self.assertEqual(
            reverse("news-archive"),
            "/news-archive/"
            )

    def test_news_archive_slug_reverse_url(self):
        self.assertEqual(
            reverse("news-archive", kwargs={"slug": "some-slug"}),
            "/news-archive/some-slug/"
            )

    def test_previous_events_base_reverse_url(self):
        self.assertEqual(
            reverse("events-archive"),
            "/previous-events/"
            )

    def test_previous_events_reverse_url(self):
        self.assertEqual(
            reverse("events-archive", kwargs={"slug": "some-slug"}),
            "/previous-events/some-slug/"
            )

    def test_forthcoming_events_base_reverse_url(self):
        self.assertEqual(
            reverse("events-forthcoming"),
            "/forthcoming-events/"
            )

    def test_forthcoming_events_reverse_url(self):
        self.assertEqual(
            reverse("events-forthcoming", kwargs={"slug": "some-slug"}),
            "/forthcoming-events/some-slug/"
            )

    def test_base_reverse_url(self):
        self.assertEqual(
            reverse("news-and-events"),
            "/news-and-events/"
            )

    def test_reverse_url(self):
        self.assertEqual(
            reverse("news-and-events", kwargs={"slug": "some-slug"}),
            "/news-and-events/some-slug/"
            )


@override_settings(CMS_TEMPLATES=(('null.html', "Null"),))
class NewsEventsEntityPagesViewsTests(TestCase):
    def setUp(self):
        # Every test needs a client.
        self.client = Client()

        home_page = create_page(
            "School home page",
            "null.html",
            "en",
            published=True
            )

        self.school = Entity(
            name="School of Medicine",
            slug="medicine",
            auto_news_page=True,
            website=home_page
            )

    # entity news and events URLs - has news and events pages
    def test_main_url(self):
        self.school.save()
        response = self.client.get('/news-and-events/')
        self.assertEqual(response.status_code, 200)

    def test_entity_url(self):
        self.school.save()
        response = self.client.get('/news-and-events/medicine/')
        self.assertEqual(response.status_code, 200)

    def test_bogus_entity_url(self):
        self.school.save()
        response = self.client.get('/news-and-events/xxxx/')
        self.assertEqual(response.status_code, 404)

    def test_main_archive_url(self):
        self.school.save()
        response = self.client.get('/news-archive/')
        self.assertEqual(response.status_code, 200)

    def test_entity__news_archive_url(self):
        self.school.save()
        response = self.client.get('/news-archive/medicine/')
        self.assertEqual(response.status_code, 200)

    def test_bogus_entity_news_archive_url(self):
        self.school.save()
        response = self.client.get('/news-archive/xxxx/')
        self.assertEqual(response.status_code, 404)

    def test_main_previous_events_url(self):
        self.school.save()
        response = self.client.get('/previous-events/')
        self.assertEqual(response.status_code, 200)

    def test_entity_previous_events_url(self):
        self.school.save()
        response = self.client.get('/previous-events/medicine/')
        self.assertEqual(response.status_code, 200)

    def test_bogus_entity_events_archive_url(self):
        self.school.save()
        response = self.client.get('/previous-events/xxxx/')
        self.assertEqual(response.status_code, 404)

    def test_main_forthcoming_events_url(self):
        self.school.save()
        response = self.client.get('/forthcoming-events/')
        self.assertEqual(response.status_code, 200)

    def test_entity_forthcoming_events_url(self):
        self.school.save()
        response = self.client.get('/forthcoming-events/medicine/')
        self.assertEqual(response.status_code, 200)

    def test_bogus_entity_forthcoming_events_url(self):
        self.school.save()
        response = self.client.get('/forthcoming-events/xxx/')
        self.assertEqual(response.status_code, 404)

    # entity news and events URLs - no news and events pages
    def test_no_auto_page_main_url(self):
        self.school.auto_news_page = False
        self.school.save()
        response = self.client.get('/news-and-events/')
        self.assertEqual(response.status_code, 404)

    def test_no_auto_page_entity_url(self):
        self.school.auto_news_page = False
        self.school.save()
        response = self.client.get('/news-and-events/medicine/')
        self.assertEqual(response.status_code, 404)

    def test_no_auto_page_bogus_entity_url(self):
        self.school.auto_news_page = False
        self.school.save()
        response = self.client.get('/news-and-events/xxxx/')
        self.assertEqual(response.status_code, 404)

    def test_no_auto_page_main_archive_url(self):
        self.school.auto_news_page = False
        self.school.save()
        response = self.client.get('/news-archive/')
        self.assertEqual(response.status_code, 404)

    def test_no_auto_page_entity__news_archive_url(self):
        self.school.auto_news_page = False
        self.school.save()
        response = self.client.get('/news-archive/medicine/')
        self.assertEqual(response.status_code, 404)

    def test_no_auto_page_bogus_entity_news_archive_url(self):
        self.school.auto_news_page = False
        self.school.save()
        response = self.client.get('/news-archive/xxxx/')
        self.assertEqual(response.status_code, 404)

    def test_no_auto_page_main_previous_events_url(self):
        self.school.auto_news_page = False
        self.school.save()
        response = self.client.get('/previous-events/')
        self.assertEqual(response.status_code, 404)

    def test_no_auto_page_entity_previous_events_url(self):
        self.school.auto_news_page = False
        self.school.save()
        response = self.client.get('/previous-events/medicine/')
        self.assertEqual(response.status_code, 404)

    def test_no_auto_page_bogus_entity_events_archive_url(self):
        self.school.auto_news_page = False
        self.school.save()
        response = self.client.get('/previous-events/xxxx/')
        self.assertEqual(response.status_code, 404)

    def test_no_auto_page_main_forthcoming_events_url(self):
        self.school.auto_news_page = False
        self.school.save()
        response = self.client.get('/forthcoming-events/')
        self.assertEqual(response.status_code, 404)

    def test_no_auto_page_entity_forthcoming_events_url(self):
        self.school.auto_news_page = False
        self.school.save()
        response = self.client.get('/forthcoming-events/medicine/')
        self.assertEqual(response.status_code, 404)

    def test_no_auto_page_bogus_entity_forthcoming_events_url(self):
        self.school.auto_news_page = False
        self.school.save()
        response = self.client.get('/forthcoming-events/xxx/')
        self.assertEqual(response.status_code, 404)

    # entity news and events URLs - no entity home page
    def test_no_entity_home_page_main_url(self):
        self.school.website = None
        self.school.save()
        response = self.client.get('/news-and-events/')
        self.assertEqual(response.status_code, 404)

    def test_no_entity_home_page_entity_url(self):
        self.school.website = None
        self.school.save()
        response = self.client.get('/news-and-events/medicine/')
        self.assertEqual(response.status_code, 404)

    def test_no_entity_home_page_bogus_entity_url(self):
        self.school.website = None
        self.school.save()
        response = self.client.get('/news-and-events/xxxx/')
        self.assertEqual(response.status_code, 404)

    def test_no_entity_home_page_main_archive_url(self):
        self.school.website = None
        self.school.save()
        response = self.client.get('/news-archive/')
        self.assertEqual(response.status_code, 404)

    def test_no_entity_home_page_entity__news_archive_url(self):
        self.school.website = None
        self.school.save()
        response = self.client.get('/news-archive/medicine/')
        self.assertEqual(response.status_code, 404)

    def test_no_entity_home_page_bogus_entity_news_archive_url(self):
        self.school.website = None
        self.school.save()
        response = self.client.get('/news-archive/xxxx/')
        self.assertEqual(response.status_code, 404)

    def test_no_entity_home_page_main_previous_events_url(self):
        self.school.website = None
        self.school.save()
        response = self.client.get('/previous-events/')
        self.assertEqual(response.status_code, 404)

    def test_no_entity_home_page_entity_previous_events_url(self):
        self.school.website = None
        self.school.save()
        response = self.client.get('/previous-events/medicine/')
        self.assertEqual(response.status_code, 404)

    def test_no_entity_home_page_bogus_entity_events_archive_url(self):
        self.school.website = None
        self.school.save()
        response = self.client.get('/previous-events/xxxx/')
        self.assertEqual(response.status_code, 404)

    def test_no_entity_home_page_main_forthcoming_events_url(self):
        self.school.website = None
        self.school.save()
        response = self.client.get('/forthcoming-events/')
        self.assertEqual(response.status_code, 404)

    def test_no_entity_home_page_entity_forthcoming_events_url(self):
        self.school.website = None
        self.school.save()
        response = self.client.get('/forthcoming-events/medicine/')
        self.assertEqual(response.status_code, 404)

    def test_no_entity_home_page_bogus_entity_forthcoming_events_url(self):
        self.school.website = None
        self.school.save()
        response = self.client.get('/forthcoming-events/xxx/')
        self.assertEqual(response.status_code, 404)


class NewsListTests(TestCase):
    def setUp(self):
        self.item1 = NewsArticle(
            title="newer, less important",
            in_lists=True,
            published=True,
            date=datetime.now()
            )
        self.item1.save()

        self.item2 = NewsArticle(
            title="older, more important",
            in_lists=True,
            published=True,
            date=datetime.now()-timedelta(days=200),
            importance=3,
            slug="item2"
            )
        self.item2.save()

        self.itemlist = NewsList()
        self.itemlist.items = NewsArticle.objects.all()

    def test_all_items_order(self):
        # check we have both items in items
        self.assertEqual(
            list(self.itemlist.items),
            [self.item1, self.item2]
            )

    def test_remove_expired(self):
        # check that the expired item has been removed
        self.itemlist.remove_expired()

        self.assertItemsEqual(
            self.itemlist.items,
            [self.item1]
            )

    def test_reorder_by_importance_date_only(self):
        # check the re-ordered items are not changed
        self.itemlist.re_order_by_importance()
        self.assertEqual(
            list(self.itemlist.items),
            [self.item1, self.item2]
            )

    def test_reorder_by_importance_date_and_importance(self):
        # check that items are re-ordered by importance
        self.itemlist.order_by = "importance/date"
        self.itemlist.re_order_by_importance()

        self.assertEqual(
            list(self.itemlist.items),
            [self.item2, self.item1]
            )

    def test_truncate_items(self):
        # check that items are re-ordered by importance
        self.itemlist.order_by = "importance/date"
        self.itemlist.limit_to = 1
        self.itemlist.re_order_by_importance()
        self.itemlist.truncate_items()

        self.assertEqual(
            list(self.itemlist.items),
            [self.item2]
            )

    def test_build(self):
        self.itemlist.build()
        self.assertEqual(list(self.itemlist.items), [self.item1])

    def test_other_items(self):
        school = Entity(name="School of Medicine")
        school.save()

        self.itemlist.entity = school
        self.itemlist.other_item_kinds = ("archive")
        self.item1.hosted_by = school
        self.item2.hosted_by = school
        self.item1.save()
        self.item2.save()

        self.itemlist.build()
        self.assertEqual(
            self.itemlist.other_items(),
            [{'count': 2, 'link': '/news-archive/', 'title': 'News archive'}]
            )


class NewsFilterListTests(TestCase):
    def setUp(self):
        self.item1 = NewsArticle(
            title="newer, less important",
            in_lists=True,
            published=True,
            date=datetime.now()
            )
        self.item1.save()

        self.item2 = NewsArticle(
            title="older, more important",
            summary="newer",
            in_lists=True,
            published=True,
            date=datetime.now()-timedelta(days=200),
            importance=3,
            slug="item2"
            )
        self.item2.save()

        self.itemlist = NewsListArchive()
        self.itemlist.items = NewsArticle.objects.all()
        self.itemlist.request = HttpRequest()

    def test_filter_on_search_terms_no_terms(self):
        query = QueryDict("")
        self.itemlist.request.GET = query
        self.itemlist.filter_on_search_terms()
        self.assertEqual(
            list(self.itemlist.items),
            [self.item1, self.item2]
            )

    def test_filter_on_search_terms_1_match(self):
        query = QueryDict("text=ss")
        self.itemlist.request.GET = query
        self.itemlist.filter_on_search_terms()
        self.assertEqual(
            list(self.itemlist.items),
            [self.item1]
            )

    def test_filter_on_search_terms_2_matches(self):
        query = QueryDict('text=newer')
        self.itemlist.request.GET = query
        self.itemlist.filter_on_search_terms()
        self.assertEqual(
            list(self.itemlist.items),
            [self.item1, self.item2]
            )


class EventsListTests(TestCase):
    def setUp(self):
        self.item1 = Event(
            title="sooner, less important",
            type_id=1,
            in_lists=True,
            published=True,
            date=datetime.now()+timedelta(days=10),
            )
        self.item1.save()

        self.item2 = Event(
            title="later, more important",
            type_id=2,
            in_lists=True,
            published=True,
            date=datetime.now()+timedelta(days=20),
            single_day_event=True,
            importance=3,
            slug="item2"
            )
        self.item2.save()

        self.item3 = Event(
            title="past",
            type_id=2,
            in_lists=True,
            published=True,
            date=datetime.now()-timedelta(days=20),
            single_day_event=True,
            importance=3,
            slug="item3"
            )
        self.item3.save()

        self.item4 = Event(
            title="already started but not finished",
            type_id=3,
            in_lists=True,
            published=True,
            date=datetime.now()-timedelta(days=2),
            end_date=datetime.now()+timedelta(days=2),
            single_day_event=False,
            importance=1,
            slug="item4"
            )
        self.item4.save()

        self.item5 = Event(
            title="series",
            type_id=3,
            in_lists=True,
            published=True,
            series=True,
            importance=1,
            slug="item5"
            )
        self.item5.save()

        self.itemlist = EventsList()
        self.itemlist.items = Event.objects.all()

    def test_all_items_order(self):
        self.assertEqual(
            list(self.itemlist.items),
            [self.item5, self.item3, self.item4, self.item1, self.item2]
            )

    def test_create_item_collections(self):
        self.itemlist.create_item_collections()

        self.assertEqual(
            list(self.itemlist.actual_events),
            [self.item3, self.item4, self.item1, self.item2]
            )

        self.assertEqual(
            list(self.itemlist.forthcoming_events),
            [self.item4, self.item1, self.item2]
            )

        self.assertEqual(
            list(self.itemlist.previous_events),
            [self.item3]
            )

    def test_truncate_items(self):
        self.itemlist.create_item_collections()
        self.itemlist.limit_to = 1
        self.itemlist.truncate_items()

        self.assertEqual(
            list(self.itemlist.items),
            [self.item3]
            )

    def test_truncate_items_forthcoming(self):
        self.itemlist.item_collections = ["forthcoming_events"]
        self.itemlist.create_item_collections()
        self.itemlist.limit_to = 2
        self.itemlist.truncate_items()

        self.assertEqual(
            list(self.itemlist.items),
            [self.item4, self.item1]
            )

    def test_set_items_for_person_featuring(self):
        p = Person()
        p.save()
        self.item1.featuring.add(p)

        self.itemlist.person = p
        self.itemlist.set_items_for_person()

        self.assertEqual(
            list(self.itemlist.items),
            [self.item1]
        )

    def test_set_items_for_person_contact(self):
        p = Person()
        p.save()
        self.item1.please_contact.add(p)

        self.itemlist.person = p
        self.itemlist.set_items_for_person()

        self.assertEqual(
            list(self.itemlist.items),
            [self.item1]
        )

    def test_set_items_for_place(self):
        s = Site(id=1)
        p = Building(site=s)
        p.save()
        self.item1.building = p
        self.item1.save()

        self.itemlist.place = s
        self.itemlist.set_items_for_place()

        self.assertEqual(
            list(self.itemlist.items),
            [self.item1]
        )

    def test_other_items(self):
        school = Entity(name="School of Medicine")
        school.save()

        self.itemlist.entity = school
        self.itemlist.other_item_kinds = ("previous_events", "forthcoming_events")
        self.itemlist.build()

        # there is nothing to show in other_items()
        self.assertEqual(
            self.itemlist.other_items(),
            [],
        )

        # create some items that will count as other_items()
        self.item1.hosted_by = school
        self.item2.hosted_by = school
        self.item3.hosted_by = school
        self.item1.save()
        self.item2.save()
        self.item3.save()

        self.assertEqual(
            self.itemlist.other_items(),
            [{
                'count': 2,
                'link': '/forthcoming-events/',
                'title': 'All forthcoming events'
            },
            {
                'count': 1,
                'link': '/previous-events/',
                'title': 'Previous events'
            }]
        )


class EventsFilterListTests(TestCase):
    def setUp(self):
        self.item1 = Event(
            title="sooner, less important",
            type_id=1,
            in_lists=True,
            published=True,
            date=datetime.now()+timedelta(days=10),
            )
        self.item1.save()

        self.item2 = Event(
            title="later, more important",
            type_id=2,
            in_lists=True,
            published=True,
            date=datetime.now()+timedelta(days=20),
            single_day_event=True,
            importance=3,
            slug="item2"
            )
        self.item2.save()

        self.item3 = Event(
            title="past",
            type_id=2,
            in_lists=True,
            published=True,
            date=datetime.now()-timedelta(days=20),
            single_day_event=True,
            importance=3,
            slug="item3"
            )
        self.item3.save()

        self.item4 = Event(
            title="already started but not finished",
            summary="finished soon",
            type_id=3,
            in_lists=True,
            published=True,
            date=datetime.now()-timedelta(days=2),
            end_date=datetime.now()+timedelta(days=2),
            single_day_event=False,
            importance=1,
            slug="item4"
            )
        self.item4.save()

        self.item5 = Event(
            title="series",
            type_id=3,
            in_lists=True,
            published=True,
            series=True,
            importance=1,
            slug="item5"
            )
        self.item5.save()
        self.itemlist = EventsFilterList()
        self.itemlist.request = HttpRequest()

    def test_filter_on_search_terms_no_terms(self):
        query = QueryDict("")
        self.itemlist.request.GET = query
        self.itemlist.build()
        self.assertEqual(
            list(self.itemlist.items),
            [self.item3, self.item4, self.item1, self.item2]
            )

    def test_filter_on_search_terms_1_match(self):
        query = QueryDict("text=past")
        self.itemlist.request.GET = query
        self.itemlist.build()
        self.assertEqual(
            list(self.itemlist.items),
            [self.item3]
            )

    def test_filter_on_search_terms_2_matches(self):
        query = QueryDict('text=soon')
        self.itemlist.request.GET = query
        self.itemlist.build()
        self.assertEqual(
            list(self.itemlist.items),
            [self.item4, self.item1]
            )


class PluginListerTests(TestCase):

    def test_other_items(self):
        lister = NewsAndEventsPluginLister(
            entity=Entity(slug="test")
            )

        self.assertItemsEqual(
            lister.other_items(),
            [{
                'css_class': 'main',
                'link': '/news-and-events/test/',
                'title': 'More '
            }]
        )

########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import patterns, url

from news_and_events import views

urlpatterns = patterns('news_and_events.views',

    # news and events items
    url(
        r"^news/(?P<slug>[-\w]+)/$",
        "newsarticle",
        name="news"
        ),
    url(
        r"^event/(?P<slug>[-\w]+)/$",
        "event",
        name="event"
        ),

    # main news and events
    url(
        r"^news-and-events/(?:(?P<slug>[-\w]+)/)?$",
        views.NewsAndEventsView.as_view(),
        name="news-and-events"
        ),

    # news archives
    url(
        r"^news-archive/(?:(?P<slug>[-\w]+)/)?$",
        views.NewsArchiveView.as_view(),
        name="news-archive"
        ),

    # previous events
    url(
        r"^previous-events/(?:(?P<slug>[-\w]+)/)?$",
        views.EventsArchiveView.as_view(),
        name="events-archive"
        ),

    # forthcoming events
    url(
        r"^forthcoming-events/(?:(?P<slug>[-\w]+)/)?$",
        views.EventsForthcomingView.as_view(),
        name="events-forthcoming"
        ),
    )

########NEW FILE########
__FILENAME__ = views
import datetime
from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext

from arkestra_utilities.views import ArkestraGenericView

from models import Event, NewsArticle
from .lister import NewsAndEventsCurrentLister, NewsArchiveLister, \
    EventsArchiveLister, EventsForthcomingLister

from arkestra_utilities.settings import MULTIPLE_ENTITY_MODE


class NewsAndEventsView(ArkestraGenericView):
    auto_page_attribute = "auto_news_page"

    def get(self, request, *args, **kwargs):
        self.get_entity()

        self.lister = NewsAndEventsCurrentLister(
            entity=self.entity,
            request=self.request
            )

        self.main_page_body_file = "arkestra/generic_lister.html"
        self.meta = {"description": "Recent news and forthcoming events"}
        self.title = unicode(self.entity) + u" news & events"
        if MULTIPLE_ENTITY_MODE:
            self.pagetitle = unicode(self.entity) + u" news & events"
        else:
            self.pagetitle = "News & events"

        return self.response(request)


class NewsArchiveView(ArkestraGenericView):
    auto_page_attribute = "auto_news_page"

    def get(self, request, *args, **kwargs):
        self.get_entity()

        self.lister = NewsArchiveLister(
            entity=self.entity,
            request=self.request
            )

        self.main_page_body_file = "arkestra/generic_filter_list.html"
        self.meta = {"description": "Searchable archive of news items"}
        self.title = u"News archive for %s" % unicode(self.entity)
        self.pagetitle = u"News archive for %s" % unicode(self.entity)

        return self.response(request)


class EventsArchiveView(ArkestraGenericView):
    auto_page_attribute = "auto_news_page"

    def get(self, request, *args, **kwargs):
        self.get_entity()

        self.lister = EventsArchiveLister(
            entity=self.entity,
            request=self.request
            )

        self.main_page_body_file = "arkestra/generic_filter_list.html"
        self.meta = {"description": "Searchable archive of events"}
        self.title = u"Events archive for %s" % unicode(self.entity)
        self.pagetitle = u"Events archive for %s" % unicode(self.entity)

        return self.response(request)


class EventsForthcomingView(ArkestraGenericView):
    auto_page_attribute = "auto_news_page"

    def get(self, request, *args, **kwargs):
        self.get_entity()

        self.lister = EventsForthcomingLister(
            entity=self.entity,
            request=self.request
            )

        self.main_page_body_file = "arkestra/generic_filter_list.html"
        self.meta = {"description": "Searchable list of forthcoming events"}
        self.title = u"Forthcoming events for %s" % unicode(self.entity)
        self.pagetitle = u"Forthcoming events for %s" % unicode(self.entity)

        return self.response(request)


def newsarticle(request, slug):
    """
    Responsible for publishing news article
    """
    if request.user.is_staff:
        newsarticle = get_object_or_404(NewsArticle, slug=slug)
    else:
        newsarticle = get_object_or_404(
            NewsArticle,
            slug=slug,
            published=True,
            date__lte=datetime.datetime.now()
            )
    return render_to_response(
        "news_and_events/newsarticle.html", {
            "newsarticle": newsarticle,
            "entity": newsarticle.get_hosted_by,
            "meta": {"description": newsarticle.summary}
        },
        RequestContext(request),
    )


def event(request, slug):
    """
    Responsible for publishing an event
    """
    # print " -------- views.event --------"
    event = get_object_or_404(Event, slug=slug)

    return render_to_response(
        "news_and_events/event.html", {
            "event": event,
            "entity": event.get_hosted_by,
            "meta": {"description": event.summary}
        },
        RequestContext(request),
        )

########NEW FILE########
__FILENAME__ = admin
from django import forms
from django.contrib import admin, messages
from django.db.models import ForeignKey

from cms.admin.placeholderadmin import PlaceholderAdmin

from widgetry import fk_lookup
from widgetry.tabs.placeholderadmin import ModelAdminWithTabsAndCMSPlaceholder

from arkestra_utilities.widgets.wym_editor import WYMEditor
from arkestra_utilities import admin_tabs_extension
from arkestra_utilities.admin_mixins import GenericModelAdmin, GenericModelForm, HostedByFilter, fieldsets

from links.admin import ExternalLinkForm, ObjectLinkInline

from models import Vacancy, Studentship

class VacancyStudentshipForm(GenericModelForm):
    # a shared form for vacancies & studentships
    pass

class VacancyStudentshipAdmin(GenericModelAdmin, ModelAdminWithTabsAndCMSPlaceholder):
    # inlines = (ObjectLinkInline,)
    exclude = ('description',)
    search_fields = ['short_title','title','summary', 'slug']
    list_display = ('short_title', 'hosted_by', 'date',)
    list_display = ('short_title', 'date', 'hosted_by',)
    list_filter = ('date', HostedByFilter)
    related_search_fields = [
        'hosted_by',
        'please_contact',
        'external_url',
        ]
    filter_horizontal = (
        'please_contact',
        'publish_to',
        )
    prepopulated_fields = {
        'slug': ('title',)
            }

    def _media(self):
        return super(ModelAdminWithTabsAndCMSPlaceholder, self).media
    media = property(_media)


class VacancyForm(VacancyStudentshipForm):
    class Meta(VacancyStudentshipForm.Meta):
        model = Vacancy

class VacancyAdmin(VacancyStudentshipAdmin):
    # def __init__(self):
    #     super(VacancyAdmin, self).__init__(self)
    #     search_fields.append('job_number')

    form = VacancyForm
    fieldset_vacancy = ('', {'fields': ('salary', 'job_number')})

    tabs = (
            ('Basic', {'fieldsets': (fieldsets["basic"], fieldsets["host"], fieldset_vacancy, fieldsets["image"], fieldsets["publishing_control"],)}),
            ('Date & significance', {'fieldsets': (fieldsets["date"], fieldsets["importance"])}),
            ('Body', {'fieldsets': (fieldsets["body"],)}),
            ('Where to Publish', {'fieldsets': (fieldsets["where_to_publish"],),}),
            ('Please contact', {'fieldsets': (fieldsets["people"],)}),
            ('Links', {'inlines': (ObjectLinkInline,),}),
            ('Advanced Options', {'fieldsets': (fieldsets["url"], fieldsets["slug"],)}),
        )


class StudentshipForm(VacancyStudentshipForm):
    class Meta(VacancyStudentshipForm.Meta):
        model = Studentship


# class StudentshipAdmin(admin_tabs_extension.ModelAdminWithTabs):
class StudentshipAdmin(VacancyStudentshipAdmin):
    form = StudentshipForm
    filter_horizontal = (
        'publish_to',
        'supervisors',
        'please_contact',
    )

    fieldset_supervision = ('', {'fields': ('supervisors',)})
    tabs = (
            ('Basic', {'fieldsets': (fieldsets["basic"], fieldsets["host"], fieldsets["image"], fieldsets["publishing_control"],)}),
            ('Date & significance', {'fieldsets': (fieldsets["date"], fieldsets["importance"])}),
            ('Body', {'fieldsets': (fieldsets["body"],)}),
            ('Where to Publish', {'fieldsets': (fieldsets["where_to_publish"],),}),
            ('Supervisors', {'fieldsets': (fieldset_supervision,)}),
            ('Please contact', {'fieldsets': (fieldsets["people"],)}),
            ('Links', {'inlines': (ObjectLinkInline,),}),
            ('Advanced Options', {'fieldsets': (fieldsets["url"], fieldsets["slug"],)}),
        )

    # autocomplete fields
    related_search_fields = [
        'hosted_by',
        'please_contact',
        ]

admin.site.register(Vacancy,VacancyAdmin)
admin.site.register(Studentship,StudentshipAdmin)

########NEW FILE########
__FILENAME__ = cms_plugins
from django import forms
from django.utils.translation import ugettext as _

from cms.plugin_base import CMSPluginBase
from cms.plugin_pool import plugin_pool

from arkestra_utilities.generic_models import ArkestraGenericPlugin
from arkestra_utilities.generic_models import ArkestraGenericPluginForm
from arkestra_utilities.admin_mixins import AutocompleteMixin

from contacts_and_people.templatetags.entity_tags import work_out_entity

from models import VacanciesPlugin, Vacancy, Studentship
from mixins import VacancyStudentshipPluginMixin
from menu import menu_dict
from lister import VacanciesAndStudentshipsPluginLister

class VacanciesStudentshipsPluginForm(ArkestraGenericPluginForm, forms.ModelForm):
    class Meta:
        model = VacanciesPlugin


class CMSVacanciesPlugin(VacancyStudentshipPluginMixin, ArkestraGenericPlugin, AutocompleteMixin, CMSPluginBase):
    model = VacanciesPlugin
    name = _("Vacancies & Studentships")
    form = VacanciesStudentshipsPluginForm
    menu_cues = menu_dict
    
    fieldsets = (
        (None, {
        'fields': (('display', 'layout', 'list_format',),  ( 'format', 'order_by', 'group_dates',), 'limit_to')
    }),
        ('Advanced options', {
        'classes': ('collapse',),
        'fields': ('entity', 'heading_level', ('vacancies_heading_text', 'studentships_heading_text'),),
    }),
    )

    # autocomplete fields
    related_search_fields = ['entity',]

    def icon_src(self, instance):
        return "/static/plugin_icons/vacancies_and_studentships.png"

    def render(self, context, instance, placeholder):
        self.entity = getattr(instance, "entity", None) or \
            work_out_entity(context, None)

        self.lister = VacanciesAndStudentshipsPluginLister(
            entity=self.entity,
            display=instance.display,
            order_by=instance.order_by,
            layout=instance.layout,
            limit_to=instance.limit_to,
            item_format=instance.format,
            list_format=instance.list_format,
            # request=instance.request
            )

        context.update({
            'lister': self.lister,
            'placeholder': placeholder,
            })
        return context

plugin_pool.register_plugin(CMSVacanciesPlugin)
########NEW FILE########
__FILENAME__ = link_schemas
# register all interesting models for search
#print "LOADING link_schemas.py for %s" % __name__

from vacancies_and_studentships import models, admin
from links import schema
from django.utils.encoding import smart_unicode

from datetime import datetime
from django.template.defaultfilters import date


def smart_description(obj):
    r = []
    date_format = "jS F Y"
    now = datetime.now()
    if obj.date.year == now.year: # this year
        date_format = "jS F"
    date = date(obj.date, date_format)

    s = u"Closing date: %s" % date
    if obj.please_contact:
        s += u" contact: %s" % smart_unicode(obj.please_contact)
    r.append(s)
    r.append(u"%s" % obj.summary)
    #r.append(u"%s" % obj.description)
    return "<br />".join(r)

schema.register(
    models.Vacancy,
    search_fields=admin.VacancyAdmin.search_fields,
    # title=lambda obj: u"%s (%s)" % (obj.title, obj.job_number),
    heading='"Related vacancies"',
    image="image",
    )

schema.register(
    models.Studentship,
    search_fields=admin.StudentshipAdmin.search_fields,
    # title=lambda obj: u"%s (%s)" % (obj.title, obj.job_number),
    heading='"Related studentships"',
    image="image",
    )
########NEW FILE########
__FILENAME__ = lister
from django.utils.translation import ugettext_lazy as _

from arkestra_utilities.generic_lister import (
    ArkestraGenericLister, ArkestraGenericList, ArkestraGenericFilterSet
    )

from arkestra_utilities.settings import (
    NEWS_AND_EVENTS_LAYOUT, LISTER_MAIN_PAGE_LIST_LENGTH,
    MULTIPLE_ENTITY_MODE
    )

from .models import Vacancy, Studentship
import menu


class List(ArkestraGenericList):
    """
    Base List for both Vacancies and Studentships
    """
    item_collections = ("open", "archived")

    def build(self):
        self.items = self.model.objects.listable_objects()
        self.set_items_for_entity()
        self.create_item_collections()
        self.truncate_items()
        self.set_show_when()

    def create_item_collections(self):
        if any(
            kind in self.item_collections
                for kind in ("open", "archived")
                ):

            if "open" in self.item_collections:
                self.open = self.items.filter(date__gte=self.now)

            if "archived" in self.item_collections:
                self.archived = self.items.filter(date__lt=self.now)

            self.items = getattr(self, self.item_collections[0])

    def other_items(self):
        other_items = []

        if "open" in self.other_item_kinds and self.open.exists():
            other_items.append({
                "link": self.entity.get_auto_page_url("vacancies-current"),
                "title": "All open vacancies",
                "count": self.open.count(),
                })

        if "archived" in self.other_item_kinds and self.archived.exists():
            other_items.append({
                "link": self.entity.get_auto_page_url("vacancies-archive"),
                "title": "Archived vacancies",
                "count": self.archived.count(),
                })

        if "main" in self.other_item_kinds:
            auto_page_title = menu.menu_dict["title_attribute"]

            if not MULTIPLE_ENTITY_MODE:
                title = getattr(self.entity, auto_page_title)
            else:
                title = "%s %s" % (
                    self.entity.short_name,
                    getattr(self.entity, auto_page_title).lower()
                    )

            other_items.append({
                "link": self.entity.get_auto_page_url("vacancies-and-studentships"),
                "title": title,
                "css_class": "main"
            })
        return other_items


class VacanciesListMixin(object):
    """
    Any Vacancy list needs to inherit this
    """
    model = Vacancy


class StudentshipsListMixin(object):
    """
    Any Studentship list needs to inherit this
    """
    model = Studentship


class VacanciesListCurrent(VacanciesListMixin, List):
    """
    For the main list of Vacancies
    """
    item_collections = ("open", "archived")
    other_item_kinds = ("open", "archived")


class StudentshipsListCurrent(StudentshipsListMixin, List):
    """
    For the main list of Studentships
    """
    item_collections = ("open", "archived")
    other_item_kinds = ("open", "archived")


class VacanciesPluginList(VacanciesListMixin, List):
    """
    For plugins.
    """
    item_collections = ("open", "archived")


class StudentshipsPluginList(StudentshipsListMixin, List):
    """
    For plugins.
    """
    item_collections = ("open", "archived")


class StudentshipsListForPerson(StudentshipsListMixin, List):
    """
    For plugins.
    """
    item_collections = ("open", "archived")

    def build(self):
        self.items = self.model.objects.listable_objects()
        self.set_items_for_person()
        self.create_item_collections()
        self.truncate_items()
        self.set_show_when()


class FilterSet(ArkestraGenericFilterSet):
    fields = ["date"]


class FilterList(List):
    filter_set = FilterSet
    search_fields = [
        {
            "field_name": "text",
            "field_label": "Title/summary",
            "placeholder": "Search",
            "search_keys": [
                "title__icontains",
                "summary__icontains",
                ],
            },
        ]

    def build(self):
        self.items = self.model.objects.listable_objects()
        self.set_items_for_entity()
        self.create_item_collections()
        self.filter_on_search_terms()
        self.itemfilter = self.filter_set(self.items, self.request.GET)


class ForthcomingVacanciesList(VacanciesListMixin, FilterList):
    item_collections = ("open", "archived")
    other_item_kinds = ("archived", "main")


class ForthcomingStudentshipsList(StudentshipsListMixin, FilterList):
    item_collections = ("open", "archived")
    other_item_kinds = ("archived", "main")


class VacanciesArchiveList(VacanciesListMixin, FilterList):
    item_collections = ("archived", "open")
    other_item_kinds = ("open", "main")


class StudentshipsArchiveList(StudentshipsListMixin, FilterList):
    item_collections = ("archived", "open")
    other_item_kinds = ("open", "main")


class VacanciesAndStudentshipsCurrentLister(ArkestraGenericLister):
    listkinds = [
        ("vacancies", VacanciesListCurrent),
        ("studentships", StudentshipsListCurrent),
        ]
    display = "vacancies studentships"
    order_by = "importance/date"
    layout = NEWS_AND_EVENTS_LAYOUT
    limit_to = LISTER_MAIN_PAGE_LIST_LENGTH


class VacanciesAndStudentshipsMenuLister(ArkestraGenericLister):
    listkinds = [
        ("vacancies", VacanciesListCurrent),
        ("studentships", StudentshipsListCurrent),
        ]
    display = "vacancies and studentships"
    limit_to = LISTER_MAIN_PAGE_LIST_LENGTH


class VacanciesAndStudentshipsPluginLister(ArkestraGenericLister):
    listkinds = [
        ("vacancies", VacanciesPluginList),
        ("studentships", StudentshipsPluginList),
        ]

    def other_items(self):
        return [{
            "link": self.entity.get_auto_page_url(
                "vacancies-and-studentships"
                ),
            "title": "More %s" % self.display,
            "css_class": "main"
            }]


class StudentshipsPersonLister(ArkestraGenericLister):
    layout = NEWS_AND_EVENTS_LAYOUT
    listkinds = [
        ("studentships", StudentshipsListForPerson),
        ]
    display = "studentships"


class VacanciesArchiveLister(ArkestraGenericLister):
    listkinds = [("vacancies", VacanciesArchiveList)]
    display = "vacancies"


class VacanciesForthcomingLister(ArkestraGenericLister):
    listkinds = [("vacancies", ForthcomingVacanciesList)]
    display = "vacancies"


class StudentshipsArchiveLister(ArkestraGenericLister):
    listkinds = [("studentships", StudentshipsArchiveList)]
    display = "studentships"


class StudentshipsForthcomingLister(ArkestraGenericLister):
    listkinds = [("studentships", ForthcomingStudentshipsList)]
    display = "studentships"

########NEW FILE########
__FILENAME__ = managers
from django.db import models
from django.db.models import Q
from django.conf import settings
from datetime import datetime
import operator

from arkestra_utilities.managers import ArkestraGenericModelManager
from arkestra_utilities.settings import MULTIPLE_ENTITY_MODE

# class ItemManager(ArkestraGenericModelManager):
#     def get_items(self, instance):
#         """
#         returns forthcoming_items, previous_items, series_items
#         """
#
#         # most likely, we're getting items related to an entity
#         if MULTIPLE_ENTITY_MODE and instance.entity:
#             all_items = self.model.objects.filter(
#             Q(hosted_by__in=instance.entity.get_descendants(include_self = True)) | \
#             Q(publish_to=instance.entity)).distinct().order_by('-date')
#         else:
#             all_items = self.model.objects.all().order_by('-date')
#
#         instance.forthcoming_items = all_items.filter(date__gte = datetime.now())
#         instance.previous_items = all_items.exclude(date__gte = datetime.now())
#
#         if instance.view == "archive":
#             instance.items = list(instance.previous_items)
#
#         else:
#             instance.items = list(instance.forthcoming_items)
#
#         return instance.items
#
# class StudentshipManager(ItemManager):
#     pass
#
# class VacancyManager(ItemManager):
#     pass
########NEW FILE########
__FILENAME__ = menu
menu_dict = {
    "auto_page_attribute": "auto_vacancies_page",
    "title_attribute": "vacancies_page_menu_title",
    "url_attribute": "vacancies-and-studentships",
    "sub_menus": False,

    "lister_module": "vacancies_and_studentships.lister",
    "lister_name": "VacanciesAndStudentshipsMenuLister",
    }

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'Vacancy'
        db.create_table('vacancies_and_studentships_vacancy', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('url', self.gf('django.db.models.fields.URLField')(max_length=200, null=True, blank=True)),
            ('external_url', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='vacancy_item', null=True, to=orm['links.ExternalLink'])),
            ('slug', self.gf('django.db.models.fields.SlugField')(db_index=True, unique=True, max_length=60, blank=True)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('short_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('summary', self.gf('django.db.models.fields.TextField')()),
            ('published', self.gf('django.db.models.fields.BooleanField')(default=False, db_index=True)),
            ('in_lists', self.gf('django.db.models.fields.BooleanField')(default=True, db_index=True)),
            ('body', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['cms.Placeholder'], null=True)),
            ('image', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Image'], null=True, blank=True)),
            ('hosted_by', self.gf('django.db.models.fields.related.ForeignKey')(default=None, related_name='vacancy_hosted_events', null=True, blank=True, to=orm['contacts_and_people.Entity'])),
            ('importance', self.gf('django.db.models.fields.PositiveIntegerField')(default=0, null=True)),
            ('closing_date', self.gf('django.db.models.fields.DateField')()),
            ('description', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('job_number', self.gf('django.db.models.fields.CharField')(max_length=9)),
            ('salary', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
        ))
        db.send_create_signal('vacancies_and_studentships', ['Vacancy'])

        # Adding M2M table for field publish_to on 'Vacancy'
        db.create_table('vacancies_and_studentships_vacancy_publish_to', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('vacancy', models.ForeignKey(orm['vacancies_and_studentships.vacancy'], null=False)),
            ('entity', models.ForeignKey(orm['contacts_and_people.entity'], null=False))
        ))
        db.create_unique('vacancies_and_studentships_vacancy_publish_to', ['vacancy_id', 'entity_id'])

        # Adding M2M table for field please_contact on 'Vacancy'
        db.create_table('vacancies_and_studentships_vacancy_please_contact', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('vacancy', models.ForeignKey(orm['vacancies_and_studentships.vacancy'], null=False)),
            ('person', models.ForeignKey(orm['contacts_and_people.person'], null=False))
        ))
        db.create_unique('vacancies_and_studentships_vacancy_please_contact', ['vacancy_id', 'person_id'])

        # Adding model 'Studentship'
        db.create_table('vacancies_and_studentships_studentship', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('url', self.gf('django.db.models.fields.URLField')(max_length=200, null=True, blank=True)),
            ('external_url', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='studentship_item', null=True, to=orm['links.ExternalLink'])),
            ('slug', self.gf('django.db.models.fields.SlugField')(db_index=True, unique=True, max_length=60, blank=True)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('short_title', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True)),
            ('summary', self.gf('django.db.models.fields.TextField')()),
            ('published', self.gf('django.db.models.fields.BooleanField')(default=False, db_index=True)),
            ('in_lists', self.gf('django.db.models.fields.BooleanField')(default=True, db_index=True)),
            ('body', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['cms.Placeholder'], null=True)),
            ('image', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Image'], null=True, blank=True)),
            ('hosted_by', self.gf('django.db.models.fields.related.ForeignKey')(default=None, related_name='studentship_hosted_events', null=True, blank=True, to=orm['contacts_and_people.Entity'])),
            ('importance', self.gf('django.db.models.fields.PositiveIntegerField')(default=0, null=True)),
            ('closing_date', self.gf('django.db.models.fields.DateField')()),
            ('description', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
        ))
        db.send_create_signal('vacancies_and_studentships', ['Studentship'])

        # Adding M2M table for field publish_to on 'Studentship'
        db.create_table('vacancies_and_studentships_studentship_publish_to', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('studentship', models.ForeignKey(orm['vacancies_and_studentships.studentship'], null=False)),
            ('entity', models.ForeignKey(orm['contacts_and_people.entity'], null=False))
        ))
        db.create_unique('vacancies_and_studentships_studentship_publish_to', ['studentship_id', 'entity_id'])

        # Adding M2M table for field please_contact on 'Studentship'
        db.create_table('vacancies_and_studentships_studentship_please_contact', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('studentship', models.ForeignKey(orm['vacancies_and_studentships.studentship'], null=False)),
            ('person', models.ForeignKey(orm['contacts_and_people.person'], null=False))
        ))
        db.create_unique('vacancies_and_studentships_studentship_please_contact', ['studentship_id', 'person_id'])

        # Adding M2M table for field supervisors on 'Studentship'
        db.create_table('vacancies_and_studentships_studentship_supervisors', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('studentship', models.ForeignKey(orm['vacancies_and_studentships.studentship'], null=False)),
            ('person', models.ForeignKey(orm['contacts_and_people.person'], null=False))
        ))
        db.create_unique('vacancies_and_studentships_studentship_supervisors', ['studentship_id', 'person_id'])

        # Adding model 'VacanciesPlugin'
        db.create_table('cmsplugin_vacanciesplugin', (
            ('cmsplugin_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['cms.CMSPlugin'], unique=True, primary_key=True)),
            ('entity', self.gf('django.db.models.fields.related.ForeignKey')(blank=True, related_name='vacanciesplugin_plugin', null=True, to=orm['contacts_and_people.Entity'])),
            ('layout', self.gf('django.db.models.fields.CharField')(default='sidebyside', max_length=25)),
            ('format', self.gf('django.db.models.fields.CharField')(default='details image', max_length=25)),
            ('heading_level', self.gf('django.db.models.fields.PositiveSmallIntegerField')(default=3)),
            ('order_by', self.gf('django.db.models.fields.CharField')(default='importance/date', max_length=25)),
            ('list_format', self.gf('django.db.models.fields.CharField')(default='vertical', max_length=25)),
            ('group_dates', self.gf('django.db.models.fields.BooleanField')(default=True)),
            ('limit_to', self.gf('django.db.models.fields.PositiveSmallIntegerField')(default=5, null=True, blank=True)),
            ('display', self.gf('django.db.models.fields.CharField')(default='vacancies & studentships', max_length=25)),
            ('vacancies_heading_text', self.gf('django.db.models.fields.CharField')(default='Vacancies', max_length=25)),
            ('studentships_heading_text', self.gf('django.db.models.fields.CharField')(default='Studentships', max_length=25)),
        ))
        db.send_create_signal('vacancies_and_studentships', ['VacanciesPlugin'])


    def backwards(self, orm):
        
        # Deleting model 'Vacancy'
        db.delete_table('vacancies_and_studentships_vacancy')

        # Removing M2M table for field publish_to on 'Vacancy'
        db.delete_table('vacancies_and_studentships_vacancy_publish_to')

        # Removing M2M table for field please_contact on 'Vacancy'
        db.delete_table('vacancies_and_studentships_vacancy_please_contact')

        # Deleting model 'Studentship'
        db.delete_table('vacancies_and_studentships_studentship')

        # Removing M2M table for field publish_to on 'Studentship'
        db.delete_table('vacancies_and_studentships_studentship_publish_to')

        # Removing M2M table for field please_contact on 'Studentship'
        db.delete_table('vacancies_and_studentships_studentship_please_contact')

        # Removing M2M table for field supervisors on 'Studentship'
        db.delete_table('vacancies_and_studentships_studentship_supervisors')

        # Deleting model 'VacanciesPlugin'
        db.delete_table('cmsplugin_vacanciesplugin')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.page': {
            'Meta': {'ordering': "('site', 'tree_id', 'lft')", 'object_name': 'Page'},
            'changed_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'in_navigation': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'limit_visibility_in_menu': ('django.db.models.fields.SmallIntegerField', [], {'default': 'None', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'login_required': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'moderator_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '1', 'blank': 'True'}),
            'navigation_extenders': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'page_flags': ('django.db.models.fields.TextField', [], {'null': True, 'blank': True}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['cms.Page']"}),
            'placeholders': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['cms.Placeholder']", 'symmetrical': 'False'}),
            'publication_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'publication_end_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'publisher_is_draft': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'publisher_public': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'publisher_draft'", 'unique': 'True', 'null': 'True', 'to': "orm['cms.Page']"}),
            'publisher_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'reverse_id': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '40', 'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sites.Site']"}),
            'soft_root': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'template': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contacts_and_people.building': {
            'Meta': {'ordering': "('site', 'street', 'number', 'name')", 'object_name': 'Building'},
            'access_and_parking': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_access_and_parking'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'additional_street_address': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_description'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'getting_here': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'getting_here'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'latitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'longitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'map': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'postcode': ('django.db.models.fields.CharField', [], {'max_length': '9', 'null': 'True', 'blank': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Site']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'db_index': 'True', 'max_length': '255', 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'street': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {'default': "''", 'max_length': '256'}),
            'zoom': ('django.db.models.fields.IntegerField', [], {'default': '17', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.entity': {
            'Meta': {'ordering': "['tree_id', 'lft']", 'object_name': 'Entity', '_ormbases': ['contacts_and_people.EntityLite']},
            'abstract_entity': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'auto_contacts_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_news_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_publications_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_vacancies_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'blank': 'True'}),
            'building_recapitulates_entity_name': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'contacts_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contacts_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'contacts_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Contacts & people'", 'max_length': '50'}),
            'display_parent': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entitylite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.EntityLite']", 'unique': 'True', 'primary_key': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'entity_item'", 'null': 'True', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'news_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'news_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'news_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'News & events'", 'max_length': '50'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['contacts_and_people.Entity']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'publications_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Publications'", 'max_length': '50'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'db_index': 'True', 'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'vacancies_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'vacancies_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'vacancies_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Vacancies & studentships'", 'max_length': '50'}),
            'website': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'entity'", 'unique': 'True', 'null': 'True', 'to': "orm['cms.Page']"})
        },
        'contacts_and_people.entitylite': {
            'Meta': {'object_name': 'EntityLite'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'contacts_and_people.membership': {
            'Meta': {'ordering': "('-importance_to_entity', 'person__surname')", 'object_name': 'Membership'},
            'display_role': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'display_roles'", 'null': 'True', 'to': "orm['contacts_and_people.Membership']"}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'members'", 'to': "orm['contacts_and_people.Entity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'importance_to_entity': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'importance_to_person': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'key_contact': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'person': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_of'", 'to': "orm['contacts_and_people.Person']"}),
            'role': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.person': {
            'Meta': {'ordering': "['surname', 'given_name', 'user']", 'object_name': 'Person', '_ormbases': ['contacts_and_people.PersonLite']},
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'blank': 'True'}),
            'data_feed_locked': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entities': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'people'", 'to': "orm['contacts_and_people.Entity']", 'through': "orm['contacts_and_people.Membership']", 'blank': 'True', 'symmetrical': 'False', 'null': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'person_item'", 'null': 'True', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'institutional_username': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'override_entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'people_override'", 'null': 'True', 'to': "orm['contacts_and_people.Entity']"}),
            'personlite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.PersonLite']", 'unique': 'True', 'primary_key': 'True'}),
            'please_contact': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'contact_for'", 'null': 'True', 'to': "orm['contacts_and_people.Person']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'db_index': 'True', 'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'staff_id': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'person_user'", 'unique': 'True', 'null': 'True', 'to': "orm['auth.User']"})
        },
        'contacts_and_people.personlite': {
            'Meta': {'object_name': 'PersonLite'},
            'given_name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'middle_names': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'surname': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Title']", 'to_field': "'abbreviation'", 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.phonecontact': {
            'Meta': {'ordering': "('label',)", 'object_name': 'PhoneContact'},
            'area_code': ('django.db.models.fields.CharField', [], {'default': "'029'", 'max_length': '5'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'country_code': ('django.db.models.fields.CharField', [], {'default': "'44'", 'max_length': '5'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'internal_extension': ('django.db.models.fields.CharField', [], {'max_length': '6', 'null': 'True', 'blank': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '12'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'})
        },
        'contacts_and_people.site': {
            'Meta': {'ordering': "('country', 'site_name', 'post_town')", 'object_name': 'Site'},
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'description': ('django.db.models.fields.TextField', [], {'max_length': '500', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post_town': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'site_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contacts_and_people.title': {
            'Meta': {'ordering': "['title']", 'object_name': 'Title'},
            'abbreviation': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        },
        'links.externallink': {
            'Meta': {'ordering': "['title']", 'object_name': 'ExternalLink'},
            'description': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'external_site': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'to': "orm['links.LinkType']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'links.externalsite': {
            'Meta': {'ordering': "['site']", 'object_name': 'ExternalSite'},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'links.linktype': {
            'Meta': {'object_name': 'LinkType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'scheme': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'sites.site': {
            'Meta': {'ordering': "('domain',)", 'object_name': 'Site', 'db_table': "'django_site'"},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'vacancies_and_studentships.studentship': {
            'Meta': {'ordering': "['-closing_date']", 'object_name': 'Studentship'},
            'body': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'closing_date': ('django.db.models.fields.DateField', [], {}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'studentship_item'", 'null': 'True', 'to': "orm['links.ExternalLink']"}),
            'hosted_by': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'related_name': "'studentship_hosted_events'", 'null': 'True', 'blank': 'True', 'to': "orm['contacts_and_people.Entity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'importance': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'in_lists': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'please_contact': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'studentship_person'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'publish_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'studentship_publish_to'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Entity']"}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'short_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'db_index': 'True', 'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {}),
            'supervisors': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'studentship_people'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
        },
        'vacancies_and_studentships.vacanciesplugin': {
            'Meta': {'object_name': 'VacanciesPlugin', 'db_table': "'cmsplugin_vacanciesplugin'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'display': ('django.db.models.fields.CharField', [], {'default': "'vacancies & studentships'", 'max_length': '25'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'vacanciesplugin_plugin'", 'null': 'True', 'to': "orm['contacts_and_people.Entity']"}),
            'format': ('django.db.models.fields.CharField', [], {'default': "'details image'", 'max_length': '25'}),
            'group_dates': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'heading_level': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '3'}),
            'layout': ('django.db.models.fields.CharField', [], {'default': "'sidebyside'", 'max_length': '25'}),
            'limit_to': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '5', 'null': 'True', 'blank': 'True'}),
            'list_format': ('django.db.models.fields.CharField', [], {'default': "'vertical'", 'max_length': '25'}),
            'order_by': ('django.db.models.fields.CharField', [], {'default': "'importance/date'", 'max_length': '25'}),
            'studentships_heading_text': ('django.db.models.fields.CharField', [], {'default': "'Studentships'", 'max_length': '25'}),
            'vacancies_heading_text': ('django.db.models.fields.CharField', [], {'default': "'Vacancies'", 'max_length': '25'})
        },
        'vacancies_and_studentships.vacancy': {
            'Meta': {'object_name': 'Vacancy'},
            'body': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'closing_date': ('django.db.models.fields.DateField', [], {}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'vacancy_item'", 'null': 'True', 'to': "orm['links.ExternalLink']"}),
            'hosted_by': ('django.db.models.fields.related.ForeignKey', [], {'default': 'None', 'related_name': "'vacancy_hosted_events'", 'null': 'True', 'blank': 'True', 'to': "orm['contacts_and_people.Entity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'blank': 'True'}),
            'importance': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'in_lists': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'job_number': ('django.db.models.fields.CharField', [], {'max_length': '9'}),
            'please_contact': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'vacancy_person'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'publish_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'vacancy_publish_to'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Entity']"}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'salary': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'short_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'db_index': 'True', 'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['vacancies_and_studentships']

########NEW FILE########
__FILENAME__ = 0002_auto__chg_field_studentship_hosted_by__chg_field_studentship_image__ch
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Changing field 'Studentship.hosted_by'
        db.alter_column('vacancies_and_studentships_studentship', 'hosted_by_id', self.gf('django.db.models.fields.related.ForeignKey')(on_delete=models.SET_DEFAULT, to=orm['contacts_and_people.Entity'], null=True))

        # Changing field 'Studentship.image'
        db.alter_column('vacancies_and_studentships_studentship', 'image_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Image'], null=True, on_delete=models.SET_NULL))

        # Changing field 'Studentship.external_url'
        db.alter_column('vacancies_and_studentships_studentship', 'external_url_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, on_delete=models.PROTECT, to=orm['links.ExternalLink']))

        # Changing field 'VacanciesPlugin.entity'
        db.alter_column('cmsplugin_vacanciesplugin', 'entity_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, on_delete=models.SET_NULL, to=orm['contacts_and_people.Entity']))

        # Changing field 'Vacancy.hosted_by'
        db.alter_column('vacancies_and_studentships_vacancy', 'hosted_by_id', self.gf('django.db.models.fields.related.ForeignKey')(on_delete=models.SET_DEFAULT, to=orm['contacts_and_people.Entity'], null=True))

        # Changing field 'Vacancy.image'
        db.alter_column('vacancies_and_studentships_vacancy', 'image_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Image'], null=True, on_delete=models.SET_NULL))

        # Changing field 'Vacancy.external_url'
        db.alter_column('vacancies_and_studentships_vacancy', 'external_url_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, on_delete=models.PROTECT, to=orm['links.ExternalLink']))

    def backwards(self, orm):

        # Changing field 'Studentship.hosted_by'
        db.alter_column('vacancies_and_studentships_studentship', 'hosted_by_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['contacts_and_people.Entity']))

        # Changing field 'Studentship.image'
        db.alter_column('vacancies_and_studentships_studentship', 'image_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Image'], null=True))

        # Changing field 'Studentship.external_url'
        db.alter_column('vacancies_and_studentships_studentship', 'external_url_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['links.ExternalLink']))

        # Changing field 'VacanciesPlugin.entity'
        db.alter_column('cmsplugin_vacanciesplugin', 'entity_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['contacts_and_people.Entity']))

        # Changing field 'Vacancy.hosted_by'
        db.alter_column('vacancies_and_studentships_vacancy', 'hosted_by_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['contacts_and_people.Entity']))

        # Changing field 'Vacancy.image'
        db.alter_column('vacancies_and_studentships_vacancy', 'image_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Image'], null=True))

        # Changing field 'Vacancy.external_url'
        db.alter_column('vacancies_and_studentships_vacancy', 'external_url_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['links.ExternalLink']))

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 3, 22, 0, 0)'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.page': {
            'Meta': {'ordering': "('site', 'tree_id', 'lft')", 'object_name': 'Page'},
            'changed_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'in_navigation': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'limit_visibility_in_menu': ('django.db.models.fields.SmallIntegerField', [], {'default': 'None', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'login_required': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'moderator_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '1', 'blank': 'True'}),
            'navigation_extenders': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'page_flags': ('django.db.models.fields.TextField', [], {'null': True, 'blank': True}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['cms.Page']"}),
            'placeholders': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['cms.Placeholder']", 'symmetrical': 'False'}),
            'publication_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'publication_end_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'publisher_is_draft': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'publisher_public': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'publisher_draft'", 'unique': 'True', 'null': 'True', 'to': "orm['cms.Page']"}),
            'publisher_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'reverse_id': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '40', 'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sites.Site']"}),
            'soft_root': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'template': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contacts_and_people.building': {
            'Meta': {'ordering': "('site', 'street', 'number', 'name')", 'object_name': 'Building'},
            'access_and_parking': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_access_and_parking'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'additional_street_address': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_description'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'getting_here': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'getting_here'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'latitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'longitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'map': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'postcode': ('django.db.models.fields.CharField', [], {'max_length': '9', 'null': 'True', 'blank': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'place'", 'on_delete': 'models.PROTECT', 'to': "orm['contacts_and_people.Site']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'street': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {'default': "''", 'max_length': '256'}),
            'zoom': ('django.db.models.fields.IntegerField', [], {'default': '17', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.entity': {
            'Meta': {'ordering': "['tree_id', 'lft']", 'object_name': 'Entity', '_ormbases': ['contacts_and_people.EntityLite']},
            'abstract_entity': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'auto_contacts_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_news_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_vacancies_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'building_recapitulates_entity_name': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'contacts_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contacts_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'contacts_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Contacts & people'", 'max_length': '50'}),
            'display_parent': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entitylite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.EntityLite']", 'unique': 'True', 'primary_key': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'entity_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'news_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'news_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'news_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'News & events'", 'max_length': '50'}),
            'parent': ('mptt.fields.TreeForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['contacts_and_people.Entity']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'vacancies_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'vacancies_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'vacancies_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Vacancies & studentships'", 'max_length': '50'}),
            'website': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'entity'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['cms.Page']", 'blank': 'True', 'unique': 'True'})
        },
        'contacts_and_people.entitylite': {
            'Meta': {'object_name': 'EntityLite'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'contacts_and_people.membership': {
            'Meta': {'ordering': "('-importance_to_entity', 'person__surname')", 'object_name': 'Membership'},
            'display_role': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'display_roles'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Membership']"}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'members'", 'to': "orm['contacts_and_people.Entity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'importance_to_entity': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'importance_to_person': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'key_contact': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'person': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_of'", 'to': "orm['contacts_and_people.Person']"}),
            'role': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.person': {
            'Meta': {'ordering': "['surname', 'given_name', 'user']", 'object_name': 'Person', '_ormbases': ['contacts_and_people.PersonLite']},
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'data_feed_locked': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entities': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'people'", 'to': "orm['contacts_and_people.Entity']", 'through': "orm['contacts_and_people.Membership']", 'blank': 'True', 'symmetrical': 'False', 'null': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'person_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'institutional_username': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'override_entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'people_override'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'personlite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.PersonLite']", 'unique': 'True', 'primary_key': 'True'}),
            'please_contact': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'contact_for'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Person']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'staff_id': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'person_user'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['auth.User']", 'blank': 'True', 'unique': 'True'})
        },
        'contacts_and_people.personlite': {
            'Meta': {'object_name': 'PersonLite'},
            'given_name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'middle_names': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'surname': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Title']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'})
        },
        'contacts_and_people.phonecontact': {
            'Meta': {'ordering': "('label',)", 'object_name': 'PhoneContact'},
            'area_code': ('django.db.models.fields.CharField', [], {'default': "'029'", 'max_length': '5'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'country_code': ('django.db.models.fields.CharField', [], {'default': "'44'", 'max_length': '5'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'internal_extension': ('django.db.models.fields.CharField', [], {'max_length': '6', 'null': 'True', 'blank': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '12'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'})
        },
        'contacts_and_people.site': {
            'Meta': {'ordering': "('country', 'site_name', 'post_town')", 'object_name': 'Site'},
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'description': ('django.db.models.fields.TextField', [], {'max_length': '500', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post_town': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'site_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contacts_and_people.title': {
            'Meta': {'ordering': "['title']", 'object_name': 'Title'},
            'abbreviation': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        },
        'links.externallink': {
            'Meta': {'ordering': "['title']", 'object_name': 'ExternalLink'},
            'description': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'external_site': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalSite']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['links.LinkType']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'links.externalsite': {
            'Meta': {'ordering': "['domain']", 'object_name': 'ExternalSite'},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'links.linktype': {
            'Meta': {'object_name': 'LinkType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'scheme': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'sites.site': {
            'Meta': {'ordering': "('domain',)", 'object_name': 'Site', 'db_table': "'django_site'"},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'vacancies_and_studentships.studentship': {
            'Meta': {'ordering': "['-closing_date']", 'object_name': 'Studentship'},
            'body': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'closing_date': ('django.db.models.fields.DateField', [], {}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'studentship_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'hosted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'studentship_hosted_events'", 'on_delete': 'models.SET_DEFAULT', 'default': 'None', 'to': "orm['contacts_and_people.Entity']", 'blank': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'importance': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'in_lists': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'please_contact': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'studentship_person'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'publish_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'studentship_publish_to'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Entity']"}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'short_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {}),
            'supervisors': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'studentship_people'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
        },
        'vacancies_and_studentships.vacanciesplugin': {
            'Meta': {'object_name': 'VacanciesPlugin', 'db_table': "'cmsplugin_vacanciesplugin'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'display': ('django.db.models.fields.CharField', [], {'default': "'vacancies & studentships'", 'max_length': '25'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'vacanciesplugin_plugin'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'format': ('django.db.models.fields.CharField', [], {'default': "'details image'", 'max_length': '25'}),
            'group_dates': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'heading_level': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '2'}),
            'layout': ('django.db.models.fields.CharField', [], {'default': "'sidebyside'", 'max_length': '25'}),
            'limit_to': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '5', 'null': 'True', 'blank': 'True'}),
            'list_format': ('django.db.models.fields.CharField', [], {'default': "'vertical'", 'max_length': '25'}),
            'order_by': ('django.db.models.fields.CharField', [], {'default': "'importance/date'", 'max_length': '25'}),
            'studentships_heading_text': ('django.db.models.fields.CharField', [], {'default': "'Studentships'", 'max_length': '25'}),
            'vacancies_heading_text': ('django.db.models.fields.CharField', [], {'default': "'Vacancies'", 'max_length': '25'})
        },
        'vacancies_and_studentships.vacancy': {
            'Meta': {'object_name': 'Vacancy'},
            'body': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'closing_date': ('django.db.models.fields.DateField', [], {}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'vacancy_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'hosted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'vacancy_hosted_events'", 'on_delete': 'models.SET_DEFAULT', 'default': 'None', 'to': "orm['contacts_and_people.Entity']", 'blank': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'importance': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'in_lists': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'job_number': ('django.db.models.fields.CharField', [], {'max_length': '9'}),
            'please_contact': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'vacancy_person'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'publish_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'vacancy_publish_to'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Entity']"}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'salary': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'short_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['vacancies_and_studentships']
########NEW FILE########
__FILENAME__ = 0003_rename_date_fields
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Renaming field 'Studentship.closing_date'
        db.rename_column('vacancies_and_studentships_studentship', 'closing_date', 'date')


        # Renaming field 'Vacancy.closing_date'
        db.rename_column('vacancies_and_studentships_vacancy', 'closing_date', 'date')


    def backwards(self, orm):
        # Renaming field 'Studentship.closing_date'
        db.rename_column('vacancies_and_studentships_studentship', 'date', 'closing_date')


        # Renaming field 'Vacancy.closing_date'
        db.rename_column('vacancies_and_studentships_vacancy', 'date', 'closing_date')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 7, 26, 0, 0)'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.page': {
            'Meta': {'ordering': "('site', 'tree_id', 'lft')", 'object_name': 'Page'},
            'changed_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'in_navigation': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'limit_visibility_in_menu': ('django.db.models.fields.SmallIntegerField', [], {'default': 'None', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'login_required': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'moderator_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '1', 'blank': 'True'}),
            'navigation_extenders': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'page_flags': ('django.db.models.fields.TextField', [], {'null': True, 'blank': True}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['cms.Page']"}),
            'placeholders': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['cms.Placeholder']", 'symmetrical': 'False'}),
            'publication_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'publication_end_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'publisher_is_draft': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'publisher_public': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'publisher_draft'", 'unique': 'True', 'null': 'True', 'to': "orm['cms.Page']"}),
            'publisher_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'reverse_id': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '40', 'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sites.Site']"}),
            'soft_root': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'template': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contacts_and_people.building': {
            'Meta': {'ordering': "('site', 'street', 'number', 'name')", 'object_name': 'Building'},
            'access_and_parking': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_access_and_parking'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'additional_street_address': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_description'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'getting_here': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'getting_here'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'latitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'longitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'map': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'postcode': ('django.db.models.fields.CharField', [], {'max_length': '9', 'null': 'True', 'blank': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'place'", 'on_delete': 'models.PROTECT', 'to': "orm['contacts_and_people.Site']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'street': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {'default': "''", 'max_length': '256'}),
            'zoom': ('django.db.models.fields.IntegerField', [], {'default': '17', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.entity': {
            'Meta': {'ordering': "['tree_id', 'lft']", 'object_name': 'Entity', '_ormbases': ['contacts_and_people.EntityLite']},
            'abstract_entity': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'auto_contacts_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_news_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_publications_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_vacancies_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'building_recapitulates_entity_name': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'contacts_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contacts_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'contacts_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Contacts & people'", 'max_length': '50'}),
            'display_parent': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entitylite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.EntityLite']", 'unique': 'True', 'primary_key': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'entity_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            u'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            u'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'news_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'news_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'news_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'News & events'", 'max_length': '50'}),
            'parent': ('mptt.fields.TreeForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['contacts_and_people.Entity']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'publications_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Publications'", 'max_length': '50'}),
            u'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            u'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'vacancies_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'vacancies_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'vacancies_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Vacancies & studentships'", 'max_length': '50'}),
            'website': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'entity'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['cms.Page']", 'blank': 'True', 'unique': 'True'})
        },
        'contacts_and_people.entitylite': {
            'Meta': {'object_name': 'EntityLite'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'contacts_and_people.membership': {
            'Meta': {'ordering': "('-importance_to_entity', 'person__surname')", 'object_name': 'Membership'},
            'display_role': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'display_roles'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Membership']"}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'members'", 'to': "orm['contacts_and_people.Entity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'importance_to_entity': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'importance_to_person': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'key_contact': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'person': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_of'", 'to': "orm['contacts_and_people.Person']"}),
            'role': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.person': {
            'Meta': {'ordering': "['surname', 'given_name', 'user']", 'object_name': 'Person', '_ormbases': ['contacts_and_people.PersonLite']},
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'data_feed_locked': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entities': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'people'", 'to': "orm['contacts_and_people.Entity']", 'through': "orm['contacts_and_people.Membership']", 'blank': 'True', 'symmetrical': 'False', 'null': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'person_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'institutional_username': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'override_entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'people_override'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'personlite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.PersonLite']", 'unique': 'True', 'primary_key': 'True'}),
            'please_contact': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'contact_for'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Person']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'staff_id': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'person_user'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['auth.User']", 'blank': 'True', 'unique': 'True'})
        },
        'contacts_and_people.personlite': {
            'Meta': {'object_name': 'PersonLite'},
            'given_name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'middle_names': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'surname': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Title']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'})
        },
        'contacts_and_people.phonecontact': {
            'Meta': {'ordering': "('label',)", 'object_name': 'PhoneContact'},
            'area_code': ('django.db.models.fields.CharField', [], {'default': "'029'", 'max_length': '5'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'country_code': ('django.db.models.fields.CharField', [], {'default': "'44'", 'max_length': '5'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'internal_extension': ('django.db.models.fields.CharField', [], {'max_length': '6', 'null': 'True', 'blank': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '12'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'})
        },
        'contacts_and_people.site': {
            'Meta': {'ordering': "('country', 'site_name', 'post_town')", 'object_name': 'Site'},
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'description': ('django.db.models.fields.TextField', [], {'max_length': '500', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post_town': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'site_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contacts_and_people.title': {
            'Meta': {'ordering': "['title']", 'object_name': 'Title'},
            'abbreviation': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            u'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            u'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            u'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            u'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        },
        'links.externallink': {
            'Meta': {'ordering': "['title']", 'object_name': 'ExternalLink'},
            'description': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'external_site': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalSite']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['links.LinkType']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'links.externalsite': {
            'Meta': {'ordering': "['domain']", 'object_name': 'ExternalSite'},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            u'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            u'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            u'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            u'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'links.linktype': {
            'Meta': {'object_name': 'LinkType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'scheme': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'sites.site': {
            'Meta': {'ordering': "('domain',)", 'object_name': 'Site', 'db_table': "'django_site'"},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'vacancies_and_studentships.studentship': {
            'Meta': {'ordering': "['-date']", 'object_name': 'Studentship'},
            'body': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'date': ('django.db.models.fields.DateField', [], {}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'studentship_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'hosted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'studentship_hosted_events'", 'on_delete': 'models.SET_DEFAULT', 'default': 'None', 'to': "orm['contacts_and_people.Entity']", 'blank': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'importance': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'in_lists': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'please_contact': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'studentship_person'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'publish_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'studentship_publish_to'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Entity']"}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'short_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {}),
            'supervisors': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'studentship_people'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
        },
        'vacancies_and_studentships.vacanciesplugin': {
            'Meta': {'object_name': 'VacanciesPlugin', 'db_table': "'cmsplugin_vacanciesplugin'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'display': ('django.db.models.fields.CharField', [], {'default': "'vacancies & studentships'", 'max_length': '25'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'vacanciesplugin_plugin'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'format': ('django.db.models.fields.CharField', [], {'default': "'details image'", 'max_length': '25'}),
            'group_dates': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'heading_level': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '3'}),
            'layout': ('django.db.models.fields.CharField', [], {'default': "'sidebyside'", 'max_length': '25'}),
            'limit_to': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '5', 'null': 'True', 'blank': 'True'}),
            'list_format': ('django.db.models.fields.CharField', [], {'default': "'vertical'", 'max_length': '25'}),
            'order_by': ('django.db.models.fields.CharField', [], {'default': "'importance/date'", 'max_length': '25'}),
            'studentships_heading_text': ('django.db.models.fields.CharField', [], {'default': "'Studentships'", 'max_length': '25'}),
            'vacancies_heading_text': ('django.db.models.fields.CharField', [], {'default': "'Vacancies'", 'max_length': '25'})
        },
        'vacancies_and_studentships.vacancy': {
            'Meta': {'object_name': 'Vacancy'},
            'body': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'date': ('django.db.models.fields.DateField', [], {}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'vacancy_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'hosted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'vacancy_hosted_events'", 'on_delete': 'models.SET_DEFAULT', 'default': 'None', 'to': "orm['contacts_and_people.Entity']", 'blank': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'importance': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'in_lists': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'job_number': ('django.db.models.fields.CharField', [], {'max_length': '9'}),
            'please_contact': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'vacancy_person'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'publish_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'vacancy_publish_to'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Entity']"}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'salary': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'short_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['vacancies_and_studentships']
########NEW FILE########
__FILENAME__ = 0004_auto__del_field_studentship_url__del_field_vacancy_url
# -*- coding: utf-8 -*-
from south.utils import datetime_utils as datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Deleting field 'Studentship.url'
        db.delete_column('vacancies_and_studentships_studentship', 'url')

        # Deleting field 'Vacancy.url'
        db.delete_column('vacancies_and_studentships_vacancy', 'url')


    def backwards(self, orm):
        # Adding field 'Studentship.url'
        db.add_column('vacancies_and_studentships_studentship', 'url',
                      self.gf('django.db.models.fields.URLField')(max_length=200, null=True, blank=True),
                      keep_default=False)

        # Adding field 'Vacancy.url'
        db.add_column('vacancies_and_studentships_vacancy', 'url',
                      self.gf('django.db.models.fields.URLField')(max_length=200, null=True, blank=True),
                      keep_default=False)


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2014, 3, 15, 0, 0)'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.page': {
            'Meta': {'ordering': "('site', 'tree_id', 'lft')", 'object_name': 'Page'},
            'changed_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'created_by': ('django.db.models.fields.CharField', [], {'max_length': '70'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'in_navigation': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'limit_visibility_in_menu': ('django.db.models.fields.SmallIntegerField', [], {'default': 'None', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
            'login_required': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'moderator_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '1', 'blank': 'True'}),
            'navigation_extenders': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '80', 'null': 'True', 'blank': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['cms.Page']"}),
            'placeholders': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['cms.Placeholder']", 'symmetrical': 'False'}),
            'publication_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'publication_end_date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True', 'null': 'True', 'blank': 'True'}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'publisher_is_draft': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'publisher_public': ('django.db.models.fields.related.OneToOneField', [], {'related_name': "'publisher_draft'", 'unique': 'True', 'null': 'True', 'to': "orm['cms.Page']"}),
            'publisher_state': ('django.db.models.fields.SmallIntegerField', [], {'default': '0', 'db_index': 'True'}),
            'reverse_id': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '40', 'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sites.Site']"}),
            'soft_root': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'template': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contacts_and_people.building': {
            'Meta': {'ordering': "('site', 'street', 'number', 'name')", 'object_name': 'Building'},
            'access_and_parking': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_access_and_parking'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'additional_street_address': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'building_description'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'getting_here': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'getting_here'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'latitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'longitude': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'map': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '10', 'blank': 'True'}),
            'postcode': ('django.db.models.fields.CharField', [], {'max_length': '9', 'null': 'True', 'blank': 'True'}),
            'site': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'place'", 'on_delete': 'models.PROTECT', 'to': "orm['contacts_and_people.Site']"}),
            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '255', 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'street': ('django.db.models.fields.CharField', [], {'max_length': '100', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {'default': "''", 'max_length': '256'}),
            'zoom': ('django.db.models.fields.IntegerField', [], {'default': '17', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.entity': {
            'Meta': {'ordering': "['tree_id', 'lft']", 'object_name': 'Entity', '_ormbases': ['contacts_and_people.EntityLite']},
            'abstract_entity': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'auto_contacts_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_news_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_publications_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'auto_vacancies_page': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'building_recapitulates_entity_name': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'contacts_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'contacts_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'contacts_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Contacts & people'", 'max_length': '50'}),
            'display_parent': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entitylite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.EntityLite']", 'unique': 'True', 'primary_key': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'entity_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'news_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'news_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'news_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'News & events'", 'max_length': '50'}),
            'parent': ('mptt.fields.TreeForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['contacts_and_people.Entity']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'publications_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Publications'", 'max_length': '50'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'short_name': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'vacancies_page_intro': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'vacancies_page_intro'", 'null': 'True', 'to': "orm['cms.Placeholder']"}),
            'vacancies_page_menu_title': ('django.db.models.fields.CharField', [], {'default': "'Vacancies & studentships'", 'max_length': '50'}),
            'website': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'entity'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['cms.Page']", 'blank': 'True', 'unique': 'True'})
        },
        'contacts_and_people.entitylite': {
            'Meta': {'object_name': 'EntityLite'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'contacts_and_people.membership': {
            'Meta': {'ordering': "('-importance_to_entity', 'person__surname')", 'object_name': 'Membership'},
            'display_role': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'display_roles'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Membership']"}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'members'", 'to': "orm['contacts_and_people.Entity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'importance_to_entity': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'importance_to_person': ('django.db.models.fields.IntegerField', [], {'default': '1', 'null': 'True', 'blank': 'True'}),
            'key_contact': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'person': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_of'", 'to': "orm['contacts_and_people.Person']"}),
            'role': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'})
        },
        'contacts_and_people.person': {
            'Meta': {'ordering': "['surname', 'given_name', 'user']", 'object_name': 'Person', '_ormbases': ['contacts_and_people.PersonLite']},
            'access_note': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'building': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Building']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'data_feed_locked': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'description': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
            'entities': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'people'", 'to': "orm['contacts_and_people.Entity']", 'through': "orm['contacts_and_people.Membership']", 'blank': 'True', 'symmetrical': 'False', 'null': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'person_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'institutional_username': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'override_entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'people_override'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'personlite_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['contacts_and_people.PersonLite']", 'unique': 'True', 'primary_key': 'True'}),
            'please_contact': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'contact_for'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Person']"}),
            'precise_location': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'staff_id': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'person_user'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['auth.User']", 'blank': 'True', 'unique': 'True'})
        },
        'contacts_and_people.personlite': {
            'Meta': {'object_name': 'PersonLite'},
            'given_name': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'middle_names': ('django.db.models.fields.CharField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}),
            'surname': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'title': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contacts_and_people.Title']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'})
        },
        'contacts_and_people.phonecontact': {
            'Meta': {'ordering': "('label',)", 'object_name': 'PhoneContact'},
            'area_code': ('django.db.models.fields.CharField', [], {'default': "'029'", 'max_length': '5'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'country_code': ('django.db.models.fields.CharField', [], {'default': "'44'", 'max_length': '5'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'internal_extension': ('django.db.models.fields.CharField', [], {'max_length': '6', 'null': 'True', 'blank': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
            'number': ('django.db.models.fields.CharField', [], {'max_length': '12'}),
            'object_id': ('django.db.models.fields.IntegerField', [], {'db_index': 'True'})
        },
        'contacts_and_people.site': {
            'Meta': {'ordering': "('country', 'site_name', 'post_town')", 'object_name': 'Site'},
            'country': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'description': ('django.db.models.fields.TextField', [], {'max_length': '500', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'post_town': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'site_name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contacts_and_people.title': {
            'Meta': {'ordering': "['title']", 'object_name': 'Title'},
            'abbreviation': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '20'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '255', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.image': {
            'Meta': {'object_name': 'Image', '_ormbases': ['filer.File']},
            '_height': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            '_width': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'author': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_taken': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'default_alt_text': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'default_caption': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'}),
            'must_always_publish_author_credit': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'must_always_publish_copyright': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'subject_location': ('django.db.models.fields.CharField', [], {'default': 'None', 'max_length': '64', 'null': 'True', 'blank': 'True'})
        },
        'links.externallink': {
            'Meta': {'ordering': "['title']", 'object_name': 'ExternalLink'},
            'description': ('django.db.models.fields.TextField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'external_site': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalSite']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'links'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['links.LinkType']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'links.externalsite': {
            'Meta': {'ordering': "['domain']", 'object_name': 'ExternalSite'},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '256', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['links.ExternalSite']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'site': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'links.linktype': {
            'Meta': {'object_name': 'LinkType'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
            'scheme': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '50'})
        },
        'sites.site': {
            'Meta': {'ordering': "('domain',)", 'object_name': 'Site', 'db_table': "'django_site'"},
            'domain': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'vacancies_and_studentships.studentship': {
            'Meta': {'object_name': 'Studentship'},
            'body': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'date': ('django.db.models.fields.DateField', [], {}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'studentship_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'hosted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'studentship_hosted_events'", 'on_delete': 'models.SET_DEFAULT', 'default': 'None', 'to': "orm['contacts_and_people.Entity']", 'blank': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'importance': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'in_lists': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'please_contact': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'studentship_person'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'publish_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'studentship_publish_to'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Entity']"}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'short_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {}),
            'supervisors': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'studentship_people'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'vacancies_and_studentships.vacanciesplugin': {
            'Meta': {'object_name': 'VacanciesPlugin', 'db_table': "'cmsplugin_vacanciesplugin'", '_ormbases': ['cms.CMSPlugin']},
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'display': ('django.db.models.fields.CharField', [], {'default': "'vacancies & studentships'", 'max_length': '25'}),
            'entity': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'vacanciesplugin_plugin'", 'null': 'True', 'on_delete': 'models.SET_NULL', 'to': "orm['contacts_and_people.Entity']"}),
            'format': ('django.db.models.fields.CharField', [], {'default': "'details image'", 'max_length': '25'}),
            'group_dates': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'heading_level': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '3'}),
            'layout': ('django.db.models.fields.CharField', [], {'default': "'sidebyside'", 'max_length': '25'}),
            'limit_to': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '5', 'null': 'True', 'blank': 'True'}),
            'list_format': ('django.db.models.fields.CharField', [], {'default': "'vertical'", 'max_length': '25'}),
            'order_by': ('django.db.models.fields.CharField', [], {'default': "'importance/date'", 'max_length': '25'}),
            'studentships_heading_text': ('django.db.models.fields.CharField', [], {'default': "'Studentships'", 'max_length': '25'}),
            'vacancies_heading_text': ('django.db.models.fields.CharField', [], {'default': "'Vacancies'", 'max_length': '25'})
        },
        'vacancies_and_studentships.vacancy': {
            'Meta': {'ordering': "['date']", 'object_name': 'Vacancy'},
            'body': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'date': ('django.db.models.fields.DateField', [], {}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'external_url': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'vacancy_item'", 'null': 'True', 'on_delete': 'models.PROTECT', 'to': "orm['links.ExternalLink']"}),
            'hosted_by': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'vacancy_hosted_events'", 'on_delete': 'models.SET_DEFAULT', 'default': 'None', 'to': "orm['contacts_and_people.Entity']", 'blank': 'True', 'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'image': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Image']", 'null': 'True', 'on_delete': 'models.SET_NULL', 'blank': 'True'}),
            'importance': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
            'in_lists': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
            'job_number': ('django.db.models.fields.CharField', [], {'max_length': '9'}),
            'please_contact': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'vacancy_person'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Person']"}),
            'publish_to': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'vacancy_publish_to'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['contacts_and_people.Entity']"}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),
            'salary': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'short_title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'blank': 'True'}),
            'summary': ('django.db.models.fields.TextField', [], {}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        }
    }

    complete_apps = ['vacancies_and_studentships']
########NEW FILE########
__FILENAME__ = mixins
from models import Vacancy, Studentship

class VacancyStudentshipPluginMixin(object):
    def other_links(self, instance, this_list):
        raise Exception

        return this_list
            
    def events_style_other_links(self, instance, this_list):
        kind = this_list["heading_text"].lower()    
        this_list["other_items"] = []
        if instance.view == "current":
            if instance.previous_items or instance.forthcoming_items:
                if instance.limit_to and len(instance.items) > instance.limit_to:
                    if instance.forthcoming_items.count() > instance.limit_to:
                        this_list["other_items"].append({
                            "link":instance.entity.get_auto_page_url("all-open-%s" %kind), 
                            "title":"All open %s" %kind,  
                            "count": instance.forthcoming_items.count(),}
                            )
            if instance.previous_items:
                this_list["other_items"].append({
                    "link":instance.entity.get_auto_page_url("archived-%s" %kind), 
                    "title":"Archived %s" %kind,
                    "count": instance.previous_items.count(),}
                    )    
                
        elif instance.view == "archive":
                
            if instance.forthcoming_items:
                this_list["other_items"] = [{
                    "link":instance.entity.get_auto_page_url("current-%s" %kind), 
                    "title":"All open %s" %kind,  
                    "count": instance.forthcoming_items.count(),}]                
        return this_list

    def get_items(self, instance):
        self.lists = []
        if "vacancies" in instance.display:
            this_list = {"model": Vacancy,}
            this_list["items"] = Vacancy.objects.get_items(instance)
            # this_list["other_items"] = []
            this_list["links_to_other_items"] = self.events_style_other_links
            this_list["heading_text"] = instance.vacancies_heading_text
            this_list["item_template"] = "arkestra/universal_plugin_list_item.html"
            self.lists.append(this_list)
            # print "**", this_list

        if "studentships" in instance.display:
            this_list = {"model": Studentship,}
            this_list["items"] = Studentship.objects.get_items(instance)
            # this_list["other_items"] = []
            this_list["links_to_other_items"] = self.events_style_other_links
            this_list["heading_text"] = instance.studentships_heading_text
            this_list["item_template"] = "arkestra/universal_plugin_list_item.html"
            self.lists.append(this_list)

########NEW FILE########
__FILENAME__ = models
from django.db import models

from cms.models import CMSPlugin

from arkestra_utilities.generic_models import ArkestraGenericPluginOptions, ArkestraGenericModel
from arkestra_utilities.mixins import URLModelMixin
from arkestra_utilities.settings import PLUGIN_HEADING_LEVELS, PLUGIN_HEADING_LEVEL_DEFAULT
from arkestra_utilities.output_libraries.dates import nice_date

from contacts_and_people.models import Entity, Person #, default_entity_id


class VacancyStudentshipBase(ArkestraGenericModel, URLModelMixin):
    class Meta:
        abstract = True
        ordering = ['date']

    date = models.DateField()

    description = models.TextField(null=True, blank=True,
        help_text="No longer used")

    auto_page_view_name = "vacancies-and-studentships"

    @property
    def get_when(self):
        """
        get_when provides a human-readable attribute under which items can be
        grouped. Usually, this is an easily-readble rendering of the date (e.g.
        "April 2010") but it can also be "Top news", for items to be given
        special prominence.
        """
        try:
            # The render function of CMSNewsAndEventsPlugin can set a temporary sticky attribute for Top news items
            if self.sticky:
                return "Top items"
        except AttributeError:
            pass

        date_format = "F Y"
        get_when = nice_date(self.date, date_format)
        return get_when


class Vacancy(VacancyStudentshipBase):
    view_name = "vacancy"

    job_number = models.CharField(max_length=9)
    salary = models.CharField(blank=True, max_length=255, null=True,
        help_text=u"Please include currency symbol")

    class Meta(VacancyStudentshipBase.Meta):
        verbose_name_plural = "vacancies"


class Studentship(VacancyStudentshipBase):
    view_name = "studentship"

    supervisors = models.ManyToManyField(Person, null=True, blank=True,
        related_name="%(class)s_people")

    class Meta:
        verbose_name_plural = "studentships"

class VacanciesPlugin(CMSPlugin, ArkestraGenericPluginOptions):
    DISPLAY = (
        (u"vacancies & studentships", u"Vacancies and studentships"),
        (u"vacancies", u"Vacancies only"),
        (u"studentships", u"Studentships only"),
    )
    display = models.CharField(max_length=25,choices=DISPLAY, default="vacancies & studentships")
    # entity = models.ForeignKey(Entity, null=True, blank=True,
    #     help_text="Leave blank for autoselect", related_name="%(class)s_plugin")
    vacancies_heading_text = models.CharField(max_length=25, default="Vacancies")
    studentships_heading_text = models.CharField(max_length=25, default="Studentships")
########NEW FILE########
__FILENAME__ = vacancies_and_studentships_tags
from django import template
from vacancies_and_studentships.models import Studentship, Vacancy, VacanciesPlugin
from entity_tags import work_out_entity, entity_for_page

from vacancies_and_studentships.cms_plugins import CMSVacanciesPlugin

from cms.models import Page
from django.db.models import Q

register = template.Library()

@register.inclusion_tag('vacancies_and_studentships_list.html', takes_context=True)
def vacancies_and_studentships(context, heading=3, format=0, max_items=20, entity=None):
    """
    Depends on Cardiff's row/column CSS
    Publishes a date-ordered list of vacancies and studentships
    {% vacancies_and_studentships format max_items %}
    """        
    instance = VacanciesPlugin()
        
    if not entity:
        entity = work_out_entity(context, entity)
    
    instance.entity = entity
    instance.heading_level = heading
    instance.display = 0
    instance.limit_to = max_items
    instance.format = format
    
    nep = CMSVacanciesPlugin()
    
    nep.render(context, instance, None)
    
    return context
    """
    if not entity:
        entity = work_out_entity(context, entity)
    vacancies = Vacancy.objects.filter(
        Q(hosted_by__in=entity.get_descendants(include_self = True)) | Q(also_advertise_on__in=entity.get_descendants(include_self = True))
        )
    studentships = Studentship.objects.filter(
        Q(hosted_by__in=entity.get_descendants(include_self = True)) | Q(also_advertise_on__in=entity.get_descendants(include_self = True))
        )
    cols = "columns1"
    vacancies_class = studentships_class = "firstcolumn"
    if vacancies and studentships:
        cols="columns2"
        vacancies_class = "firstcolumn"
        studentships_class = "lastcolumn"
    more_vacancies = False
    if len(vacancies) > max_items:
        more_vacancies = True 
    more_studentships = False
    if len(studentships) > max_items:
        more_studentships = True        
    return {
        'cols': cols,
        'vacancies_class': vacancies_class,
        'studentships_class': studentships_class,
        'more_vacancies': more_vacancies,
        'more_studentships': more_studentships,
        'vacancies': vacancies[0: max_items],
        'studentships': studentships[0: max_items],
        'format': format,
        'entity': entity,
        'heading': heading,
        }
    """
    
@register.inclusion_tag('vacancylist.html', takes_context=True)
def vacancies(context, entity=None, max_items=20):
    """
    Publishes a date-ordered list of vacancies
    """
    entity = work_out_entity(context, entity)
    vacancies = gather_vacancies(entity)
    return {
        'vacancies': vacancies,
        }

@register.inclusion_tag('studentshiplist.html', takes_context=True)
def studentships(context, entity=None, max_items=20):
    """
    Publishes a date-ordered list of studentships
    """
    entity = work_out_entity(context, entity)
    studentships = gather_studentships(entity)
    return {
        'studentships': studentships,
        }



@register.inclusion_tag('listofvacancies.html', takes_context=True)
def list_vacancies_for_entity(context, page):
    entity = entity_for_page(page)
    if entity:
        vacancies = gather_vacancies(entity)
        return {
            'vacancies': vacancies,
            }
    else:
        return {
            'vacancies': ["no","vacancies",]
            }

@register.inclusion_tag('listofstudentships.html', takes_context=True)
def list_studentships_for_entity(context, page):
   entity = entity_for_page(page)
   if entity:
       studentships = gather_studentships(entity)
       return {
           'studentships': studentships,
           }
   else:
       return {
           'studentships': ["no","studentships",]
           }

def gather_vacancies(entity):
    vacancylist = Vacancy.objects.filter(
        Q(hosted_by__in=entity.get_descendants(include_self=True)) |
        Q(also_advertise_on__in=entity.get_descendants(include_self=True))
    )
    return vacancylist

def gather_studentships(entity):
    studentshiplist = Studentship.objects.filter(
        Q(hosted_by__in=entity.get_descendants(include_self=True)) |
        Q(also_advertise_on__in=entity.get_descendants(include_self=True))
    )
    """for item in studentshiplist:
        # print item
    
    studentshiplist = set()
    for entity in entity.get_descendants(include_self = True):
        studentshiplist.update(entity.studentship_set.all())
        studentshiplist.update(entity.studentship_advertise_on.all())"""
    
    return studentshiplist

########NEW FILE########
__FILENAME__ = tests
from datetime import datetime, timedelta

from django.test import TestCase
from django.test.client import Client
from django.test.utils import override_settings

from django.conf import settings
from django.contrib.auth.models import User
from django.core.urlresolvers import reverse
from django.http import HttpRequest, QueryDict


from cms.api import create_page

from contacts_and_people.models import Person

from models import Vacancy, Studentship
from lister import (
    List, VacanciesAndStudentshipsPluginLister, FilterList
    )

from contacts_and_people.models import Entity

class VacanciesTests(TestCase):
    def setUp(self):
        # Every test needs a client.
        self.client = Client()

        self.toothjob = Vacancy(
            title = "Pulling teeth",
            slug = "pulling-teeth",
            date = datetime.now() + timedelta(days=30),
            )

    def test_generic_attributes(self):
        self.toothjob.save()
        # the item has no informative content
        self.assertEqual(self.toothjob.is_uninformative, True)

        # there are no Entities in the database, so this can't be hosted_by anything
        self.assertEqual(self.toothjob.hosted_by, None)

        # since there are no Entities in the database, default to settings's template
        self.assertEqual(self.toothjob.get_template, settings.CMS_TEMPLATES[0][0])

    def test_date_related_attributes(self):
        self.toothjob.date = datetime(year=2012, month=12, day=12)
        self.assertEqual(self.toothjob.get_when, "December 2012")

    def test_link_to_more(self):
        self.assertEqual(
            self.toothjob.auto_page_view_name,
            "vacancies-and-studentships"
            )
        self.toothjob.hosted_by = Entity(slug="slug")
        self.assertEqual(
            self.toothjob.link_to_more(),
            "/vacancies-and-studentships/slug/"
            )


@override_settings(CMS_TEMPLATES = (('null.html', "Null"),))
class VacanciesItemsViewsTests(TestCase):
    def setUp(self):
        # Every test needs a client.
        self.client = Client()

        # create a vacancy item
        self.toothjob = Vacancy(
            title = "Pulling teeth",
            slug = "pulling-teeth",
            date = datetime.now() + timedelta(days=30),
            )

        self.adminuser = User.objects.create_user('arkestra', 'arkestra@example.com', 'arkestra')
        self.adminuser.is_staff=True
        self.adminuser.save()

    # vacancy tests
    def test_unpublished_vacancy_404(self):
        self.toothjob.save()

        # Issue a GET request.
        response = self.client.get('/vacancy/pulling-teeth/')

        # Check that the response is 404 because it's not published
        self.assertEqual(response.status_code, 404)

    def test_unpublished_vacancy_200_for_admin(self):
        self.toothjob.save()

        # log in a staff user
        self.client.login(username='arkestra', password='arkestra')
        response = self.client.get('/vacancy/pulling-teeth/')
        self.assertEqual(response.status_code, 200)

    def test_published_vacancy_200_for_everyone(self):
        self.toothjob.published = True
        self.toothjob.save()

        # Check that the response is 200 OK.
        response = self.client.get('/vacancy/pulling-teeth/')
        self.assertEqual(response.status_code, 200)

    def test_published_vacancy_context(self):
        self.toothjob.published = True
        self.toothjob.save()
        response = self.client.get('/vacancy/pulling-teeth/')
        self.assertEqual(response.context['vacancy'], self.toothjob)


@override_settings(CMS_TEMPLATES = (('null.html', "Null"),))
class StudentshipsItemsViewsTests(TestCase):
    def setUp(self):
        # Every test needs a client.
        self.client = Client()

        # create a studentship item
        self.toothjob = Studentship(
            title = "Pulling teeth",
            slug = "pulling-teeth",
            date = datetime.now() + timedelta(days=30),
            )

        self.adminuser = User.objects.create_user('arkestra', 'arkestra@example.com', 'arkestra')
        self.adminuser.is_staff=True
        self.adminuser.save()

    # studentship tests
    def test_unpublished_studentship_404(self):
        self.toothjob.save()

        # Issue a GET request.
        response = self.client.get('/studentship/pulling-teeth/')

        # Check that the response is 404 because it's not published
        self.assertEqual(response.status_code, 404)

    def test_unpublished_studentship_200_for_admin(self):
        self.toothjob.save()

        # log in a staff user
        self.client.login(username='arkestra', password='arkestra')
        response = self.client.get('/studentship/pulling-teeth/')
        self.assertEqual(response.status_code, 200)

    def test_published_studentship_200_for_everyone(self):
        self.toothjob.published = True
        self.toothjob.save()

        # Check that the response is 200 OK.
        response = self.client.get('/studentship/pulling-teeth/')
        self.assertEqual(response.status_code, 200)

    def test_published_studentship_context(self):
        self.toothjob.published = True
        self.toothjob.save()
        response = self.client.get('/studentship/pulling-teeth/')
        self.assertEqual(response.context['studentship'], self.toothjob)


class ReverseURLsTests(TestCase):
    def test_vacancy_reverse_url(self):
        self.assertEqual(
            reverse("vacancy", kwargs={"slug": "tooth-puller"}),
            "/vacancy/tooth-puller/"
            )

    def test_studentship_reverse_url(self):
        self.assertEqual(
            reverse("studentship", kwargs={"slug": "tooth-puller"}),
            "/studentship/tooth-puller/"
            )

    def test_archived_vacancies_base_reverse_url(self):
        self.assertEqual(
            reverse("vacancies-archive"),
            "/archived-vacancies/"
            )

    def test_archived_vacancies_reverse_url(self):
        self.assertEqual(
            reverse("vacancies-archive", kwargs={"slug": "some-slug"}),
            "/archived-vacancies/some-slug/"
            )

    def test_current_vacancies_base_reverse_url(self):
        self.assertEqual(
            reverse("vacancies-current"),
            "/vacancies/"
            )

    def test_current_vacancies_reverse_url(self):
        self.assertEqual(
            reverse("vacancies-current", kwargs={"slug": "some-slug"}),
            "/vacancies/some-slug/"
            )

    def test_archived_studentships_base_reverse_url(self):
        self.assertEqual(
            reverse("studentships-archive"),
            "/archived-studentships/"
            )

    def test_archived_studentships_reverse_url(self):
        self.assertEqual(
            reverse("studentships-archive", kwargs={"slug": "some-slug"}),
            "/archived-studentships/some-slug/"
            )

    def test_current_studentships_base_reverse_url(self):
        self.assertEqual(
            reverse("studentships-current"),
            "/studentships/"
            )

    def test_current_studentships_reverse_url(self):
        self.assertEqual(
            reverse("studentships-current", kwargs={"slug": "some-slug"}),
            "/studentships/some-slug/"
            )

    def test_base_reverse_url(self):
        self.assertEqual(
            reverse("vacancies-and-studentships"),
            "/vacancies-and-studentships/"
            )

    def test_reverse_url(self):
        self.assertEqual(
            reverse("vacancies-and-studentships", kwargs={"slug": "some-slug"}),
            "/vacancies-and-studentships/some-slug/"
            )


@override_settings(CMS_TEMPLATES = (('null.html', "Null"),))
class VacanciesStudentshipsEntityPagesViewsTests(TestCase):
    def setUp(self):
        # Every test needs a client.
        self.client = Client()

        home_page = create_page(
            "School home page",
            "null.html",
            "en",
            published=True
            )

        self.school = Entity(
            name="School of Medicine",
            slug="medicine",
            auto_vacancies_page=True,
            website=home_page
            )


    # entity vacancies and studentships URLs - has vacancies and studentships pages
    def test_main_url(self):
        self.school.save()
        response = self.client.get('/vacancies-and-studentships/')
        self.assertEqual(response.status_code, 200)

    def test_entity_url(self):
        self.school.save()
        response = self.client.get('/vacancies-and-studentships/medicine/')
        self.assertEqual(response.status_code, 200)

    def test_bogus_entity_url(self):
        self.school.save()
        response = self.client.get('/vacancies-and-studentships/xxxx/')
        self.assertEqual(response.status_code, 404)

    def test_main_archive_url(self):
        self.school.save()
        response = self.client.get('/archived-vacancies/')
        self.assertEqual(response.status_code, 200)

    def test_entity_vacancies_archive_url(self):
        self.school.save()
        response = self.client.get('/archived-vacancies/medicine/')
        self.assertEqual(response.status_code, 200)

    def test_bogus_entity_vacancies_archive_url(self):
        self.school.save()
        response = self.client.get('/archived-vacancies/xxxx/')
        self.assertEqual(response.status_code, 404)

    def test_main_archived_studentships_url(self):
        self.school.save()
        response = self.client.get('/archived-studentships/')
        self.assertEqual(response.status_code, 200)

    def test_entity_archived_studentships_url(self):
        self.school.save()
        response = self.client.get('/archived-studentships/medicine/')
        self.assertEqual(response.status_code, 200)

    def test_bogus_entity_archived_studentships_url(self):
        self.school.save()
        response = self.client.get('/archived-studentships/xxxx/')
        self.assertEqual(response.status_code, 404)

    def test_main_all_current_studentships_url(self):
        self.school.save()
        response = self.client.get('/studentships/')
        self.assertEqual(response.status_code, 200)

    def test_entity_all_current_studentships_url(self):
        self.school.save()
        response = self.client.get('/studentships/medicine/')
        self.assertEqual(response.status_code, 200)

    def test_bogus_entity_all_current_studentships_url(self):
        self.school.save()
        response = self.client.get('/current-studentships/xxx/')
        self.assertEqual(response.status_code, 404)

    # entity vacancies and studentships URLs - no vacancies and studentships pages
    def test_no_auto_page_main_url(self):
        self.school.auto_vacancies_page = False
        self.school.save()
        response = self.client.get('/vacancies-and-studentships/')
        self.assertEqual(response.status_code, 404)

    def test_no_auto_page_entity_url(self):
        self.school.auto_vacancies_page= False
        self.school.save()
        response = self.client.get('/vacancies-and-studentships/medicine/')
        self.assertEqual(response.status_code, 404)

    def test_no_auto_page_bogus_entity_url(self):
        self.school.auto_vacancies_page= False
        self.school.save()
        response = self.client.get('/vacancies-and-studentships/xxxx/')
        self.assertEqual(response.status_code, 404)

    def test_no_auto_page_main_archive_url(self):
        self.school.auto_vacancies_page= False
        self.school.save()
        response = self.client.get('/archived-vacancies/')
        self.assertEqual(response.status_code, 404)

    def test_no_auto_page_entity_vacancies_archive_url(self):
        self.school.auto_vacancies_page= False
        self.school.save()
        response = self.client.get('/archived-vacancies/medicine/')
        self.assertEqual(response.status_code, 404)

    def test_no_auto_page_bogus_entity_vacancies_archive_url(self):
        self.school.auto_vacancies_page= False
        self.school.save()
        response = self.client.get('/archived-vacancies/xxxx/')
        self.assertEqual(response.status_code, 404)

    def test_no_auto_page_main_archived_studentships_url(self):
        self.school.auto_vacancies_page= False
        self.school.save()
        response = self.client.get('/studentships-archive/')
        self.assertEqual(response.status_code, 404)

    def test_no_auto_page_entity_archived_studentships_url(self):
        self.school.auto_vacancies_page= False
        self.school.save()
        response = self.client.get('/studentships-archive/medicine/')
        self.assertEqual(response.status_code, 404)

    def test_no_auto_page_bogus_entity_archived_studentships_url(self):
        self.school.auto_vacancies_page= False
        self.school.save()
        response = self.client.get('/studentships-archive/xxxx/')
        self.assertEqual(response.status_code, 404)

    def test_no_auto_page_main_all_current_studentships_url(self):
        self.school.auto_vacancies_page= False
        self.school.save()
        response = self.client.get('/current-studentships/')
        self.assertEqual(response.status_code, 404)

    def test_no_auto_page_entity_all_current_studentships_url(self):
        self.school.auto_vacancies_page = False
        self.school.save()
        response = self.client.get('/current-studentships/medicine/')
        self.assertEqual(response.status_code, 404)

    def test_no_auto_page_bogus_entity_all_current_studentships_url(self):
        self.school.auto_vacancies_page= False
        self.school.save()
        response = self.client.get('/current-studentships/xxx/')
        self.assertEqual(response.status_code, 404)

    # entity vacancies and studentships URLs - no entity home page
    def test_no_entity_home_page_main_url(self):
        self.school.website = None
        self.school.save()
        response = self.client.get('/vacancies-and-studentships/')
        self.assertEqual(response.status_code, 404)

    def test_no_entity_home_page_entity_url(self):
        self.school.website = None
        self.school.save()
        response = self.client.get('/vacancies-and-studentships/medicine/')
        self.assertEqual(response.status_code, 404)

    def test_no_entity_home_page_bogus_entity_url(self):
        self.school.website = None
        self.school.save()
        response = self.client.get('/vacancies-and-studentships/xxxx/')
        self.assertEqual(response.status_code, 404)

    def test_no_entity_home_page_main_archive_url(self):
        self.school.website = None
        self.school.save()
        response = self.client.get('/archived-vacancies/')
        self.assertEqual(response.status_code, 404)

    def test_no_entity_home_page_entity_vacancies_archive_url(self):
        self.school.website = None
        self.school.save()
        response = self.client.get('/archived-vacancies/medicine/')
        self.assertEqual(response.status_code, 404)

    def test_no_entity_home_page_bogus_entity_vacancies_archive_url(self):
        self.school.website = None
        self.school.save()
        response = self.client.get('/archived-vacancies/xxxx/')
        self.assertEqual(response.status_code, 404)

    def test_no_entity_home_page_main_archived_studentships_url(self):
        self.school.website = None
        self.school.save()
        response = self.client.get('/studentships-archive/')
        self.assertEqual(response.status_code, 404)

    def test_no_entity_home_page_entity_archived_studentships_url(self):
        self.school.website = None
        self.school.save()
        response = self.client.get('/studentships-archive/medicine/')
        self.assertEqual(response.status_code, 404)

    def test_no_entity_home_page_bogus_entity_archived_studentships_url(self):
        self.school.website = None
        self.school.save()
        response = self.client.get('/studentships-archive/xxxx/')
        self.assertEqual(response.status_code, 404)

    def test_no_entity_home_page_main_all_current_studentships_url(self):
        self.school.website = None
        self.school.save()
        response = self.client.get('/current-studentships/')
        self.assertEqual(response.status_code, 404)

    def test_no_entity_home_page_entity_all_current_studentships_url(self):
        self.school.website = None
        self.school.save()
        response = self.client.get('/current-studentships/medicine/')
        self.assertEqual(response.status_code, 404)

    def test_no_entity_home_page_bogus_entity_all_current_studentships_url(self):
        self.school.website = None
        self.school.save()
        response = self.client.get('/current-studentships/xxx/')
        self.assertEqual(response.status_code, 404)


class ListTests(TestCase):
    def setUp(self):
        self.item1 = Vacancy(
            title="closes today, less important",
            in_lists=True,
            published=True,
            date=datetime.now()
            )
        self.item1.save()

        self.item2 = Vacancy(
            title="closed 20 days ago, important",
            summary="a job for today",
            in_lists=True,
            published=True,
            date=datetime.now()-timedelta(days=20),
            importance=3,
            slug="item2"
            )
        self.item2.save()

        self.item3 = Vacancy(
            title="closes in the future",
            in_lists=True,
            published=True,
            date=datetime.now()+timedelta(days=20),
            importance=3,
            slug="item3"
            )
        self.item3.save()

        self.itemlist = List()
        self.itemlist.model = Vacancy
        self.itemlist.items = Vacancy.objects.all()

    def test_all_items_order(self):
        self.assertEqual(
            list(self.itemlist.items),
            [self.item2, self.item1, self.item3]
            )

    def test_reorder_by_importance_date_only(self):
        # check the re-ordered items are not changed
        self.itemlist.re_order_by_importance()
        self.assertEqual(
            list(self.itemlist.items),
            [self.item2, self.item1, self.item3]
            )

    def test_reorder_by_importance_date_makes_no_difference(self):
        # check that items are re-ordered by importance
        self.itemlist.order_by = "importance/date"
        self.itemlist.re_order_by_importance()

        self.assertEqual(
            list(self.itemlist.items),
            [self.item2, self.item1, self.item3]
            )

    def test_truncate_items(self):
        # check that items are re-ordered by importance
        self.itemlist.limit_to = 1
        self.itemlist.truncate_items()

        self.assertEqual(
            list(self.itemlist.items),
            [self.item2]
            )

    def test_set_items_for_person(self):
        p = Person()
        p.save()
        self.item1.please_contact.add(p)

        self.itemlist.person = p
        self.itemlist.set_items_for_person()

        self.assertEqual(
            list(self.itemlist.items),
            [self.item1]
        )

    def test_build(self):
        self.itemlist.build()
        self.assertEqual(list(self.itemlist.items), [self.item1, self.item3])

    def test_other_items(self):
        school = Entity(name="School of Medicine", short_name="Medicine")
        school.save()

        self.itemlist.entity = school
        self.itemlist.other_item_kinds = ["archived", "open", "main"]

        self.itemlist.build()

        # "main" other items are always created; the others need tests to
        # see if any exist
        self.assertEqual(
            self.itemlist.other_items(),
            [{
                'link': '/vacancies-and-studentships/',
                'title': u'Medicine vacancies & studentships',
                'css_class': 'main',
                }]
            )

        # now we save some items
        self.item1.hosted_by = school
        self.item2.hosted_by = school
        self.item3.hosted_by = school
        self.item1.save()
        self.item2.save()
        self.item3.save()

        self.itemlist.build()
        self.assertEqual(list(self.itemlist.items), [self.item1, self.item3])
        self.assertEqual(list(self.itemlist.archived), [self.item2])
        self.assertEqual(
            list(self.itemlist.other_items()),
            [{
                'count': 2,
                'link': '/vacancies/',
                'title': 'All open vacancies'
                },
            {
                'count': 1,
                'link': '/archived-vacancies/',
                'title': 'Archived vacancies'
                },
            {
                'link': '/vacancies-and-studentships/',
                'title': u'Medicine vacancies & studentships',
                'css_class': 'main',
                },
            ]
            )


class FilterListTests(TestCase):
    def setUp(self):
        self.item1 = Vacancy(
            title="closes today, less important",
            in_lists=True,
            published=True,
            date=datetime.now()
            )
        self.item1.save()

        self.item2 = Vacancy(
            title="closed 20 days ago, important",
            summary="a job for today",
            in_lists=True,
            published=True,
            date=datetime.now()-timedelta(days=20),
            importance=3,
            slug="item2"
            )
        self.item2.save()

        self.item3 = Vacancy(
            title="closes in the future",
            in_lists=True,
            published=True,
            date=datetime.now()+timedelta(days=20),
            importance=3,
            slug="item3"
            )
        self.item3.save()

        self.itemlist = FilterList()
        self.itemlist.model = Vacancy
        self.itemlist.request = HttpRequest()

    def test_filter_on_search_terms_no_terms(self):
        query = QueryDict("")
        self.itemlist.request.GET = query
        self.itemlist.build()
        self.assertEqual(
            list(self.itemlist.items),
            [self.item1, self.item3]
            )

    def test_filter_on_search_terms_1_match(self):
        query = QueryDict("text=today")
        self.itemlist.request.GET = query
        self.itemlist.build()
        self.assertEqual(
            list(self.itemlist.items),
            [self.item1]
            )


class PluginListerTests(TestCase):
    def test_other_items(self):
        lister = VacanciesAndStudentshipsPluginLister(
            entity=Entity(slug="test")
            )

        self.assertItemsEqual(
            lister.other_items(),
            [{
                'css_class': 'main',
                'link': '/vacancies-and-studentships/test/',
                'title': 'More '
            }]
        )


########NEW FILE########
__FILENAME__ = urls
from django.conf.urls.defaults import patterns, url
from vacancies_and_studentships import views

urlpatterns = patterns('vacancies_and_studentships.views',

    # vacancies and studentships items
    url(
        r"^vacancy/(?P<slug>[-\w]+)/$",
        "vacancy",
        name="vacancy"
        ),
    url(
        r"^studentship/(?P<slug>[-\w]+)/$",
        "studentship",
        name="studentship"
        ),

    # main vacancies and studentships
    url(
        r"^vacancies-and-studentships/(?:(?P<slug>[-\w]+)/)?$",
        views.VacanciesAndStudentshipsView.as_view(),
        name="vacancies-and-studentships"
        ),

    # current vacancies
    url(
        r"^vacancies/(?:(?P<slug>[-\w]+)/)?$",
        views.VacanciesCurrentView.as_view(),
        name="vacancies-current"
        ),

    # vacancies archives
    url(
        r"^archived-vacancies/(?:(?P<slug>[-\w]+)/)?$",
        views.VacanciesArchiveView.as_view(),
        name="vacancies-archive"
        ),

    # previous studentships
    url(
        r"^archived-studentships/(?:(?P<slug>[-\w]+)/)?$",
        views.StudentshipsArchiveView.as_view(),
        name="studentships-archive"
        ),

    # forthcoming studentships
    url(
        r"^studentships/(?:(?P<slug>[-\w]+)/)?$",
        views.StudentshipsForthcomingView.as_view(),
        name="studentships-current"
        ),
    )

########NEW FILE########
__FILENAME__ = views
import datetime
from django.utils.translation import ugettext as _
from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext
from django.http import Http404

from arkestra_utilities.views import ArkestraGenericView

from contacts_and_people.models import Entity

from models import Studentship, Vacancy
from lister import VacanciesAndStudentshipsCurrentLister, \
    VacanciesArchiveLister, VacanciesForthcomingLister, \
    StudentshipsArchiveLister, StudentshipsForthcomingLister


from arkestra_utilities.settings import MULTIPLE_ENTITY_MODE

class VacanciesAndStudentshipsView(ArkestraGenericView, ):
    auto_page_attribute = "auto_vacancies_page"

    def get(self, request, *args, **kwargs):
        self.get_entity()
        
        self.lister = VacanciesAndStudentshipsCurrentLister(
            entity=self.entity,
            request=self.request
            )

        self.main_page_body_file = "arkestra/generic_lister.html"
        self.meta = {"description": "Recent vacancies and forthcoming studentships",}
        self.title = unicode(self.entity) + u" vacancies & studentships"
        if MULTIPLE_ENTITY_MODE:
            self.pagetitle = unicode(self.entity) + u" vacancies & studentships"
        else:
            self.pagetitle = "Vacancies & studentships"
        
        
        return self.response(request)

class VacanciesCurrentView(ArkestraGenericView):
    auto_page_attribute = "auto_vacancies_page"

    def get(self, request, *args, **kwargs):
        self.get_entity()

        self.lister = VacanciesForthcomingLister(
            entity=self.entity,
            request=self.request
            )

        self.main_page_body_file = "arkestra/generic_filter_list.html"
        self.meta = {"description": "Searchable list of forthcoming studentships",}
        self.title = u"Forthcoming studentships for %s" % unicode(self.entity)
        self.pagetitle = u"Forthcoming studentships for %s" % unicode(self.entity)

        return self.response(request)

class VacanciesArchiveView(ArkestraGenericView):
    auto_page_attribute = "auto_vacancies_page"

    def get(self, request, *args, **kwargs):
        self.get_entity()

        self.lister = VacanciesArchiveLister(
            entity=self.entity,
            request=self.request
            )

        self.main_page_body_file = "arkestra/generic_filter_list.html"
        self.meta = {"description": "Searchable archive of vacancies items",}
        self.title = u"Vacancies archive for %s" % unicode(self.entity)
        self.pagetitle = u"Vacancies archive for %s" % unicode(self.entity)

        return self.response(request)

class StudentshipsArchiveView(ArkestraGenericView):
    auto_page_attribute = "auto_vacancies_page"

    def get(self, request, *args, **kwargs):
        self.get_entity()

        self.lister = StudentshipsArchiveLister(
            entity=self.entity,
            request=self.request
            )

        self.main_page_body_file = "arkestra/generic_filter_list.html"
        self.meta = {"description": "Searchable archive of studentships",}
        self.title = u"Studentships archive for %s" % unicode(self.entity)
        self.pagetitle = u"Studentships archive for %s" % unicode(self.entity)

        return self.response(request)


class StudentshipsForthcomingView(ArkestraGenericView):
    auto_page_attribute = "auto_vacancies_page"

    def get(self, request, *args, **kwargs):
        self.get_entity()

        self.lister = StudentshipsForthcomingLister(
            entity=self.entity,
            request=self.request
            )

        self.main_page_body_file = "arkestra/generic_filter_list.html"
        self.meta = {"description": "Searchable list of forthcoming studentships",}
        self.title = u"Forthcoming studentships for %s" % unicode(self.entity)
        self.pagetitle = u"Forthcoming studentships for %s" % unicode(self.entity)

        return self.response(request)


def vacancy(request, slug):
    """
    Responsible for publishing vacancies
    """
    if request.user.is_staff:
        vacancy = get_object_or_404(Vacancy, slug=slug)
    else:
        vacancy = get_object_or_404(Vacancy, slug=slug, published=True, date__gte=datetime.datetime.now())
        
    return render_to_response(
        "vacancies_and_studentships/vacancy.html",
        {
        "vacancy":vacancy,
        "entity": vacancy.get_hosted_by,
        "meta": {"description": vacancy.summary,}
        },
        RequestContext(request),
    )

def studentship(request, slug):
    """
    Responsible for publishing an studentship
    """
    if request.user.is_staff:
        studentship = get_object_or_404(Studentship, slug=slug)
    else:
        studentship = get_object_or_404(Studentship, slug=slug, published=True, date__gte=datetime.datetime.now())
        

    return render_to_response(
        "vacancies_and_studentships/studentship.html",
        {"studentship": studentship,
        "entity": studentship.get_hosted_by,
        "meta": {"description": studentship.summary,},
        },
        RequestContext(request),
        )

########NEW FILE########
__FILENAME__ = admin
from django.contrib import admin
# from django import forms
# 
from django.utils.translation import ugettext  as _
# 
from filer.admin.fileadmin import FileAdmin
# 
from models import Video, VideoVersion, ArkestraVideo
#                                                           

# class VideoVersionForm(forms.ModelForm):
#     class Meta:
#         model = VideoVersion


# class VideoAdminChangeForm(forms.ModelForm):
#     class Meta:
#         model = Video
# 

class VideoVersionInline(admin.TabularInline):
    # form = VideoVersionForm    
    model = VideoVersion
    readonly_fields = ('size', 'codec', 'status')
    extra = 0


class VideoAdmin(FileAdmin):
    inlines = (VideoVersionInline,)
    

admin.site.register(Video, VideoAdmin)


class VideoVersionAdmin(admin.ModelAdmin):
    list_display = ('size', 'codec', 'status')
# 
# 
# class MyVideoAdmin(VideoAdmin):
#     inlines = (VideoVersionInline,)
# 
class ArkestraVideoAdmin(admin.ModelAdmin):
    inlines = (VideoVersionInline,)
# 
# 
# admin.site.unregister(Video)
# admin.site.register(Video, MyVideoAdmin)
admin.site.register(ArkestraVideo, ArkestraVideoAdmin)
admin.site.register(VideoVersion, VideoVersionAdmin)
########NEW FILE########
__FILENAME__ = cms_plugins
import os, models, bisect

from threading import Thread

from django.utils.translation import ugettext_lazy as _
from django.conf import settings

from cms.plugin_pool import plugin_pool
from cms.plugin_base import CMSPluginBase

from arkestra_utilities.output_libraries.plugin_widths import *
from arkestra_utilities.settings import USE_CELERY_FOR_VIDEO_ENCODING

from models import VideoPluginEditor, VideoVersion, CODECS, VERSIONS, SIZES, PLAYERS

if USE_CELERY_FOR_VIDEO_ENCODING:
    from tasks import encodevideo

class VideoPluginPublisher(CMSPluginBase):
    model = VideoPluginEditor
    name = _("Video")
    render_template = "video/video.html"
    text_enabled = True
    admin_preview = False
    raw_id_fields = ('video',)
            
    def icon_src(self, instance):
        return "/static/plugin_icons/video.png"

    def render(self, context, instance, placeholder):
        """
        Arkestra can calculate the exact pixel width of any column in any placeholder; however, this isn't available to all applications that might use the filer.
        
        So, we should make the calculations here optional, and for non-Arkestra implementations do something different
        """        
        print "****"
        instance.has_borders = False
         
        # calculate the width of the placeholder
        placeholder_width = get_placeholder_width(context, instance)

        # widths a fraction of nominal container width (deprecated)
        if instance.width <= 10:
         width = placeholder_width/instance.width
 
        # widths relative to placeholder width
        else:
         # widths a percentage of placeholder width
         if instance.width <= 100:
             width = placeholder_width/100.0 * instance.width
             auto = False

         # automatic width      
         elif instance.width == 1000:
             width = placeholder_width
             auto = True
 
         # calculate the width of the block the image will be in
         width = calculate_container_width(context, instance, width, auto)
        
        # shave off 5 point if the image is floated, to make room for a margin
        # see arkestra.css, span.image.left and span.image.right
        if instance.float:
         width = width - 5   

        if instance.use_description_as_caption:
         instance.caption = instance.caption or instance.video.description

        # given the width we want to show the video at, we have to find the most suitable (i.e. closest larger) video file version we have created
        index = bisect.bisect_left(SIZES,width)
        if index < len(SIZES): # not larger than the largest preset size?
         size = SIZES[index] # get the exact or closest larger size
        else:
         # choose the widest, if we don't have one wider
         size = SIZES[-1]

        # create the lists of missing and available items
        instance.ready_versions = []
        instance.unready_versions = []

        for codec, codec_dictionary in CODECS.items():
         version, created = VideoVersion.objects.get_or_create(source = instance.video, size = size, codec = codec)

         # get the version's codec_and_size identifier string
         codec_and_size = version.codec_and_size()
             
         # get the file path for the version
         videofilepath = version.outputpath()

         # does the file exist?
         print "**"
         print "** version", codec_and_size
         print "** version status", version.status
         if os.path.exists(videofilepath): 
             print "** file exists", videofilepath
             # if it does, check that the status dictionary agrees
             if version.status == "ready":
                 print "** version is ready"

                 # and add the version to available_versions
                 instance.ready_versions.append(codec)
             else:
                 # what if the status dictionary doesn't say that the file is ready?
                 print "** version is not ready"
                 instance.unready_versions.append(codec)

                 # unless status check says it's encoding, it must be "missing" or "failed"- so let's try to encode it
                 if version.status != "encoding":

                     if USE_CELERY_FOR_VIDEO_ENCODING:
                         print "** launching encodevideo()"
                         version_status = encodevideo.delay(source = instance.video, size = size, codec = codec)
                         print "** got back from encodevideo()", version_status
                     else:
                         thread = Thread(target=version.encode, name=videofilepath)
                         thread.start()

         # if the file doesn't exist
         else:
             print "** file doesn't exist", videofilepath
             version.status = "missing"
             instance.unready_versions.append(codec)

             if USE_CELERY_FOR_VIDEO_ENCODING:
                 encodevideo.delay(source = instance.video, size = size, codec = codec)
                 print "** launching encodevideo() for", codec_and_size
             else:
                 thread = Thread(target=version.encode, name=videofilepath)
                 thread.start()

        # now we need to list the formats available to the different players (HTML5 and Flash so far, 
        # but we could have others if we wanted). The same format (H.264) is currently used for both 
        # HTML5 and Flash

        instance.html5_formats = []
        instance.flash_formats = []
        # all_formats is a list of versions without any duplications
        instance.all_formats = []
        instance.ready_versions = set(instance.ready_versions)

        # let's assemble the list of versions available for the HTML5 player
        # instance.formats is a dict of players, containing the appropriate codec dicts from ready_versions
        instance.formats = {}
        for player, player_codecs in PLAYERS.items():
         instance.formats[player] = []
         for codec in player_codecs:
             if codec in instance.ready_versions:
                 # add all the information we'll need about this version to a dictionary
                 description = {"url": VideoVersion.objects.get(source = instance.video, codec = codec, size = size).url(), "type": VERSIONS[codec][size]["type"], "description": CODECS[codec]["description"], "implications": CODECS[codec]["implications"],}
                 instance.formats[player].append(description)
                 if description not in instance.all_formats:
                     instance.all_formats.append(description)

        instance.width = int(width)
        instance.dumb_height = int(instance.width * .75)
        instance.size = size
        context.update({
            'video':instance,
            # 'width': int(width),
            # 'caption_width': int(width),
            'placeholder':placeholder,
        })
        return context

plugin_pool.register_plugin(VideoPluginPublisher)

########NEW FILE########
__FILENAME__ = forms
from django import forms
from cmsplugin_filer_video.models import FilerVideo

class VideoForm(forms.ModelForm):
    
    class Meta:
        model = FilerVideo
        exclude = ('page', 'position', 'placeholder', 'language', 'plugin_type')
########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        
        # Adding model 'VideoPluginEditor'
        db.create_table('cmsplugin_videoplugineditor', (
            ('cmsplugin_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['cms.CMSPlugin'], unique=True, primary_key=True)),
            ('video', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Video'])),
            ('width', self.gf('django.db.models.fields.FloatField')(default=1000.0, null=True, blank=True)),
            ('use_description_as_caption', self.gf('django.db.models.fields.BooleanField')(default=False)),
            ('caption', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('float', self.gf('django.db.models.fields.CharField')(max_length=10, null=True, blank=True)),
        ))
        db.send_create_signal('video', ['VideoPluginEditor'])

        # Adding model 'VideoVersion'
        db.create_table('video_videoversion', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('source', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Video'])),
            ('size', self.gf('django.db.models.fields.SmallIntegerField')(null=True, blank=True)),
            ('codec', self.gf('django.db.models.fields.CharField')(max_length=20, null=True, blank=True)),
            ('status', self.gf('django.db.models.fields.CharField')(default='newly-created', max_length=20, null=True, blank=True)),
        ))
        db.send_create_signal('video', ['VideoVersion'])


    def backwards(self, orm):
        
        # Deleting model 'VideoPluginEditor'
        db.delete_table('cmsplugin_videoplugineditor')

        # Deleting model 'VideoVersion'
        db.delete_table('video_videoversion')


    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.video': {
            'Meta': {'object_name': 'Video', '_ormbases': ['filer.File']},
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'})
        },
        'video.videoplugineditor': {
            'Meta': {'object_name': 'VideoPluginEditor', 'db_table': "'cmsplugin_videoplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'caption': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'float': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'use_description_as_caption': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Video']"}),
            'width': ('django.db.models.fields.FloatField', [], {'default': '1000.0', 'null': 'True', 'blank': 'True'})
        },
        'video.videoversion': {
            'Meta': {'object_name': 'VideoVersion'},
            'codec': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'size': ('django.db.models.fields.SmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['filer.Video']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'newly-created'", 'max_length': '20', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['video']

########NEW FILE########
__FILENAME__ = 0002_auto__add_video__chg_field_videoversion_source__chg_field_videoplugine
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'Video'
        db.create_table('video_video', (
            ('file_ptr', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['filer.File'], unique=True, primary_key=True)),
        ))
        db.send_create_signal('video', ['Video'])


        # Changing field 'VideoVersion.source'
        db.alter_column('video_videoversion', 'source_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['video.Video']))

        # Changing field 'VideoPluginEditor.video'
        db.alter_column('cmsplugin_videoplugineditor', 'video_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['video.Video']))

    def backwards(self, orm):
        # Deleting model 'Video'
        db.delete_table('video_video')


        # Changing field 'VideoVersion.source'
        db.alter_column('video_videoversion', 'source_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Video']))

        # Changing field 'VideoPluginEditor.video'
        db.alter_column('cmsplugin_videoplugineditor', 'video_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['filer.Video']))

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'cms.cmsplugin': {
            'Meta': {'object_name': 'CMSPlugin'},
            'changed_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'creation_date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2013, 1, 13, 0, 0)'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.CharField', [], {'max_length': '15', 'db_index': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.CMSPlugin']", 'null': 'True', 'blank': 'True'}),
            'placeholder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['cms.Placeholder']", 'null': 'True'}),
            'plugin_type': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'}),
            'position': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'})
        },
        'cms.placeholder': {
            'Meta': {'object_name': 'Placeholder'},
            'default_width': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slot': ('django.db.models.fields.CharField', [], {'max_length': '50', 'db_index': 'True'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'filer.file': {
            'Meta': {'object_name': 'File'},
            '_file_size': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'file': ('django.db.models.fields.files.FileField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'all_files'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'has_all_mandatory_data': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_public': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'original_filename': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'owned_files'", 'null': 'True', 'to': "orm['auth.User']"}),
            'polymorphic_ctype': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'polymorphic_filer.file_set'", 'null': 'True', 'to': "orm['contenttypes.ContentType']"}),
            'sha1': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '40', 'blank': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'filer.folder': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('parent', 'name'),)", 'object_name': 'Folder'},
            'created_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'level': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'lft': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'modified_at': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'filer_owned_folders'", 'null': 'True', 'to': "orm['auth.User']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'children'", 'null': 'True', 'to': "orm['filer.Folder']"}),
            'rght': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'tree_id': ('django.db.models.fields.PositiveIntegerField', [], {'db_index': 'True'}),
            'uploaded_at': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'})
        },
        'video.video': {
            'Meta': {'object_name': 'Video', '_ormbases': ['filer.File']},
            'file_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['filer.File']", 'unique': 'True', 'primary_key': 'True'})
        },
        'video.videoplugineditor': {
            'Meta': {'object_name': 'VideoPluginEditor', 'db_table': "'cmsplugin_videoplugineditor'", '_ormbases': ['cms.CMSPlugin']},
            'caption': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'cmsplugin_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['cms.CMSPlugin']", 'unique': 'True', 'primary_key': 'True'}),
            'float': ('django.db.models.fields.CharField', [], {'max_length': '10', 'null': 'True', 'blank': 'True'}),
            'use_description_as_caption': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['video.Video']"}),
            'width': ('django.db.models.fields.FloatField', [], {'default': '1000.0', 'null': 'True', 'blank': 'True'})
        },
        'video.videoversion': {
            'Meta': {'object_name': 'VideoVersion'},
            'codec': ('django.db.models.fields.CharField', [], {'max_length': '20', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'size': ('django.db.models.fields.SmallIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['video.Video']"}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'newly-created'", 'max_length': '20', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['video']
########NEW FILE########
__FILENAME__ = models
import os, subprocess

from posixpath import join, basename, splitext, exists

from django.core import urlresolvers
from django.utils.translation import ugettext_lazy as _
from django.db import models
from django.conf import settings

from cms.models import CMSPlugin

from filer.fields.file import FilerFileField
from filer.models.filemodels import File
from filer import settings as filer_settings


class Video(File):

    @classmethod
    def matches_file_type(cls, iname, ifile, request):
        # the extensions we'll recognise for this file type
        filename_extensions = ['.dv', '.mov', '.mp4', '.avi', '.wmv',]
        ext = os.path.splitext(iname)[1].lower()
        return ext in filename_extensions

    # we get to use Filer's video icon free
    _icon = "video"

    # def get_admin_url_path(self):
    #     return urlresolvers.reverse('admin:filer_video_change', args=(self.id,))


class ArkestraVideo(Video):
    class Meta:
        proxy = True
        verbose_name = "Video"


class FilerVideoField(FilerFileField):
    default_model_class = Video

class VideoPluginEditor(CMSPlugin):
    LEFT = "left"
    RIGHT = "right"
    FLOAT_CHOICES = ((LEFT, _("left")),
                     (RIGHT, _("right")),
                     )
    video = FilerVideoField()
    VIDEO_WIDTHS = (
        (1000.0, u"Automatic"),
        (u'Widths relative to the containing column', (
            (100.0, u"100%"),
            (75.0, u"75%"),
            (66.7, u"66%"),
            (50.0, u"50%"),
            (33.3, u"33%"),
            (25.0, u"25%"),
            )
        ),
        ('', u"Video's native width - on your head be it"),
    )
    width = models.FloatField(null=True, blank=True, choices = VIDEO_WIDTHS, default = 1000.0)

    use_description_as_caption = models.BooleanField(verbose_name = "Use description", default=False, help_text = "Use image's description field as caption")
    caption = models.TextField(_("Caption"), blank=True, null=True)
    float = models.CharField(_("float"), max_length=10, blank=True, null=True, choices=FLOAT_CHOICES)
    
    def __unicode__(self):
        if self.video:
            return self.video.label
        else:
            return u"Video %s" % self.caption
        return ''
        
class VideoVersion(models.Model):
    source = FilerVideoField()
    size = models.SmallIntegerField(blank=True, null=True,)
    codec = models.CharField(max_length=20, blank=True, null=True,)
    status = models.CharField(max_length=20, default = "newly-created", blank=True, null=True,)

    def codec_and_size(self):
        # returns a string containing codec and size - e.g. h264-720 - used in various ways, such as version filenames
        return "-".join((CODECS[self.codec]["code"], str(self.size)))

    def outputpath(self):
        # the output path and filename for the version
        return os.path.join(self.abs_directory_path(), \
        "-".join((self.filename_without_extension(), \
        self.codec_and_size())) \
        + CODECS[self.codec]["extension"])
        
    def filename_without_extension(self):
        # e.g. "video"
        return os.path.splitext(self.filename())[0].lower() 
        
    def abs_directory_path(self):
        # e.g. "/var/www/html/arkestra_medic/media/filer_private/2010/11/23/output"        
        return os.path.join(settings.MEDIA_ROOT, "rendered_video", self.directory())

    def filename(self):    
        # e.g. "video.dv"
        return os.path.basename(unicode(self.source.file)) 

    def directory(self):
        # e.g. "filer_private/2010/11/23"
        print ">> self                 ", self
        print ">> self.source          ", self.source
        print ">> self.source.file     ", self.source.file
        print ">> unicode(self.source.file)", unicode(self.source.file)
        print ">> os.path.dirname(unicode(self.source.file))", os.path.dirname(unicode(self.source.file)) 
        return os.path.dirname(unicode(self.source.file)) 

    def encode(self):
        print
        print "======== encoding video ========="
        print 
        # we're going to create an encoded version of our video
        # let's find out from the dictionaries what's required
        codec_profile = VERSIONS[self.codec][self.size]
        codec_code = CODECS[self.codec]["code"]
        encoder = codec_profile["encoder"]
        schema = ENCODERS[encoder]["schema"]
        command = [encoder]

        print "codec_profile", codec_profile
        print "codec_code", codec_code
        print "encoder", encoder
        print "schema", schema
        print "command", command
        
        # check the output folder exists; create it if not
        if not os.path.exists(self.abs_directory_path()):
            print ">>> the output folder doesn't exist:", self.abs_directory_path()
            os.makedirs(self.abs_directory_path())
            print ">>>that worked!"

        # loop over the schema and assemble the command
        for item in schema:
            # input and output are special cases, because they take values that aren't determined by the schema
            if item == "input":
                input_prefix = ENCODERS[encoder].get("input")
                if input_prefix:
                    command.append(input_prefix)
                command.append(self.source.file.path)
            elif item == "output":
                output_prefix = ENCODERS[encoder].get("output")
                if output_prefix:
                    command.append(output_prefix)
                command.append(self.outputpath())
            else:
                for option_prefix, option_value in codec_profile[item].items():
                    command.extend((option_prefix,str(option_value)))

        # immediately mark it as "encoding", so nothing else tries to encode it while we're doing this
        print ">>> mark as encoding"
        self.status = "encoding"
        self.save()
        
        # now do the encoding and don't let anything after this happen until we finish executing command:
        print ">>> saved status"
        print "command:", str(command)
        exit_status = subprocess.call(command) 
        print exit_status
        print ">>> exited from", command
        if exit_status == 0: # it's OK, so mark the version OK
            self.status = "ready"
            self.save()
            print ">>> saved OK"
        else:
            self.status = "failed" # mark it as failed because the command returned an error
            self.save()
            print ">>> save FAILED", exit_status

        # we should never return from here with the status still "encoding" - but that has happened - how?
        return self.status
       
    def url(self):
        # the url for a particular version
        return os.path.join(settings.MEDIA_URL, \
            "rendered_video", \
            self.directory(), \
            "-".join((self.filename_without_extension(),
            self.codec_and_size())) \
            + CODECS[self.codec]["extension"])

    def __unicode__(self):
        if self.source:
            return self.source.label
        else:
            return u"Video %s" % self.caption
        return ''

"""
We have a number of dictionaries to help describe what we're doing. Maybe they should be in settings, but they are here for now.

This could be made simpler, but it's more flexible this way - for example, this allows us to prefer one encoder for one size, and a different encoder for another - just in case.

ENCODERS provides infomration about the commands that will be used to perform the video re-encoding, in this format. Each item in ENCODERS is the commandline name of the program.

Each command has a different schema, because they get their input/output filenames in a different order and with different prefix.
"""
ENCODERS = {
        "HandBrakeCLI": {
            "schema": ("options", "input", "output"), # the order in which the program expects to receive its options
            "input": "--input",
            "output": "--output",
            },
        "ffmpeg2theora": {
            "schema": ("options", "output", "input"),   # the schema is quite different from the one above
            "output": "--output",
            # "input": "",
        },
    }

"""
CODECS contains information for the files that are created.

    'code' is a slugified version of the codec's name; it's added to the filename
    
    'description' and 'implications' are human-readable information
"""
CODECS = {
    "H.264": {
        "extension": ".mp4", 
        "code": "h264",
        "description": "MP4/H.264 format video",
        "implications": " - good support in Safari & iOS",
        },

    "Theora": {
        "extension": ".ogv", 
        "code": "theora",
        "description": "Ogg/Theora format video",
        "implications": " - good support in Firefox",
        },
    }

"""
SIZES is a tuple of the sizes we can encode to for output. It needs to be in order of increasing size.
"""

SIZES = (360,720)

"""
VERSIONS describes the different files we can encode to. 

Firstly, we list the different codecs we'll employ, then each size for each.

    'type' is the type attribute of the <source> element in HTML5
    'options' are what we pass to the command
"""

VERSIONS = {
    "H.264": {
        SIZES[0]:    {
                "encoder": "HandBrakeCLI",
                "type": 'video/mp4; codecs="avc1.42E01E, .mp4a.40.2"',  #supposedly, we should use the codecs attribute of the type attribute, but all it does for me is make Theora video stop working in Firefox
                "options": {
                    "--preset": "iPhone & iPod Touch", 
                    "--width": SIZES[0], #"--vb": "600",  
                    "--two-pass": "", 
                    "--turbo": "", 
                    "--optimize": "",
                    }, 
                },
        SIZES[1]:    {
                "encoder": "HandBrakeCLI",
                "type": 'video/mp4; codecs="avc1.42E01E, .mp4a.40.2"',
                "options": {
                    "--preset": "iPhone & iPod Touch", 
                    "--width": SIZES[1], #"--vb": "600",  
                    "--two-pass": "", 
                    "--turbo": "", 
                    "--optimize": "",
                    }, 
                },
            },
    "Theora": {
        SIZES[0]:   {
                "encoder": "ffmpeg2theora",
                "type": 'video/ogg; codecs="theora, vorbis"',
                "options": {
                    "--videoquality": "5", 
                    "--audioquality": "1", 
                    "--width": SIZES[0],
                    },
            },
        SIZES[1]:   {
                "encoder": "ffmpeg2theora",
                "type": 'video/ogg; codecs="theora, vorbis"',
                "options": {
                    "--videoquality": "5", 
                    "--audioquality": "1", 
                    "--width": SIZES[1],
                    },
            },
        },
    }

"""
We provide these so we know we which encoded videos are available or missing for each kind of player.
"""
PLAYERS = {
    "HTML5": ("H.264", "Theora"),
    "FLASH": ("H.264",),
    }                                    
########NEW FILE########
__FILENAME__ = settings
from django.conf import settings

VIDEO_AUTOPLAY = getattr(settings, "VIDEO_AUTOPLAY", False)
VIDEO_AUTOHIDE = getattr(settings, "VIDEO_AUTOHIDE", False)
VIDEO_FULLSCREEN = getattr(settings, "VIDEO_FULLSCREEN", True)
VIDEO_LOOP = getattr(settings, "VIDEO_LOOP", False)
VIDEO_AUTOPLAY = getattr(settings, "VIDEO_AUTOPLAY", False)
VIDEO_AUTOPLAY = getattr(settings, "VIDEO_AUTOPLAY", False)

VIDEO_BG_COLOR = getattr(settings, "VIDEO_BG_COLOR", "000000")
VIDEO_TEXT_COLOR = getattr(settings, "VIDEO_TEXT_COLOR", "FFFFFF")
VIDEO_SEEKBAR_COLOR = getattr(settings, "VIDEO_SEEKBAR_COLOR", "13ABEC")
VIDEO_SEEKBARBG_COLOR = getattr(settings, "VIDEO_SEEKBARBG_COLOR", "333333")
VIDEO_LOADINGBAR_COLOR = getattr(settings, "VIDEO_LOADINGBAR_COLOR", "828282")
VIDEO_BUTTON_OUT_COLOR = getattr(settings, "VIDEO_BUTTON_OUT_COLOR", "333333")
VIDEO_BUTTON_OVER_COLOR = getattr(settings, "VIDEO_BUTTON_OVER_COLOR", "000000")
VIDEO_BUTTON_HIGHLIGHT_COLOR = getattr(settings, "VIDEO_BUTTON_HIGHLIGHT_COLOR", "FFFFFF")

VIDEO_PLUGIN_ENABLE_ADVANCED_SETTINGS = getattr(settings, "VIDEO_PLUGIN_ENABLE_ADVANCED_SETTINGS", True)

########NEW FILE########
__FILENAME__ = tasks
from celery.task import task
from models import VideoVersion


@task
def encodevideo(source, size, codec):
    logger =  encodevideo.get_logger()
    logger.info("**********************")
    print "======== in encodevideo task ========="
    version, created = VideoVersion.objects.get_or_create(source = source, size = size, codec = codec)
    print "== version, created", version, created
    version_status = version.encode()
    print "== version_status", version_status
    return version_status
########NEW FILE########
