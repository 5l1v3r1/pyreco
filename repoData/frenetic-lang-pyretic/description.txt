=======================
Contribution guidelines
=======================

- First, review Python conventions:
  http://www.python.org/dev/peps/pep-0008/
  http://www.python.org/dev/peps/pep-0257/

  Exceptions:
  - NetCore policies and predicates are written in lowercase. This is because 1)
    they are used often, so the CappedWords are distracting and 2) they aren't
    really used as classes; it is unlikely that one would want to subclass them.

- Second, review Git commit message conventions. Here is a good summary:
  http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html.

- Ideally, commits should add, modify, or remove only one feature. This lets us
  easily revert in the case of regression.
  

=============================
Pyretic Mininet Modifications
=============================

Scripts and files to add functionality needed for pyretic tutorial
w/o changes to stock mininet (2.0).

top-level:
- mn:                   Slightly modified version of mininet's mn utility
- extra-topologies.py:  File containing extra mininet topologies
=================
Pyretic Libraries
=================

Built on top of core system

top-level:
- corelib.py:   Convenience import statements 
- stdlib.py:    Useful derived predicates and constants
- virt.py:      Network virtualization library

What's Ryu
==========
Ryu is a component-based software defined networking framework.

Ryu provides software components with well defined API that make it
easy for developers to create new network management and control
applications. Ryu supports various protocols for managing network
devices, such as OpenFlow, Netconf, OF-config, etc. About OpenFlow,
Ryu supports fully 1.0, 1.2, 1.3 and Nicira Extensions.

All of the code is freely available under the Apache 2.0 license. Ryu
is fully written in Python.


Quick Start
===========
Installing Ryu is quite easy::

   % pip install ryu

If you prefer to install Ryu from the source code::

   % git clone git://github.com/osrg/ryu.git
   % cd ryu; python ./setup.py install

If you want to use Ryu with `OpenStack <http://openstack.org/>`_,
please refer `detailed documents <http://ryu.readthedocs.org/en/latest/using_with_openstack.html>`_.
You can create tens of thousands of isolated virtual networks without
using VLAN.  The Ryu application is included in OpenStack mainline as
of Essex release.

If you want to write your Ryu application, have a look at
`Writing ryu application <http://ryu.readthedocs.org/en/latest/writing_ryu_app.html>`_ document.
After writing your application, just type::

   % ryu-manager yourapp.py


Support
=======
Ryu Official site is `<http://osrg.github.io/ryu/>`_.

If you have any
questions, suggestions, and patches, the mailing list is available at
`ryu-devel ML
<https://lists.sourceforge.net/lists/listinfo/ryu-devel>`_.
`The ML archive at Gmane <http://dir.gmane.org/gmane.network.ryu.devel>`_
is also available.

=======
Pyretic
=======

The Pyretic platfrom - language & runtime system.
See http://frenetic-lang.org/pyretic/ for more info.

top-level structure:
- of_client:    Clients that run on a traditional OpenFlow controller
                effectively serving as a backend for Pyretic
- mininet:      Slightly modified version of mininet mn 
                and extra topologies used by Pyretic 
- mininet.sh:   A wrapper that starts up mininet for use w/ Pyretic
- pyretic:      Pyretic system proper 
- pyretic.py:   A wrapper that starts up Pyretic
                and optionally an OpenFlow client (see above)


