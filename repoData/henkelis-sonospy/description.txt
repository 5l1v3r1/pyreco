sonospy
=======

Developed using Wingware Python IDE - http://wingware.com
            
Python Control Point is a UPnP control point for audio files and streams.

It is built on top of the BRisa UPnP framework, with extensions added
for Sonos ZonePlayers and the content they can serve/render.

It can be run in proxy only mode (no GUI).

Dependencies in this order (links correct at time of writing):
--------------------------------------------------------------
You will need to download the following dependencies. Installation instructions for them
for your platform can be found on the link pages.

Python 2.6 or later (but not 3.0 and up)
    Linux: from your distro or get the source tarball from http://www.python.org/download/releases/2.6.4/
    Mac: http://www.python.org/download/releases/2.6.4/ - select the Mac installer
    Windows: http://www.python.org/download/releases/2.6.4/ - select the windows installer
        (for Windows, remember to set the path environment variable so it can find Python)
    
To play files locally on the machine running pycpoint:
    gstreamer 0.10+ - http://gstreamer.freedesktop.org/download
    gmediarender-0.0.6 - http://gmrender.nongnu.org/#dl

To transcode file types on-the-fly that Sonos doesn't support
    lame (for converting mp2 to mp3)
    sox (for downsampling FLAC)
    parec (to send PC output to ZP)

Packages bundled with sonospy:
------------------------------
The following packages are bundled with sonospy (no need to download/install):

cherrypy:
    cherrypy WSGI server 3.1.2
        (All platforms: http://www.cherrypy.org/wiki/CherryPyDownload)

python-brisa:
    python-brisa Framework 0.10.0
    python-brisa Qt Reactor 0.10.0
        (All platforms: http://brisa.garage.maemo.org/installation.html)

web2py (only needed if running the control point with a GUI (rather than just as a proxy server)):
    web2py 1.76.3+
        (All platforms: http://www.web2py.com/examples/default/download)

Installation of pycpoint:
-------------------------
Untar the source into your directory of choice. The source contains changes to the BRisa framework,
which is bundled with it.

Ports:
------
The following ports need to be open in the firewall on the machine you are running sonospy on. 
Most are standard UPnP/WMP ports, with additional ones for the BRisa framework, the proxy and 
IR control.

Note that you may need to open ports specific to other UPnP media servers too (if you are using
them).

    1900            UDP
    2149            UDP     (current M-SEARCH send port so WMP is picked up)
    2869            TCP
    10243           TCP
    10244-+n        TCP     (proxy internal WMP server, inc for multiple, can be changed in ini)
    10280-10284     UDP
    50101-50102     TCP     (control point and proxy, can be changed in ini)
    65432           UDP     (if using IR control, can be changed in ini)
    
Run:
----
To start the UPnP controlpoint and the web server, run:

    For linux:
    
        ./sonospy_web
        
    For Windows:
    
        sonospy_web.cmd
    
from the directory you installed the source into. This will start the control point and
web server in the background. Output from the control point will be written to pycpoint.log
in the base directory, output from the web server to web2py.log.

To connect to the web server, open a web browser and enter the following URL:

    http://<IP ADDRESS>:8000/sonospy/default/index
    
replacing <IP ADDRESS> with the IP address of the machine running the web server. If you are
running the web browser on the same machine as the web server you can use localhost as the ip
address.

In the browser you should see a GUI that allows selection and browsing of UPnP servers on the 
local network and selection of UPnP renderers on the same network to play content on.

The browser can also be started in mobile mode with a screen sized for use on mobile devices.

To start in mobile mode run:

    http://<IP ADDRESS>:8000/sonospy/default/index?M=P
    
        or

    http://<IP ADDRESS>:8000/sonospy/default/index?M=L
    
where P starts in portrait orientation and L starts in landscape orientation.

-------------------------------------------
---- add more detail of mobile mode -------
---- describe how to run on a mobile device
-------------------------------------------

To start the UPnP controlpoint as a proxy only, run:

    For linux:

        ./sonospy_proxy <parameters>
        
    For Windows:
    
        -- todo --
        -- for now use the following --
        
        cd sonospy
        pythonw pycpoint.py -p <parameters>
    
from the directory you installed the source into.

Parameters can include:

    -wSonospy=<name>,<database>[,<ini>]   implements an internal WMP server on port 10243 (note
                                          that won't work if WMP is using that port on that machine). 
                                          Multiple -wSonospy options can be used. Note that you need 
                                          to generate the database beforehand for this option to work
                                          (see "Internal WMP Database" below for further information)

    -- todo --
    -s

Example parameters:

    -wSonospy=Music,sonos.sqlite    implements the internal WMP server, serving content described in
                                    sonos.sqlite via a media server named Music (will show up on the
                                    CR100/CR200/iTouch etc)

    -wSonospy=Music,sonos.sqlite,index.ini    implements the internal WMP server, serving content described in
                                              sonos.sqlite via a media server named Music, with index settings
                                              read from index.ini

Example calls:
                        
    For linux:

        ./sonospy_proxy -wSonospy=Music,sonos.sqlite

        ./sonospy_proxy -wSonospy=Peter,peter.sqlite,peter.ini -wSonospy=Leanne,leanne.sqlite,leanne.ini
        
    For Windows:
    
        -- todo --
        -- for now use the following --
        
        cd sonospy
        pythonw pycpoint.py -p -wSonospy=Music,sonos.sqlite

You can also use the parameters above with the web browser, so for example to start the control 
point with a local mediaserver proxied and available to both the web browser and Sonos controllers run:

    For linux:
    
        ./sonospy_web -wSonospy=Music,sonos.sqlite
        
    For Windows:
    
        -- todo --
        -- for now use the following --
        
        cd sonospy
        pythonw pycpoint.py -p -wSonospy=Music,sonos.sqlite
        cd ..
        pythonw web2py/web2py.py -L options.py

When running as a proxy only you will need a separate control point (e.g. the Sonos controller)
to select and play tracks.

To stop the UPnP controlpoint and the web server (if running), run:

    For linux:
    
        ./sonospy_stop
        
    For Windows:
    
        -- todo --
        -- for now use the following --

        stop pythonw processes in task manager

This will stop the background processes.

Further command line options are available for pycpoint as below - you'll need to edit the script files
or create your own command lines to use them:

    -d                enables debug output (this will be verbose and slow down searching etc)
    
    -m<module>        enables debug output for <module>
    
Note that you will have to initially run brisa-conf to set the error level to debug to see debug output.
From the sonospy/sonospy directory run:

    For linux:
    
        brisa-conf -s brisa -p logging DEBUG
    
    For windows:
    
        python brisa-conf -s brisa -p logging DEBUG
 
There's a setconf.sh script in the tarball that you can edit and run if you manage to mess up the 
brisa section in the config (for Windows use setconf.cmd).

Internal WMP Database
---------------------
Sonospy implements an internal WMP clone for serving content. The clone browses an sqlite database
containing tag data, and presents that to Sonos controllers. You need to create the database by 
scanning you music files, then re-scan when changes have been made (tracks added or deleted, tags
changed etc). A utility is provided to create and maintain databases. Scan reads all music files
in a set of directories and extracts their tag data (this is stored in a database). This database
is presented to Sonos controllers for browsing.

Scan supports multiple entry tags (so you can tag with multiple genres for instance). Multiple 
entries in a tag are separated with a semi-colon (;). Scan also supports multiple tags of the
same name. Scan supports duplicate files in different directories (so you can have the same track in
more than one place and each will be displayed on the Sonos controller (suffixed with a number).

To scan you music library for metadata tags, navigate to the sonospy/sonospy directory and run:

    For linux:
    
        ./scan -d <database> <path-to-files>
    
    For windows:
    
        python scan -d <database> <path-to-files>

Note that on Windows any backslashes in the <path-to-files> have to be duplicated, and any spaces
preceded by a backslash, e.g.

    \\NAS\music\some music folder
    
needs to be:

    \\\\NAS\\music\\some\ music\ folder
    
Scan supports -q for quiet and -v for verbose output.

An example command to create a database named 'sonos.db' (in the sonospy/sonospy directory),
reading music files from /mnt/nas (\\NAS\music on windows) is:

    For linux:
    
        ./scan -d sonos.db /mnt/nas

    For windows:
    
        python scan -d sonos.db \\\\NAS\\music

It is possible to affect the default behaviour of scan by amending parameters in the scan.ini
file.

To change the way "The" is handled in artist names while browsing (note the full artist name
will be displayed when playing), change the setting of the "the_processing" parameter. Options
are:

    before      leave "The" before the band name
    after       move "The" after the band name
    remove      (default) remove "The" from the band name

--------------------------------------------
---- add more detail of scan.ini values ----
--------------------------------------------

The initial run of scan will create your database. Subsequent runs to update the same database use exactly 
the same command. The initial scan run will read all files, subsequent runs will only read files 
that are new/deleted or have changed. You can also run subsequent runs in higher level directories 
(for instance if you have just ripped a CD or changes an album's tags) - this will only scan/affect
a subset of the full library (e.g. /mnt/nas/Linkin Park/Meteora

The -wSonospy parameter to serve the files scanned above is:

    -wSonospy=<name>,sonos.db
    
where <name> is the name you want the music library to be displayed under on the Sonos controllers.

There are several ini file settings (in sonospy/sonospy/pycpoint.ini) that influence how the clone
displays things on browsing (these are in the [INI] section of that file):

    use_albumartist=Y   (or N)      works like the Sonos "use albumartist"
    
    show_duplicates=Y   (or N)      instructs the clone whether or not to show duplicate tracks/albums
        
    album_identification=album,artist   (or album) instructs the clone how to group albums of the same
                                        name. "album/artist" displays separate albums per artist, whereas
                                        "album" groups artists under one album 

------------------------------------------------
---- add more detail of pycpoint.ini values ----
------------------------------------------------

The clone also supports transcoding. If you attempt to play an mp2 file, the clone will transcode it 
on-the-fly to mp3 and serve it as mp3 to Sonos. If you attempt to play a FLAC file that is >16 bit or
>48k sample rate, the clone will transcode it on-the-fly and serve is as 16/48 to Sonos. If you attempt
tp play a 6 channel FLAC file, the clone will transcode it to 2 channel.

The clone also supports streaming of PC sound to Sonos. If you create a file <name>.pc in one of the
folders in your music library, when you select to play it on Sonos the clone will stream whatever is
playing on the PC soundcard to the Sonos (there will be a slight delay so the sound will be out of sync
with the PC). If you put music tags in the .pc file, the clone will display those to Sonos when browsing
(so for instance you can copy an mp3 file, change the tags to "PC soundcard" and rename the file to
sound.pc - this file will show up as a track called "PC soundcard").

Transcoding and streaming PC sound require you to have lame (for mp2), sox (for FLAC) and parec (for PC
sound) installed and available on the command path.

Browser notes:
--------------
Currently the web browser has some experimental views (Gallery and Flow). In order to utilise those views
you need to bear the following in mind:

*) To populate the cache of album entries for Gallery and Flow views, you need to select a server and
   browse albums on it.
*) To populate the cache of album art, after populating the cache of album entries you need to select
   Cache Images.
*) To be able to select tracks from the albums displayed in the Gallery and Flow views, you need to 
   select the server containing those albums before entering the view.

Login/register/lost password are not yet implemented.

.ini file
---------
The control point can be configured via its ini file (pycpoint.ini), held in the sonospy directory within 
the directory that you installed the source code. There are example settings within the ini file.

To add UPnP to WMP server mappings in the pycpoint.ini file, you need to:

---- add more detail about mappings ----

1) Add <inistring>=<type> to the [WMP Translators] section (<inistring> can be any string, but make sure to
specify that same string on the command line). <type> is the type of translation to use. Supported types are:
    Through - Sonos WMP searches are passed through unadjusted to the proxied server
              (will only work with fully WMP compliant servers - these will show up
              on the Sonos controller anyway so it is only useful for testing)
    Translate - WMP containers are translated to those specified for the UPnP server
                (only 3 containers are actually used by Sonos for WMP)
    Cache - WMP containers are translated, plus UPnP server returns are cached for
            further WMP searches to translate into UPnP server searches
    Browse - Sonos WMP searches are translated into UPnP server browses - NOTE, NOT CURRENTLY IMPLEMENTED    
2) Add sections to the ini for:
    [<inistring> Containers]
    [<inistring> Container Mapping]
    [<inistring> Attribute Mapping]
3) Add entries in those sections as follows:
    Containers        - the container ids that the UPnP server uses for the containers it supports 
    Container Mapping - a mapping of the UPnP server containers to WMP ones. Where a WMP container is
                        not supported, add an entry with nothing after the equals - that way the proxy
                        returns nothing found and the CR100 will display a suitable message.
    Attribute Mapping - a mapping of the MS attributes used in searches to ones supported by the UPnP
                        server.

To add IR over IP mappings for amplifier volume control in the pycpoint.ini file, you need to:

---- add more detail about IR ----

1) Add an [IP Volume] section.
2) Add file mappings for volume up, down, mute and unmute for the friendly name(s) of the ZP(s) you wish
to control. Entries are:
    <friendlyname>,<volumechangetype>=<UDPdatafile>
        where 
            <friendlyname> is the name of the zone you wish to control
            <volumechangetype> is one of
                Volume Up
                Volume Down
                Volume Mute
                Volume UnMute
            <UDPdatafile> is the path to a file containing the data to send to the IR transmitter
    IR_IP=<IRreceiverIPaddress>
        where
            <IRreceiverIPaddress> is the IP address of the IR transmitter
    IR_PORT=<IRreceiverport>
        where
            <IRreceiverport> is the port number the IR transmitter is listening on

You can also set some controller/proxy settings in the ini file in the [ini] section:

    To set the port that the controlpoint runs on, set controlpoint_port
    To set the port that the proxy runs on, set proxy_port
    To set the port that WMP proxy runs on, set wmp_proxy_port
    To set the udn of the internal WMP server, set internal_proxy_udn


New features in 0.7
-------------------
*) Music served from Sonos can now be rendered locally via BRisa renderer.
*) Context sensitive right click.
*) Control point can run as proxy only without a GUI.
*) Support for sending IR commands over IP added.
*) Support for Napster.
*) Album and artist details added to media list display.
*) Free text search added.
*) GTK GUI removed and replaced with browser version.
*) Gallery mode added to select albums/tracks via static art.
*) Flow mode added to select albums/tracks via scrolling art.
*) Added support for FooBar2000 to play locally on Windows
*) Internal WMP server added

Bugs fixed
----------
*) Out of sequence NOTIFY messages causing now playing to be out of date.
*) Issue with M-SEARCH where creating proxy created new udp listener and overrode control point 
udp listener.
*) Dummy threads from M-SEARCH loop causing threads to be exhausted.
*) WMP not being picked up via M-SEARCH.
*) Fixed bug where single click on track or queue item didn't play item

Known bugs/features:
--------------------
This is beta software, it may crash and may wipe you Sonos queue (so make sure you save it first).
*) Only Napster currently supported as a third party music service. Other music services will be 
displayed on browsing a ZP but they can't be accessed.
*) There is currently no persistence for browse - all browses use HTTP calls to get music data from the 
server they are querying. Calls are chunked to avoid flooding the network/server.
*) UPnP servers served on the localhost address are not queried correctly.
*) Album track listings on the reverse of album covers in Flow view do not work in IE.
*) When rendering locally on gmediarender, you need to connect to the music source first if it is
remote (e.g. if music is stored on a NAS, connect to the NAS on the PC before rendering).
*) Browser on iPAQ does not obey mobile resizing with ?M=P.
*) Global Search is not yet implemented.

Known installation issues on Linux:
-----------------------------------
*) When unzipping the software it's possible that the sonospy/web2py/applications/sonospy/static/art
directory won't get write permissions set, causing caching of album art to fail. You need to make 
sure the user you are running under can write to that directory.

Known installation issues on Windows:
-------------------------------------
*) Unzipping files with some unzippers creates the wrong directory names so the command files fail. 
pkunzip is known to work.
*) If an earlier version of Python is already installed and in the path before Python2.6, that version
of Python will be utilised instead instead of version 2.6. You need to change your path environment
variable.

Known installation issues on FreeNAS:
-------------------------------------
*) By default the BRisa framework listens on eth0, whereas the FreeNAS interface is vr0. For running
on FreeNAS you must change the interface by editing and running setconf.sh.

Notes:
------
When rescanning, the content directory update ID will be reset to 1. As that will be lower than the
one held in a controller if the controller or the proxy hasn't been restarted, you should restart
the controller or proxy to make changes to the database visible.

-----------------------------------------------------------------------------------------------------------------------
SONOSPY GUI READ ME
-----------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------
INSTALLATION
-----------------------------------------------------------------------------------------------------------------------
You will need to get wxPython 3.0 in order to run the GUI (http://www.wxpython.org/download.php)

-----------------------------------------------------------------------------------------------------------------------
USAGE
-----------------------------------------------------------------------------------------------------------------------
In general, everything has a tool tip associated with it for some attempts 
at clarity.

Preferences are stored in gui/GUIpref.ini and can be manually edited or 
can be saved within the app on each specific tab using the SAVE DEFAULTS 
button.

You can run this by ./sonospyGUI.py (Linux) or python sonospyGUI.py 
(Linux/Windows).  Databases created here are still stored where scan, etc. 
uses them.  If you have Windows setup right, you can double clicke on the
sonospyGUI.py file in your root sonospy folder.

[LAUNCH TAB]
 - Will launch and stop Sonospy.
 - AUTO POPULATE will search for databases (extensions can be set in 
   GUIpref.ini) and will autopopulate the databases and proxy names for you.

[SCAN TAB]
 - SCAN and REPAIR both log to the log window, but it comes through 
   chunk at a time.  Not quite in realtime, but close enough.

[EXTRACT TAB]
 - Last <X> Albums is experimental, it gets the job done, but it's not 
   perfect.

-----------------------------------------------------------------------------------------------------------------------
KNOWN ISSUES
-----------------------------------------------------------------------------------------------------------------------
 - Loading virtuals only works with one "set".  If you store more than one 
   virtual/work in an .SP file, it won't work.  Best to use the SP files 
   created with the GUI until I find a solution here in terms of GUI layout.

-----------------------------------------------------------------------------------------------------------------------
TO DO
-----------------------------------------------------------------------------------------------------------------------
[GENERAL]
 - Look at the PIP installer.  Py2Exe?
 - Find out how to store comments in the GUIpref.ini
 - Detect if windowsPID is running already and setup the GUI to reflect
   the current state of Sonospy
 - Add ABOUT tab.
 - Fix the multiple options windows opening if you use File -> Preferences.

[LAUNCH]

[SCAN]

[USERINDEX]
 - Consider a tab to allow for generation of a userindex.ini file.

[VIRTUALS]
 - How to handle multiple SPs in one file? Do I bother?
 - Implement an ignoreChar list to manage lines to ignore based on line[0]
 
-----------------------------------------------------------------------------------------------------------------------
CHANGELIST
-----------------------------------------------------------------------------------------------------------------------
May-25-2014: Default extension if none is given for database entries
             
May-24-2014: Added Advanced field to Extract Tab to allow for custom SQL queries.
             Added menu items for exiting and stopping Sonospy to the system tray
             icon.  Not sure how to do this for starting the service, since you
             could, in thoery, launch it without any arguments from the launchTab.
             Added a wx.Yield() command to the WorkerThread in scan and extract to
             hopefully eliminate the assert issues.
May-21-2014: Updated for wxPython 3.0 -- please email any weirdness in the 
             application to chowanec@gmail.com
             Added systray icon for minimizing the app.  Restores the app
             on a double click.
May-19-2014: Added application icons for the GUI.  Welcome to 2014.
May-17-2014: Saving the windows position, size, location and maximize()
             on close of the application.  Saves settings in GUIpref.ini
             for use on reloading the app.
             Added a STOP command for Windows after much, much, much
             research.
May-16-2014: Added -z Support and field to allow for binding to a service
             for SMAPI support
             Scanned sonospy/ for *.ini to create a dropdown for user based
             ini files.  Ignores pycpoint.ini and scan.ini
             Fixed a longstanding bug with the scan field that Bart found. :)
May-15-2014: Fixed bug with extractTab where it was not combining AND
             statements properly.
             Added popup to warn user if they have more than one database
             in their launchCMD, that they have to have the requisite number
             of ports open.
May-10-2014: Added SMAPI Support
             Added fields to launchTab for user index ini files.
             Added checkbox to enable/disable SMAPI support
Feb-12-2012: Added support for -s flag






This package was originally written by Evan Martin of Danga.
Sean Reifschneider of tummy.com, ltd. has taken over maintenance of it.

This software is a 100% Python interface to the memcached memory cache
daemon.  It is the client side software which allows storing values in one
or more, possibly remote, memcached servers.  Search google for memcached
for more information.

Version 0.46

Added EMF support.

Added more sophisticated scaling options.

See examples2.py for both.

Grant Edwards, grante@users.sourceforge.net



Version 0.45

Finally, image support!!!  Handles PNGs and JPGs.

See examples2.py for the gory details.

Simon Cusack, scusack@sourceforge.net

#web2py file structure

    \project
	README
	LICENSE
        TODO                               
        Makefile                   # make all and make app
	web2py.py                   # the startup script (*)
        parameters.py              # created at startup 
        admin.tar                  # the admin app (*)
        examples.tar               # examples and documentation app (*)
        welcome.tar                # the welcome app (entry point) (*)
	\gluon                     # the core libraries (*)
        \deposit                   # used for zip and install apps
        setup_app.py               # used by py2app to make OSX executable
        setup_exe.py               # used by py2app to make Winows executble
        wsgihandler.py             # to use Gluon with mod_wsgi
        \dist                      # used by py2app, py2exe
        \build                     # used by py2app, py2exe
        \tests                     # under development stuff
        \docs                      # in progress documentation
	\applications              # are the apps
		\welcome           # application welcome, for example
			\models
			\views
			\controllers
			\sessions
			\errors
			\cache
			\static
                        \uploads
                        \modules


#EWF v1.5 -> v1.6 
load and save .py in ascii, avoids problem with LF+CR on windows
added path.join in compileapp, fixed problem with Windows compileapp

#EWF v1.6 -> v1.7
in paths replace '\' with '/' to fix problem with windows paths
using limitby in database administration
replaced mime/miltupart with multipart/form-data to fix a windows problem

#EWF v1.7 -> Gluon v1.0
Name change 
Improved layout.html

#Gluon v1.0 -> v1.1
bug in sqlhtml with JOINS queries

#Gluon v1.1 -> v1.2
fixed some typos in examples
IS_IN_SET now supports labels
cleanup in sql.py does not cleanup, just checks valid field and table names

#Gluon v1.3
added IS_IN_DB, IS_NOT_IN_DB and updated examples accordingly

#Gluon v1.4
fixed problem with IS_INT_IN_RANGE and IS_FLOAT_IN_RANGE. Now an error in a validator is reported as a ticket. Good validators should not raise Exceptions.
IS_IN_DB displays "label (id)"
it can upload files without extension
migration is now optional (define_table has migrate=False option)

#Gluon v1.5
<form> -> <form method="post"> in errors.html
replace('//','////') in sub in template.py

#Gluon v1.8
no more chdir (thread unsafe)
no more sys.stdout (thread unsafe)
response.body is StringIO()
admin/default/site informs about upgrade
response.locker (optional)

#Gluon v1.9
allow "count(*)" in select
db.execute()
fixed problem with continue and return in template
removed try: ... except in sql.py
fixed '\t'

#Gluon v1.10
fixed concurrency problems with SQLDB._instances and SQLDB._folders, now use lock
now, by default, edit SQLFORMs retain uploaded files

#Gluon v1.11
appadmin allows to keep or delete uploaded files

#Gluon v1.12
in sql.py 
handles NULL values properly
unicode support (data always stored in utf-8)
'date' -> datetime.date ,'time' -> datetime.time, 'datetime' -> datetime.datetime, 'boolean' -> True/False
most types have default validators
SQLField(...,required=True) option.
SQLRows has __str__ that serializes in CSV and xml() that serializes in HTML
SQLTable has import_from_csv_file(...)
gluon.simplejson for AJAX
in validators.py
IS_IN_DB(db,..) -  db can be an SQLSet or an SQLDB
better error messages
in admin
new import/export in csv, update and delete interface.
in appadmin
edit form allows to keep stored encrypted password
in main.py
http://host not defaults to http://host/init/default/index
New third party modules
gluon.simplejson(.dumps, .loads)
gluon.pyrtf(.dumps)
gluon.rss2(.dumps)

#Gluon v1.13
(this is one of the biggest revisions ever)
Improved sql.py has support MySQL, cxOracle (experimental), extract, like and better testing
SQLDB.tables and SQLTable.fields are now SQLCalableList objects
Fixed bug with editing integer fields storing zero
Admin interface now says "insert new [tablename]" and display insert, select or update properly in the title.
Added a cache mechamism. Works for data, controllers, views and SQLRows.
main.py now uses a request.folder absolute path when not os.name in ['nt','posix']. Seems to work on windowsce devices, except no file locking has consequences.
Now you can put modules in applications/[anyapp]/modules and import them with
import applications.[anyapp].modules.[module] as [module]
Fixed problem with init
New applications/examples/controller/global.py controller for docs.

#Gluon v1.14
Fixed a bug fix in URLs

#Gluon v1.15
New try:... except. in gluon/main.py for when sessions cannot be saved
Now validator/formatter method allows IS_DATE('%d/%m/%Y')

#web2py v1.16
yes we changed the name! Turns out Gluon was trademarked by somebody else.
Although we are not infringing the trademark since this is a non-commercial
product we could have run into some issues. So we have been professional
and changed the name to web2py.
Now SQLFORMs and FORM can have a formname and multiple forms are allowed 
per page.
A new examples/default/index page.
web2py.py instead of runme.py
mysql sets utf8 encoding.
input integer field values are automatically converted int().

#web2py v1.17
I posted v1.16 too soon. v1.17 was released after 1h to fix some bugs.

#web2py v1.18
removed vulnerability in accept_languages and session_id
Minor bug fixes. Typos and cleanup cache. Textarea now clears.
Support for PyAMF.
T returns a class, not a string
new template parser (faster?)
got rid of sintaxhighlighter in favor of server side CODE
fix problem with cacheondisk locking
fix 'None' instead of NULL in IS_NOT_IN_DB (I think)
gluon.contrib.markdown
notnull and unique in SQLField now supported (tested on sqlite mysql and postgresql)
Storage now has __getstate__ and __setstate__ needed for pickling.
session files are now locked to make it work better with asynchronous requests
cxoracle should work, apart for limitby
.../examples is now mapped to .../examples/default/index etc.
.../init is now mapped to .../welcome if init is not present

#web2py 1.19
minor typos

#web2py 1.20
new IFRAME, LABEL, FIELDSET validators 
P(..cr2br=True) option
FORM and SQLFORM have hidden=dict(...) option for REST
testing framework.
improved examples pages

#web2py 1.21
replaced paste.httpserver with cherrypy.wsgi server
temporary sessions are no longer saved
widget has [stop] button and graph
logging is done by main by appfactory
fixed a bug in sql belongs

#web2py 1.22-1.25
fixed minor bugs, added IS_NULL_OR

#web2py 1.26
added shell.py (thanks Limodou!)
added memcache support

#web2py 1.27
IS_NULL_OR now works will all fields
admin creates paths to static files
wsgiserver options are passed to HttpServer
faking limitby for oracle to make appadmin work
all objects inherit from object
fixed bug in app names with .
fixed bug in created RestrictedError object on windows
shell is now in gluon and accessible via web2py.py

#web2py 1.28
fixed bug with belongs, faster sql.py
included jquery.js
minor aestetical fixes
sortable.js is gone

#web2py 1.29
Now selet mutliple works with get, so does is IS_LENGTH
Added IS_LIST_OF
fixed problem with admin from windows and localhost

#web2py 1.30
added flv to contenttype
added support for appengine

#web2py 1.31-1.41
some bug fixes, mostly better appengine support
mssql support
firebird support
widgets support
connection pools

#1.42
fixed security issue by removing slash escape in mysql
removed random everywhere
use uuid for session and tickets
use http_x_forward_for to figure out the client causing a ticket
use longtext and longblob for mysql
main now really catches all exceptions
no more warnings on GAE

#1.43-1.48
html.py rewrite (better support for custom forms) (Bill Ferrett)
new stickers in examples (thanks Mateusz)
on windows can run in taskbar (Mark Larsen)
in admin|edit page link to edit|controller (Nathan Freeze)
better error codes and routes_onerror (Timothy Farrell)
DAL support for groupy and having
DAL support for expressions instead of values
DAL has experimental Informix support
fixed bug with non-printable chars in DAL
'text' fields limited to 2**16 (to avoid mysql problems)
widget has -quiet and -debug (Attila Csipa)
web2py_session uses BLOB instead of TEXT
improved IS_URL
Runs with python 2.6 (Tim)
On GAE uses GAE for static files (Robin)


#1.49
fixed a bug with taskbar widget, thanks Mark
fixed a bug with form.latest
made many DIV methods private (_)


#1.50
Fixed some bugs introduced in 1.49

#1.51
Fixed more bugs introduced in 1.49 (sql _extra and html select)
support for sqlite:memory:

#1.52
Fixed a minor bug with _extra[key] and key not str.
check for upgrade via ajax

#1.53
On GAE upload data goes automatically in datastore (blob created automatically)
New appadmin runs on GAE (most of it, not all)
Martin Hufsky patch allow slicing of fields in DAL expressions

#1.54
fixed minor bugs

#1.55?
rowcount
fixed bug when IS_IN_DB involved multiple fields on GAE
T.set_current_languages
better unittests
response.custom_commit and response.custom_rollback
you can next cache calls (like cache a controller that caches a select). Thanks Iceberg
db(....id==None).select() no longer returns an error but an empty SQLRows on GAE
db(...).delete(delete_uploads=True) and SQLFORM.accepts(....delete_uploads=True) will delete all referenced uploaded files
DIV.element and DIV.update
sqlrows.json()
SQLFORM.widgets
URL(r=request,args=0)
IS_IN_DB(...,multiple=True) for Many2Many (sort of)
In URL(...,f) f is url encoded
In routes_in=[['a/b/c/','a/b/c/?var=value']]
simplejson 2.0.7


#1.56
Consider the following table:

db.define_table('cirlce',
   db.Field('radius','double'),
   db.Field('area','double'),
   db.Field('modified_on','datetime'))

now you can do:

# add a comment in the forms
db.circle.area.comment="(this is a comment)"

# do not show area in create/edit forms
db.circle.area.writable=False

 # do not show now in display forms
db.circle.modified_on.readable=False

# automatically timestamp when record cretaed
db.circle.modified_on.default=request.now

# automatically timestamp when record is modified
db.circle.modified_on.update=request.now

# make the radius appear in bold in display and table
db.circle.radius.represent=lambda value: B(value)

# make a form that automatically computes area
pi=3.1415
form=SQLFOM(db.circle)
if form.accepts(request.vars,
onvalidation=lambda form: form.vars.area=pi*form.vars.radius**2): ...

# make a create form in two possible ways:
form=SQLFORM(db.circle)
form=SQLFORM(db.circle,0)

# make an update form in two possible ways:
form=SQLFORM(db.circle,record)
form=SQLFORM(db.circle,record_id)

# make a display form in two possible ways:
form=SQLFORM(db.circle,record,readonly=True)
form=SQLFORM(db.circle,record_id,readonly=True)

# so now you can do...

form=SQLFORM(db.circle,request.args[-1])

and you get a create form if the URL ends in /0, you get an update
form if the URL ends in /[valid_record_id]

#you can also define once for all

timestamp=SQLTable(None,'timestamp',
            SQLField('created_on','datetime',
                          writable=False,
                          default=request.now),
            SQLField('modified_on','datetime',
                          writable=False,
                          default=request.now,update=request.now))

#and use it in all your tables

db.define_table('mytable',db.Field('somefield'),timestamp) 

###

One more feature in trunk....

    db.define_table('image',SQLField('file','upload'))

    db.image.file.authorize=lambda row: True or False

then controller
    def download(): return response.download(request,db)
id' is now a hidden field sqlform
gql references converted to long
admin login has autofocus
new notation proposed by Robin, db.table[id]
new UploadWidget shows images
new generic.html shows request, response, session
new LEGEND helper (thanks Marcus)
fixed doctests in sql (thanks Robin)
new notation for DB

record=db.table[id]
db.table[id]=dict(...)
del db.table[id]

request.env.web2py_version
new class gluon.storage.Settings has lock_keys, lock_values
jquery 1.3.1
PEP8 compliance
new examples application
runs on jython (no database drivers yet, thanks Phyo)
fixed bugs in tests
passes all unittest but test_rewite (not sure it should pass that one)

Lots of patches from Fran Boone (about tools) and Dougla Soares de Andarde (Python 2.6 compliance, user use of hashlib instead of md5, new markdown2.py)

#1.56.1-1.56.4
fixing lots of small bugs with tool and languages
jquery.1.3.2

#1.57
New ajax edit with keepalive (no longer logged out when editing code)
Fixed conflict resolution page.
Removed /user/bin/python from models/controllers

#1.58
Fixed some CRON bugs
Fixed a bug with new ajax edit
Experimental DB2 support in DAL
Customizable font size in admin edit page
New welcome/models/db.py shows how to memcache sessions on GAE with MEMDB
More expressive titles in admin
DB2 support. Thanks Denes!

#1.59-1.60
fixed lots of small bugs
routes_in can filter by http_host

#1.61
fixed some typos
auth.add_permissions(0,....) 0 indicates group of current user
crud.update has deletable=True or False
fixed issue with GAE detection -> gluon.settings.web2py_runtime -> request

#1.62
SQLFORMS and crud now show readble fields
Better WingIDE support
Languages are automatically translated
T.force and lazyT works better, optional T.lazy=False
gluon.storage.Messages are now translated without T
if routes.py then request.env.web2py_original_uri
db.table.field.isattachment = True
internationalizaiton of admin by Yair
admin.py by Alvaro
new MENU helper
new w2p file format
new welcome app with auth, service and crud turned on

#1.63-1.63.4
no more import gluon.
support for generic.xxx
simplejson can handle datetime date and time

#1.63.5
You can do jQuery.noConflict() without breaking web2py_ajax
Wigets can have attributes (thanks Hans)
Lots of internal cleanup and better code reusage (thanks Hans)

#1.64
Models 2-3 times faster (thanks Alexey)
Better LDAP support
Works with Jython (including sqlite and postgresql with zxJDBC):

  download jython-2.5rc3.jar
  download qlite-jdbc-3.6.14.2.jar
  java -jar jython-xxx.jar
  export CLASSPATH=$CLASSPATH:/Users/mdipierro/jython2.5rc3/sqlite-jdbc-3.6.14.2.jar
  cd web2py
  ../jython2.5rc3/jython web2py.py

#1.64.2
New IS_COMPLEX validator, thank Mr. Freeze
Experimental Informix support
Autologin on registration

#1.64.3
Some bug fixes

#1.64.4
Som bug fixes
Informix Support
response.render(stream)
SQLFORM.factory
SQLFORM.widgets.radio and SQLFORM.widgets.checkboxes

#1.65
reST docstrings for Sphinx, thanks Hans
gluon/conrtib/login_methods/gae_google_account.py for google CAS login on GAE, thanks Hans
fixed problem with Auth and Firebird 'password' issue
new auth.settings.create_user_groups
tickets stored on datastore on GAE and also logged, thanks Hans
imporved IS_LENGTH with max and min, thanks Mateusz
improved IS_EMAIL with filters, thanks Mateusz
new IS_IMAGE checks for format and size, thanks Mateusz
new IS_IPV4, thanks Mateusz

#1.65.1
spreadsheet
shell history, thanks sherdim
crontab editor, thanks Angelo
gluon/contrib/login_methods/cas_auth.py (thanks Hans)
DAL(...) instead of SQLDB(...)
DAL('gae') instead of GQLDB()
Field instead of SQLField
(the old syntax still works)

#1.65.2
Fixed some small auth bugs
Field.store(...)

#1.65.3-10
Fixed some small bugs and typos in the docstrings
Fixed AMF3 support

#1.65.11
Fixed a sqlhtml bug with image upload

#1.65.12
lables in auth auto-translate (thanks Alvaro)
better ldap_auth (thanks Fran)
auth chacks locally for blocked accounts even for alternate login methods (thanks Fran)

#1.65.13
request.url (thanks Jonathan)
restored uploadfield_newfilename
new examples layout nad logo (thanks Mateusz)

#1.66
new doctypes
form.vars.newfilename
new HTML and XHTML helpers
better IS_LENGTH

#1.67.0
Python 2.4 support (again)
New layout for welcome
changed defauld field sizes to 512
Field(uploadfolder="...")
appadmin works on GAE (again, somehting got broken at some point)
new wsgiserver 3.2.0 should fix recurrent broken download problems

#1.67.1
Bux fixed

#1.67.2
Security fix in markdown

#1.68.1
New official markdown with security fix
rows.first()
rows.last()
New cron
New hindi and spanish translation
cached uploads allow for progress bars (thanks AndCycle)
ingres support (thanks Chris)
legacy database support for db2, mssql with non-int primary keys (thanks Denes)
default setting of content-type (this may cause strange behavior in old apps when downloading images)
IS_UPPER and IS_LOWER works with unicode
CLENUP not takes regex of allowed/now allowed chartares
New rewrite.py allows dynamic routes
Better error messages for IS_INT_* and IS_FLOAT_*

#1.68.2
Fixing bug with admin and missing crontab
Fixing bug with rewrite.load on GAE (thanks Willian Wang)

#1.69.1
Fixed a bug introduced in 1.68 about inserting unicode in DAL
Fixed other small bugs
Better support for legacy databases (thank Denes)
response.meta replaces response.author, response.keywords, response.description
response.files stets dependes in plugins
better admin for packing/unpacking plugins
reference fiels nor evaluate to DALRef with lazy evaluation (cool, thanks Mr Freeze)
can insert a record in place of a reference
record[e] instead of record._extra[e] (tentatively!)
record.update_record() with no args
rows.find()  (thanks Mr Freeze)
rows.exclude()
rows.sort()
rows[:]

#1.70.1
Fixed bug with Rows.as_list and DALRef
Added Rows.as_dict (thanks Mr Freeze and Thedeus)
Added request.wsgi (thanks hcvst) allows running wsgi apps under web2py and applying wegi middleware to regular web2py actions that return strings.
Experimental distributed transactions between postgresql, mysql and firebird
Finally local_import is here!

#1.71.1
Complete rewrite of Rows
renamed DALStorage->Rows, DALRef->Reference
Experimental serializarion of Row and Rows (get serialized to dict and list of dict)
DAL(...,folder) and template.render(content=, context=) make it more modular

#1.72.1 - 1.72.3
Better support for legacy databases

#1.73.1
Fixed problem with storage and comparison of Row objects
Fixed problem with mail on GAE
Fixed problem with T in IS_DATE(TIME) error_message and format
Rows[i].delete_record()
Even better support for legacy databases
Experimantal support for non UTF8 encoding in DB
Better IPV4 (thanks Thandeus)
T.current_languages default to 'en' and new T.set_current_languages(...) (thanks Yarko)
INPUT(...,hideerror=False) used to fix rare chechbox widget problem
Admin allows change of admin password
New gluon/contrib/populate.py
Size of input/textarea set by CSS no more by jQuery  (thanks Iceberg)
Customizable CSV  (thanks Thandeus)
More bug fixed (thanks Thandeus)
Better regex for template fixed Jython problem (thank Jonathan)

#1.74.1
Moved to mercurial
Default validators use the new define_table(....,format='...')
New get_vars and post_vars compatible in 2.5 and 2.6 (thanks Tim)
Major rewrite of gql.py extends DAL syntax on GAE
No more *.w2p, welcome.w2p is create automatically, base apps are always upgraded
export_to_csv(delimiter = ',', quotechar = '"', quoting = csv.QUOTE_MINIMAL), thanks Thadeus 

#1.74.2-4
Fix bugs including including unicode in emails and blobs on GAE

#1.74.5
bug fixes
restored python 2.4 support,thanks ont.rif
support for native types on Google App Engine
cache.ram usage statictics, thanks Thadus
no more auth manu in scaffolding
no more spash screen with -Q
fixed doctest in html.py, thanks Anand Vaidya
export_to_csv_file has represent, thanks Thadeus

#1.74.6
bug fixes
IS_IN_DB(...,_and=IS_NOT_IN_DB)
Smaller populate, thanks Piotr
better slicing of fields, thanks Michael Fig
Cache stats, thanks Thadeus
Better gql.py
IS_IN_DB and IS_IN_SET default to zero='', no longer zero=None

#1.74.7
request_password_reset and password reset verification
python web2py.py -S app -M -R script.py -A arg1 arg2 arg3
T("%(a)s") % dict(a="hello")

#1.74.8
IS_SLUG, thanks Gustavo and Jonathan
web2py.py -nogui, thanks Jeff Bauer
solved a problem with jython, thanks Tim Farrel
login has "remember be option", thanks Piotr Banasziewicz
fixed problem with keepvalue in update forms, thanks Miguel Lopez

#1.74.9
IS_IN_SET(((0,'label0'),(1,'label1'))), thanks Falko Krause
SQLFORM(...).accpets stores True or False in boolean types no None, thanks Frederik Wagner
SQLFORM.factory(...,table_name='no_table'), thanks Thedeus
jQuery 1.4.1
Fixed major problem with internationalization of multiple languages.
Fixed a serius security issue with login
Possibly fixed some issues with cron

#1.75.1
better cron
better fetch
logging of email failures
new web2py.fedora.sh
new setup-web2py-ubuntu.sh
experimental autocomplete
menus work on IE6

#1.75.2
fetch supports cache
curd.update(....,onaccept=crud.archive) magic
new UUID mechnism fixes session conflicts with cloned machine in cloud
allow to upload app and overwrite existing old ones, thanks Jonathan
print gluon.tools.prettydate(request.now,T), thanks Richard

#1.75.3
added support for PAM authentican for apps and for admin
INTRODUCED MAJOR BUG IN BEAUTIFY (upgrade to 1.75.4) IMMEDIATELY

#1.75.4
customizable BEAUTIFY, thanks John

#1.75.5
fixed behaviour with languages.py, thanks Iceberg
added chinese (thanks Iceberg) and Hungarian (thanks Gyuris)
fixed problem with GAE deleted by id (thanks what_ho)
fixed bug in LOAD with custom views, thanks vhang
improved IS_IN_SET takes iterator, dict, list and list of tuples, thanks Iceberg
Auth(...,controller='default')
Fixed major bug in parsing repeated request.vars, thanks Ben
IS_DATE and IS_DATETIME can now handle any 0<year
allow to disable editarea onload, thanks Alex

#1.76.1
editarea 0.8.2 + zencoding
new (better) cron locking meachnism
no storing session cookies on session.forget(), thank you Alvaro
routes_apps_raw allows disabling of request.args validation, thanks Jonathan and Denes
fixed problem with edit_languages ad multiple tabs, thanks Iceberg
crud captcha, thanks you Nathan
softcron disabled by default in wsgihandler and fcgihandler

#1.76.2
major fix in cron (will I ever get this 100% right?)
fix in delete for GAE
auth.settings.login_captcha and auth.settings.register_captcha
crud.settings.create_captcha and  crud.settings.update_captcha
automatic update button in admin 
