## Before Merging into `master`
* Builds should not be broken
* Examples should be updated to reflect changes
* Documentation should be updated to reflect changes
* If any changes have been made to `README.md`, ensure changes are mirrored to `README.rst` with `pandoc`

## Before Doing a Release
* Update changelog in `docs` with changes
* Bump the version in `__init__.py`
* Publish a [new release on GitHub](https://github.com/hfaran/Tornado-JSON/releases)
* Upload to [PyPI](https://pypi.python.org/pypi/Tornado-JSON)

## After the Release
* Trigger a new documentation build on [readthedocs](https://readthedocs.org/projects/tornado-json/)
* Mark active the new version on RTD (or otherwise do any version management as necessary)

**This documentation is automatically generated.**

**Output schemas only represent `data` and not the full output; see output examples and the JSend specification.**

# /api/asynchelloworld/?

    Content-Type: application/json

## GET
**Input Schema**
```json
null
```

**Output Schema**
```json
{
    "type": "string"
}
```

**Output Example**
```json
"Hello (asynchronous) world!"
```


**Notes**

Shouts hello to the world (asynchronously)!



<br>
<br>

# /api/freewilled/?

    Content-Type: application/json



<br>
<br>

# /api/greeting/\(?P\<fname\>\[a\-zA\-Z0\-9\_\]\+\)/\(?P\<lname\>\[a\-zA\-Z0\-9\_\]\+\)/?$

    Content-Type: application/json

## GET
**Input Schema**
```json
null
```

**Output Schema**
```json
{
    "type": "string"
}
```

**Output Example**
```json
"Greetings, Named Person!"
```


**Notes**

Greets you.



<br>
<br>

# /api/helloworld/?

    Content-Type: application/json

## GET
**Input Schema**
```json
null
```

**Output Schema**
```json
{
    "type": "string"
}
```

**Output Example**
```json
"Hello world!"
```


**Notes**

Shouts hello to the world!



<br>
<br>

# /api/postit/?

    Content-Type: application/json

## POST
**Input Schema**
```json
{
    "type": "object", 
    "properties": {
        "body": {
            "type": "string"
        }, 
        "index": {
            "type": "number"
        }, 
        "title": {
            "type": "string"
        }
    }
}
```

**Input Example**
```json
{
    "body": "Equally important message", 
    "index": 0, 
    "title": "Very Important Post-It Note"
}
```

**Output Schema**
```json
{
    "type": "object", 
    "properties": {
        "message": {
            "type": "string"
        }
    }
}
```

**Output Example**
```json
{
    "message": "Very Important Post-It Note was posted."
}
```


**Notes**

POST the required parameters to post a Post-It note

* `title`: Title of the note
* `body`: Body of the note
* `index`: An easy index with which to find the note



# Hello World

This demo contains several handlers that aim to show you the ropes. To get started, [visit the documentation on readthedocs](http://tornado-json.readthedocs.org/en/latest/) for a walkthrough of creating the app and setting up the single `HelloWorldHandler`. After you're done that, see the rest of the handlers in `helloworld.api`; they're annotated with comments explaining.

## Diving In

If you just want to run some code, and see things happen...

```
python helloworld.py
```

Take a look through `API_Documentation.md` for auto-generated API documentation, and see `helloworld.api` for more example code.

**This documentation is automatically generated.**

**Output schemas only represent `data` and not the full output; see output examples and the JSend specification.**

# /api/cars/\(?P\<make\>\[a\-zA\-Z0\-9\_\]\+\)/\(?P\<model\>\[a\-zA\-Z0\-9\_\]\+\)/\(?P\<year\>\[a\-zA\-Z0\-9\_\]\+\)/?$

    Content-Type: application/json



<br>
<br>

# /api/cars/\(?P\<make\>\[a\-zA\-Z0\-9\_\]\+\)/\(?P\<model\>\[a\-zA\-Z0\-9\_\]\+\)/?$

    Content-Type: application/json



<br>
<br>

# /api/cars/\(?P\<make\>\[a\-zA\-Z0\-9\_\]\+\)/?$

    Content-Type: application/json



<br>
<br>

# /api/cars/?

    Content-Type: application/json



# Creating a REST API Using URL Annotations

This demo serves as an introduction and explanation of URL annotations (a fancy name for what are two class variables: `__urls__` and `__url_names__` that provide some cool functionality. See the corresponding blurb in [the documentation](http://tornado-json.readthedocs.org/en/latest/restapi.html) for details.

**This is just a list of commands I've found useful for project maintenance**


* Update README.rst

    ```$ pandoc -s -t rst --toc README.md -o README.rst```

* Install project with files.txt record

    ```$ sudo python setup.py install --record files.txt```

* "uninstall" package installed with files.txt record

    ```$ cat files.txt | sudo xargs rm -rf```

* Generate/update base docs/ folder with Sphinx

    ```$ sphinx-apidoc -F -o docs tornado_json```

* Run tests from root project directory

    ```$ py.test --cov="tornado_json" --cov-report=term --cov-report=html```
    ```$ nosetests --with-cov --cov-report term-missing --cov tornado_json tests/```

# Tornado-JSON

[![Build Status](https://travis-ci.org/hfaran/Tornado-JSON.png?branch=master)](https://travis-ci.org/hfaran/Tornado-JSON)
[![PyPI version](https://badge.fury.io/py/Tornado-JSON.png)](http://badge.fury.io/py/Tornado-JSON)
[![Coverage Status](https://coveralls.io/repos/hfaran/Tornado-JSON/badge.png)](https://coveralls.io/r/hfaran/Tornado-JSON?branch=master)
[![Stories in Ready](https://badge.waffle.io/hfaran/Tornado-JSON.png?label=In_Progress)](http://waffle.io/hfaran/Tornado-JSON)

## Overview

Tornado-JSON is a small extension of [Tornado](http://www.tornadoweb.org/en/stable/) with the intent of providing the tools necessary to get a JSON API up and running quickly.

Some of the key features the included modules provide:

* Input and output **[JSON Schema](http://json-schema.org/) validation** by decorating RequestHandlers with `@schema.validate`
* **Automated route generation** with `routes.get_routes(package)`
* **Automated [GFM](https://help.github.com/articles/github-flavored-markdown)-formatted API documentation** using schemas and provided descriptions
* **Standardized JSON output** using the **[JSend](http://labs.omniti.com/labs/jsend)** specification

## Getting Started/FAQ

**How do I use this thing?**

* Check out the [Hello World demo](https://github.com/hfaran/Tornado-JSON/tree/master/demos/helloworld) for a quick example and the [accompanying walkthrough](http://tornado-json.readthedocs.org/en/latest/using_tornado_json.html) in the documentation. And then [**explore Tornado-JSON on readthedocs for the rest!**](http://tornado-json.readthedocs.org/en/latest/index.html#)

**Okay, but how do I install it?**

* For the possibly stable

```
pip install Tornado-JSON
```

* For the latest and greatest

```
git clone https://github.com/hfaran/Tornado-JSON.git
cd Tornado-JSON
sudo python setup.py install
```

**Neat, but `x` sucks, `y` is ugly, and `z` could be better.**

* You would be awesome for [opening an issue about it](https://github.com/hfaran/Tornado-JSON/issues/new), and I'll promise my best to take a look.
 
**You completely changed the interface in a recent update; what gives?**

* But newer is so much better! Seriously though, `Tornado-JSON` is, at the moment, still very much a work in progress. Updates will be made that will break the existing interface (and replace it with a shiny, new, much better one). All in the name of making it better! (And progress etc.)


## Dependencies

*Python2.7 and Python3.3 are supported.*

These dependencies can be satisfied by running `pip install -r requirements.txt`

* [tornado](http://www.tornadoweb.org/en/stable/)
* [jsonschema](https://python-jsonschema.readthedocs.org/en/latest/)

.. contents::
   :depth: 3
..

Tornado-JSON
============

|Build Status| |PyPI version| |Coverage Status| |Stories in Ready|

Overview
--------

Tornado-JSON is a small extension of
`Tornado <http://www.tornadoweb.org/en/stable/>`__ with the intent of
providing the tools necessary to get a JSON API up and running quickly.

Some of the key features the included modules provide:

-  Input and output **`JSON Schema <http://json-schema.org/>`__
   validation** by decorating RequestHandlers with ``@schema.validate``
-  **Automated route generation** with ``routes.get_routes(package)``
-  **Automated
   `GFM <https://help.github.com/articles/github-flavored-markdown>`__-formatted
   API documentation** using schemas and provided descriptions
-  **Standardized JSON output** using the
   **`JSend <http://labs.omniti.com/labs/jsend>`__** specification

Getting Started/FAQ
-------------------

**How do I use this thing?**

-  Check out the `Hello World
   demo <https://github.com/hfaran/Tornado-JSON/tree/master/demos/helloworld>`__
   for a quick example and the `accompanying
   walkthrough <http://tornado-json.readthedocs.org/en/latest/using_tornado_json.html>`__
   in the documentation. And then `**explore Tornado-JSON on readthedocs
   for the
   rest!** <http://tornado-json.readthedocs.org/en/latest/index.html#>`__

**Okay, but how do I install it?**

-  For the possibly stable

::

    pip install Tornado-JSON

-  For the latest and greatest

::

    git clone https://github.com/hfaran/Tornado-JSON.git
    cd Tornado-JSON
    sudo python setup.py install

**Neat, but ``x`` sucks, ``y`` is ugly, and ``z`` could be better.**

-  You would be awesome for `opening an issue about
   it <https://github.com/hfaran/Tornado-JSON/issues/new>`__, and I'll
   promise my best to take a look.

**You completely changed the interface in a recent update; what gives?**

-  But newer is so much better! Seriously though, ``Tornado-JSON`` is,
   at the moment, still very much a work in progress. Updates will be
   made that will break the existing interface (and replace it with a
   shiny, new, much better one). All in the name of making it better!
   (And progress etc.)

Dependencies
------------

*Python2.7 and Python3.3 are supported.*

These dependencies can be satisfied by running
``pip install -r requirements.txt``

-  `tornado <http://www.tornadoweb.org/en/stable/>`__
-  `jsonschema <https://python-jsonschema.readthedocs.org/en/latest/>`__

.. |Build Status| image:: https://travis-ci.org/hfaran/Tornado-JSON.png?branch=master
   :target: https://travis-ci.org/hfaran/Tornado-JSON
.. |PyPI version| image:: https://badge.fury.io/py/Tornado-JSON.png
   :target: http://badge.fury.io/py/Tornado-JSON
.. |Coverage Status| image:: https://coveralls.io/repos/hfaran/Tornado-JSON/badge.png
   :target: https://coveralls.io/r/hfaran/Tornado-JSON?branch=master
.. |Stories in Ready| image:: https://badge.waffle.io/hfaran/Tornado-JSON.png?label=In_Progress
   :target: http://waffle.io/hfaran/Tornado-JSON

