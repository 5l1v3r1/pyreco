__FILENAME__ = color
# stolen from https://github.com/securusglobal/abrupt by @tweksteen

style_normal = "\033[0m"
style_great_success = "\033[1;32m"
style_success = "\033[32m"
style_error = "\033[1;31m"
style_warning = "\033[1;33m"
style_info = "\033[1;34m"
style_stealthy = "\033[37m"
  
def success(s):
  return style_success + s + style_normal

def error(s):
  return style_error + s + style_normal

def warning(s):
  return style_warning + s + style_normal

def great_success(s):
  return style_great_success + s + style_normal

def info(s):
  return style_info + s + style_normal

def stealthy(s):
  return style_stealthy + s + style_normal

def color_status(status):
  if status.startswith("2"):
    return great_success(status)
  elif status.startswith("3"):
    return warning(status)
  elif status.startswith("4") or status.startswith("5"):
    return error(status)
  return stealthy(status)
    

########NEW FILE########
__FILENAME__ = admin
from models import Client, AP, Location
from django.contrib import admin

class ClientAdmin(admin.ModelAdmin):
	list_display = ['manufacturer', 'mac', 'lastseen_date', 'name']

class APAdmin(admin.ModelAdmin):
	list_display = ['SSID', 'BSSID', 'manufacturer', 'lastprobed_date', 'name']

admin.site.register(Client, ClientAdmin)
admin.site.register(AP, APAdmin)
admin.site.register(Location)


########NEW FILE########
__FILENAME__ = BSSIDApple_pb2
# Generated by the protocol buffer compiler.  DO NOT EDIT!

from google.protobuf import descriptor
from google.protobuf import message
from google.protobuf import reflection
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)



DESCRIPTOR = descriptor.FileDescriptor(
  name='BSSIDApple.proto',
  package='',
  serialized_pb='\n\x10\x42SSIDApple.proto\"\x9b\x03\n\x0cWifiDetected\x12\r\n\x05\x62ssid\x18\x01 \x02(\t\x12(\n\x08location\x18\x02 \x01(\x0b\x32\x16.WifiDetected.Location\x1a\xd1\x02\n\x08Location\x12\x10\n\x08latitude\x18\x01 \x01(\x03\x12\x11\n\tlongitude\x18\x02 \x01(\x03\x12\x18\n\x10valeur_inconnue3\x18\x03 \x01(\x03\x12\x18\n\x10valeur_inconnue4\x18\x04 \x01(\x03\x12\x18\n\x10valeur_inconnue5\x18\x05 \x01(\x03\x12\x18\n\x10valeur_inconnue6\x18\x06 \x01(\x03\x12\x18\n\x10valeur_inconnue7\x18\x07 \x01(\x03\x12\x18\n\x10valeur_inconnue8\x18\x08 \x01(\x03\x12\x18\n\x10valeur_inconnue9\x18\t \x01(\x03\x12\x19\n\x11valeur_inconnue10\x18\n \x01(\x03\x12\x19\n\x11valeur_inconnue11\x18\x0b \x01(\x03\x12\x19\n\x11valeur_inconnue12\x18\x0c \x01(\x03\x12\x19\n\x11valeur_inconnue21\x18\x15 \x01(\x03\"\x8d\x01\n\x0f\x42lockBSSIDApple\x12\x18\n\x10valeur_inconnue0\x18\x01 \x01(\x03\x12\x1b\n\x04wifi\x18\x02 \x03(\x0b\x32\r.WifiDetected\x12\x18\n\x10valeur_inconnue1\x18\x03 \x01(\x05\x12\x18\n\x10valeur_inconnue2\x18\x04 \x01(\x05\x12\x0f\n\x07\x41PIName\x18\x05 \x01(\t')




_WIFIDETECTED_LOCATION = descriptor.Descriptor(
  name='Location',
  full_name='WifiDetected.Location',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='latitude', full_name='WifiDetected.Location.latitude', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='longitude', full_name='WifiDetected.Location.longitude', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='valeur_inconnue3', full_name='WifiDetected.Location.valeur_inconnue3', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='valeur_inconnue4', full_name='WifiDetected.Location.valeur_inconnue4', index=3,
      number=4, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='valeur_inconnue5', full_name='WifiDetected.Location.valeur_inconnue5', index=4,
      number=5, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='valeur_inconnue6', full_name='WifiDetected.Location.valeur_inconnue6', index=5,
      number=6, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='valeur_inconnue7', full_name='WifiDetected.Location.valeur_inconnue7', index=6,
      number=7, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='valeur_inconnue8', full_name='WifiDetected.Location.valeur_inconnue8', index=7,
      number=8, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='valeur_inconnue9', full_name='WifiDetected.Location.valeur_inconnue9', index=8,
      number=9, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='valeur_inconnue10', full_name='WifiDetected.Location.valeur_inconnue10', index=9,
      number=10, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='valeur_inconnue11', full_name='WifiDetected.Location.valeur_inconnue11', index=10,
      number=11, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='valeur_inconnue12', full_name='WifiDetected.Location.valeur_inconnue12', index=11,
      number=12, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='valeur_inconnue21', full_name='WifiDetected.Location.valeur_inconnue21', index=12,
      number=21, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=95,
  serialized_end=432,
)

_WIFIDETECTED = descriptor.Descriptor(
  name='WifiDetected',
  full_name='WifiDetected',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='bssid', full_name='WifiDetected.bssid', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='location', full_name='WifiDetected.location', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_WIFIDETECTED_LOCATION, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=21,
  serialized_end=432,
)


_BLOCKBSSIDAPPLE = descriptor.Descriptor(
  name='BlockBSSIDApple',
  full_name='BlockBSSIDApple',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='valeur_inconnue0', full_name='BlockBSSIDApple.valeur_inconnue0', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='wifi', full_name='BlockBSSIDApple.wifi', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='valeur_inconnue1', full_name='BlockBSSIDApple.valeur_inconnue1', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='valeur_inconnue2', full_name='BlockBSSIDApple.valeur_inconnue2', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='APIName', full_name='BlockBSSIDApple.APIName', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=435,
  serialized_end=576,
)

_WIFIDETECTED_LOCATION.containing_type = _WIFIDETECTED;
_WIFIDETECTED.fields_by_name['location'].message_type = _WIFIDETECTED_LOCATION
_BLOCKBSSIDAPPLE.fields_by_name['wifi'].message_type = _WIFIDETECTED
DESCRIPTOR.message_types_by_name['WifiDetected'] = _WIFIDETECTED
DESCRIPTOR.message_types_by_name['BlockBSSIDApple'] = _BLOCKBSSIDAPPLE

class WifiDetected(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  
  class Location(message.Message):
    __metaclass__ = reflection.GeneratedProtocolMessageType
    DESCRIPTOR = _WIFIDETECTED_LOCATION
    
    # @@protoc_insertion_point(class_scope:WifiDetected.Location)
  DESCRIPTOR = _WIFIDETECTED
  
  # @@protoc_insertion_point(class_scope:WifiDetected)

class BlockBSSIDApple(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _BLOCKBSSIDAPPLE
  
  # @@protoc_insertion_point(class_scope:BlockBSSIDApple)

# @@protoc_insertion_point(module_scope)

########NEW FILE########
__FILENAME__ = GSM_pb2
# Generated by the protocol buffer compiler.  DO NOT EDIT!

from google.protobuf import descriptor
from google.protobuf import message
from google.protobuf import reflection
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)



DESCRIPTOR = descriptor.FileDescriptor(
  name='GSM.proto',
  package='',
  serialized_pb='\n\tGSM.proto\"<\n\x06MyCell\x12\x0b\n\x03MCC\x18\x01 \x01(\x03\x12\x0b\n\x03MNC\x18\x02 \x01(\x03\x12\x0b\n\x03\x43ID\x18\x03 \x01(\x03\x12\x0b\n\x03LAC\x18\x04 \x01(\x03\"T\n\x0f\x43\x65llReqToApple1\x12\x15\n\x04\x63\x65ll\x18\x01 \x03(\x0b\x32\x07.MyCell\x12\x0e\n\x06param3\x18\x03 \x01(\x03\x12\x0e\n\x06param4\x18\x04 \x01(\x03\x12\n\n\x02ua\x18\x05 \x01(\t\"M\n\x10\x43\x65llReqToApple25\x12\x15\n\x04\x63\x65ll\x18\x19 \x02(\x0b\x32\x07.MyCell\x12\x10\n\x08unknown3\x18\x03 \x01(\x03\x12\x10\n\x08unknown4\x18\x04 \x01(\x03\"\xee\x01\n\rCellResponse1\x12\x0b\n\x03MCC\x18\x01 \x01(\x03\x12\x0b\n\x03MNC\x18\x02 \x01(\x03\x12\x0b\n\x03\x43ID\x18\x03 \x01(\x03\x12\x0b\n\x03LAC\x18\x04 \x01(\x03\x12)\n\x08location\x18\x05 \x01(\x0b\x32\x17.CellResponse1.Location\x12\x0f\n\x07\x63hannel\x18\x0b \x01(\x03\x12\x0e\n\x06\x64\x61ta12\x18\x0c \x01(\x03\x1a]\n\x08Location\x12\x10\n\x08latitude\x18\x01 \x02(\x03\x12\x11\n\tlongitude\x18\x02 \x02(\x03\x12\r\n\x05\x64\x61ta3\x18\x03 \x01(\x03\x12\r\n\x05\x64\x61ta4\x18\x04 \x01(\x03\x12\x0e\n\x06\x64\x61ta12\x18\x0c \x01(\x03\"\xe5\x01\n\x0e\x43\x65llResponse22\x12\x0b\n\x03MCC\x18\x01 \x01(\x03\x12\x0b\n\x03MNC\x18\x02 \x01(\x03\x12\x0b\n\x03\x43ID\x18\x03 \x01(\x03\x12\x0b\n\x03LAC\x18\x04 \x01(\x03\x12*\n\x08location\x18\x05 \x01(\x0b\x32\x18.CellResponse22.Location\x12\x0f\n\x07\x63hannel\x18\x06 \x01(\x03\x1a\x62\n\x08Location\x12\x10\n\x08latitude\x18\x01 \x02(\x03\x12\x11\n\tlongitude\x18\x02 \x02(\x03\x12\x12\n\nconfidence\x18\x03 \x01(\x03\x12\r\n\x05\x64\x61ta4\x18\x04 \x01(\x03\x12\x0e\n\x06\x64\x61ta12\x18\x0c \x01(\x03\"4\n\x13\x43\x65llInfoFromApple22\x12\x1d\n\x04\x63\x65ll\x18\x16 \x03(\x0b\x32\x0f.CellResponse22\"2\n\x12\x43\x65llInfoFromApple1\x12\x1c\n\x04\x63\x65ll\x18\x01 \x03(\x0b\x32\x0e.CellResponse1')




_MYCELL = descriptor.Descriptor(
  name='MyCell',
  full_name='MyCell',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='MCC', full_name='MyCell.MCC', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='MNC', full_name='MyCell.MNC', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='CID', full_name='MyCell.CID', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='LAC', full_name='MyCell.LAC', index=3,
      number=4, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=13,
  serialized_end=73,
)


_CELLREQTOAPPLE1 = descriptor.Descriptor(
  name='CellReqToApple1',
  full_name='CellReqToApple1',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='cell', full_name='CellReqToApple1.cell', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='param3', full_name='CellReqToApple1.param3', index=1,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='param4', full_name='CellReqToApple1.param4', index=2,
      number=4, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='ua', full_name='CellReqToApple1.ua', index=3,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=unicode("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=75,
  serialized_end=159,
)


_CELLREQTOAPPLE25 = descriptor.Descriptor(
  name='CellReqToApple25',
  full_name='CellReqToApple25',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='cell', full_name='CellReqToApple25.cell', index=0,
      number=25, type=11, cpp_type=10, label=2,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='unknown3', full_name='CellReqToApple25.unknown3', index=1,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='unknown4', full_name='CellReqToApple25.unknown4', index=2,
      number=4, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=161,
  serialized_end=238,
)


_CELLRESPONSE1_LOCATION = descriptor.Descriptor(
  name='Location',
  full_name='CellResponse1.Location',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='latitude', full_name='CellResponse1.Location.latitude', index=0,
      number=1, type=3, cpp_type=2, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='longitude', full_name='CellResponse1.Location.longitude', index=1,
      number=2, type=3, cpp_type=2, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='data3', full_name='CellResponse1.Location.data3', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='data4', full_name='CellResponse1.Location.data4', index=3,
      number=4, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='data12', full_name='CellResponse1.Location.data12', index=4,
      number=12, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=386,
  serialized_end=479,
)

_CELLRESPONSE1 = descriptor.Descriptor(
  name='CellResponse1',
  full_name='CellResponse1',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='MCC', full_name='CellResponse1.MCC', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='MNC', full_name='CellResponse1.MNC', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='CID', full_name='CellResponse1.CID', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='LAC', full_name='CellResponse1.LAC', index=3,
      number=4, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='location', full_name='CellResponse1.location', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='channel', full_name='CellResponse1.channel', index=5,
      number=11, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='data12', full_name='CellResponse1.data12', index=6,
      number=12, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_CELLRESPONSE1_LOCATION, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=241,
  serialized_end=479,
)


_CELLRESPONSE22_LOCATION = descriptor.Descriptor(
  name='Location',
  full_name='CellResponse22.Location',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='latitude', full_name='CellResponse22.Location.latitude', index=0,
      number=1, type=3, cpp_type=2, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='longitude', full_name='CellResponse22.Location.longitude', index=1,
      number=2, type=3, cpp_type=2, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='confidence', full_name='CellResponse22.Location.confidence', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='data4', full_name='CellResponse22.Location.data4', index=3,
      number=4, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='data12', full_name='CellResponse22.Location.data12', index=4,
      number=12, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=613,
  serialized_end=711,
)

_CELLRESPONSE22 = descriptor.Descriptor(
  name='CellResponse22',
  full_name='CellResponse22',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='MCC', full_name='CellResponse22.MCC', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='MNC', full_name='CellResponse22.MNC', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='CID', full_name='CellResponse22.CID', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='LAC', full_name='CellResponse22.LAC', index=3,
      number=4, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='location', full_name='CellResponse22.location', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    descriptor.FieldDescriptor(
      name='channel', full_name='CellResponse22.channel', index=5,
      number=6, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_CELLRESPONSE22_LOCATION, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=482,
  serialized_end=711,
)


_CELLINFOFROMAPPLE22 = descriptor.Descriptor(
  name='CellInfoFromApple22',
  full_name='CellInfoFromApple22',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='cell', full_name='CellInfoFromApple22.cell', index=0,
      number=22, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=713,
  serialized_end=765,
)


_CELLINFOFROMAPPLE1 = descriptor.Descriptor(
  name='CellInfoFromApple1',
  full_name='CellInfoFromApple1',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    descriptor.FieldDescriptor(
      name='cell', full_name='CellInfoFromApple1.cell', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  serialized_start=767,
  serialized_end=817,
)

_CELLREQTOAPPLE1.fields_by_name['cell'].message_type = _MYCELL
_CELLREQTOAPPLE25.fields_by_name['cell'].message_type = _MYCELL
_CELLRESPONSE1_LOCATION.containing_type = _CELLRESPONSE1;
_CELLRESPONSE1.fields_by_name['location'].message_type = _CELLRESPONSE1_LOCATION
_CELLRESPONSE22_LOCATION.containing_type = _CELLRESPONSE22;
_CELLRESPONSE22.fields_by_name['location'].message_type = _CELLRESPONSE22_LOCATION
_CELLINFOFROMAPPLE22.fields_by_name['cell'].message_type = _CELLRESPONSE22
_CELLINFOFROMAPPLE1.fields_by_name['cell'].message_type = _CELLRESPONSE1
DESCRIPTOR.message_types_by_name['MyCell'] = _MYCELL
DESCRIPTOR.message_types_by_name['CellReqToApple1'] = _CELLREQTOAPPLE1
DESCRIPTOR.message_types_by_name['CellReqToApple25'] = _CELLREQTOAPPLE25
DESCRIPTOR.message_types_by_name['CellResponse1'] = _CELLRESPONSE1
DESCRIPTOR.message_types_by_name['CellResponse22'] = _CELLRESPONSE22
DESCRIPTOR.message_types_by_name['CellInfoFromApple22'] = _CELLINFOFROMAPPLE22
DESCRIPTOR.message_types_by_name['CellInfoFromApple1'] = _CELLINFOFROMAPPLE1

class MyCell(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _MYCELL
  
  # @@protoc_insertion_point(class_scope:MyCell)

class CellReqToApple1(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _CELLREQTOAPPLE1
  
  # @@protoc_insertion_point(class_scope:CellReqToApple1)

class CellReqToApple25(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _CELLREQTOAPPLE25
  
  # @@protoc_insertion_point(class_scope:CellReqToApple25)

class CellResponse1(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  
  class Location(message.Message):
    __metaclass__ = reflection.GeneratedProtocolMessageType
    DESCRIPTOR = _CELLRESPONSE1_LOCATION
    
    # @@protoc_insertion_point(class_scope:CellResponse1.Location)
  DESCRIPTOR = _CELLRESPONSE1
  
  # @@protoc_insertion_point(class_scope:CellResponse1)

class CellResponse22(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  
  class Location(message.Message):
    __metaclass__ = reflection.GeneratedProtocolMessageType
    DESCRIPTOR = _CELLRESPONSE22_LOCATION
    
    # @@protoc_insertion_point(class_scope:CellResponse22.Location)
  DESCRIPTOR = _CELLRESPONSE22
  
  # @@protoc_insertion_point(class_scope:CellResponse22)

class CellInfoFromApple22(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _CELLINFOFROMAPPLE22
  
  # @@protoc_insertion_point(class_scope:CellInfoFromApple22)

class CellInfoFromApple1(message.Message):
  __metaclass__ = reflection.GeneratedProtocolMessageType
  DESCRIPTOR = _CELLINFOFROMAPPLE1
  
  # @@protoc_insertion_point(class_scope:CellInfoFromApple1)

# @@protoc_insertion_point(module_scope)

########NEW FILE########
__FILENAME__ = models
from django.db import models
from picklefield.fields import PickledObjectField
from datetime import datetime

class Client(models.Model):
	mac = models.CharField(max_length=len('ff:ff:ff:ff:ff:ff'), unique=True) 
	lastseen_date = models.DateTimeField('date last seen')
	name = models.CharField(max_length=200, blank=True)
	comment = models.CharField(max_length=200, blank=True)
	manufacturer = models.CharField(max_length=200, blank=True)
	def __unicode__(self):
		return u'%s' % (self.mac)

class AP(models.Model):
	client = models.ManyToManyField(Client)
	SSID = models.CharField(max_length=200, blank=True)
	BSSID = models.CharField(max_length=len('ff:ff:ff:ff:ff:ff'), blank=True)
	name = models.CharField(max_length=200, blank=True)
	comment = models.CharField(max_length=200, blank=True)
	manufacturer = models.CharField(max_length=200, blank=True)
	lastprobed_date = models.DateTimeField('date last probed for')
	lon = models.FloatField(null=True)
	lat = models.FloatField(null=True)
	address = models.CharField(max_length=200, blank=True)
	def __unicode__(self):
		if self.SSID and self.BSSID:
			return u'%s [%s]' % (self.SSID,self.BSSID)
		if self.SSID:
			return u'%s' % self.SSID
                if self.BSSID:
                        return u'<font color="red">ARP:%s</font>' % self.BSSID

class PointDB(models.Model):
     name = models.CharField(max_length=200, unique=True)
     date_saved = models.DateTimeField('date saved', default=datetime.now)
     pointdict = PickledObjectField()

class Location(models.Model):
	ap = models.ForeignKey(AP)
	lon = models.FloatField()
	lat = models.FloatField()
	name = models.CharField(max_length=200, blank=True)
	source = models.CharField(max_length=20) # Apple or Wigle at present
	comment = models.CharField(max_length=200, blank=True)
	def __unicode__(self):
		return u'%s,%s' % (self.lon,self.lat)

########NEW FILE########
__FILENAME__ = settings
# Django settings for iSniff_GPS project.

DEBUG = True
TEMPLATE_DEBUG = DEBUG

ADMINS = (
    # ('Your Name', 'your_email@example.com'),
)

MANAGERS = ADMINS

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'iSniff_GPS.sqlite3',#'isniff_gps',                      # Or path to database file if using sqlite3.
        'USER': '',                      # Not used with sqlite3.
        'PASSWORD': '',                  # Not used with sqlite3.
        'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
    }
}

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# On Unix systems, a value of None will cause Django to use the same
# timezone as the operating system.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'America/Chicago'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale.
USE_L10N = True

# If you set this to False, Django will not use timezone-aware datetimes.
USE_TZ = False

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
MEDIA_ROOT = ''

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = ''

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = '/home/isniff/iSniff_GPS/static'

# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = '/static/'

# Additional locations of static files
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

# Make this unique, and don't share it with anybody.
SECRET_KEY = '84g2xcu*$&amp;glj*3kwhh+_nhndr(8i-96@ye$3ghr&amp;sqbrv0wl('

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
    'django.template.loaders.eggs.Loader',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
#    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # Uncomment the next line for simple clickjacking protection:
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
)

ROOT_URLCONF = 'iSniff_GPS.urls'

# Python dotted path to the WSGI application used by Django's runserver.
WSGI_APPLICATION = 'iSniff_GPS.wsgi.application'

TEMPLATE_DIRS = (
	"/home/isniff/iSniff_GPS/iSniff_GPS/templates"
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Uncomment the next line to enable the admin:
    'django.contrib.admin',
    'iSniff_GPS'
    # Uncomment the next line to enable admin documentation:
    # 'django.contrib.admindocs',
)

SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_SAVE_EVERY_REQUEST = True

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}

########NEW FILE########
__FILENAME__ = dict_lookup
from django import template

register = template.Library()

@register.filter
def key(d, key):
    return d[key]

########NEW FILE########
__FILENAME__ = dot_colour
from django import template

register = template.Library()

@register.filter
def dot_colour(operator):
	d = 'blue'
	if 'Optus' in operator:
		d = 'yellow'
	if 'Vodafone' in operator:
		d = 'red'
	if 'Three' in operator:
		d = 'red'

	if 'CID:-1' in operator:
		return d+'LAC'
	
	return d+'Cell'


########NEW FILE########
__FILENAME__ = urls
from django.contrib.staticfiles.urls import staticfiles_urlpatterns
from django.conf.urls import patterns, include, url
from django.contrib import admin
from views import *

admin.autodiscover()

urlpatterns = patterns('',
    url(r'^$', ClientList.as_view(), name="clientlist"),
    url(r'^client/(?P<slug>[:\w]+)$', ClientDetail.as_view(), name="client"),
    url(r'^clients/?$', ClientList.as_view()),
    url(r'^network/(?P<ssid_or_bssid>.+)$', APDetail.as_view(), name="network"),
    url(r'^networks/?$', APList.as_view(), name="networks"),
    url(r'^apple-wloc/?$', AppleWloc, name="applewloc-base"),
    url(r'^savedb/(?P<name>[:\w]*)$', SaveDB, name="savedb"),
    url(r'^loaddb/(?P<name>[:\w]*)$', LoadDB, name="loaddb"),
    url(r'^apple-wloc/(?P<bssid>[:\w]+)$', AppleWloc, name="applewloc"),
    url(r'^apple-mobile/(?P<cellid>[:\w-]*)$', AppleMobile, name="apple-mobile"),
    url(r'^apple-mobile-lte/(?P<cellid>[:\w-]*)$', AppleMobile, {'LTE':True}, name="apple-mobile-lte"),
    url(r'^updateSSID$', updateSSID, name="updatessid"),
    url(r'^locateSSID/?$', locateSSID, name="locatessid-base"),
    url(r'^locateSSID/(?P<ssid>[\w\W]+)$', locateSSID, name="locatessid"),
    url(r'^stats/?$', stats.as_view(), name="stats"),

    url(r'^admin/', include(admin.site.urls)),)

########NEW FILE########
__FILENAME__ = views
from django.http import HttpResponse, HttpRequest
from django.core.exceptions import *
from django.shortcuts import render
from django.views.generic import *
from django.db.models import Count
from datetime import datetime
from models import *
from string import lower
import wigle
import wloc
import re
from netaddr import EUI

def get_manuf(apdict):
	manufdict = {}
	for m in apdict.keys():
		try:
	                mac = EUI(m)
        	        manufdict[m] = mac.oui.records[0]['org']
			#.split(' ')[0].replace(',','')
        	        #.replace(', Inc','').replace(' Inc.','')
	        except:
                	manufdict[m] = 'unknown'
        return manufdict

class ClientList(ListView):
	model = Client
	template_name = 'client_list.html'
        def get_queryset(self):
          return Client.objects.order_by('manufacturer','mac')
        def get_context_data(self, **kwargs):
	       	context = super(ClientList, self).get_context_data(**kwargs)
		probedict = {}
		for client in Client.objects.all():
			probedict[client] = AP.objects.filter(client=client)
		context['probedict'] = probedict
		context['apcount'] = len(AP.objects.all())
		context['devicecount'] = len(Client.objects.all())
	        return context

class ClientDetail(DetailView):
	model = Client
	slug_field = 'mac'
	template_name = 'client_detail.html'
        def get_context_data(self, **kwargs):
	       	context = super(ClientDetail, self).get_context_data(**kwargs)
		context['APs'] = AP.objects.filter(client=self.object)
	        return context

class APList(ListView):
	model = AP
	template_name = 'ap_list.html'
        def get_queryset(self):
        	return AP.objects.annotate(num_clients=Count('client')).order_by('-num_clients')
        def get_context_data(self, **kwargs):
			context = super(APList, self).get_context_data(**kwargs)
			context['apcount'] = len(AP.objects.all())
			context['devicecount'] = len(Client.objects.all())
			#context['Clients'] = self.object.client
			return context

class APDetail(DetailView):
	model = AP
	template_name = 'ap_detail.html'
	def get_object(self):
		lookup = self.kwargs['ssid_or_bssid']
		if re.match(r'\w\w:\w\w:\w\w:\w\w:\w\w:\w\w',lookup):
			a=AP.objects.get(BSSID=lookup)
		else:
			a=AP.objects.get(SSID=lookup)
		return a

	def get_context_data(self, **kwargs):
		print self.kwargs
		context = super(APDetail, self).get_context_data(**kwargs)
		context['Clients'] = self.object.client.all()
		return context

class Home(TemplateView):
    template_name = "home.html"
 
class stats(TemplateView):
    template_name = "stats.html"
    def get_context_data(self, **kwargs):
        from operator import itemgetter
        context = super(stats, self).get_context_data(**kwargs)
        manuf = {}
	for m in Client.objects.values_list('manufacturer',flat=True).distinct():
		m = m[0].upper()+(m[1:].lower())
        	manuf[m] = len(Client.objects.filter(manufacturer__iexact=m))
	l = []
	for m in manuf.items():
        	l.append(m)		
	context['manuf']=sorted(l, key=itemgetter(1), reverse=True)[:10]
	context['devicecount'] = len(Client.objects.all())
        return context


def getCenter(apdict):
	numresults = len(apdict)
	latCenter = 0.0
	lonCenter = 0.0	
	for (lat,lon) in apdict.values():
		latCenter += lat
		lonCenter += lon
	try:
		return( ((latCenter / numresults),(lonCenter / numresults)) )
	except ZeroDivisionError:
		return((0,0))
	
def AppleWloc(request,bssid=None):	
	if not bssid:
		bssid = '00:20:b0:12:3c:40'
	print 'Got request for %s' % bssid
	if request.GET.get('ajax'):
		template='apple-wloc-ajax.js'		
	else:
		template='apple-wloc.html'
		request.session['apdict'] = {}
		request.session['apset'] = set() #reset server-side cache of unique bssids if we load page normally
	print '%s in set at start' % len(request.session['apset'])
	bssid=lower(bssid)
	apdict = wloc.QueryBSSID(bssid)	
	print '%s returned from Apple' % len(apdict)
	dupes = 0
	for ap in apdict.keys():
		if ap in request.session['apset']:
			dupes += 1
			del apdict[ap]
		request.session['apset'].add(ap)
	numresults = len(apdict)
	print '%s dupes excluded' % dupes
	print '%s in set post filter' % len(request.session['apset'])
	print '%s returned to browser post filter' % numresults
	#if numresults == 0 or (-180.0, -180.0) in apdict.values():
	#	return HttpResponse('0 results.')
	if bssid in apdict.keys():
		try:
			a = AP.objects.get(BSSID=bssid) #original design - only save ap to db if it's one that has been probed for
			(a.lat,a.lon) = apdict[bssid]
			a.save() #if Apple returns a match for BSSID we save this as location
			print 'Updated %s location to %s' % (a,(a.lat,a.lon))
		except ObjectDoesNotExist:
			pass
	for key in apdict.keys():
		request.session['apdict'][key] = apdict[key]
	print 'Session apdict: %s' % len(request.session['apdict'])
	return render(request,template,{'bssid':bssid,'hits':len(apdict),'center':getCenter(apdict),'bssids':apdict.keys(),'apdict':apdict,'manufdict':get_manuf(apdict)})

def LoadDB(request,name=None):
	c=PointDB.objects.get(name=name)
	request.session['apdict']=c.pointdict
	apdict = request.session['apdict']
	request.session['apset']=set(apdict.keys())
	print 'Loaded saved DB %s from %s' % (name,c.date_saved)
	return render(request,'apple-wloc.html',{'bssid':apdict.keys()[0],'hits':len(apdict),'center':getCenter(apdict),'bssids':apdict.keys(),'apdict':apdict,'manufdict':get_manuf(apdict)})

def SaveDB(request,name=None):
	try:
		c = PointDB.objects.get(name=name)
	except ObjectDoesNotExist:
		c = PointDB(name=name)
	c.pointdict = request.session['apdict']
	c.save()
	return HttpResponse('Saved %s points as %s' % (len(request.session['apdict'].keys()),name)) #xss

def AppleMobile(request,cellid=None,LTE=False):
	if 'cellset' not in request.session:
		request.session['cellset'] = set()
	if request.GET.get('ajax'):
		template='apple-mobile-ajax.js'		
	else:
		template='apple-mobile.html'
		request.session['cellset'] = set()
	if cellid:
		(celldict,celldesc) = wloc.QueryMobile(cellid,LTE)
		numresults = len(celldict)
		if numresults == 0:
			return HttpResponse('0 results.')
		dupes = 0
		for cell in celldict.keys():
			if cell in request.session['cellset']:
				dupes += 1
				del celldict[cell]
			request.session['cellset'].add(cell)
		return render(request,template,{'bssid':cellid,'hits':len(celldict),'center':getCenter(celldict),\
			'bssids':celldict.keys(),'apdict':celldict,'manufdict':celldesc,'LTE':LTE})
	else:
		return render(request,'wigle-wloc.html',{'ssid':'','center':(56.97518158, 24.17274475)})

def locateSSID(request,ssid=None):
	if ssid:
		apdict = wigle.getLocation(SSID=ssid)
		numresults = len(apdict)
		if numresults == 0:
			return HttpResponse('0 results.')
		return render(request,'wigle-wloc.html',{'ssid':ssid,'hits':len(apdict),'center':getCenter(apdict),'bssids':apdict.keys(),'apdict':apdict})
	else:
		return render(request,'wigle-wloc.html',{'ssid':'','center':(56.97518158, 24.17274475)})
		
def updateSSID(request):
	try:
		ssid = request.POST['ssid']
		(lat,lon) = request.POST['position'].replace('(','').replace(')','').split(',')
		lat = float(lat)
		lon = float(lon)
		a = AP.objects.get(SSID=ssid)
		(a.lat,a.lon) = (lat,lon)
		a.save()
		return HttpResponse('Updated %s location to %s' % (a,(a.lat,a.lon)))
	except ObjectDoesNotExist:
		return HttpResponse('Not found in db.')




########NEW FILE########
__FILENAME__ = wigle
#!/usr/bin/python

import re
import requests
#import simplekml
from bs4 import BeautifulSoup

# parse lat/lon from hrefs in results page like
# <a href="/gps/gps/Map/onlinemap2/?maplat=39.89233017&maplon=-86.15497589&mapzoom=17&ssid=NETGEAR&netid=00:00:85:E7:0C:01">Get Map</a>

def getLocation(BSSID='',SSID=''):
	payload = {'netid':BSSID, 'ssid':SSID}
	cookie = dict(auth='isniff:828743010:1376760763:hcPtNcrXETNsQIMIan/1sA')
	r = requests.post('https://wigle.net/gps/gps/main/confirmquery/',cookies=cookie,data=payload)
	soup = BeautifulSoup(r.text)
	apdict={}
	count=1
	result_href=soup.findAll('a',href=re.compile('maplon'))
	for link in result_href:
		s=link.get('href')
		lat = float(re.search(r"maplat=([^&]*)",s).group(1))       #(-?\d{1,3}\.\d+)",s).group(1)
		lon = float(re.search(r"maplon=([^&]*)",s).group(1))       #(-?\d{1,3}\.\d+)",s).group(1)
		ssid_result = re.search(r"ssid=([^&]*)",s).group(1) #match any number of non-& characters
		bssid_result = re.search(r"netid=(\w\w:\w\w:\w\w:\w\w:\w\w:\w\w)",s).group(1)
		#print lon,lat,ssid_result,bssid_result
		if SSID and ssid_result==SSID: # exact case sensitive match
			id = '%s [%s] [%s]' % (SSID,bssid_result,count)
			apdict[id]=(lat,lon)
			count+=1
	return apdict


########NEW FILE########
__FILENAME__ = wloc
# -*- coding: utf-8 -*-
#!/usr/bin/python

# Mostly taken from paper by François-Xavier Aguessy and Côme Demoustier
# http://fxaguessy.fr/rapport-pfe-interception-ssl-analyse-donnees-localisation-smartphones/

import sys
import code
import requests
import BSSIDApple_pb2
import GSM_pb2
#import simplekml

def padBSSID(bssid):
	result = ''
	for e in bssid.split(':'):
		if len(e) == 1:
			e='0%s'%e
		result += e+':'
	return result.strip(':')

def ListWifiDepuisApple(wifi_list):
	apdict = {}
	#kml = simplekml.Kml()
	for wifi in wifi_list.wifi:
		#print "Wifi BSSID : ", wifi.bssid 
		if wifi.HasField('location'):
			lat=wifi.location.latitude*pow(10,-8)
			lon=wifi.location.longitude*pow(10,-8)
			#kml.newpoint(name=wifi.bssid, coords=[(lon,lat)])
			mac=padBSSID(wifi.bssid)
			apdict[mac] = (lat,lon)
		if wifi_list.HasField('valeur_inconnue1'):
			print 'Inconnu1 : ', '%X' % wifi_list.valeur_inconnue1
		if wifi_list.HasField('valeur_inconnue2'):
			print 'Inconnu2 : ', '%X' % wifi_list.valeur_inconnue1
		if wifi_list.HasField('APIName'):
			print 'APIName : ', wifi_list.APIName
	#kml.save("test.kml")
	return apdict

def ProcessMobileResponse(cell_list):
	operators = {1:'Telstra',2:'Optus',3:'Vodafone',6:'Three'}
	celldict = {}
	celldesc = {}
	#kml = simplekml.Kml()
	for cell in cell_list.cell:
		if cell.HasField('location') and cell.CID != -1: # exclude "LAC" type results (usually 20 in each response)
			lat=cell.location.latitude*pow(10,-8)
			lon=cell.location.longitude*pow(10,-8)
			cellid = '%s:%s:%s:%s' % (cell.MCC,cell.MNC,cell.LAC,cell.CID)
			#kml.newpoint(name=cellid, coords=[(lon,lat)])
			try:
#				cellname = '%s LAC:%s CID:%s [%s %s %s] [%s %s]' % (operators[cell.MNC],cell.LAC,cell.CID,\
#					cell.location.data3,cell.location.data4,cell.location.data12,\
#					cell.data6,cell.data7)
				cellname = '%s LAC:%s CID:%s' % (operators[cell.MNC],cell.LAC,cell.CID)
			except:
				cellname = 'MNC:%s LAC:%s CID:%s' % (cell.MNC,cell.LAC,cell.CID)
			try:
				if cell.HasField('channel'):
					cellname += ' Channel:%s' % cell.channel
			except ValueError:
				pass
			celldict[cellid] = (lat,lon)
			celldesc[cellid] = cellname
		else:
			pass
			#print 'Weird cell: %s' % cell
	#kml.save("test.kml")
	f=file('result.txt','w')
	for (cid,desc) in celldesc.items():
		#print cid, desc
		f.write('%s %s\n'%(cid,desc))
	f.close()
	print 'Wrote result.txt'
	return (celldict,celldesc)

def QueryBSSID(bssid):
	liste_wifi = BSSIDApple_pb2.BlockBSSIDApple()
	wifi = liste_wifi.wifi.add()
	wifi.bssid = bssid
	liste_wifi.valeur_inconnue1 = 0
	liste_wifi.valeur_inconnue2 = 0
	liste_wifi.APIName= "com.apple.Maps"
	chaine_liste_wifi = liste_wifi.SerializeToString()
	longueur_chaine_liste_wifi = len(chaine_liste_wifi)
	headers = { 	'Content-Type':'application/x-www-form-urlencoded', 'Accept':'*/*', "Accept-Charset": "utf-8","Accept-Encoding": "gzip, deflate",\
			"Accept-Language":"en-us", 'User-Agent':'locationd (unknown version) CFNetwork/548.1.4 Darwin/11.0.0'}
	data = "\x00\x01\x00\x05"+"en_US"+"\x00\x00\x00\x09"+"5.1.9B176"+"\x00\x00\x00\x01\x00\x00\x00" + chr(longueur_chaine_liste_wifi) + chaine_liste_wifi;
	r = requests.post('https://gs-loc.apple.com/clls/wloc',headers=headers,data=data,verify=False) #the remote SSL cert CN on this server doesn't match hostname anymore
	liste_wifi = BSSIDApple_pb2.BlockBSSIDApple() 
	liste_wifi.ParseFromString(r.content[10:])
	return ListWifiDepuisApple(liste_wifi)

def QueryMobile(cellid,LTE=False):
	(MCC,MNC,LAC,CID) = map(int,cellid.split(':'))
	if LTE:
		req = GSM_pb2.CellReqToApple25() # Request type 25 -> Response type 22 (LTE?)
		req.cell.MCC = MCC
		req.cell.MNC = MNC
		req.cell.LAC = LAC
		req.cell.CID = CID
	else:
		req = GSM_pb2.CellReqToApple1() # Request 1 -> Response type 1 (GSM/3G?)
		cell = req.cell.add()
		cell.MCC = MCC
		cell.MNC = MNC
		cell.LAC = LAC
		cell.CID = CID
		#cell2 = req.cell.add() #505:2:33300:151564484
		#cell2.MCC = 505
		#cell2.MNC = 3
		#cell2.LAC = 334
		#cell2.CID = 87401254
		req.param3 = 0 # this affects whether you get cells or LAC areas
		req.param4 = 1 # 
		req.ua = 'com.apple.Maps'

	req_string = req.SerializeToString()
	headers = { 	'Content-Type':'application/x-www-form-urlencoded', 'Accept':'*/*', 'User-Agent':'locationd/1613.5.1 CFNetwork/672.0.8 Darwin/14.0.0',\
			"Accept-Language":"en-us",'Accept-Encoding:':' gzip, deflate'}
	data = "\x00\x01\x00\x05"+"en_US"+"\x00\x13"+"com.apple.locationd"+"\x00\x0c"+"7.0.3.11B511"+"\x00\x00\x00\x01\x00\x00\x00"+chr(len(req_string)) + req_string;
	#data = "\x00\x01\x00\x05"+"en_US"+"\x00\x13"+"com.apple.locationd"+"\x00\x0c"+"6.1.1.10B145"+"\x00\x00\x00\x01\x00\x00\x00"+chr(len(req_string)) + req_string;
	f=file('request.bin','wb')
	f.write(req_string)
	print('Wrote request.bin')
	f.close()
	cellid = '%s:%s:%s:%s' % (MCC,MNC,LAC,CID)
	print 'Querying %s' % cellid
	r = requests.post('https://gs-loc.apple.com/clls/wloc',headers=headers,data=data,verify=False) #the remote SSL cert CN on this server doesn't match hostname anymore
	if LTE:
		response = GSM_pb2.CellInfoFromApple22()
	else:
		response = GSM_pb2.CellInfoFromApple1()
	response.ParseFromString(r.content[1:])
	f=file(cellid+'.bin','wb')
	f.write(r.content[1:])
	f.close()
	print 'Wrote %s' % (cellid+'.bin')

	return ProcessMobileResponse(response)


########NEW FILE########
__FILENAME__ = wsgi
"""
WSGI config for iSniff_GPS project.

This module contains the WSGI application used by Django's development server
and any production WSGI deployments. It should expose a module-level variable
named ``application``. Django's ``runserver`` and ``runfcgi`` commands discover
this application via the ``WSGI_APPLICATION`` setting.

Usually you will have the standard Django WSGI application here, but it also
might make sense to replace the whole Django WSGI application with a custom one
that later delegates to the Django one. For example, you could introduce WSGI
middleware here, or combine a Django application with an application of another
framework.

"""
import os

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "iSniff_GPS.settings")

# This application object is used by any WSGI server configured to use this
# file. This includes Django's development server, if the WSGI_APPLICATION
# setting points here.
from django.core.wsgi import get_wsgi_application
application = get_wsgi_application()

# Apply WSGI middleware here.
# from helloworld.wsgi import HelloWorldApplication
# application = HelloWorldApplication(application)

########NEW FILE########
__FILENAME__ = iSniff_import
#!/usr/bin/python

from color import *
from netaddr import EUI
from scapy.all import *
from dnslib import DNSRecord # for mdns/bonjour name parsing
from django.utils import timezone
from django.core.exceptions import *
from datetime import datetime #for utcfromtimestamp
from iSniff_GPS.models import Client, AP, Location
from collections import defaultdict

import code
import binascii
import argparse
import json
import sys
import re

parser = argparse.ArgumentParser(description='iSniff GPS Server')
parser.add_argument('-r', dest='pcap', action='store', help='pcap file to read')
parser.add_argument('-i', dest='interface', action='store', default='mon0', help='interface to sniff (default mon0)')
args = parser.parse_args()

count = 0 #count of scapy packets processed
client = defaultdict(list)
interface = "mon0"

def ascii_printable(s):
	return ''.join(i for i in s if ord(i)>31 and ord(i)<128)

def get_manuf(m):
	try:
		mac = EUI(m)
		manuf = mac.oui.records[0]['org'].split(' ')[0].replace(',','')
		#.replace(', Inc','').replace(' Inc.','')
	except:
		manuf='unknown'
	return ascii_printable(manuf)

def CreateOrUpdateClient(mac,utc,name=None):
	try:
		c = Client.objects.get(mac=mac)
		if c.lastseen_date < utc:
			c.lastseen_date = utc
		#print 'Updated time on object %s' % mac
	except ObjectDoesNotExist:
		c = Client(mac=mac, lastseen_date=utc, manufacturer=get_manuf(mac))
		#print 'Created new object %s' % mac
	if name:
		c.name = name
		print 'Updated name of %s to %s' % (c,c.name)
	c.save()
	return c

def UpdateDB(clientmac=None,time=None,SSID='',BSSID=''):
	utc = datetime.utcfromtimestamp(time)
	if SSID:
		try:
			a = AP.objects.get(SSID=SSID)
		except ObjectDoesNotExist:
			a = AP(SSID=SSID, lastprobed_date=utc, manufacturer='Unknown')
	elif BSSID:
		try:
			a = AP.objects.get(BSSID=BSSID)
		except ObjectDoesNotExist:
			a = AP(BSSID=BSSID, lastprobed_date=utc, manufacturer=get_manuf(BSSID))
	if a.lastprobed_date and a.lastprobed_date < utc:
		a.lastprobed_date = utc
	a.save() #avoid ValueError: 'AP' instance needs to have a primary key value before a many-to-many relationship can be used.
	a.client.add(CreateOrUpdateClient(clientmac,utc))
	a.save()

def process(p):
	global count 
	count += 1
	if count % 10000 == 0:
		print count

	if p.haslayer(ARP):
		arp = p.getlayer(ARP)
		dot11 = p.getlayer(Dot11)
		mode = ''
		try:
			target_bssid = dot11.addr1 # on wifi, BSSID (mac) of AP currently connected to
			source_mac = dot11.addr2 # wifi client mac
			target_mac = dot11.addr3 # if we're sniffing wifi (mon0) the other-AP bssid disclosure will be here in 802.11 dest
			if dot11.FCfield == 1 and target_bssid != 'ff:ff:ff:ff:ff:ff' and arp.op == 1 and target_mac != 'ff:ff:ff:ff:ff:ff' and source_mac != target_mac:
				print ('%s [%s] '+great_success('ARP')+' who has %s? tell %s -> %s [%s] on BSSID %s') % \
				(get_manuf(source_mac),source_mac,arp.pdst,arp.psrc,get_manuf(target_mac),target_mac,target_bssid)
				UpdateDB(clientmac=source_mac, time=p.time, BSSID=target_mac)
				#code.interact(local=locals())

		except:
			try:
				if p.haslayer(Ether):
					source_mac = p.getlayer(Ether).src # wifi client mac when sniffing a tap interface (e.g. at0 provided by airbase-ng)
					target_mac = p.getlayer(Ether).dst # we won't get any 802.11/SSID probes but the bssid disclosure will be in the ethernet dest
					if target_mac != 'ff:ff:ff:ff:ff:ff' and arp.op == 1:
						print ('%s [%s] '+great_success('ARP')+' who has %s? tell %s -> %s [%s] (Ether)') % \
						(get_manuf(source_mac),source_mac,arp.pdst,arp.psrc,get_manuf(target_mac),target_mac)
						UpdateDB(clientmac=source_mac, time=p.time, BSSID=target_mac)
			except IndexError:
				pass

	elif p.haslayer(Dot11ProbeReq):
		mac = p.getlayer(Dot11).addr2
		for p in p:
			if p.haslayer(Dot11Elt) and p.info:
				try:
					probed_ssid = p.info.decode('utf8')
				except UnicodeDecodeError:
					probed_ssid = 'HEX:%s' % binascii.hexlify(p.info)
					print '%s [%s] probed for non-UTF8 SSID (%s bytes, converted to "%s")' % (get_manuf(mac),mac,len(p.info),probed_ssid)
				if len(probed_ssid) > 0 and probed_ssid not in client[mac]:
					client[mac].append(probed_ssid)
					UpdateDB(clientmac=mac, time=p.time, SSID=probed_ssid) #unicode goes in DB for browser display
					return "%s [%s] probe for %s" % (get_manuf(mac),mac,ascii_printable(probed_ssid)) #ascii only for console print

	elif p.haslayer(Dot11AssoReq) or p.haslayer(Dot11AssoResp) or p.haslayer(Dot11ReassoReq) or p.haslayer(Dot11ReassoResp):
		pass
		#print p.summary()
		#print p.fields
		
	if p.haslayer(Dot11) and p.haslayer(UDP) and p.dst == '224.0.0.251':
		for p in p: #only parse MDNS names for 802.11 layer sniffing for now, easy to see what's a request from a client
			if p.dport == 5353:
				try:
					d=DNSRecord.parse(p['Raw.load'])
					for q in d.questions:
						if q.qtype == 255 and '_tcp.local' not in str(q.qname):
							try:
								src=p.getlayer('Dot11').addr3
								name=str(q.qname).strip('.local')
								print great_success('%s is %s') % (src, name)
								#code.interact(local=locals())
								if src != '01:00:5e:00:00:fb':
									CreateOrUpdateClient(src,datetime.utcfromtimestamp(p.time),name)
							except AttributeError:
								print warning('Error parsing MDNS')
				except IndexError:
					pass

if args.pcap:
	print 'Reading %s...' % args.pcap
	sniff(offline=args.pcap, prn=lambda x:process(x), store=0)
else:
	print 'Sniffing %s...' % args.interface
	sniff(iface=args.interface, prn=lambda x:process(x), store=0)

print
print 'Summary'
print '-------'
print

for mac in client:
	print '%s [%s] probed for %s' % (get_manuf(mac),mac,', '.join(map(ascii_printable,client[mac])))

#print json.dumps(client)

########NEW FILE########
__FILENAME__ = manage
#!/usr/bin/env python
import os
import sys

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "iSniff_GPS.settings")

    from django.core.management import execute_from_command_line

    execute_from_command_line(sys.argv)

########NEW FILE########
