__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# django-staticbuilder documentation build configuration file, created by
# sphinx-quickstart on Wed Jan 30 22:32:51 2013.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import re, sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinx.ext.todo']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'django-staticbuilder'
copyright = u'2013, Matthew Tretter'

pkgmeta = {}
execfile(os.path.join(os.path.dirname(__file__), '..', '..', 'staticbuilder',
                      'pkgmeta.py'), pkgmeta)

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = re.match('\d+\.\d+', pkgmeta['__version__']).group()
# The full version, including alpha/beta/rc tags.
release = pkgmeta['__version__']

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = []

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'django-staticbuilderdoc'


# -- Options for LaTeX output --------------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'django-staticbuilder.tex', u'django-staticbuilder Documentation',
   u'Matthew Tretter', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'django-staticbuilder', u'django-staticbuilder Documentation',
     [u'Matthew Tretter'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output ------------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'django-staticbuilder', u'django-staticbuilder Documentation',
   u'Matthew Tretter', 'django-staticbuilder', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

########NEW FILE########
__FILENAME__ = conf
from appconf import AppConf
from django.conf import settings


class StaticBuilderConf(AppConf):
    BUILDONREQUEST_MIDDLEWARE_ENABLED = None
    BUILD_COMMANDS = []
    COLLECT_BUILT = True
    INCLUDE_FILES = ['*']
    EXCLUDE_FILES = ['CVS', '.*', '*~']

    def configure_buildonrequest_middleware_enabled(self, value):
        return settings.DEBUG if value is None else value

    class Meta:
        required = [
            'BUILD_ROOT',
        ]

########NEW FILE########
__FILENAME__ = finders
from django.conf import settings
from django.contrib.staticfiles import utils
from django.contrib.staticfiles.finders import BaseStorageFinder
from .storage import BuiltFileStorage


class BuiltFileFinder(BaseStorageFinder):
    storage = BuiltFileStorage


class BuildableFileFinder(object):
    """
    Wraps a finder class in order to exclude files.

    """
    def __init__(self, finder, include_patterns=None):
        self.wrapped = finder
        self.include_patterns = include_patterns or settings.STATICBUILDER_INCLUDE_FILES

    def list(self, ignore_patterns):
        """
        Delegate the work of this method to the wrapped finder, but filter its
        results.

        """
        for path, storage in self.wrapped.list(ignore_patterns):
            if utils.matches_patterns(path, self.include_patterns):
                yield path, storage

    def __getattr__(self, name):
        """
        Proxy to the wrapped object.

        """
        return getattr(self.wrapped, name)

########NEW FILE########
__FILENAME__ = buildstatic
from blessings import Terminal
from django.conf import settings
from django.core.exceptions import ImproperlyConfigured
from django.core.management.base import BaseCommand
from django.core.management import call_command
from django.utils.encoding import smart_str
from optparse import make_option
import os
from pipes import quote
import subprocess


t = Terminal()


class Command(BaseCommand):
    """
    Executes the shell commands in ``STATICBUILDER_BUILD_COMMANDS``
    on all static files in ``STATICBUILDER_BUILD_ROOT``.

    By default, collects all static files into ``STATICBUILDER_BUILD_ROOT``,
    before executing the shell commands. Collecting can be disabled with the
    ``--nocollect`` flag.

    """

    help = 'Build optimized versions of your static assets.'
    requires_model_validation = False
    option_list = BaseCommand.option_list + (
        make_option('--nocollect',
            action='store_false',
            dest='collect',
            default=True,
            help='Skip collecting static files for build'),
    )

    def handle(self, *args, **options):

        self.verbosity = int(options.get('verbosity', '1'))

        build_dir = settings.STATICBUILDER_BUILD_ROOT
        if not build_dir:
            raise ImproperlyConfigured('STATICBUILDER_BUILD_ROOT must be set.')

        # Optionally run collectforbuild first (runs by default).
        if options['collect']:
            call_command('collectforbuild',
                         clean=True,
                         verbosity=self.verbosity,
                         interactive=False)

        # Run the build commands.
        build_commands = getattr(settings, 'STATICBUILDER_BUILD_COMMANDS', None) or []
        for command in build_commands:
            cmd = command.format(build_dir=quote(build_dir))
            self.shell(cmd)

        # Touch the build root to indicate when it was built last.
        os.utime(build_dir, None)

    def shell(self, cmd):
        self.log(t.bold('Running command: ') + cmd)

        return_code = subprocess.call(cmd, shell=True)
        if return_code:
            raise Exception('Failed with error code %s' % return_code)

    def log(self, msg, level=1):
        """
        Log helper; from Django's collectstatic command.
        """
        msg = smart_str(msg)
        if not msg.endswith("\n"):
            msg += "\n"
        if level > 1:
            msg = t.bright_black(msg)
        if self.verbosity >= level:
            self.stdout.write(msg)

########NEW FILE########
__FILENAME__ = collectforbuild
from blessings import Terminal
from django.conf import settings
from django.contrib.staticfiles import finders, storage as djstorage
from django.core.exceptions import ImproperlyConfigured
from django.core.management.base import BaseCommand
from django.core.management import call_command
from django.utils.encoding import smart_str, smart_unicode
from optparse import make_option
import os
from ...storage import BuiltFileStorage
from ...utils import patched_settings, patched_finders


t = Terminal()


class Command(BaseCommand):
    """
    Collects all static files into ``STATICBUILDER_BUILD_ROOT``.

    """

    help = 'Collect your static assets for building.'
    requires_model_validation = False
    option_list = BaseCommand.option_list + (
        make_option('-c', '--clean',
                    action='store_true',
                    dest='clean',
                    default=False,
                    help='Remove artifacts from previous builds'),
    )

    def handle(self, *args, **options):
        self.clean = options['clean']
        self.verbosity = int(options.get('verbosity', '1'))

        build_dir = settings.STATICBUILDER_BUILD_ROOT
        if not build_dir:
            raise ImproperlyConfigured('STATICBUILDER_BUILD_ROOT must be set.')

        # Copy the static assets to a the build directory.
        self.log(t.bold('Collecting static assets for building...'))
        self.call_command_func(self.collect_for_build, build_dir)

    def call_command_func(self, func, *args, **kwargs):
        print(t.bright_black)
        try:
            result = func(*args, **kwargs)
        finally:
            print(t.normal)
        return result

    def collect_for_build(self, build_dir):
        with patched_finders():
            with patched_settings(STATICBUILDER_COLLECT_BUILT=False):
                # Patch the static files storage used by collectstatic
                storage = BuiltFileStorage()
                old_storage = djstorage.staticfiles_storage
                djstorage.staticfiles_storage = storage

                try:
                    call_command('collectstatic',
                                 verbosity=self.verbosity - 1,
                                 interactive=False,
                                 ignore_patterns=settings.STATICBUILDER_EXCLUDE_FILES)
                finally:
                    djstorage.staticfiles_storage = old_storage

                # Delete the files that have been removed.
                if self.clean:
                    self.clean_built(storage)

    def find_all(self, storage, dir=''):
        """
        Find all files in the specified directory, recursively.

        """
        all_dirs = set()
        all_files = set()
        with patched_settings(STATICBUILDER_COLLECT_BUILT=True):
            dirs, files = storage.listdir(dir)
            all_dirs.update(os.path.join(dir, d) for d in dirs)
            all_files.update(os.path.join(dir, f) for f in files)
            for d in dirs:
                nested_dirs, nested_files = self.find_all(storage, os.path.join(dir, d))
                all_dirs.update(nested_dirs)
                all_files.update(nested_files)
        return (all_dirs, all_files)

    def clean_built(self, storage):
        """
        Clear any static files that aren't from the apps.

        """
        build_dirs, built_files = self.find_all(storage)

        found_files = set()
        for finder in finders.get_finders():
            for path, s in finder.list([]):
                # Prefix the relative path if the source storage contains it
                if getattr(s, 'prefix', None):
                    prefixed_path = os.path.join(s.prefix, path)
                else:
                    prefixed_path = path

                found_files.add(prefixed_path)

        stale_files = built_files - found_files

        for fpath in stale_files:
            self.log(u"Deleting '%s'" % smart_unicode(fpath), level=1)
            storage.delete(fpath)

        found_dirs = set()
        for f in found_files:
            path = f
            while True:
                path = os.path.dirname(path)
                found_dirs.add(path)
                if not path:
                    break

        stale_dirs = set(build_dirs) - found_dirs

        for fpath in stale_dirs:
            try:
                storage.delete(fpath)
            except OSError:
                self.log(u"Couldn't remove empty directory '%s'" % smart_unicode(fpath), level=1)
            else:
                self.log(u"Deleted empty directory '%s'" % smart_unicode(fpath), level=1)

    def log(self, msg, level=1):
        """
        Log helper; from Django's collectstatic command.
        """
        msg = smart_str(msg)
        if not msg.endswith("\n"):
            msg += "\n"
        if level > 1:
            msg = t.bright_black(msg)
        if self.verbosity >= level:
            self.stdout.write(msg)

########NEW FILE########
__FILENAME__ = middleware
from django.conf import settings
from django.core.management import call_command
import os
import time
from .utils import get_buildable_file_finders


class BuildOnRequest(object):
    """
    Middleware for automatically building your static files as part of the
    request-response cycle. The build step will only be run if the request
    returns an HTML response and a static file is found that has been modified
    more recently than your build directory.

    This middleware is meant to ease development (so you never see a page with
    old static files, or missing them entirely). It shouldn't be used in
    production, and is automatically disabled when your ``DEBUG`` setting is
    ``False``.

    """

    def process_response(self, request, response):
        if (
                settings.STATICBUILDER_BUILDONREQUEST_MIDDLEWARE_ENABLED and
                response.status_code == 200 and
                response['content-type'].startswith('text/html')):

            if not os.path.exists(settings.STATICBUILDER_BUILD_ROOT):
                call_command('buildstatic')
                return response

            last_built_at = os.path.getmtime(settings.STATICBUILDER_BUILD_ROOT)

            # Check to see if any static files have been updated.
            for finder in get_buildable_file_finders():
                for path, storage in finder.list([]):
                    mtime = time.mktime(storage.modified_time(path).timetuple())
                    if mtime > last_built_at:
                        # If a file has been updated, short circuit and rebuild.
                        call_command('buildstatic')
                        return response

        return response

########NEW FILE########
__FILENAME__ = models
from django.db import models

# Create your models here.

########NEW FILE########
__FILENAME__ = pkgmeta
__title__ = 'django-staticbuilder'
__author__ = 'Matthew Tretter'
__version__ = '0.6.1'
__all__ = ['__title__', '__author__', '__version__']

########NEW FILE########
__FILENAME__ = storage
from django.core.exceptions import ImproperlyConfigured
from django.core.files.storage import FileSystemStorage
from django.conf import settings
import os


class BuiltFileStorage(FileSystemStorage):
    _wrapped = None

    def __init__(self, location=None, base_url=None, *args, **kwargs):
        if location is None:
            location = settings.STATICBUILDER_BUILD_ROOT
            if not location:
                raise ImproperlyConfigured('STATICBUILDER_BUILD_ROOT must be set.')
        if base_url is None:
            base_url = settings.STATIC_URL
        super(BuiltFileStorage, self).__init__(location, base_url,
                                               *args, **kwargs)

    def find(self, path, all=False):
        if settings.STATICBUILDER_COLLECT_BUILT:
            return super(BuiltFileStorage, self).find(path, all)
        else:
            return []

    def listdir(self, path):
        if settings.STATICBUILDER_COLLECT_BUILT:
            return super(BuiltFileStorage, self).listdir(path)
        else:
            return [], []

    def delete(self, name):
        try:
            super(BuiltFileStorage, self).delete(name)
        except OSError:
            name = self.path(name)
            if os.path.isdir(name):
                os.rmdir(name)
            else:
                raise

########NEW FILE########
__FILENAME__ = utils
from contextlib import contextmanager
from django.conf import settings
from django.contrib.staticfiles import finders
from .finders import BuildableFileFinder


def get_buildable_file_finders():
    with patched_settings(STATICBUILDER_COLLECT_BUILT=False):
        for f in finders.get_finders():
            yield BuildableFileFinder(f)


@contextmanager
def patched_finders():
    old_get_finders = finders.get_finders

    def new_get_finders():
        for f in old_get_finders():
            yield BuildableFileFinder(f)

    finders.get_finders = new_get_finders
    yield
    finders.get_finders = old_get_finders


@contextmanager
def patched_settings(**kwargs):
    old = {}
    for k, v in kwargs.items():
        try:
            old[k] = getattr(settings, k)
        except AttributeError:
            pass
        setattr(settings, k, v)
    yield
    for k, v in old.items():
        setattr(settings, k, v)

########NEW FILE########
__FILENAME__ = views
# Create your views here.

########NEW FILE########
__FILENAME__ = settings
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'testdb'
    }
}

########NEW FILE########
