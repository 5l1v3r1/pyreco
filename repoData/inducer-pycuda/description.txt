PyCUDA lets you access `Nvidia <http://nvidia.com>`_'s `CUDA
<http://nvidia.com/cuda/>`_ parallel computation API from Python.
Several wrappers of the CUDA API already exist-so what's so special
about PyCUDA?

.. image:: https://badge.fury.io/py/pycuda.png
    :target: http://pypi.python.org/pypi/pycuda

* Object cleanup tied to lifetime of objects. This idiom, often
  called
  `RAII <http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization>`_
  in C++, makes it much easier to write correct, leak- and
  crash-free code. PyCUDA knows about dependencies, too, so (for
  example) it won't detach from a context before all memory
  allocated in it is also freed.

* Convenience. Abstractions like pycuda.driver.SourceModule and
  pycuda.gpuarray.GPUArray make CUDA programming even more
  convenient than with Nvidia's C-based runtime.

* Completeness. PyCUDA puts the full power of CUDA's driver API at
  your disposal, if you wish. It also includes code for
  interoperability with OpenGL.

* Automatic Error Checking. All CUDA errors are automatically
  translated into Python exceptions.

* Speed. PyCUDA's base layer is written in C++, so all the niceties
  above are virtually free.

* Helpful `Documentation <http://documen.tician.de/pycuda>`_ and a
  `Wiki <http://wiki.tiker.net/PyCuda>`_.

Relatedly, like-minded computing goodness for `OpenCL <http://khronos.org>`_
is provided by PyCUDA's sister project `PyOpenCL <http://pypi.python.org/pypi/pyopencl>`_.

Hi, welcome.

This Python package uses aksetup for installation, which means that
installation should be easy and quick.

If you don't want to continue reading, just try the regular

  ./configure.py --help
  ./configure.py --some-options
  make
  sudo make install

That should do the trick. (By the way: If a config option says "several ok",
then you may specify several values, separated by commas.)

aksetup also supports regular distutils installation, without using 
configure:

  python setup.py build
  sudo python setup.py install

In this case, configuration is obtained from files in this order:

/etc/aksetup-defaults.py
$HOME/.aksetup-defaults.py
$PACKAGEDIR/siteconf.py

Once you've run configure, you can copy options from your siteconf.py file to
one of these files, and you won't ever have to configure them again manually.
In fact, you may pass the options "--update-user" and "--update-global" to
configure, and it will automatically update these files for you.

This is particularly handy if you want to perform an unattended or automatic
installation via easy_install.

