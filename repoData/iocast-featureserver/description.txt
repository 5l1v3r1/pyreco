====================================
 Getting Started With FeatureServer 
====================================

---------------------------------------
Simple Python geographic feature server
---------------------------------------

:Date:   2008-05-06
:Copyright: 2006-2008 MetaCarta, Inc. 
:Version: 1.12 
:Manual group: GIS Utilities

DESCRIPTION
===========
FeatureServer is a simple Python-based geographic feature server. It allows 
you to store geographic vector features in a number of different backends,
and interact with them -- creating, updating, and deleting -- via a 
REST-based API.

FeatureServer will run under Python CGI, mod_python, or as a standalone server. 

FeatureServer was designed as a companion to OpenLayers, the BSD licensed web
mapping interface. For help with setting up FeatureServer for use with 
OpenLayers, please feel free to stop by #featureserver, on irc.freenode.net, or 
to send email to featureserver@featureserver.org.

FeatureServer is released under a copyright only open source license similar
to the BSD license.

RUNNING UNDER CGI
=================

* Extract the code to some web directory (e.g. in /var/www).
* Edit featureserver.cfg to point the 'file' attribute of the 'scribble'
  datasource to the location you wish to save your database.
* Permit CGI execution in the FeatureServer directory.
  For example, if FeatureServer is to be run with Apache, the
  following must be added in your Apache configuration,   
  where /var/www/featureserver is the directory resulting from
  the code extraction. 
  
  ::

    <Directory /var/www/featureserver>
         AddHandler cgi-script .cgi
         Options +ExecCGI
    </Directory>

* Visit:
  
  http://example.com/yourdir/featureserver.cgi/scribble/all.atom
  
* If you see an empty GeoRSS feed, you have set up your configuration 
  correctly. Congrats!

Python Prerequisites
--------------------
In order to use the default demo included with FeatureServer, you must have
the simplejson module installed. If you do not, you can add it by doing the
following:

  $ wget http://cheeseshop.python.org/packages/source/s/simplejson/simplejson-1.7.1.tar.gz
  $ tar -zvxf simplejson-1.7.1.tar.gz
  $ cp -r simplejson-1.7.1/simplejson /var/www/featureserver

Note that these instructions are for Linux systems: the end goal is to extract
the simplejson directory from the distribution and put it in the root of your
FeatureServer install.

Other dependencies for DataSources and Services are outlined in their 
respective documentation files. 

Non-standard Python Location
----------------------------
If your Python is not at /usr/bin/python on your system, you will need to
change the first line of featureserver.cgi to reference the location of your 
Python binary. A common example is:

  ::

     #!/usr/local/bin/python

Under Apache, you might see an error message like:

  ::

    [Wed Mar 14 19:55:30 2007] [error] [client 127.0.0.1] (2)No such file or 
      directory: exec of '/www/featureserver.cgi' failed

to indicate this problem.

You can typically locate where Python is installed on your system via the
command 'which python'.

Windows users: If you are using Windows, you should change the first line 
of featureserver.cgi to read:

  ::

    #!C:/Python/python.exe -u

C:/Python should match the location Python is installed under on your 
system. In Python 2.5, this location is C:/Python25 by default.  

RUNNING UNDER MOD_PYTHON
========================

* Extract the code to some web directory (e.g. /var/www).
* Edit featureserver.cfg to point the 'file' attribute of the 'scribble'
  datasource to the location you wish to save your database.
* Add the following to your Apache configuration, under a <Directory> heading:
  
  ::
  
      AddHandler python-program .py
      PythonPath sys.path+['/path/to/featureserver/FeatureServer', '/path/to/featureserver']
      PythonHandler FeatureServer.Server
      PythonOption FeatureServerConfig /path/to/featureserver.cfg
  
* An example might look like:

  ::
  
    <Directory /var/www/featureserver/>
        AddHandler python-program .py
        PythonPath sys.path+['/var/www/featureserver/FeatureServer', '/var/www/featureserver']
        PythonHandler FeatureServer.Server 
        PythonOption FeatureServerConfig /var/www/featureserver/featureserver.cfg
    </Directory>
  
* In this example, /var/www/featureserver is the directory resulting from
  the code extraction. 
* Visit the URL described above, replacing featureserver.cgi with 
  featureserver.py
* If you see an empty GeoRSS file you have set up your configuration correctly.
  Congrats!
* Note that mod_python has not yet been well tested, and may not work well
  for all data sources.

 
RUNNING STANDALONE (UNDER WSGI)
===============================

FeatureServer comes with a standalone HTTP server which uses the WSGI handler. 
This implementation depends on *Python Paste*, which can be downloaded from:
  
  http://cheeseshop.python.org/pypi/Paste

For versions of Python earlier than 2.5, you will also need to install 
wsgiref:

  http://cheeseshop.python.org/pypi/wsgiref

Once you have all the prerequisites installed, simply run:

  ::
  
    python featureserver_http_server.py

This will start a webserver listening on port 8080, after which you should
be able to open:

  ::
  
    http://hostname:8080/scribble/all.atom

to see your first file.

RUNNING UNDER FASTCGI
=====================

FeatureServer comes with a fastcgi implementation. In order to use this 
implementation, you will need to install flup, available from:
  
  http://trac.saddi.com/flup

This implementation also depends on Python Paste, which can be downloaded 
from:
  
  http://cheeseshop.python.org/pypi/Paste

Once you have done this, you can configure your fastcgi server to use
featureserver.fcgi.

Configuring FastCGI is beyond the scope of this documentation.

CONFIGURATION
=============
FeatureServer is configured by a config file, defaulting to featureserver.cfg.
FeatureServer data source documentation is available in doc/DataSources.

USING FEATURESERVER WITH OPENLAYERS
===================================

To run OpenLayers with FeatureServer, the URL passed to the 
OpenLayers.Layer.WFS constructor must point to the FeatureServer script, 
i.e. featureserver.cgi or featureserver.py. As an example see the 
index.html file included in the FeatureServer distribution.

Note: index.html assumes FeatureServer is set up under CGI (see above). 
If you set up FeatureServer under mod_python you'd need to slighly 
modify index.html: the URL passed to the OpenLayers.Layer.WFS constructor 
must point to the mod_python script as opposed to the CGI script, so replace 
featureserver.cgi with featureserver.py. Similarly, you would need to edit 
this URL if you were to use FeatureServer with the standalone HTTP Server 
or FastCGI.

SEE ALSO
========

http://featureserver.org/

http://openlayers.org/

This directory is for the packaging materials for the 'full' build that is created 
for those who don't use cheeseshop and want something that works 'out of the box'. 

<pre style="border: 0px; padding: 0px;">
 ___         _                ___                      
| __|__ __ _| |_ _  _ _ _ ___/ __| ___ _ ___ _____ _ _ 
| _/ -_) _` |  _| || | '_/ -_)__ \/ -_) '_\ V / -_) '_|
|_|\___\__,_|\__|\_,_|_| \___|___/\___|_|  \_/\___|_|  
</pre>
<a href="http://featureserver.org" target="_new">FeatureServer</a> is an implementation of a RESTful Geographic Feature Service. Using standard HTTP methods, you can fetch a representation of a feature or a collection of features, add new data to the service, or delete data from the service. Use it as an aggregator -- post your GeoRSS feeds to it, and then browse them using WFS. Use it as a translator: use the OGR DataSource to load a shapefile and open it in Google Earth.

DataSource (Storage)
--------------------
<table>
    <thead>
        <tr>
            <th>Datasource</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>DBM</td>
            <td>The DBM datasource uses anydbm combined with pickle to store features in a file on disk. This works on any platform, and works right out of the box.<br/>The BerkleyDB datasource is a subclass of the DBM datasource. It uses a BerkleyDB module for storage.</td>
        </tr>
        <tr>
            <td>Flickr</td>
            <td>Load images from flickr.</td>
        </tr>
        <tr>
            <td>GeoAlchemy</td>
            <td>GeoAlchemy is an extension of SQLAlchemy, the python database toolkit, for spatial databases. GeoAlchemy datasource for FeatureServer allows you to access features stored in one of the supported spatial databases. As the moment GeoAlchemy supports PostGIS, MySQL and Spatialite.</td>
        </tr>
        <tr>
            <td>OGR</td>
            <td>The OGR datasource allows you to take any OGR datasource -- such as a shapefile, PostGIS database, GML file, or other formats supported by OGR -- and use it as a backend for a FeatureServer layer.</td>
        </tr>
        <tr>
            <td>OSM</td>
            <td>Load streets from OpenStreetMap by area, id, or key/value pair.</td>
        </tr>
        <tr>
            <td>PostGIS</td>
            <td>The PostGIS datasource implements a direct connection to PostGIS, allowing for full featured editing/updating.</td>
        </tr>
        <tr>
            <td>SpatialLite</td>
            <td>SpatiaLite is an open source library intended to extend the SQLite core to support fully fledged Spatial SQL capabilities.</td>
        </tr>
        <tr>
            <td>SQLite</td>
            <td>A simple SQLite datasource that can be used on any website with Python support for SQLite. Creates 2 tables for each layer: one for the features, and one for any attributes/properties pertaining to those features.</td>
        </tr>
        <tr>
            <td>Twitter</td>
            <td>Powered by Twittervision, the twitter datasource lets you use twittervision's API to display the current location of a user.</td>
        </tr>
        <tr>
            <td>WFS</td>
            <td>The WFS datasource implements read-only access to WFS servers.</td>
        </tr>
    </tbody>
</table>

Service (Input/Output)
----------------------
<table>
    <thead>
        <tr>
            <th>Service</th><th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>CSV</td><td></td>
        </tr>
        <tr>
            <td>DXF (AutoCAD)</td><td>Compatible with release 11 and 12, points, polyline (linestring), polygon</td>
        </tr>
        <tr>
            <td>GeoJSON</td><td>input and output in the emerging GeoJSON specification. FeatureServer supports GeoJSON Points, Lines, and Polygons with Rings, as both input and output.</td>
        </tr>
        <tr>
            <td>GeoRSS Atom (Simple)</td><td>input and output of Points/Lines/Polygons (no rings/holes) in GeoRSS Simple (Atom). This allows one to take any GeoRSS Simple Atom feed and feed it to FeatureServer for storage.</td>
        </tr>
        <tr>
            <td>GML/WFS</td><td>Output-only support of WFS/GML.</td>
        </tr>
        <tr>
            <td>GPX</td><td>GPX (the GPS Exchange Format) is a light-weight XML data format for the interchange of GPS data (waypoints, routes, and tracks) between applications and Web services on the Internet. E.g. it can be used for Garmin devices.</td>
        </tr>
        <tr>
            <td>HTML</td><td>Output-only support of features as HTML files, powered by Cheetah templates.</td>
        </tr>
        <tr>
            <td>KML</td><td>Input and output of Points, Lines, and Polygons from KML.</td>
        </tr>
        <tr>
            <td>OSM</td><td>Output-only support of features as OpenStreetMap '.osm' files. (These files can be opened using JOSM and posted to the OSM server.)</td>
        </tr>
        <tr>
            <td>OV2</td><td>TomTom Points of Interest Database</td>
        </tr>
        <tr>
            <td>Shapefile</td><td>The Esri shapefile or simply a shapefile is a popular geospatial vector data format for geographic information systems software. It is developed and regulated by Esri as a (mostly) open specification for data interoperability among Esri and other software products.</td>
        </tr>
        <tr>
            <td>SQLite/SpatiaLite</td><td>SpatiaLite is an open source library intended to extend the SQLite core to support fully fledged Spatial SQL capabilities.</td>
        </tr>
    </tbody>
</table>

for more information visit <a href="http://featureserver.org" target="_new">featureserver.org</a>

