__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# Flask_Dashed documentation build configuration file, created by
# sphinx-quickstart on Sun Sep 18 03:32:57 2011.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../flask_dashed')))
sys.path.append(os.path.abspath('_themes'))
# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinx.ext.viewcode', 'sphinx.ext.autodoc']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Flask_Dashed'
copyright = u'2011, jean-philippe serafin'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '0.1b'
# The full version, including alpha/beta/rc tags.
release = '0.1b'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build', 'build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'flask_small'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
html_theme_path = ['_themes']

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
html_favicon = 'favicon.ico'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'Flask_Dasheddoc'


# -- Options for LaTeX output --------------------------------------------------

# The paper size ('letter' or 'a4').
#latex_paper_size = 'letter'

# The font size ('10pt', '11pt' or '12pt').
#latex_font_size = '10pt'

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'Flask_Dashed.tex', u'Flask\\_Dashed Documentation',
   u'jean-philippe serafin', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Additional stuff for the LaTeX preamble.
#latex_preamble = ''

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'flask_dashed', u'Flask_Dashed Documentation',
     [u'jean-philippe serafin'], 1)
]

html_theme_options = {'index_logo': False,
    'github_fork': 'jeanphix/Flask-Dashed'}

########NEW FILE########
__FILENAME__ = sqlalchemy_backend
# -*- coding: utf-8 -*-
import wtforms
from werkzeug import OrderedMultiDict

from flask import Flask, redirect

from flask_dashed.admin import Admin
from flask_dashed.ext.sqlalchemy import ModelAdminModule, model_form

from flaskext.sqlalchemy import SQLAlchemy

from sqlalchemy.orm import aliased, contains_eager


app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret'
app.debug = True

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'
app.jinja_env.trim_blocks = True


db = SQLAlchemy(app)
db_session = db.session


class Company(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255), unique=True, nullable=False)

    def __unicode__(self):
        return unicode(self.name)

    def __repr__(self):
        return '<Company %r>' % self.name


class Warehouse(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255), nullable=False)
    company_id = db.Column(db.Integer, db.ForeignKey(Company.id))

    company = db.relationship(Company, backref=db.backref("warehouses"))

    def __repr__(self):
        return '<Warehouse %r>' % self.name


class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(255), unique=True, nullable=False)
    password = db.Column(db.String(255))
    is_active = db.Column(db.Boolean())


class Profile(db.Model):
    id = db.Column(db.Integer, db.ForeignKey(User.id), primary_key=True)
    name = db.Column(db.String(255), nullable=False)
    location = db.Column(db.String(255))
    company_id = db.Column(db.Integer, db.ForeignKey(Company.id),
        nullable=True)

    user = db.relationship(User, backref=db.backref("profile",
        remote_side=id, uselist=False, cascade="all, delete-orphan"))

    company = db.relationship(Company, backref=db.backref("staff"))


user_group = db.Table(
    'user_group', db.Model.metadata,
    db.Column('user_id', db.Integer, db.ForeignKey('user.id')),
    db.Column('group_id', db.Integer, db.ForeignKey('group.id'))
)


class Group(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255), unique=True, nullable=False)

    users = db.relationship("User", secondary=user_group,
        backref=db.backref("groups", lazy='dynamic'))

    def __unicode__(self):
        return unicode(self.name)

    def __repr__(self):
        return '<Group %r>' % self.name


db.drop_all()
db.create_all()

group = Group(name="admin")
db_session.add(group)
company = Company(name="My company")
db_session.add(company)
db_session.commit()


UserForm = model_form(User, db_session, exclude=['password'])


class UserForm(UserForm):
    # Embeds OneToOne as FormField
    profile = wtforms.FormField(
        model_form(Profile, db_session, exclude=['user'],
        base_class=wtforms.Form))


class UserModule(ModelAdminModule):
    model = User
    db_session = db_session
    profile_alias = aliased(Profile)

    list_fields = OrderedMultiDict((
        ('id', {'label': 'id', 'column': User.id}),
        ('username', {'label': 'username', 'column': User.username}),
        ('profile.name', {'label': 'name', 'column': profile_alias.name}),
        ('profile.location', {'label': 'location',
            'column': profile_alias.location}),
    ))

    list_title = 'user list'

    searchable_fields = ['username', 'profile.name', 'profile.location']

    order_by = ('id', 'desc')

    list_query_factory = model.query\
           .outerjoin(profile_alias, 'profile')\
           .options(contains_eager('profile', alias=profile_alias))\

    form_class = UserForm

    def create_object(self):
        user = self.model()
        user.profile = Profile()
        return user


class GroupModule(ModelAdminModule):
    model = Group
    db_session = db_session
    form_class = model_form(Group, db_session, only=['name'])


class WarehouseModule(ModelAdminModule):
    model = Warehouse
    db_session = db_session


class CompanyModule(ModelAdminModule):
    model = Company
    db_session = db_session
    form_class = model_form(Company, db_session, only=['name'])


admin = Admin(app, title="my business administration")

security = admin.register_node('/security', 'security', 'security management')

user_module = admin.register_module(UserModule, '/users', 'users',
    'users', parent=security)

group_module = admin.register_module(GroupModule, '/groups', 'groups',
    'groups', parent=security)

company_module = admin.register_module(CompanyModule, '/companies',
    'companies', 'companies')

warehouse_module = admin.register_module(WarehouseModule, '/warehouses',
    'warehouses', 'warehouses', parent=company_module)


@app.route('/')
def redirect_to_admin():
    return redirect('/admin')

if __name__ == '__main__':
    app.run()

########NEW FILE########
__FILENAME__ = admin
# -*- coding: utf-8 -*-
from werkzeug import OrderedMultiDict

from flask import Blueprint, url_for, request, abort
from views import ObjectListView, ObjectFormView
from views import ObjectDeleteView, secure


def recursive_getattr(obj, attr):
    """Returns object related attributes, as it's a template filter None
    is return when attribute doesn't exists.

    eg::

        a = object()
        a.b = object()
        a.b.c = 1
        recursive_getattr(a, 'b.c') => 1
        recursive_getattr(a, 'b.d') => None
    """
    try:
        if "." not in attr:
                return getattr(obj, attr)
        else:
            l = attr.split('.')
            return recursive_getattr(getattr(obj, l[0]), '.'.join(l[1:]))
    except AttributeError:
        return None


class AdminNode(object):
    """An AdminNode just act as navigation container, it doesn't provide any
    rules.

    :param admin: The parent admin object
    :param url_prefix: The url prefix
    :param enpoint: The endpoint
    :param short_title: The short module title use on navigation
        & breadcrumbs
    :param title: The long title
    :param parent: The parent node
    """
    def __init__(self, admin, url_prefix, endpoint, short_title, title=None,
            parent=None):
        self.admin = admin
        self.parent = parent
        self.url_prefix = url_prefix
        self.endpoint = endpoint
        self.short_title = short_title
        self.title = title
        self.children = []

    @property
    def url_path(self):
        """Returns the url path relative to admin one.
        """
        if self.parent:
            return self.parent.url_path + self.url_prefix
        else:
            return self.url_prefix

    @property
    def parents(self):
        """Returns all parent hierarchy as list. Usefull for breadcrumbs.
        """
        if self.parent:
            parents = list(self.parent.parents)
            parents.append(self.parent)
            return parents
        else:
            return []

    def secure(self, http_code=403):
        """Gives a way to secure specific url path.

        :param http_code: The response http code when False
        """
        def decorator(f):
            self.admin.add_path_security(self.url_path, f, http_code)
            return f
        return decorator


class Admin(object):
    """Class that provides a way to add admin interface to Flask applications.

    :param app: The Flask application
    :param url_prefix: The url prefix
    :param main_dashboard: The main dashboard object
    :param endpoint: The endpoint
    """
    def __init__(self, app, url_prefix="/admin", title="flask-dashed",
            main_dashboard=None, endpoint='admin'):

        if not main_dashboard:
            from dashboard import DefaultDashboard
            main_dashboard = DefaultDashboard

        self.blueprint = Blueprint(endpoint, __name__,
            static_folder='static', template_folder='templates')
        self.app = app
        self.url_prefix = url_prefix
        self.endpoint = endpoint
        self.title = title
        self.secure_functions = OrderedMultiDict()
        # Checks security for current path
        self.blueprint.before_request(
            lambda: self.check_path_security(request.path))

        self.app.register_blueprint(self.blueprint, url_prefix=url_prefix)
        self.root_nodes = []

        self._add_node(main_dashboard, '/', 'main-dashboard', 'dashboard')
        # Registers recursive_getattr filter
        self.app.jinja_env.filters['recursive_getattr'] = recursive_getattr

    def register_node(self, url_prefix, endpoint, short_title, title=None,
            parent=None, node_class=AdminNode):
        """Registers admin node.

        :param url_prefix: The url prefix
        :param endpoint: The endpoint
        :param short_title: The short title
        :param title: The long title
        :param parent: The parent node path
        :param node_class: The class for node objects
        """
        return self._add_node(node_class, url_prefix, endpoint, short_title,
            title=title, parent=parent)

    def register_module(self, module_class, url_prefix, endpoint, short_title,
            title=None, parent=None):
        """Registers new module to current admin.
        """
        return self._add_node(module_class, url_prefix, endpoint, short_title,
            title=title, parent=parent)

    def _add_node(self, node_class, url_prefix, endpoint, short_title,
        title=None, parent=None):
        """Registers new node object to current admin object.
        """
        title = short_title if not title else title
        if parent and not issubclass(parent.__class__, AdminNode):
            raise Exception('`parent` class must be AdminNode subclass')
        new_node = node_class(self, url_prefix, endpoint, short_title,
            title=title, parent=parent)
        if parent:
            parent.children.append(new_node)
        else:
            self.root_nodes.append(new_node)
        return new_node

    @property
    def main_dashboard(self):
        return self.root_nodes[0]

    def add_path_security(self, path, function, http_code=403):
        """Registers security function for given path.

        :param path: The endpoint to secure
        :param function: The security function
        :param http_code: The response http code
        """
        self.secure_functions.add(path, (function, http_code))

    def check_path_security(self, path):
        """Checks security for specific and path.

        :param path: The path to check
        """
        for key in self.secure_functions.iterkeys():
            if path.startswith("%s%s" % (self.url_prefix, key)):
                for function, http_code in self.secure_functions.getlist(key):
                    if not function():
                        return abort(http_code)


class AdminModule(AdminNode):
    """Class that provides a way to create simple admin module.

    :param admin: The parent admin object
    :param url_prefix: The url prefix
    :param enpoint: The endpoint
    :param short_title: the short module title use on navigation
        & breadcrumbs
    :param title: The long title
    :param parent: The parent node
    """
    def __init__(self, *args, **kwargs):
        super(AdminModule, self).__init__(*args, **kwargs)
        self.rules = OrderedMultiDict()
        self._register_rules()

    def add_url_rule(self, rule, endpoint, view_func, **options):
        """Adds a routing rule to the application from relative endpoint.
        `view_class` is copied as we need to dynamically apply decorators.

        :param rule: The rule
        :param endpoint: The endpoint
        :param view_func: The view
        """
        class ViewClass(view_func.view_class):
            pass

        ViewClass.__name__ = "%s_%s" % (self.endpoint, endpoint)
        ViewClass.__module__ = view_func.__module__
        view_func.view_class = ViewClass
        full_endpoint = "%s.%s_%s" % (self.admin.endpoint,
            self.endpoint, endpoint)
        self.admin.app.add_url_rule("%s%s%s" % (self.admin.url_prefix,
            self.url_path, rule), full_endpoint, view_func, **options)
        self.rules.setlist(endpoint, [(rule, endpoint, view_func)])

    def _register_rules(self):
        """Registers all module rules after initialization.
        """
        if not hasattr(self, 'default_rules'):
            raise NotImplementedError('Admin module class must provide'
                + ' default_rules')
        for rule, endpoint, view_func in self.default_rules:
            self.add_url_rule(rule, endpoint, view_func)

    @property
    def url(self):
        """Returns first registered (main) rule as url.
        """
        try:
            return url_for("%s.%s_%s" % (self.admin.endpoint,
                self.endpoint, self.rules.lists()[0][0]))
                # Cause OrderedMultiDict.keys() doesn't preserve order...
        except IndexError:
            raise Exception('`AdminModule` must provide at list one rule.')

    def secure_endpoint(self, endpoint,  http_code=403):
        """Gives a way to secure specific url path.

        :param endpoint: The endpoint to protect
        :param http_code: The response http code when False
        """
        def decorator(f):
            self._secure_enpoint(endpoint, f, http_code)
            return f
        return decorator

    def _secure_enpoint(self, endpoint, secure_function, http_code):
        """Secure enpoint view function via `secure` decorator.

        :param enpoint: The endpoint to secure
        :param secure_function: The function to check
        :param http_code: The response http code when False.
        """
        rule, endpoint, view_func = self.rules.get(endpoint)
        view_func.view_class.dispatch_request =\
            secure(endpoint, secure_function, http_code)(
                view_func.view_class.dispatch_request)


class ObjectAdminModule(AdminModule):
    """Base class for object admin modules backends.
    Provides all required methods to retrieve, create, update and delete
    objects.
    """
    # List relateds
    list_view = ObjectListView
    list_template = 'flask_dashed/list.html'
    list_fields = None
    list_title = 'list'
    list_per_page = 10
    searchable_fields = None
    order_by = None
    # Edit relateds
    edit_template = 'flask_dashed/edit.html'
    form_view = ObjectFormView
    form_class = None
    edit_title = 'edit object'
    # New relateds
    new_title = 'new object'
    # Delete relateds
    delete_view = ObjectDeleteView

    def __new__(cls, *args, **kwargs):
        if not cls.list_fields:
            raise NotImplementedError()
        return super(ObjectAdminModule, cls).__new__(cls, *args, **kwargs)

    @property
    def default_rules(self):
        """Adds object list rule to current app.
        """
        return [
            ('/', 'list', self.list_view.as_view('short_title', self)),
            ('/page/<page>', 'list', self.list_view.as_view('short_title',
                self)),
            ('/new', 'new', self.form_view.as_view('short_title', self)),
            ('/<pk>/edit', 'edit', self.form_view.as_view('short_title',
                self)),
            ('/<pk>/delete', 'delete', self.delete_view.as_view('short_title',
                self)),
        ]

    def get_object_list(self, search=None, order_by_field=None,
            order_by_direction=None, offset=None, limit=None):
        """Returns objects list ordered and filtered.

        :param search: The search string for quick filtering
        :param order_by_field: The ordering field
        :param order_by_direction: The ordering direction
        :param offset: The pagintation offset
        :param limit: The pagination limit
        """
        raise NotImplementedError()

    def count_list(self, search=None):
        """Counts filtered object list.

        :param search: The search string for quick filtering.
        """
        raise NotImplementedError()

    def get_action_for_field(self, field, obj):
        """Returns title and link for given list field and object.

        :param field: The field path.
        :param object: The line object.
        """
        title, url = None, None
        field = self.list_fields[field]
        if 'action' in field:
            title = field['action'].get('title', None)
            if callable(title):
                title = title(obj)
            url = field['action'].get('url', None)
            if callable(url):
                url = url(obj)
        return title, url

    def get_actions_for_object(self, object):
        """Returns action available for each object.

        :param object: The raw object
        """
        raise NotImplementedError()

    def get_form(self, obj):
        """Returns form initialy populate from object instance.

        :param obj: The object
        """
        return self.form_class(obj=obj)

    def get_object(self, pk=None):
        """Returns object retrieve by primary key.

        :param pk: The object primary key
        """
        raise NotImplementedError()

    def create_object(self):
        """Returns new object instance."""
        raise NotImplementedError()

    def save_object(self, object):
        """Persits object.

        :param object: The object to persist
        """
        raise NotImplementedError()

    def delete_object(self, object):
        """Deletes object.

        :param object: The object to delete
        """
        raise NotImplementedError()

########NEW FILE########
__FILENAME__ = dashboard
# -*- coding: utf-8 -*-
from admin import AdminModule
from views import DashboardView


class Dashboard(AdminModule):
    """A dashboard is a Widget holder usually used as admin entry point.
    """
    widgets = []

    @property
    def default_rules(self):
        return [('/', 'show', DashboardView.as_view(
            'dashboard', self))]


class DashboardWidget():
    """Dashboard widget builder.
    """
    def __init__(self, title):
        """Initialize a new widget instance.

        :param title: The widget title
        """
        self.title = title

    def render(self):
        """Returns html content to display.
        """
        raise NotImplementedError()


class HelloWorldWidget(DashboardWidget):
    def render(self):
        return '<p>Hello world!</p>'


class DefaultDashboard(Dashboard):
    """Default dashboard."""
    widgets = [HelloWorldWidget('my first dashboard widget')]

########NEW FILE########
__FILENAME__ = sqlalchemy
# -*- coding: utf-8 -*-
from __future__ import absolute_import

from werkzeug import OrderedMultiDict
from flask import url_for
from flask_dashed.admin import ObjectAdminModule
from flask_dashed.views import ObjectFormView
from sqlalchemy.sql.expression import or_
from wtforms.ext.sqlalchemy.orm import model_form as mf
from flask.ext.wtf import Form


def model_form(*args, **kwargs):
    """Returns form class for model.
    """
    if not 'base_class' in kwargs:
        kwargs['base_class'] = Form
    return mf(*args, **kwargs)


class ModelAdminModule(ObjectAdminModule):
    """SQLAlchemy model admin module builder.
    """
    model = None
    form_view = ObjectFormView
    form_class = None
    db_session = None

    def __new__(cls, *args, **kwargs):
        if not cls.model:
            raise Exception('ModelAdminModule must provide `model` attribute')
        if not cls.list_fields:
            cls.list_fields = OrderedMultiDict()
            for column in cls.model.__table__._columns:
                cls.list_fields[column.name] = {'label': column.name,
                    'column': getattr(cls.model, column.name)}
        if not cls.form_class:
            cls.form_class = model_form(cls.model, cls.db_session)
        return super(ModelAdminModule, cls).__new__(cls, *args, **kwargs)

    def get_object_list(self, search=None, order_by_name=None,
            order_by_direction=None, offset=None, limit=None):
        """Returns ordered, filtered and limited query.

        :param search: The string for search filter
        :param order_by_name: The field name to order by
        :param order_by_direction: The field direction
        :param offset: The offset position
        :param limit: The limit
        """
        limit = limit if limit else self.list_per_page
        query = self._get_filtered_query(self.list_query_factory, search)
        if not (order_by_name and order_by_direction)\
                and self.order_by is not None:
            order_by_name = self.order_by[0]
            order_by_direction = self.order_by[1]
        if order_by_name and order_by_direction:
            try:
                query = query.order_by(
                    getattr(self.list_fields[order_by_name]['column'],
                        order_by_direction)()
                )
            except KeyError:
                raise Exception('Order by field must be provided in ' +
                    'list_fields with a column key')
        return query.limit(limit).offset(offset).all()

    def count_list(self, search=None):
        """Counts filtered list.

        :param search: The string for quick search
        """
        query = self._get_filtered_query(self.list_query_factory, search)
        return query.count()

    @property
    def list_query_factory(self):
        """Returns non filtered list query.
        """
        return self.db_session.query(self.model)

    @property
    def edit_query_factory(self):
        """Returns query for object edition.
        """
        return self.db_session.query(self.model).get

    def get_actions_for_object(self, object):
        """"Returns actions for object as and tuple list.

        :param object: The object
        """
        return [
            ('edit', 'edit', 'Edit object', url_for(
                "%s.%s_edit" % (self.admin.blueprint.name, self.endpoint),
                pk=object.id)),
            ('delete', 'delete', 'Delete object', url_for(
                "%s.%s_delete" % (self.admin.blueprint.name, self.endpoint),
                pk=object.id)),
        ]

    def get_object(self, pk):
        """Gets back object by primary key.

        :param pk: The object primary key
        """
        obj = self.edit_query_factory(pk)
        return obj

    def create_object(self):
        """New object instance new object."""
        return self.model()

    def save_object(self, obj):
        """Saves object.

        :param object: The object to save
        """
        self.db_session.add(obj)
        self.db_session.commit()

    def delete_object(self, object):
        """Deletes object.

        :param object: The object to delete
        """
        self.db_session.delete(object)
        self.db_session.commit()

    def _get_filtered_query(self, query, search=None):
        """Filters query.

        :param query: The non filtered query
        :param search: The string for quick search
        """
        if search and self.searchable_fields:
            condition = None
            for field in self.searchable_fields:
                if field in self.list_fields\
                        and 'column' in self.list_fields[field]:
                    if condition is None:
                        condition = self.list_fields[field]['column'].\
                            contains(search)
                    else:
                        condition = or_(condition, self.\
                            list_fields[field]['column'].contains(search))
                else:
                    raise Exception('Searchables fields must be in ' +
                        'list_fields with specified column.')
            query = query.filter(condition)
        return query

########NEW FILE########
__FILENAME__ = views
# -*- coding: utf-8 -*-
from __future__ import absolute_import

from functools import wraps
from math import ceil
from flask import render_template, request, flash, redirect, url_for
from flask import abort
from flask.views import MethodView


def get_next_or(url):
    """Returns next request args or url.
    """
    return request.args['next'] if 'next' in request.args else url


def secure(endpoint, function, http_code):
    """Secures view function.
    """
    def decorator(view_func):
        @wraps(view_func)
        def _wrapped_view(self, *args, **kwargs):
            if not function(self, *args, **kwargs):
                return abort(http_code)
            return view_func(self, *args, **kwargs)
        return _wrapped_view
    return decorator


class AdminModuleMixin(object):
    """Provides admin node.

    :param admin_module: The admin module
    """
    def __init__(self, admin_module):
        self.admin_module = admin_module


class DashboardView(MethodView, AdminModuleMixin):
    """Displays user dashboard.

    :param admin_module: The admin module
    """
    def get(self):
        return  render_template('flask_dashed/dashboard.html',
            admin=self.admin_module.admin, module=self.admin_module)


def compute_args(request, update={}):
    """Merges all view_args and request args then update with
    user args.

    :param update: The user args
    """
    args = request.view_args.copy()
    args = dict(dict(request.args.to_dict(flat=True)), **args)
    args = dict(args, **update)
    return args


class ObjectListView(MethodView, AdminModuleMixin):
    """Lists objects.

    :param admin_module: the admin module
    """
    def get(self, page=1):
        """Displays object list.

        :param page: The current page index
        """
        page = int(page)
        search = request.args.get('search', None)
        order_by = request.args.get('orderby', None)
        order_direction = request.args.get('orderdir', None)
        count = self.admin_module.count_list(search=search)
        return  render_template(
            self.admin_module.list_template,
            admin=self.admin_module.admin,
            module=self.admin_module,
            objects=self.admin_module.get_object_list(
                search=search,
                offset=self.admin_module.list_per_page * (page - 1),
                limit=self.admin_module.list_per_page,
                order_by_name=order_by,
                order_by_direction=order_direction,
            ),
            count=count,
            current_page=page,
            pages=self.iter_pages(count, page),
            compute_args=compute_args
        )

    def iter_pages(self, count, current_page, left_edge=2,
                   left_current=2, right_current=5, right_edge=2):
        per_page = self.admin_module.list_per_page
        pages = int(ceil(count / float(per_page)))
        last = 0
        for num in xrange(1, pages + 1):
            if num <= left_edge or \
               (num > current_page - left_current - 1 and \
                num < current_page + right_current) or \
               num > pages - right_edge:
                if last + 1 != num:
                    yield None
                yield num
                last = num


class ObjectFormView(MethodView, AdminModuleMixin):
    """Creates or updates object.

    :param admin_module: The admin module
    """
    def get(self, pk=None):
        """Displays form.

        :param pk: The object primary key
        """
        obj = self.object
        if pk and obj is None:
            abort(404)
        is_new = pk is None
        form = self.admin_module.get_form(obj)
        return  render_template(
            self.admin_module.edit_template,
            admin=self.admin_module.admin,
            module=self.admin_module,
            object=obj,
            form=form,
            is_new=is_new
        )

    def post(self, pk=None):
        """Process form.

        :param pk: The object primary key
        """
        obj = self.object
        if pk and obj is None:
            abort(404)
        is_new = pk is None
        form = self.admin_module.get_form(obj)
        form.process(request.form)
        if form.validate():
            form.populate_obj(obj)
            self.admin_module.save_object(obj)
            if is_new:
                flash("Object successfully created", "success")
            else:
                flash("Object successfully updated", "success")
            return redirect(get_next_or(url_for(".%s_%s" %
                (self.admin_module.endpoint, 'list'))))
        else:
            flash("Can't save object due to errors", "error")
        return  render_template(
            self.admin_module.edit_template,
            admin=self.admin_module.admin,
            module=self.admin_module,
            object=obj,
            form=form,
            is_new=is_new
        )

    @property
    def object(self):
        """Gets object required by the form.

        :param pk: The object primary key
        """
        if not hasattr(self, '_object'):
            if 'pk' in request.view_args:
                self._object = self.admin_module.get_object(
                    request.view_args['pk'])
            else:
                self._object = self.admin_module.create_object()
        return self._object


class ObjectDeleteView(MethodView, AdminModuleMixin):
    """Deletes object.

    :param admin_module: the admin module
    """
    def get(self, pk):
        """Deletes object at given pk.

        :param pk: The primary key
        """
        obj = self.admin_module.get_object(pk)
        self.admin_module.delete_object(obj)
        flash("Object successfully deleted", "success")
        return redirect(get_next_or(url_for(".%s_%s" %
            (self.admin_module.endpoint, 'list'))))

########NEW FILE########
__FILENAME__ = admin
# -*- coding: utf-8 -*-
import unittest
from flask import Flask
from flask.ext.testing import TestCase
from flask_dashed.admin import Admin, AdminModule


class DashedTestCase(TestCase):

    def create_app(self):
        app = Flask(__name__)
        self.admin = Admin(app)
        return app


class AdminTest(DashedTestCase):

    def test_main_dashboard_view(self):
        r = self.client.get(self.admin.root_nodes[0].url)
        self.assertEqual(r.status_code, 200)
        self.assertIn('Hello world', r.data)

    def test_register_admin_module(self):
        self.assertRaises(
            NotImplementedError,
            self.admin.register_module,
            AdminModule, '/my-module', 'my_module', 'my module title'
        )

    def test_register_node(self):
        self.admin.register_node('/first-node', 'first_node', 'first node')
        self.assertEqual(len(self.admin.root_nodes), 2)

    def test_register_node_wrong_parent(self):
        self.assertRaises(
            Exception,
            self.admin.register_node,
            'first_node', 'first node', parent='undifined'
        )

    def test_register_node_with_parent(self):
        parent = self.admin.register_node('/parent', 'first_node',
            'first node')
        child = self.admin.register_node('/child', 'child_node', 'child node',
            parent=parent)
        self.assertEqual(len(self.admin.root_nodes), 2)
        self.assertEqual(parent, child.parent)
        self.assertEqual(child.url_path, '/parent/child')
        self.assertEqual(
            child.parents,
            [parent]
        )

    def test_children_two_levels(self):
        parent = self.admin.register_node('/root', 'first_root_node',
            'first node')
        child = self.admin.register_node('/child', 'first_child_node',
            'child node', parent=parent)
        second_child = self.admin.register_node('/child', 'second_child_node',
            'child node', parent=child)
        self.assertEqual(
            parent.children, [child]
        )
        self.assertEqual(
            child.children, [second_child]
        )
        self.assertEqual(
            child.parent, parent
        )
        self.assertEqual(
            second_child.parent, child
        )


if __name__ == '__main__':
    unittest.main()

########NEW FILE########
__FILENAME__ = all
#!/usr/bin/env python
import unittest

from admin import *
from sqlalchemy_backend import *


if __name__ == '__main__':
    unittest.main()


########NEW FILE########
__FILENAME__ = sqlalchemy_backend
# -*- coding: utf-8 -*-
import unittest
import wtforms
from werkzeug import OrderedMultiDict
from flask import Flask, url_for
from flask.ext.testing import TestCase
from flask.ext.sqlalchemy import SQLAlchemy
from flask_dashed.admin import Admin, ObjectAdminModule
from flask_dashed.ext.sqlalchemy import ModelAdminModule
from wtforms.ext.sqlalchemy.fields import QuerySelectField
from sqlalchemy.orm import aliased, contains_eager


app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'
app.config['SECRET_KEY'] = 'secret'
db = SQLAlchemy(app)
admin = Admin(app)


class Author(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255))

    def __unicode__(self):
        return "Autor: %s" % self.name


class Book(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(255))
    year = db.Column(db.Integer)
    author_id = db.Column(db.Integer, db.ForeignKey('author.id'))
    author = db.relationship(Author, primaryjoin=author_id == Author.id,
        backref="books")


class BaseTest(TestCase):
    def setUp(self):
        db.create_all()
        alain_fournier = Author(name=u"Alain Fournier")
        db.session.add(Book(title=u"Le grand Meaulnes",
            author=alain_fournier, year=1913))
        db.session.add(Book(title=u"Miracles",
            author=alain_fournier, year=1924))
        db.session.add(Book(title=u"Lettres à sa famille",
            author=alain_fournier, year=1929))
        db.session.add(Book(title=u"Lettres au petit B.",
            author=alain_fournier, year=1930))

        charles_baudelaire = Author(name=u"Charles Baudelaire")
        db.session.add(Book(title=u"La Fanfarlo",
            author=charles_baudelaire, year=1847))
        db.session.add(Book(title=u"Du vin et du haschisch",
            author=charles_baudelaire, year=1851))
        db.session.add(Book(title=u"Fusées",
            author=charles_baudelaire, year=1851))
        db.session.add(Book(title=u"L'Art romantique",
            author=charles_baudelaire, year=1852))
        db.session.add(Book(title=u"Morale du joujou",
            author=charles_baudelaire, year=1853))
        db.session.add(Book(title=u"Exposition universelle",
            author=charles_baudelaire, year=1855))
        db.session.add(Book(title=u"Les Fleurs du mal",
            author=charles_baudelaire, year=1857))
        db.session.add(Book(title=u"Le Poème du haschisch",
            author=charles_baudelaire, year=1858))
        db.session.add(Book(title=u"Les Paradis artificiels",
            author=charles_baudelaire, year=1860))
        db.session.add(Book(title=u"La Chevelure",
            author=charles_baudelaire, year=1861))
        db.session.add(Book(title=u"Réflexions sur quelques-uns de "
            + "mes contemporains", author=charles_baudelaire, year=1861))

        albert_camus = Author(name=u"Albert Camus")
        db.session.add(Book(title=u"Révolte dans les Asturies",
            author=albert_camus, year=1936))
        db.session.add(Book(title=u"L'Envers et l'Endroit",
            author=albert_camus, year=1937))
        db.session.add(Book(title=u"Caligula", author=albert_camus, year=1938))
        db.session.add(Book(title=u"Noces", author=albert_camus, year=1939))
        db.session.add(Book(title=u"Le Mythe de Sisyphe",
            author=albert_camus, year=1942))
        db.session.add(Book(title=u"L'Étranger",
            author=albert_camus, year=1942))
        db.session.add(Book(title=u"Le Malentendu",
            author=albert_camus, year=1944))
        db.session.add(Book(title=u"La Peste", author=albert_camus, year=1947))
        db.session.add(Book(title=u"L'État de siège",
            author=albert_camus, year=1948))
        db.session.add(Book(title=u"Les Justes",
            author=albert_camus, year=1949))
        db.session.add(Book(title=u"L'Homme révolté",
            author=albert_camus, year=1951))
        db.session.add(Book(title=u"L'Été", author=albert_camus, year=1954))
        db.session.add(Book(title=u"La Chute", author=albert_camus, year=1956))
        db.session.add(Book(title=u"L'Exil et le Royaume",
            author=albert_camus, year=1957))

        db.session.commit()

    def tearDown(self):
        db.session.remove()
        db.drop_all()


class AutoModelAdminModuleTest(BaseTest):

    class AutoBookModule(ModelAdminModule):
        db_session = db.session
        model = Book

    class AutoAuthorModule(ModelAdminModule):
        db_session = db.session
        model = Author

    def create_app(self):
        self.book_module = admin.register_module(self.AutoBookModule,
            '/book', 'book', 'auto generated book module')
        return app

    def test_created_rules(self):
        for endpoint in ('.book_list', '.book_edit', '.book_delete',):
            self.assertIn(endpoint, str(self.app.url_map))

    def test_get_objects(self):
        objects = self.book_module.get_object_list()
        self.assertEqual(len(objects), ObjectAdminModule.list_per_page)

    def test_count_list(self):
        self.assertEqual(self.book_module.count_list(), Book.query.count())

    def test_list_view(self):
        r = self.client.get(url_for('admin.book_list'))
        self.assertEqual(r.status_code, 200)

    def test_edit_view(self):
        r = self.client.get(url_for('admin.book_edit',
            pk=Book.query.first().id))
        self.assertEqual(r.status_code, 200)

    def test_secure_node(self):

        @self.book_module.secure(403)
        def secure():
            return False

        self.assertIn(self.book_module.url_path,
            admin.secure_functions.keys())
        r = self.client.get(url_for('admin.book_list'))
        self.assertEqual(r.status_code, 403)
        r = self.client.get(url_for('admin.book_new'))
        self.assertEqual(r.status_code, 403)

    def test_secure_parent_node(self):

        @self.book_module.secure(403)
        def secure():
            return True

        admin.register_module(self.AutoAuthorModule, '/author', 'author',
            'auto generated author module', parent=self.book_module)
        self.assertIn(self.book_module.url_path,
            admin.secure_functions.keys())
        r = self.client.get(url_for('admin.author_list'))
        self.assertEqual(r.status_code, 403)
        r = self.client.get(url_for('admin.author_new'))
        self.assertEqual(r.status_code, 403)

    def test_secure_module_endpoint(self):

        author_module = admin.register_module(self.AutoAuthorModule,
            '/author-again', 'author_again', 'auto generated author module')

        @author_module.secure_endpoint('list', 403)
        def secure(view):
            return False

        r = self.client.get(url_for('admin.author_again_list'))
        self.assertEqual(r.status_code, 403)
        r = self.client.get(url_for('admin.author_again_new'))
        self.assertEqual(r.status_code, 200)


class BookForm(wtforms.Form):
    title = wtforms.TextField('Title', [wtforms.validators.required()])
    author = QuerySelectField(query_factory=Author.query.all,
        allow_blank=True)


class ExplicitModelAdminModuleTest(BaseTest):

    class BookModule(ModelAdminModule):
        """Sample module with explicit eager loaded query.
        """
        model = Book
        db_session = db.session
        author_alias = aliased(Author)

        list_fields = OrderedMultiDict((
            ('id', {'label': 'id', 'column': Book.id}),
            ('title', {'label': 'book title', 'column': Book.title}),
            ('year', {'label': 'year', 'column': Book.year}),
            ('author.name', {'label': 'author name',
                'column': author_alias.name}),
        ))
        list_title = 'books list'

        searchable_fields = ['title', 'author.name']

        order_by = ('id', 'asc')

        list_query_factory = model.query\
               .outerjoin(author_alias, 'author')\
               .options(contains_eager('author', alias=author_alias))\

        form_class = BookForm

    def create_app(self):
        self.book_module = admin.register_module(self.BookModule,
            '/book', 'book', 'auto generated book module')
        return app

    def test_filtered_get_objects(self):
        objects = self.book_module.get_object_list(search='lettres')
        self.assertEqual(len(objects), 2)


if __name__ == '__main__':
    unittest.main()

########NEW FILE########
