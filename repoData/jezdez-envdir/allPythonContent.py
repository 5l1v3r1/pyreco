__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# envdir documentation build configuration file, created by
# sphinx-quickstart on Mon Nov 11 13:23:54 2013.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
sys.path.insert(0, os.path.abspath('..'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.intersphinx',
    'sphinx.ext.viewcode',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'envdir'
copyright = u'2013, Jannis Leidel and contributors'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '0.6'
# The full version, including alpha/beta/rc tags.
release = '0.6.1'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'envdirdoc'


# -- Options for LaTeX output --------------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'envdir.tex', u'envdir Documentation',
   u'Jannis Leidel and contributors', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'envdir', u'envdir Documentation',
     [u'Jannis Leidel and contributors'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output ------------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'envdir', u'envdir Documentation',
   u'Jannis Leidel and contributors', 'envdir', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False


# -- Options for Epub output ---------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = u'envdir'
epub_author = u'Jannis Leidel and contributors'
epub_publisher = u'Jannis Leidel and contributors'
epub_copyright = u'2013, Jannis Leidel and contributors'

# The language of the text. It defaults to the language option
# or en if the language is not set.
#epub_language = ''

# The scheme of the identifier. Typical schemes are ISBN or URL.
#epub_scheme = ''

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#epub_identifier = ''

# A unique identification for the text.
#epub_uid = ''

# A tuple containing the cover image and cover page html template filenames.
#epub_cover = ()

# A sequence of (type, uri, title) tuples for the guide element of content.opf.
#epub_guide = ()

# HTML files that should be inserted before the pages created by sphinx.
# The format is a list of tuples containing the path and title.
#epub_pre_files = []

# HTML files shat should be inserted after the pages created by sphinx.
# The format is a list of tuples containing the path and title.
#epub_post_files = []

# A list of files that should not be packed into the epub file.
#epub_exclude_files = []

# The depth of the table of contents in toc.ncx.
#epub_tocdepth = 3

# Allow duplicate toc entries.
#epub_tocdup = True

# Fix unsupported image types using the PIL.
#epub_fix_images = False

# Scale large images.
#epub_max_image_width = 0

# If 'no', URL addresses will not be shown.
#epub_show_urls = 'inline'

# If false, no index is generated.
#epub_use_index = True


# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'http://docs.python.org/': None}

########NEW FILE########
__FILENAME__ = env
import glob
import os

try:
    from UserDict import IterableUserDict as UserDict
except ImportError:
    from collections import UserDict


def isenvvar(name):
    root, name = os.path.split(name)
    return '=' not in name


class Env(UserDict):
    """
    An dict-like object to represent an envdir environment with extensive
    API, can be used as context manager, too.
    """
    def __init__(self, path):
        self.path = path
        self.data = {}
        self.originals = {}
        self.created = {}
        self._load()

    def __repr__(self):
        return "<envdir.Env '%s'>" % self.path

    def __enter__(self):
        return self

    def __exit__(self, type, value, traceback):
        self.clear()

    def __getitem__(self, name):
        return self._get(name)

    def __setitem__(self, name, value):
        self._write(**{name: value})
        self._set(name, value)
        self.created[name] = value

    def __delitem__(self, name):
        os.remove(os.path.join(self.path, name))
        self._delete(name)

    def __contains__(self, name):
        return (name in self.data or
                os.path.exists(os.path.join(self.path, name)))

    def _load(self):
        for path in filter(isenvvar, glob.glob(os.path.join(self.path, '*'))):
            root, name = os.path.split(path)
            value = self._get(name)
            self._set(name, value)

    def _open(self, name, mode='r'):
        return open(os.path.join(self.path, name), mode)

    def _get(self, name, default=None):
        path = os.path.join(self.path, name)
        if not os.path.exists(path):
            return default
        with self._open(name) as var:
            return var.read().strip().replace('\x00', '\n')

    def _set(self, name, value):
        if name in os.environ:
            self.originals[name] = os.environ[name]
        self.data[name] = value
        if value:
            os.environ[name] = value
        elif name in os.environ:
            del os.environ[name]

    def _delete(self, name):
        if name in self.originals:
            os.environ[name] = self.originals[name]
        elif name in os.environ:
            del os.environ[name]
        if name in self.data:
            del self.data[name]

    def _write(self, **values):
        for name, value in values.items():
            with self._open(name, 'w') as env:
                env.write(value)

    def clear(self):
        """
        Clears the envdir by resetting the os.environ items to the
        values it had before opening this envdir (or removing them
        if they didn't exist). Doesn't delete the envdir files.
        """
        for name in list(self.data.keys()):
            self._delete(name)

########NEW FILE########
__FILENAME__ = runner
import optparse
import os
import signal
import subprocess
import sys

from .env import Env
from .version import __version__

# must have shell = True on Windows
is_windows = sys.platform == 'win32'

if is_windows:
    params = {'creationflags': subprocess.CREATE_NEW_PROCESS_GROUP}
else:
    params = {'preexec_fn': os.setsid}


class Response(Exception):
    def __init__(self, message='', status=0):
        self.message = message
        self.status = status


class Runner(object):
    envdir_usage = "usage: %prog [--help] [--version] dir child"
    envshell_usage = "usage: %prog [--help] [--version] dir"

    def __init__(self):
        self.parser = optparse.OptionParser(version=__version__)
        self.parser.disable_interspersed_args()
        self.parser.prog = 'envdir'
        signal.signal(signal.SIGTERM, self.terminate)

    def path(self, path):
        real_path = os.path.realpath(os.path.expanduser(path))
        if not os.path.exists(real_path):
            # use 111 error code to adher to envdir's standard
            raise Response("envdir %r does not exist" % path, 111)
        if not os.path.isdir(real_path):
            # use 111 error code to adher to envdir's standard
            raise Response("envdir %r not a directory" % path, 111)
        return real_path

    def open(self, path=None, stacklevel=1):
        if path is None:
            frame = sys._getframe()
            get_parent = lambda frame: frame.f_back
            for _ in range(stacklevel):
                frame = get_parent(frame)
            if frame is not None:
                callerdir = os.path.dirname(frame.f_code.co_filename)
                path = os.path.join(callerdir, 'envdir')
            else:
                # last holdout, assume cwd
                path = 'envdir'
        return Env(self.path(path))

    def shell(self, name, *args):
        self.parser.set_usage(self.envshell_usage)
        self.parser.prog = 'envshell'
        options, args = self.parser.parse_args(list(args))

        if len(args) == 0:
            raise Response("%s\nError: incorrect number of arguments" %
                           (self.parser.get_usage()), 2)

        sys.stdout.write("Launching envshell for %s. "
                         "Type 'exit' or 'Ctrl+D' to return.\n" %
                         self.path(args[0]))
        sys.stdout.flush()
        self.open(args[0], 2)

        shell = os.environ['SHELL']

        try:
            subprocess.check_call([shell],
                                  universal_newlines=True,
                                  bufsize=0,
                                  close_fds=not is_windows,
                                  **params)
        except OSError as err:
            if err.errno == 2:
                raise Response("Unable to find shell %s" % shell, err.errno)
            else:
                raise Response("An error occurred: %s" % err,
                               status=err.errno)

        raise Response()

    def run(self, name, *args):
        self.parser.set_usage(self.envdir_usage)
        self.parser.prog = 'envdir'
        options, args = self.parser.parse_args(list(args))

        if len(args) < 2:
            raise Response("%s\nError: incorrect number of arguments\n" %
                           (self.parser.get_usage()), 2)

        self.open(args[0], 2)

        # the args to call later
        args = args[1:]

        # in case someone passes in -- for any reason to separate the commands
        if args[0] == '--':
            args = args[1:]

        try:
            self.process = subprocess.Popen(args,
                                            universal_newlines=True,
                                            bufsize=0,
                                            close_fds=False,
                                            **params)
            self.process.wait()
        except OSError as err:
            if err.errno == 2:
                raise Response("Unable to find command %s" %
                               args[0], err.errno)
            else:
                raise Response(status=err.errno)
        except KeyboardInterrupt:
            self.terminate()
        raise Response(status=self.process.returncode)

    def terminate(self, *args, **kwargs):
        # first send mellow signal
        self.quit(signal.SIGTERM)
        if self.process.poll() is None:
            # still running, kill it
            self.quit(signal.SIGKILL)

    def quit(self, signal):
        if self.process.poll() is None:
            proc_pgid = os.getpgid(self.process.pid)
            if os.getpgrp() == proc_pgid:
                # Just kill the proc, don't kill ourselves too
                os.kill(self.process.pid, signal)
            else:
                # Kill the whole process group
                os.killpg(proc_pgid, signal)

########NEW FILE########
__FILENAME__ = test_envdir
import os
import subprocess
import py
import pytest

import envdir
from envdir.runner import Response
from envdir.__main__ import go


@pytest.fixture(scope="module")
def run():
    from envdir.runner import Runner
    runner = Runner()
    return runner.run


@pytest.fixture(scope="module")
def shell():
    from envdir.runner import Runner
    runner = Runner()
    return runner.shell


@pytest.fixture
def tmpenvdir(tmpdir):
    return tmpdir.mkdir('testenvdir')


def test_usage(run):
    "Testing the usage"
    with py.test.raises(Response) as response:
        run('envdir')
    assert "incorrect number of arguments" in response.value.message
    assert response.value.status == 2


def test_default(run, tmpenvdir):
    "Default cases."
    tmpenvdir.join('DEFAULT').write('test')
    with py.test.raises(Response) as response:
        run('envdir', str(tmpenvdir), 'ls')
    assert "DEFAULT" in os.environ
    assert response.value.status == 0
    assert response.value.message == ''

    tmpenvdir.join('DEFAULT_DASHDASH').write('test')
    with py.test.raises(Response) as response:
        run('envdir', str(tmpenvdir), '--', 'ls')
    assert "DEFAULT_DASHDASH" in os.environ

    # Overriding an env var inline
    os.environ['DEFAULT_OVERRIDE'] = 'test2'
    with py.test.raises(Response) as response:
        run('envdir', str(tmpenvdir), 'ls')
    assert "DEFAULT" in os.environ
    assert "DEFAULT_OVERRIDE" in os.environ
    assert response.value.status == 0
    assert response.value.message == ''


def test_reset(run, tmpenvdir):
    "Resetting an env var with an empty file"
    tmpenvdir.join('RESET').write('')
    os.environ['RESET'] = 'test3'
    with py.test.raises(Response):
        run('envdir', str(tmpenvdir), 'ls')
    assert os.environ['DEFAULT'] == 'test'
    with py.test.raises(KeyError):
        assert os.environ['RESET'] == 'test3'


def test_multiline(run, tmpenvdir):
    "Multiline envdir file"
    tmpenvdir.join('MULTI_LINE').write("""multi
line
""")
    with py.test.raises(Response):
        run('envdir', str(tmpenvdir), 'ls')
    assert os.environ['MULTI_LINE'] == 'multi\nline'


def test_lowercase_var_names(run, tmpenvdir):
    "Lowercase env var name"
    tmpenvdir.join('lowercase-variable').write("test")
    with py.test.raises(Response) as response:
        run('envdir', str(tmpenvdir), 'ls')
    assert 'lowercase-variable' in os.environ
    assert os.environ['lowercase-variable'] == 'test'
    assert response.value.status == 0
    assert response.value.message == ''


def test_var_names_prefixed_by_underscore(run, tmpenvdir):
    "Underscore prefixed env var name"
    tmpenvdir.join('_UNDERSCORE_VAR').write("test")
    with py.test.raises(Response) as response:
        run('envdir', str(tmpenvdir), 'ls')
    assert '_UNDERSCORE_VAR' in os.environ
    assert os.environ['_UNDERSCORE_VAR'] == 'test'
    assert response.value.status == 0
    assert response.value.message == ''


def test_translate_nulls(run, tmpenvdir):
    "NULLs are translated into newline"
    tmpenvdir.join('NULL_CHARS').write("""null\x00character""")
    with py.test.raises(Response):
        run('envdir', str(tmpenvdir), 'ls')
    assert os.environ['NULL_CHARS'] == 'null\ncharacter'


def test_incorrect_no_args(run, tmpenvdir):
    "Incorrect number of arguments"
    with py.test.raises(Response) as response:
        run('envdir', str(tmpenvdir))
    assert 'incorrect number of arguments' in response.value.message
    assert 2 == response.value.status


def test_doesnt_exist(run, tmpdir):
    with py.test.raises(Response) as response:
        run('envdir', str(tmpdir.join('missing')), 'ls')
    assert 'does not exist' in response.value.message
    assert 111 == response.value.status

    with py.test.raises(Response) as response:
        run('envdir', str(tmpdir), 'doesnt-exist')
    assert 'Unable to find command' in response.value.message
    assert 2 == response.value.status


def test_must_be_directory(run, tmpdir):
    "The envdir must be a directory"
    tmpdir.join('not-a-directory').write('')
    with py.test.raises(Response) as response:
        run('envdir', str(tmpdir.join('not-a-directory')), 'ls')
    assert 'not a directory' in response.value.message
    assert 111 == response.value.status


def test_error_code(run, tmpenvdir):
    with py.test.raises(Response) as response:
        run('envdir', str(tmpenvdir),
            'python', '-c', 'import sys; sys.exit(19)')
    assert response.value.status == 19


def test_equal_sign(run, tmpenvdir):
    tmpenvdir.join('EQUAL_SIGN=').write('test')
    with py.test.raises(Response):
        run('envdir', str(tmpenvdir), 'printenv')
    assert 'EQUAL_SIGN' not in os.environ


timeout = py.path.local.sysfind('timeout') or py.path.local.sysfind('gtimeout')


@py.test.mark.skipif(timeout is None,
                     reason="(g)timeout command not found")
def test_keyboard_interrupt(run, tmpenvdir):
    with py.test.raises(SystemExit) as exit:
        go(run, (str(timeout), '--signal=SIGTERM', '--', '1', 'envdir',
                 str(tmpenvdir), 'ls'))
    if py.std.sys.version_info[:2] == (2, 6):
        assert exit.value == 2
    else:
        assert exit.value.code == 2


def test_shell(shell, tmpenvdir, capfd):
    tmpenvdir.join('TEST_SHELL').write('test')
    with py.test.raises(Response) as response:
        shell('envshell', str(tmpenvdir))
    out, err = capfd.readouterr()
    assert response.value.status == 0
    assert "Launching envshell for " in out

    with py.test.raises(Response) as response:
        shell('envshell')
    assert "incorrect number of arguments" in response.value.message


def test_shell_doesnt_exist(shell, tmpenvdir):
    tmpenvdir.join('NO_TEST_SHELL').write('test')
    os.environ['SHELL'] = '/does/not/exist'
    with py.test.raises(Response) as response:
        shell('envshell', str(tmpenvdir))
    assert "Unable to find shell" in response.value.message


def test_read(tmpenvdir):
    tmpenvdir.join('READ').write('test')
    applied = envdir.read(str(tmpenvdir))
    assert 'READ' in os.environ
    assert 'READ' in applied


def test_read_magic_dir(capfd, tmpdir):
    "Python usage with magic envdir"
    tmp = tmpdir.mkdir('envdir')
    tmp.join('READ_MAGIC').write('test')
    magic_scripts = tmpdir.join('test_magic.py')
    magic_scripts.write("""
import envdir, os, sys
envdir.read()
if 'READ_MAGIC' in os.environ:
    sys.exit(42)
""")
    status = subprocess.call(['python', str(magic_scripts)])
    assert status == 42

    # this should raise a Response with an error because envdir.run()
    # can't have all arguments
    with py.test.raises(SystemExit) as response:
        envdir.run('envdir', str(tmp))
    out, err = capfd.readouterr()

    if py.std.sys.version_info[:2] == (2, 6):
        assert response.value == 2
    else:
        assert response.value.code == 2
    assert "incorrect number of arguments" in err

    with py.test.raises(SystemExit) as response:
        envdir.run()
    out, err = capfd.readouterr()
    if py.std.sys.version_info[:2] == (2, 6):
        assert response.value == 2
    else:
        assert response.value.code == 2


def test_read_existing_var(tmpenvdir):
    tmpenvdir.join('READ_EXISTING').write('override')
    os.environ['READ_EXISTING'] = 'test'
    envdir.read(str(tmpenvdir))
    assert os.environ['READ_EXISTING'] == 'override'


def test_write(tmpenvdir):
    env = envdir.open(str(tmpenvdir))
    env['WRITE'] = 'test'
    assert tmpenvdir.ensure('WRITE')
    assert tmpenvdir.join('WRITE').read() == 'test'
    envdir.read(str(tmpenvdir))
    assert os.environ['WRITE'] == 'test'


def test_write_magic(tmpdir):
    tmp = tmpdir.mkdir('envdir')
    magic_scripts = tmpdir.join('test_magic_write.py')
    magic_scripts.write("""
import envdir, os, sys
env = envdir.open()
env['WRITE_MAGIC'] = 'test'
""")
    subprocess.call(['python', str(magic_scripts)])
    assert tmp.join('WRITE_MAGIC').read() == 'test'
    envdir.read(str(tmp))
    assert os.environ['WRITE_MAGIC'] == 'test'


def test_context_manager(tmpenvdir):
    tmpenvdir.join('CONTEXT_MANAGER').write('test')

    with envdir.open(str(tmpenvdir)) as env:
        assert 'CONTEXT_MANAGER' in os.environ
    assert 'CONTEXT_MANAGER' not in os.environ
    assert repr(env) == "<envdir.Env '%s'>" % tmpenvdir


def test_dict_like(tmpenvdir):
    tmpenvdir.join('ITER').write('test')
    env = envdir.open(str(tmpenvdir))
    assert list(env) == ['ITER']
    assert hasattr(env, '__iter__')

    assert [k for k in env] == ['ITER']
    assert list(env.values()) == ['test']
    assert list(env.items()) == [('ITER', 'test')]
    assert 'ITER' in os.environ
    env.clear()
    assert list(env.items()) == []
    assert 'ITER' not in os.environ

    with envdir.open(str(tmpenvdir)) as env:
        assert list(env.items()) == [('ITER', 'test')]


def test_context_manager_reset(tmpenvdir):
    tmpenvdir.join('CONTEXT_MANAGER_RESET').write('test')
    # make the var exist in the enviroment
    os.environ['CONTEXT_MANAGER_RESET'] = 'moot'
    with envdir.open(str(tmpenvdir)) as env:
        assert os.environ['CONTEXT_MANAGER_RESET'] == 'test'
        env.clear()
        # because we reset the original value
        assert os.environ['CONTEXT_MANAGER_RESET'] == 'moot'
        assert 'CONTEXT_MANAGER_RESET' in os.environ


def test_context_manager_write(tmpenvdir):
    with envdir.open(str(tmpenvdir)) as env:
        assert 'CONTEXT_MANAGER_WRITE' not in os.environ
        env['CONTEXT_MANAGER_WRITE'] = 'test'
        assert 'CONTEXT_MANAGER_WRITE' in os.environ
    assert 'CONTEXT_MANAGER_WRITE' not in os.environ


def test_context_manager_item(tmpenvdir):
    tmpenvdir.join('CONTEXT_MANAGER_ITEM').write('test')

    with envdir.open(str(tmpenvdir)) as env:
        assert 'CONTEXT_MANAGER_ITEM' in os.environ
        # the variable is in the env, but not in the env
        assert env['CONTEXT_MANAGER_ITEM'] == 'test'
        del env['CONTEXT_MANAGER_ITEM']
        assert 'CONTEXT_MANAGER_ITEM' not in os.environ
        assert 'CONTEXT_MANAGER_ITEM' not in env

        env['CONTEXT_MANAGER_ITEM_SET'] = 'test'
        assert 'CONTEXT_MANAGER_ITEM_SET' in os.environ
        assert tmpenvdir.join('CONTEXT_MANAGER_ITEM_SET').check()
        del env['CONTEXT_MANAGER_ITEM_SET']
        assert 'CONTEXT_MANAGER_ITEM_SET' not in os.environ
        assert not tmpenvdir.join('CONTEXT_MANAGER_ITEM_SET').check()
    assert tmpenvdir.ensure('CONTEXT_MANAGER_ITEM_SET')
    assert 'CONTEXT_MANAGER_ITEM_SET' not in os.environ

########NEW FILE########
__FILENAME__ = version
__version__ = '0.6.1'  # noqa

########NEW FILE########
__FILENAME__ = __main__
import sys

from .runner import Runner, Response

runner = Runner()


def go(caller, *args):
    if not args:
        args = sys.argv
    try:
        caller(args[0], *args[1:])
    except Response as response:
        if response.message:
            sys.stderr.write(response.message)
        sys.exit(response.status or 0)
    else:
        sys.exit(0)


if __name__ == '__main__':
    go(runner.run)  # pragma: no cover

########NEW FILE########
