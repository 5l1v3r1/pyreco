__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# Faker documentation build configuration file, created by
# sphinx-quickstart on Tue Mar 11 11:25:48 2014.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.todo',
    'faker.build_docs',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Faker'
copyright = u'2014, Daniele Faraglia'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '0.3'
# The full version, including alpha/beta/rc tags.
release = '0.3.2'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'Fakerdoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
  ('index', 'Faker.tex', u'Faker Documentation',
   u'Daniele Faraglia', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'faker', u'Faker Documentation',
     [u'Daniele Faraglia'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'Faker', u'Faker Documentation',
   u'Daniele Faraglia', 'Faker', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False

########NEW FILE########
__FILENAME__ = build_docs
from __future__ import print_function
from __future__ import unicode_literals
import os
import sys

if sys.version < '3':
    text_type = unicode
    binary_type = str
else:
    text_type = str
    binary_type = bytes


DOCS_ROOT = os.path.abspath(os.path.join('..', 'docs'))

def write(fh, s):
    return fh.write(s.encode('utf-8'))

def write_provider(fh, doc, provider, formatters, excludes=None):

    if excludes is None:
        excludes = []


    write(fh, '\n')
    title = "``faker.providers.{0}``".format(doc.get_provider_name(provider))
    write(fh, '%s\n' % title)
    write(fh, "-" * len(title))
    write(fh, '\n\n::\n')

    for signature, example in formatters.items():
        if signature in excludes:
            continue
        try:
            lines = text_type(example).expandtabs().splitlines()
        except UnicodeEncodeError:
            raise Exception('error on "{0}" with value "{1}"'.format(signature, example))
        margin = max(30, doc.max_name_len+1)
        remains = 150 - margin
        separator = '#'
        write(fh, '\n')
        for line in lines:
            for i in range(0, (len(line) // remains) + 1):
                write(fh, "\t{fake:<{margin}}{separator} {example}".format(
                    fake=signature,
                    separator=separator,
                    example=line[i*remains:(i+1)*remains],
                    margin=margin
                ))
                signature = separator = ' '
    write(fh, '\n')


def write_docs(*args, **kwargs):
    from faker import Faker, documentor, DEFAULT_LOCALE, AVAILABLE_LOCALES
    fake = Faker(locale=DEFAULT_LOCALE)

    from faker.providers import BaseProvider
    base_provider_formatters = [f for f in dir(BaseProvider)]

    doc = documentor.Documentor(fake)

    formatters = doc.get_formatters(with_args=True, with_defaults=True)

    for provider, fakers in formatters:
        provider_name = doc.get_provider_name(provider)
        with open(os.path.join(DOCS_ROOT, 'providers', '%s.rst' % provider_name), 'wb') as fh:
            write_provider(fh, doc, provider, fakers)

    with open(os.path.join(DOCS_ROOT, 'providers.rst'), 'wb') as fh:
        write(fh, 'Providers\n')
        write(fh, '=========\n')
        write(fh, '.. toctree::\n')
        write(fh, '   :maxdepth: 2\n\n')
        [write(fh, '   providers/%s\n' % doc.get_provider_name(provider)) for provider, fakers in formatters]

    AVAILABLE_LOCALES.sort()
    for lang in AVAILABLE_LOCALES:
        with open(os.path.join(DOCS_ROOT, 'locales', '%s.rst' % lang), 'wb') as fh:
            write(fh, '\n')
            title = 'Language {0}\n'.format(lang)
            write(fh, title)
            write(fh, '=' * len(title))
            write(fh, '\n')
            fake = Faker(locale=lang)
            d = documentor.Documentor(fake)

            for p, fs in d.get_formatters(with_args=True, with_defaults=True, locale=lang,
                                          excludes=base_provider_formatters):
                write_provider(fh, d, p, fs)

    with open(os.path.join(DOCS_ROOT, 'locales.rst'), 'wb') as fh:
        write(fh, 'Locales\n')
        write(fh, '=======\n')
        write(fh, '.. toctree::\n')
        write(fh, '   :maxdepth: 2\n\n')
        [write(fh, '   locales/%s\n' % lang) for lang in AVAILABLE_LOCALES]


# wrappers for sphinx
def _main(app, *args, **kwargs):
    return write_docs(*args, **kwargs)

def setup(app):
    app.connect(str('builder-inited'), _main)


if __name__ == "__main__":
    write_docs(*sys.argv[1:])

########NEW FILE########
__FILENAME__ = cli
from __future__ import unicode_literals
from __future__ import print_function


import os
import sys
import argparse

from faker import Faker, documentor, VERSION, AVAILABLE_LOCALES, DEFAULT_LOCALE, Factory

if sys.version < '3':
    text_type = unicode
    binary_type = str
else:
    text_type = str
    binary_type = bytes


__author__ = 'joke2k'


def print_provider(doc, provider, formatters, excludes=None, output=None):
    output = output or sys.stdout
    if excludes is None:
        excludes = []

    print(file=output)
    print("### faker.providers.{0}".format(doc.get_provider_name(provider)), file=output)
    print(file=output)

    for signature, example in formatters.items():
        if signature in excludes:
            continue
        try:
            lines = text_type(example).expandtabs().splitlines()
        except UnicodeEncodeError:
            raise Exception('error on "{0}" with value "{1}"'.format(signature, example))
        margin = max(30, doc.max_name_len+1)
        remains = 150 - margin
        separator = '#'
        for line in lines:
            for i in range(0, (len(line) // remains) + 1):
                print("\t{fake:<{margin}}{separator} {example}".format(
                    fake=signature,
                    separator=separator,
                    example=line[i*remains:(i+1)*remains],
                    margin=margin
                ), file=output)
                signature = separator = ' '


def print_doc(provider_or_field=None, args=None, lang=DEFAULT_LOCALE, output=None):
    args = args or []
    output = output or sys.stdout
    fake = Faker(locale=lang)

    from faker.providers import BaseProvider
    base_provider_formatters = [f for f in dir(BaseProvider)]

    if provider_or_field:
        if '.' in provider_or_field:
            parts = provider_or_field.split('.')
            locale = parts[-2] if parts[-2] in AVAILABLE_LOCALES else lang
            fake = Factory.create(locale, providers=[parts[-1]])
            doc = documentor.Documentor(fake)
            doc.already_generated = base_provider_formatters
            print_provider(doc, fake.get_providers()[0], doc.get_provider_formatters(fake.get_providers()[0]), output=output)
        else:
            try:
                print(fake.format(provider_or_field, *args), file=output)
            except AttributeError:
                print('No faker found for "{0}({1})"'.format(provider_or_field, args), file=output)

    else:
        doc = documentor.Documentor(fake)

        formatters = doc.get_formatters(with_args=True, with_defaults=True)

        for provider, fakers in formatters:

            print_provider(doc, provider, fakers, output=output)

        for language in AVAILABLE_LOCALES:
            if language == lang:
                continue
            print(file=output)
            print('## LANGUAGE {0}'.format(language), file=output)
            fake = Faker(locale=language)
            d = documentor.Documentor(fake)

            for p, fs in d.get_formatters(with_args=True, with_defaults=True, locale=language,
                                          excludes=base_provider_formatters):
                print_provider(d, p, fs, output=output)


class Command(object):

    def __init__(self, argv=None):
        self.argv = argv or sys.argv[:]
        self.prog_name = os.path.basename(self.argv[0])

    def execute(self):
        """
        Given the command-line arguments, this creates a parser appropriate to that command, and runs it.
        """

        # retrieve default language from system environment
        default_locale = os.environ['LANG'].split('.')[0]
        if default_locale not in AVAILABLE_LOCALES:
            default_locale = DEFAULT_LOCALE

        formatter_class = argparse.RawDescriptionHelpFormatter
        parser = argparse.ArgumentParser(
            prog=self.prog_name,
            description='{0} version {1}'.format(self.prog_name, VERSION),
            formatter_class=formatter_class)

        parser.add_argument("--version", action="version",
                            version="%(prog)s {0}".format(VERSION))

        parser.add_argument('-o', metavar="output",
                            type=argparse.FileType('w'), default=sys.stdout,
                            help="redirect output to a file")

        parser.add_argument('-l', '--lang', choices=AVAILABLE_LOCALES, default=default_locale)
        parser.add_argument('-r', '--repeat', default=1, type=int)
        parser.add_argument('-s', '--sep', default='\n')

        parser.add_argument('fake', action='store', nargs='*')

        arguments = parser.parse_args(self.argv[1:])

        for i in range(arguments.repeat):

            fake = arguments.fake[0] if len(arguments.fake) else None

            print_doc(fake, arguments.fake[1:], lang=arguments.lang, output=arguments.o)

            print(arguments.sep, file=arguments.o)

            if not fake:
                # repeat not supported for all docs
                break


def execute_from_command_line(argv=None):
    """
    A simple method that runs a Comand.
    """
    if sys.stdout.encoding is None:
        print("please set python env PYTHONIOENCODING=UTF-8, example: "
              "export PYTHONIOENCODING=UTF-8, when write to stdout", file=sys.stderr)
        exit(1)

    command = Command(argv)
    command.execute()
########NEW FILE########
__FILENAME__ = documentor
from __future__ import unicode_literals
import inspect
from faker import utils


class Documentor(object):

    def __init__(self, generator):
        """
        :param generator: a Generator localized and with providers already filled,
                          that we want write documentation
        :type generator: faker.Generator()
        """
        self.generator = generator
        self.max_name_len = 0
        self.already_generated = []

    def get_formatters(self, locale=None, excludes=None, **kwargs):

        self.max_name_len = 0
        self.already_generated = [] if excludes is None else excludes[:]
        formatters = []
        providers = self.generator.get_providers()
        for provider in providers[::-1]:  # reverse
            if locale and self.generator.provider(self.get_provider_name(provider)).__lang__ != locale:
                continue
            formatters.append(
                (provider, self.get_provider_formatters(provider, **kwargs))
            )
        return formatters

    def get_provider_formatters(self, provider, prefix='fake.', with_args=True, with_defaults=True):

        formatters = {}

        for name, method in inspect.getmembers(provider, inspect.ismethod):

            # skip 'private' method and inherited methods
            if name.startswith('_') or name in self.already_generated: continue

            arguments = []

            if with_args:
                # retrieve all parameter
                argspec = inspect.getargspec(method)

                for i, arg in enumerate([x for x in argspec.args if x not in ['self', 'cls']]):

                    if argspec.defaults and with_defaults:

                        try:
                            default = argspec.defaults[i]
                            if utils.is_string(default):
                                default = ('"{0}"' if '"' not in default else '"{0}"').format(default)
                            else:
                                # TODO check default type
                                default = "{0}".format(default)

                            arg = "{0}={1}".format(arg, default)

                        except IndexError:
                            pass

                    arguments.append(arg)
                    if with_args == 'first':
                        break

                if with_args != 'first':
                    if argspec.varargs:
                        arguments.append('*' + argspec.varargs)
                    if argspec.keywords:
                        arguments.append('**' + argspec.keywords)

            # build fake method signature
            signature = "{0}{1}({2})".format(prefix, name, ", ".join(arguments))

            # make a fake example
            example = self.generator.format(name)

            formatters[signature] = example

            self.max_name_len = max(self.max_name_len, len(signature))
            self.already_generated.append(name)

        return formatters

    @staticmethod
    def get_provider_name(provider_class):
        name = provider_class.__module__.split('.')[-1]
        if name == 'providers':
            name = 'base'
        return name


########NEW FILE########
__FILENAME__ = factory
from __future__ import unicode_literals
from __future__ import absolute_import
import sys
from faker import DEFAULT_LOCALE, DEFAULT_PROVIDERS, AVAILABLE_LOCALES
from faker import Generator
from faker import providers as providers_mod


class Factory(object):

    @classmethod
    def create(cls, locale=None, providers=None, generator=None, **config):

        # fix locale to package name
        locale = locale.replace('-', '_') if locale else DEFAULT_LOCALE
        if '_' in locale:
            locale = locale[:2] + locale[2:].upper()
        if locale not in AVAILABLE_LOCALES:
            raise AttributeError('Invalid configuration for faker locale "{0}"'.format(locale))

        providers = providers or DEFAULT_PROVIDERS

        faker = generator or Generator(**config)
        faker.add_provider(providers_mod.BaseProvider)
        for provider_name in providers:

            provider_class, lang_found = cls._get_provider_class(provider_name, locale)
            provider = provider_class(faker)
            provider.__provider__ = provider_name
            provider.__lang__ = lang_found
            faker.add_provider(provider)

        return faker

    @classmethod
    def _get_provider_class(cls, provider, locale=''):

        provider_class = cls._find_provider_class(provider, locale)

        if provider_class:
            return provider_class, locale

        if locale and locale != DEFAULT_LOCALE:
            # fallback to default locale
            provider_class = cls._find_provider_class(provider, DEFAULT_LOCALE)
            if provider_class:
                return provider_class, DEFAULT_LOCALE

        # fallback to no locale
        provider_class = cls._find_provider_class(provider)
        if provider_class:
            return provider_class, None

        raise ValueError('Unable to find provider "{0}" with locale "{1}"'.format(provider, locale))

    @classmethod
    def _find_provider_class(cls, provider, locale=''):

        path = "{providers}{lang}.{provider}".format(
            providers=providers_mod.__package__ or providers_mod.__name__,
            lang='.' + locale if locale else '',
            provider=provider
        )

        try:
            __import__(path)
        except ImportError:
            return None

        return sys.modules[path].Provider

########NEW FILE########
__FILENAME__ = generator
from __future__ import unicode_literals
import re
import random


class Generator(object):

    __config = {}

    def __init__(self, **config):
        self.providers = []
        self.__config = dict(list(self.__config.items()) + list(config.items()))

    def add_provider(self, provider):

        if type(provider) is type:
            provider = provider(self)

        self.providers.insert(0, provider)

        for method_name in dir(provider):
            # skip 'private' method
            if method_name.startswith('_'):
                continue

            faker_function = getattr(provider, method_name)

            if hasattr(faker_function, '__call__') or isinstance(faker_function, (classmethod, staticmethod)):
                # add all faker method to generator
                self.set_formatter(method_name, faker_function)

    def provider(self, name):
        try:
            return list(filter(lambda p: p.__provider__ == name.lower(), self.get_providers()))[0]
        except IndexError:
            return None

    def get_providers(self):
        """
        returns added providers
        """
        return self.providers

    def seed(self, seed=None):
        """
        calls random.seed
        """
        random.seed(seed)

    def format(self, formatter, *args, **kwargs):
        """
        this is a secure way to make a fake
        from other Provider
        TODO: data export?
        """
        return self.get_formatter(formatter)(*args, **kwargs)

    def get_formatter(self, formatter):
        try:
            return getattr(self, formatter)
        except AttributeError:
            raise AttributeError('Unknown formatter "{0}"'.format(formatter))

    def set_formatter(self, name, method):
        """
        This method adds a provider method to generator.
        Override this method to add some decoration or logging stuff.
        """
        setattr(self, name, method)

    def parse(self, text):
        """
        Replaces tokens ('{{ tokenName }}') with the result from the token method call
        """
        return re.sub(r'\{\{(\s?)(\w+)(\s?)\}\}', self.__format_token, text)
        #return re.sub( r'\{\{\s?(\w+)\s?\}\}', lambda matches: ( self.format( matches.group(1) ) ) , text )

    def __format_token(self, matches):
        formatter = list(matches.groups())
        #args = []
        #if ':' in formatter[1]:
        #    formatter[1], args = formatter[1].split(":")
        #    args = args.split(",")
        formatter[1] = self.format(formatter[1])

        return "".join(formatter)
########NEW FILE########
__FILENAME__ = address
from __future__ import unicode_literals
from decimal import Decimal
import random
from . import BaseProvider
from . import date_time


class Provider(BaseProvider):
    city_suffixes = ['Ville', ]
    street_suffixes = ['Street', ]
    city_formats = ['{{first_name}} {{city_suffix}}', ]
    street_name_formats = ['{{last_name}} {{street_suffix}}', ]
    street_address_formats = ['{{building_number}} {{street_name}}', ]
    address_formats = ['{{street_address}} {{postcode}} {{city}}', ]
    building_number_formats = ['##', ]
    postcode_formats = ['#####', ]
    countries = [tz['name'] for tz in date_time.Provider.countries]

    @classmethod
    def city_suffix(cls):
        """
        :example 'town'
        """
        return cls.random_element(cls.city_suffixes)

    @classmethod
    def street_suffix(cls):
        """
        :example 'Avenue'
        """
        return cls.random_element(cls.street_suffixes)

    @classmethod
    def building_number(cls):
        """
        :example '791'
        """
        return cls.numerify(cls.random_element(cls.building_number_formats))

    def city(self):
        """
        :example 'Sashabury'
        """
        pattern = self.random_element(self.city_formats)
        return self.generator.parse(pattern)

    def street_name(self):
        """
        :example 'Crist Parks'
        """
        pattern = self.random_element(self.street_name_formats)
        return self.generator.parse(pattern)

    def street_address(self):
        """
        :example '791 Crist Parks'
        """
        pattern = self.random_element(self.street_address_formats)
        return self.generator.parse(pattern)

    @classmethod
    def postcode(cls):
        """
        :example 86039-9874
        """
        return cls.bothify(cls.random_element(cls.postcode_formats)).upper()

    def address(self):
        """
        :example '791 Crist Parks, Sashabury, IL 86039-9874'
        """
        pattern = self.random_element(self.address_formats)
        return self.generator.parse(pattern)

    @classmethod
    def country(cls):
        return cls.random_element(cls.countries)

    @classmethod
    def geo_coordinate(cls, center=None, radius=0.001):
        """
        Optionally center the coord and pick a point within radius.
        """
        if not center:
            return Decimal(str(random.randint(-180000000, 180000000) / 1000000.0)).quantize(Decimal('.000001'))
        else:
            geo = random.uniform(center - radius, center + radius)
            return Decimal(str(geo))

    @classmethod
    def latitude(cls):
        # Latitude has a range of -90 to 90, so divide by two.
        return cls.geo_coordinate() / 2

    @classmethod
    def longitude(cls):
        return cls.geo_coordinate()

########NEW FILE########
__FILENAME__ = color
from faker.providers import BaseProvider

__author__ = 'joke2k'


class Provider(BaseProvider):
    all_colors = {
        "AliceBlue": "#F0F8FF", "AntiqueWhite": "#FAEBD7", "Aqua": "#00FFFF", "Aquamarine": "#7FFFD4",
        "Azure": "#F0FFFF", "Beige": "#F5F5DC", "Bisque": "#FFE4C4", "Black": "#000000", "BlanchedAlmond": "#FFEBCD",
        "Blue": "#0000FF", "BlueViolet": "#8A2BE2", "Brown": "#A52A2A", "BurlyWood": "#DEB887", "CadetBlue": "#5F9EA0",
        "Chartreuse": "#7FFF00", "Chocolate": "#D2691E", "Coral": "#FF7F50", "CornflowerBlue": "#6495ED", "Cornsilk":
        "#FFF8DC", "Crimson": "#DC143C", "Cyan": "#00FFFF", "DarkBlue": "#00008B", "DarkCyan": "#008B8B",
        "DarkGoldenRod": "#B8860B", "DarkGray": "#A9A9A9", "DarkGreen": "#006400", "DarkKhaki": "#BDB76B",
        "DarkMagenta": "#8B008B", "DarkOliveGreen": "#556B2F", "DarkOrange": "#FF8C00", "DarkOrchid": "#9932CC",
        "DarkRed": "#8B0000", "DarkSalmon": "#E9967A", "DarkSeaGreen": "#8FBC8F", "DarkSlateBlue": "#483D8B",
        "DarkSlateGray": "#2F4F4F", "DarkTurquoise": "#00CED1", "DarkViolet": "#9400D3", "DeepPink": "#FF1493",
        "DeepSkyBlue": "#00BFFF", "DimGray": "#696969", "DodgerBlue": "#1E90FF", "FireBrick": "#B22222",
        "FloralWhite": "#FFFAF0", "ForestGreen": "#228B22", "Fuchsia": "#FF00FF", "Gainsboro": "#DCDCDC",
        "GhostWhite": "#F8F8FF", "Gold": "#FFD700", "GoldenRod": "#DAA520", "Gray": "#808080", "Green": "#008000",
        "GreenYellow": "#ADFF2F", "HoneyDew": "#F0FFF0", "HotPink": "#FF69B4", "IndianRed": "#CD5C5C",
        "Indigo": "#4B0082", "Ivory": "#FFFFF0", "Khaki": "#F0E68C", "Lavender": "#E6E6FA", "LavenderBlush": "#FFF0F5",
        "LawnGreen": "#7CFC00", "LemonChiffon": "#FFFACD", "LightBlue": "#ADD8E6", "LightCoral": "#F08080",
        "LightCyan": "#E0FFFF", "LightGoldenRodYellow": "#FAFAD2", "LightGray": "#D3D3D3", "LightGreen": "#90EE90",
        "LightPink": "#FFB6C1", "LightSalmon": "#FFA07A", "LightSeaGreen": "#20B2AA", "LightSkyBlue": "#87CEFA",
        "LightSlateGray": "#778899", "LightSteelBlue": "#B0C4DE", "LightYellow": "#FFFFE0", "Lime": "#00FF00",
        "LimeGreen": "#32CD32", "Linen": "#FAF0E6", "Magenta": "#FF00FF", "Maroon": "#800000",
        "MediumAquaMarine": "#66CDAA", "MediumBlue": "#0000CD", "MediumOrchid": "#BA55D3", "MediumPurple": "#9370DB",
        "MediumSeaGreen": "#3CB371", "MediumSlateBlue": "#7B68EE", "MediumSpringGreen": "#00FA9A",
        "MediumTurquoise": "#48D1CC", "MediumVioletRed": "#C71585", "MidnightBlue": "#191970", "MintCream": "#F5FFFA",
        "MistyRose": "#FFE4E1", "Moccasin": "#FFE4B5", "NavajoWhite": "#FFDEAD", "Navy": "#000080",
        "OldLace": "#FDF5E6", "Olive": "#808000", "OliveDrab": "#6B8E23", "Orange": "#FFA500", "OrangeRed": "#FF4500",
        "Orchid": "#DA70D6", "PaleGoldenRod": "#EEE8AA", "PaleGreen": "#98FB98", "PaleTurquoise": "#AFEEEE",
        "PaleVioletRed": "#DB7093", "PapayaWhip": "#FFEFD5", "PeachPuff": "#FFDAB9", "Peru": "#CD853F",
        "Pink": "#FFC0CB", "Plum": "#DDA0DD", "PowderBlue": "#B0E0E6", "Purple": "#800080", "Red": "#FF0000",
        "RosyBrown": "#BC8F8F", "RoyalBlue": "#4169E1", "SaddleBrown": "#8B4513", "Salmon": "#FA8072",
        "SandyBrown": "#F4A460", "SeaGreen": "#2E8B57", "SeaShell": "#FFF5EE", "Sienna": "#A0522D", "Silver": "#C0C0C0",
        "SkyBlue": "#87CEEB", "SlateBlue": "#6A5ACD", "SlateGray": "#708090", "Snow": "#FFFAFA",
        "SpringGreen": "#00FF7F", "SteelBlue": "#4682B4", "Tan": "#D2B48C", "Teal": "#008080", "Thistle": "#D8BFD8",
        "Tomato": "#FF6347", "Turquoise": "#40E0D0", "Violet": "#EE82EE", "Wheat": "#F5DEB3", "White": "#FFFFFF",
        "WhiteSmoke": "#F5F5F5", "Yellow": "#FFFF00", "YellowGreen": "#9ACD3",
    }

    safe_colors = [
        'black', 'maroon', 'green', 'navy', 'olive',
        'purple', 'teal', 'lime', 'blue', 'silver',
        'gray', 'yellow', 'fuchsia', 'aqua', 'white'
    ]

    @classmethod
    def color_name(cls):
        return cls.random_element(cls.all_colors.keys())

    @classmethod
    def safe_color_name(cls):
        return cls.random_element(cls.safe_colors)

    @classmethod
    def hex_color(cls):
        return "#{0}".format(("%x" % cls.random_int(1, 16777215)).ljust(6, '0'))

    @classmethod
    def safe_hex_color(cls):
        color = ("%x" % cls.random_int(0, 255)).ljust(3, '0')
        return "#{0}{0}{1}{1}{2}{2}".format(*color)

    @classmethod
    def rgb_color_list(cls):
        color = cls.hex_color()
        return (
            int(color[1:3], 16),
            int(color[3:5], 16),
            int(color[5:7], 16),
        )

    @classmethod
    def rgb_color(cls):
        return ','.join(map(str, cls.rgb_color_list()))

    @classmethod
    def rgb_css_color(cls):
        return 'rgb(%s)' % ','.join(map(str, cls.rgb_color_list()))

########NEW FILE########
__FILENAME__ = company
from __future__ import unicode_literals
from . import BaseProvider


class Provider(BaseProvider):
    formats = ['{{last_name}} {{company_suffix}}', ]

    company_suffixes = ['Ltd', ]

    def company(self):
        """
        :example 'Acme Ltd'
        """
        pattern = self.random_element(self.formats)
        return self.generator.parse(pattern)

    @classmethod
    def company_suffix(cls):
        """
        :example 'Ltd'
        """
        return cls.random_element(cls.company_suffixes)

########NEW FILE########
__FILENAME__ = credit_card
from __future__ import unicode_literals
from . import BaseProvider
from .date_time import Provider as DateTimeProvider
import copy
import re


class CreditCard(object):

    valid_characters_pattern = re.compile('^[0-9 ]*$')

    def __init__(self, name, prefixes, length=16, security_code='CVC', security_code_length=3):
        self.name = name
        self.prefixes = prefixes
        self.length = length
        self.security_code = security_code
        self.security_code_length = security_code_length


class Provider(BaseProvider):

    visa_prefix_list = [['4', '5', '3', '9'],
                        ['4', '5', '5', '6'],
                        ['4', '9', '1', '6'],
                        ['4', '5', '3', '2'],
                        ['4', '9', '2', '9'],
                        ['4', '0', '2', '4', '0', '0', '7', '1'],
                        ['4', '4', '8', '6'],
                        ['4', '7', '1', '6'],
                        ['4']]

    mastercard_prefix_list = [['5', '1'],
                              ['5', '2'],
                              ['5', '3'],
                              ['5', '4'],
                              ['5', '5']]

    amex_prefix_list = [['3', '4'],
                        ['3', '7']]

    discover_prefix_list = [['6', '0', '1', '1']]

    diners_prefix_list = [['3', '0', '0'],
                          ['3', '0', '1'],
                          ['3', '0', '2'],
                          ['3', '0', '3'],
                          ['3', '6'],
                          ['3', '8']]

    enroute_prefix_list = [['2', '0', '1', '4'],
                           ['2', '1', '4', '9']]

    jcb16_prefix_list = [['3', '0', '8', '8'],
                         ['3', '0', '9', '6'],
                         ['3', '1', '1', '2'],
                         ['3', '1', '5', '8'],
                         ['3', '3', '3', '7'],
                         ['3', '5', '2', '8']]

    jcb15_prefix_list = [['2', '1', '0', '0'],
                         ['1', '8', '0', '0']]

    voyager_prefix_list = [['8', '6', '9', '9']]

    credit_card_types = {
        'mastercard':   CreditCard('Mastercard',        mastercard_prefix_list, 16, 'CVV', 4),
        'visa16':       CreditCard('VISA 16 digit',     visa_prefix_list),
        'visa13':       CreditCard('VISA 13 digit',     visa_prefix_list, 13),
        'amex':         CreditCard('American Express',  amex_prefix_list, 15),
        'discover':     CreditCard('Discover',          discover_prefix_list),
        'diners':       CreditCard('Diners Club / Carte Blanche', diners_prefix_list, 14),
        'enroute':      CreditCard('enRoute',           enroute_prefix_list, 15),
        'jcb15':        CreditCard('JCB 15 digit',      jcb16_prefix_list, 15),
        'jcb16':        CreditCard('JCB 16 digit',      jcb15_prefix_list),
        'voyager':      CreditCard('Voyager',           voyager_prefix_list, 15),
    }
    credit_card_types['visa'] = credit_card_types['visa16']
    credit_card_types['jcb'] = credit_card_types['jcb16']

    @classmethod
    def credit_card_provider(cls, card_type=None):
        if card_type is None:
            card_type = cls.random_element(cls.credit_card_types.keys())
        return cls._credit_card_type(card_type).name

    @classmethod
    def credit_card_number(cls, card_type=None, validate=False, max_check=10):
        card = cls._credit_card_type(card_type)
        number = ''
        for i in range(0, max_check):
            number = cls._generate_number(cls.random_element(card.prefixes), card.length)
            if not validate or cls._validate_credit_card_number(card, number):
                break
        return number

    @classmethod
    def credit_card_expire(cls, start='now', end='+10y', date_format='%m/%y'):
        expire_date = DateTimeProvider.date_time_between(start, end)
        return expire_date.strftime(date_format)

    def credit_card_full(self, card_type=None, validate=False, max_check=10):
        card = self._credit_card_type(card_type)
        template = """
{provider}
{owner}
{number}  {expire_date}
{security}: {security_nb}""".format(
            provider=card.name,
            owner=self.generator.parse("{{first_name}} {{last_name}}"),
            number=self.credit_card_number(card, validate, max_check),
            expire_date=self.credit_card_expire(),
            security=card.security_code,
            security_nb=self.credit_card_security_code(card)
        )
        return self.generator.parse(template)

    @classmethod
    def credit_card_security_code(cls, card_type=None):
        return cls.random_number(cls._credit_card_type(card_type).security_code_length)

    @classmethod
    def _credit_card_type(cls, card_type=None):
        """returns a random credit card type instance"""
        if card_type is None:
            card_type = cls.random_element(cls.credit_card_types.keys())
        elif isinstance(card_type, CreditCard):
            return card_type
        return cls.credit_card_types[card_type]

    @classmethod
    def _generate_number(cls, prefix, length):
        """
        'prefix' is the start of the CC number as a string, any number of digits.
        'length' is the length of the CC number to generate. Typically 13 or 16
        """
        # add list() to copy prefixes
        number = list(prefix)
        # generate digits
        while len(number) < (length - 1):
            number.append(str(cls.random_digit()))

        # Calculate sum
        tot = 0
        pos = 0

        reversed_number = []
        reversed_number.extend(number)
        reversed_number.reverse()

        while pos < length - 1:
            odd = int(reversed_number[pos]) * 2
            if odd > 9:
                odd -= 9
            tot += odd
            if pos != (length - 2):
                tot += int(reversed_number[pos+1])
            pos += 2
        # Calculate check digit
        check_digit = ((tot / 10 + 1) * 10 - tot) % 10
        number.append(str(check_digit))
        return ''.join(number)

    @classmethod
    def _validate_credit_card_number(cls, card, number):
        if card.valid_characters_pattern.match(number) is not None:
            return cls._validate_luhn_checksum(number)
        return False

    @staticmethod
    def _validate_luhn_checksum(number_as_string):
        """ checks to make sure that the card passes a luhn mod-10 checksum """

        number = 0
        num_digits = len(number_as_string)
        odd_even = num_digits & 1

        for i in range(0, num_digits):
            digit = int(number_as_string[i])

            if not ((i & 1) ^ odd_even):
                digit *= 2
            if digit > 9:
                digit -= 9
            number += digit
        return (number % 10) == 0

########NEW FILE########
__FILENAME__ = address
# coding=utf-8
from __future__ import unicode_literals
from ..address import Provider as AddressProvider


class Provider(AddressProvider):

    city_formats = ('{{city_name}}', )

    street_name_formats = ('{{street_name}}', )
    street_address_formats = ('{{street_name}} {{building_number}}', )
    address_formats = ('{{street_address}}\n{{postcode}} {{city}}', )

    building_number_formats = ('###', '##', '#', '#/#')

    street_suffixes_long = ('náměstí', )
    street_suffixes_short = ('nám.', )

    postcode_formats = ('### ##', )

    cities = (
        'Abertamy', 'Adamov', 'Andělská Hora', 'Bakov nad Jizerou', 'Bavorov', 'Bechyně', 'Benešov nad Ploučnicí', 
        'Benátky nad Jizerou', 'Bezdružice', 'Bečov nad Teplou', 'Blatná', 'Blovice', 'Blšany', 'Bochov', 
        'Bohušovice nad Ohří', 'Bojkovice', 'Bor', 'Borohrádek', 'Borovany', 'Boží Dar', 'Brandýs nad Orlicí', 'Brno', 
        'Broumov', 'Brtnice', 'Brumov-Bylnice', 'Brušperk', 'Budišov nad Budišovkou', 'Budyně nad Ohří', 'Bučovice', 
        'Buštěhrad', 'Bystré', 'Bystřice', 'Bystřice nad Pernštejnem', 'Bystřice pod Hostýnem', 'Bzenec', 'Bílovec', 
        'Bělá nad Radbuzou', 'Bělá pod Bezdězem', 'Březnice', 'Březová', 'Březová nad Svitavou', 'Břidličná', 
        'Chabařovice', 'Chlumec', 'Chlumec nad Cidlinou', 'Choceň', 'Chomutov', 'Chotěboř', 'Chrast', 'Chrastava', 
        'Chropyně', 'Chvaletice', 'Chyše', 'Chýnov', 'Chřibská', 'Cvikov', 'Dačice', 'Dašice', 'Desná', 'Deštná', 
        'Dobrovice', 'Dobruška', 'Dobřany', 'Dobřichovice', 'Dobříš', 'Doksy', 'Dolní Benešov', 'Dolní Bousov', 
        'Dolní Kounice', 'Dolní Poustevna', 'Dubá', 'Dubí', 'Dubňany', 'Duchcov', 'Děčín', 'Františkovy Lázně', 
        'Fryšták', 'Frýdek-Místek', 'Frýdlant', 'Frýdlant nad Ostravicí', 'Fulnek', 'Golčův Jeníkov', 'Habartov', 
        'Habry', 'Hanušovice', 'Harrachov', 'Hartmanice', 'Havířov', 'Hejnice', 'Heřmanův Městec', 'Hlinsko', 
        'Hluboká nad Vltavou', 'Hluk', 'Hodkovice nad Mohelkou', 'Holice', 'Holýšov', 'Hora Svaté Kateřiny', 'Horažďovice', 
        'Horní Benešov', 'Horní Blatná', 'Horní Bříza', 'Horní Cerekev', 'Horní Jelení', 'Horní Jiřetín', 'Horní Planá', 
        'Horní Slavkov', 'Horšovský Týn', 'Hostinné', 'Hostivice', 'Hostomice', 'Hostouň', 'Hořice', 'Hořovice', 'Hoštka', 
        'Hradec Králové', 'Hradec nad Moravicí', 'Hranice (okres Cheb)', 'Hrob', 'Hrochův Týnec', 'Hronov', 'Hrotovice', 
        'Hroznětín', 'Hrušovany nad Jevišovkou', 'Hrádek', 'Hrádek nad Nisou', 'Hulín', 'Husinec', 'Hustopeče', 
        'Ivanovice na Hané', 'Ivančice', 'Jablonec nad Jizerou', 'Jablonec nad Nisou', 'Jablonné nad Orlicí', 
        'Jablonné v Podještědí', 'Jablunkov', 'Janov', 'Janovice nad Úhlavou', 'Janské Lázně', 'Jaroměřice nad Rokytnou', 
        'Javorník', 'Jemnice', 'Jesenice (okres Rakovník)', 'Jevišovice', 'Jevíčko', 'Jihlava', 'Jilemnice', 'Jistebnice', 
        'Jiříkov', 'Jáchymov', 'Jílové', 'Jílové u Prahy', 'Kamenice nad Lipou', 'Kamenický Šenov', 'Kaplice', 'Kardašova Řečice', 
        'Karlovy Vary', 'Karolinka', 'Karviná', 'Kasejovice', 'Kaznějov', 'Kašperské Hory', 'Kdyně', 'Kelč', 'Kladno', 'Kladruby', 
        'Klecany', 'Klimkovice', 'Klobouky u Brna', 'Kojetín', 'Konice', 'Kopidlno', 'Koryčany', 'Kosmonosy', 
        'Kostelec na Hané', 'Kostelec nad Labem', 'Kostelec nad Orlicí', 'Kostelec nad Černými lesy', 'Kouřim', 'Košťany', 
        'Kožlany', 'Kralovice', 'Kraslice', 'Kravaře', 'Kryry', 'Králíky', 'Králův Dvůr', 'Krásno', 'Krásná Hora nad Vltavou', 
        'Krásná Lípa', 'Krásné Údolí', 'Kunovice', 'Kunštát', 'Kynšperk nad Ohří', 'Lanžhot', 'Ledeč nad Sázavou', 'Ledvice', 
        'Letohrad', 'Letovice', 'Liberec', 'Libochovice', 'Libušín', 'Libáň', 'Libčice nad Vltavou', 'Liběchov', 'Lipník nad Bečvou', 
        'Litovel', 'Lišov', 'Loket', 'Lom', 'Lomnice nad Lužnicí', 'Lomnice nad Popelkou', 'Loučná pod Klínovcem', 
        'Lovosice', 'Loštice', 'Luby', 'Luhačovice', 'Lučany nad Nisou', 'Luže', 'Lysá nad Labem', 'Lázně Bohdaneč', 'Lázně Bělohrad', 
        'Lázně Kynžvart', 'Manětín', 'Mašťov', 'Meziboří', 'Meziměstí', 'Mikulov', 'Mikulášovice', 'Miletín', 'Milevsko', 
        'Milovice', 'Mimoň', 'Miroslav', 'Mirotice', 'Mirovice', 'Mirošov', 'Mladá Boleslav', 'Mladá Vožice', 'Mnichovice', 
        'Mnichovo Hradiště', 'Mníšek pod Brdy', 'Modřice', 'Mohelnice', 'Moravské Budějovice', 'Moravský Beroun', 'Moravský Krumlov', 
        'Morkovice-Slížany', 'Most', 'Mýto', 'Městec Králové', 'Město Albrechtice', 'Město Touškov', 'Měčín', 'Mšeno', 'Nalžovské Hory', 
        'Napajedla', 'Nasavrky', 'Nechanice', 'Nejdek', 'Nepomuk', 'Netolice', 'Neveklov', 'Nová Bystřice', 'Nová Paka', 
        'Nová Role', 'Nová Včelnice', 'Nové Hrady', 'Nové Město nad Metují', 'Nové Město pod Smrkem', 'Nové Sedlo', 
        'Nové Strašecí', 'Nový Bydžov', 'Nový Knín', 'Náměšť nad Oslavou', 'Nýrsko', 'Nýřany', 'Němčice nad Hanou', 
        'Odolena Voda', 'Odry', 'Olešnice', 'Olomouc', 'Oloví', 'Opava', 'Opočno', 'Osek', 'Osečná', 'Oslavany', 'Ostrava', 
        'Pacov', 'Pardubice', 'Paskov', 'Pec pod Sněžkou', 'Petřvald', 'Pečky', 'Pilníkov', 'Planá', 'Planá nad Lužnicí', 'Plasy', 
        'Plesná', 'Plumlov', 'Plzeň', 'Plánice', 'Poběžovice', 'Podbořany', 'Podivín', 'Pohořelice', 'Police nad Metují', 
        'Polička', 'Polná', 'Postoloprty', 'Potštát', 'Počátky', 'Praha', 'Proseč', 'Prostějov', 'Protivín', 'Pyšely', 
        'Přebuz', 'Přelouč', 'Přerov', 'Přeštice', 'Přibyslav', 'Přimda', 'Příbor', 'Rabí', 'Radnice', 'Rajhrad', 'Ralsko', 
        'Raspenava', 'Rejštejn', 'Rokytnice nad Jizerou', 'Rokytnice v Orlických horách', 'Ronov nad Doubravou', 'Rosice', 
        'Rotava', 'Rousínov', 'Rovensko pod Troskami', 'Roztoky', 'Rožmberk nad Vltavou', 'Rožmitál pod Třemšínem', 'Rožďalovice', 
        'Rtyně v Podkrkonoší', 'Rudná', 'Rudolfov', 'Rychnov u Jablonce nad Nisou', 'Rychvald', 'Rájec-Jestřebí', 'Rýmařov', 
        'Sadská', 'Sedlec-Prčice', 'Sedlice', 'Sedlčany', 'Semily', 'Sezemice', 'Sezimovo Ústí', 'Seč', 'Skalná', 'Skuteč', 
        'Slatiňany', 'Slavičín', 'Slavkov u Brna', 'Slavonice', 'Slušovice', 'Smečno', 'Smiřice', 'Smržovka', 'Sobotka', 
        'Soběslav', 'Solnice', 'Spálené Poříčí', 'Staré Město (okres Uherské Hradiště)', 'Staré Město (okres Šumperk)', 
        'Starý Plzenec', 'Staňkov', 'Stochov', 'Stod', 'Strmilov', 'Stráž nad Nežárkou', 'Stráž pod Ralskem', 'Strážnice', 
        'Strážov', 'Studénka', 'Stárkov', 'Stříbro', 'Suchdol nad Lužnicí', 'Svoboda nad Úpou', 'Svratka', 'Světlá nad Sázavou', 
        'Sázava', 'Tanvald', 'Telč', 'Teplice', 'Teplice nad Metují', 'Teplá', 'Terezín', 'Tišnov', 'Toužim', 'Tovačov', 'Trhové Sviny', 
        'Trhový Štěpánov', 'Trmice', 'Týn nad Vltavou', 'Týnec nad Labem', 'Týnec nad Sázavou', 'Týniště nad Orlicí', 'Třebechovice pod Orebem', 
        'Třebenice', 'Třeboň', 'Třemošnice', 'Třemošná', 'Třešť', 'Uherský Ostroh', 'Uhlířské Janovice', 'Unhošť', 
        'Valašské Klobouky', 'Valtice', 'Vamberk', 'Vejprty', 'Velešín', 'Velká Bystřice', 'Velká Bíteš', 'Velké Bílovice', 
        'Velké Hamry', 'Velké Opatovice', 'Velké Pavlovice', 'Velký Šenov', 'Veltrusy', 'Velvary', 'Verneřice', 'Veselí nad Lužnicí', 
        'Vidnava', 'Vimperk', 'Vizovice', 'Vlachovo Březí', 'Vodňany', 'Volary', 'Volyně', 'Votice', 'Vracov', 'Vratimov', 'Vrbno pod Pradědem', 
        'Vroutek', 'Vysoké Veselí', 'Vysoké nad Jizerou', 'Vyšší Brod', 'Vítkov', 'Výsluní', 'Všeruby', 'Zbiroh', 'Zbýšov', 'Zdice', 'Zlaté Hory', 
        'Zliv', 'Zlín', 'Zruč nad Sázavou', 'Zubří', 'Zákupy', 'Zásmuky', 'Újezd u Brna', 'Úpice', 'Úsov', 'Ústí nad Labem', 
        'Úterý', 'Úvaly', 'Úštěk', 'Černovice', 'Černošice', 'Černošín', 'Červená Řečice', 'Červený Kostelec', 'Česká Kamenice', 'Česká Skalice', 
        'České Budějovice', 'České Velenice', 'Český Brod', 'Český Dub', 'Řevnice', 'Šenov', 'Šlapanice', 'Šluknov', 'Špindlerův Mlýn', 'Štramberk', 
        'Štíty', 'Štětí', 'Švihov', 'Žacléř', 'Žamberk', 'Žandov', 'Ždánice', 'Ždírec nad Doubravou', 'Žebrák', 'Železnice', 'Železná Ruda', 'Železný Brod', 
        'Židlochovice', 'Žirovnice', 'Žlutice', 'Žulová'
    )

    streets = (
        'Horní Stromky', 'Vizovická', 'K Brusce', 'Mírová', 'Rašínská', 'Boušova', 'Pobřežní', 'Dolnobřežanská', 'Černá', 
        'Šůrova', 'Červenkova', 'Nad Mostem', 'Libuňská', 'Chotovická', 'Petříkova', 'Pod Vodárenskou Věží', 'Na Fišerce', 
        'Ke Březině', 'Za Lázeňkou', 'Nad Šafránkou', 'Na Laurové', 'Nám. Republiky', 'Vlašimská', 'Nad Rohatci', 'Tylišovská', 
        'Nábřeží Kapitána Jaroše', 'Lešovská', 'U Podjezdu', 'Průškova', 'Estonská', 'Máslova', 'K Otočce', 'Jižní', 'Švecova', 
        'Mongolská', 'Kalská', 'Nad Rokytkou', 'Malešovská', 'Plzeňská', 'V Hájkách', 'Úpská', 'Ambrožova', 'Pikovická', 
        'Neužilova', 'Na Staré Vinici', 'Vstupní', 'Nýdecká', 'U Společenské Zahrady', 'Ostrovského', 'Bazovského', 'Lešenská', 
        'Na Štamberku', 'Na Svahu', 'Výhledské Nám.', 'K Lipám', 'Za Stadionem', 'Opletalova', 'Nábřeží Ludvíka Svobody', 'Komenského Nám.', 
        'Křimická', 'Domkovská', 'Pyšelská', 'Štychova', 'Horákova', 'Nad Zavážkou', 'K Prelátům', 'Vašátkova', 'Benákova', 'Náměstí Prezidenta Masaryka', 
        'Mílovská', 'U Hostivařského Nádraží', 'Jihovýchodní I', 'Hostivařské Nám.', 'Zbynická', 'Heineho', 'U Dobešky', 
        'Doubická', 'Ke Břvům', 'Na Záhonech', 'Kloboukova', 'Kostnické Náměstí', 'Pelclova', 'Smotlachova', 'Pod Spiritkou', 
        'Hůlkova', 'Matenská', 'Do Zahrádek Ii', 'Dobrošovská', 'Lovčenská', 'Jasná I', 'Škrétova', 'Moravanů', 'Budapešťská', 
        'Kojetická', 'Náměstí I. P. Pavlova', 'Bajkalská', 'U Větrolamu', 'Vlčická', 'Jarešova', 'Sámova', 'Kotrčová', 'Musílkova', 'Ingrišova', 
        'U Nových Domů I', 'Dělostřelecká', 'Ke Hrázi', 'Mochovská', 'Rýmařovská', 'Dolní Chaloupky', 'Za Arielem', 'U Rajské Zahrady', 'K Šedivce', 
        'Březová', 'Doubravínova', 'Mládkova', 'Tachovské Náměstí', 'Lehárova', 'Severní X', 'V Tehovičkách', 'Bermanova', 'Grammova', 'Spojovací', 'Verdunská', 
        'Závrchy', 'Čerpadlová', 'Vítězná', 'Nad Plynovodem', 'U Smíchovského Hřbitova', 'Nedvědovo Náměstí', 'Bachova', 'U Dálnice', 'Všejanská', 'Maňákova', 'Rokytnická', 
        'Loděnická', 'U Pumpy', 'Michnova', 'Záblatská', 'Poslední', 'Hněvkovského', 'Za Křížem', 'Nad Návsí', 'Jablonecká', 'Súdánská', 'Mazancova', 'Pod Čertovou Skalou', 
        'Weilova', 'Čajkovského', 'Nad Zátiším', 'Moldavská', 'Juarézova', 'Žižkova', 'Pod Lochkovem', 'Nad Vernerákem', 'Žherská', 'Prusíkova', 'Výtoňská', 'Na Srážku', 
        'Šachovská', 'Nučická', 'Novákovo Náměstí', 'Sitteho', 'U Vápenice', 'Na Kuthence', 'Čelakovského Sady', 'V Závitu', 'Na Vartě', 'Oválová', 'Machovická', 
        'Nad Olšinami', 'Vajgarská', 'Kulhavého', 'Kodaňská', 'Kralupská', 'Lednická', 'Pod Velkým Hájem', 'Hvězdonická', 'Na Kozinci', 'Semická', 'K Dálnici', 
        'Trytova', 'Vyhlídkova', 'Pohnertova', 'U Nového Dvora', 'K Vodě', 'Nad Libří', 'K Matěji', 'V Kotcích', 'Kohoutových', 'Na Cikánce', 'Chládkova', 
        'Slatiňanská', 'Pod Kostelem', 'Na Spojce', 'Na Zahrádkách', 'Nad Obcí', 'K Přehradám', 'Na Náspu', 'V Nížinách', 'Josefa Houdka', 
        'Na Pěšině', 'Hnězdenská', 'Za Statky', 'Kremnická', 'Čestmírova', 'U Rakovky', 'Kodicilova', 'K Lučinám', 'Nouzov', 'Krátký Lán', 
        'Anny Drabíkové', 'Kadaňská', 'Stroupežnického', 'Jírova', 'U Dětského Hřiště', 'Žofie Podlipské', 'Nad Šancemi', 'Lošáková', 
        'Roblínská', 'Mezi Sklady', 'Na Pomezí', 'U Mlýnského Rybníka', 'Makedonská', 'K Dýmači', 'V Zátiší', 'Pohořelec', 
        'Jiřinková', 'U Nové Dálnice', 'Čuprova', 'Vraňanská', 'Severovýchodní Vi', 'Petřínská', 'K Hořavce', 'Sádovská', 'Pod Průsekem', 
        'Konžská', 'Dřítenská', 'Pirinská', 'U Hřiště', 'Kukelská', 'Moravanská', 'Koclířova', 'Žilinská', 'Ve Žlíbku', 'Veronské Nám.', 
        'U Větrníku', 'Svojsíkova', 'Izraelská', 'Staňkovka', 'Na Viničních Horách', 'Čankovská', 'Na Špitálce', 'Valdovská', 'Rudoltická', 
        'Ke Strašnické', 'Paťanka', 'Panuškova', 'Pankrácké Nám.', 'Budčická', 'Šermířská', 'Medlovská', 'K Vidouli', 'Horní Chaloupky', 'V Americe', 
        'Dejvická', 'Klášterecká', 'Šárovo Kolo', 'Mladoboleslavská', 'Palackého', 'Lumiérů', 'Ivančická', 'Za Valem', 'Na Břevnovské Pláni', 
        'Tichonická', 'Náměstí Hrdinů', 'Mistřínská', 'Křížkovského', 'Tanvaldská', 'V Padolině', 'Před Skalkami Ii', 'Na Křivce', 
        'Nad Zámečkem', 'Nad Krocínkou', 'Podlešínská', 'Nad Popelkou', 'Oderská', 'Jeruzalémská', 'Smolenská', 'Lebeděvova', 'Libichovská', 
        'Na Šafránce', 'Průjezdná', 'Záluské', 'Branišovská', 'Spinozova', 'K Betáni', 'Machuldova', 'Podohradská', 'Cerhenická', 'V Brůdku', 
        'U Vlachovky', 'Pod Letištěm', 'Vlastislavova', 'Klecanská', 'Žinkovská', 'Maltézské Náměstí', 'Boršov', 'Mukařovského', 
        'Josefa Šimůnka', 'Suchdolská', 'Opočínská', 'Heydukova', 'Vršovka', 'Thurnova', 'Mezilesní', 'Za Pivovarem', 'Uljanovská', 'Panenská', 
        'Sladovnická', 'Plynární', 'Kozácká', 'Vlasákova', 'Javornická', 'Ševčíkova', 'Podle Náhonu', 'Doubravická', 'Františka Černého', 
        'Chotětovská', 'K Háječku', 'Pod Výšinkou', 'U Šesté Baterie', 'Drahanská', 'Augustova', 'U Balabenky', 'Boční I', 'Jirčanská', 
        'Na Šubě', 'Brixiho', 'Klímova', 'Kazín', 'Fügnerovo Náměstí', 'Na Příčné Mezi', 'Plánická', 'Africká', 'Vratislavova', 'Olympijská', 
        'Na Bojišti', 'K Nádrži', 'Vokrojova', 'Bořetínská', 'Kováříkova', 'Lánovská', 'U Staré Pošty', 'Na Poustkách', 'V Poli', 'Meziškolská',  
        'Pajerova', 'Habartovská', 'Mlékárenská', 'Dělnická', 'U Štěpu', 'Družná', 'Klouzková', 'Před Rybníkem', 'Nad Košinkou', 'Spolupráce', 
        'V Humenci', 'Adélčina', 'Březanova', 'Pod Kesnerkou', 'Kosmonoská', 'Do Dubin', 'Nad Lávkou', 'Mezi Lysinami', 'Na Topolce', 'Snopkova', 
        'Severní Viii', 'Okrová', 'Třebihošťská', 'Mádrova', 'Na Lázeňce', 'Slivenecká', 'Nám. Barikád', 'Nad Strouhou', 'Jindřicha Plachty', 
        'Pod Srázem', 'U Waltrovky', 'Bratří Čapků', 'Onšovecká', 'Machnova', 'Kostková', 'Rožmberská', 'Zapských', 'Přípřežní', 'Výravská', 
        'Podléšková', 'Štěchovická', 'Poleradská', 'Jilmová', 'Hostýnská'
    )

    states = (
        'Hlavní město Praha',
        'Středočeský kraj',
        'Jihočeský kraj',
        'Plzeňský kraj',
        'Karlovarský kraj',
        'Ústecký kraj',
        'Liberecký kraj',
        'Královéhradecký kraj',
        'Pardubický kraj',
        'Kraj Vysočina',
        'Jihomoravský kraj',
        'Olomoucký kraj',
        'Moravskoslezský kraj',
        'Zlínský kraj',
    )

    countries = (
        'Afghánistán', 'Albánie', 'Alžírsko', 'Andorra', 'Angola', 'Antigua a Barbuda', 'Argentina', 'Arménie', 'Austrálie', 
        'Bahamy', 'Bahrajn', 'Bangladéš', 'Barbados', 'Belgie', 'Belize', 'Benin', 'Bhútán', 'Bolívie', 'Bosna a Hercegovina', 
        'Botswana', 'Brazílie', 'Brunej', 'Bulharsko', 'Burkina Faso', 'Burundi', 'Bělorusko', 'Chile', 'Chorvatsko', 
        'Cookovy ostrovy', 'Demokratická republika Kongo', 'Dominika', 'Dominikánská republika', 'Dánsko', 'Džibutsko', 
        'Egypt', 'Ekvádor', 'Eritrea', 'Estonsko', 'Etiopie', 'Federativní státy Mikronésie', 'Fidži', 'Filipíny', 'Finsko', 
        'Francie', 'Gabon', 'Gambie', 'Ghana', 'Gruzie', 'Guatemala', 'Guinea', 'Guinea-Bissau', 'Guyana', 'Haiti', 'Honduras', 
        'Indie', 'Irsko', 'Irák', 'Island', 'Itálie', 'Izrael', 'Jamajka', 'Japonsko', 'Jemen', 'Jihoafrická republika', 
        'Jižní Súdán', 'Jordánsko', 'Kambodža', 'Kamerun', 'Kanada', 'Kapverdy', 'Katar', 'Kazachstán', 'Keňa', 'Kiribati', 
        'Kolumbie', 'Kostarika', 'Kuba', 'Kypr', 'Kyrgyzstán', 'Laos', 'Lesotho', 'Libanon', 'Libye', 'Lichtenštejnsko', 
        'Litva', 'Lotyšsko', 'Lucembursko', 'Madagaskar', 'Makedonie', 'Malajsie', 'Malawi', 'Maledivy', 'Mali', 'Malta', 
        'Maroko', 'Marshallovy ostrovy', 'Mauricius', 'Mauritánie', 'Maďarsko', 'Mexiko', 'Moldavsko', 'Monako', 'Mongolsko', 
        'Mosambik', 'Myanmar', 'Namibie', 'Nauru', 'Nepál', 'Niger', 'Nigérie', 'Nikaragua', 'Niue', 'Nizozemsko', 'Norsko', 
        'Nový Zéland', 'Německo', 'Omán', 'Palau', 'Panama', 'Papua-Nová Guinea', 'Paraguay', 'Peru', 'Pobřeží slonoviny', 
        'Polsko', 'Portugalsko', 'Pákistán', 'Rakousko', 'Republika Kongo', 'Rovníková Guinea', 'Rumunsko', 'Rusko', 
        'Rwanda', 'Salvador', 'Samoa', 'San Marino', 'Saúdská Arábie', 'Senegal', 'Severní Korea', 'Seychely', 'Sierra Leone', 
        'Singapur', 'Slovensko', 'Slovinsko', 'Somálsko', 'Spojené arabské emiráty', 'Spojené království', 'Spojené státy americké', 
        'Srbsko', 'Středoafrická republika', 'Surinam', 'Svatá Lucie', 'Svatý Kryštof a Nevis', 'Svatý Tomáš a Princův ostrov', 
        'Svatý Vincenc a Grenadiny', 'Svazijsko', 'Súdán', 'Sýrie', 'Tanzanie', 'Thajsko', 'Togo', 'Tonga', 'Trinidad a Tobago', 
        'Tunisko', 'Turecko', 'Turkmenistán', 'Tuvalu', 'Tádžikistán', 'Uganda', 'Ukrajina', 'Uruguay', 'Uzbekistán', 'Vanuatu', 
        'Vatikán', 'Venezuela', 'Vietnam', 'Východní Timor', 'Zambie', 'Zimbabwe', 'Ázerbájdžán', 'Írán', 'Čad', 'Černá Hora', 
        'Česko', 'Čína', 'Řecko', 'Šalamounovy ostrovy', 'Španělsko', 'Srí Lanka', 'Švédsko', 'Švýcarsko'
    )

    @classmethod
    def street_suffix_short(cls):
        return cls.random_element(cls.street_suffixes_short)

    @classmethod
    def street_suffix_long(cls):
        return cls.random_element(cls.street_suffixes_long)

    @classmethod
    def city_name(cls):
        return cls.random_element(cls.cities)

    @classmethod
    def street_name(cls):
        return cls.random_element(cls.streets)

    @classmethod
    def state(cls):
        return cls.random_element(cls.states)

########NEW FILE########
__FILENAME__ = company
from __future__ import unicode_literals
from ..company import Provider as CompanyProvider


class Provider(CompanyProvider):
    formats = (
        '{{last_name}} {{company_suffix}}',
        '{{last_name}} {{last_name}} {{company_suffix}}',
        '{{last_name}}',
    )

    company_suffixes = (
        's.r.o.', 'o.s.', 'a.s.',
    )

########NEW FILE########
__FILENAME__ = internet
# coding=utf-8
from __future__ import unicode_literals
from ..internet import Provider as InternetProvider

import re


class Provider(InternetProvider):

    user_name_formats = (
        '{{last_name_female}}.{{first_name_female}}',
        '{{last_name_female}}.{{first_name_female}}',
        '{{last_name_male}}.{{first_name_male}}',
        '{{last_name_male}}.{{first_name_male}}',
        '{{first_name_female}}.{{last_name_female}}',
        '{{first_name_male}}.{{last_name_male}}',
        '{{first_name}}##',
        '?{{last_name}}',
        '?{{last_name}}',
        '?{{last_name}}',
    )

    email_formats = ('{{user_name}}@{{free_email_domain}}', )

    free_email_domains = (
        'seznam.cz', 'gmail.com', 'email.cz', 'post.cz', 'chello.cz', 'centrum.cz', 'volny.cz',
    )

    tlds = ('cz', 'com', 'cz')

    @staticmethod
    def _to_ascii(string):
        replacements = (
            ('á', 'a'), ('Á', 'A'),
            ('č', 'c'), ('Č', 'C'),
            ('ď', 'd'), ('Ď', 'D'),
            ('é', 'e'), ('É', 'E'),
            ('ě', 'e'), ('Ě', 'E'),
            ('í', 'i'), ('Í', 'I'),
            ('ň', 'n'), ('Ň', 'N'),
            ('ď', 'd'), ('Ď', 'D'),
            ('ť', 't'), ('Ť', 'T'),
            ('ó', 'o'), ('Ó', 'O'),
            ('ř', 'r'), ('Ř', 'R'),
            ('š', 's'), ('Š', 'S'),
            ('ť', 't'), ('Ť', 'T'),
            ('ú', 'u'), ('Ú', 'U'),
            ('ů', 'u'), ('Ů', 'U'),
            ('ý', 'y'), ('Ý', 'Y'),
            ('ž', 'z'), ('Ž', 'Z'),
        )
        for search, replace in replacements:
            string = string.replace(search, replace)

        return string

    def user_name(self):
        pattern = self.random_element(self.user_name_formats)
        return self._to_ascii(
            self.bothify(self.generator.parse(pattern)
        ).lower())

    def domain_word(self):
        company = self.generator.format('company')
        company_elements = company.split(' ')
        company = self._to_ascii(company_elements.pop(0))
        return re.sub(r'\W', '', company).lower()

########NEW FILE########
__FILENAME__ = person
# coding=utf-8
from __future__ import unicode_literals
from ..person import Provider as PersonProvider


class Provider(PersonProvider):
    formats = (
        '{{first_name_male}} {{last_name_male}}',
        '{{first_name_male}} {{last_name_male}}',
        '{{first_name_male}} {{last_name_male}}',
        '{{first_name_male}} {{last_name_male}}',
        '{{first_name_male}} {{last_name_male}}',
        '{{first_name_female}} {{last_name_female}}',
        '{{first_name_female}} {{last_name_female}}',
        '{{first_name_female}} {{last_name_female}}',
        '{{first_name_female}} {{last_name_female}}',
        '{{first_name_female}} {{last_name_female}}',
        '{{prefix_male}} {{first_name_male}} {{last_name_male}}',
        '{{prefix_female}} {{first_name_female}} {{last_name_female}}',
        '{{first_name_male}} {{last_name_male}} {{suffix}}',
        '{{first_name_female}} {{last_name_female}} {{suffix}}',
        '{{prefix_male}} {{first_name_male}} {{last_name_male}} {{suffix}}',
        '{{prefix_female}} {{first_name_female}} {{last_name_female}} {{suffix}}'
    )


    first_names_male = (
        'Adam', 'Alexander', 'Alexandr', 'Aleš', 'Alois', 'Antonín', 'Arnošt', 'Bedřich', 'Bohumil', 'Bohumír', 
        'Bohuslav', 'Břetislav', 'Dalibor', 'Daniel', 'David', 'Denis', 'Dominik', 'Dušan', 'Eduard', 'Emil', 
        'Erik', 'Filip', 'František', 'Hynek', 'Igor', 'Ivan', 'Ivo', 'Jakub', 'Jan', 'Jaromír', 'Jaroslav', 
        'Jindřich', 'Jiří', 'Josef', 'Jozef', 'Ján', 'Kamil', 'Karel', 'Kryštof', 'Ladislav', 'Leoš', 'Libor', 
        'Lubomír', 'Luboš', 'Ludvík', 'Luděk', 'Lukáš', 'Marcel', 'Marek', 'Marian', 'Martin', 'Matyáš', 'Matěj', 
        'Michael', 'Michal', 'Milan', 'Miloslav', 'Miloš', 'Miroslav', 'Oldřich', 'Ondřej', 'Otakar', 'Patrik', 'Pavel', 
        'Peter', 'Petr', 'Přemysl', 'Radek', 'Radim', 'Radomír', 'Radovan', 'René', 'Richard', 'Robert', 'Robin', 'Roman', 
        'Rostislav', 'Rudolf', 'Samuel', 'Stanislav', 'Tadeáš', 'Tomáš', 'Vasyl', 'Viktor', 'Vilém', 'Vladimír', 'Vladislav', 
        'Vlastimil', 'Vojtěch', 'Vratislav', 'Václav', 'Vít', 'Vítězslav', 'Zbyněk', 'Zdeněk', 'Šimon', 'Štefan', 'Štěpán'
    )

    first_names_female = (
        'Adéla', 'Alena', 'Alexandra', 'Alice', 'Alžběta', 'Andrea', 'Aneta', 'Anežka', 'Anna', 'Barbora', 'Blanka', 'Blažena', 
        'Bohumila', 'Božena', 'Dagmar', 'Dana', 'Daniela', 'Danuše', 'Denisa', 'Dominika', 'Drahomíra', 'Eliška', 'Emilie', 
        'Eva', 'Františka', 'Gabriela', 'Hana', 'Helena', 'Ilona', 'Irena', 'Iva', 'Ivana', 'Iveta', 'Jana', 'Jarmila', 
        'Jaroslava', 'Jindřiška', 'Jitka', 'Jiřina', 'Julie', 'Kamila', 'Karolína', 'Kateřina', 'Klára', 'Kristina', 'Kristýna', 
        'Květa', 'Květoslava', 'Ladislava', 'Lenka', 'Libuše', 'Lucie', 'Ludmila', 'Magdalena', 'Magdaléna', 'Marcela', 
        'Marie', 'Markéta', 'Marta', 'Martina', 'Michaela', 'Milada', 'Milena', 'Miloslava', 'Miluše', 'Miroslava', 'Monika', 
        'Mária', 'Naděžda', 'Natálie', 'Nela', 'Nikol', 'Nikola', 'Olga', 'Pavla', 'Pavlína', 'Petra', 'Radka', 'Renata', 
        'Renáta', 'Romana', 'Růžena', 'Sabina', 'Simona', 'Soňa', 'Stanislava', 'Sára', 'Tereza', 'Vendula', 'Veronika', 
        'Viktorie', 'Vladimíra', 'Vlasta', 'Věra', 'Zdenka', 'Zdeňka', 'Zuzana', 'Štěpánka', 'Šárka', 'Žaneta'
    )

    last_names_male = (
        'Bartoš', 'Beneš', 'Blažek', 'Bláha', 'Doležal', 'Dušek', 'Dvořák', 'Fiala', 'Holub', 'Horák', 'Hájek', 'Jelínek', 
        'Kadlec', 'Kolář', 'Kopecký', 'Kratochvíl', 'Krejčí', 'Král', 'Kučera', 'Kříž', 'Malý', 'Marek', 'Mareš', 'Mašek', 
        'Moravec', 'Novotný', 'Novák', 'Němec', 'Pokorný', 'Polák', 'Pospíšil', 'Procházka', 'Růžička', 'Sedláček', 'Soukup', 
        'Svoboda', 'Urban', 'Vaněk', 'Veselý', 'Vlček', 'Zeman', 'Čermák', 'Černý', 'Říha', 'Šimek', 'Štěpánek', 'Šťastný'
    )

    last_names_female = (
        'Bartošová', 'Benešová', 'Beranová', 'Blažková', 'Bláhová', 'Doležalová', 'Dušková', 'Dvořáková', 'Fialová', 'Holubová', 
        'Horáková', 'Hájková', 'Jandová', 'Jelínková', 'Kadlecová', 'Kolářová', 'Kopecká', 'Kratochvílová', 'Krejčová', 
        'Králová', 'Kučerová', 'Křížová', 'Machová', 'Malá', 'Marešová', 'Marková', 'Mašková', 'Moravcová', 'Novotná', 
        'Nováková', 'Němcová', 'Pokorná', 'Poláková', 'Pospíšilová', 'Procházková', 'Růžičková', 'Sedláčková', 'Soukupová', 
        'Svobodová', 'Tichá', 'Urbanová', 'Vacková', 'Vaňková', 'Veselá', 'Vlčková', 'Vávrová', 'Zemanová', 'Čermáková', 
        'Černá', 'Říhová', 'Šimková', 'Štěpánková', 'Šťastná'
    )

    degrees = ('JUDr.', 'Ing.', 'Bc.', 'Mgr.', 'MUDr.', 'RNDr.' )

    prefixes_male = ('pan', ) + degrees

    prefixes_female = ('paní', 'slečna', ) + degrees

    suffixes = ('CSc.', 'DiS.', 'Ph.D.', 'Th.D.')

    @classmethod
    def first_name(cls):
        return cls.random_element((cls.first_name_male(), cls.first_name_female()))

    @classmethod
    def last_name(cls):
        return cls.random_element((cls.last_name_male(), cls.last_name_female()))

    @classmethod
    def first_name_male(cls):
        return cls.random_element(cls.first_names_male)

    @classmethod
    def first_name_female(cls):
        return cls.random_element(cls.first_names_female)

    @classmethod
    def last_name_male(cls):
        return cls.random_element(cls.last_names_male)

    @classmethod
    def last_name_female(cls):
        return cls.random_element(cls.last_names_female)

    @classmethod
    def prefix(cls):
        return cls.random_element((cls.prefix_male(), cls.prefix_female()))

    @classmethod
    def prefix_male(cls):
        return cls.random_element(cls.prefixes_male)

    @classmethod
    def prefix_female(cls):
        return cls.random_element(cls.prefixes_female)

    @classmethod
    def suffix(cls):
        return cls.random_element(cls.suffixes)

########NEW FILE########
__FILENAME__ = phone_number
from __future__ import unicode_literals
from ..phone_number import Provider as PhoneNumberProvider


class Provider(PhoneNumberProvider):
    formats = (
        '601 ### ###',
        '603 ### ###',
        '608 ### ###',
        '790 ### ###',
        '602 ### ###',
        '604 ### ###',
        '770 ### ###',
        '606 ### ###',
        '605 ### ###',
        '773 ### ###',
        '607 ### ###',
        '730 ### ###',
        '774 ### ###',
        '702 ### ###',
        '731 ### ###',
        '775 ### ###',
        '720 ### ###',
        '732 ### ###',
        '776 ### ###',
        '721 ### ###',
        '733 ### ###',
        '777 ### ###',
        '722 ### ###',
        '734 ### ###',
        '723 ### ###',
        '736 ### ###',
        '724 ### ###',
        '737 ### ###',
        '725 ### ###',
        '738 ### ###',
        '726 ### ###',
        '739 ### ###',
        '727 ### ###',
        '728 ### ###',
        '729 ### ###',
    )

########NEW FILE########
__FILENAME__ = date_time
from __future__ import unicode_literals
from . import BaseProvider
import random
import re
from time import time, mktime
from datetime import timedelta
from faker.utils.datetime_safe import date, datetime, real_date, real_datetime
from faker.utils import is_string


def datetime_to_timestamp(dt):
    return mktime(dt.timetuple())


timedelta_pattern = r''
for name, sym in [('years', 'y'), ('weeks', 'w'), ('days', 'd'), ('hours', 'h'), ('minutes', 'm'), ('seconds', 's')]:
    timedelta_pattern += r'((?P<{0}>(?:\+|-)\d+?){1})?'.format(name, sym)


class Provider(BaseProvider):
    centuries = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI',
                 'XVII', 'XVIII', 'XIX', 'XX', 'XXI']

    countries = [
        {'timezones': ['Europe/Andorra'], 'code': 'AD', 'continent': 'Europe', 'name': 'Andorra', 'capital': 'Andorra la Vella'},
        {'timezones': ['Asia/Kabul'], 'code': 'AF', 'continent': 'Asia', 'name': 'Afghanistan', 'capital': 'Kabul'},
        {'timezones': ['America/Antigua'], 'code': 'AG', 'continent': 'North America', 'name': 'Antigua and Barbuda', 'capital': "St. John's"},
        {'timezones': ['Europe/Tirane'], 'code': 'AL', 'continent': 'Europe', 'name': 'Albania', 'capital': 'Tirana'},
        {'timezones': ['Asia/Yerevan'], 'code': 'AM', 'continent': 'Asia', 'name': 'Armenia', 'capital': 'Yerevan'},
        {'timezones': ['Africa/Luanda'], 'code': 'AO', 'continent': 'Africa', 'name': 'Angola', 'capital': 'Luanda'},
        {'timezones': ['America/Argentina/Buenos_Aires', 'America/Argentina/Cordoba', 'America/Argentina/Jujuy', 'America/Argentina/Tucuman', 'America/Argentina/Catamarca', 'America/Argentina/La_Rioja', 'America/Argentina/San_Juan', 'America/Argentina/Mendoza', 'America/Argentina/Rio_Gallegos', 'America/Argentina/Ushuaia'], 'code': 'AR', 'continent': 'South America', 'name': 'Argentina', 'capital': 'Buenos Aires'},
        {'timezones': ['Europe/Vienna'], 'code': 'AT', 'continent': 'Europe', 'name': 'Austria', 'capital': 'Vienna'},
        {'timezones': ['Australia/Lord_Howe', 'Australia/Hobart', 'Australia/Currie', 'Australia/Melbourne', 'Australia/Sydney', 'Australia/Broken_Hill', 'Australia/Brisbane', 'Australia/Lindeman', 'Australia/Adelaide', 'Australia/Darwin', 'Australia/Perth'], 'code': 'AU', 'continent': 'Oceania', 'name': 'Australia', 'capital': 'Canberra'},
        {'timezones': ['Asia/Baku'], 'code': 'AZ', 'continent': 'Asia', 'name': 'Azerbaijan', 'capital': 'Baku'},
        {'timezones': ['America/Barbados'], 'code': 'BB', 'continent': 'North America', 'name': 'Barbados', 'capital': 'Bridgetown'},
        {'timezones': ['Asia/Dhaka'], 'code': 'BD', 'continent': 'Asia', 'name': 'Bangladesh', 'capital': 'Dhaka'},
        {'timezones': ['Europe/Brussels'], 'code': 'BE', 'continent': 'Europe', 'name': 'Belgium', 'capital': 'Brussels'},
        {'timezones': ['Africa/Ouagadougou'], 'code': 'BF', 'continent': 'Africa', 'name': 'Burkina Faso', 'capital': 'Ouagadougou'},
        {'timezones': ['Europe/Sofia'], 'code': 'BG', 'continent': 'Europe', 'name': 'Bulgaria', 'capital': 'Sofia'},
        {'timezones': ['Asia/Bahrain'], 'code': 'BH', 'continent': 'Asia', 'name': 'Bahrain', 'capital': 'Manama'},
        {'timezones': ['Africa/Bujumbura'], 'code': 'BI', 'continent': 'Africa', 'name': 'Burundi', 'capital': 'Bujumbura'},
        {'timezones': ['Africa/Porto-Novo'], 'code': 'BJ', 'continent': 'Africa', 'name': 'Benin', 'capital': 'Porto-Novo'},
        {'timezones': ['Asia/Brunei'], 'code': 'BN', 'continent': 'Asia', 'name': 'Brunei Darussalam', 'capital': 'Bandar Seri Begawan'},
        {'timezones': ['America/La_Paz'], 'code': 'BO', 'continent': 'South America', 'name': 'Bolivia', 'capital': 'Sucre'},
        {'timezones': ['America/Noronha', 'America/Belem', 'America/Fortaleza', 'America/Recife', 'America/Araguaina', 'America/Maceio', 'America/Bahia', 'America/Sao_Paulo', 'America/Campo_Grande', 'America/Cuiaba', 'America/Porto_Velho', 'America/Boa_Vista', 'America/Manaus', 'America/Eirunepe', 'America/Rio_Branco'], 'code': 'BR', 'continent': 'South America', 'name': 'Brazil', 'capital': 'Bras\xc3\xadlia'},
        {'timezones': ['America/Nassau'], 'code': 'BS', 'continent': 'North America', 'name': 'Bahamas', 'capital': 'Nassau'},
        {'timezones': ['Asia/Thimphu'], 'code': 'BT', 'continent': 'Asia', 'name': 'Bhutan', 'capital': 'Thimphu'},
        {'timezones': ['Africa/Gaborone'], 'code': 'BW', 'continent': 'Africa', 'name': 'Botswana', 'capital': 'Gaborone'},
        {'timezones': ['Europe/Minsk'], 'code': 'BY', 'continent': 'Europe', 'name': 'Belarus', 'capital': 'Minsk'},
        {'timezones': ['America/Belize'], 'code': 'BZ', 'continent': 'North America', 'name': 'Belize', 'capital': 'Belmopan'},
        {'timezones': ['America/St_Johns', 'America/Halifax', 'America/Glace_Bay', 'America/Moncton', 'America/Goose_Bay', 'America/Blanc-Sablon', 'America/Montreal', 'America/Toronto', 'America/Nipigon', 'America/Thunder_Bay', 'America/Pangnirtung', 'America/Iqaluit', 'America/Atikokan', 'America/Rankin_Inlet', 'America/Winnipeg', 'America/Rainy_River', 'America/Cambridge_Bay', 'America/Regina', 'America/Swift_Current', 'America/Edmonton', 'America/Yellowknife', 'America/Inuvik', 'America/Dawson_Creek', 'America/Vancouver', 'America/Whitehorse', 'America/Dawson'], 'code': 'CA', 'continent': 'North America', 'name': 'Canada', 'capital': 'Ottawa'},
        {'timezones': ['Africa/Kinshasa', 'Africa/Lubumbashi'], 'code': 'CD', 'continent': 'Africa', 'name': 'Democratic Republic of the Congo', 'capital': 'Kinshasa'},
        {'timezones': ['Africa/Brazzaville'], 'code': 'CG', 'continent': 'Africa', 'name': 'Republic of the Congo', 'capital': 'Brazzaville'},
        {'timezones': ['Africa/Abidjan'], 'code': 'CI', 'continent': 'Africa', 'name': "C\xc3\xb4te d'Ivoire", 'capital': 'Yamoussoukro'},
        {'timezones': ['America/Santiago', 'Pacific/Easter'], 'code': 'CL', 'continent': 'South America', 'name': 'Chile', 'capital': 'Santiago'},
        {'timezones': ['Africa/Douala'], 'code': 'CM', 'continent': 'Africa', 'name': 'Cameroon', 'capital': 'Yaound\xc3\xa9'},
        {'timezones': ['Asia/Shanghai', 'Asia/Harbin', 'Asia/Chongqing', 'Asia/Urumqi', 'Asia/Kashgar'], 'code': 'CN', 'continent': 'Asia', 'name': "People's Republic of China", 'capital': 'Beijing'},
        {'timezones': ['America/Bogota'], 'code': 'CO', 'continent': 'South America', 'name': 'Colombia', 'capital': 'Bogot\xc3\xa1'},
        {'timezones': ['America/Costa_Rica'], 'code': 'CR', 'continent': 'North America', 'name': 'Costa Rica', 'capital': 'San Jos\xc3\xa9'},
        {'timezones': ['America/Havana'], 'code': 'CU', 'continent': 'North America', 'name': 'Cuba', 'capital': 'Havana'},
        {'timezones': ['Atlantic/Cape_Verde'], 'code': 'CV', 'continent': 'Africa', 'name': 'Cape Verde', 'capital': 'Praia'},
        {'timezones': ['Asia/Nicosia'], 'code': 'CY', 'continent': 'Asia', 'name': 'Cyprus', 'capital': 'Nicosia'},
        {'timezones': ['Europe/Prague'], 'code': 'CZ', 'continent': 'Europe', 'name': 'Czech Republic', 'capital': 'Prague'},
        {'timezones': ['Europe/Berlin'], 'code': 'DE', 'continent': 'Europe', 'name': 'Germany', 'capital': 'Berlin'},
        {'timezones': ['Africa/Djibouti'], 'code': 'DJ', 'continent': 'Africa', 'name': 'Djibouti', 'capital': 'Djibouti City'},
        {'timezones': ['Europe/Copenhagen'], 'code': 'DK', 'continent': 'Europe', 'name': 'Denmark', 'capital': 'Copenhagen'},
        {'timezones': ['America/Dominica'], 'code': 'DM', 'continent': 'North America', 'name': 'Dominica', 'capital': 'Roseau'},
        {'timezones': ['America/Santo_Domingo'], 'code': 'DO', 'continent': 'North America', 'name': 'Dominican Republic', 'capital': 'Santo Domingo'},
        {'timezones': ['America/Guayaquil', 'Pacific/Galapagos'], 'code': 'EC', 'continent': 'South America', 'name': 'Ecuador', 'capital': 'Quito'},
        {'timezones': ['Europe/Tallinn'], 'code': 'EE', 'continent': 'Europe', 'name': 'Estonia', 'capital': 'Tallinn'},
        {'timezones': ['Africa/Cairo'], 'code': 'EG', 'continent': 'Africa', 'name': 'Egypt', 'capital': 'Cairo'},
        {'timezones': ['Africa/Asmera'], 'code': 'ER', 'continent': 'Africa', 'name': 'Eritrea', 'capital': 'Asmara'},
        {'timezones': ['Africa/Addis_Ababa'], 'code': 'ET', 'continent': 'Africa', 'name': 'Ethiopia', 'capital': 'Addis Ababa'},
        {'timezones': ['Europe/Helsinki'], 'code': 'FI', 'continent': 'Europe', 'name': 'Finland', 'capital': 'Helsinki'},
        {'timezones': ['Pacific/Fiji'], 'code': 'FJ', 'continent': 'Oceania', 'name': 'Fiji', 'capital': 'Suva'},
        {'timezones': ['Europe/Paris'], 'code': 'FR', 'continent': 'Europe', 'name': 'France', 'capital': 'Paris'},
        {'timezones': ['Africa/Libreville'], 'code': 'GA', 'continent': 'Africa', 'name': 'Gabon', 'capital': 'Libreville'},
        {'timezones': ['Asia/Tbilisi'], 'code': 'GE', 'continent': 'Asia', 'name': 'Georgia', 'capital': 'Tbilisi'},
        {'timezones': ['Africa/Accra'], 'code': 'GH', 'continent': 'Africa', 'name': 'Ghana', 'capital': 'Accra'},
        {'timezones': ['Africa/Banjul'], 'code': 'GM', 'continent': 'Africa', 'name': 'The Gambia', 'capital': 'Banjul'},
        {'timezones': ['Africa/Conakry'], 'code': 'GN', 'continent': 'Africa', 'name': 'Guinea', 'capital': 'Conakry'},
        {'timezones': ['Europe/Athens'], 'code': 'GR', 'continent': 'Europe', 'name': 'Greece', 'capital': 'Athens'},
        {'timezones': ['America/Guatemala'], 'code': 'GT', 'continent': 'North America', 'name': 'Guatemala', 'capital': 'Guatemala City'},
        {'timezones': ['America/Guatemala'], 'code': 'GT', 'continent': 'North America', 'name': 'Haiti', 'capital': 'Port-au-Prince'},
        {'timezones': ['Africa/Bissau'], 'code': 'GW', 'continent': 'Africa', 'name': 'Guinea-Bissau', 'capital': 'Bissau'},
        {'timezones': ['America/Guyana'], 'code': 'GY', 'continent': 'South America', 'name': 'Guyana', 'capital': 'Georgetown'},
        {'timezones': ['America/Tegucigalpa'], 'code': 'HN', 'continent': 'North America', 'name': 'Honduras', 'capital': 'Tegucigalpa'},
        {'timezones': ['Europe/Budapest'], 'code': 'HU', 'continent': 'Europe', 'name': 'Hungary', 'capital': 'Budapest'},
        {'timezones': ['Asia/Jakarta', 'Asia/Pontianak', 'Asia/Makassar', 'Asia/Jayapura'], 'code': 'ID', 'continent': 'Asia', 'name': 'Indonesia', 'capital': 'Jakarta'},
        {'timezones': ['Europe/Dublin'], 'code': 'IE', 'continent': 'Europe', 'name': 'Republic of Ireland', 'capital': 'Dublin'},
        {'timezones': ['Asia/Jerusalem'], 'code': 'IL', 'continent': 'Asia', 'name': 'Israel', 'capital': 'Jerusalem'},
        {'timezones': ['Asia/Calcutta'], 'code': 'IN', 'continent': 'Asia', 'name': 'India', 'capital': 'New Delhi'},
        {'timezones': ['Asia/Baghdad'], 'code': 'IQ', 'continent': 'Asia', 'name': 'Iraq', 'capital': 'Baghdad'},
        {'timezones': ['Asia/Tehran'], 'code': 'IR', 'continent': 'Asia', 'name': 'Iran', 'capital': 'Tehran'},
        {'timezones': ['Atlantic/Reykjavik'], 'code': 'IS', 'continent': 'Europe', 'name': 'Iceland', 'capital': 'Reykjav\xc3\xadk'},
        {'timezones': ['Europe/Rome'], 'code': 'IT', 'continent': 'Europe', 'name': 'Italy', 'capital': 'Rome'},
        {'timezones': ['America/Jamaica'], 'code': 'JM', 'continent': 'North America', 'name': 'Jamaica', 'capital': 'Kingston'},
        {'timezones': ['Asia/Amman'], 'code': 'JO', 'continent': 'Asia', 'name': 'Jordan', 'capital': 'Amman'},
        {'timezones': ['Asia/Tokyo'], 'code': 'JP', 'continent': 'Asia', 'name': 'Japan', 'capital': 'Tokyo'},
        {'timezones': ['Africa/Nairobi'], 'code': 'KE', 'continent': 'Africa', 'name': 'Kenya', 'capital': 'Nairobi'},
        {'timezones': ['Asia/Bishkek'], 'code': 'KG', 'continent': 'Asia', 'name': 'Kyrgyzstan', 'capital': 'Bishkek'},
        {'timezones': ['Pacific/Tarawa', 'Pacific/Enderbury', 'Pacific/Kiritimati'], 'code': 'KI', 'continent': 'Oceania', 'name': 'Kiribati', 'capital': 'Tarawa'},
        {'timezones': ['Asia/Pyongyang'], 'code': 'KP', 'continent': 'Asia', 'name': 'North Korea', 'capital': 'Pyongyang'},
        {'timezones': ['Asia/Seoul'], 'code': 'KR', 'continent': 'Asia', 'name': 'South Korea', 'capital': 'Seoul'},
        {'timezones': ['Asia/Kuwait'], 'code': 'KW', 'continent': 'Asia', 'name': 'Kuwait', 'capital': 'Kuwait City'},
        {'timezones': ['Asia/Beirut'], 'code': 'LB', 'continent': 'Asia', 'name': 'Lebanon', 'capital': 'Beirut'},
        {'timezones': ['Europe/Vaduz'], 'code': 'LI', 'continent': 'Europe', 'name': 'Liechtenstein', 'capital': 'Vaduz'},
        {'timezones': ['Africa/Monrovia'], 'code': 'LR', 'continent': 'Africa', 'name': 'Liberia', 'capital': 'Monrovia'},
        {'timezones': ['Africa/Maseru'], 'code': 'LS', 'continent': 'Africa', 'name': 'Lesotho', 'capital': 'Maseru'},
        {'timezones': ['Europe/Vilnius'], 'code': 'LT', 'continent': 'Europe', 'name': 'Lithuania', 'capital': 'Vilnius'},
        {'timezones': ['Europe/Luxembourg'], 'code': 'LU', 'continent': 'Europe', 'name': 'Luxembourg', 'capital': 'Luxembourg City'},
        {'timezones': ['Europe/Riga'], 'code': 'LV', 'continent': 'Europe', 'name': 'Latvia', 'capital': 'Riga'},
        {'timezones': ['Africa/Tripoli'], 'code': 'LY', 'continent': 'Africa', 'name': 'Libya', 'capital': 'Tripoli'},
        {'timezones': ['Indian/Antananarivo'], 'code': 'MG', 'continent': 'Africa', 'name': 'Madagascar', 'capital': 'Antananarivo'},
        {'timezones': ['Pacific/Majuro', 'Pacific/Kwajalein'], 'code': 'MH', 'continent': 'Oceania', 'name': 'Marshall Islands', 'capital': 'Majuro'},
        {'timezones': ['Europe/Skopje'], 'code': 'MK', 'continent': 'Europe', 'name': 'Macedonia', 'capital': 'Skopje'},
        {'timezones': ['Africa/Bamako'], 'code': 'ML', 'continent': 'Africa', 'name': 'Mali', 'capital': 'Bamako'},
        {'timezones': ['Asia/Rangoon'], 'code': 'MM', 'continent': 'Asia', 'name': 'Myanmar', 'capital': 'Naypyidaw'},
        {'timezones': ['Asia/Ulaanbaatar', 'Asia/Hovd', 'Asia/Choibalsan'], 'code': 'MN', 'continent': 'Asia', 'name': 'Mongolia', 'capital': 'Ulaanbaatar'},
        {'timezones': ['Africa/Nouakchott'], 'code': 'MR', 'continent': 'Africa', 'name': 'Mauritania', 'capital': 'Nouakchott'},
        {'timezones': ['Europe/Malta'], 'code': 'MT', 'continent': 'Europe', 'name': 'Malta', 'capital': 'Valletta'},
        {'timezones': ['Indian/Mauritius'], 'code': 'MU', 'continent': 'Africa', 'name': 'Mauritius', 'capital': 'Port Louis'},
        {'timezones': ['Indian/Maldives'], 'code': 'MV', 'continent': 'Asia', 'name': 'Maldives', 'capital': 'Mal\xc3\xa9'},
        {'timezones': ['Africa/Blantyre'], 'code': 'MW', 'continent': 'Africa', 'name': 'Malawi', 'capital': 'Lilongwe'},
        {'timezones': ['America/Mexico_City', 'America/Cancun', 'America/Merida', 'America/Monterrey', 'America/Mazatlan', 'America/Chihuahua', 'America/Hermosillo', 'America/Tijuana'], 'code': 'MX', 'continent': 'North America', 'name': 'Mexico', 'capital': 'Mexico City'},
        {'timezones': ['Asia/Kuala_Lumpur', 'Asia/Kuching'], 'code': 'MY', 'continent': 'Asia', 'name': 'Malaysia', 'capital': 'Kuala Lumpur'},
        {'timezones': ['Africa/Maputo'], 'code': 'MZ', 'continent': 'Africa', 'name': 'Mozambique', 'capital': 'Maputo'},
        {'timezones': ['Africa/Windhoek'], 'code': 'NA', 'continent': 'Africa', 'name': 'Namibia', 'capital': 'Windhoek'},
        {'timezones': ['Africa/Niamey'], 'code': 'NE', 'continent': 'Africa', 'name': 'Niger', 'capital': 'Niamey'},
        {'timezones': ['Africa/Lagos'], 'code': 'NG', 'continent': 'Africa', 'name': 'Nigeria', 'capital': 'Abuja'},
        {'timezones': ['America/Managua'], 'code': 'NI', 'continent': 'North America', 'name': 'Nicaragua', 'capital': 'Managua'},
        {'timezones': ['Europe/Amsterdam'], 'code': 'NL', 'continent': 'Europe', 'name': 'Kingdom of the Netherlands', 'capital': 'Amsterdam'},
        {'timezones': ['Europe/Oslo'], 'code': 'NO', 'continent': 'Europe', 'name': 'Norway', 'capital': 'Oslo'},
        {'timezones': ['Asia/Katmandu'], 'code': 'NP', 'continent': 'Asia', 'name': 'Nepal', 'capital': 'Kathmandu'},
        {'timezones': ['Pacific/Nauru'], 'code': 'NR', 'continent': 'Oceania', 'name': 'Nauru', 'capital': 'Yaren'},
        {'timezones': ['Pacific/Auckland', 'Pacific/Chatham'], 'code': 'NZ', 'continent': 'Oceania', 'name': 'New Zealand', 'capital': 'Wellington'},
        {'timezones': ['Asia/Muscat'], 'code': 'OM', 'continent': 'Asia', 'name': 'Oman', 'capital': 'Muscat'},
        {'timezones': ['America/Panama'], 'code': 'PA', 'continent': 'North America', 'name': 'Panama', 'capital': 'Panama City'},
        {'timezones': ['America/Lima'], 'code': 'PE', 'continent': 'South America', 'name': 'Peru', 'capital': 'Lima'},
        {'timezones': ['Pacific/Port_Moresby'], 'code': 'PG', 'continent': 'Oceania', 'name': 'Papua New Guinea', 'capital': 'Port Moresby'},
        {'timezones': ['Asia/Manila'], 'code': 'PH', 'continent': 'Asia', 'name': 'Philippines', 'capital': 'Manila'},
        {'timezones': ['Asia/Karachi'], 'code': 'PK', 'continent': 'Asia', 'name': 'Pakistan', 'capital': 'Islamabad'},
        {'timezones': ['Europe/Warsaw'], 'code': 'PL', 'continent': 'Europe', 'name': 'Poland', 'capital': 'Warsaw'},
        {'timezones': ['Europe/Lisbon', 'Atlantic/Madeira', 'Atlantic/Azores'], 'code': 'PT', 'continent': 'Europe', 'name': 'Portugal', 'capital': 'Lisbon'},
        {'timezones': ['Pacific/Palau'], 'code': 'PW', 'continent': 'Oceania', 'name': 'Palau', 'capital': 'Ngerulmud'},
        {'timezones': ['America/Asuncion'], 'code': 'PY', 'continent': 'South America', 'name': 'Paraguay', 'capital': 'Asunci\xc3\xb3n'},
        {'timezones': ['Asia/Qatar'], 'code': 'QA', 'continent': 'Asia', 'name': 'Qatar', 'capital': 'Doha'},
        {'timezones': ['Europe/Bucharest'], 'code': 'RO', 'continent': 'Europe', 'name': 'Romania', 'capital': 'Bucharest'},
        {'timezones': ['Europe/Kaliningrad', 'Europe/Moscow', 'Europe/Volgograd', 'Europe/Samara', 'Asia/Yekaterinburg', 'Asia/Omsk', 'Asia/Novosibirsk', 'Asia/Krasnoyarsk', 'Asia/Irkutsk', 'Asia/Yakutsk', 'Asia/Vladivostok', 'Asia/Sakhalin', 'Asia/Magadan', 'Asia/Kamchatka', 'Asia/Anadyr'], 'code': 'RU', 'continent': 'Europe', 'name': 'Russia', 'capital': 'Moscow'},
        {'timezones': ['Africa/Kigali'], 'code': 'RW', 'continent': 'Africa', 'name': 'Rwanda', 'capital': 'Kigali'},
        {'timezones': ['Asia/Riyadh'], 'code': 'SA', 'continent': 'Asia', 'name': 'Saudi Arabia', 'capital': 'Riyadh'},
        {'timezones': ['Pacific/Guadalcanal'], 'code': 'SB', 'continent': 'Oceania', 'name': 'Solomon Islands', 'capital': 'Honiara'},
        {'timezones': ['Indian/Mahe'], 'code': 'SC', 'continent': 'Africa', 'name': 'Seychelles', 'capital': 'Victoria'},
        {'timezones': ['Africa/Khartoum'], 'code': 'SD', 'continent': 'Africa', 'name': 'Sudan', 'capital': 'Khartoum'},
        {'timezones': ['Europe/Stockholm'], 'code': 'SE', 'continent': 'Europe', 'name': 'Sweden', 'capital': 'Stockholm'},
        {'timezones': ['Asia/Singapore'], 'code': 'SG', 'continent': 'Asia', 'name': 'Singapore', 'capital': 'Singapore'},
        {'timezones': ['Europe/Ljubljana'], 'code': 'SI', 'continent': 'Europe', 'name': 'Slovenia', 'capital': 'Ljubljana'},
        {'timezones': ['Europe/Bratislava'], 'code': 'SK', 'continent': 'Europe', 'name': 'Slovakia', 'capital': 'Bratislava'},
        {'timezones': ['Africa/Freetown'], 'code': 'SL', 'continent': 'Africa', 'name': 'Sierra Leone', 'capital': 'Freetown'},
        {'timezones': ['Europe/San_Marino'], 'code': 'SM', 'continent': 'Europe', 'name': 'San Marino', 'capital': 'San Marino'},
        {'timezones': ['Africa/Dakar'], 'code': 'SN', 'continent': 'Africa', 'name': 'Senegal', 'capital': 'Dakar'},
        {'timezones': ['Africa/Mogadishu'], 'code': 'SO', 'continent': 'Africa', 'name': 'Somalia', 'capital': 'Mogadishu'},
        {'timezones': ['America/Paramaribo'], 'code': 'SR', 'continent': 'South America', 'name': 'Suriname', 'capital': 'Paramaribo'},
        {'timezones': ['Africa/Sao_Tome'], 'code': 'ST', 'continent': 'Africa', 'name': 'S\xc3\xa3o Tom\xc3\xa9 and Pr\xc3\xadncipe', 'capital': 'S\xc3\xa3o Tom\xc3\xa9'},
        {'timezones': ['Asia/Damascus'], 'code': 'SY', 'continent': 'Asia', 'name': 'Syria', 'capital': 'Damascus'},
        {'timezones': ['Africa/Lome'], 'code': 'TG', 'continent': 'Africa', 'name': 'Togo', 'capital': 'Lom\xc3\xa9'},
        {'timezones': ['Asia/Bangkok'], 'code': 'TH', 'continent': 'Asia', 'name': 'Thailand', 'capital': 'Bangkok'},
        {'timezones': ['Asia/Dushanbe'], 'code': 'TJ', 'continent': 'Asia', 'name': 'Tajikistan', 'capital': 'Dushanbe'},
        {'timezones': ['Asia/Ashgabat'], 'code': 'TM', 'continent': 'Asia', 'name': 'Turkmenistan', 'capital': 'Ashgabat'},
        {'timezones': ['Africa/Tunis'], 'code': 'TN', 'continent': 'Africa', 'name': 'Tunisia', 'capital': 'Tunis'},
        {'timezones': ['Pacific/Tongatapu'], 'code': 'TO', 'continent': 'Oceania', 'name': 'Tonga', 'capital': 'Nuku\xca\xbbalofa'},
        {'timezones': ['Europe/Istanbul'], 'code': 'TR', 'continent': 'Asia', 'name': 'Turkey', 'capital': 'Ankara'},
        {'timezones': ['America/Port_of_Spain'], 'code': 'TT', 'continent': 'North America', 'name': 'Trinidad and Tobago', 'capital': 'Port of Spain'},
        {'timezones': ['Pacific/Funafuti'], 'code': 'TV', 'continent': 'Oceania', 'name': 'Tuvalu', 'capital': 'Funafuti'},
        {'timezones': ['Africa/Dar_es_Salaam'], 'code': 'TZ', 'continent': 'Africa', 'name': 'Tanzania', 'capital': 'Dodoma'},
        {'timezones': ['Europe/Kiev', 'Europe/Uzhgorod', 'Europe/Zaporozhye', 'Europe/Simferopol'], 'code': 'UA', 'continent': 'Europe', 'name': 'Ukraine', 'capital': 'Kiev'},
        {'timezones': ['Africa/Kampala'], 'code': 'UG', 'continent': 'Africa', 'name': 'Uganda', 'capital': 'Kampala'},
        {'timezones': ['America/New_York', 'America/Detroit', 'America/Kentucky/Louisville', 'America/Kentucky/Monticello', 'America/Indiana/Indianapolis', 'America/Indiana/Marengo', 'America/Indiana/Knox', 'America/Indiana/Vevay', 'America/Chicago', 'America/Indiana/Vincennes', 'America/Indiana/Petersburg', 'America/Menominee', 'America/North_Dakota/Center', 'America/North_Dakota/New_Salem', 'America/Denver', 'America/Boise', 'America/Shiprock', 'America/Phoenix', 'America/Los_Angeles', 'America/Anchorage', 'America/Juneau', 'America/Yakutat', 'America/Nome', 'America/Adak', 'Pacific/Honolulu'], 'code': 'US', 'continent': 'North America', 'name': 'United States', 'capital': 'Washington, D.C.'},
        {'timezones': ['America/Montevideo'], 'code': 'UY', 'continent': 'South America', 'name': 'Uruguay', 'capital': 'Montevideo'},
        {'timezones': ['Asia/Samarkand', 'Asia/Tashkent'], 'code': 'UZ', 'continent': 'Asia', 'name': 'Uzbekistan', 'capital': 'Tashkent'},
        {'timezones': ['Europe/Vatican'], 'code': 'VA', 'continent': 'Europe', 'name': 'Vatican City', 'capital': 'Vatican City'},
        {'timezones': ['America/Caracas'], 'code': 'VE', 'continent': 'South America', 'name': 'Venezuela', 'capital': 'Caracas'},
        {'timezones': ['Asia/Saigon'], 'code': 'VN', 'continent': 'Asia', 'name': 'Vietnam', 'capital': 'Hanoi'},
        {'timezones': ['Pacific/Efate'], 'code': 'VU', 'continent': 'Oceania', 'name': 'Vanuatu', 'capital': 'Port Vila'},
        {'timezones': ['Asia/Aden'], 'code': 'YE', 'continent': 'Asia', 'name': 'Yemen', 'capital': "Sana'a"},
        {'timezones': ['Africa/Lusaka'], 'code': 'ZM', 'continent': 'Africa', 'name': 'Zambia', 'capital': 'Lusaka'},
        {'timezones': ['Africa/Harare'], 'code': 'ZW', 'continent': 'Africa', 'name': 'Zimbabwe', 'capital': 'Harare'},
        {'timezones': ['Africa/Algiers'], 'code': 'DZ', 'continent': 'Africa', 'name': 'Algeria', 'capital': 'Algiers'},
        {'timezones': ['Europe/Sarajevo'], 'code': 'BA', 'continent': 'Europe', 'name': 'Bosnia and Herzegovina', 'capital': 'Sarajevo'},
        {'timezones': ['Asia/Phnom_Penh'], 'code': 'KH', 'continent': 'Asia', 'name': 'Cambodia', 'capital': 'Phnom Penh'},
        {'timezones': ['Africa/Bangui'], 'code': 'CF', 'continent': 'Africa', 'name': 'Central African Republic', 'capital': 'Bangui'},
        {'timezones': ['Africa/Ndjamena'], 'code': 'TD', 'continent': 'Africa', 'name': 'Chad', 'capital': "N'Djamena"},
        {'timezones': ['Indian/Comoro'], 'code': 'KM', 'continent': 'Africa', 'name': 'Comoros', 'capital': 'Moroni'},
        {'timezones': ['Europe/Zagreb'], 'code': 'HR', 'continent': 'Europe', 'name': 'Croatia', 'capital': 'Zagreb'},
        {'timezones': ['Asia/Dili'], 'code': 'TL', 'continent': 'Asia', 'name': 'East Timor', 'capital': 'Dili'},
        {'timezones': ['America/El_Salvador'], 'code': 'SV', 'continent': 'North America', 'name': 'El Salvador', 'capital': 'San Salvador'},
        {'timezones': ['Africa/Malabo'], 'code': 'GQ', 'continent': 'Africa', 'name': 'Equatorial Guinea', 'capital': 'Malabo'},
        {'timezones': ['America/Grenada'], 'code': 'GD', 'continent': 'North America', 'name': 'Grenada', 'capital': "St. George's"},
        {'timezones': ['Asia/Almaty', 'Asia/Qyzylorda', 'Asia/Aqtobe', 'Asia/Aqtau', 'Asia/Oral'], 'code': 'KZ', 'continent': 'Asia', 'name': 'Kazakhstan', 'capital': 'Astana'},
        {'timezones': ['Asia/Vientiane'], 'code': 'LA', 'continent': 'Asia', 'name': 'Laos', 'capital': 'Vientiane'},
        {'timezones': ['Pacific/Truk', 'Pacific/Ponape', 'Pacific/Kosrae'], 'code': 'FM', 'continent': 'Oceania', 'name': 'Federated States of Micronesia', 'capital': 'Palikir'},
        {'timezones': ['Europe/Chisinau'], 'code': 'MD', 'continent': 'Europe', 'name': 'Moldova', 'capital': 'Chi\xc5\x9fin\xc4\x83u'},
        {'timezones': ['Europe/Monaco'], 'code': 'MC', 'continent': 'Europe', 'name': 'Monaco', 'capital': 'Monaco'},
        {'timezones': ['Europe/Podgorica'], 'code': 'ME', 'continent': 'Europe', 'name': 'Montenegro', 'capital': 'Podgorica'},
        {'timezones': ['Africa/Casablanca'], 'code': 'MA', 'continent': 'Africa', 'name': 'Morocco', 'capital': 'Rabat'},
        {'timezones': ['America/St_Kitts'], 'code': 'KN', 'continent': 'North America', 'name': 'Saint Kitts and Nevis', 'capital': 'Basseterre'},
        {'timezones': ['America/St_Lucia'], 'code': 'LC', 'continent': 'North America', 'name': 'Saint Lucia', 'capital': 'Castries'},
        {'timezones': ['America/St_Vincent'], 'code': 'VC', 'continent': 'North America', 'name': 'Saint Vincent and the Grenadines', 'capital': 'Kingstown'},
        {'timezones': ['Pacific/Apia'], 'code': 'WS', 'continent': 'Oceania', 'name': 'Samoa', 'capital': 'Apia'},
        {'timezones': ['Europe/Belgrade'], 'code': 'RS', 'continent': 'Europe', 'name': 'Serbia', 'capital': 'Belgrade'},
        {'timezones': ['Africa/Johannesburg'], 'code': 'ZA', 'continent': 'Africa', 'name': 'South Africa', 'capital': 'Pretoria'},
        {'timezones': ['Europe/Madrid', 'Africa/Ceuta', 'Atlantic/Canary'], 'code': 'ES', 'continent': 'Europe', 'name': 'Spain', 'capital': 'Madrid'},
        {'timezones': ['Asia/Colombo'], 'code': 'LK', 'continent': 'Asia', 'name': 'Sri Lanka', 'capital': 'Sri Jayewardenepura Kotte'},
        {'timezones': ['Africa/Mbabane'], 'code': 'SZ', 'continent': 'Africa', 'name': 'Swaziland', 'capital': 'Mbabane'},
        {'timezones': ['Europe/Zurich'], 'code': 'CH', 'continent': 'Europe', 'name': 'Switzerland', 'capital': 'Bern'},
        {'timezones': ['Asia/Dubai'], 'code': 'AE', 'continent': 'Asia', 'name': 'United Arab Emirates', 'capital': 'Abu Dhabi'},
        {'timezones': ['Europe/London'], 'code': 'GB', 'continent': 'Europe', 'name': 'United Kingdom', 'capital': 'London'},
    ]

    regex = re.compile(timedelta_pattern)

    @classmethod
    def unix_time(cls):
        """
        Get a timestamp between January 1, 1970 and now
        :example 1061306726
        """
        return random.randint(0, int(time()))

    @classmethod
    def date_time(cls):
        """
        Get a datetime object for a date between January 1, 1970 and now
        :example DateTime('2005-08-16 20:39:21')
        :return datetime
        """
        return datetime.fromtimestamp(cls.unix_time())

    @classmethod
    def date_time_ad(cls):
        """
        Get a datetime object for a date between January 1, 001 and now
        :example DateTime('1265-03-22 21:15:52')
        :return datetime
        """
        return datetime.fromtimestamp(random.randint(-62135600400, int(time())))

    @classmethod
    def iso8601(cls):
        """
        :example '2003-10-21T16:05:52+0000'
        """
        return cls.date_time().isoformat()

    @classmethod
    def date(cls, pattern='%Y-%m-%d'):
        """
        Get a date string between January 1, 1970 and now
        :param pattern format
        :example '2008-11-27'
        """
        return cls.date_time().strftime(pattern)

    @classmethod
    def time(cls, pattern='%H:%M:%S'):
        """
        Get a time string (24h format by default)
        :param pattern format
        :example '15:02:34'
        """
        return cls.date_time().time().strftime(pattern)

    @classmethod
    def _parse_date_time(cls, text):
        if isinstance(text, (datetime, date, real_datetime, real_date)):
            return datetime_to_timestamp(text)
        now = datetime.now()
        if isinstance(text, timedelta):
            return datetime_to_timestamp(now - text)
        if is_string(text):
            if text == 'now':
                return datetime_to_timestamp(datetime.now())
            parts = cls.regex.match(text)
            if not parts:
                return
            parts = parts.groupdict()
            time_params = {}
            for (name, param) in parts.items():
                if param:
                    time_params[name] = int(param)

            if 'years' in time_params:
                if 'days' not in time_params: time_params['days'] = 0
                time_params['days'] += 365.24 * time_params.pop('years')

            return datetime_to_timestamp(now + timedelta(**time_params))
        if isinstance(text, int):
            return datetime_to_timestamp(now + timedelta(text))
        raise ValueError("Invalid format for date '{0}'".format(text))

    @classmethod
    def date_time_between(cls, start_date='-30y', end_date='now'):
        """
        Get a DateTime object based on a random date between two given dates.
        Accepts date strings that can be recognized by strtotime().

        :param start_date Defaults to 30 years ago
        :param end_date Defaults to "now"
        :example DateTime('1999-02-02 11:42:52')
        :return DateTime
        """
        start_date = cls._parse_date_time(start_date)
        end_date = cls._parse_date_time(end_date)
        timestamp = random.randint(start_date, end_date)
        return datetime.fromtimestamp(timestamp)

    @classmethod
    def date_time_this_century(cls):
        """
        :example DateTime('1964-04-04 11:02:02')
        """
        return cls.date_time_between('-100y')

    @classmethod
    def date_time_this_decade(cls):
        """
        :example DateTime('2004-04-04 11:02:02')
        """
        return cls.date_time_between('-10y')

    @classmethod
    def date_time_this_year(cls):
        """
        :example DateTime('2012-04-04 11:02:02')
        """
        return cls.date_time_between('-1y')

    @classmethod
    def date_time_this_month(cls):
        """
        :example DateTime('2012-04-04 11:02:02')
        """
        return cls.date_time_between('-30d')

    @classmethod
    def am_pm(cls):
        return cls.date('%p')

    @classmethod
    def day_of_month(cls):
        return cls.date('%d')

    @classmethod
    def day_of_week(cls):
        return cls.date('%A')

    @classmethod
    def month(cls):
        return cls.date('%m')

    @classmethod
    def month_name(cls):
        return cls.date('%B')

    @classmethod
    def year(cls):
        return cls.date('%Y')

    @classmethod
    def century(cls):
        """
        :example 'XVII'
        """
        return cls.random_element(cls.centuries)

    @classmethod
    def timezone(cls):
        return cls.random_element(cls.countries)['timezones'].pop(0)




########NEW FILE########
__FILENAME__ = address
# coding=utf-8
from __future__ import unicode_literals
from ..address import Provider as AddressProvider


class Provider(AddressProvider):

    city_formats = ('{{city_name}}', )

    street_name_formats = (
        '{{first_name}}-{{last_name}}-{{street_suffix_long}}',
        '{{last_name}}{{street_suffix_short}}'
    )
    street_address_formats = ('{{street_name}} {{building_number}}', )
    address_formats = ('{{street_address}}\n{{postcode}} {{city}}', )

    building_number_formats = ('###', '##', '#', '#/#')

    street_suffixes_long = (
        'Gasse', 'Platz', 'Ring', 'Straße', 'Weg', 'Allee'
    )
    street_suffixes_short = (
        'gasse', 'platz', 'ring', 'straße', 'str.', 'weg', 'allee'
    )

    postcode_formats = ('#####', )

    cities = (
        'Augsburg', 'Aschaffenburg', 'Aachen', 'Auerbach', 'Ahaus',
        'Badibling', 'Amberg', 'Ansbach', 'Angermünde', 'Anklam',
        'Altötting', 'Apolda', 'Arnstadt', 'Artern', 'Altentreptow', 'Aue',
        'Aurich', 'Berlin', 'Bamberg', 'Böblingen', 'Bernburg', 'Brand',
        'Erbisdorf', 'Beilngries', 'Belzig', 'Berchtesgaden', 'Biedenkopf',
        'Bischofswerda', 'Backnang', 'Borna', 'Bogen', 'Borken', 'Bruchsal',
        'Brandenburg', 'Burg', 'Brilon', 'Bad Brückenau', 'Bremervörde',
        'Bersenbrück', 'Beeskow', 'Bayreuth', 'Bitterfeld', 'Burgdorf',
        'Burglengenfeld', 'Büsingenm Hochrhein', 'Bützow', 'Bautzen',
        'Bergzabern', 'Chemnitz', 'Calau', 'Cottbus', 'Celle', 'Cloppenburg',
        'Coburg', 'Crailsheim', 'Cuxhaven', 'Calw', 'Darmstadt', 'Dachau',
        'Badoberan', 'Dresden', 'Dessau', 'Deggendorf', 'Diepholz',
        'Dieburg', 'Dinslaken', 'Dinkelsbühl', 'Döbeln', 'Demmin', 'Düren',
        'Donaueschingen', 'Duderstadt', 'Delitzsch', 'Eilenburg',
        'Ebersberg', 'Ebern', 'Ebermannstadt', 'Eckernförde', 'Erding',
        'Erfurt', 'Eggenfelden', 'Eisenhüttenstadt', 'Eichstätt',
        'Eichstätt', 'Eisleben', 'Einbeck', 'Eisenberg', 'Emmendingen',
        'Erkelenz', 'Eisenach', 'Euskirchen', 'Eutin', 'Eberswalde', 'Soltau',
        'Fallingbostel', 'Fulda', 'Freudenstadt', 'Feuchtwangen',
        'Fürstenfeldbruck', 'Main-Höchst)', 'Finsterwalde', 'Flöha',
        'Forchheim', 'Forst', 'Bad Freienwalde', 'Freising', 'Freital',
        'Füssen', 'Fürstenwalde', 'Gera', 'Gardelegen', 'Garmisch-Partenkirchen',
        'Schwäbisch Gmünd', 'Gadebusch', 'Geldern',
        'Gerolzhofen', 'Germersheim', 'Gifhorn', 'Groß-Gerau', 'Geithain',
        'Gräfenhainichen', 'Gießen', 'Grimmen', 'Gelnhausen', 'Genthin',
        'Sankt Goar', 'Sankt Goarshausen', 'Göttingen', 'Göppingen',
        'Görlitz', 'Grafenau', 'Großenhain', 'Griesbach Rottal', 'Grimma',
        'Gransee', 'Greiz', 'Goslar', 'Gütersloh', 'Gotha', 'Guben',
        'Gunzenhausen', 'Güstrow', 'Grevenbroich', 'Grevesmühlen',
        'Günzburg', 'Hannover', 'Hammelburg', 'Bremen', 'Hildburghausen',
        'Halberstadt', 'Hainichen', 'Hechingen', 'Haldensleben', 'Helmstedt',
        'Hersbruck', 'Hettstedt', 'Herford', 'Hagenow', 'Greifswald',
        'Hamburg', 'Hohenmölsen', 'Hildesheim', 'Heiligenstadt', 'Lübeck',
        'Hannoversch Münden', 'Hofgeismar', 'Holzminden', 'Hohenstein-Ernstthal',
        'Rostock', 'Heinsberg', 'Hansestadttralsund', 'Hünfeld',
        'Husum', 'Havelberg', 'Wismar', 'Höxter', 'Hoyerswerda', 'Herzberg',
        'Ilmenau', 'Illertissen', 'Ingolstadt', 'Iserlohn', 'Jena',
        'Jüterbog', 'Jessen', 'Jülich', 'Karlsruhe', 'Kronach', 'Kelheim',
        'Kehl', 'Kemnath', 'Bad Kissingen', 'Bad Kreuznach',
        'Kaiserslautern', 'Kleve', 'Klötze', 'Kamenz', 'Konstanz', 'Koblenz',
        'Kötzting', 'Kassel', 'Kitzingen', 'Kulmbach', 'Kusel', 'Königs Wusterhausen',
        'Kyritz', 'Leipziger Land', 'Ludwigsburg',
        'Lobenstein', 'Lübz', 'Luckau', 'Lemgo', 'Lüneburg', 'Lüdinghausen',
        'Bad Liebenwerda', 'Lichtenfels', 'Lübben', 'Lörrach', 'Lippstadt',
        'Bad Langensalza', 'Lüdenscheid', 'Luckenwalde', 'Ludwigslust',
        'München', 'Marienberg', 'Mainburg', 'Mallersdorf',
        'Marktheidenfeld', 'Miesbach', 'Malchin', 'Magdeburg', 'Mettmann',
        'Melsungen', 'Meißen', 'Melle', 'Meppen', 'Merseburg',
        'Mellrichstadt', 'Bad Mergentheim', 'Meiningen', 'Mühlhausen',
        'Miltenberg', 'Moers', 'Monschau', 'Mühldorfm Inn', 'Mittweida',
        'Mayen', 'Nabburg', 'Naila', 'Nauen', 'Neubrandenburg', 'Nordhausen',
        'Neuss', 'Neunburg vorm Wald', 'Neustadtner Waldnaab', 'Northeim',
        'Norden', 'Nördlingen', 'Neuruppin', 'Neustadtm Rübenberge',
        'Nürtingen', 'Neu-Ulm', 'Niesky', 'Neustrelitz', 'Osterburg',
        'Ochsenfurt', 'Olpe', 'Osterodem Harz', 'Oranienburg',
        'Oberviechtach', 'Oschatz', 'Potsdam', 'Passau', 'Pfaffenhofenner Ilm',
        'Parsberg', 'Paderborn', 'Parchim', 'Peine', 'Pegnitz',
        'Perleberg', 'Pinneberg', 'Pritzwalk', 'Plauen', 'Pößneck',
        'Pirmasens', 'Pasewalk', 'Prenzlau', 'Querfurt', 'Quedlinburg',
        'Regensburg', 'Rastatt', 'Ribnitz-Damgarten', 'Recklinghausen',
        'Regen', 'Rehau', 'Roth', 'Riesa', 'Rochlitz', 'Rathenow',
        'Rosenheim', 'Roding', 'Rockenhausen', 'Rothenburg oberauber',
        'Reutlingen', 'Rudolstadt', 'Ravensburg', 'Rottweil', 'Stuttgart',
        'Schwandorf', 'Säckingen', 'Stadtsteinach', 'Saarbrücken',
        'Strasburg', 'Schleiz', 'Stade', 'Sondershausen', 'Stendal',
        'Sebnitz', 'Seelow', 'Scheinfeld', 'Senftenberg', 'Staßfurt',
        'Sangerhausen', 'Schwäbisch Hall', 'Suhl', 'Siegen', 'Sigmaringen',
        'Saulgau', 'Schmölln', 'Saarlouis', 'Schlüchtern', 'Badalzungen',
        'Schwabmünchen', 'Schwerin', 'Soest', 'Schrobenhausen', 'Schongau',
        'Soltau', 'Sömmerda', 'Sonneberg', 'Spremberg', 'Strausberg',
        'Stadtroda', 'Steinfurt', 'Starnberg', 'Sternberg', 'Stade',
        'Staffelstein', 'Stollberg', 'Sulzbach-Rosenberg', 'Schweinfurt',
        'Schwarzenberg', 'Tecklenburg', 'Teterow', 'Torgau', 'Tirschenreuth',
        'Tuttlingen', 'Tübingen', 'Uelzen', 'Ueckermünde', 'Uffenheim',
        'Vechta', 'Vilsbiburg', 'Viersen', 'Viechtach', 'Vohenstrauß',
        'Warendorf', 'Wittenberg', 'Worbis', 'Wiedenbrück', 'Werdau',
        'Weimar', 'Wertingen', 'Wesel', 'Wolfenbüttel', 'Witzenhausen',
        'Wittstock', 'Wolgast', 'Wolmirstedt', 'Wolfach', 'Wolfratshausen',
        'Wernigerode', 'Waren', 'Weißenfels', 'Weißwasser', 'Wittmund',
        'Waldmünchen', 'Wunsiedel', 'Wurzen', 'Wetzlar', 'Wanzleben',
        'Zerbst', 'Zschopau', 'Zeulenroda', 'Zossen'
    )

    states = (
        'Baden-Württemberg', 'Bayern', 'Berlin', 'Brandenburg', 'Bremen',
        'Hamburg', 'Hessen', 'Mecklenburg-Vorpommern', 'Niedersachsen',
        'Nordrhein-Westfalen', 'Rheinland-Pfalz', 'Saarland', 'Sachsen',
        'Sachsen-Anhalt', 'Schleswig-Holstein', 'Thüringen'
    )

    countries = (
        'Afghanistan', 'Alandinseln', 'Albanien', 'Algerien', 'Amerikanisch-Ozeanien',
        'Amerikanisch-Samoa', 'Amerikanische Jungferninseln',
        'Andorra', 'Angola', 'Anguilla', 'Antarktis', 'Antigua und Barbuda',
        'Argentinien', 'Armenien', 'Aruba', 'Aserbaidschan', 'Australien',
        'Ägypten', 'Äquatorialguinea', 'Äthiopien', 'Äußeres Ozeanien',
        'Bahamas', 'Bahrain', 'Bangladesch', 'Barbados', 'Belarus', 'Belgien',
        'Belize', 'Benin', 'Bermuda', 'Bhutan', 'Bolivien', 'Bosnien und Herzegowina',
        'Botsuana', 'Bouvetinsel', 'Brasilien', 'Britische Jungferninseln',
        'Britisches Territorium im Indischen Ozean', 'Brunei Darussalam',
        'Bulgarien', 'Burkina Faso', 'Burundi', 'Chile', 'China',
        'Cookinseln', 'Costa Rica', 'Côte d’Ivoire', 'Demokratische Republik Kongo',
        'Demokratische Volksrepublik Korea', 'Deutschland',
        'Dominica', 'Dominikanische Republik', 'Dschibuti', 'Dänemark',
        'Ecuador', 'El Salvador', 'Eritrea', 'Estland',
        'Falklandinseln', 'Fidschi', 'Finnland', 'Frankreich', 'Französisch-Guayana',
        'Französisch-Polynesien',
        'Färöer', 'Gabun', 'Gambia', 'Georgien', 'Ghana',
        'Gibraltar', 'Grenada', 'Griechenland', 'Grönland', 'Guadeloupe',
        'Guam', 'Guatemala', 'Guernsey', 'Guinea', 'Guinea-Bissau', 'Guyana',
        'Haiti', 'Heard- und McDonald-Inseln', 'Honduras', 'Indien',
        'Indonesien', 'Irak', 'Iran', 'Irland', 'Island', 'Isle of Man',
        'Israel', 'Italien', 'Jamaika', 'Japan', 'Jemen', 'Jersey',
        'Jordanien', 'Kaimaninseln', 'Kambodscha', 'Kamerun', 'Kanada', 'Kap Verde',
        'Kasachstan', 'Katar', 'Kenia', 'Kirgisistan', 'Kiribati',
        'Kokosinseln', 'Kolumbien', 'Komoren', 'Kongo', 'Kroatien', 'Kuba',
        'Kuwait', 'Laos', 'Lesotho', 'Lettland', 'Libanon', 'Liberia',
        'Libyen', 'Liechtenstein', 'Litauen', 'Luxemburg', 'Madagaskar',
        'Malawi', 'Malaysia', 'Malediven', 'Mali', 'Malta', 'Marokko',
        'Marshallinseln', 'Martinique', 'Mauretanien', 'Mauritius',
        'Mayotte', 'Mazedonien', 'Mexiko', 'Mikronesien', 'Monaco',
        'Mongolei', 'Montenegro', 'Montserrat', 'Mosambik', 'Myanmar',
        'Namibia', 'Nauru', 'Nepal', 'Neukaledonien', 'Neuseeland',
        'Nicaragua', 'Niederlande', 'Niederländische Antillen', 'Niger',
        'Nigeria', 'Niue', 'Norfolkinsel', 'Norwegen', 'Nördliche Marianen',
        'Oman', 'Osttimor', 'Österreich', 'Pakistan', 'Palau',
        'Palästinensische Gebiete', 'Panama', 'Papua-Neuguinea', 'Paraguay',
        'Peru', 'Philippinen', 'Pitcairn', 'Polen', 'Portugal', 'Puerto Rico',
        'Republik Korea', 'Republik Moldau', 'Ruanda', 'Rumänien',
        'Russische Föderation', 'Réunion', 'Salomonen', 'Sambia', 'Samoa',
        'San Marino', 'Saudi-Arabien', 'Schweden', 'Schweiz', 'Senegal',
        'Serbien', 'Serbien und Montenegro', 'Seychellen', 'Sierra Leone',
        'Simbabwe', 'Singapur', 'Slowakei', 'Slowenien', 'Somalia',
        'Sonderverwaltungszone Hongkong', 'Sonderverwaltungszone Macao',
        'Spanien', 'Sri Lanka', 'St. Barthélemy', 'St. Helena', 'St. Kitts und Nevis',
        'St. Lucia', 'St. Martin', 'St. Pierre und Miquelon',
        'St. Vincent und die Grenadinen', 'Sudan', 'Suriname', 'Svalbard und Jan Mayen',
        'Swasiland', 'Syrien', 'São Tomé und Príncipe',
        'Südafrika', 'Südgeorgien und die Südlichen Sandwichinseln',
        'Tadschikistan', 'Taiwan', 'Tansania', 'Thailand', 'Togo', 'Tokelau',
        'Tonga', 'Trinidad und Tobago', 'Tschad', 'Tschechische Republik',
        'Tunesien', 'Turkmenistan', 'Turks- und Caicosinseln', 'Tuvalu',
        'Türkei', 'Uganda', 'Ukraine', 'Ungarn', 'Uruguay', 'Usbekistan',
        'Vanuatu', 'Vatikanstadt', 'Venezuela', 'Vereinigte Arabische Emirate',
        'Vereinigte Staaten', 'Vereinigtes Königreich', 'Vietnam', 'Wallis und Futuna',
        'Weihnachtsinsel', 'Westsahara', 'Zentralafrikanische Republik',
        'Zypern'
    )

    @classmethod
    def street_suffix_short(cls):
        return cls.random_element(cls.street_suffixes_short)

    @classmethod
    def street_suffix_long(cls):
        return cls.random_element(cls.street_suffixes_long)

    @classmethod
    def city_name(cls):
        return cls.random_element(cls.cities)

    @classmethod
    def state(cls):
        return cls.random_element(cls.states)

########NEW FILE########
__FILENAME__ = company
from __future__ import unicode_literals
from ..company import Provider as CompanyProvider


class Provider(CompanyProvider):
    formats = (
        '{{last_name}} {{company_suffix}}',
        '{{last_name}} {{last_name}} {{company_suffix}}',
        '{{last_name}}',
    )

    company_suffixes = (
    	'e.G.', 'e.V.', 'GbR', 'GbR', 'OHG mbH', 'GmbH & Co. OHG',
    	'AG & Co. OHG', 'GmbH', 'GmbH', 'GmbH', 'GmbH', 'AG', 'AG', 'AG',
    	'AG', 'KG', 'KG', 'KG', 'GmbH & Co. KG', 'GmbH & Co. KG',
    	'AG & Co. KG', 'Stiftung & Co. KG', 'KGaA', 'GmbH & Co. KGaA',
    	'AG & Co. KGaA', 'Stiftung & Co. KGaA'
    )

########NEW FILE########
__FILENAME__ = internet
# coding=utf-8
from __future__ import unicode_literals
from ..internet import Provider as InternetProvider

import re


class Provider(InternetProvider):

    free_email_domains = (
        'web.de', 'gmail.com', 'hotmail.de', 'yahoo.de', 'googlemail.com',
        'aol.de', 'gmx.de'
    )
    tlds = ('com', 'com', 'com', 'net', 'org', 'de', 'de', 'de')

    @staticmethod
    def _to_ascii(string):
        replacements = (
            ('ä', 'ae'), ('Ä', 'Ae'),
            ('ö', 'oe'), ('Ö', 'Oe'),
            ('ü', 'ue'), ('Ü', 'Ue'),
            ('ß', 'ss')
        )
        for search, replace in replacements:
            string = string.replace(search, replace)

        return string

    def user_name(self):
        pattern = self.random_element(self.user_name_formats)
        return self._to_ascii(
            self.bothify(self.generator.parse(pattern)
        ).lower())

    def domain_word(self):
        company = self.generator.format('company')
        company_elements = company.split(' ')
        company = self._to_ascii(company_elements.pop(0))
        return re.sub(r'\W', '', company).lower()

########NEW FILE########
__FILENAME__ = person
# coding=utf-8
from __future__ import unicode_literals
from ..person import Provider as PersonProvider


class Provider(PersonProvider):
    formats = (
        '{{first_name_male}} {{last_name}}',
        '{{first_name_male}} {{last_name}}',
        '{{first_name_male}} {{last_name}}',
        '{{first_name_male}} {{last_name}}',
        '{{first_name_male}} {{last_name}}-{{last_name}}',
        '{{first_name_female}} {{last_name}}',
        '{{first_name_female}} {{last_name}}',
        '{{first_name_female}} {{last_name}}',
        '{{first_name_female}} {{last_name}}',
        '{{first_name_female}} {{last_name}}-{{last_name}}',
        '{{prefix_male}} {{first_name_male}} {{last_name}}',
        '{{prefix_female}} {{first_name_female}} {{last_name}}',
        '{{first_name_male}} {{last_name}} {{suffix}}',
        '{{first_name_female}} {{last_name}} {{suffix}}',
        '{{prefix_male}} {{first_name_male}} {{last_name}} {{suffix}}',
        '{{prefix_female}} {{first_name_female}} {{last_name}} {{suffix}}'
    )

    first_names_male = (
        'Abel', 'Abraham', 'Adalbero', 'Adam', 'Adamo', 'Adolfo', 'Adrian',
        'Adriano', 'Adrianus', 'Adrien', 'Alain', 'Alajos', 'Alan', 'Albain',
        'Alban', 'Albano', 'Alberto', 'Albin', 'Alec', 'Alejandro',
        'Alessandro', 'Alessio', 'Alex', 'Alexander', 'Alexandre',
        'Alexandros', 'Alexej', 'Alexis', 'Alfons', 'Alfonso', 'Aljoscha',
        'Allan', 'Allen', 'Alois', 'Alon', 'Alonzo', 'Alphonse', 'Alwin',
        'Amadeo', 'Amadeus', 'Amandus', 'Amos', 'Anatol', 'Anatole',
        'Anatolij', 'Anders', 'Andi', 'Andor', 'Andre', 'Andreas', 'Andrej',
        'Andrew', 'Andrijan', 'Andy', 'Angelus', 'Ansgar', 'Anthony',
        'Antoine', 'Anton', 'Antonio', 'Araldo', 'Aram', 'Argus', 'Arjan',
        'Armin', 'Arminio', 'Arnaldo', 'Arnault', 'Arndt', 'Arne', 'Arno',
        'Arnold', 'Arrigo', 'Art', 'Arthur', 'Artur', 'Arturo', 'August',
        'Auguste', 'Augustin', 'Aurelius', 'Axel', 'Balduin', 'Balthasar',
        'Bardo', 'Barnabas', 'Barnard', 'Barney', 'Baruch', 'Basil',
        'Basilius', 'Bastian', 'Bastien', 'Battista', 'Beatus', 'Beltrame',
        'Beltran', 'Ben', 'Benedetto', 'Benedict', 'Benedikt', 'Bengt',
        'Beniamino', 'Benignus', 'Benito', 'Benjamin', 'Benjy', 'Bennett',
        'Benno', 'Benny', 'Benoit', 'Beppe', 'Bernard', 'Bernardo', 'Bernd',
        'Bernhard', 'Bernie', 'Bert', 'Berthold', 'Bertoldo', 'Bertram',
        'Bertrame', 'Bill', 'Billy', 'Birger', 'Bjarne', 'Björn', 'Bob',
        'Bobby', 'Bodo', 'Bonifatius', 'Boris', 'Bosco', 'Brendan', 'Brian',
        'Bruno', 'Bryan', 'Burkhard', 'Camillo', 'Camilo', 'Carl', 'Carlo',
        'Carlos', 'Carol', 'Carsten', 'Cäsar', 'Casimir', 'Caspar', 'Cecil',
        'Ceddric', 'Cedric', 'Celestino', 'Charles', 'Charlie', 'Chico',
        'Chip', 'Chris', 'Christian', 'Christoph', 'Christophe',
        'Christopher', 'Christy', 'Chuck', 'Cian', 'Cillian', 'Clarence',
        'Clark', 'Clas', 'Claude', 'Claudio', 'Claudius', 'Claus', 'Clayton',
        'Clemens', 'Cliff', 'Clifford', 'Clint', 'Clinton', 'Cody', 'Colin',
        'Collin', 'Conan', 'Connor', 'Conny', 'Conor', 'Conrad',
        'Constantine', 'Cooper', 'Cordell', 'Cornelius', 'Corvinus',
        'Cristobal', 'Curd', 'Curt', 'Curtis', 'Curtiz', 'Cyril', 'Cyrill',
        'Damian', 'Damon', 'Dan', 'Daniel', 'Daniele', 'Danilo', 'Danny',
        'Dario', 'Darius', 'Dave', 'David', 'Davide', 'Dawson', 'Dean',
        'Demetrius', 'Denis', 'Deniz', 'Dennis', 'Derek', 'Desiderius',
        'Detlef', 'Detlev', 'Dick', 'Diego', 'Dieter', 'Dimitrij', 'Dirk',
        'Dolf', 'Domenico', 'Domingo', 'Dominic', 'Dominik', 'Dominikus',
        'Dominique', 'Donald', 'Donatello', 'Donato', 'Donatus', 'Dorian',
        'Douglas', 'Dragan', 'Duarte', 'Duncan', 'Dylan', 'Earnest', 'Earvin',
        'Eike', 'Eleasar', 'Elia', 'Elian', 'Elias', 'Elijah', 'Ellison',
        'Elmar', 'Elroy', 'Emanuel', 'Emanuele', 'Emil', 'Emile', 'Emilian',
        'Emiliano', 'Emilio', 'Emmanuel', 'Endrik', 'Enrico', 'Enrique',
        'Enzo', 'Ephraim', 'Erasmus', 'Eric', 'Erik', 'Ermanno', 'Ernest',
        'Ernestin', 'Ernesto', 'Eros', 'Errol', 'Etienne', 'Eugen', 'Eugene',
        'Eugenio', 'Eusebius', 'Everett', 'Ezra', 'Fabiano', 'Fabien',
        'Fabio', 'Fabius', 'Fabrice', 'Fabricius', 'Fabrizio', 'Falco',
        'Falk', 'Falko', 'Faruk', 'Faustus', 'Favian', 'Federico',
        'Federigo', 'Fedor', 'Felice', 'Feliciano', 'Felicien', 'Felipe',
        'Felix', 'Felton', 'Feodor', 'Ferdinand', 'Fergus', 'Fernand',
        'Fernando', 'Ferrante', 'Ferris', 'Fidel', 'Fidelio', 'Fidelis',
        'Fidelius', 'Filippo', 'Finan', 'Finn', 'Fiore', 'Fjodor', 'Flavian',
        'Flemming', 'Fletcher', 'Flint', 'Florens', 'Florentin', 'Florian',
        'Florin', 'Florus', 'Floyd', 'Forrest', 'Forrester', 'Forster',
        'Foster', 'Fox', 'Francesco', 'Francis', 'Francisco', 'Franco',
        'Francois', 'Franek', 'Frank', 'Frankie', 'Franklin', 'Franziskus',
        'Frasier', 'Frayne', 'Fred', 'Freddy', 'Frederic', 'Frederick',
        'Frederik', 'Freeman', 'Fremont', 'Fridericus', 'Fridolin',
        'Friedel', 'Frye', 'Gabriel', 'Gaetan', 'Gaetano', 'Gallus', 'Garcia',
        'Garfield', 'Garin', 'Garnier', 'Garrick', 'Garrison', 'Garron',
        'Garry', 'Garson', 'Gaspar', 'Gaspard', 'Gaspare', 'Gaston',
        'Gastonne', 'Gates', 'Gauthier', 'Gavin', 'Gene', 'Geoffrey',
        'Geoffroy', 'Geordi', 'Georg', 'George', 'Georges', 'Gerald',
        'Geraldo', 'Gerard', 'Geraud', 'Gerd', 'Gereon', 'Germain', 'German',
        'Germano', 'Gernot', 'Gerold', 'Geronimo', 'Gerrit', 'Gerry', 'Gert',
        'Gerulf', 'Gerwin', 'Giacomo', 'Gian', 'Giancarlo', 'Gianni',
        'Gibson', 'Gideon', 'Gil', 'Gilbert', 'Gilberto', 'Gilles',
        'Gillian', 'Gino', 'Gioacchino', 'Giorgio', 'Giovanni', 'Giraldo',
        'Gisbert', 'Gitano', 'Giuliano', 'Giulio', 'Giuseppe', 'Giusto',
        'Glen', 'Glenn', 'Goliath', 'Goran', 'Gordon', 'Gordy', 'Goswin',
        'Götz', 'Graciano', 'Graham', 'Grayson', 'Greg', 'Gregg', 'Gregoire',
        'Gregor', 'Gregory', 'Griffin', 'Grover', 'Gualtier', 'Gualtiero',
        'Guglielmo', 'Guido', 'Guillaume', 'Guillermo', 'Gunnar', 'Gunter',
        'Günter', 'Gunther', 'Günther', 'Gus', 'Gustavo', 'Gustl',
        'Gutierre', 'Guy', 'Hajo', 'Hamilton', 'Hamlet', 'Hampton', 'Hanley',
        'Hannes', 'Hans', 'Harald', 'Hardy', 'Harley', 'Harlow', 'Harold',
        'Haroun', 'Harrison', 'Harry', 'Harvey', 'Hasso', 'Hauke', 'Havel',
        'Hector', 'Heiko', 'Heiner', 'Heino', 'Hektor', 'Helge', 'Helmut',
        'Helmuth', 'Hendrick', 'Hendrik', 'Hennes', 'Henning', 'Henri',
        'Henrick', 'Henrik', 'Henry', 'Herald', 'Herbie', 'Hercules',
        'Herold', 'Herwig', 'Hieronymus', 'Hilarius', 'Holger', 'Holm',
        'Homer', 'Horace', 'Horatio', 'Horaz', 'Howard', 'Howie', 'Hugh',
        'Hugo', 'Humphrey', 'Hunter', 'Ignatius', 'Ignaz', 'Ignazio', 'Igor',
        'Ilian', 'Ilja', 'Immanuel', 'Ingo', 'Ingolf', 'Ingvar', 'Irenäus',
        'Irvin', 'Irving', 'Irwin', 'Isaac', 'Isaak', 'Isai', 'Isaiah',
        'Isidor', 'Istvan', 'Ivan', 'Ivo', 'Jackson', 'Jacky', 'Jacob',
        'Jacques', 'Jacquin', 'Jadon', 'Jago', 'Jaime', 'Jake', 'Jakob',
        'Jamal', 'James', 'Jan', 'Janis', 'Jannes', 'Jannik', 'Janning',
        'Janos', 'Janosch', 'Jaques', 'Jared', 'Jarik', 'Jarl', 'Jarno',
        'Jaro', 'Jaromir', 'Jarrett', 'Jascha', 'Jason', 'Jasper', 'Jay',
        'Jean', 'Jeff', 'Jefferson', 'Jeffrey', 'Jendrick', 'Jens', 'Jered',
        'Jeremiah', 'Jeremias', 'Jeremie', 'Jeremy', 'Jerold', 'Jerom',
        'Jerome', 'Jerrick', 'Jerry', 'Jesaja', 'Jesko', 'Jesse', 'Jim',
        'Jimmy', 'Jirko', 'Jo', 'Joakim', 'Joao', 'Joaquin', 'Joe', 'Joel',
        'Joey', 'John', 'Johnny', 'Jokim', 'Jonah', 'Jonas', 'Jonathan',
        'Jonny', 'Jordan', 'Jordano', 'Jörg', 'Jorge', 'Jose', 'Josef',
        'Joseph', 'Josh', 'Joshua', 'Josias', 'Jost', 'Josua', 'Josue',
        'Jourdain', 'Juan', 'Juanito', 'Jud', 'Jules', 'Julien', 'Julio',
        'Julius', 'Jürgen', 'Jurij', 'Justin', 'Justinian', 'Justus', 'Kain',
        'Kaj', 'Kajetan', 'Kallistus', 'Karsten', 'Kasimir', 'Kaspar',
        'Keamon', 'Keith', 'Ken', 'Kenan', 'Kenneth', 'Keno', 'Kersten',
        'Kerwin', 'Kevin', 'Kian', 'Kilian', 'Kim', 'Kiran', 'Klaas',
        'Klaus', 'Klemens', 'Kleopas', 'Knud', 'Knut', 'Kolja', 'Konrad',
        'Konstantin', 'Korbin', 'Korbinian', 'Kordt', 'Kristian', 'Kristof',
        'Kristoffer', 'Kuno', 'Kurt', 'Kyros', 'Lajos', 'Lambert', 'Lamberto',
        'Larry', 'Lars', 'Laslo', 'Lasse', 'Laurent', 'Laurente',
        'Laurentius', 'Laurenz', 'Laurenzo', 'Lawrence', 'Lazarus', 'Lazlo',
        'Leander', 'Lee', 'Leif', 'Leigh', 'Lennart', 'Lenny', 'Lenz', 'Leo',
        'Leon', 'Leonard', 'Leonardo', 'Leonce', 'Leone', 'Leonello',
        'Leonhard', 'Leopold', 'Leopoldo', 'Leroy', 'Lesley', 'Lester',
        'Leverett', 'Levi', 'Lew', 'Lewis', 'Lex', 'Liborius', 'Lienhard',
        'Linus', 'Lion', 'Lionel', 'LLoyd', 'Lobo', 'Loic', 'Lorenz',
        'Lorenzo', 'Loris', 'Lothaire', 'Lou', 'Louie', 'Louis', 'Lovis',
        'Luc', 'Luca', 'Lucan', 'Lucas', 'Luciano', 'Lucien', 'Lucius',
        'Ludovico', 'Ludwig', 'Luigi', 'Luis', 'Lukas', 'Luke', 'Lutger',
        'Luther', 'Lutz', 'Lyonel', 'Maik', 'Malte', 'Malwin', 'Manolito',
        'Manolo', 'Manuel', 'Marc', 'Marcel', 'Marcello', 'Marcellus',
        'Marco', 'Marcus', 'Marek', 'Marian', 'Marin', 'Marino', 'Marinus',
        'Mario', 'Marius', 'Mark', 'Markus', 'Marlon', 'Maro', 'Marten',
        'Martin', 'Marvin', 'Massimo', 'Mathias', 'Mathieu', 'Mathis',
        'Matt', 'Matteo', 'Matthäus', 'Matthes', 'Matthew', 'Matthias',
        'Matthieu', 'Maurice', 'Mauritius', 'Mauritz', 'Maurizio', 'Mauro',
        'Maurus', 'Max', 'Maxence', 'Maxi', 'Maxime', 'Maximilian',
        'Maximilien', 'Melchior', 'Merlin', 'Michael', 'Michail', 'Michel',
        'Michele', 'Mick', 'Mickey', 'Miguel', 'Mika', 'Mikael', 'Mike',
        'Mikel', 'Miklos', 'Milan', 'Milo', 'Mirko', 'Miro', 'Miroslav',
        'Mischa', 'Mitja', 'Morgan', 'Moritz', 'Morris', 'Morten', 'Nat',
        'Nathan', 'Nathanael', 'Nathaniel', 'Nepomuk', 'Nero', 'Neron',
        'Newton', 'Niccolo', 'Nicholas', 'Nick', 'Nicki', 'Nico', 'Nicola',
        'Nicolai', 'Nicolaj', 'Nicolas', 'Niels', 'Nigel', 'Nikita',
        'Niklas', 'Niklaus', 'Niko', 'Nikodemus', 'Nikolai', 'Nikolaus',
        'Nils', 'Noah', 'Noel', 'Norbert', 'Norberto', 'Norman', 'Odin',
        'Odo', 'Odysseus', 'Olaf', 'Oleg', 'Oliver', 'Olivier', 'Oliviero',
        'Olof', 'Oluf', 'Omar', 'Omer', 'Orlando', 'Orson', 'Oskar',
        'Osvaldo', 'Oswin', 'Otello', 'Othello', 'Otto', 'Ove', 'Owain',
        'Owen', 'Paco', 'Paddy', 'Palmiro', 'Pancho', 'Paolo', 'Pascal',
        'Pat', 'Patrice', 'Patricio', 'Patricius', 'Patrick', 'Patrizio',
        'Patrizius', 'Paul', 'Paulin', 'Paulus', 'Pawel', 'Pedro', 'Peer',
        'Pepe', 'Pepito', 'Peppone', 'Per', 'Percy', 'Perez', 'Pete',
        'Peter', 'Phil', 'Philip', 'Philipp', 'Philippe', 'Philo', 'Piedro',
        'Pier', 'Piero', 'Pierre', 'Piet', 'Pieter', 'Pietro', 'Pinkus',
        'Pippin', 'Pitt', 'Pius', 'Placide', 'Placido', 'Placidus', 'Poldi',
        'Quint', 'Quintin', 'Quintinus', 'Quintus', 'Quirin', 'Quirino',
        'Raffaele', 'Raffaello', 'Raffaelo', 'Raimondo', 'Raimund',
        'Raimundo', 'Rainer', 'Rainier', 'Ralf', 'Ralph', 'Ramon', 'Randolf',
        'Randolph', 'Randy', 'Raoul', 'Raphael', 'Rasmus', 'Rasul', 'Raul',
        'Ray', 'Raymond', 'Regnier', 'Reik', 'Reiner', 'Remo', 'Renato',
        'Renatus', 'Renaud', 'Rene', 'Renja', 'Reto', 'Reynold', 'Ricardo',
        'Riccardo', 'Rick', 'Ricky', 'Rico', 'Rinaldo', 'Robby', 'Robert',
        'Roberto', 'Robin', 'Rocco', 'Rock', 'Rocky', 'Rod', 'Rodolfo',
        'Rodolphe', 'Rodrigo', 'Rodrigue', 'Rodrique', 'Roger', 'Roland',
        'Rolando', 'Rolf', 'Romain', 'Roman', 'Romano', 'Romeo', 'Romero',
        'Ronald', 'Ronan', 'Ronny', 'Rory', 'Ross', 'Rowan', 'Rowland',
        'Roy', 'Ruben', 'Rudolf', 'Rudolph', 'Ruggero', 'Rupert', 'Ryan',
        'Salomon', 'Salomone', 'Salvador', 'Salvator', 'Salvatore', 'Sam',
        'Sammy', 'Samuel', 'Samuele', 'Sander', 'Sandor', 'Sandro', 'Sandy',
        'Sascha', 'Sauveur', 'Schorsch', 'Scipio', 'Scott', 'Sean',
        'Sebastian', 'Sebastiano', 'Sebastien', 'Selim', 'Semjon', 'Sepp',
        'Serenus', 'Serge', 'Sergej', 'Sergio', 'Sergius', 'Servatius',
        'Severiano', 'Severin', 'Severo', 'Sidney', 'Sidonius', 'Silas',
        'Silvain', 'Silvan', 'Silvano', 'Silvanus', 'Silverio', 'Silverius',
        'Silvester', 'Silvestro', 'Silvio', 'Silvius', 'Simjon', 'Simon',
        'Simone', 'Sinclair', 'Sixt', 'Sixtus', 'Slade', 'Solomon', 'Söncke',
        'Sören', 'Spencer', 'Stan', 'Stanislaus', 'Stanislaw', 'Stanley',
        'Stefan', 'Stefano', 'Steffen', 'Sten', 'Stephan', 'Stephen',
        'Steve', 'Steven', 'Stewart', 'Stig', 'Stuart', 'Sven', 'Sylvain',
        'Sylvester', 'Tam', 'Tarek', 'Tassilo', 'Tasso', 'Ted', 'Teddy',
        'Teobaldo', 'Thaddäus', 'Theo', 'Theodor', 'Theodore', 'Thierry',
        'Thimotheus', 'Thomas', 'Thommy', 'Thoralf', 'Thorben', 'Thore',
        'Thorsten', 'Tiberio', 'Tiberius', 'Tibor', 'Till', 'Tim', 'Timmy',
        'Timo', 'Timofej', 'Timon', 'Timoteo', 'Timothee', 'Timotheus',
        'Timothy', 'Tin', 'Tito', 'Titus', 'Tizian', 'Tiziano', 'Tjade',
        'Tjark', 'Tobi', 'Tobia', 'Tobiah', 'Tobias', 'Tobie', 'Tobis',
        'Toby', 'Tom', 'Tommaso', 'Tommy', 'Toni', 'Tonio', 'Tony', 'Torben',
        'Torin', 'Torsten', 'Tristan', 'Tycho', 'Tyler', 'Tyson', 'Udo',
        'Ugo', 'Ugolino', 'Ulf', 'Uli', 'Ulli', 'Ulric', 'Ulrich', 'Ulrico',
        'Umberto', 'Urbain', 'Urban', 'Urbano', 'Urias', 'Uriel', 'Ursus',
        'Uwe', 'Valentiano', 'Valentin', 'Valentino', 'Valerian', 'Valerio',
        'Valerius', 'Valery', 'Vasco', 'Veit', 'Veltin', 'Vernon', 'Vicente',
        'Vico', 'Victor', 'Viktor', 'Vincent', 'Vincenzo', 'Vinzenez',
        'Vinzenz', 'Virgil', 'Vitalis', 'Vito', 'Vittore', 'Vittoriano',
        'Vittorio', 'Volker', 'Wallace', 'Walt', 'Warner', 'Warren', 'Wido',
        'Wigand', 'Wilbur', 'Willi', 'William', 'Wilpert', 'Winston', 'Wolf',
        'Wolfgang', 'Woodrow', 'Woody', 'Xaver'
    )

    first_names_female = (
        'Abby', 'Abelina', 'Abigail', 'Adelaide', 'Adeline', 'Adina',
        'Adriana', 'Adrienne', 'Afra', 'Agatha', 'Agnes', 'Aida', 'Aimee',
        'Aischa', 'Albertine', 'Alea', 'Aleksandra', 'Alena', 'Alessa',
        'Alessandra', 'Alessia', 'Alexa', 'Alexandra', 'Alexia', 'Alexis',
        'Alice', 'Alicia', 'Alida', 'Alina', 'Aline', 'Alisa', 'Alissa',
        'Alisson', 'Amabella', 'Amadea', 'Amanda', 'Amelia', 'Amelie',
        'Amina', 'Amy', 'Ana', 'Anastasia', 'Andrea', 'Andrina', 'Anette',
        'Angela', 'Angelika', 'Angelina', 'Angelique', 'Anina', 'Anine',
        'Anita', 'Anja', 'Anjalie', 'Anke', 'Ann', 'Anna', 'Annabel',
        'Annabell', 'Annabella', 'Annabelle', 'Anne', 'Annett', 'Annette',
        'Annika', 'Annina', 'Antje', 'Antoinette', 'Antonella', 'Antonia',
        'Arabella', 'Ariadne', 'Ariana', 'Ariane', 'Arianna', 'Ariella',
        'Arielle', 'Arlene', 'Arlette', 'Arwenna', 'Ashley', 'Asta',
        'Astrid', 'Audrey', 'Aurelia', 'Barbara', 'Bärbel', 'Bastiane', 'Bea',
        'Beata', 'Beatrice', 'Beatrix', 'Becky', 'Belinda', 'Bella',
        'Bellana', 'Belle', 'Benedikta', 'Benita', 'Bente', 'Beppina',
        'Berenike', 'Berit', 'Bernadett', 'Bernadette', 'Bernadine',
        'Betina', 'Betsy', 'Bettina', 'Betty', 'Bianca', 'Bianka', 'Bibiana',
        'Bibiane', 'Birgit', 'Birgitt', 'Bodil', 'Bridget', 'Brigitta',
        'Brigitte', 'Britta', 'Caitlin', 'Cameron', 'Camilla', 'Camille',
        'Cammy', 'Cara', 'Carin', 'Carina', 'Carinna', 'Carla', 'Carmela',
        'Carmelia', 'Carmen', 'Carol', 'Carola', 'Carole', 'Carolin',
        'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Cassandra', 'Cassie',
        'Catalin', 'Caterina', 'Catharina', 'Catherine', 'Cathrin',
        'Cathrine', 'Cathy', 'Catina', 'Catrin', 'Catriona', 'Cecile',
        'Cecilia', 'Cecilie', 'Celeste', 'Celestine', 'Celina', 'Celine',
        'Chantal', 'Charleen', 'Charlotte', 'Chatrina', 'Chelsea', 'Chiara',
        'Chloe', 'Chrissy', 'Christa', 'Christiana', 'Christiane',
        'Christin', 'Christina', 'Christine', 'Chyna', 'Ciara', 'Cinderella',
        'Cindy', 'Cinja', 'Cira', 'Claire', 'Clara', 'Clarissa', 'Claudette',
        'Claudia', 'Claudine', 'Clea', 'Cleannis', 'Clementia', 'Clementine',
        'Cleo', 'Clio', 'Cliona', 'Clodia', 'Cloris', 'Coletta', 'Colette',
        'Connie', 'Conny', 'Constance', 'Constanze', 'Cora', 'Coral',
        'Coralie', 'Cordelia', 'Cordula', 'Corin', 'Corina', 'Corinna',
        'Corinne', 'Cornelia', 'Cosette', 'Cosima', 'Cynthia', 'Daisy',
        'Dajana', 'Daliah', 'Damaris', 'Damia', 'Damiana', 'Dana', 'Dania',
        'Danica', 'Daniela', 'Daniele', 'Daniella', 'Danielle', 'Danja',
        'Daphne', 'Darcie', 'Daria', 'Darina', 'Dawn', 'Dayna', 'Debbie',
        'Debby', 'Debora', 'Deborah', 'Deetya', 'Delia', 'Delphine', 'Dena',
        'Denise', 'Desdemona', 'Desideria', 'Desiree', 'Diana', 'Diane',
        'Didina', 'Dina', 'Dinah', 'Dolly', 'Dolores', 'Domenica',
        'Dominika', 'Dominique', 'Donna', 'Dora', 'Doreen', 'Dorina',
        'Doris', 'Dorit', 'Doro', 'Dorothea', 'Dorothee', 'Dorothy', 'Dunja',
        'Ebony', 'Edda', 'Edita', 'Edvige', 'Edwina', 'Eike', 'Eila',
        'Eileen', 'Ela', 'Elaine', 'Eleanor', 'Elektra', 'Elena', 'Eleonora',
        'Eleonore', 'Eliane', 'Elisa', 'Elisabeth', 'Elise', 'Elizabeth',
        'Elke', 'Ella', 'Ellen', 'Elly', 'Eloise', 'Elsa', 'Elsbeth',
        'Elvira', 'Elvire', 'Emanuela', 'Emanuelle', 'Emilia', 'Emilie',
        'Emily', 'Emma', 'Enrica', 'Enya', 'Erika', 'Erin', 'Ernesta',
        'Ernestina', 'Ernestine', 'Esmerelda', 'Esra', 'Estella', 'Estelle',
        'Ester', 'Esther', 'Etiennette', 'Eudoxia', 'Eugenia', 'Eunike',
        'Euphemia', 'Euphrasia', 'Eusebia', 'Eva', 'Evangelina', 'Evania',
        'Eve', 'Evelien', 'Evelin', 'Eveline', 'Evelyn', 'Evelyne', 'Evette',
        'Evi', 'Evita', 'Fabiane', 'Fabienne', 'Fabiola', 'Faith', 'Fanny',
        'Farrah', 'Fatima', 'Faustina', 'Faustine', 'Fay', 'Faye', 'Faylinn',
        'Federica', 'Fedora', 'Fee', 'Feli', 'Felice', 'Felicia',
        'Felicitas', 'Felicity', 'Felizitas', 'Feodora', 'Fergie', 'Fidelia',
        'Filia', 'Filiz', 'Finetta', 'Finja', 'Fiona', 'Fjodora', 'Flavia',
        'Fleur', 'Fleur', 'Flo', 'Flora', 'Florence', 'Florentina',
        'Florentine', 'Floria', 'Floriane', 'Florida', 'Florinda', 'Floris',
        'Fortuna', 'Frances', 'Francesca', 'Francisca', 'Franka', 'Franzi',
        'Franziska', 'Frauke', 'Freya', 'Friederike', 'Gabriela', 'Gabriele',
        'Gabriella', 'Gabrielle', 'Gaby', 'Gail', 'Galatea', 'Galina',
        'Gazelle', 'Gela', 'Geneva', 'Genoveva', 'Georgette', 'Georgia',
        'Georgina', 'Geraldene', 'Geraldine', 'Germain', 'Germaine',
        'Germana', 'Ghita', 'Gianna', 'Gigi', 'Gill', 'Gillian', 'Gina',
        'Ginevra', 'Ginger', 'Ginny', 'Giovanna', 'Gisela', 'Gisele',
        'Gisella', 'Giselle', 'Gitta', 'Giulia', 'Giuliana', 'Giulietta',
        'Giuseppa', 'Giuseppina', 'Giustina', 'Gladys', 'Gloria', 'Glory',
        'Goldie', 'Goldy', 'Grace', 'Gratia', 'Gratiana', 'Grazia', 'Greta',
        'Gretel', 'Gunda', 'Gwen', 'Gwenda', 'Gwendolin', 'Gwendolyn',
        'Gypsy', 'Hannah', 'Hanne', 'Harmony', 'Harriet', 'Hazel', 'Hedi',
        'Hedy', 'Heide', 'Heidi', 'Heike', 'Helen', 'Helena', 'Helene',
        'Helin', 'Hella', 'Hemma', 'Henrietta', 'Henriette', 'Henrike',
        'Hera', 'Hetty', 'Hilary', 'Hilda', 'Hilde', 'Holiday', 'Holli',
        'Holly', 'Hope', 'Ilana', 'Ilaria', 'Iliana', 'Iljana', 'Ilka',
        'Ilona', 'Ilse', 'Ilyssa', 'Imke', 'Ina', 'India', 'Indira', 'Indra',
        'Ines', 'Inga', 'Inge', 'Ingrid', 'Inka', 'Inken', 'Innozentia',
        'Iona', 'Ira', 'Irena', 'Irene', 'Irina', 'Iris', 'Irisa', 'Irma',
        'Isabel', 'Isabell', 'Isabella', 'Isabelle', 'Isis', 'Iva', 'Ivana',
        'Ivona', 'Ivonne', 'Jaclyn', 'Jacqueline', 'Jacqui', 'Jael', 'Jamari',
        'Jan', 'Jana', 'Jane', 'Janet', 'Janette', 'Janin', 'Janina',
        'Janine', 'Janique', 'Janna', 'Jannine', 'Jarla', 'Jasmin',
        'Jasmina', 'Jasmine', 'Jeanette', 'Jeanine', 'Jeanne', 'Jeannette',
        'Jeannine', 'Jekaterina', 'Jelena', 'Jenifer', 'Jenna', 'Jennelle',
        'Jennessa', 'Jennie', 'Jennifer', 'Jenny', 'Jennyfer', 'Jess',
        'Jessica', 'Jessie', 'Jessika', 'Jill', 'Joan', 'Joana', 'Joann',
        'Joanna', 'Joelle', 'Johanna', 'Jolanda', 'Jona', 'Jordana',
        'Jördis', 'Josee', 'Josefa', 'Josefina', 'Josefine', 'Josepha',
        'Josephine', 'Josiane', 'Josie', 'Jovita', 'Joy', 'Joyce', 'Juana',
        'Juanita', 'Judith', 'Judy', 'Julia', 'Juliana', 'Juliane',
        'Julianne', 'Julie', 'Juliet', 'Juliette', 'July', 'June', 'Justina',
        'Justine', 'Justise', 'Jutta', 'Kamilia', 'Kamilla', 'Karen',
        'Karima', 'Karin', 'Karina', 'Karla', 'Karola', 'Karolin',
        'Karolina', 'Karoline', 'Kassandra', 'Katalin', 'Katarina', 'Kate',
        'Katharina', 'Katharine', 'Käthe', 'Katherina', 'Katherine',
        'Kathleen', 'Kathrin', 'Kathrina', 'Kathryn', 'Kathy', 'Katinka',
        'Katja', 'Katjana', 'Katrin', 'Katrina', 'Katrine', 'Kayla', 'Keala',
        'Keelin', 'Kendra', 'Kerstin', 'Kiana', 'Kiara', 'Kim', 'Kira',
        'Kirsten', 'Kirstin', 'Kita', 'Klara', 'Klarissa', 'Klaudia',
        'Kleopatra', 'Kolina', 'Konstanze', 'Kora', 'Kordula', 'Kori',
        'Kornelia', 'Krista', 'Kristiane', 'Kristin', 'Kristina', 'Kristine',
        'Kyra', 'Laila', 'Lana', 'Lara', 'Laria', 'Larissa', 'Lätizia',
        'Laurel', 'Lauren', 'Laurence', 'Laurentia', 'Lauretta', 'Lavina',
        'Laya', 'Lea', 'Leah', 'Leandra', 'Lee', 'Leigh', 'Leila', 'Lena',
        'Leona', 'Leonie', 'Leontine', 'Leopoldine', 'Lesley', 'Leslie',
        'Levana', 'Levia', 'Lia', 'Liane', 'Libusa', 'Licia', 'Lidia',
        'Liesa', 'Liesbeth', 'Liese', 'Liesel', 'Lilian', 'Liliane',
        'Lilith', 'Lilli', 'Lillian', 'Lilo', 'Lily', 'Lina', 'Linda',
        'Lioba', 'Lisa', 'Lisbeth', 'Lise', 'Lisette', 'Liv', 'Livana',
        'Livia', 'Liz', 'Liza', 'Lizzie', 'Lola', 'Lora', 'Lorena',
        'Loretta', 'Lori', 'Lorraine', 'Lotte', 'Lotus', 'Louise', 'Luana',
        'Luca', 'Lucia', 'Luciana', 'Lucie', 'Lucy', 'Luigia', 'Luisa',
        'Luise', 'Luna', 'Luzia', 'Lydia', 'Lydie', 'Lynette', 'Lynn',
        'Maddalena', 'Madelaine', 'Madeleine', 'Madeline', 'Madison',
        'Madita', 'Madleine', 'Madlen', 'Madlene', 'Mae', 'Magda',
        'Magdalena', 'Maggy', 'Magret', 'Maia', 'Maike', 'Maiken', 'Mailin',
        'Maja', 'Malea', 'Malee', 'Malin', 'Malina', 'Mandy', 'Manja',
        'Manon', 'Manuela', 'Mara', 'Maraike', 'Marcella', 'Marcelle',
        'Marcia', 'Mareike', 'Maren', 'Margaret', 'Margareta', 'Margarete',
        'Margaretha', 'Margarita', 'Margaritha', 'Margherita', 'Margit',
        'Margitta', 'Margot', 'Margret', 'Margreth', 'Marguerite', 'Maria',
        'Mariam', 'Marian', 'Mariana', 'Marianna', 'Marianne', 'Marie',
        'Marieke', 'Mariella', 'Marielle', 'Marietta', 'Marija', 'Marika',
        'Marilies', 'Marilyn', 'Marina', 'Marion', 'Marisa', 'Marissa',
        'Marita', 'Maritta', 'Marjorie', 'Marla', 'Marleen', 'Marlen',
        'Marlena', 'Marlene', 'Marlies', 'Marlis', 'Marsha', 'Martha',
        'Marthe', 'Martina', 'Mary', 'Maryse', 'Mascha', 'Mathilda',
        'Mathilde', 'Matilde', 'Mattea', 'Maude', 'Maura', 'Maureen',
        'Maximiliane', 'May', 'Maya', 'Meg', 'Megan', 'Meike', 'Melanie',
        'Melia', 'Melina', 'Melinda', 'Melissa', 'Melitta', 'Melodie',
        'Meloney', 'Mercedes', 'Meret', 'Meri', 'Merle', 'Merline', 'Meryem',
        'Mia', 'Micaela', 'Michaela', 'Michele', 'Michelle', 'Milena',
        'Milla', 'Milva', 'Mimi', 'Minerva', 'Minna', 'Mira', 'Mirabella',
        'Mireille', 'Mirella', 'Mireya', 'Miriam', 'Mirijam', 'Mirjam',
        'Moesha', 'Moira', 'Mona', 'Moni', 'Monica', 'Monika', 'Monique',
        'Monja', 'Morgane', 'Muriel', 'Myriam', 'Nadin', 'Nadine', 'Nadja',
        'Nadjana', 'Naemi', 'Nancy', 'Nanette', 'Nani', 'Naomi', 'Nastasja',
        'Natalia', 'Natalie', 'Natanja', 'Natascha', 'Nathalie', 'Neeja',
        'Nena', 'Neria', 'Nerine', 'Nicol', 'Nicola', 'Nicole', 'Nicoletta',
        'Nicolette', 'Nike', 'Nikola', 'Nina', 'Ninja', 'Ninon', 'Noa',
        'Noelle', 'Noemi', 'Noemie', 'Nora', 'Norma', 'Nuala', 'Olga',
        'Olivia', 'Ophelia', 'Orania', 'Orla', 'Ornella', 'Orsola',
        'Ottilie', 'Paloma', 'Pam', 'Pamela', 'Pandora', 'Paola', 'Paolina',
        'Pascale', 'Pat', 'Patrice', 'Patricia', 'Patrizia', 'Patsy',
        'Patty', 'Paula', 'Paulette', 'Paulina', 'Pauline', 'Penelope',
        'Pepita', 'Petra', 'Philine', 'Philippa', 'Philomele', 'Philomena',
        'Phoebe', 'Phyllis', 'Pia', 'Pier', 'Prica', 'Prisca', 'Priscilla',
        'Priscille', 'Priska', 'Rachel', 'Rachel', 'Rachelle', 'Radomila',
        'Rafaela', 'Raffaela', 'Raffaella', 'Ragna', 'Rahel', 'Raja',
        'Ramona', 'Raphaela', 'Raquel', 'Rebecca', 'Rebekka', 'Regina',
        'Regine', 'Reisha', 'Renata', 'Renate', 'Renee', 'Resi', 'Rhea',
        'Rhoda', 'Rhonda', 'Ricarda', 'Riccarda', 'Rike', 'Rita', 'Roberta',
        'Romana', 'Romina', 'Romy', 'Ronja', 'Rosa', 'Rosalia', 'Rosalie',
        'Rosalinda', 'Rosalinde', 'Rosaline', 'Rose', 'Roseline', 'Rosetta',
        'Rosette', 'Rosi', 'Rosina', 'Rosine', 'Rossana', 'Roswitha',
        'Roxana', 'Roxane', 'Roxanne', 'Roxy', 'Rubina', 'Ruth', 'Sabine',
        'Sabrina', 'Sahra', 'Sally', 'Salome', 'Salvina', 'Samanta',
        'Samantha', 'Samira', 'Sandra', 'Sandrina', 'Sandrine', 'Sandy',
        'Sanne', 'Sanya', 'Saphira', 'Sara', 'Sarah', 'Sarina', 'Sascha',
        'Saskia', 'Scarlet', 'Scarlett', 'Schirin', 'Selina', 'Selma',
        'Serafina', 'Seraina', 'Seraphin', 'Seraphina', 'Seraphine',
        'Serena', 'Severina', 'Severine', 'Shana', 'Shanaya', 'Shantala',
        'Shari', 'Sharlene', 'Sharon', 'Sheena', 'Sheila', 'Sheryl',
        'Shirin', 'Shirley', 'Shirlyn', 'Sibilla', 'Sibyl', 'Sibylle',
        'Siegrid', 'Sigrid', 'Sigrun', 'Silja', 'Silke', 'Silvana', 'Silvia',
        'Silviane', 'Simona', 'Simone', 'Simonette', 'Simonne', 'Sina',
        'Sindy', 'Sinja', 'Sissy', 'Skyla', 'Smarula', 'Smilla', 'Sofia',
        'Sofie', 'Sonia', 'Sonja', 'Sonnele', 'Sonya', 'Sophia', 'Sophie',
        'Soraya', 'Stefanie', 'Steffi', 'Stella', 'Stephanie', 'Sumehra',
        'Summer', 'Susan', 'Susanna', 'Susanne', 'Susi', 'Suzan', 'Suzanne',
        'Suzette', 'Svea', 'Svenja', 'Swane', 'Sybilla', 'Sybille', 'Sydney',
        'Sylvana', 'Sylvia', 'Sylvie', 'Tabitha', 'Taissa', 'Tamara',
        'Tamina', 'Tania', 'Tanita', 'Tanja', 'Tara', 'Tatiana', 'Tatjana',
        'Taya', 'Tecla', 'Telka', 'Teodora', 'Teona', 'Teresa', 'Terry',
        'Tess', 'Tessa', 'Tessie', 'Thea', 'Thekla', 'Theodora', 'Theres',
        'Theresa', 'Therese', 'Theresia', 'Tiana', 'Tiffany', 'Tilly',
        'Timna', 'Tina', 'Tiziana', 'Tonja', 'Toril', 'Tosca', 'Tracey',
        'Traudl', 'Trixi', 'Tycho', 'Tyra', 'Ulla', 'Ulli', 'Ulrica',
        'Ulrike', 'Undine', 'Urania', 'Ursel', 'Ursina', 'Ursula', 'Ursule',
        'Uschi', 'Uta', 'Ute', 'Valentina', 'Valentine', 'Valeria', 'Valerie',
        'Valeska', 'Vanadis', 'Vanessa', 'Vanja', 'Varinka', 'Venetia',
        'Vera', 'Verena', 'Verona', 'Veronica', 'Veronika', 'Veronique',
        'Vesla', 'Vicky', 'Victoire', 'Victoria', 'Viki', 'Viktoria',
        'Vilja', 'Viola', 'Violet', 'Violetta', 'Violette', 'Virginia',
        'Virginie', 'Vittoria', 'Viviana', 'Viviane', 'Vivien', 'Vivienne',
        'Vreneli', 'Vreni', 'Vroni', 'Wencke', 'Weneke', 'Wibke', 'Wilja',
        'Willow', 'Wilma',
    )

    last_names = (
        'Ackermann', 'Adler', 'Adolph', 'Albers', 'Anders', 'Atzler',
        'Aumann', 'Austermühle', 'Bachmann', 'Bähr', 'Bärer', 'Barkholz',
        'Barth', 'Bauer', 'Baum', 'Becker', 'Beckmann', 'Beer', 'Beier',
        'Bender', 'Benthin', 'Berger', 'Beyer', 'Bien', 'Biggen', 'Binner',
        'Birnbaum', 'Bloch', 'Blümel', 'Bohlander', 'Bonbach', 'Bolander',
        'Bolnbach', 'Bolzmann', 'Börner', 'Bohnbach', 'Boucsein', 'Briemer',
        'Bruder', 'Buchholz', 'Budig', 'Butte', 'Carsten', 'Caspar',
        'Christoph', 'Cichorius', 'Conradi', 'Davids', 'Dehmel', 'Dickhard',
        'Dietz', 'Dippel', 'Ditschlerin', 'Dobes', 'Döhn', 'Döring', 'Dörr',
        'Dörschner', 'Dowerg', 'Drewes', 'Drub', 'Drubin', 'Dussen van',
        'Eberhardt', 'Ebert', 'Eberth', 'Eckbauer', 'Ehlert', 'Eigenwillig',
        'Eimer', 'Ernst', 'Etzler', 'Etzold', 'Faust', 'Fechner', 'Fiebig',
        'Finke', 'Fischer', 'Flantz', 'Fliegner', 'Förster', 'Franke',
        'Freudenberger', 'Fritsch', 'Fröhlich', 'Gehringer', 'Geisel',
        'Geisler', 'Geißler', 'Gerlach', 'Gertz', 'Gierschner', 'Gieß',
        'Girschner', 'Gnatz', 'Gorlitz', 'Gotthard', 'Graf', 'Grein Groth',
        'Gröttner', 'Gude', 'Gunpf', 'Gumprich', 'Gute', 'Gutknecht', 'Haase',
        'Haering', 'Hänel', 'Häring', 'Hahn', 'Hamann', 'Hande', 'Harloff',
        'Hartmann', 'Hartung', 'Hauffer', 'Hecker', 'Heidrich', 'Hein',
        'Heinrich', 'Heintze', 'Heinz', 'Hellwig', 'Henck', 'Hendriks',
        'Henk', 'Henschel', 'Hentschel', 'Hering', 'Hermann', 'Herrmann',
        'Hermighausen', 'Hertrampf', 'Heser', 'Heß', 'Hesse', 'Hettner',
        'Hethur', 'Heuser', 'Hiller', 'Heydrich', 'Höfig', 'Hofmann',
        'Holsten', 'Holt', 'Holzapfel', 'Hölzenbecher', 'Hörle', 'Hövel',
        'Hoffmann', 'Hornich', 'Hornig', 'Hübel', 'Huhn', 'Jacob', 'Jacobi',
        'Jäckel', 'Jähn', 'Jäkel', 'Jäntsch', 'Jessel', 'Jockel', 'Johann',
        'Jopich', 'Junck', 'Juncken', 'Jungfer', 'Junitz', 'Junk', 'Junken',
        'Jüttner', 'Kabus', 'Kade', 'Käster', 'Kallert', 'Kambs', 'Karge',
        'Karz', 'Kaul', 'Kensy', 'Keudel', 'Killer', 'Kitzmann', 'Klapp',
        'Klemm', 'Klemt', 'Klingelhöfer', 'Klotz', 'Knappe', 'Kobelt',
        'Koch', 'Koch II', 'Köhler', 'Köster', 'Kohl', 'Kostolzin', 'Kramer',
        'Kranz', 'Krause', 'Kraushaar', 'Krebs', 'Krein', 'Kreusel',
        'Kroker', 'Kruschwitz', 'Kuhl', 'Kühnert', 'Kusch', 'Lachmann',
        'Ladeck', 'Lange', 'Langern', 'Lehmann', 'Liebelt', 'Lindau',
        'Lindner', 'Linke', 'Löchel', 'Löffler', 'Loos', 'Lorch', 'Losekann',
        'Löwer', 'Lübs', 'Mälzer', 'Mangold', 'Mans', 'Margraf', 'Martin',
        'Matthäi', 'Meister', 'Mende', 'Mentzel', 'Metz', 'Meyer',
        'Mielcarek', 'Mies', 'Misicher', 'Mitschke', 'Mohaupt', 'Mosemann',
        'Möchlichen', 'Mude', 'Mühle', 'Mülichen', 'Müller', 'Naser',
        'Nerger', 'Nette', 'Neureuther', 'Neuschäfer', 'Niemeier', 'Noack',
        'Nohlmans', 'Oderwald', 'Oestrovsky', 'Ortmann', 'Otto', 'Paffrath',
        'Pärtzelt', 'Patberg', 'Pechel', 'Pergande', 'Peukert', 'Pieper',
        'Plath', 'Pohl', 'Pölitz', 'Preiß', 'Pruschke', 'Putz', 'Rädel',
        'Radisch', 'Reichmann', 'Reinhardt', 'Reising', 'Renner', 'Reuter',
        'Riehl', 'Ring', 'Ritter', 'Rogge', 'Rogner', 'Rohleder', 'Röhrdanz',
        'Röhricht', 'Roht', 'Römer', 'Rörricht', 'Rose', 'Rosemann',
        'Rosenow', 'Roskoth', 'Rudolph', 'Ruppersberger', 'Ruppert', 'Rust',
        'Sager', 'Salz', 'Säuberlich', 'Sauer', 'Schaaf', 'Schacht',
        'Schäfer', 'Scheel', 'Scheibe', 'Schenk', 'Scheuermann', 'Schinke',
        'Schleich', 'Schleich', 'auch Schlauchin', 'Schlosser', 'Schmidt',
        'Schmidtke', 'Schmiedecke', 'Schmiedt', 'Schönland', 'Scholl',
        'Scholtz', 'Scholz', 'Schomber', 'Schottin', 'Schuchhardt',
        'Schüler', 'Schulz', 'Schuster', 'Schweitzer', 'Schwital',
        'Segebahn', 'Seifert', 'Seidel', 'Seifert', 'Seip', 'Siering',
        'Söding', 'Sölzer', 'Sontag', 'Sorgatz', 'Speer', 'Spieß',
        'Stadelmann', 'Stahr', 'Staude', 'Steckel', 'Steinberg', 'Stey',
        'Stiebitz', 'Stiffel', 'Stoll', 'Stolze', 'Striebitz', 'Stroh',
        'Stumpf', 'Sucker', 'Süßebier', 'Täsche', 'Textor', 'Thanel', 'Thies',
        'Tintzmann', 'Tlustek', 'Trapp', 'Trommler', 'Tröst', 'Trub', 'Trüb',
        'Trubin', 'Trupp', 'Tschentscher', 'Ullmann', 'Ullrich', 'Dussen',
        'Vogt', 'Vollbrecht', 'Wagenknecht', 'Wagner', 'Wähner', 'Walter',
        'Warmer', 'Weihmann', 'Weimer', 'Weinhage', 'Weinhold', 'Weiß',
        'Weitzel', 'Weller', 'Wende', 'Wernecke', 'Werner', 'Wesack', 'Wiek',
        'Wieloch', 'Wilms', 'Wilmsen', 'Winkler', 'Wirth', 'Wohlgemut',
        'Wulf', 'Wulff', 'Zahn', 'Zänker', 'Ziegert', 'Zimmer', 'Zirme',
        'Zobel', 'Zorbach'
    )

    prefixes_male = (
        'Herr', 'Dr.', 'Ing.', 'Dipl.-Ing.', 'Prof.', 'Univ.Prof.'
    )
    prefixes_female = (
        'Frau', 'Dr.', 'Ing.', 'Dipl.-Ing.', 'Prof.', 'Univ.Prof.'
    )

    suffixes = ('B.Sc.', 'B.A.', 'B.Eng.', 'MBA.')

    @classmethod
    def first_name(cls):
        return cls.random_element((cls.first_name_male(), cls.first_name_female()))

    @classmethod
    def first_name_male(cls):
        return cls.random_element(cls.first_names_male)

    @classmethod
    def first_name_female(cls):
        return cls.random_element(cls.first_names_female)

    @classmethod
    def prefix(cls):
        return cls.random_element((cls.prefix_male(), cls.prefix_female()))

    @classmethod
    def prefix_male(cls):
        return cls.random_element(cls.prefixes_male)

    @classmethod
    def prefix_female(cls):
        return cls.random_element(cls.prefixes_female)

    @classmethod
    def suffix(cls):
        return cls.random_element(cls.suffixes)

########NEW FILE########
__FILENAME__ = phone_number
from __future__ import unicode_literals
from ..phone_number import Provider as PhoneNumberProvider


class Provider(PhoneNumberProvider):
    formats = (
        '+49(0)##########',
        '+49(0)#### ######',
        '+49 (0) #### ######',
        '+49(0) #########',
        '+49(0)#### #####',
        '0##########',
        '0#########',
        '0#### ######',
        '0#### #####',
        '(0####) ######',
        '(0####) #####'
    )

########NEW FILE########
__FILENAME__ = person
# coding=utf-8
from __future__ import unicode_literals
from ..person import Provider as PersonProvider

class Provider(PersonProvider):
    formats = (
        '{{first_name_male}} {{last_name}}',
        '{{first_name_male}} {{last_name}}',
        '{{first_name_male}} {{last_name}}',
        '{{first_name_male}} {{last_name}}',
        '{{first_name_male}} {{last_name}}-{{last_name}}',
        '{{first_name_female}} {{last_name}}',
        '{{first_name_female}} {{last_name}}',
        '{{first_name_female}} {{last_name}}',
        '{{first_name_female}} {{last_name}}',
        '{{first_name_female}} {{last_name}}-{{last_name}}',
        '{{prefix_male}} {{first_name_male}} {{last_name}}',
        '{{prefix_female}} {{first_name_female}} {{last_name}}',
        '{{prefix_male}} {{first_name_male}} {{last_name}}',
        '{{prefix_female}} {{first_name_female}} {{last_name}}'
    )

    first_names_male = (
        'Adam', 'Albert', 'Aksel', 'Alex', 'Alexander', 'Alf', 'Allan',
        'Alvin', 'Anders', 'André', 'Andreas', 'Anton', 'Arne', 'Asger',
        'ugust', 'Benjamin', 'Benny', 'Bent', 'Bertil', 'Bertram', 'Birger',
        'Bjarne', 'Bo', 'Bob', 'Bobby', 'Boe', 'Boris', 'Borris',
        'Brian', 'Bruno', 'Bøje', 'Børge', 'Carl', 'Carlo', 'Carsten',
        'Casper', 'Christian', 'Christoffer', 'Christopher', 'Claus', 'Clavs', 'Curt',
        'Dan', 'Daniel', 'Danny', 'David', 'Dennis', 'Ebbe', 'Einar',
        'Einer', 'Elias', 'Emil ', 'Eric', 'Erik', 'Erling', 'Ernst',
        'Esben', 'Finn', 'Flemming ', 'Frank', 'Frans', 'Freddy', 'Frede',
        'Frederik', 'Frode', 'Georg ', 'George', 'Gert', 'Gorm', 'Gunnar',
        'Gunner', 'Gustav', 'Hans', 'Helge', 'Henrik', 'Henry', 'Herbert',
        'Herman', 'Hjalte', 'Holger', 'Hugo', 'Ib', 'Ivan', 'Iver',
        'Jack', 'Jacob', 'Jakob', 'James', 'Jan', 'Jano', 'Jarl',
        'Jean', 'Jens', 'Jeppe', 'Jesper', 'Jim', 'Jimmy', 'Joachim',
        'Joakim', 'Johan', 'Johannes', 'John', 'Johnnie', 'Johnny', 'Jon',
        'Jonas', 'Jonathan', 'Julius', 'Jørgen', 'Karl', 'Karlo', 'Karsten',
        'Kaspar', 'Kasper', 'Keld', 'Ken', 'Kenn', 'Kenneth', 'Kenny',
        'Kent', 'Kim', 'Kjeld', 'Klaus', 'Klavs', 'Kristian', 'Kurt',
        'Kåre', 'Lars', 'Lasse', 'Laurits', 'Laus', 'Laust', 'Leif',
        'Lennarth', 'Lucas', 'Ludvig', 'Mads', 'Magnus', 'Malthe', 'Marcus',
        'Marius', 'Mark', 'Martin', 'Mathias', 'Matthias', 'Michael', 'Mik',
        'Mikael', 'Mike', 'Mikkel', 'Mogens', 'Morten', 'Nick', 'Nicklas',
        'Nicolai', 'Nicolaj', 'Niels', 'Nikolai', 'Nikolaj', 'Nils', 'Noah',
        'Ole', 'Olfert', 'Oliver', 'Oscar', 'Oskar', 'Osvald', 'Otto',
        'Ove', 'Palle', 'Patrick', 'Paw', 'Peder', 'Per', 'Pete',
        'Peter', 'Paul', 'Philip', 'Poul', 'Preben', 'Ragnar', 'Ragner',
        'Rasmus', 'René', 'Richard', 'Richardt', 'Robert', 'Robin', 'Rolf',
        'Ron', 'Ronni', 'Ronnie', 'Ronny', 'Ruben', 'Rune', 'Sam',
        'Sebastian', 'Silas', 'Simon', 'Simon', 'Sonny', 'Steen', 'Stefan',
        'Sten', 'Stephan', 'Steve', 'Steven', 'Stig', 'Svenning', 'Søren',
        'Tage', 'Tejs', 'Thomas', 'Tim', 'Timmy', 'Tobias', 'Tom',
        'Tommy', 'Tonny', 'Torben', 'Troels', 'Uffe', 'Ulf', 'Ulrik',
        'Vagn', 'Valdemar', 'Verner', 'Victor', 'Villads', 'Werner', 'William',
        'Yan', 'Yannick', 'Yngve', 'Zacharias', 'Ziggy', 'Øivind', 'Øjvind',
        'Ørni', 'Øvli', 'Øystein', 'Øyvind', 'Åbjørn', 'Aage', 'Åge',
    )

    first_names_female = (
        'Abelone', 'Agnes', 'Agnete', 'Alberte', 'Alma', 'Amalie', 'Amanda',
        'Andrea', 'Ane', 'Anette', 'Anna', 'Anne', 'Annemette', 'Annette',
        'Asta', 'Astrid', 'Benedicte', 'Benedikte', 'Bente', 'Benthe', 'Berit',
        'Berta', 'Beth', 'Bettina', 'Birgit', 'Birgitte', 'Birte', 'Birthe',
        'Bitten', 'Bodil', 'Britt', 'Britta', 'Camilla', 'Carina', 'Carla',
        'Caroline', 'Cathrine', 'Catrine', 'Cecilie', 'Charlotte', 'Christina', 'Christine',
        'Cirkeline', 'Clara', 'Connie', 'Conny', 'Dagmar', 'Dagny', 'Daniella',
        'Dina', 'Ditte', 'Doris', 'Dorte', 'Dorthe', 'Edith', 'Elin',
        'Elisabeth', 'Ella', 'Ellen', 'Elna', 'Else', 'Elsebeth', 'Emilie',
        'Emily', 'Emma', 'Erna', 'Esmarelda', 'Ester', 'Filippa', 'Frederikke',
        'Freja', 'Frida', 'Gerda', 'Gertrud', 'Gitte', 'Grete', 'Grethe',
        'Gundhild', 'Gunhild', 'Gurli', 'Gyda', 'Hannah', 'Hanne', 'Heidi',
        'Helen', 'Helle', 'Henriette', 'Herdis', 'Iben', 'Ida', 'Inga',
        'Inge', 'Ingelise', 'Inger', 'Ingrid', 'Irma', 'Isabella', 'Jacobine',
        'Jacqueline', 'Janne', 'Janni', 'Jannie', 'Jasmin', 'Jean', 'Jenny',
        'Joan', 'Johanne', 'Jonna', 'Josefine', 'Josephine ', 'Julie', 'Justina',
        'Jytte', 'Karen', 'Karin', 'Karina', 'Karla', 'Karoline', 'Katcha',
        'Katja', 'Katrine', 'Kirsten', 'Kirstin', 'Kirstine', 'Klara', 'Kristina',
        'Kristine', 'Laura', 'Lea', 'Lena', 'Lene', 'Leonora', 'Line',
        'Liva', 'Lona', 'Lone', 'Lotte', 'Louise', 'Lærke', 'Maiken',
        'Maja', 'Majken', 'Malene', 'Malou', 'Maren', 'Margit', 'Margrethe',
        'Maria', 'Marianne', 'Marie', 'Marlene', 'Mathilde', 'Maya', 'Merete',
        'Merethe', 'Mette ', 'Mia', 'Michala', 'Michelle', 'Mie', 'Mille',
        'Mimi', 'Minna', 'Nadia', 'Naja', 'Nana', 'Nanna', 'Nanni',
        'Natasha', 'Natasja', 'Nete', 'Nicoline', 'Nina', 'Nora', 'Oda',
        'Odeline', 'Odette', 'Ofelia', 'Olga', 'Olivia', 'Patricia', 'Paula',
        'Paulina', 'Pernille', 'Pia', 'Ragna', 'Ragnhild', 'Randi', 'Rebecca',
        'Regitse', 'Regitze', 'Rikke', 'Rita', 'Ritt', 'Ronja', 'Rosa',
        'Ruth', 'Sabine', 'Sandra', 'Sanne', 'Sara', 'Sarah', 'Selma',
        'Signe', 'Sigrid', 'Silje', 'Sille', 'Simone', 'Sine', 'Sofia',
        'Sofie', 'Solveig', 'Solvej', 'Sonja', 'Sophie', 'Stina', 'Stine',
        'Susanne', 'Sussanne', 'Sussie', 'Sys', 'Sørine', 'Søs', 'Tammy',
        'Tanja', 'Thea', 'Tilde', 'Tina', 'Tine', 'Tove', 'Trine',
        'Ulla', 'Ulrike', 'Ursula', 'Vera', 'Victoria', 'Viola', 'Vivian',
        'Weena', 'Winni', 'Winnie', 'Xenia', 'Yasmin', 'Yda', 'Yrsa',
        'Yvonne', 'Zahra', 'Zara', 'Zehnia', 'Zelma', 'Zenia', 'Åse',
    )

    last_names = (
        'Jensen', 'Nielsen', 'Hansen', 'Pedersen', 'Andersen', 'Christensen', 'Larsen',
        'Sørensen', 'Rasmussen', 'Petersen', 'Jørgensen', 'Madsen', 'Kristensen', 'Olsen',
        'Christiansen', 'Thomsen', 'Poulsen', 'Johansen', 'Knudsen', 'Mortensen', 'Møller',
        'Jacobsen', 'Jakobsen', 'Olesen', 'Frederiksen', 'Mikkelsen', 'Henriksen', 'Laursen',
        'Lund', 'Schmidt', 'Eriksen', 'Holm', '	Kristiansen', 'Clausen', 'Simonsen',
        'Svendsen', 'Andreasen', 'Iversen', 'Jeppesen', 'Mogensen', 'Jespersen', 'Nissen',
        'Lauridsen', 'Frandsen', 'Østergaard', 'Jepsen', 'Kjær', 'Carlsen', 'Vestergaard',
        'Jessen', 'Nørgaard', 'Dahl', 'Christoffersen', 'Skov', 'Søndergaard', 'Bertelsen',
        'Bruun', 'Lassen', 'Bach', 'Gregersen', 'Friis', 'Johnsen', 'Steffensen',
        'Kjeldsen', 'Bech', 'Krogh', '	Lauritsen', 'Danielsen', 'Mathiesen', 'Andresen',
        'Brandt', 'Winther', 'Toft', 'Ravn', 'Mathiasen', 'Dam', 'Holst',
        'Nilsson', 'Lind', 'Berg', 'Schou', 'Overgaard', 'Kristoffersen', 'Schultz',
        'Klausen', 'Karlsen', 'Paulsen', 'Hermansen', 'Thorsen', 'Koch', 'Thygesen',
    )

    prefixes_male = (
        'Hr', 'Dr.', 'Prof.', 'Univ.Prof.'
    )
    prefixes_female = (
        'Fru', 'Dr.', 'Prof.', 'Univ.Prof.'
    )

    @classmethod
    def first_name(cls):
        return cls.random_element((cls.first_name_male(), cls.first_name_female()))

    @classmethod
    def first_name_male(cls):
        return cls.random_element(cls.first_names_male)

    @classmethod
    def first_name_female(cls):
        return cls.random_element(cls.first_names_female)

    @classmethod
    def prefix(cls):
        return cls.random_element((cls.prefix_male(), cls.prefix_female()))

    @classmethod
    def prefix_male(cls):
        return cls.random_element(cls.prefixes_male)

    @classmethod
    def prefix_female(cls):
        return cls.random_element(cls.prefixes_female)


########NEW FILE########
__FILENAME__ = address
# coding=utf-8
from __future__ import unicode_literals
from decimal import Decimal
import random
from ..address import Provider as AddressProvider


def contains_point(poly, point):
    """
    Given a list of 2-tuples (lat, lng) defining a convex polygon, returns
    True if the given point, which is a 2-tuple (lat, lng), is inside the
    polygon, False otherwise.
    """
    n = len(poly)
    c = False
    i = 0
    j = n - 1
    while i < n:
        if ((poly[i][0] > point[0]) != (poly[j][0] > point[0])) and \
                (point[1] < (poly[j][1] - poly[i][1]) * (point[0] - poly[i][0]) /
                            (poly[j][0] - poly[i][0]) + poly[i][1]):
            c = not c
        j = i
        i += 1
    return c


class Provider(AddressProvider):
    poly = (
        (40.34026, 19.15120),
        (42.21670, 26.13934),
        (35.55680, 29.38280),
        (34.15370, 22.58810),
    )

    building_number_formats = (
        '###',
        '##',
        '##',
        '##',
        '#',
        '#',
        '##-##',
        '###-###',
    )

    street_prefixes_short = (
        'Πλ.',
        'Πάρ.',
        'Λεωφ.',
    )

    street_prefixes_long = (
        'Πλατεία',
        'Πάροδος',
        'Λεωφόρος',
    )

    street_name_formats = (
        '{{street_prefix}} {{street}}',
        '{{street}}',
        '{{street}}',
        '{{street}}',
        '{{last_name_female}}',
    )

    street_address_formats = (
        '{{street_name}} {{building_number}}',
    )

    postcode_formats = (
        '### ##',
        '#####',
        '#####',
        'ΤΚ ### ##',
        'ΤΚ #####',
    )

    address_formats = (
        "{{street_address}},\n{{postcode}} {{city}}",
    )

    line_address_formats = (
        "{{street_address}}, {{postcode}} {{city}}",
    )

    def line_address(self):
        pattern = self.random_element(self.line_address_formats)
        return self.generator.parse(pattern)

    @classmethod
    def street_prefix(cls):
        return cls.random_element(cls.street_prefixes_short + cls.street_prefixes_long)

    @classmethod
    def street_prefix_short(cls):
        return cls.random_element(cls.street_prefixes_short)

    @classmethod
    def street_prefix_long(cls):
        return cls.random_element(cls.street_prefixes_long)

    @classmethod
    def street(cls):
        return cls.random_element(cls.localities)

    @classmethod
    def city(cls):
        return cls.random_element(cls.cities)

    @classmethod
    def region(cls):
        return cls.random_element(cls.regions)

    @classmethod
    def latlng(cls):
        return float(cls.latitude()), float(cls.longitude())
    
    @classmethod
    def latitude(cls):
        l = list(map(lambda t: int(t[0] * 10000000), cls.poly))
        return Decimal(str(random.randint(min(l), max(l)) / 10000000.0)).quantize(Decimal('.000001'))

    @classmethod
    def longitude(cls):
        l = list(map(lambda t: int(t[1] * 10000000), cls.poly))
        return Decimal(str(random.randint(min(l), max(l)) / 10000000.0)).quantize(Decimal('.000001'))

    # Ονόματα πρωτευουσών νομών
    cities = (
        'Άμφισσα', 'Άρτα', 'Έδεσσα', 'Αγ. Νικόλαος', 'Αθήνα', 'Αλεξανδρούπολη',
        'Αργοστόλι', 'Βέροια', 'Βόλος', 'Γρεβενά', 'Δράμα', 'Ερμούπολη', 'Ζάκυνθος',
        'Ηγουμενίτσα', 'Ηράκλειο', 'Θεσσαλονίκη', 'Ιωάννινα', 'Κέρκυρα', 'Καβάλα',
        'Καλαμάτα', 'Καρδίτσα', 'Καρπενήσι', 'Καστοριά', 'Κατερίνη', 'Κιλκίς',
        'Κοζάνη', 'Κομοτηνή', 'Κόρινθος', 'Λάρισα', 'Λαμία', 'Λευκάδα', 'Λιβαδιά',
        'Μεσολόγγι', 'Μυτιλήνη', 'Ναύπλιο', 'Ξάνθη', 'Πάτρα', 'Πολύγυρος',
        'Πρέβεζα', 'Πύργος', 'Ρέθυμνο', 'Ρόδος', 'Σάμος', 'Σέρρες', 'Σπάρτη',
        'Τρίκαλα', 'Τρίπολη', 'Φλώρινα', 'Χίος', 'Χαλκίδα', 'Χανιά',
    )

    # Ονόματα νομών
    regions = (
        'Αιτωλία & Ακαρνανία', 'Αργολίδα', 'Αρκαδία', 'Άρτα', 'Αττική', 'Αχαΐα',
        'Βοιωτία', 'Γρεβενά', 'Δράμα', 'Δωδεκάνησσος', 'Έβρος', 'Ευρυτανία',
        'Εύβοια', 'Ζάκυνθος', 'Ηλεία', 'Ημαθία', 'Ηράκλειο', 'Θεσπρωτία',
        'Θεσσαλονίκη', 'Ιωάννινα', 'Κέρκυρα', 'Καβάλα', 'Καρδίτσα', 'Καστοριά',
        'Κεφαλληνία', 'Κιλκίς', 'Κοζάνη', 'Κορινθία', 'Κυκλάδες', 'Λάρισσα',
        'Λέσβος', 'Λακωνία', 'Λασσίθι', 'Λευκάδα', 'Μαγνησία', 'Μεσσηνία',
        'Ξάνθη', 'Πέλλα', 'Πιερία', 'Πρέβεζα', 'Ρέθυμνο', 'Ροδόπη', 'Σάμος',
        'Σέρρες', 'Τρίκαλα', 'Φθιώτιδα', 'Φλώρινα', 'Φωκίδα', 'Χίος',
        'Χαλκιδική', 'Χανιά',
    )

    # Ονόματα χωρών
    countries = (
        'Άγιος Βαρθολομαίος', 'Άγιος Βικέντιος και Γρεναδίνες', 'Άγιος Μαρίνος',
        'Άγιος Μαρτίνος', 'Άγιος Μαρτίνος (Γαλλικό Κομμάτι)', 'Άγιος Πέτρος και Μικελόν',
        'Άγιος Χριστόφορος και Νέβις', 'Αίγυπτος', 'Αγία Ελένη, Ασενσιόν και Τριστάν ντα Κούνια',
        'Αγία Λουκία', 'Αζερμπαϊτζάν', 'Αιθιοπία', 'Ακτή Ελεφαντοστού', 'Αλβανία',
        'Αλγερία', 'Αμερικανικές Παρθένοι Νήσοι', 'Αμερικανική Σαμόα', 'Ανατολικό Τιμόρ',
        'Ανγκουίλα', 'Ανγκόλα', 'Ανδόρα', 'Αντίγκουα και Μπαρμπούντα', 'Ανταρκτική',
        'Απομακρυσμένες Νησίδες των Ηνωμένων Πολιτειών', 'Αραβική Δημοκρατία της Λιβύης',
        'Αργεντινή', 'Αρμενία', 'Αρούμπα', 'Αυστρία', 'Αυστραλία', 'Αφγανιστάν', 'Αϊτή',
        'Βέλγιο', 'Βανουάτου', 'Βατικανό', 'Βενεζουέλα', 'Βερμούδες', 'Βιετνάμ', 'Βολιβία',
        'Βοσνία-Ερζεγοβίνη', 'Βουλγαρία', 'Βραζιλία', 'Βρετανικές Παρθένοι Νήσοι',
        'Βρετανικό Έδαφος Ινδικού Ωκεανού', 'Βόρειες Μαριάνες Νήσοι', 'Γαλλία',
        'Γαλλικά Νότια και Ανταρκτικά Εδάφη', 'Γαλλική Γουιάνα', 'Γαλλική Πολυνησία',
        'Γερμανία', 'Γεωργία', 'Γιβραλτάρ', 'Γκάμπια', 'Γκάνα', 'Γκέρνσεϊ', 'Γκαμπόν',
        'Γκουάμ', 'Γουάλις και Φουτούνα', 'Γουαδελούπη', 'Γουατεμάλα', 'Γουιάνα',
        'Γουινέα', 'Γουινέα-Μπισσάου', 'Γρενάδα', 'Γροιλανδία', 'Δανία', 'Δημοκρατία της Κορέας',
        'Δομινίκα', 'Δομινικανή Δημοκρατία', 'Δυτική Σαχάρα', 'Ελ Σαλβαδόρ', 'Ελβετία',
        'Ελλάδα', 'Ερυθραία', 'Εσθονία', 'Ζάμπια', 'Ζιμπάμπουε', 'Ηνωμένα Αραβικά Εμιράτα',
        'Ηνωμένες Πολιτείες Αμερικής', 'Ηνωμένο Βασίλειο', 'Ιαπωνία', 'Ινδία', 'Ινδονησία',
        'Ιορδανία', 'Ιράκ', 'Ιράν', 'Ιρλανδία', 'Ισημερινή Γουινέα', 'Ισημερινός', 'Ισλανδία',
        'Ισπανία', 'Ισραήλ', 'Ιταλία', 'Κένυα', 'Κίνα', 'Καζακστάν', 'Καμερούν', 'Καμπότζη',
        'Καναδάς', 'Κατάρ', 'Κεντροαφρικανική Δημοκρατία', 'Κιργιστάν', 'Κιριμπάτι',
        'Κολομβία', 'Κομόρες', 'Κονγκό', 'Κουβέιτ', 'Κουρακάο', 'Κούβα', 'Κροατία',
        'Κόστα Ρίκα', 'Κύπρος', 'Λίβανος', 'Λαοκρατική Δημοκρατία της Κορέας',
        'Λαϊκή Δημοκρατία του Κονγκό', 'Λαϊκή Δημοκρατία του Λάος', 'Λεσότο',
        'Λετονία', 'Λευκορωσία', 'Λιβερία', 'Λιθουανία', 'Λιχτενστάϊν', 'Λουξεμβούργο',
        'Μάλι', 'Μάλτα', 'Μαγιότ', 'Μαδαγασκάρη', 'Μακάο', 'Μαλάουι', 'Μαλαισία',
        'Μαλδίβες', 'Μαρτινίκη', 'Μαρόκο', 'Μαυρίκιος', 'Μαυριτανία', 'Μαυροβούνιο',
        'Μεξικό', 'Μιανμάρ', 'Μικρονησία', 'Μογγολία', 'Μοζαμβίκη', 'Μολδαβία',
        'Μονακό', 'Μονσεράτ', 'Μπαγκλαντές', 'Μπαρμπάντος', 'Μπαχάμες', 'Μπαχρέιν',
        'Μπελίζ', 'Μπενίν', 'Μποτσουάνα', 'Μπουρκίνα Φάσο', 'Μπουρουντί', 'Μπουτάν',
        'Μπρουνέι', 'Νέα Ζηλανδία', 'Νέα Καληδονία', 'Νήσοι Κουκ', 'Νήσοι Κόκος',
        'Νήσοι Μάρσαλ', 'Νήσοι Πίτκαιρν', 'Νήσοι Σολομώντα', 'Νήσοι Φώκλαντ',
        'Νήσοι Χερντ και Μακντόναλντ', 'Νήσοι Ώλαντ', 'Νήσος Μαν', 'Νήσος Μπουβέ',
        'Νήσος των Χριστουγέννων', 'Νίγηρας', 'Ναμίμπια', 'Ναουρού', 'Νεπάλ',
        'Νησί Νόρφολκ', 'Νησιά Καϋμάν', 'Νησιά Τερκς και Κάικος', 'Νησιά Φερόες',
        'Νιγηρία', 'Νικαράγουα', 'Νιούε', 'Νορβηγία', 'Νότιος Αφρική',
        'Νότιος Γεωργία και οι Νότιοι Σάντουιτς Νήσοι', 'Ολλανδία', 'Ολλανδικές Αντίλλες',
        'Ομάν', 'Ονδούρα', 'Ουγγαρία', 'Ουγκάντα', 'Ουζμπεκιστάν', 'Ουκρανία', 'Ουρουγουάη',
        'Π.Γ.Δ. Μακεδονίας', 'Πακιστάν', 'Παλάου', 'Παλαιστίνη', 'Παναμάς',
        'Παπούα Νέα Γουινέα', 'Παραγουάη', 'Περού', 'Πολωνία', 'Πορτογαλία',
        'Πουέρτο Ρίκο', 'Πράσινο Ακρωτήρι', 'Ρεϊνιόν', 'Ρουάντα', 'Ρουμανία',
        'Ρωσία', 'Σάο Τομέ και Πρίνσιπε', 'Σαμόα', 'Σαουδική Αραβία',
        'Σβάλμπαρντ και Γιαν Μαγιέν', 'Σενεγάλη', 'Σερβία', 'Σεϋχέλλες',
        'Σιέρα Λεόνε', 'Σιγκαπούρη', 'Σλοβακία', 'Σλοβενία', 'Σομαλία',
        'Σουαζιλάνδη', 'Σουδάν', 'Σουηδία', 'Σουρινάμ', 'Σρι Λάνκα', 'Συρία',
        'Τανζανία', 'Τατζικιστάν', 'Ταϊβάν', 'Ταϊλάνδη', 'Τζέρσεϊ', 'Τζαμάικα',
        'Τζιμπουτί', 'Τοκελάου', 'Τουβαλού', 'Τουρκία', 'Τουρκμενιστάν',
        'Τρινιντάντ και Τομπάγκο', 'Τσαντ', 'Τσεχία', 'Τυνησία', 'Τόγκο',
        'Τόνγκα', 'Υεμένη', 'Φίτζι', 'Φιλιππίνες', 'Φινλανδία', 'Χιλή', 'Χονγκ Κονγκ',
    )

    # Επίσημα τοπικά διαμερίσματα.
    # Χρησιμοποιούνται ως ονόματα δρόμων (λόγω ανάγκης για γενική κλίση).
    # Η λίστα είναι από το ΥΠ.ΕΣ. (μετά από επεξεργασία και μορφοποίηση)
    localities = (
        'Άγρα',
        'Άγρας',
        'Άδελε',
        'Άκρης',
        'Άλλης Μεριάς',
        'Άλσους',
        'Άμμου',
        'Άμπλιανης',
        'Άνδρου',
        'Άργους',
        'Άργους Ορεστικού',
        'Άρζου',
        'Άρλας',
        'Άρμπουνα',
        'Άρνης',
        'Άσκρης',
        'Άσου',
        'Άσπρου',
        'Άσπρων Σπιτιών',
        'Άσσου',
        'Άστρους',
        'Άτταλης',
        'Άφρας',
        'Έλους',
        'Έμπωνα',
        'Έρφων',
        'Ήπιον',
        'Ήρας',
        'Ίδας',
        'Ίμπρου',
        'Ίσαρη',
        'Αΐμονα',
        'Αβάτου',
        'Αβίας',
        'Αβαρίκου',
        'Αβγαριάς',
        'Αβγού',
        'Αβδέλλας',
        'Αβδήρων',
        'Αβδού',
        'Αβρακόντε',
        'Αβραμιού',
        'Αβραμυλιάς',
        'Αβόρανης',
        'Αβόρου',
        'Αγάπης',
        'Αγία Βαρβάρα',
        'Αγία Κυριακή',
        'Αγία Παρασκευή',
        'Αγίας Άννας',
        'Αγίας Άννης',
        'Αγίας Αναστασίας',
        'Αγίας Βαρβάρας',
        'Αγίας Βλαχέρνης',
        'Αγίας Γαλήνης',
        'Αγίας Ειρήνης',
        'Αγίας Ελένης',
        'Αγίας Ευθυμίας',
        'Αγίας Ευφημίας',
        'Αγίας Θέκλης',
        'Αγίας Κυριακής',
        'Αγίας Μαρίνης',
        'Αγίας Μαύρας',
        'Αγίας Παρασκευής',
        'Αγίας Ρουμέλης',
        'Αγίας Σοφίας',
        'Αγίας Σωτήρας',
        'Αγίου',
        'Αγίου Αδριανού',
        'Αγίου Αθανασίου',
        'Αγίου Ακακίου',
        'Αγίου Ανδρέου',
        'Αγίου Αντωνίου',
        'Αγίου Αρσενίου',
        'Αγίου Αχιλλείου',
        'Αγίου Βαρθολομαίου',
        'Αγίου Βασιλείου',
        'Αγίου Βασιλείου Κυνουρίας',
        'Αγίου Βασιλείου Μαντινείας',
        'Αγίου Βησσαρίου',
        'Αγίου Βλασίου',
        'Αγίου Γερμανού',
        'Αγίου Γεωργίου',
        'Αγίου Γεωργίου Δομοκού',
        'Αγίου Γεωργίου Λαρίσης',
        'Αγίου Γεωργίου Λασιθίου',
        'Αγίου Γεωργίου Νηλείας',
        'Αγίου Γεωργίου Σητείας',
        'Αγίου Γεωργίου Συκούση',
        'Αγίου Γεωργίου Φαρσάλων',
        'Αγίου Γεωργίου Φερών',
        'Αγίου Δημητρίου',
        'Αγίου Δημητρίου Μονεμβασίας',
        'Αγίου Δημητρίου Πηλίου',
        'Αγίου Ευστρατίου',
        'Αγίου Ηλία',
        'Αγίου Ηλία Πηνηίων',
        'Αγίου Ηλία Πύργου',
        'Αγίου Θεοδώρου',
        'Αγίου Θωμά',
        'Αγίου Ισιδώρου',
        'Αγίου Ιωάννη',
        'Αγίου Ιωάννου',
        'Αγίου Ιωάννου Αγίου Βασιλείου',
        'Αγίου Ιωάννου Αμαρίου',
        'Αγίου Ιωάννου Αρχαίας Ηραίας',
        'Αγίου Ιωάννου Επιδαύρου Λιμήρας',
        'Αγίου Ιωάννου Μυλοποτάμου',
        'Αγίου Ιωάννου Ρέντη',
        'Αγίου Κηρύκου',
        'Αγίου Κοσμά',
        'Αγίου Κυρίλλου',
        'Αγίου Κωνσταντίνου',
        'Αγίου Λαυρεντίου',
        'Αγίου Λουκά',
        'Αγίου Μάρκου',
        'Αγίου Ματθαίου',
        'Αγίου Μηνά',
        'Αγίου Νικήτα',
        'Αγίου Νικολάου',
        'Αγίου Νικολάου Βοιών',
        'Αγίου Νικολάου Βονίτσης και Ξηρομέρου',
        'Αγίου Νικολάου Κράλης',
        'Αγίου Νικολάου Μονεμβασίας',
        'Αγίου Νικολάου Σπάτων',
        'Αγίου Ονουφρίου',
        'Αγίου Πέτρου',
        'Αγίου Παντελεήμονα',
        'Αγίου Παύλου',
        'Αγίου Πολυκάρπου',
        'Αγίου Προδρόμου',
        'Αγίου Προκοπίου',
        'Αγίου Σεραφείμ',
        'Αγίου Στεφάνου',
        'Αγίου Σύλλα',
        'Αγίου Σώστου',
        'Αγίου Φλώρου',
        'Αγίου Χαραλάμπους',
        'Αγίου Χριστοφόρου',
        'Αγίων Αναργύρων',
        'Αγίων Αποστόλων',
        'Αγίων Δέκα',
        'Αγίων Δούλων',
        'Αγίων Θεοδώρων',
        'Αγίων Πάντων',
        'Αγίων Παρασκιών',
        'Αγαθονησίου',
        'Αγαθουπόλεως',
        'Αγαλά',
        'Αγαλιανής',
        'Αγαλιανού',
        'Αγγίστης',
        'Αγγελιανών',
        'Αγγελοκάστρου',
        'Αγγελοχωρίου',
        'Αγγελώνας',
        'Αγδινών',
        'Αγιάς',
        'Αγιάσου',
        'Αγιοβλασιτίκων',
        'Αγιονερίου',
        'Αγιονορίου',
        'Αγιοπηγής',
        'Αγιοφύλλου',
        'Αγιοχωρίου',
        'Αγιοχώριον',
        'Αγιωργιτίκων',
        'Αγκίστρου',
        'Αγκαθιάς',
        'Αγκαιριάς',
        'Αγκαρυώνων',
        'Αγκιστρίου',
        'Αγκουσελιανών',
        'Αγνάντης',
        'Αγνάντων',
        'Αγναντερής',
        'Αγναντερού',
        'Αγναντιάς',
        'Αγοράς',
        'Αγράφων',
        'Αγρίλου',
        'Αγραμπέλων',
        'Αγραπιδεών',
        'Αγραπιδιάς',
        'Αγραπιδοχωρίου',
        'Αγραφών',
        'Αγρελιάς',
        'Αγριάνων',
        'Αγριάς',
        'Αγριακόνας',
        'Αγριανής',
        'Αγριδίου',
        'Αγριλιάς Μεσσήνης',
        'Αγριλιάς Τριφυλίας',
        'Αγριλοβούνου',
        'Αγρινίου',
        'Αγριοβοτάνου',
        'Αγροσυκέας',
        'Αγρού',
        'Αγχιάλου',
        'Αγόριανης',
        'Αδάμ',
        'Αδένδρου',
        'Αδαμίου',
        'Αδελφικού',
        'Αδριανής',
        'Αερινού',
        'Αετολόφου',
        'Αετομηλίτσης',
        'Αετοπέτρας',
        'Αετοπέτρας Δωδώνης',
        'Αετοπέτρας Κονίτσης',
        'Αετορράχη',
        'Αετορράχης',
        'Αετού',
        'Αζώρου',
        'Αηδονίων',
        'Αηδονιάς',
        'Αηδονοχωρίου',
        'Αθαμανίας',
        'Αθαμανίου',
        'Αθανίου',
        'Αθανασίου Διάκου',
        'Αθηναίου',
        'Αθηναίων',
        'Αθικίων',
        'Αθύρων',
        'Αιανής',
        'Αιαντείου',
        'Αιγάλεω',
        'Αιγάνης',
        'Αιγίνης',
        'Αιγίου',
        'Αιγείρας',
        'Αιγείρου',
        'Αιγιάλης',
        'Αιγινίου',
        'Αιγιών',
        'Αιγών',
        'Αιθαίας',
        'Αισύμης',
        'Αιτωλικού',
        'Ακοντίου',
        'Ακουμίων',
        'Ακράτας',
        'Ακρίτα',
        'Ακρίτας',
        'Ακρίων',
        'Ακραιφνίου',
        'Ακρασίου',
        'Ακρινής',
        'Ακριτοχωρίου',
        'Ακρολίμνης',
        'Ακροποτάμου',
        'Ακροποταμιάς',
        'Ακρωτηρίου',
        'Ακρών',
        'Ακταίου',
        'Ακόβου',
        'Αλέας',
        'Αλίκων',
        'Αλίμου',
        'Αλαγνίου',
        'Αλαγονίας',
        'Αλαλκομενών',
        'Αλατόπετρας',
        'Αλειμματάδων',
        'Αλεξάνδρου',
        'Αλεξανδρείας',
        'Αλεξανδρουπόλεως',
        'Αλεποχωρίου',
        'Αλεποχωρίου Μπότσαρη',
        'Αλεπούς',
        'Αλεστίων',
        'Αλεσταίνης',
        'Αλευράδας',
        'Αλευρούς',
        'Αληθινής',
        'Αλιάρτου',
        'Αλιβερίου',
        'Αλικάμπου',
        'Αλικανά',
        'Αλικαρνασσού',
        'Αλικιανού',
        'Αλισσού',
        'Αλιστράτης',
        'Αλιφείρας',
        'Αλμυροποτάμου',
        'Αλμυρού',
        'Αλοίδων',
        'Αλοννήσου',
        'Αλποχωρίου',
        'Αλτομιρών',
        'Αλυφαντών',
        'Αλφάς',
        'Αλφειούσης',
        'Αλωνίων',
        'Αλωνακίων',
        'Αλωνισταίνης',
        'Αλώνων',
        'Αλώρου',
        'Αμάδων',
        'Αμαλιαπόλεως',
        'Αμαξάδων',
        'Αμαράντου',
        'Αμαράντων',
        'Αμαρίου',
        'Αμαριανού',
        'Αμαρουσίου',
        'Αμαρύνθου',
        'Αμβρακίας',
        'Αμβροσίας',
        'Αμελάντων',
        'Αμιρά',
        'Αμισιανών',
        'Αμμολόχου',
        'Αμμοτόπου',
        'Αμμουδάρας',
        'Αμμουδιάς',
        'Αμμουλιανής',
        'Αμμοχωρίου',
        'Αμνάτου',
        'Αμορίου',
        'Αμοργιανών',
        'Αμοργού',
        'Αμουρίου',
        'Αμπέλου',
        'Αμπέλων',
        'Αμπελίων',
        'Αμπελακίου',
        'Αμπελακίων',
        'Αμπελακιωτίσσης',
        'Αμπελείας',
        'Αμπελειών',
        'Αμπελιάς',
        'Αμπελικού',
        'Αμπελιώνας',
        'Αμπελοκάμπου',
        'Αμπελοκήπων',
        'Αμπελοφύτου',
        'Αμπελοχωρίου',
        'Αμπελούζου',
        'Αμυγδαλέας',
        'Αμυγδαλής',
        'Αμυγδαλεών',
        'Αμυγδαλιάς',
        'Αμυγδαλοκεφαλίου',
        'Αμυκλών',
        'Αμυνταίου',
        'Αμφία',
        'Αμφίσσης',
        'Αμφείας',
        'Αμφιθέας',
        'Αμφικλείας',
        'Αμφιλοχίας',
        'Αμφιπόλεως',
        'Ανάβατου',
        'Ανάβρας',
        'Ανάφης',
        'Ανέζης',
        'Αναβρυτής',
        'Αναβρυτού',
        'Αναβρυτών',
        'Αναβύσσου',
        'Αναγεννήσεως',
        'Ανακασιάς',
        'Αναλήψεως',
        'Αναργύρων',
        'Αναρράχης',
        'Αναστάσεως',
        'Αναστασίας',
        'Ανατολής',
        'Ανατολικής',
        'Ανατολικής Φραγκίστας',
        'Ανατολικού',
        'Αναφωνητρίας',
        'Ανδανίας',
        'Ανδρίτσης',
        'Ανδραβίδας',
        'Ανδριτσαίνης',
        'Ανδρούσης',
        'Ανδρωνιάνων',
        'Ανεμοδουρίου',
        'Ανεμομύλου',
        'Ανεμορράχης',
        'Ανεμοχωρίου',
        'Ανεμότιας',
        'Ανηλίου',
        'Ανθήλης',
        'Ανθής',
        'Ανθείας',
        'Ανθηρού',
        'Ανθοτόπου',
        'Ανθοφύτου',
        'Ανθοχωρίου',
        'Ανθοχωρίου Δωδώνης',
        'Ανθοχωρίου Μετσόβου',
        'Ανθοχώριον',
        'Ανθούσης',
        'Ανθρακίτη',
        'Ανιάδας',
        'Ανοίξεως',
        'Ανοιξιάτικου',
        'Αντίσσης',
        'Ανταρτικού',
        'Αντιγονείας',
        'Αντικαλάμου',
        'Αντικυθήρων',
        'Αντικύρας',
        'Αντιμαχείας',
        'Αντιπάρου',
        'Αντιπάτων Ερίσου',
        'Αντιπερνών',
        'Αντιρρίου',
        'Αντισκαρίου',
        'Αντιφιλίππων',
        'Αντρωνίου',
        'Ανυφίου',
        'Ανωγής',
        'Ανωγείου',
        'Ανωγείων',
        'Ανωπόλεως',
        'Ανύδρου',
        'Ανώσκελης',
        'Αξιοκάστρου',
        'Αξιουπόλεως',
        'Αξιοχωρίου',
        'Αξού',
        'Απεράθου',
        'Απερίου',
        'Απεσωκαρίου',
        'Απιδέα',
        'Απιδέας',
        'Απιδίων',
        'Απλαδιανών',
        'Αποδούλου',
        'Αποικίων',
        'Απολακκιάς',
        'Απολλωνίας',
        'Απολπαίνης',
        'Αποστολιά',
        'Αποστόλων',
        'Απροβάτου',
        'Απτέρων',
        'Απόλλωνα',
        'Αράξου',
        'Αράχου',
        'Αρήνης',
        'Αρίας',
        'Αρίσβη',
        'Αρίσβης',
        'Αρίστης',
        'Αραβησσού',
        'Αραχαμιτών',
        'Αραχναίου',
        'Αραχοβιτίκων',
        'Αραχόβης',
        'Αρβανίτη',
        'Αργέννου',
        'Αργίλου',
        'Αργαλαστής',
        'Αργασίου',
        'Αργιθέας',
        'Αργινίων',
        'Αργολικού',
        'Αργοστολίου',
        'Αργυράδων',
        'Αργυράς',
        'Αργυρίου',
        'Αργυρίων',
        'Αργυροπουλείου',
        'Αργυροτόπου',
        'Αργυρουπόλεως',
        'Αργυροχωρίου',
        'Αργυρού',
        'Αργυρού Πηγαδίου',
        'Αργυρούπολης',
        'Αργυρούπολις',
        'Αρδάκτου',
        'Αρδάσσης',
        'Αρδαμερίου',
        'Αρδανίου',
        'Αρδείας',
        'Αρδόσεως',
        'Αρεθούσης',
        'Αρεοπόλεως',
        'Αρετής',
        'Αριδαίας',
        'Αριοχωρίου',
        'Αριστοδημείου',
        'Αριστομένους',
        'Αρκάσας',
        'Αρκίτσας',
        'Αρκαδάδων',
        'Αρκαδικού',
        'Αρκαλοχωρίου',
        'Αρκεσίνης',
        'Αρκοχωρίου',
        'Αρμάτων',
        'Αρμένων',
        'Αρματολικού',
        'Αρμενάδων',
        'Αρμενίου',
        'Αρμενιών',
        'Αρμενοχωρίου',
        'Αρμολίων',
        'Αρνά',
        'Αρνίθας',
        'Αρνίσσης',
        'Αρναίας',
        'Αροανίας',
        'Αρραβωνίτσης',
        'Αρριανά',
        'Αρσενίου',
        'Αρσινόης',
        'Αρτάκης',
        'Αρτέμιδας',
        'Αρταίων',
        'Αρτεμισίας',
        'Αρτεμισίου',
        'Αρτεσιανού',
        'Αρτικίου',
        'Αρτοπούλας',
        'Αρτοτίνας',
        'Αρφαρών',
        'Αρχαίας Ήλιδας',
        'Αρχαίας Ελεύθερνας',
        'Αρχαίας Επιδαύρου',
        'Αρχαίας Κορίνθου',
        'Αρχαίας Μεσσήνης',
        'Αρχαίας Νεμέας',
        'Αρχαίας Ολυμπίας',
        'Αρχαίας Πίσας',
        'Αρχαίας Φενεού',
        'Αρχαίων Κλεωνών',
        'Αρχαγγέλου',
        'Αρχανίου',
        'Αρχανών',
        'Αρχιλόχου',
        'Αρχιπόλεως',
        'Αρχοντικά',
        'Αρχοντικής',
        'Αρχοντικού',
        'Αρχοντοχωρίου',
        'Αρωγή',
        'Αρωνά',
        'Αρωνίου',
        'Αρωνιαδίκων',
        'Ασέας',
        'Ασή Γωνιάς',
        'Ασίνης',
        'Ασβεστάδων',
        'Ασβεστίου',
        'Ασβεστοπέτρας',
        'Ασβεστοχωρίου',
        'Ασημένιου',
        'Ασημίου',
        'Ασημοχωρίου',
        'Ασιτών',
        'Ασκληπιείου',
        'Ασκού',
        'Ασκύφου',
        'Ασκών',
        'Ασμηνίου',
        'Ασπραγγέλων',
        'Ασπριάς',
        'Ασπροβάλτας',
        'Ασπρογείων',
        'Ασπρογερακάτων',
        'Ασπροκάμπου',
        'Ασπροκκλησίου',
        'Ασπροκκλησιάς',
        'Ασπρονερίου',
        'Ασπροπουλιάς',
        'Ασπροπύργου',
        'Ασπροχωρίου',
        'Ασπρούλας',
        'Ασσήρου',
        'Αστακού',
        'Αστερίου',
        'Αστρά',
        'Αστράκων',
        'Αστρίτσης',
        'Αστριτσίου',
        'Αστροχωρίου',
        'Αστυπαλαίας',
        'Αστυρακίου',
        'Ασφάκας',
        'Ασφένδου',
        'Ασφενδιού',
        'Ασωμάτου',
        'Ασωμάτων',
        'Ασωπίας',
        'Ασωπού',
        'Ασώματα',
        'Αταλάντης',
        'Ατραπού',
        'Ατσικής',
        'Ατσιποπούλου',
        'Ατσιχόλου',
        'Αυγής',
        'Αυγείου',
        'Αυγενικής',
        'Αυγερινού',
        'Αυγώνυμων',
        'Αυλής',
        'Αυλακίου',
        'Αυλιωτών',
        'Αυλοτόπου',
        'Αυλωναρίου',
        'Αυλών',
        'Αφάντου',
        'Αφετών',
        'Αφιδνών',
        'Αφισίου',
        'Αφράτου',
        'Αφράτων',
        'Αφρατίου',
        'Αφροξυλιάς',
        'Αφύτου',
        'Αχαΐας',
        'Αχαρνών',
        'Αχαϊκού',
        'Αχεντριά',
        'Αχερουσίας',
        'Αχιλλείου',
        'Αχινού',
        'Αχλάδας',
        'Αχλαδέ',
        'Αχλαδέας',
        'Αχλαδίου',
        'Αχλαδίων',
        'Αχλαδερής',
        'Αχλαδεών',
        'Αχλαδινής',
        'Αχλαδοκάμπου',
        'Αχλαδοκάστρου',
        'Αχλαδοχωρίου',
        'Αχυρών',
        'Αψάλου',
        'Αϊδινίου',
        'Αϊτανίων',
        'Αύρας',
        'Βάβδου',
        'Βάγγου',
        'Βάθειας',
        'Βάθης',
        'Βάλτας',
        'Βάλτου',
        'Βάμου',
        'Βάρδας',
        'Βάρης',
        'Βάρνακα',
        'Βάρους',
        'Βάστα',
        'Βάτου',
        'Βάχλιας',
        'Βάχου',
        'Βέλου',
        'Βέλους',
        'Βέργας',
        'Βέργης',
        'Βέροιας',
        'Βέσσης',
        'Βήσσανης',
        'Βίβλου',
        'Βίγλας',
        'Βίνιανης',
        'Βίτολης',
        'Βίτσης',
        'Βαβιλών',
        'Βαβουρίου',
        'Βαγίων',
        'Βαγενιτίου',
        'Βαγιονιάς',
        'Βαθέως',
        'Βαθείας',
        'Βαθυκοίλου',
        'Βαθυλάκκου',
        'Βαθυπέδου',
        'Βαθυτόπου',
        'Βαλανίδας',
        'Βαλανείου',
        'Βαλανιδιάς',
        'Βαλανιδοράχης',
        'Βαλανιδούσσας',
        'Βαλαώρας',
        'Βαλεριάνου',
        'Βαλιμής',
        'Βαλιμιτίκων',
        'Βαλκάνου',
        'Βαλσαμονέρου',
        'Βαλτερού',
        'Βαλτεσινίκου',
        'Βαλτετσίου',
        'Βαλτινού',
        'Βαλτονέρων',
        'Βαλτοτοπίου',
        'Βαλτοχωρίου',
        'Βαλύρας',
        'Βαμβακιάς',
        'Βαμβακοπούλου',
        'Βαμβακοφύτου',
        'Βαμβακούς',
        'Βαμβακούσσης',
        'Βανάδας',
        'Βανάτου',
        'Βαπτιστού',
        'Βαρβάρας',
        'Βαρβίτσης',
        'Βαρβασαίνης',
        'Βαργιάδων',
        'Βαργιάνης',
        'Βαρδάτων',
        'Βαρδαλής',
        'Βαρετάδας',
        'Βαρθολομιού',
        'Βαρικού',
        'Βαρλαάμ',
        'Βαρνάβα',
        'Βαρυπατάδων',
        'Βαρύπετρου',
        'Βασαρά',
        'Βασιλή',
        'Βασιλακίου',
        'Βασιλατίκων',
        'Βασιλειών',
        'Βασιλεωνοίκου',
        'Βασιλικής',
        'Βασιλικιάδων',
        'Βασιλικού',
        'Βασιλικών',
        'Βασιλικών Ανωγείων',
        'Βασιλιτσίου',
        'Βασιλοπούλου',
        'Βασιλουδίου',
        'Βατίου',
        'Βατατάδων',
        'Βατερού',
        'Βατολάκκου',
        'Βατοχωρίου',
        'Βατούσσης',
        'Βατσουνιάς',
        'Βαυκερής',
        'Βαφέ',
        'Βαφιοχωρίου',
        'Βαχού',
        'Βεγόρων',
        'Βελάς',
        'Βελίκας',
        'Βελίνης',
        'Βελανιδίου',
        'Βελανιδίων',
        'Βελανιδιάς',
        'Βελβίνας',
        'Βελβεντού',
        'Βελεντζικού',
        'Βελεσιωτών',
        'Βελεστίνου',
        'Βελημαχίου',
        'Βελιγοστής',
        'Βελιμαχίου',
        'Βελιτσών',
        'Βελιών',
        'Βελονάδων',
        'Βελωτών',
        'Βενίου',
        'Βενεράτου',
        'Βερίνου',
        'Βερβένων',
        'Βερβεράτου',
        'Βεργίνης',
        'Βερδικούσσης',
        'Βερενίκης',
        'Βερμίου',
        'Βερτίσκου',
        'Βεύης',
        'Βιάννου',
        'Βιδιακίου',
        'Βιζαρίου',
        'Βικίου',
        'Βιλίων',
        'Βιλανδρέδου',
        'Βιλιβίνης',
        'Βιρού',
        'Βισταγής',
        'Βιτάλων',
        'Βιταλάδων',
        'Βιταλίου',
        'Βλάση',
        'Βλάστης',
        'Βλάτους',
        'Βλασίας',
        'Βλασίου',
        'Βλαχάβας',
        'Βλαχάτων Εικοσιμίας',
        'Βλαχέρνης',
        'Βλαχατάνου',
        'Βλαχερωνιτίσσης',
        'Βλαχιάς',
        'Βλαχιώτη',
        'Βλαχογιαννίου',
        'Βλαχοκερασέας',
        'Βλαχομάνδρας',
        'Βλαχοπούλου',
        'Βλησιδιάς',
        'Βλιζιανών',
        'Βλοχού',
        'Βλυχού',
        'Βοβούσης',
        'Βογατσικού',
        'Βοθιανών',
        'Βολιμών',
        'Βολισσού',
        'Βομβοκούς',
        'Βορδονίας',
        'Βορεινού',
        'Βοριζίων',
        'Βοσκοχωρίου',
        'Βοτονοσίου',
        'Βουβοποτάμου',
        'Βουβών',
        'Βουγιάτου',
        'Βουζίου',
        'Βουκολιών',
        'Βουλγάρω',
        'Βουλιάστης',
        'Βουλιαγμένης',
        'Βουλισμένης',
        'Βουνάργου',
        'Βουναίνων',
        'Βουναρίων',
        'Βουνιατάδων',
        'Βουνιχώρας',
        'Βουνοπλαγιάς',
        'Βουνού',
        'Βουρβούλου',
        'Βουρβούρων',
        'Βουργαρελίου',
        'Βουρκωτής',
        'Βουρλιωτών',
        'Βουρνικά',
        'Βουτά',
        'Βουταίνης',
        'Βουτιάνων',
        'Βουτσίμου',
        'Βουτσαρά',
        'Βουτύρου',
        'Βουτών',
        'Βουχωρίνας',
        'Βοχαϊκού',
        'Βούλας',
        'Βούλπης',
        'Βούνων',
        'Βούρμπιανης',
        'Βούτση',
        'Βράχας',
        'Βράχου',
        'Βρίας',
        'Βρίνας',
        'Βρίσας',
        'Βραΐλας',
        'Βραγγιανών',
        'Βραγιά',
        'Βραγκιανών',
        'Βραδέτου',
        'Βρασνών',
        'Βραστάμων',
        'Βραχασίου',
        'Βραχατίου',
        'Βραχιάς',
        'Βραχναιίκων',
        'Βρεσθένων',
        'Βρεστού',
        'Βριλησσίων',
        'Βρομόβρυσης',
        'Βροντάδου',
        'Βροντής',
        'Βρονταμά',
        'Βροντερού',
        'Βροντισμένης',
        'Βροντούς',
        'Βροσίνας',
        'Βρουβιανών',
        'Βρουστίου',
        'Βρουχά',
        'Βροχίτσης',
        'Βρούτση',
        'Βρυναίνης',
        'Βρυοτόπου',
        'Βρυσέλλας',
        'Βρυσακίου',
        'Βρυσικών',
        'Βρυσιών',
        'Βρυσουλών',
        'Βρυσοχωρίου',
        'Βρυσούλας',
        'Βρυσών',
        'Βρυσών Αποκορρώνου',
        'Βρυσών Κυδωνίας',
        'Βρυτών',
        'Βρύσης',
        'Βυζίτσης',
        'Βυζικίου',
        'Βυθού',
        'Βυρωνείας',
        'Βυσσινέας',
        'Βυτίνης',
        'Βυτιναιίκων',
        'Βωλάδας',
        'Βωλεώνων',
        'Βόλβης',
        'Βόλου',
        'Βόνης',
        'Βόνιτσας',
        'Βύσσης',
        'Βώρων',
        'Γάβρου',
        'Γέρακα',
        'Γέργερης',
        'Γέρμα',
        'Γέρμας',
        'Γέροντα',
        'Γαΐου',
        'Γαβαλά',
        'Γαβαλοχωρίου',
        'Γαβαλούς',
        'Γαβρακίων',
        'Γαβριάς',
        'Γαβρισιών',
        'Γαβρολίμνης',
        'Γαζίου',
        'Γαζώρου',
        'Γαλάνης',
        'Γαλάρου',
        'Γαλήνης',
        'Γαλίφας',
        'Γαλανάδου',
        'Γαλαναίϊκα',
        'Γαλανόβρυσης',
        'Γαλαξιδίου',
        'Γαλαρινού',
        'Γαλατά',
        'Γαλατάδων',
        'Γαλατίστης',
        'Γαλατακίου',
        'Γαλατείας',
        'Γαλατινής',
        'Γαλατσάδων',
        'Γαλατσίου',
        'Γαλατσώνας',
        'Γαλησσά',
        'Γαληψού',
        'Γαλιάς',
        'Γαλλικού',
        'Γαναδιού',
        'Γανοχώρας',
        'Γαράζου',
        'Γαρέας',
        'Γαρίπας',
        'Γαργαλιάνων',
        'Γαρδελάδων',
        'Γαρδικίου',
        'Γαρδικίου Σούλι',
        'Γαρεφείου',
        'Γαρούνας',
        'Γαστουρίου',
        'Γαστούνης',
        'Γαυρίου',
        'Γαϊτανίου',
        'Γαύδου',
        'Γδοχίων',
        'Γελάνθης',
        'Γελινιατίκων',
        'Γενεσίου',
        'Γενισέας',
        'Γενναδίου',
        'Γερακίου',
        'Γερακαρίου',
        'Γερακαρούς',
        'Γερακιούς',
        'Γερακλίου',
        'Γερανίου',
        'Γερανίων',
        'Γεροπλατάνου',
        'Γεφυρίων',
        'Γεφυρουδίου',
        'Γεφύρας',
        'Γεωργάνων',
        'Γεωργανάδων',
        'Γεωργιανής',
        'Γεωργιανών',
        'Γεωργικού',
        'Γεωργιουπόλεως',
        'Γεωργιτσίου',
        'Γιάλτρων',
        'Γιάννουλης',
        'Γιαννάδων',
        'Γιανναίων',
        'Γιαννακοχωρίου',
        'Γιαννιτσίου',
        'Γιαννιτσοχωρίου',
        'Γιαννιτσούς',
        'Γιαννιτσών',
        'Γιαννοπούλων',
        'Γιαννωτών',
        'Γιμαρίου',
        'Γιουργάνιστας',
        'Γιρομερίου',
        'Γκαγκαλών',
        'Γκανέϊκα',
        'Γκοριτσάς',
        'Γκούρας',
        'Γκρίκας',
        'Γκραίκα',
        'Γκριμπόβου',
        'Γλάστρας',
        'Γλίνου',
        'Γλαφυρών',
        'Γλαύκης',
        'Γλινάδου',
        'Γλυκής',
        'Γλυκομηλέας',
        'Γλυκορριζίου',
        'Γλυκόβρυσης',
        'Γλυκών Νερών',
        'Γλυφάδα',
        'Γλυφάδας',
        'Γλύφας',
        'Γλώσσης',
        'Γολάς',
        'Γοματίου',
        'Γονίμου',
        'Γονούσσης',
        'Γοράνων',
        'Γοργοβιτών',
        'Γοργογυρίου',
        'Γοργομύλου',
        'Γοργοποτάμου',
        'Γοργόπη',
        'Γορτυνίας',
        'Γουβών',
        'Γουλεδιανών',
        'Γουλεμίου',
        'Γουλών',
        'Γουμένισσας',
        'Γουμέρου',
        'Γουριάς',
        'Γουριωτίσσης',
        'Γράμου',
        'Γρίβας',
        'Γραίκα',
        'Γραβιάς',
        'Γραβούνης',
        'Γραικικού',
        'Γραικοχωρίου',
        'Γραικού',
        'Γραμβουσής',
        'Γραμμένης',
        'Γραμμένης Οξυάς',
        'Γραμμένου',
        'Γραμματικού',
        'Γραμματικούς',
        'Γραμμενίτσης',
        'Γραμμούσης',
        'Γραμπιάς',
        'Γρανίτου',
        'Γρανίτσης',
        'Γρανιτσαιίκων',
        'Γρανιτσοπούλας',
        'Γρατίνη',
        'Γρεβενιτίου',
        'Γρεβενών',
        'Γρηγορίας',
        'Γρηγορίου',
        'Γρηγόρη',
        'Γριζάνου',
        'Γριζάτων',
        'Γριμπόβου',
        'Γρύλλου',
        'Γυθείου',
        'Γυμνοτόπου',
        'Γυμνού',
        'Γυναικοκάστρου',
        'Γυρίου',
        'Γωνιάς',
        'Γωνιών Μαλεβιζίου',
        'Γόμφων',
        'Γόννων',
        'Δάρα',
        'Δάφνης',
        'Δάφνου',
        'Δένδρου',
        'Δένδρων Τυρνάβου',
        'Δένδρων Φαρσάλων',
        'Δέσης',
        'Δήμητρας',
        'Δίβρης',
        'Δίου',
        'Δαδιάς',
        'Δαιμονίας',
        'Δαλαμανάρας',
        'Δαμάστας',
        'Δαμαβόλου',
        'Δαμακινίου',
        'Δαμανίων',
        'Δαμασίου',
        'Δαμασκηνιάς',
        'Δαματρίας',
        'Δαμουλιανάτων',
        'Δανακού',
        'Δαράτσου',
        'Δαρμένη',
        'Δασκίου',
        'Δασολόφου',
        'Δασοχωρίου',
        'Δασυλλίου',
        'Δασωτού',
        'Δαυγάτων',
        'Δαυλείας',
        'Δαφίων',
        'Δαφνέ',
        'Δαφνίου',
        'Δαφνιά',
        'Δαφνιωτίσσης',
        'Δαφνοσπηλιάς',
        'Δαφνουδίου',
        'Δαφνοφύτου',
        'Δαφνούλας',
        'Δαφνούσσης',
        'Δαφνωτής',
        'Δαφνών',
        'Δειλινά',
        'Δελβινακίου',
        'Δελβινακοπούλου',
        'Δελερίων',
        'Δελιανών',
        'Δελφίνου',
        'Δελφών',
        'Δεματίου',
        'Δεμεστίχων',
        'Δενδροχωρίου',
        'Δερβενίου',
        'Δερβιζιάνων',
        'Δερματίου',
        'Δεσινού',
        'Δεσκάτης',
        'Δεσποτικού',
        'Δεσφίνης',
        'Δεσύλλα',
        'Δημαίνης',
        'Δημαρίου',
        'Δημητρητσίου',
        'Δημητροπούλου',
        'Δημητσάνης',
        'Διάβας',
        'Διάσελλου',
        'Διαβατού',
        'Διαβατών',
        'Διαβολιτσίου',
        'Διακοπίου',
        'Διακοπτού',
        'Διαλεκτού',
        'Διασέλλου',
        'Διασέλλων',
        'Διασελλακίου',
        'Διβαράτων',
        'Διγελιωτίκων',
        'Διδυμοτείχου',
        'Διδύμας',
        'Διδύμων',
        'Διευχών',
        'Δικάστρου',
        'Δικαίων',
        'Δικορύφου',
        'Διλινάτων',
        'Διλόφου',
        'Διλόφου Λαρίσης',
        'Διλόφου Φαρσάλων',
        'Διμηνίου',
        'Διμηνιού',
        'Διμοκορίου',
        'Διμυλιάς',
        'Διοδίων',
        'Διομηδείας',
        'Διονυσίου',
        'Διονύσου',
        'Διπλατάνου',
        'Διποτάμου',
        'Διποταμιάς',
        'Δισπηλίου',
        'Διστράτου',
        'Διστόμου',
        'Διχειμάρρου',
        'Διχομοιρίου',
        'Διχωρίου',
        'Δοβλά',
        'Δοκιμίου',
        'Δοκός',
        'Δολίχης',
        'Δολιανών',
        'Δολού',
        'Δολών',
        'Δομίρου',
        'Δομβραίνης',
        'Δομενίκου',
        'Δομιανών',
        'Δομνίστης',
        'Δομοκού',
        'Δονούσης',
        'Δοξάτου',
        'Δοξαρά',
        'Δοξαρού',
        'Δορίσκου',
        'Δορβιτσιάς',
        'Δοτσικού',
        'Δουκάδων',
        'Δουκαναιίκων',
        'Δουλίου',
        'Δουμενών',
        'Δουμπιών',
        'Δουναίικων',
        'Δούκα',
        'Δράμας',
        'Δρίμιτσας',
        'Δραΐνας',
        'Δραβήσκου',
        'Δραγάνου',
        'Δραγασιάς',
        'Δραγοψάς',
        'Δραγωγίου',
        'Δρακαίων',
        'Δρακείας',
        'Δρακοβουνίου',
        'Δρακόνας',
        'Δρακότρυπας',
        'Δραμεσιών',
        'Δραπανιά',
        'Δραπετσώνας',
        'Δρεπάνου',
        'Δριμίσκου',
        'Δροσάτου',
        'Δροσίνη',
        'Δροσερού',
        'Δροσιά',
        'Δροσιάς',
        'Δροσινή',
        'Δροσοπηγής',
        'Δροσοχωρίου',
        'Δρυάλου',
        'Δρυμάδων',
        'Δρυμαίας',
        'Δρυμού',
        'Δρυοβούνου',
        'Δρυοφύτου',
        'Δρυόπης',
        'Δρύμη',
        'Δυρραχίου',
        'Δυσβάτου',
        'Δυτικής Φραγκίστας',
        'Δυτικού',
        'Δωδώνης',
        'Δωματίων',
        'Δωρίου',
        'Δωρικού',
        'Δωροθέας',
        'Δόλιανης',
        'Δόξης',
        'Δόριζα',
        'Δύο Βουνών',
        'Δύο Χωρίων',
        'Δύστου',
        'Εβροπούλων',
        'Εγγαρών',
        'Εγκλουβής',
        'Εδέσσης',
        'Εθιάς',
        'Εθνικού',
        'Ειδομένης',
        'Ειρηνικού',
        'Εκάλης',
        'Εκκάρας',
        'Εκκλησιών',
        'Εκκλησοχωρίου',
        'Εκκλησούλας',
        'Ελάτας',
        'Ελάτειας',
        'Ελάτης',
        'Ελάτου',
        'Ελάφου',
        'Ελίκας',
        'Ελίκης',
        'Ελαίας',
        'Ελαιοφύτου',
        'Ελαιοχωρίου',
        'Ελαιοχωρίων',
        'Ελαταριάς',
        'Ελατείας',
        'Ελατοχωρίου',
        'Ελατούς',
        'Ελατόβρυσης',
        'Ελαφονήσου',
        'Ελαφοχωρίου',
        'Ελαφότοπου',
        'Ελενών',
        'Ελεούσης',
        'Ελευθέρνης',
        'Ελευθέρου',
        'Ελευθερίου',
        'Ελευθερίου-Κορδελιού',
        'Ελευθεριανής',
        'Ελευθερουπόλεως',
        'Ελευθεροχωρίου',
        'Ελευθερών',
        'Ελικίστρας',
        'Ελληνίτσης',
        'Ελληνικού',
        'Ελληνικών',
        'Ελληνοεκκλησίας',
        'Ελληνοκάστρου',
        'Ελληνοπύργου',
        'Ελληνοχωρίου',
        'Ελλοπίας',
        'Ελούντας',
        'Εμμανουήλ Παππά',
        'Εμπάρου',
        'Εμπεσού',
        'Εμπορίου',
        'Εμπορείου',
        'Εμπορειού',
        'Εμπροσνέρου',
        'Ενορίας',
        'Εξάρχου',
        'Εξαλόφου',
        'Εξαμιλίων',
        'Εξανθείας',
        'Εξαπλατάνου',
        'Εξοχή',
        'Εξοχής',
        'Εξοχικού',
        'Εξωγής',
        'Εξωχωρίου',
        'Επάνω Βαθείας',
        'Επανομής',
        'Επανωχωρίου',
        'Επιβατών',
        'Επιδαύρου',
        'Επινιανών',
        'Επισκέψεως',
        'Επισκοπής',
        'Επισκοπής Γωνιάς',
        'Επισκοπής Νάουσας',
        'Επισκοπικού',
        'Επιταλίου',
        'Επταλόφου',
        'Επταμύλων',
        'Επταχωρίου',
        'Ερασμίου',
        'Ερατεινής',
        'Ερατεινού',
        'Ερατύρας',
        'Ερεικούσσης',
        'Ερεσού',
        'Ερετρίας',
        'Ερινεού',
        'Ερμακιάς',
        'Ερμητσίου',
        'Ερμιόνης',
        'Ερμουπόλεως',
        'Ερυθραίας',
        'Ερυθρών',
        'Ερυμανθείας',
        'Εσοχή',
        'Εσωβάλτων',
        'Εσωχωρίων',
        'Ευάνδρου',
        'Ευαγγελισμού',
        'Ευαγγελισμού Λαρίσης',
        'Ευαγγελιστρίας',
        'Ευγήρου',
        'Ευδήλου',
        'Ευζώνων',
        'Ευηνοχωρίου',
        'Ευκαρπίας',
        'Ευλάλου',
        'Ευμοίρου',
        'Ευξεινουπόλεως',
        'Ευπαλίου',
        'Ευρωπού',
        'Ευρωστίνης Ροζενών',
        'Ευόσμου',
        'Εφέσου',
        'Εφύρας',
        'Εχίνου',
        'Εύας',
        'Ζάκα',
        'Ζάκρου',
        'Ζάρκου',
        'Ζήριας',
        'Ζίρου',
        'Ζίτσης',
        'Ζίχνης',
        'Ζαγκλιβερίου',
        'Ζαγοράς',
        'Ζακυνθίων',
        'Ζαλόγγου',
        'Ζαππείου',
        'Ζαράκων',
        'Ζαρκαδιάς',
        'Ζαρού',
        'Ζαρούχλης',
        'Ζατούνης',
        'Ζαχάρως',
        'Ζαχλωριτίκων',
        'Ζαχλωρούς',
        'Ζαϊμίου',
        'Ζελίου',
        'Ζεμενού',
        'Ζενίων',
        'Ζερβοχωρίου',
        'Ζερμπισίων',
        'Ζευγαρακίου',
        'Ζευγολατείου',
        'Ζευγολατιού',
        'Ζεφυρίου',
        'Ζηλευτής',
        'Ζηλευτού',
        'Ζιγοβιστίου',
        'Ζουνακίου',
        'Ζουριδίου',
        'Ζούζουλης',
        'Ζυγού',
        'Ζυμπραγού',
        'Ζυφιά',
        'Ζωής',
        'Ζωγράφου',
        'Ζωνιανών',
        'Ζωοδόχου',
        'Ζωοδόχου Πηγής',
        'Ζωριάνου',
        'Ζωτικού',
        'Ζωφόρων',
        'Ζόλων',
        'Ζώνης',
        'Ηγουμενίτσης',
        'Ηλέκτρας',
        'Ηλιοκάλης',
        'Ηλιοκάστρου',
        'Ηλιοκώμης',
        'Ηλιορράχης',
        'Ηλιοχωρίου',
        'Ηλιούπολης',
        'Ηλιόλουστο',
        'Ημεροβιγλίου',
        'Ηραίου',
        'Ηρακλίτσης',
        'Ηρακλείας',
        'Ηρακλείου',
        'Θάνα',
        'Θάνους',
        'Θάσου',
        'Θέας',
        'Θέρμης',
        'Θέρμου',
        'Θήρας',
        'Θίσβης',
        'Θαλαμών',
        'Θαλερού',
        'Θαρουνίων',
        'Θαυμακού',
        'Θεισόας',
        'Θεμέλου',
        'Θεοδοσίων',
        'Θεοδωρακίου',
        'Θεοδωρακείου',
        'Θεοδωριάνων',
        'Θεοδώρας',
        'Θεοκτίστου',
        'Θεολόγου',
        'Θεοπέτρας',
        'Θερίσου',
        'Θεραπειό',
        'Θεριακησίου',
        'Θεριανού',
        'Θερινού',
        'Θερμησίας',
        'Θερμοπυλών',
        'Θερμών',
        'Θεσπιών',
        'Θεσπρωτικού',
        'Θεσσαλονίκης',
        'Θηβαίων',
        'Θηναίας',
        'Θηρασίας',
        'Θηριοπέτρας',
        'Θολαρίων',
        'Θολοποταμίου',
        'Θολού',
        'Θουρίας',
        'Θουρίου',
        'Θούριο Θουρίου',
        'Θρακομακεδόνων',
        'Θραψανού',
        'Θραψιμίου',
        'Θροφαρίου',
        'Θρυλορίου',
        'Θρόνου',
        'Θυμιανών',
        'Θυρίου',
        'Θωκνίας',
        'Ιάσιον',
        'Ιάσμου',
        'Ιαλυσού',
        'Ιβήρων',
        'Ιεραπέτρας',
        'Ιερισσού',
        'Ιερομνήμης',
        'Ιεροπηγής',
        'Ιητών',
        'Ιθάκης',
        'Ιθώμης',
        'Ικλαίνης',
        'Ιλίου',
        'Ιμέρου',
        'Ιμέρων',
        'Ινάχου',
        'Ινίου',
        'Ιππείου',
        'Ιρίων',
        'Ισαακίου',
        'Ισθμίας',
        'Ιστιαίας',
        'Ιστρίου',
        'Ισώματος Καρυών',
        'Ιτέα',
        'Ιτέας',
        'Ιωαννίνων',
        'Ιωαννιτών',
        'Ιωνίας',
        'Κάινας',
        'Κάλφα',
        'Κάμπου',
        'Κάμπων',
        'Κάπης',
        'Κάρπης',
        'Κάσου',
        'Κάσπακα',
        'Κάστρου',
        'Κάψα',
        'Κέδρου',
        'Κέδρων',
        'Κέλλης',
        'Κέντρου',
        'Κέχρου',
        'Κήπων',
        'Κίνυρα',
        'Κίου',
        'Κίρκης',
        'Κίρρας',
        'Καβάλας',
        'Καβάλου',
        'Καβάσιλα',
        'Καβαλλαρίου',
        'Καβαλλουρίου',
        'Καβασίλων',
        'Καββαδάδων',
        'Καβησού',
        'Καβουσίου',
        'Καβύλης',
        'Καγκαδίου',
        'Καδίου',
        'Καθενών',
        'Καθολικού',
        'Καινουργίου',
        'Καινούργιου Χωρίου',
        'Καισάρειας',
        'Καισαρίου',
        'Καισαριανής',
        'Κακαλετρίου',
        'Κακοβάτου',
        'Κακοδικίου',
        'Κακολάκκου',
        'Κακοπέτρου',
        'Κακοπλευρίου',
        'Κακοταρίου',
        'Κακουραίικων',
        'Καλάθου',
        'Καλάμου',
        'Καλάνδρας',
        'Καλάνου',
        'Καλής',
        'Καλής Βρύσης',
        'Καλής Κώμης',
        'Καλαβάρδα',
        'Καλαβρούζης',
        'Καλαβρύτων',
        'Καλαθενών',
        'Καλαμάτας',
        'Καλαμίου',
        'Καλαμακίου',
        'Καλαμαρά',
        'Καλαμαριάς',
        'Καλαμαύκας',
        'Καλαμιά',
        'Καλαμιάς',
        'Καλαμιτσίου',
        'Καλαμιτσίου Αλεξάνδρου',
        'Καλαμιτσίου Αμυγδαλίου',
        'Καλαμπάκας',
        'Καλαμπακίου',
        'Καλαμωτής',
        'Καλαμωτού',
        'Καλανίστρας',
        'Καλανδαρές',
        'Καλαποδίου',
        'Καλαρρυτών',
        'Καλαφατιώνων',
        'Καλεντίνης',
        'Καλεντζίου',
        'Καλεσιών',
        'Καλεσμένου',
        'Καλημεριάνων',
        'Καληράχης',
        'Καλιανών',
        'Καλιδόνης',
        'Καλιπάδου',
        'Καλιτσαίνης',
        'Καλλίου',
        'Καλλίστη',
        'Καλλίστης',
        'Καλλεργιανών',
        'Καλλιανίου',
        'Καλλιανού',
        'Καλλιδρόμου',
        'Καλλιθέας',
        'Καλλιθέας Σουλίου',
        'Καλλιθέας Φαρσάλων',
        'Καλλιθέας Φιλιατών',
        'Καλλιθήρου',
        'Καλλικράτειας',
        'Καλλικώμου',
        'Καλλιμασιάς',
        'Καλλινίκης',
        'Καλλιπεύκης',
        'Καλλιπόλεως',
        'Καλλιράχης',
        'Καλλιρρόης',
        'Καλλιφωνίου',
        'Καλλιφύτου',
        'Καλλιόπης',
        'Καλλονής',
        'Καλλυντήριον',
        'Καλοβάτου',
        'Καλογέρου',
        'Καλογήρων',
        'Καλογερεσίου',
        'Καλογερικού',
        'Καλογερόρραχης',
        'Καλογριανής',
        'Καλογριανών',
        'Καλοκάστρου',
        'Καλομοίρας',
        'Καλονερίου',
        'Καλονύκτου',
        'Καλοσκοπής',
        'Καλουδίου',
        'Καλουδιανών',
        'Καλουσίου',
        'Καλουτά',
        'Καλοχίου',
        'Καλοχωρίου',
        'Καλοχωρίου-Παντειχίου',
        'Καλού Αγρού',
        'Καλού Νερού',
        'Καλού Χωρίου',
        'Καλπακίου',
        'Καλτεζών',
        'Καλυβίων',
        'Καλυβίων Θορικού',
        'Καλυβίων Μυρτουντίων',
        'Καλυβίων Σοχάς',
        'Καλυβακίων',
        'Καλυβών',
        'Καλυδονίας',
        'Καλυθιών',
        'Καλυμνίων',
        'Καλύβου',
        'Καλών Δένδρων',
        'Καλών Νερών',
        'Καμάρας',
        'Καμάρων',
        'Καμένης',
        'Καμένων Βούρλων',
        'Καμήλας',
        'Καμαρίνας',
        'Καμαρίου',
        'Καμαρίτσης',
        'Καμαρίων',
        'Καμαριώτου',
        'Καμαρούλας',
        'Καμαρωτού',
        'Καμαρών',
        'Καματερού',
        'Καμενίτσης',
        'Καμενιάνων',
        'Καμηλαρίου',
        'Καμινίων',
        'Καμινακίου',
        'Καμιναράτων',
        'Καμισιανών',
        'Καμπάνη',
        'Καμπής',
        'Καμπανού',
        'Καμπιών',
        'Καμποχωρίου',
        'Κανακάδων',
        'Καναλίου',
        'Καναλίων',
        'Καναλλακίου',
        'Κανδάλου',
        'Κανδάνου',
        'Κανδήλας',
        'Καπανδριτίου',
        'Καπαρελλίου',
        'Καπελέτου',
        'Καπεσόβου',
        'Καπλανίου',
        'Καπνοφύτου',
        'Καπνοχωρίου',
        'Καππά',
        'Καππαδοκικού',
        'Καππαριάς',
        'Καράνου',
        'Καράτουλα',
        'Καράτουλα Κυνουρίας',
        'Καράτουλα Μεγαπόλεως',
        'Καρέας',
        'Καρές',
        'Καρίτσης',
        'Καρίτσης Δολόπων',
        'Καρίτσης Καρπενησίου',
        'Καραβά',
        'Καραβάδου',
        'Καραβομύλου',
        'Καραβοστάμου',
        'Καραιίκων',
        'Καρατζά',
        'Καραϊσκάκη',
        'Καρβάλης',
        'Καρβασαρά',
        'Καρβελά',
        'Καρβελίου',
        'Καρβουνάδων',
        'Καρβουναρίου',
        'Καρδίας',
        'Καρδίτσης',
        'Καρδαμά',
        'Καρδαμαίνης',
        'Καρδαμύλης',
        'Καρδαμύλων',
        'Καρδαρά',
        'Καρδαριτσίου',
        'Καρδιάς',
        'Καρδιακαυτίου',
        'Καρδιανής',
        'Καρδιτσομαγούλας',
        'Καριανής',
        'Καρινών',
        'Καριταίνης',
        'Καριωτίου',
        'Καριωτών',
        'Καρκιναγρίου',
        'Καρλοβασίων',
        'Καρνασίου',
        'Καρνεζαίικων',
        'Καροπλεσίου',
        'Καρουζανών',
        'Καρουσάδων',
        'Καρουτών',
        'Καρπάθου',
        'Καρπασίου',
        'Καρπενησίου',
        'Καρπερής',
        'Καρπερού',
        'Καρποφόρων',
        'Καρποχωρίου',
        'Καρτεράδου',
        'Καρτερίου',
        'Καρτερολίου',
        'Καρτερών',
        'Καρυάς',
        'Καρυδίου',
        'Καρυδίου Μιραμπέλλου',
        'Καρυδίτσας',
        'Καρυδιάς',
        'Καρυοβουνίου',
        'Καρυουπόλεως',
        'Καρυοφύτου',
        'Καρυοχωρίου',
        'Καρυωτίσσης',
        'Καρυών',
        'Καρωτής',
        'Καρύστου',
        'Καρών Αποκορρώνου',
        'Καρών Κισσάμου',
        'Κασάνου',
        'Κασσανδρείας',
        'Κασσανδρηνού',
        'Κασσιόπης',
        'Καστάνιανης',
        'Καστέλλας',
        'Καστέλλου',
        'Κασταμονίτσης',
        'Καστανέας',
        'Καστανέας Επιδαύρου Λιμηράς',
        'Καστανίτσης',
        'Καστανίων',
        'Καστανερής',
        'Καστανεών',
        'Καστανιάς',
        'Καστανιωτίσσης',
        'Καστανοφύτου',
        'Καστανοχωρίου',
        'Καστανούλας',
        'Καστανούσσης',
        'Καστανώνος Ζαγορίου',
        'Καστελλάνων Γύρου',
        'Καστελλάνων Μέσης',
        'Καστελλίου',
        'Καστελλίου Φουρνής',
        'Καστελλίων',
        'Καστελλιανών',
        'Καστορίας',
        'Καστορείου',
        'Καστού',
        'Καστρίου',
        'Καστρίτσης',
        'Καστρίων',
        'Καστρακίου',
        'Καστριτσίου',
        'Καστριωτίσσης',
        'Κατάκαλης',
        'Καταβόθρας',
        'Κατακαλίου',
        'Κατακοίλου',
        'Κατακόλου',
        'Καταλάκκου',
        'Καταλαγαρίου',
        'Καταλωνίων',
        'Καταμάχης',
        'Καταπόλων',
        'Καταρράκτου',
        'Κατασταρίου',
        'Καταφυγίου',
        'Καταφυλλίου',
        'Καταφύτου',
        'Καταχά',
        'Κατερίνης',
        'Κατοχής',
        'Κατούνας',
        'Κατούνης',
        'Κατσίμπαλη',
        'Κατσαρού',
        'Κατσαρωνίου',
        'Κατσιδωνίου',
        'Κατσικά',
        'Κατταβίας',
        'Κατωγής',
        'Κατωμερίου',
        'Κατωχωρίου',
        'Καυκάσου',
        'Καυκωνίας',
        'Καψάλων',
        'Καψοράχης',
        'Κελεφά',
        'Κεντρικής',
        'Κεντρικού',
        'Κεντροχωρίου',
        'Κεράμου',
        'Κεράς',
        'Κερίου',
        'Κεραμέ',
        'Κεραμίου',
        'Κεραμίτσης',
        'Κεραματών',
        'Κεραμείας',
        'Κεραμείων',
        'Κεραμειών',
        'Κεραμιδίου',
        'Κεραμιδιάς',
        'Κεραμουτσίου',
        'Κεραμωτής',
        'Κερασέα',
        'Κερασέας',
        'Κερασίτσης',
        'Κερασίων',
        'Κερασεών',
        'Κερασιάς',
        'Κερασοχωρίου',
        'Κεραστάρη',
        'Κερασόβου',
        'Κερατέας',
        'Κερατσινίου',
        'Κερδυλίων',
        'Κερκίνης',
        'Κερκυραίων',
        'Κερπινής',
        'Κερτέζης',
        'Κερυνείας',
        'Κεσσάνης',
        'Κεστρίνης',
        'Κεφάλου',
        'Κεφαλά',
        'Κεφαλίου',
        'Κεφαλαρίου',
        'Κεφαλινού',
        'Κεφαλοβρυσίου',
        'Κεφαλοβρύσου',
        'Κεφαλοχωρίου',
        'Κεφαλόβρυσης',
        'Κεχρινιάς',
        'Κεχριών',
        'Κεχροκάμπου',
        'Κηκίδιον',
        'Κηπίων',
        'Κηπουρείου',
        'Κηρίνθου',
        'Κηφισιάς',
        'Κιβερίου',
        'Κιβωτού',
        'Κιζάριον',
        'Κιλελέρ',
        'Κιλκίς',
        'Κιμμερίων',
        'Κιμώλου',
        'Κινιδάρου',
        'Κιονίου',
        'Κιρκιζατών',
        'Κισσάμου',
        'Κισσού',
        'Κλένιας',
        'Κλήματος Ευπαλίου',
        'Κλαδά',
        'Κλαδέου',
        'Κλαδορράχης',
        'Κλαυσίου',
        'Κλείτου',
        'Κλειδίου',
        'Κλειδωνιάς',
        'Κλεινού',
        'Κλεινών',
        'Κλειούς',
        'Κλεισορρευμάτων',
        'Κλεισούρας',
        'Κλεισωρείας',
        'Κλειτορίας',
        'Κλειτσού',
        'Κλεπάς',
        'Κληματακίου',
        'Κληματιάς',
        'Κλημεντίου',
        'Κλινδιάς',
        'Κλοκοτού',
        'Κλωνίου',
        'Κνίδης',
        'Κοίλων',
        'Κοίτας',
        'Κοζάνης',
        'Κοθρέα',
        'Κοιλαδίου',
        'Κοιλιωμένου',
        'Κοιμήσεως',
        'Κοινής',
        'Κοκκάλας',
        'Κοκκίνου',
        'Κοκκίνου Χωρίου',
        'Κοκκαρίου',
        'Κοκκινίου',
        'Κοκκινιάς',
        'Κοκκινογείου',
        'Κοκκινογείων',
        'Κοκκινολιθαρίου',
        'Κοκκινομηλέας',
        'Κοκκινοπηλού',
        'Κοκκινορράχης',
        'Κοκκινοχωρίου',
        'Κοκκινόβρυσης',
        'Κοκκορά',
        'Κοκκωνίου',
        'Κοκκωτών',
        'Κολινδρού',
        'Κολιρίου',
        'Κολλινών',
        'Κολοκυθιάς',
        'Κολυμβαρίου',
        'Κολχικής',
        'Κολχικού',
        'Κομάνου',
        'Κομάρων',
        'Κομίτου',
        'Κομηλίου',
        'Κομιτάτων',
        'Κομμένου',
        'Κομνίνης',
        'Κομνηνάδων',
        'Κομνηνών',
        'Κομοτηνής',
        'Κομπηγαδίου',
        'Κομπιτσίου',
        'Κομποτάδων',
        'Κομποτίου',
        'Κομπωτής',
        'Κονίσκης',
        'Κονίτσης',
        'Κονακίων',
        'Κονιάκου',
        'Κονιδίτσης',
        'Κονισκού',
        'Κονιστρών',
        'Κονοπίνας',
        'Κονταιίκων',
        'Κοντακαιίκων',
        'Κονταραίνης',
        'Κονταριωτίσσης',
        'Κοντιά',
        'Κοντοβαζαίνης',
        'Κοντοβουνίου',
        'Κοντογενάδας',
        'Κοντοδεσποτίου',
        'Κοντολιανίκων',
        'Κοντομαρίου',
        'Κοντοπουλίου',
        'Κοντοπούλων',
        'Κοξαρές',
        'Κοπάνης',
        'Κοπανακίου',
        'Κοπανού',
        'Κορίνθου',
        'Κορίτιανης',
        'Κορακιάνας',
        'Κορακοβουνίου',
        'Κορακοχωρίου',
        'Κορησού',
        'Κορησσίας',
        'Κορθίου',
        'Κορινού',
        'Κορμίστης',
        'Κορνοφωλεάς',
        'Κορνού',
        'Κοροίβου',
        'Κορομηλέας',
        'Κορυδαλλού',
        'Κορυσχάδων',
        'Κορυφής',
        'Κορυφασίου',
        'Κορυφούλας',
        'Κορυφών',
        'Κορφιωτίσσης',
        'Κορφοβουνίου',
        'Κορφών',
        'Κορωνείας',
        'Κορωνησίας',
        'Κορωνούδας',
        'Κορώνας',
        'Κορώνης',
        'Κορώνου',
        'Κοσκίνων',
        'Κοσκινά',
        'Κοσκινού',
        'Κοσμά',
        'Κοσμαδαίων',
        'Κοσματίου',
        'Κοσμηράς',
        'Κοτρωνίου',
        'Κοτσανοπούλου',
        'Κοτσικιάς',
        'Κοτύλης',
        'Κουβαλάτων',
        'Κουβαρά',
        'Κουβουκλίων',
        'Κουδουνίου',
        'Κουδουνίων',
        'Κουκκουλίου',
        'Κουκκουλίων',
        'Κουκκουνάρας',
        'Κουκλεσίου',
        'Κουκλιών',
        'Κουκουλιών',
        'Κουκουναράς',
        'Κουλεντίων',
        'Κουλούρας',
        'Κουμαιίκων',
        'Κουμαραδαίων',
        'Κουμαριάς',
        'Κουμαριτσίου',
        'Κουμπουριανών',
        'Κουνάβων',
        'Κουνινάς',
        'Κουνουπίτσης',
        'Κουνουπιάς',
        'Κουνουπιδιανών',
        'Κουπακίου',
        'Κουπιών',
        'Κουρέντων',
        'Κουραμάδων',
        'Κουρεμαδίου',
        'Κουρκουλών',
        'Κουρνά',
        'Κουρουκλάτων',
        'Κουρουνίου',
        'Κουρουνίων',
        'Κουρουνιού',
        'Κουρουτών',
        'Κουρτακίου',
        'Κουρτεσίου',
        'Κουσέ',
        'Κουσπάδων',
        'Κουτίφαρη',
        'Κουταλά',
        'Κουτρούφων',
        'Κουτσίου',
        'Κουτσελιού',
        'Κουτσοποδίου',
        'Κουτσοχέρας',
        'Κουτσοχέρου',
        'Κουτσού',
        'Κουφαλίων',
        'Κουφοβούνου',
        'Κουφονησίων',
        'Κουφοπούλου',
        'Κουφού',
        'Κοχύλου',
        'Κούβελα',
        'Κούκκου',
        'Κούμανη',
        'Κούμαρη',
        'Κούμων',
        'Κούνου',
        'Κούταλης',
        'Κούτελης',
        'Κούφης',
        'Κράψης',
        'Κρήμνης',
        'Κρήνης',
        'Κρήνης Αιγιαλείας',
        'Κρήνης Πατρών',
        'Κρίνου',
        'Κραθίου',
        'Κρανέας',
        'Κρανιδίου',
        'Κρανιδίων',
        'Κρανούλας',
        'Κρασίου',
        'Κρατερού',
        'Κρεμαστής',
        'Κρεμαστού',
        'Κρεμμυδίων',
        'Κρεστένων',
        'Κρηνίδων',
        'Κρηνίτσης',
        'Κρηνών',
        'Κρηστώνης',
        'Κρητηνίας',
        'Κριατσίου',
        'Κριεζών',
        'Κριθαρακίων',
        'Κριθιάς',
        'Κρικέλλου',
        'Κριμηνίου',
        'Κρινοφύτων',
        'Κριτσάς',
        'Κροκίου',
        'Κροκεών',
        'Κροκυλείου',
        'Κρούστα',
        'Κρυονέρου',
        'Κρυονερίου',
        'Κρυονερίου Ηλείας',
        'Κρυονερίου Ολυμπίας',
        'Κρυονερίτη',
        'Κρυονερίων',
        'Κρυοπηγής',
        'Κρυσταλλοπηγής',
        'Κρυσταλλόβρυσης',
        'Κρυφοβού',
        'Κρυόβρυση',
        'Κρυόβρυσης',
        'Κρυών',
        'Κρωβύλης',
        'Κρωπίας',
        'Κρόκου',
        'Κρύας',
        'Κρύας Βρύσης',
        'Κτένιον',
        'Κτικάδου',
        'Κτιμένης',
        'Κτισμάτων',
        'Κτιστάδων',
        'Κυανής',
        'Κυδωνέας',
        'Κυδωνιών',
        'Κυθήρων',
        'Κυλλήνης',
        'Κυμίνων',
        'Κυνηγού',
        'Κυνοπιαστών',
        'Κυπαρίσσου',
        'Κυπαρισσίας',
        'Κυπαρισσίου',
        'Κυπαρισσίων',
        'Κυρά Βγένας',
        'Κυρίων',
        'Κυρακαλής',
        'Κυριάννας',
        'Κυριακής',
        'Κυριακίου',
        'Κυριακοχωρίου',
        'Κυρτώνης',
        'Κυψέλης',
        'Κυψέλης Μεθάνων',
        'Κυψελοχωρίου',
        'Κω',
        'Κωνσταντίας',
        'Κωνσταντίνων',
        'Κωνσταντινάτου',
        'Κωστάνιανης',
        'Κωστακιών',
        'Κωσταλέξη',
        'Κωσταραζίου',
        'Κωτιλίου',
        'Κωφών',
        'Κόκκινων Λουριών',
        'Κόκλα',
        'Κόμπων',
        'Κόντσικας',
        'Κόξαρης',
        'Κόρφου',
        'Κόσμιον',
        'Κότρωνα',
        'Κύθνου',
        'Κύμης',
        'Κώμης',
        'Κώστου',
        'Κώτα',
        'Λάβδα',
        'Λάβδανης',
        'Λάγιου',
        'Λάγκας',
        'Λάδης',
        'Λάκκας',
        'Λάκκων',
        'Λάλα',
        'Λάλουκα',
        'Λάμπου Μύλων',
        'Λάρδου',
        'Λάστης',
        'Λάστρου',
        'Λάτα',
        'Λέκας',
        'Λέρου',
        'Λίμνης',
        'Λίνδου',
        'Λίππας',
        'Λίστας',
        'Λαΐστης',
        'Λαέρμων',
        'Λαβάρων',
        'Λαγίας',
        'Λαγανά',
        'Λαγκάδας',
        'Λαγκαδά',
        'Λαγκαδίων',
        'Λαγκαδαιίκων',
        'Λαγκαδακίων',
        'Λαγκαδικίων',
        'Λαγοβουνίου',
        'Λαγολίου',
        'Λαγορράχης',
        'Λαγού',
        'Λαγυνών',
        'Λαγωπόδου',
        'Λαδά',
        'Λαδικούς',
        'Λαδοχωρίου',
        'Λαζαράτων',
        'Λαζαρίνας',
        'Λαιίκων',
        'Λαιμού',
        'Λακήθρας',
        'Λακκοπέτρας',
        'Λακκωμάτων',
        'Λακκωνίων',
        'Λακώνων',
        'Λαλιώτου',
        'Λαμιέων',
        'Λαμπαίνης',
        'Λαμπείας',
        'Λαμπερού',
        'Λαμπινής',
        'Λαμπινούς',
        'Λαμπιρίου',
        'Λαμπιωτών',
        'Λαμποκάμπου',
        'Λαμπρόν',
        'Λαμψάκου',
        'Λαμύρων',
        'Λανθίου',
        'Λαντζουνάτου',
        'Λαπαναγών',
        'Λαρίσης',
        'Λαρανίου',
        'Λαρύμνης',
        'Λασταιίκων',
        'Λατζοΐου',
        'Λατσίδας',
        'Λαυκίου',
        'Λαυρεωτικής',
        'Λαφιώνας',
        'Λαφυστίου',
        'Λαχίου',
        'Λαχανά',
        'Λαχανάδας',
        'Λαχανιάς',
        'Λαψίστης',
        'Λαύκας',
        'Λαύκου',
        'Λεήμονα',
        'Λεβαίας',
        'Λεβαδέων',
        'Λεβεντοχωρίου',
        'Λεβιδίου',
        'Λειανοκλαδίου',
        'Λειψυδρίου',
        'Λειψών',
        'Λεκάνης',
        'Λεοντίου',
        'Λεοντίτου',
        'Λεονταρίου',
        'Λεπενούς',
        'Λεπετύμνου',
        'Λεπιανών',
        'Λεπούρων',
        'Λεπρέου',
        'Λεπτινίου',
        'Λεπτοκαρυάς',
        'Λεπτοκαρυάς Ζαγορίου',
        'Λεπτοκαρυών',
        'Λεπτοπόδων',
        'Λεσινίου',
        'Λευκάρων',
        'Λευκίμμης',
        'Λευκαδίων',
        'Λευκαδιτίου',
        'Λευκακίων',
        'Λευκασίου',
        'Λευκογείων',
        'Λευκοθέας',
        'Λευκοπηγής',
        'Λευκοτόπου',
        'Λευκοχωρίου',
        'Λευκοχώρας',
        'Λευκού',
        'Λευκόβρυσης',
        'Λευκών',
        'Λεχαίου',
        'Λεχαινών',
        'Λεχουρίου',
        'Λεχωνίων',
        'Λεχόβου',
        'Λεωνιδίου',
        'Λεύκας',
        'Λεύκης',
        'Λεύκτρων',
        'Λημερίου',
        'Ληνός',
        'Ληξουρίου',
        'Λητής',
        'Λιανοβεργίου',
        'Λιαπάδων',
        'Λιας',
        'Λιβαδίου',
        'Λιβαδίων',
        'Λιβαδακίου',
        'Λιβαδαρίου',
        'Λιβαδερού',
        'Λιβαδιάς',
        'Λιβαδοχωρίου',
        'Λιβανατών',
        'Λιβαρτζίου',
        'Λιβερών',
        'Λιγκιάδων',
        'Λιγορτύνου',
        'Λιγοψάς',
        'Λιδωρικίου',
        'Λιθίνου',
        'Λιθίου',
        'Λιθακιάς',
        'Λιθιάς',
        'Λιθινών',
        'Λιθοβουνίων',
        'Λιθοτόπου',
        'Λιθοχωρίου',
        'Λικνάδων',
        'Λιλαίας',
        'Λιλιανού',
        'Λιμένος Χερσονήσου',
        'Λιμίνης',
        'Λιμεναρίων',
        'Λιμνίτσης',
        'Λιμνιών',
        'Λιμνοτόπου',
        'Λιμνοχωρίου',
        'Λιμνών',
        'Λιναριάς',
        'Λινισταίνης',
        'Λιοδώρας',
        'Λιοπράσου',
        'Λιοσίων',
        'Λιπαρού',
        'Λιποχωρίου',
        'Λιρών',
        'Λισβορίου',
        'Λιτοσέλου',
        'Λιτοχώρου',
        'Λογγάδων',
        'Λογγάς',
        'Λογγάστρας',
        'Λογγιτσίου',
        'Λογγού',
        'Λογκανίκου',
        'Λογοθετιανίκων',
        'Λοξάδας',
        'Λουκά',
        'Λουκισίων',
        'Λουκομίου',
        'Λουρδάτων',
        'Λουρών',
        'Λουσακιών',
        'Λουσικών',
        'Λουσών',
        'Λουτουφίου',
        'Λουτρακίου',
        'Λουτρακίου Περαχώρας',
        'Λουτροπηγής',
        'Λουτροπόλεως Θερμής',
        'Λουτροπόλεως Μεθάνων',
        'Λουτροτόπου',
        'Λουτρού',
        'Λουτρού Λαρίσης',
        'Λουτρών',
        'Λουτρών Αιδηψού',
        'Λουτρών Ηραίας',
        'Λουτρών Υπάτης',
        'Λουτσίου',
        'Λουτσών',
        'Λοφίσκου',
        'Λοφαρίου',
        'Λοχριάς',
        'Λούβρης',
        'Λούβρου',
        'Λούμα',
        'Λούρου',
        'Λούτσας',
        'Λούτσης',
        'Λούχας',
        'Λυγαριάς',
        'Λυγερέα',
        'Λυγερής',
        'Λυγιά',
        'Λυγιάς',
        'Λυδίας',
        'Λυκίσσης',
        'Λυκαίου',
        'Λυκοβρύσεως',
        'Λυκοποριάς',
        'Λυκοσούρας',
        'Λυκοστόμου',
        'Λυκοτράφου',
        'Λυκουδίου',
        'Λυκουρίας',
        'Λυκοχίων',
        'Λυκούρεση',
        'Λυκόγιαννης',
        'Λυπουδεσίου',
        'Λυρκείας',
        'Λυσιμαχείας',
        'Λυσσαρέας',
        'Λυττού',
        'Λυχνού',
        'Λόγγου',
        'Λόφου',
        'Λόφων',
        'Λύγγου',
        'Λύκειον',
        'Λύρας',
        'Λύχνων',
        'Μάγειρα',
        'Μάζης',
        'Μάζιας',
        'Μάκρης',
        'Μάλεμε',
        'Μάλης',
        'Μάλθης',
        'Μάλτας',
        'Μάναρη',
        'Μάνδρας',
        'Μάνεση',
        'Μάνης',
        'Μάννα',
        'Μάννας',
        'Μάραθα',
        'Μάρθας',
        'Μάρκου',
        'Μάστρου',
        'Μάχου',
        'Μέγα Κάμπου',
        'Μέγα Πιστόν',
        'Μέρους',
        'Μέρωνα',
        'Μέσα Διδύμας',
        'Μέσα Λακκωνίων',
        'Μέσα Λασιθίου',
        'Μέσα Μουλιανών',
        'Μέση',
        'Μέσης',
        'Μέσης Συνοικίας Τρικάλων',
        'Μέσου Γερακαρίου',
        'Μήλου',
        'Μίλα',
        'Μίνας',
        'Μίνθης',
        'Μίστρου',
        'Μαγαζιών',
        'Μαγαρικαρίου',
        'Μαγγάνων',
        'Μαγγανίτου',
        'Μαγγανιακού',
        'Μαγικού',
        'Μαγνησίας',
        'Μαγουλάδων',
        'Μαγουλίτσης',
        'Μαγουλιάνων',
        'Μαγούλας',
        'Μαδένης',
        'Μαδύτου',
        'Μαζίου',
        'Μαζαράκι',
        'Μαζαρακίου',
        'Μαζαρακιάς',
        'Μαθίας',
        'Μαθιάς',
        'Μαθρακίου',
        'Μαινάλου',
        'Μακίστου',
        'Μακράδων',
        'Μακρίνου',
        'Μακρίσης',
        'Μακρακώμης',
        'Μακρινής',
        'Μακρινίτσης',
        'Μακρινούς',
        'Μακρισίων',
        'Μακρολιβάδου',
        'Μακροταντάλου',
        'Μακροχωρίου',
        'Μακρυγιάλου',
        'Μακρυκάπας',
        'Μακρυλιάς',
        'Μακρυπλαγίου',
        'Μακρυρράχης',
        'Μακρυσίου',
        'Μακρυχωρίου',
        'Μακρυωτίκων',
        'Μακυνείας',
        'Μαλάξας',
        'Μαλίων',
        'Μαλαθύρου',
        'Μαλακάσης',
        'Μαλακίων',
        'Μαλακασίου',
        'Μαλαμάτων',
        'Μαλανδρίνου',
        'Μαλαντρενίου',
        'Μαλγάρων',
        'Μαλεσίνης',
        'Μαλεσιάδας',
        'Μαλετιάνων',
        'Μαλλωτών',
        'Μαλουνίου',
        'Μαλυκρείου',
        'Μαλών',
        'Μαμουλάδας',
        'Μαμουσιάς',
        'Μαναγούλης',
        'Μανασσή',
        'Μανδάλου',
        'Μανδηλίου',
        'Μανδρακίου',
        'Μανδρινής',
        'Μανδρών',
        'Μανεσίου Καλαβρύτων',
        'Μανεσίου Πατρών',
        'Μανθυρέας',
        'Μανιάκων',
        'Μανιακίου',
        'Μανικίων',
        'Μανολατών',
        'Μανολιάσης',
        'Μανολιοπούλου',
        'Μανταμάδου',
        'Μαντασιάς',
        'Μαντείου',
        'Μαντζαρίου',
        'Μαντινείας',
        'Μαντουδίου',
        'Μαράθου',
        'Μαρίνης',
        'Μαρίου',
        'Μαραθέας',
        'Μαραθιά',
        'Μαραθιάς',
        'Μαραθοκάμπου',
        'Μαραθοπόλεως',
        'Μαραθούσσης',
        'Μαραντοχωρίου',
        'Μαρασίων',
        'Μαργαριτίου',
        'Μαργαριτών',
        'Μαργελίου',
        'Μαριολάτας',
        'Μαριού',
        'Μαριτσών',
        'Μαριών',
        'Μαρκινιάδας',
        'Μαρκοπούλου',
        'Μαρκοπούλου Μεσογαίας',
        'Μαρκοπούλου Ωρωπού',
        'Μαρμάρου',
        'Μαρμάρων',
        'Μαρμακέτου',
        'Μαρμαρά',
        'Μαρμαρίνης',
        'Μαρμαρίου',
        'Μαρουλά',
        'Μαρπήσσης',
        'Μαρτίνου',
        'Μαρωνίας',
        'Μαρωνείας',
        'Μασάρων',
        'Μασχολουρίου',
        'Ματίου',
        'Ματαράγκας',
        'Ματεσίου',
        'Ματονερίου',
        'Ματσουκίου',
        'Μαυράτων',
        'Μαυρίλου',
        'Μαυραναίων',
        'Μαυρατζαίων',
        'Μαυραχάδων',
        'Μαυρελίου',
        'Μαυρικίου',
        'Μαυριών',
        'Μαυροβάτου',
        'Μαυροβουνίου',
        'Μαυρογιάννη',
        'Μαυροδενδρίου',
        'Μαυροθαλάσσης',
        'Μαυροκάμπου',
        'Μαυροκκλησίου',
        'Μαυρολεύκης',
        'Μαυρολιθαρίου',
        'Μαυρολόφου',
        'Μαυρομμάτας',
        'Μαυρομματίου',
        'Μαυρομματίου Παμίσου',
        'Μαυρονερίου',
        'Μαυρονόρους',
        'Μαυροπηγής',
        'Μαυροπούλου',
        'Μαυρουδίου',
        'Μαυροχωρίου',
        'Μαυρούδας',
        'Μαχαιρά',
        'Μαχαιράδου',
        'Μαχαιρών',
        'Μεγάλης Βρύσης',
        'Μεγάλης Γότιστας',
        'Μεγάλης Δοξιπάρας',
        'Μεγάλης Κάψης',
        'Μεγάλης Κερασέας',
        'Μεγάλης Παναγίας',
        'Μεγάλης Στέρνας',
        'Μεγάλης Χώρας',
        'Μεγάλου Βάλτου',
        'Μεγάλου Γαρδικίου',
        'Μεγάλου Δουκάτου',
        'Μεγάλου Ελευθεροχωρίου',
        'Μεγάλου Ευυδρίου',
        'Μεγάλου Κεφαλοβρύσου',
        'Μεγάλου Μοναστηρίου',
        'Μεγάλου Περιστερίου',
        'Μεγάλου Σειρηνίου',
        'Μεγάλου Χωρίου',
        'Μεγάλων Καλυβίων',
        'Μεγάρου',
        'Μεγάρχης',
        'Μεγίστης',
        'Μεγαλοβρύσου',
        'Μεγαλοκάμπου',
        'Μεγαλοπόλεως',
        'Μεγαλοχωρίου',
        'Μεγαλόχαρης',
        'Μεγαπλατάνου',
        'Μεγαρέων',
        'Μεθώνης',
        'Μελά',
        'Μελάμπων',
        'Μελάνων',
        'Μελέτη',
        'Μελίας',
        'Μελίκης',
        'Μελίσσα',
        'Μελίσσης',
        'Μελίτης',
        'Μελανθίου',
        'Μελανιού',
        'Μελενικιτσίου',
        'Μελεσών',
        'Μελιάς',
        'Μελιανών',
        'Μελιβοίας',
        'Μελιγαλά',
        'Μελιγγών',
        'Μελιγούς',
        'Μελιδονίου',
        'Μελισσίου',
        'Μελισσίων',
        'Μελισσοκομείου',
        'Μελισσοπέτρας',
        'Μελισσοτόπου',
        'Μελισσουργακίου',
        'Μελισσουργού',
        'Μελισσουργών',
        'Μελισσοχωρίου',
        'Μελισσόπετρας',
        'Μελιτίνης',
        'Μελιταίας',
        'Μελπείας',
        'Μενδενίτσης',
        'Μενεμένης',
        'Μενετών',
        'Μενιδίου',
        'Μεξιατών',
        'Μεράς',
        'Μεριάς',
        'Μερκάδας',
        'Μερκοβουνίου',
        'Μερόπης',
        'Μεσαίας Κάψης',
        'Μεσαίου',
        'Μεσαγρού',
        'Μεσαναγρού',
        'Μεσαρίστης',
        'Μεσαριάς',
        'Μεσαριάς Άνδρου',
        'Μεσελέρων',
        'Μεσενικόλα',
        'Μεσημβρίας',
        'Μεσημερίου',
        'Μεσιάς',
        'Μεσιανής',
        'Μεσιανού',
        'Μεσινού',
        'Μεσκλών',
        'Μεσοβουνίου',
        'Μεσοβουνίων',
        'Μεσοβούνου',
        'Μεσογείου',
        'Μεσοκάμπου',
        'Μεσοκώμης',
        'Μεσολακκιάς',
        'Μεσολογγίου',
        'Μεσολουρίου',
        'Μεσολόγγου',
        'Μεσονησίου',
        'Μεσοποτάμου',
        'Μεσοποταμιάς',
        'Μεσοπύργου',
        'Μεσορράχης',
        'Μεσορρουγίου',
        'Μεσορόπης',
        'Μεσοτόπου',
        'Μεσοχωρίου',
        'Μεσοχωρίου Υπάτης',
        'Μεσοχωρίων',
        'Μεσοχώρας',
        'Μεσσήνης',
        'Μεστών',
        'Μετάλλων',
        'Μεταγκιτσίου',
        'Μεταμορφώσεως',
        'Μεταμόρφωσης',
        'Μεταξά',
        'Μεταξάδας',
        'Μεταξάδων',
        'Μεταξάτων',
        'Μεταξοχωρίου',
        'Μετοχίου',
        'Μετοχίου Διρφύων',
        'Μετοχίου Κηρέως',
        'Μετσόβου',
        'Μετόχιο Προδρόμου',
        'Μηθύμνης',
        'Μηλέα',
        'Μηλέας',
        'Μηλίνης',
        'Μηλίτσας',
        'Μηλίτσης',
        'Μηλεών',
        'Μηλιάς',
        'Μηλιανών',
        'Μηλιωτίου',
        'Μηλοχωρίου',
        'Μητάτου',
        'Μητάτων',
        'Μητροπόλεως',
        'Μητρουσίου',
        'Μηχανιώνας',
        'Μιαμούς',
        'Μιδέας',
        'Μικράς Γότιστας',
        'Μικράς Μαντινείας',
        'Μικροβάλτου',
        'Μικροθηβών',
        'Μικροκάμπου',
        'Μικροκάστρου',
        'Μικροκλεισούρας',
        'Μικρολίμνης',
        'Μικρολιβάδου',
        'Μικρομάνης',
        'Μικρομηλέας',
        'Μικροπόλεως',
        'Μικροσπηλιάς',
        'Μικροχωρίου',
        'Μικρού Βάλτου',
        'Μικρού Βουνού',
        'Μικρού Δάσους',
        'Μικρού Δερείου',
        'Μικρού Μοναστηρίου',
        'Μικρού Περιβολακίου',
        'Μικρού Περιστερίου',
        'Μικρού Ποντιά',
        'Μικρού Σουλίου',
        'Μικρού Χωρίου',
        'Μικρόν Πιστόν',
        'Μιλάτου',
        'Μιλλιαράδων',
        'Μιντιλογλίου',
        'Μιράνων',
        'Μιραλίου',
        'Μιστεγνών',
        'Μιτοπόλεως',
        'Μιχαλιτσίου',
        'Μιχοΐου',
        'Μοίρας',
        'Μοδίου',
        'Μοιρών',
        'Μολάων',
        'Μολίστης',
        'Μολυβδοσκεπάστου',
        'Μολόχας',
        'Μονής',
        'Μοναστηρίου',
        'Μοναστηρακίου',
        'Μοναχιτίου',
        'Μονεμβασίας',
        'Μονοδενδρίου',
        'Μονοδρύου',
        'Μονοκαρυάς',
        'Μονοκκλησιάς',
        'Μονολίθου',
        'Μονολιθίου',
        'Μονοπολάτων',
        'Μονοσπίτων',
        'Μονόβρυσης',
        'Μοραΐτικων',
        'Μορονίου',
        'Μορφοβουνίου',
        'Μοσιάς',
        'Μοσχάτου',
        'Μοσχοκαρυάς',
        'Μοσχοποτάμου',
        'Μοσχοφύτου',
        'Μοσχοχωρίου',
        'Μουδανιών',
        'Μουζίλου',
        'Μουζακίου',
        'Μουζακαίων',
        'Μουζακαιίκων',
        'Μουζουρά',
        'Μουλίων',
        'Μουλιανών',
        'Μουλκίου',
        'Μουρεσίου',
        'Μουριάς',
        'Μουριατάδας',
        'Μουρικίου',
        'Μουριών',
        'Μουρνές',
        'Μουρνιών',
        'Μουσάτων',
        'Μουσθένης',
        'Μουσιωτίτσης',
        'Μουσουνίτσης',
        'Μουσούρων',
        'Μοχού',
        'Μούδρου',
        'Μούντρου',
        'Μπάφρας',
        'Μπαμπίνης',
        'Μπαμπαλιού',
        'Μπαουσιών',
        'Μπατσίου',
        'Μπελοκομίτης',
        'Μπενιτσών',
        'Μπεστιάς',
        'Μπιζανίου',
        'Μποζικά',
        'Μπολατίου',
        'Μπουλαριών',
        'Μποχάλης',
        'Μπράλου',
        'Μπόρσα',
        'Μπόρσιον',
        'Μυγδαλιάς',
        'Μυκηνών',
        'Μυκονίων',
        'Μυλοποτάμου',
        'Μυλοτόπου',
        'Μυξόρρουμα',
        'Μυρίκης',
        'Μυρίνης',
        'Μυριναίων',
        'Μυριοκεφάλων',
        'Μυριοφύτου',
        'Μυρκίνου',
        'Μυρμηγκίου',
        'Μυροδάφνης',
        'Μυροφύλλου',
        'Μυρρίνης',
        'Μυρσίνης',
        'Μυρσινοχωρίου',
        'Μυρτέας',
        'Μυρτιάς',
        'Μυρτιδίων',
        'Μυρτουντίων',
        'Μυρτοφύτου',
        'Μυρωδάτου',
        'Μυρωνίων',
        'Μυρόβρυσης',
        'Μυστρά',
        'Μυτιλήνης',
        'Μυτιληνιών',
        'Μυχού',
        'Μόριας',
        'Μόρφης',
        'Μύθων',
        'Μύκης',
        'Μύλων',
        'Μύρθιου',
        'Μύρου',
        'Μύρτου',
        'Μύρων',
        'Μύστακας',
        'Μύτικα',
        'Μώλου',
        'Ν.Κερασιάς',
        'Νάξου',
        'Νάπης',
        'Νέα Σάντα',
        'Νίκης',
        'Νίπους',
        'Νίψης',
        'Ναμάτων',
        'Ναούσης',
        'Ναρθακίου',
        'Ναρκίσσου',
        'Νασίων',
        'Ναυπάκτου',
        'Ναυπακτίας',
        'Ναυπλιέων',
        'Νεάπολης',
        'Νεαπόλεως',
        'Νεγάδων',
        'Νεγράδων',
        'Νεδούσης',
        'Νεμέας',
        'Νεμούτας',
        'Νενήτων',
        'Νενητουρίων',
        'Νεοκάστρου',
        'Νεοκαισαρείας',
        'Νεοχωρίου',
        'Νεοχωρακίου',
        'Νεοχωροπούλου',
        'Νεοχωρούδας',
        'Νεράιδας',
        'Νεράντζης',
        'Νεραντζιών',
        'Νεραϊδοχωρίου',
        'Νεριανών',
        'Νεροκούρου',
        'Νερομάννας',
        'Νερομύλου',
        'Νερομύλων',
        'Νεροτριβιάς',
        'Νεροφράκτου',
        'Νεροχωρίου',
        'Νεστάνης',
        'Νεστορίου',
        'Νευροκοπίου',
        'Νεύρα',
        'Νησίου',
        'Νησακίου',
        'Νιάτων',
        'Νιγρίτης',
        'Νιθαύρεως',
        'Νικήσιανης',
        'Νικήτης',
        'Νικαίας',
        'Νικηθιανού',
        'Νικηταί',
        'Νικηφόρου',
        'Νικιών',
        'Νικοκλείας',
        'Νικολή',
        'Νικολαιίκων',
        'Νικολιτσίου',
        'Νικομηδείας',
        'Νικομηδινού',
        'Νικοπόλεως',
        'Νικοτσάρας',
        'Νικόπολης',
        'Νιπιδιτού',
        'Νιφοραιίκων',
        'Νομής',
        'Νομίων',
        'Νομιτσή',
        'Νοστίμου',
        'Νοτίας',
        'Νοχιών',
        'Ντερέ',
        'Νυβρίτου',
        'Νυδρίου',
        'Νυμφίου',
        'Νυμφαίου',
        'Νυμφασίας',
        'Νυμφοπέτρας',
        'Νυμφών',
        'Νυφίου',
        'Ξάνθης',
        'Ξαμουδοχωρίου',
        'Ξανθάτων',
        'Ξανθοχωρίου',
        'Ξενιάκου',
        'Ξενιών',
        'Ξενοπούλου',
        'Ξεριά',
        'Ξεχασμένης',
        'Ξεχώρου',
        'Ξηροκάμπου',
        'Ξηροκαμπίου',
        'Ξηροκαριταίνης',
        'Ξηρολίμνης',
        'Ξηρολόφου',
        'Ξηρονομής',
        'Ξηροπηγάδου',
        'Ξηροποτάμου',
        'Ξηροστερνίου',
        'Ξηροχωρίου',
        'Ξινονερίου',
        'Ξινού Νερού',
        'Ξινόβρυσης',
        'Ξιφιανής',
        'Ξορυχτίου',
        'Ξυλαγανής',
        'Ξυλικών',
        'Ξυλοκάστρου',
        'Ξυλοκέρας',
        'Ξυλοκερίζης',
        'Ξυλοκερατέας',
        'Ξυλοπαροίκου',
        'Ξυλοπόλεως',
        'Οάσεως',
        'Οίας',
        'Οίτης',
        'Οβριάς',
        'Οθωνών',
        'Οινουσσών',
        'Οινοφύτων',
        'Οινοχωρίου',
        'Οινούσσας',
        'Οινόης',
        'Οιτύλου',
        'Οιχαλίας',
        'Οκτωνιάς',
        'Ολβίου',
        'Ολύμπου',
        'Ολύμπων',
        'Ολύνθου',
        'Ομαλής',
        'Ομαλών',
        'Ομβριακής',
        'Ομηρικόν',
        'Ομολίου',
        'Ομορφοκκλησιάς',
        'Ομορφοχωρίου',
        'Οξυάς',
        'Οξυλίθου',
        'Οξυνείας',
        'Ορίου',
        'Οργάνης',
        'Ορεινής',
        'Ορεινού',
        'Ορεινού Ξηροβάλτου',
        'Ορθέ',
        'Ορθοβουνίου',
        'Ορθονιών',
        'Ορθουνίου',
        'Ορμενίου',
        'Ορμυλίας',
        'Ορνές',
        'Οροπεδίου',
        'Ορφανίου',
        'Ορφανών',
        'Ορχομενού',
        'Ουρανοπόλεως',
        'Οφρυνίου',
        'Οχθίων',
        'Οχυρού',
        'Πάγου',
        'Πάγων',
        'Πάδων',
        'Πάου',
        'Πάπαρη',
        'Πάργας',
        'Πάρου',
        'Πάστρας',
        'Πάτμου',
        'Πέλεκα',
        'Πέλλης',
        'Πέντε Εκκλησιών',
        'Πέπλου',
        'Πέρα Μελάνων',
        'Πέραν Τριοβασάλου',
        'Πέρδικας',
        'Πέρκου',
        'Πέρνης',
        'Πέτα',
        'Πέτρα',
        'Πέτρας',
        'Παγκαλοχωρίου',
        'Παγκρατίου',
        'Παγκρατών',
        'Παγονερίου',
        'Παγουριών',
        'Παγώνδου',
        'Παγώντα',
        'Παιανίας',
        'Πακίων',
        'Παλαίρου',
        'Παλαίστρας',
        'Παλαιάς Γιαννιτσούς',
        'Παλαιάς Καβάλας',
        'Παλαιάς Φωκαίας',
        'Παλαικάστρου',
        'Παλαιοβαρβασαίνης',
        'Παλαιοβράχας',
        'Παλαιοκάστρου',
        'Παλαιοκήπου',
        'Παλαιοκαρυάς',
        'Παλαιοκατούνας',
        'Παλαιοκατούνου',
        'Παλαιοκερασέας',
        'Παλαιοκκλησίου',
        'Παλαιοκώμης',
        'Παλαιομανίνας',
        'Παλαιομοναστήρου',
        'Παλαιοξαρίου',
        'Παλαιοπαναγίας',
        'Παλαιοπόλεως',
        'Παλαιοπύργου',
        'Παλαιοσελλίου',
        'Παλαιοχούνης',
        'Παλαιοχωρίου',
        'Παλαιοχωρίου Δωριέων',
        'Παλαιοχωρίου Μπότσαρη',
        'Παλαιοχωρίου Σιράκου',
        'Παλαιοχωρίου Τυμφρηστού',
        'Παλαιοχωρακίου',
        'Παλαιοχώρας',
        'Παλαιού Αγιονερίου',
        'Παλαιού Ελευθεροχωρίου',
        'Παλαιού Κεραμιδίου',
        'Παλαιού Λουτρού',
        'Παλαιού Μυλοτόπου',
        'Παλαιού Σκυλλιτσίου',
        'Παλαιού Φαλήρου',
        'Παλαιφύτου',
        'Παλαιόβρυσης',
        'Παλαιόστανης',
        'Παλαιών Ρουμάτων',
        'Παλαμά',
        'Παλαμαρίου',
        'Παλαμπά',
        'Παλατίων',
        'Παλατιτσίων',
        'Παλιαμπέλων',
        'Παλιουρίου',
        'Παλιουριάς',
        'Παλιούρα',
        'Παλιούρης',
        'Παλλήνης',
        'Παλλαντίου',
        'Παλούμπας',
        'Παμφίλων',
        'Παμφίου',
        'Πανάσου',
        'Παναγίας',
        'Παναγίτσας',
        'Παναγιούδας',
        'Παναγούλας',
        'Παναιτωλίου',
        'Παναρίτη',
        'Παναριτίου',
        'Πανδρόσου',
        'Πανεθήμου',
        'Πανιπερίου',
        'Πανουργιά',
        'Παντανάσσης',
        'Πανόρμου',
        'Παπάγου',
        'Παπίγκου',
        'Παπαδιανίκων',
        'Παπαφλέσσα',
        'Παππά',
        'Παππάδου',
        'Παππάδων',
        'Παππαγιάννη',
        'Παππαγιαννάδων',
        'Παππαδάτου',
        'Παππαδατών',
        'Παππαδιανών',
        'Παππαρουσίου',
        'Παππουλίων',
        'Παραβόλας',
        'Παραδείσου',
        'Παραδεισίου',
        'Παραδεισίων',
        'Παρακαλάμου',
        'Παρακοίλων',
        'Παραλία Μέσης',
        'Παραλίας',
        'Παραλίας Πλατάνου',
        'Παραλίου Άστρους',
        'Παραλιμνίου',
        'Παραλογγών',
        'Παραμέρου',
        'Παραμυθίας',
        'Παρανεστίου',
        'Παρανύμφων',
        'Παραποτάμου',
        'Παραπουγκίου',
        'Παρασκευής',
        'Παρδαλίτσης',
        'Παρθενίου',
        'Παρορίου',
        'Παρορείου',
        'Παρπαριάς',
        'Παρτίρων',
        'Πασίου',
        'Πασαλιτών',
        'Παστίδας',
        'Πασχαλίτσης',
        'Πασχαλιάς',
        'Πατερμά',
        'Πατιοπούλου',
        'Πατουλιάς',
        'Πατρέων',
        'Πατρικάτων',
        'Πατρικίου',
        'Πατρικών',
        'Πατσιανού',
        'Πατσιδερού',
        'Πατσού',
        'Παυλιάνας',
        'Παυλοπούλου',
        'Παχείας Άμμου',
        'Παχτουρίου',
        'Παχυκαλάμου',
        'Παϊδοχωρίου',
        'Παύλιανης',
        'Παύλιας',
        'Παύλου',
        'Πεδινής',
        'Πεδινού',
        'Πεδινών',
        'Πεζούλας',
        'Πεζών',
        'Πεθελινού',
        'Πειραιώς',
        'Πελάγους',
        'Πελαγίας',
        'Πελαργού',
        'Πελασγίας',
        'Πελεκάνου',
        'Πελεκανάδας',
        'Πελετών',
        'Πελλάνας',
        'Πελλήνης',
        'Πελοπίου',
        'Πελόπης',
        'Πεμονίων',
        'Πεντέλης',
        'Πενταβρύσου',
        'Πενταγιών',
        'Πεντακόρφου',
        'Πενταλόφου',
        'Πενταμοδίου',
        'Πενταπόλεως',
        'Πεντατίου',
        'Πεντεορίων',
        'Πεντολάκκου',
        'Πεπονιάς',
        'Περάμα',
        'Περάμου',
        'Περάνθης',
        'Περάτη',
        'Περίου',
        'Περίστης',
        'Περαίας',
        'Περατάτων',
        'Περατιάς',
        'Περαχωρίου',
        'Περβολακίων',
        'Περδίκκα',
        'Περδικίου',
        'Περδικακίου',
        'Περδικονερίου',
        'Περδικόβρυσης',
        'Περθωρίου',
        'Περιβλέπτου',
        'Περιβολίου',
        'Περιβολίου Δομοκού',
        'Περιβολίων',
        'Περιβολίων Κισσάμου',
        'Περιβολίων Κυδωνίας',
        'Περιβολακίου',
        'Περιβολακίων',
        'Περιγιαλίου',
        'Περιθείας',
        'Περιθιωτίσσης',
        'Περιθωρίου',
        'Περικλείας',
        'Περιστάσεως',
        'Περιστέρας',
        'Περιστεράς',
        'Περιστερίου',
        'Περιστερώνας',
        'Περιχώρας',
        'Περουλάδων',
        'Περσαίνης',
        'Περτουλίου',
        'Πεσάδας',
        'Πεστών',
        'Πεταλείας',
        'Πεταλιδίου',
        'Πετουσίου',
        'Πετράδων',
        'Πετρίλου',
        'Πετρίνας',
        'Πετρίνου',
        'Πετρίου',
        'Πετραίας',
        'Πετραλώνων',
        'Πετρανών',
        'Πετριτής',
        'Πετριτσίου',
        'Πετριών',
        'Πετροβίτσας',
        'Πετροβούνιον',
        'Πετροκεράσων',
        'Πετροκεφάλου',
        'Πετροκεφαλίου',
        'Πετροπηγής',
        'Πετροπόρου',
        'Πετροχωρίου',
        'Πετρούπολης',
        'Πετρούσσης',
        'Πετρωτού',
        'Πετρωτών',
        'Πετρών',
        'Πετρώνας',
        'Πετσάκων',
        'Πετσαλίου',
        'Πευκοδάσους',
        'Πευκοφύτου',
        'Πευκοχωρίου',
        'Πεύκης',
        'Πεύκου',
        'Πεύκων',
        'Πηγής',
        'Πηγαδίου',
        'Πηγαδίτσης',
        'Πηγαδίων',
        'Πηγαδακίων',
        'Πηγαδησάνων',
        'Πηγαδούλια',
        'Πηγαϊδακίων',
        'Πηγών',
        'Πηδάσου',
        'Πηλίου',
        'Πιάνας',
        'Πιαλείας',
        'Πικέρνη',
        'Πικερμίου',
        'Πιλαλίστρας',
        'Πινακατών',
        'Πινακοχωρίου',
        'Πιπερίτσης',
        'Πιπεριών',
        'Πιραμάς',
        'Πισίων',
        'Πισκοκεφάλου',
        'Πισοδερίου',
        'Πιστιανών',
        'Πιτίτσης',
        'Πιτροφού',
        'Πιτσίου',
        'Πιτσιδίων',
        'Πιτσιναιίκων',
        'Πιτσιωτών',
        'Πιτσών',
        'Πλάκας',
        'Πλάνου',
        'Πλάτης',
        'Πλάτσης',
        'Πλαγίων',
        'Πλαγιά',
        'Πλαγιάς',
        'Πλαγιαρίου',
        'Πλαγιών',
        'Πλαισίου',
        'Πλαισίων Μαλακασίου',
        'Πλακάδου',
        'Πλακίδας',
        'Πλακωτής',
        'Πλανητέρου',
        'Πλατάνας',
        'Πλατάνης',
        'Πλατάνου',
        'Πλαταιών',
        'Πλατανίου',
        'Πλατανίων',
        'Πλατανακίου',
        'Πλατανακίων',
        'Πλατανιά',
        'Πλατανιάς',
        'Πλατανιστού',
        'Πλατανιωτίσσης',
        'Πλατανοτόπου',
        'Πλατανούσσης',
        'Πλατανόβρυσης',
        'Πλαταριάς',
        'Πλατιάνας',
        'Πλατρειθιά',
        'Πλατυβόλας',
        'Πλατυκάμπου',
        'Πλατυστόμου',
        'Πλατυστόμων',
        'Πλεμενιανών',
        'Πληκατίου',
        'Πλουτοχωρίου',
        'Πλωμαρίου',
        'Πλώρας',
        'Πογωνίας',
        'Ποδογοράς',
        'Ποδοχωρίου',
        'Ποιμενικού',
        'Ποκίστης',
        'Πολίχνης',
        'Πολεμαρχίου',
        'Πολιανής',
        'Πολιτικών',
        'Πολιχνίτου',
        'Πολοβίτσης',
        'Πολυάνθου',
        'Πολυανέμου',
        'Πολυγύρου',
        'Πολυδένδρου',
        'Πολυδαμείου',
        'Πολυδενδρίου',
        'Πολυδρόσου',
        'Πολυδώρου',
        'Πολυθέας',
        'Πολυκάρπης',
        'Πολυκάστρου',
        'Πολυκαρπίου',
        'Πολυκαστάνου',
        'Πολυκεράσου',
        'Πολυλάκκου',
        'Πολυλόφου',
        'Πολυμύλου',
        'Πολυνέρου',
        'Πολυνερίου',
        'Πολυπέτρου',
        'Πολυπλατάνου',
        'Πολυποτάμου',
        'Πολυρράχου',
        'Πολυρρηνίας',
        'Πολυσίτου',
        'Πολυσταφύλου',
        'Πολυστύλου',
        'Πολυφύτου',
        'Πολυχρόνου',
        'Ποντικατών',
        'Ποντινής',
        'Ποντισμένου',
        'Ποντοηρακλείας',
        'Ποντοκερασέας',
        'Ποντοκώμης',
        'Ποντολιβάδου',
        'Ποροΐων',
        'Ποροβίτσης',
        'Πορτής',
        'Πορτίτσης',
        'Πορταριάς',
        'Πορτιανού',
        'Πορτοχελίου',
        'Πορτών',
        'Ποσειδωνίας',
        'Ποτάμων',
        'Ποταμίδας',
        'Ποταμιά',
        'Ποταμιάς',
        'Ποταμιών',
        'Ποταμού',
        'Ποταμούλας Μεσολογγίου',
        'Ποταμών',
        'Ποτειδαίας',
        'Ποτιδάνειας',
        'Ποτιστικών',
        'Πουγκακίων',
        'Πουλάτων',
        'Πουλίθρων',
        'Πουλιτσίου',
        'Πουλλίτσης',
        'Πουλλακίδας',
        'Πουρίου',
        'Πουρναρίου',
        'Πουρναριάς',
        'Πουρνιάς',
        'Πούρνου',
        'Πρίνας',
        'Πρίνου',
        'Πραγγίου',
        'Πραγματευτή',
        'Πραισού',
        'Πραιτωρίου',
        'Πραιτωρίων',
        'Πραμάντων',
        'Πρασέ',
        'Πρασίνου',
        'Πρασιάς',
        'Πρασιδακίου',
        'Πρασινάδας',
        'Πρασιών',
        'Πραστού',
        'Πρεβέζης',
        'Πρινέ',
        'Πρινιά',
        'Πριολίθου',
        'Προαστίου',
        'Προβατά',
        'Προδρομίου',
        'Προδρόμου',
        'Προκοπίου',
        'Προμάχων',
        'Προμυρίου',
        'Προσβόρρου',
        'Προσηλίου',
        'Προσηλίων',
        'Προσκυνά',
        'Προσκυνητών',
        'Προσοτσάνης',
        'Προσύμνης',
        'Προυσού',
        'Προφήτη Ηλία',
        'Προφήτης Ηλίας',
        'Προφήτου',
        'Προφήτου Ηλία',
        'Προφήτου Ηλιού',
        'Προφίλιας',
        'Πρωτοκκλησίου',
        'Πρωτοχωρίου',
        'Πρωτόπαππα',
        'Πρώτης',
        'Πτέρης',
        'Πτελέας',
        'Πτελέας Πλατανιάς',
        'Πτελεού',
        'Πτελοπούλας',
        'Πτεριάς',
        'Πυθίου',
        'Πυθαγορείου',
        'Πυλίου',
        'Πυλαίας',
        'Πυλωρίου',
        'Πυλωρών',
        'Πυλών',
        'Πυξαρίου',
        'Πυράς',
        'Πυργέλλας',
        'Πυργίου',
        'Πυργαδικίων',
        'Πυργακίου',
        'Πυργετού',
        'Πυργιωτίκων',
        'Πυργούς',
        'Πυρρή',
        'Πυρρίχου',
        'Πυρσόγιαννης',
        'Πωγωνιανής',
        'Πόδου',
        'Πόμπιας',
        'Πόρου',
        'Πόρπη',
        'Πόρων',
        'Πύδνας',
        'Πύλας',
        'Πύλης',
        'Πύλου',
        'Πύργου',
        'Πύργου Διρού',
        'Πύργου Ιθώμης',
        'Πύργου Καλαμών',
        'Πύργου Καλλίστης',
        'Πύργου Κιερίου',
        'Πύργου Τριφυλίας',
        'Πύργων',
        'Πύργων Θερμής',
        'Πύρρας',
        'Ράδου',
        'Ράμιας',
        'Ράξας',
        'Ράφτη',
        'Ράχη',
        'Ράχης',
        'Ρίγανης',
        'Ρίζης',
        'Ρίζου',
        'Ρίου',
        'Ραΐκου',
        'Ραβδούχας',
        'Ραβενής',
        'Ραβενίων',
        'Ραγάδα',
        'Ραγίου',
        'Ραδοβιζίου',
        'Ραιδεστού',
        'Ραμνής',
        'Ραπτοπούλου',
        'Ραφήνας',
        'Ραφταναίων',
        'Ραχούλας',
        'Ραχτάδων',
        'Ραχωνίου',
        'Ραχών',
        'Ραχώνας',
        'Ραψάνης',
        'Ραψομμάτη',
        'Ρεγκινίου',
        'Ρεθίου',
        'Ρεθύμνης',
        'Ρειχέας',
        'Ρεντίνας',
        'Ρεπανιδίου',
        'Ρεπετίστης',
        'Ρετσίνων',
        'Ρετσιανών',
        'Ρευματιάς',
        'Ρητίνης',
        'Ριαχόβου',
        'Ριγανίου',
        'Ριγκλίων',
        'Ριζίων',
        'Ριζαρίου',
        'Ριζοβουνίου',
        'Ριζομύλου',
        'Ριζοσπηλιάς',
        'Ριζού',
        'Ριζωμάτων',
        'Ριζών',
        'Ριφίου',
        'Ριόλου',
        'Ροβίων',
        'Ροβιάτας',
        'Ροβιών',
        'Ροβολιαρίου',
        'Ρογιτίκων',
        'Ρογών',
        'Ροδίτου',
        'Ροδίτσης',
        'Ροδακίνου',
        'Ροδαυγής',
        'Ροδιάς',
        'Ροδιανής',
        'Ροδινών',
        'Ροδοβανίου',
        'Ροδοδάφνης',
        'Ροδολίβους',
        'Ροδοπόλεως',
        'Ροδοτοπίου',
        'Ροδοχωρίου',
        'Ροδωνιάς',
        'Ροδωπού',
        'Ροεινού',
        'Ρομιρίου',
        'Ροποτού',
        'Ροσκάς',
        'Ρουμελής',
        'Ρουπακίου',
        'Ρουπακιάς',
        'Ρουσσοπουλίου',
        'Ρουσσοσπιτίου',
        'Ρουστίκων',
        'Ρουτσίου',
        'Ρουφά',
        'Ρουψιάς',
        'Ρούσσας Εκκλησίας',
        'Ρούσσου',
        'Ρυακίου',
        'Ρυακίων',
        'Ρυζιών',
        'Ρυμνίου',
        'Ρυσίου',
        'Ρωμαιίκου',
        'Ρωμανού',
        'Ρωμιάς',
        'Ρόδου',
        'Ρόδων',
        'Ρόκκας',
        'Σάγκα',
        'Σάλπης',
        'Σάμης',
        'Σάντας',
        'Σάρτης',
        'Σάρχου',
        'Σέκουλα',
        'Σέμπρωνα',
        'Σέρβου',
        'Σέσκλου',
        'Σέτας',
        'Σίβα',
        'Σίβας',
        'Σίδερης',
        'Σίλης',
        'Σίμου',
        'Σίνδου',
        'Σίτσαινα',
        'Σαβαλίων',
        'Σαγαιίκων',
        'Σαγιάδας',
        'Σαγκρίου',
        'Σακτουρίων',
        'Σαλάκου',
        'Σαλμενίκου',
        'Σαλμώνης',
        'Σαλονίκης',
        'Σαμίων',
        'Σαμαρίνης',
        'Σαμικού',
        'Σαμοθράκης',
        'Σαμονίδας',
        'Σαμπά',
        'Σαντομερίου',
        'Σανών',
        'Σαπουνακαίϊκων',
        'Σαπών',
        'Σαραβαλίου',
        'Σαρακήνας',
        'Σαρακηνάδου',
        'Σαρακηνών',
        'Σαρακινίου',
        'Σαρακινίου Ηραίας',
        'Σαρανταπήχου',
        'Σαρανταπόρου',
        'Σαργιάδας',
        'Σαρδινίων',
        'Σαρδών',
        'Σαρκίνης',
        'Σασάλου',
        'Σατρών',
        'Σαϊδόνας',
        'Σαϊτουρών',
        'Σβορωνάτων',
        'Σβορώνου',
        'Σγουράδων',
        'Σγουροκεφαλίου',
        'Σεβαστής',
        'Σεβαστιανών',
        'Σεβαστού',
        'Σειρών',
        'Σελέρου',
        'Σελίνου',
        'Σελεγουδίου',
        'Σελευκείας',
        'Σεληνίων',
        'Σελιάνας',
        'Σελιανιτίκων',
        'Σελλά',
        'Σελλάδων',
        'Σελλίου',
        'Σελλίων',
        'Σελλασίας',
        'Σελλών',
        'Σενίκου',
        'Σερίφου',
        'Σερβίων',
        'Σερβιανών',
        'Σερβωτών',
        'Σεργούλας',
        'Σεριζιανών',
        'Σερνικακίου',
        'Σερρών',
        'Σημάντρου',
        'Σημάντρων',
        'Σηρικαρίου',
        'Σησαμίας',
        'Σητείας',
        'Σιάμου',
        'Σιάνων',
        'Σιατίστης',
        'Σιβίστης',
        'Σιγουνίου',
        'Σιγρίου',
        'Σιδήρων',
        'Σιδαρίου',
        'Σιδερά',
        'Σιδηράδες',
        'Σιδηροκάστρου',
        'Σιδηρονέρου',
        'Σιδηροχωρίου',
        'Σικίνου',
        'Σιλάτων',
        'Σιλίμνης',
        'Σιμίζα',
        'Σιμιάδων',
        'Σιμοπούλου',
        'Σιναράδων',
        'Σινεβρού',
        'Σινιών',
        'Σινώπης',
        'Σιριλίου',
        'Σισανίου',
        'Σιστρουνίου',
        'Σισών',
        'Σιταίνης',
        'Σιταγρών',
        'Σιταρά',
        'Σιταραλώνων',
        'Σιταριάς',
        'Σιτομένων',
        'Σιτοχωρίου',
        'Σιτοχώρου',
        'Σκάλας',
        'Σκάλας Ωρωπού',
        'Σκάλωμα',
        'Σκάφης',
        'Σκήτης',
        'Σκαδού',
        'Σκαλανίου',
        'Σκαλοχωρίου',
        'Σκαλωτής',
        'Σκαμνακίου',
        'Σκαμνελλίου',
        'Σκανδάλου',
        'Σκανδαλίου',
        'Σκαρφείας',
        'Σκαφιδακίου',
        'Σκαφιδιάς',
        'Σκαφιδωτής',
        'Σκεπαρίου',
        'Σκεπαστής',
        'Σκεπαστού',
        'Σκιάδα',
        'Σκιάθου',
        'Σκιαδά',
        'Σκιλλουντίας',
        'Σκινέ',
        'Σκινέως',
        'Σκινιά',
        'Σκιώνης',
        'Σκλήθρου',
        'Σκλίβανης',
        'Σκλίβας',
        'Σκλαβοπούλας',
        'Σκληρού',
        'Σκοπέλου',
        'Σκοπής',
        'Σκοπιάς',
        'Σκοπού',
        'Σκορτσινού',
        'Σκοτάνης',
        'Σκοτίνης',
        'Σκοτεινής',
        'Σκοτούσσης',
        'Σκουληκάδου',
        'Σκουληκαριάς',
        'Σκουλουφίων',
        'Σκουραιίκων',
        'Σκουρβούλων',
        'Σκουροχωρίου',
        'Σκουρτούς',
        'Σκουτάρεως',
        'Σκουτάρου',
        'Σκουταρίου',
        'Σκουτεράς',
        'Σκουτεσιάδας',
        'Σκούπας',
        'Σκούρα',
        'Σκούρας',
        'Σκούρτων',
        'Σκρα',
        'Σκριπερού',
        'Σκύδρας',
        'Σκύρου',
        'Σμέρνας',
        'Σμέρτου',
        'Σμίλας',
        'Σμίξης',
        'Σμαρίου',
        'Σμυρτιάς',
        'Σμύρνης',
        'Σοκαρά',
        'Σολακίου',
        'Σολομού',
        'Σοπίου',
        'Σορωνής',
        'Σουδεναιίκων',
        'Σουλίου',
        'Σουλαρίου',
        'Σουληναρίου',
        'Σουλλάρων',
        'Σουλοπούλου',
        'Σουνίου',
        'Σουρωτής',
        'Σουστιάνων',
        'Σουφλίου',
        'Σοφάδων',
        'Σοφιάδας',
        'Σοφιανών',
        'Σοφικού',
        'Σοφικό',
        'Σοχού',
        'Σούγιας',
        'Σούδας',
        'Σούλου',
        'Σούρπης',
        'Σπάθαρη',
        'Σπάρτου',
        'Σπάτων-Λούτσας',
        'Σπήλιου',
        'Σπαθάδων',
        'Σπαθαρίου',
        'Σπαθαραίων',
        'Σπανοχωρίου',
        'Σπαρτιά',
        'Σπαρτιάς',
        'Σπαρτιατών',
        'Σπαρτιών',
        'Σπαρτοχωρίου',
        'Σπαρτύλα',
        'Σπερχογείας',
        'Σπετσών',
        'Σπηλίου',
        'Σπηλαίου',
        'Σπηλαίων',
        'Σπηλιάς',
        'Σπιταλίου',
        'Σπολαίτης',
        'Σπόθων',
        'Σπόων',
        'Στάβλων',
        'Στάθη',
        'Στάνου',
        'Στέρνας',
        'Στίβου',
        'Στίλιας',
        'Στίρφακας',
        'Σταβιών',
        'Σταγίρων',
        'Σταγιατών',
        'Σταδίου',
        'Σταθά',
        'Σταθμού Αγγίστης',
        'Σταθμού Μουριών',
        'Σταλού',
        'Σταμάτας',
        'Σταματινού',
        'Σταμνάς',
        'Στανού',
        'Σταροχωρίου',
        'Στασίμου',
        'Στασιού',
        'Σταυρακίου',
        'Σταυρακίων',
        'Σταυρινήδων',
        'Σταυροδρομίου',
        'Σταυροπηγίου',
        'Σταυροσκιαδίου',
        'Σταυρουπόλεως',
        'Σταυροχωρίου',
        'Σταυρού',
        'Σταυρωμένου',
        'Σταφιδοκάμπου',
        'Στειρίου',
        'Στεμνίτσης',
        'Στενής',
        'Στενημάχου',
        'Στενιών',
        'Στενού',
        'Στενυκλάρου',
        'Στερνών',
        'Στεφάνης',
        'Στεφανίου',
        'Στεφανιάς',
        'Στεφανινών',
        'Στεφανοβικείου',
        'Στεφανοβούνου',
        'Στιμάγκας',
        'Στομίου',
        'Στουππαίων',
        'Στουρναραιίκων',
        'Στράτου',
        'Στρίγκου',
        'Στρανώμης',
        'Στρατινίστης',
        'Στρατονίκης',
        'Στρατωνίου',
        'Στρεφίου',
        'Στροβλών',
        'Στρογγυλής',
        'Στρογγυλοβουνίου',
        'Στροπώνων',
        'Στρουσίου',
        'Στροφή',
        'Στροφυλιάς',
        'Στρυμονικού',
        'Στρυμονοχωρίου',
        'Στρόμης',
        'Στρύμης',
        'Στυλάριον',
        'Στυλίων',
        'Στυμφαλίας',
        'Στόλου',
        'Στόλων',
        'Στύλιας',
        'Στύλου',
        'Στύρων',
        'Στύψης',
        'Συβότων',
        'Συγκρέλλου',
        'Συκά Υπάτης',
        'Συκέας',
        'Συκής',
        'Συκαμίνου',
        'Συκαμινέας',
        'Συκεών',
        'Συκιάδας',
        'Συκολόγου',
        'Συκορράχης',
        'Συκουρίου',
        'Συλιβαινιώτικων',
        'Συμβολής',
        'Συνδένδρου',
        'Συνετίου',
        'Συνοικίας Τρικάλων',
        'Συρράκου',
        'Συρρίζου',
        'Σφάκας',
        'Σφακερών',
        'Σφακοπηγαδίου',
        'Σφελινού',
        'Σφενδαμίου',
        'Σφηκιάς',
        'Σφηνωτού',
        'Σχίνων',
        'Σχηματαρίου',
        'Σχινοκαψάλων',
        'Σχινοχωρίου',
        'Σχοινούσσης',
        'Σχολαρίου',
        'Σωκρακίου',
        'Σωληναρίου',
        'Σωσάνδρας',
        'Σωστίου',
        'Σωτήρας',
        'Σωταίνης',
        'Σωτηρίου',
        'Σωτηρίτσης',
        'Σωτηριανίκων',
        'Σύβρου',
        'Σύμης',
        'Σύρνας',
        'Σύρου',
        'Σώστης',
        'Τέμενης',
        'Τήνου',
        'Ταγαράδων',
        'Τακτικουπόλεως',
        'Ταλάντων',
        'Τανάγρας',
        'Ταξιάρχου',
        'Ταξιαρχών',
        'Ταρσινών',
        'Ταρσού',
        'Ταυρωνίτου',
        'Ταύρου',
        'Τειχίου',
        'Τεμενίων',
        'Τεμπών',
        'Τενέδου',
        'Τεριαχίου',
        'Τερπνής',
        'Τερπύλλου',
        'Τερψιθέας',
        'Τερόβου',
        'Τετρακώμου',
        'Τετραλόφου',
        'Τεφελίου',
        'Τζίβα',
        'Τζερμιάδου',
        'Τζιτζιφέ',
        'Τιθορέας',
        'Τιθρωνίου',
        'Τιτάνης',
        'Τοιχίου',
        'Τολού',
        'Τοξοτών',
        'Τοπολίων',
        'Τοπολιάνων',
        'Τουλιάτων',
        'Τουρκολέκα',
        'Τουρλάδας',
        'Τουρλωτής',
        'Τούμπας',
        'Τρίκαστρον',
        'Τρίτους',
        'Τραγάνας',
        'Τραγίλου',
        'Τραγακίου',
        'Τραγανού',
        'Τρανοβάλτου',
        'Τραπέζης',
        'Τραπεζίτσης',
        'Τραπεζαντής',
        'Τραχήλας',
        'Τραχειάς',
        'Τραχηλίου',
        'Τρεχλού',
        'Τριανδρίας',
        'Τριαντάρου',
        'Τριανταφυλλέας',
        'Τριανταφυλλιάς',
        'Τριβούνου',
        'Τριγλίας',
        'Τριγωνικού',
        'Τριδένδρου',
        'Τριζονίων',
        'Τρικάλων',
        'Τρικερίου',
        'Τρικκαίων',
        'Τρικλίνου',
        'Τρικοκκιάς',
        'Τρικορύφου',
        'Τρικόρφου',
        'Τρικώμου',
        'Τριλόφου',
        'Τριοβασάλου',
        'Τριποτάμου',
        'Τριποταμιάς',
        'Τριπόλεως',
        'Τριπύλας',
        'Τριστένου',
        'Τριταίας',
        'Τριφυλλίου',
        'Τριχωνίου',
        'Τριόδου',
        'Τροβάτου',
        'Τροπαίων',
        'Τροπαιούχου',
        'Τρυπητής',
        'Τρυπών',
        'Τρωιανάτων',
        'Τρύγονα',
        'Τρύπης',
        'Τρύφου',
        'Τσάκονης',
        'Τσάκων',
        'Τσαγγαρίου',
        'Τσαγκαράδας',
        'Τσαγκαροπούλου',
        'Τσαμαντά',
        'Τσαπουρνιάς',
        'Τσαριτσάνης',
        'Τσελεπάκου',
        'Τσεπελόβου',
        'Τσερίων',
        'Τσικαλαριών',
        'Τσικκαλιών',
        'Τσιμανδρίων',
        'Τσιπιανών',
        'Τσιταλίων',
        'Τσοτυλίου',
        'Τσουκαλάδων',
        'Τσουκαλαιίκων',
        'Τσούκκας',
        'Τυλίσου',
        'Τυμπακίου',
        'Τυμφρηστού',
        'Τυρνάβου',
        'Τυρολόης',
        'Τυρού',
        'Τυχερού',
        'Τόρνου',
        'Υαμείας',
        'Υδρούσσης',
        'Υμηττού',
        'Υπάτης',
        'Υπάτου',
        'Υπερείας',
        'Υστερνίων',
        'Υψηλάντου',
        'Υψηλής Ράχης',
        'Υψηλομετώπου',
        'Υψηλού Χωρίου',
        'Φάρου',
        'Φάρσων',
        'Φήκης',
        'Φίλια',
        'Φίλιας',
        'Φαβατάτων',
        'Φαλάνθης',
        'Φαλάννης',
        'Φαλαισίας',
        'Φαλατάδου',
        'Φαλελιανών',
        'Φαμίλας',
        'Φαναρίου',
        'Φανερωμένης',
        'Φανού',
        'Φανών',
        'Φαράκλας',
        'Φαραγγίου',
        'Φαρακλάδας',
        'Φαρακλάτων',
        'Φαρακλού',
        'Φαρσάλων',
        'Φαρών',
        'Φασκομηλιάς',
        'Φελλίου',
        'Φελλού',
        'Φενεού',
        'Φερών',
        'Φιγαλείας',
        'Φιδακίων',
        'Φιλίας',
        'Φιλίππων',
        'Φιλίων',
        'Φιλαδελφίου',
        'Φιλαδελφείας',
        'Φιλιατρών',
        'Φιλιατών',
        'Φιλιππαίων',
        'Φιλλύρα',
        'Φιλοθέης',
        'Φιλοτίου',
        'Φιλυρίας',
        'Φιλωτείας',
        'Φιλύρας',
        'Φιλύρου',
        'Φιλώτα',
        'Φιολίτη',
        'Φισίνης',
        'Φισκάρδου',
        'Φιχτίου',
        'Φλαμουριάς',
        'Φλαμπουραρίου',
        'Φλαμπουρεσίου',
        'Φλαμπούρου',
        'Φλαμπούρων',
        'Φλατσίων',
        'Φλογητών',
        'Φλωρίνης',
        'Φλόκα',
        'Φλόκας',
        'Φοινίκης',
        'Φοινικίου',
        'Φολεγάνδρου',
        'Φολόης',
        'Φοναϊτίκων',
        'Φορτοσίου',
        'Φουντωτού',
        'Φουρνάς',
        'Φουρνέ',
        'Φουρνής',
        'Φουρφουρά',
        'Φούρκας',
        'Φούρνων',
        'Φούστανης',
        'Φούφα',
        'Φράγκας',
        'Φράγκου',
        'Φρίξης',
        'Φραγκάδων',
        'Φραγκουλαιίκων',
        'Φραντάτου',
        'Φραντζή',
        'Φραντζεσκιανών Μετοχίων',
        'Φρατσίων',
        'Φρε',
        'Φρεγκαίνης',
        'Φριλιγκιανίκων',
        'Φροσύνης',
        'Φρουσιούνας',
        'Φτέρης',
        'Φτελιάς',
        'Φτερνού',
        'Φυλάκης',
        'Φυλής',
        'Φυλακής',
        'Φυλακίου',
        'Φυλακτής',
        'Φυλακτού',
        'Φυτείας',
        'Φυτειών',
        'Φυτών',
        'Φωκαίας',
        'Φωλεάς',
        'Φωσταίνης',
        'Φωτάδας',
        'Φωτεινού',
        'Φωτεινών',
        'Φωτολίβους',
        'Φόδελε',
        'Φύλλου',
        'Φύλλων',
        'Φύσκας',
        'Χάλκης',
        'Χέρσου',
        'Χίνκας',
        'Χίου',
        'Χαβαρίου',
        'Χαβδάτων',
        'Χαβριάτων',
        'Χαιρεθιανών',
        'Χαιρωνείας',
        'Χαλάνδρων',
        'Χαλάρων',
        'Χαλάστρας',
        'Χαλαζονίου',
        'Χαλανδρίου',
        'Χαλανδρίτσης',
        'Χαλικίου',
        'Χαλικίου Αμβρακίας',
        'Χαλιωτάτων',
        'Χαλκείου',
        'Χαλκερού',
        'Χαλκιά',
        'Χαλκιάδων',
        'Χαλκιδέων',
        'Χαλκιοπούλων',
        'Χαμαλευρίου',
        'Χαμεζίου',
        'Χανίων',
        'Χανδρά',
        'Χανδρινού',
        'Χανιώτη',
        'Χαράδρου',
        'Χαράς',
        'Χαράσου',
        'Χαραδιατίκων',
        'Χαρακίου',
        'Χαρακοπίου',
        'Χαραυγής',
        'Χαριάς',
        'Χαριέσσης',
        'Χαριτωμένης',
        'Χαρκίων',
        'Χαροκόπιον',
        'Χαροπού',
        'Χατζή',
        'Χαϊδαρίου',
        'Χαϊκαλίου',
        'Χειμάρρου',
        'Χειμαδιού',
        'Χειμερινού',
        'Χειμωνίου',
        'Χελιδονίου',
        'Χελυδορέου',
        'Χερσονήσου',
        'Χιδήρων',
        'Χιλιοδένδρου',
        'Χιλιομοδίου',
        'Χιονάδου',
        'Χιονάδων',
        'Χιονάτων',
        'Χιράδων',
        'Χιόνας',
        'Χλοματιανών',
        'Χλομού',
        'Χολαργού',
        'Χορηγού',
        'Χορτάτων',
        'Χορτερού',
        'Χορτιάτη',
        'Χουδετσίου',
        'Χουλιαράδων',
        'Χουμερίου',
        'Χουμεριάκου',
        'Χουμνικού',
        'Χουστουλιανών',
        'Χούνης',
        'Χράνων',
        'Χρισσού',
        'Χριστιανουπόλεως',
        'Χριστού',
        'Χρομοναστηρίου',
        'Χρούσων',
        'Χρυσάφων',
        'Χρυσής',
        'Χρυσανθίου',
        'Χρυσαυγής',
        'Χρυσοβίτσας',
        'Χρυσοβίτσης',
        'Χρυσοβεργίου',
        'Χρυσοβιτσίου',
        'Χρυσοκάστρου',
        'Χρυσοκελλαριάς',
        'Χρυσοκεφάλου',
        'Χρυσομηλέας',
        'Χρυσοπέτρας',
        'Χρυσοπηγής',
        'Χρυσορράχης',
        'Χρυσοστόμου',
        'Χρυσουπόλεως',
        'Χρυσοχωράφων',
        'Χρυσοχωρίου',
        'Χρυσού',
        'Χρωμίου',
        'Χρύσως',
        'Χωματάδας',
        'Χωρέμη',
        'Χωρίου',
        'Χωρίου Αποκορρώνου',
        'Χωρίου Κυδωνίας',
        'Χωρδακίου',
        'Χωρεπισκόπων',
        'Χωριστής',
        'Χωρυγίου',
        'Χωσιαρίου',
        'Χωστιά',
        'Χωτούσσης',
        'Χόβολης',
        'Χόικας',
        'Χόμορης',
        'Χόνδρου',
        'Χόχλιας',
        'Χώνου',
        'Χώρας',
        'Χώρας Σφακίων',
        'Ψάκας',
        'Ψήνας',
        'Ψίνθου',
        'Ψαθογιάννου',
        'Ψαθοπύργου',
        'Ψαθοτοπίου',
        'Ψαράδων',
        'Ψαρίου',
        'Ψαρών',
        'Ψαχνών',
        'Ψηλής Βρύσης',
        'Ψηλοβράχου',
        'Ψιανών',
        'Ψυχικού',
        'Ψυχρού',
        'Ωλένης',
        'Ωραίου',
        'Ωραιοκάστρου',
        'Ωρεών',
        'Ωριάς',
        'Ωρολογίου',
        'Ωρωπού',
        'Όθους',
        'Όρμης',
        'Όρμου Κορθίου',
        'Όρους',
        'Όσσης',
        'Όχθιας',
        'Ύδρας',
    )

########NEW FILE########
__FILENAME__ = internet
# coding=utf-8
from __future__ import unicode_literals
from ..internet import Provider as InternetProvider

import re


class Provider(InternetProvider):

    free_email_domains = (
        'hol.gr', 'gmail.com', 'hotmail.gr', 'yahoo.gr', 'googlemail.gr',
        'otenet.gr', 'forthnet.gr',
    )
    tlds = ('com', 'com', 'com', 'net', 'org', 'gr', 'gr', 'gr')

    def user_name(self):
        pattern = self.random_element(self.user_name_formats)
        return latinize(self.bothify(self.generator.parse(pattern)).lower())

    def domain_word(self):
        company = self.generator.format('company')
        company_elements = company.split(' ')
        company = latinize(company_elements.pop(0))
        return re.sub(r'\W', '', company).lower()


def remove_accents(value):
    """
    Remove accents from characters in the given string.
    """
    search  = 'ΆΈΉΊΌΎΏάέήίόύώΪϊΐϋΰ'
    replace = 'ΑΕΗΙΟΥΩαεηιουωΙιιυυ'
    
    def replace_accented_character(match):
        matched = match.group(0)
        if matched in search:
            return replace[search.find(matched)]
        return matched
    
    return re.sub(r'[{0}]+'.format(search), replace_accented_character, value)


def latinize(value):
    """
    Converts (transliterates) greek letters to latin equivalents.
    """
    def replace_double_character(match):
        search  = ('Θ Χ Ψ '
                   'θ χ ψ '
                   'ΟΥ ΑΥ ΕΥ '
                   'Ου Αυ Ευ '
                   'ου αυ ευ').split()
        replace = ('TH CH PS '
                   'th ch ps '
                   'OU AU EU '
                   'Ou Au Eu '
                   'ou au eu').split()
        matched = match.group(0)
        if matched in search:
            return replace[search.index(matched)]
        return matched
    
    search  = 'ΑΒΓΔΕΖΗΙΚΛΜΝΞΟΠΡΣΣΤΥΦΩαβγδεζηικλμνξοπρσςτυφω'
    replace = 'AVGDEZIIKLMNXOPRSSTUFOavgdeziiklmnxoprsstyfo'
    
    def replace_greek_character(match):
        matched = list(match.group(0))
        value = map(lambda l: replace[search.find(l)], matched)
        return ''.join(value)
    
    return re.sub(r'[{0}]+'.format(search),
                  replace_greek_character, re.sub(
                        r'([ΘΧΨθχψ]+|ΟΥ|ΑΥ|ΕΥ|Ου|Αυ|Ευ|ου|αυ|ευ)',
                        replace_double_character,
                            remove_accents(value)))

########NEW FILE########
__FILENAME__ = lorem
# coding=utf-8
from __future__ import unicode_literals
from ..lorem import Provider as LoremProvider


class Provider(LoremProvider):
    common_words = (
        'άρα', 'ένα', 'ένας', 'έξι', 'έτσι', 'έχω', 'ήδη', 'ίδιο', 'αν', 'ανά',
        'από', 'ας', 'για', 'δε', 'δεν', 'δύο', 'εγώ', 'εδώ', 'εκτός', 'επί', 'θα',
        'κάτι', 'και', 'κι', 'μέχρι', 'μα', 'μας', 'με', 'μη', 'μην', 'μια', 'μιας',
        'μου', 'να', 'ναι', 'ο', 'οι', 'πάντα', 'πάντως', 'πιο', 'πλέον', 'ποια',
        'πολύ', 'που', 'πως', 'σαν', 'σας', 'σε', 'σου', 'στα', 'στη', 'στις',
        'στο', 'τα', 'τη', 'την', 'της', 'τι', 'τις', 'το', 'τον', 'του', 'τους',
        'των', 'ως', 'όσο', 'όταν', 'ότι', 'όχι'
    )

    word_list = common_words * 2 + (
        'άλγεβρα', 'άπειρα', 'άρα', 'άρθρων', 'άτομο', 'έγραψες', 'έλεγχος',
        'έξι', 'έρθει', 'έστειλε', 'έστελνε', 'έτοιμος', 'έτσι',
        'έχω', 'ήδη', 'ίδιο', 'αγοράζοντας', 'αθόρυβες', 'ακούσει', 'αλγόριθμου',
        'αναγκάζονται', 'ανακλύψεις', 'αναφέρονται', 'αναφορά',
        'ανεπιθύμητη', 'ανταγωνιστής', 'αντιλήφθηκαν', 'ανώδυνη', 'απίστευτα',
        'απαράδεκτη', 'απαραίτητο', 'απαρατήρητο', 'απλό', 'αποδείξεις',
        'αποθηκευτικού', 'αποκλειστικούς', 'απομόνωση', 'αποστηθίσει',
        'αποφάσισε', 'από', 'απόλαυσε', 'αρέσει', 'αρπάζεις', 'αρχεία',
        'ατόμου', 'αυτήν', 'αυτός', 'αφήσεις', 'βάζοντας', 'βαθμό',
        'βασανίζουν', 'βγήκε', 'βιαστικά', 'βιβλίο', 'βουτήξουν', 'βρίσκονται',
        'γέλασαν', 'γεγονός', 'γειτονιάς', 'γεύματος', 'για', 'γιαυτό',
        'γνωρίζουμε', 'γνωστή', 'γράψει', 'γραμμές', 'γραμμή', 'γραμμής',
        'γραφικά', 'δίνοντας', 'δε', 'δείξει', 'δεδομένων', 'δεν',
        'δημιουργήσεις', 'δημιουργείς', 'δημιουργια', 'διάβασε', 'διάσημα',
        'διαδίκτυο', 'διακοπή', 'διακοπής', 'διακόψουμε', 'διαπιστώνεις',
        'διασφαλίζεται', 'διαφήμιση', 'διαχειριστής', 'διευθυντές', 'διοικητικό',
        'διολισθήσεις', 'διορθώσει', 'διορθώσεις', 'δοκιμάσεις', 'δουλεύει',
        'δούλευε', 'δυστυχής', 'δυστυχώς', 'δωροδοκηθούν', 'δύο', 'είχαμε',
        'εγώ', 'εδώ', 'ειδικά', 'εικόνες', 'εκδόσεις', 'εκείνου', 'εκθέσεις',
        'εκτελέσει', 'εκτελέσεις', 'εκτελείται', 'εκτός', 'ελέγχου', 'εντολές',
        'εξακολουθεί', 'εξαρτάται', 'εξοργιστικά', 'επί', 'επενδυτής',
        'επεξεργασία', 'επιδιορθώσεις', 'επιδιόρθωση', 'επιστρέφουν',
        'επιχείριση', 'εργάστηκε', 'εργαζόμενοι', 'εργαζόμενων', 'εργαλείων',
        'εργασίας', 'εργοστασίου', 'ερωτήσεις', 'ερώτηση', 'εσωτερικών',
        'εταιρείες', 'ευκολότερο', 'εφαμοργής', 'εφαρμογή', 'εφαρμογής',
        'ζητήσεις', 'ημέρα', 'θέλεις', 'θέμα', 'θέματα', 'θυμάμαι',
        'ιδιαίτερα', 'κάνε', 'κάνεις', 'κάτι', 'και', 'καλύτερο', 'κανένας',
        'κανείς', 'κανόνα', 'καταλάθος', 'κειμένων', 'κι', 'κλπ', 'κοιτάζοντας',
        'κρατάει', 'κρατήσουν', 'κόλπα', 'κόψεις', 'κύκλο', 'κώδικάς', 'κώδικα',
        'λέει', 'λίγο', 'λαμβάνουν', 'λες', 'λετπά', 'λιγότερο', 'λοιπόν', 'μάθε',
        'μάλλον', 'μάτσο', 'μέγιστη', 'μέρος', 'μέσης', 'μέχρι', 'μαγικά',
        'μερικούς', 'μεταγλωτίσει', 'μεταγλωτιστής',
        'μεταφραστής', 'μετράει', 'μετρήσεις', 'μηχανής',
        'μπορούσες', 'μπουν', 'νέα', 'νέο', 'νέου', 'νέων', 'νιρβάνα', 'νόμιζες',
        'ξέχασε', 'ορίστε', 'πάντα', 'πάντως', 'πάρα', 'πάρεις', 'πήρε', 'παίξουν',
        'παίρνει', 'παίρνουν', 'πακέτων', 'παράγοντες', 'παράδειγμα',
        'παραγωγικής', 'παραδοτέου', 'παραδώσεις', 'παραπάνω', 'πεδία',
        'περίπου', 'περιβάλλον', 'περιβάλλοντος', 'περιεχόμενα', 'περιμένουν',
        'περισσότερες', 'περισσότερη', 'πες', 'πετάνε', 'πετάξαμε', 'πετούν',
        'πηγαίου', 'πιο', 'πλέον', 'ποια', 'πολύ', 'ποσοστό', 'που',
        'προβληματική', 'προγραμματιστές', 'προγραμματιστής', 'προκαλείς',
        'προκύπτουν', 'προσεκτικά', 'προσθέσει', 'προσλάμβανες', 'προσοχή',
        'προσπαθήσεις', 'προσπαθούν', 'προϊόντα', 'πρόσληψη', 'πρώτης', 'πρώτο',
        'πρώτοι', 'πόρτες', 'ροή', 'ρουτίνα', 'ρωτάει', 'ρωτήσει',
        'σίγουρος', 'σημαντικό', 'σημαντικός', 'σημεία',
        'σκεφτείς', 'σπίτι', 'στέλνοντάς', 'στήλες', 'σταματάς',
        'στραβά', 'συγγραφής', 'συγγραφείς',
        'συγκεντρωμένοι', 'συγχρόνως', 'συγχωνευτεί', 'συνάδελφος', 'συνέχεια',
        'συνεντεύξεις', 'συνεχώς', 'συνηθίζουν', 'σχεδιαστής', 'σωστά',
        'τέλειοι', 'τα', 'ταξινομεί', 'τεκμηριώνει', 'τελειώσει', 'τεσσαρών',
        'τοπικές', 'τρέξει', 'τρόπο', 'τρόποι', 'τύπου', 'τύπους', 'υπηρεσία',
        'υποψήφιο', 'υψηλότερη', 'υόρκη', 'φίλος', 'φαινόμενο', 'φακέλους',
        'φράση', 'χάος', 'χαμηλός', 'χαρακτηριστικό', 'χαρακτηριστικών',
        'χαρτιού', 'χειρότερα', 'χρειάζονται', 'χρησιμοποίησέ',
        'χρησιμοποιούνταν', 'χρησιμοποιούσες', 'χρησιμοποιώντας',
        'χρονοδιαγράμματα', 'χρονοδιαγράμματος', 'χρόνου', 'χώρου', 'ωραίο',
        'ύψος', 'ώρα',
    )

########NEW FILE########
__FILENAME__ = person
# coding=utf-8
from __future__ import unicode_literals
from ..person import Provider as PersonProvider


class Provider(PersonProvider):
    formats_male = (
        '{{first_name_male}} {{last_name_male}}',
        '{{first_name_male}} {{last_name_male}}',
        '{{first_name_male}} {{last_name_male}}',
        '{{first_name_male}} {{last_name_male}}',
        '{{first_name_male}} {{last_name_male}}',
        '{{first_name_male}} {{last_name_male}}',
        '{{first_name_male}}-{{first_name_male}} {{last_name_male}}',
    )

    formats_female = (
        '{{first_name_female}} {{last_name_female}}',
        '{{first_name_female}} {{last_name_female}}',
        '{{first_name_female}} {{last_name_female}}',
        '{{first_name_female}} {{last_name_female}}',
        '{{first_name_female}} {{last_name_female}}',
        '{{first_name_female}} {{last_name_female}}',
        '{{first_name_female}}-{{first_name_female}} {{last_name_female}}',
    )

    formats = formats_male + formats_female

    first_names_male = (
        'Άγγελος', 'Άνθιμος', 'Άρης', 'Άριστος', 'Έκτορας', 'Έξαρχος', 'Ίκαρος',
        'Ίων', 'Αίας', 'Αβραάμ', 'Αγάπιος', 'Αγαθάγγελος', 'Αγαθοκλής',
        'Αγαθόνικος', 'Αγαμέμνων', 'Αγαπητός', 'Αγγελής', 'Αγησίλαος', 'Αδάμ',
        'Αδαμάντιος', 'Αθανάσιος', 'Αθηναγόρας', 'Αθηνόδωρος', 'Αιμίλιος',
        'Αιμιλιανός', 'Ακρίτας', 'Ακριβός', 'Αλέξανδρος', 'Αλέξιος', 'Αλκιβιάδης',
        'Αμβρόσιος', 'Ανάργυρος', 'Ανέστης', 'Αναγνώστης', 'Ανανίας', 'Αναξαγόρας',
        'Αναστάσιος', 'Ανδρέας', 'Ανδροκλής', 'Ανδρόνικος', 'Ανθούλης', 'Αντίγονος',
        'Αντίπατρος', 'Αντύπας', 'Αντώνιος', 'Απόλλων', 'Απόστολος', 'Αρίσταρχος',
        'Αργύριος', 'Αριστείδης', 'Αριστομένης', 'Αριστοτέλης', 'Αριστοφάνης',
        'Αριστόβουλος', 'Αρτέμης', 'Αρτέμιος', 'Αρχέλαος', 'Αρχιμήδης', 'Ασημάκης',
        'Ασημής', 'Ασκληπιός', 'Αστέριος', 'Αυγέρης', 'Αυξέντιος', 'Αφέντης',
        'Αχιλλέας', 'Αύγουστος', 'Βάιος', 'Βαλάντης', 'Βαλέριος', 'Βαλεντίνος',
        'Βαρδής', 'Βαρθολομαίος', 'Βαρσάμος', 'Βασίλειος', 'Βασίλης', 'Βελισσάριος',
        'Βενέτιος', 'Βενιαμίν', 'Βενιζέλος', 'Βησσαρίων', 'Βικέντιος', 'Βλάσης',
        'Βλάσιος', 'Βλαδίμηρος', 'Βρασίδας', 'Βύρων', 'Γαβριήλ', 'Γαλάτιος',
        'Γαληνός', 'Γαρύφαλλος', 'Γεράσιμος', 'Γεώργιος', 'Γιάννης', 'Γιώργος',
        'Γκίκας', 'Γρηγόριος', 'Δήμος', 'Δίκαιος', 'Δαμασκηνός', 'Δαμιανός',
        'Δανιήλ', 'Δημήτρης', 'Δημήτριος', 'Δημοκράτης', 'Δημοσθένης', 'Δημόκριτος',
        'Διαμαντής', 'Διογένης', 'Διομήδης', 'Διονύσιος', 'Δομήνικος', 'Δράκων',
        'Δρόσος', 'Δωρόθεος', 'Ειρηναίος', 'Ελευθέριος', 'Ελισσαίος', 'Εμμανουήλ',
        'Επαμεινώνδας', 'Ερμής', 'Ερμόλαος', 'Ερρίκος', 'Ερωτόκριτος', 'Ευάγγελος',
        'Ευγένιος', 'Ευδόξιος', 'Ευθύμιος', 'Ευκλείδης', 'Ευμένιος', 'Ευριπίδης',
        'Ευσέβιος', 'Ευστάθιος', 'Ευστράτιος', 'Ευτύχιος', 'Εφραίμ', 'Ζήνων',
        'Ζαφείρης', 'Ζαφείριος', 'Ζαχαρίας', 'Ζηνόβιος', 'Ηλίας', 'Ηρακλής',
        'Ηρόδοτος', 'Ησαΐας', 'Θέμης', 'Θαλής', 'Θεμιστοκλής', 'Θεοδόσης',
        'Θεοδόσιος', 'Θεολόγος', 'Θεοτόκης', 'Θεοφάνης', 'Θεοφύλακτος', 'Θεοχάρης',
        'Θεόδουλος', 'Θεόδωρος', 'Θεόκλητος', 'Θεόπιστος', 'Θεόφιλος', 'Θεόφραστος',
        'Θησεύς', 'Θουκυδίδης', 'Θρασύβουλος', 'Θωμάς', 'Ιάκωβος', 'Ιάσονας',
        'Ιάσων', 'Ιγνάτιος', 'Ιερεμίας', 'Ιερόθεος', 'Ιερώνυμος', 'Ιορδάνης',
        'Ιουλιανός', 'Ιούλιος', 'Ιπποκράτης', 'Ιππόλυτος', 'Ισίδωρος', 'Ισαάκ',
        'Ιωάννης', 'Ιωακείμ', 'Ιωνάς', 'Ιωσήφ', 'Κάρολος', 'Κίμων', 'Καλλίνικος',
        'Κηρύκος', 'Κλέαρχος', 'Κλήμης', 'Κλεάνθης', 'Κλεομένης', 'Κλεόβουλος',
        'Κλεόπας', 'Κομνηνός', 'Κορνήλιος', 'Κοσμάς', 'Κρυστάλλης', 'Κυπριανός',
        'Κυριάκος', 'Κυριαζής', 'Κωνσταντίνος', 'Κύρος', 'Κώστας', 'Λάζαρος',
        'Λάμπρος', 'Λάσκαρης', 'Λέανδρος', 'Λέων', 'Λαέρτης', 'Λαοκράτης',
        'Λαυρέντιος', 'Λεμονής', 'Λεονάρδος', 'Λεωνίδας', 'Λογοθέτης', 'Λουδοβίκος',
        'Λουκάς', 'Λουκιανός', 'Λυκούργος', 'Λύσανδρος', 'Μάριος', 'Μάρκος',
        'Μένανδρος', 'Μίνωας', 'Μαγδαληνός', 'Μακάριος', 'Μαρίνος', 'Μαρτίνος',
        'Ματθαίος', 'Μαυρίκιος', 'Μαυροειδής', 'Μαυρούδης', 'Μαύρος', 'Μεγακλής',
        'Μεθόδιος', 'Μελέτιος', 'Μενέλαος', 'Μερκούριος', 'Μηνάς', 'Μικές',
        'Μιλτιάδης', 'Μιχάλης', 'Μιχαήλ', 'Νέαρχος', 'Νίκανδρος', 'Νίκος', 'Νίκων',
        'Ναθαναήλ', 'Ναπολέων', 'Νεκτάριος', 'Νεοκλής', 'Νεόφυτος', 'Νικήτας',
        'Νικηφόρος', 'Νικόδημος', 'Νικόλαος', 'Ξανθός', 'Ξενοφών', 'Οδυσσέας',
        'Οδυσσεύς', 'Ορέστης', 'Ορφέας', 'Πάρις', 'Πάτροκλος', 'Πέτρος', 'Πίνδαρος',
        'Παναγής', 'Παναγιώτης', 'Πανορμίτης', 'Πανταζής', 'Παντελής',
        'Παντελεήμων', 'Παράσχος', 'Παρασκευάς', 'Πασχάλης', 'Παυσανίας', 'Παύλος',
        'Πελοπίδας', 'Περικλής', 'Πλάτων', 'Πλούταρχος', 'Πολυζώης', 'Πολυκράτης',
        'Πολυχρόνιος', 'Πολύβιος', 'Πολύδωρος', 'Πολύκαρπος', 'Πραξιτέλης',
        'Προκόπιος', 'Προμηθέας', 'Πρόδρομος', 'Πυθαγόρας', 'Πύρρος', 'Ράλλης',
        'Ρήγας', 'Ρίζος', 'Ραφαήλ', 'Ραχήλ', 'Ροδόφλος', 'Ρωμανός', 'Σάββας',
        'Σέργιος', 'Σαμουήλ', 'Σαράντης', 'Σεβαστιανός', 'Σεραφείμ', 'Σιρανούς',
        'Σολομών', 'Σοφοκλής', 'Σπήλιος', 'Σπυρίδων', 'Στέλλιος', 'Στέργιος',
        'Στέφανος', 'Σταμάτης', 'Σταμάτιος', 'Σταύρος', 'Στυλιανός', 'Συμεών',
        'Σωκράτης', 'Σωτήρης', 'Σωτήριος', 'Σόλων', 'Σώζων', 'Τίμων', 'Τίτος',
        'Ταξίαρχος', 'Ταξιάρχης', 'Τζανέτος', 'Τηλέμαχος', 'Τηλεμαχος', 'Τιμολέων',
        'Τιμόθεος', 'Τριαντάφυλλος', 'Τρύφων', 'Τσαμπίκος', 'Υάκινθος', 'Φίλιππος',
        'Φαίδων', 'Φανούριος', 'Φιλήμων', 'Φλοριάντ', 'Φοίβος', 'Φρίξος',
        'Φραγκίσκος', 'Φρειδερίκος', 'Φωκάς', 'Φωκίων', 'Φωτεινός', 'Φώτιος',
        'Χάρις', 'Χαράλαμπος', 'Χαρίλαος', 'Χαρίτος', 'Χρήστος', 'Χρίστος',
        'Χριστιάν', 'Χριστόδουλος', 'Χριστόφορος', 'Χρυσοβαλάντιος', 'Χρυσόστομος',
        'Χρύσανθος', 'Όθων', 'Όμηρος',
    )

    first_names_female = (
        'Άλκηστις', 'Άννα', 'Άρτεμις', 'Έλλη', 'Ήβη', 'Ήλια', 'Ήρα', 'Ίρις',
        'Αγάθη', 'Αγάπη', 'Αγαθή', 'Αγγελική', 'Αγλαΐα', 'Αγνή', 'Αγόρω',
        'Αδαμαντία', 'Αηδόνα', 'Αθανασία', 'Αθηνά', 'Αθηνοδώρα', 'Αικατερίνη',
        'Αιμιλία', 'Ακριβή', 'Αλίκη', 'Αλεξάνδρα', 'Αλεξία', 'Αλκινόη', 'Αλκμήνη',
        'Αμαλία', 'Αμβροσία', 'Αμφιθέα', 'Αμφιτρίτη', 'Ανάργυρη', 'Αναστασία',
        'Ανατολή', 'Ανδριανή', 'Ανδρομάχη', 'Ανδρομέδα', 'Ανδρονίκη', 'Ανθή',
        'Ανθούλα', 'Αννίκα', 'Αντιγόνη', 'Αντωνία', 'Απολλωνία', 'Αποστολία',
        'Αρέθα', 'Αργυρούλα', 'Αργυρώ', 'Αρετή', 'Αριάδνη', 'Αριστέα', 'Αρτεμισία',
        'Αρχοντία', 'Ασημίνα', 'Ασημούλα', 'Ασπασία', 'Αστέρω', 'Αταλάντη', 'Αυγή',
        'Αυγουστίνα', 'Αφέντρα', 'Αφροδίτη', 'Αχιλλεία', 'Βάγια', 'Βέρα', 'Βαγιανή',
        'Βαλάντω', 'Βαλέρια', 'Βαλεντίνα', 'Βαρβάρα', 'Βαρσαμία', 'Βασιλεία',
        'Βασιλική', 'Βεατρίκη', 'Βελισσαρία', 'Βενετία', 'Βερονίκη', 'Βερόνικα',
        'Βησσαρία', 'Βικέντια', 'Βικτωρία', 'Βικτόρια', 'Βιολέτα', 'Βιργινία',
        'Βλασία', 'Βρυσηίς', 'Γαβριέλλα', 'Γαλάτεια', 'Γαλήνη', 'Γαρυφαλλιά',
        'Γενοβέφα', 'Γερακίνα', 'Γερασιμούλα', 'Γεσθημανή', 'Γεωργία', 'Γιαννούλα',
        'Γιασεμή', 'Γιολάντα', 'Γκόλφω', 'Γλαύκη', 'Γλυκερία', 'Γραμματική',
        'Δάφνη', 'Δέσποινα', 'Δήμητρα', 'Δαβιδούλα', 'Δαμασκηνή', 'Δαμιανή',
        'Δανάη', 'Δημούλα', 'Διαλεκτή', 'Διαμάντω', 'Διαμαντούλα', 'Διδώ', 'Δικαία',
        'Διονυσία', 'Δούκισσα', 'Δροσιά', 'Δωροθέα', 'Δόμνα', 'Ειρήνη', 'Ελένη',
        'Ελέσσα', 'Ελεονόρα', 'Ελευθερία', 'Ελισάβετ', 'Ελπίδα', 'Ελπίς',
        'Εμμανουέλα', 'Επιστήμη', 'Ερασμία', 'Ερατώ', 'Εριέτα', 'Εριφύλη',
        'Ερμιόνη', 'Ερωφίλη', 'Ευαγγελία', 'Ευανθία', 'Ευγενία', 'Ευδοκία',
        'Ευδοξία', 'Ευθαλία', 'Ευθυμία', 'Ευλαμπία', 'Ευμορφία', 'Ευπραξία',
        'Ευρυδίκη', 'Ευρύκλεια', 'Ευσεβία', 'Ευσεβεία', 'Ευσταθία', 'Ευστρατία',
        'Ευτέρπη', 'Ευτυχία', 'Ευφροσύνη', 'Εύα', 'Εύκλεια', 'Ζαμπέτα', 'Ζαμπία',
        'Ζαφειρία', 'Ζαχαρένια', 'Ζαχαρούλα', 'Ζηναϊς', 'Ζηνοβία', 'Ζησούλα', 'Ζωή',
        'Ηλέκτρα', 'Ηλιάνα', 'Ηράκλεια', 'Ηώ', 'Θάλεια', 'Θέκλα', 'Θέμις', 'Θέτις',
        'Θαλασσινή', 'Θεανώ', 'Θεμιστόκλεια', 'Θεοδοσία', 'Θεοδούλη', 'Θεοδότη',
        'Θεοδώρα', 'Θεολογία', 'Θεοπίστη', 'Θεοφίλη', 'Θεοφανία', 'Θεοφύλακτη',
        'Θεοχαρούλα', 'Θεόκλεια', 'Θεώνη', 'Θηρεσία', 'Θωμαίς', 'Ιακωβίνα',
        'Ιγνατία', 'Ινώ', 'Ιοκάστη', 'Ιορδανία', 'Ιουλία', 'Ιουλιανή', 'Ιππολύτη',
        'Ισαβέλλα', 'Ισιδώρα', 'Ισμήνη', 'Ιφιγένεια', 'Ιωάννα', 'Ιωσηφίνα', 'Καλή',
        'Καλλίνικη', 'Καλλιρρόη', 'Καλλιρόη', 'Καλλιόπη', 'Καλομοίρα', 'Καλυψώ',
        'Κανέλλα', 'Καρυοφυλλιά', 'Κασσάνδρα', 'Κασσιανή', 'Κατερίνα', 'Κερασιά',
        'Κικιλία', 'Κλαίρη', 'Κλειώ', 'Κλεονίκη', 'Κλεοπάτρα', 'Κλημεντίνη',
        'Κλυταιμνήστρα', 'Κοκκώνα', 'Κομνηνή', 'Κονδυλία', 'Κοραλία', 'Κορνηλία',
        'Κρινιώ', 'Κρυσταλλένια', 'Κυβέλη', 'Κυδωνία', 'Κυπαρισσία', 'Κυπριανή',
        'Κυράτσα', 'Κυριακή', 'Κωνσταντία', 'Κωνσταντίνα', 'Κωστούλα', 'Κόσμια',
        'Λήδα', 'Λαζαρία', 'Λαμπρινή', 'Λασκαρίνα', 'Λαυρεντία', 'Λεμονιά',
        'Λευκοθέα', 'Λεωνιδιά', 'Λεώνη', 'Λητώ', 'Λουίζα', 'Λουκία', 'Λουλουδένια',
        'Λυγερή', 'Λυδία', 'Μάνθα', 'Μάρθα', 'Μαγδαληνή', 'Μακρίνα', 'Μαλαμάτη',
        'Μαλαματένια', 'Μαλβίνα', 'Μαντώ', 'Μαρία', 'Μαρίνα', 'Μαργαρίτα',
        'Μαργιέττα', 'Μαριάνθη', 'Μαριάννα', 'Μαριγώ', 'Μαριλένα', 'Μαρκέλλα',
        'Μαρωτέσα', 'Ματίνα', 'Ματθίλδη', 'Ματρώνη', 'Μαύρα', 'Μελένια', 'Μελέτια',
        'Μελίνα', 'Μελπομένη', 'Μερόπη', 'Μεταξία', 'Μηλιά', 'Μινέρβα', 'Μιράντα',
        'Μιχαέλα', 'Μυρσίνη', 'Μυρτώ', 'Μόσχα', 'Νίκη', 'Ναταλία', 'Ναταλίνα',
        'Ναυσικά', 'Νεκταρία', 'Νερατζιά', 'Νεφέλη', 'Νεόκλεια', 'Νικητία',
        'Νικολέτα', 'Νικολίτσα', 'Νομική', 'Νταίζη', 'Ντανιέλα', 'Ξένη', 'Ξανθή',
        'Ξανθίππη', 'Οδύσσεια', 'Ολύμπια', 'Ουρανία', 'Πέτρα', 'Παγώνα', 'Παναγία',
        'Παναγιώτα', 'Πανδώρα', 'Παντελία', 'Παντούλα', 'Πανωραία', 'Παρέσσα',
        'Παρασκευή', 'Παρθένα', 'Πασχαλιά', 'Παταπία', 'Παυλίνα', 'Πελαγία',
        'Περικλεία', 'Περιστέρα', 'Περσεφόνη', 'Πηγή', 'Πηνελόπη', 'Πιερρίνα',
        'Ποθητή', 'Πολυνίκη', 'Πολυξένη', 'Πολυτίμη', 'Πολυχρονία', 'Πολύβια',
        'Πολύδωρα', 'Πολύμνια', 'Πουλχερία', 'Πούλια', 'Προδρομία', 'Πωλίνα', 'Ρέα',
        'Ραλλία', 'Ρεβέκα', 'Ρεβέκκα', 'Ρεγγίνα', 'Ρηγούλα', 'Ροδάνθη', 'Ροδαμάνθη',
        'Ροδιά', 'Ροδόκλεια', 'Ρουμπίνη', 'Ρούσα', 'Ρωξάνη', 'Ρόζα', 'Σάρρα',
        'Σαββούλα', 'Σαλώμη', 'Σαπφώ', 'Σεβαστή', 'Σεβαστιανή', 'Σελήνη', 'Σεμίνα',
        'Σεραφεία', 'Σμαράγδα', 'Σουλτάνα', 'Σουμέλα', 'Σοφία', 'Σπάρτη',
        'Σπυράννα', 'Σπυριδούλα', 'Στέλλα', 'Σταματίνα', 'Σταυρούλα', 'Στεργιανή',
        'Στεργιαννώ', 'Στεφανία', 'Στυλιανή', 'Συμέλα', 'Συμεωνία', 'Συμεώνη',
        'Σωζούσα', 'Σωτηρία', 'Σωφρονία', 'Ταξιαρχία', 'Τατιάνα', 'Τερψιχόρη',
        'Τζένη', 'Τιμοθέα', 'Τριαντάφυλλη', 'Τριανταφυλλιά', 'Τρισεύγενη',
        'Τρυφωνία', 'Τσαμπίκα', 'Υακίνθη', 'Υβόννη', 'Υπαπαντή', 'Φαίδρα', 'Φανή',
        'Φανουρία', 'Φεβρωνία', 'Φερενίκη', 'Φιλίππα', 'Φιλαρέτη', 'Φιλιππία',
        'Φιλιώ', 'Φιλοθέη', 'Φιλομήλα', 'Φλωρίνα', 'Φλωρεντία', 'Φλώρα', 'Φοίβη',
        'Φραντζέσκα', 'Φρειδερίκη', 'Φρύνη', 'Φωτεινή', 'Χάιδω', 'Χάρη', 'Χαρά',
        'Χαρίκλεια', 'Χαραλαμπία', 'Χιονιά', 'Χλόη', 'Χριστίνα', 'Χριστιάνα',
        'Χριστοδούλα', 'Χριστοφόρα', 'Χριστόφιλη', 'Χρυσάνθη', 'Χρυσή', 'Χρυσαυγή',
        'Χρυσαφένια', 'Χρυσοβαλάντου', 'Χρυσοβαλάντω', 'Χρυσούλα', 'Χρυσόστομη',
        'Όλγα',
    )

    first_names = first_names_male + first_names_female

    last_names_male = (
        'Αβαγιανός', 'Αβραμίδης', 'Αβραμιώτης', 'Αγαλιώτης', 'Αγγελάκος', 'Αγγελής',
        'Αγγελίδης', 'Αγγελίκας', 'Αγγελόπουλος', 'Αγκυρόπουλος', 'Αδαμόπουλος',
        'Αετόπουλος', 'Αθανασάκης', 'Αθανασόπουλος', 'Ακαλίδης', 'Ακριτίδης',
        'Ακριώτης', 'Αλατζάκης', 'Αλαφάκης', 'Αλεξανδρόπουλος', 'Αλεξόπουλος',
        'Αμπατζιάνης', 'Αμπλιάνιτης', 'Αμυγδαλάκης', 'Αναστασάκης', 'Αναστασίου',
        'Αναστασόπουλος', 'Αναστόπουλος', 'Ανδρεανίδης', 'Ανδριανός',
        'Ανδρικόπουλος', 'Ανδριόπουλος', 'Ανδριώτης', 'Ανδρουλάκης',
        'Ανδρουλιδάκης', 'Αντωνάκος', 'Αντωνέας', 'Αντωνίου', 'Αντωνιάδης',
        'Αντωνόπουλος', 'Αξαόπουλος', 'Αξιώτης', 'Αποστολάκης', 'Αποστολίδης',
        'Αποστολακάκης', 'Αποστολόπουλος', 'Αραμπατζής', 'Αργυρής', 'Αργυρίου',
        'Αργυρόπουλος', 'Αρμένης', 'Αρχαυλής', 'Ασαρίδης', 'Ασημακόπουλος',
        'Ασημόπουλος', 'Αυγουστής', 'Αφρουδάκης', 'Βάρσος', 'Βάσσης', 'Βαβουλίδης',
        'Βαβουράκης', 'Βακαλάκης', 'Βακαλής', 'Βαλαβάνης', 'Βαλασίδης', 'Βαλτάς',
        'Βαμβακάς', 'Βανδώρος', 'Βαρακλής', 'Βαρδάκης', 'Βαρσάμης', 'Βασιλάκης',
        'Βασιλείου', 'Βασιλογιάννης', 'Βαχουθιανάκης', 'Βαϊτσόπουλος', 'Βελεντζάς',
        'Βιδαλάκης', 'Βιλδός', 'Βιολάτος', 'Βιτσαξής', 'Βλάχος', 'Βλαχονικολέας',
        'Βλησαρούλης', 'Βολικάκης', 'Βορλόκας', 'Βουτσάς', 'Βουτσελας', 'Βούκας',
        'Βούλγαρης', 'Βούλκος', 'Βούρας', 'Βώσσος', 'Γάτος', 'Γαβριδάκης',
        'Γαλατούλας', 'Γαρουφαλής', 'Γαρυφαλίδης', 'Γενετζάκης', 'Γεννηματάς',
        'Γεντίμης', 'Γεράρδης', 'Γεροδήμος', 'Γερόπουλος', 'Γεωργακόπουλος',
        'Γεωργαλάς', 'Γεωργαλής', 'Γεωργούδης', 'Γεωργούλας', 'Γιαννάκης',
        'Γιαννέλος', 'Γιαννές', 'Γιαννακέας', 'Γιαννακίτσας', 'Γιαννακουδάκης',
        'Γιαννακόπουλος', 'Γιαννούκος', 'Γιαννόπουλος', 'Γιαπατζής', 'Γιασημάκης',
        'Γιατρομανωλάκης', 'Γιωτάκης', 'Γιώτης', 'Γκάγκας', 'Γκίκας', 'Γκίνης',
        'Γκαγκαουδάκης', 'Γκαλίου', 'Γκανάτσιος', 'Γκατζογιάννης', 'Γκικόπουλος',
        'Γκιολδελής', 'Γκιτσάκης', 'Γκουτζαμάνης', 'Γκούβελος', 'Γκούσκος',
        'Γκότσης', 'Γουργουλής', 'Γούσιος', 'Γρίβας', 'Γραμματικόπουλος',
        'Γραμματικός', 'Γρατσιάς', 'Γρεβενάρης', 'Γρετός', 'Γρηγορίου',
        'Γρηγοριάδης', 'Γρηγορόπουλος', 'Δάρας', 'Δέλιος', 'Δίγκας', 'Δακαναλής',
        'Δανέζης', 'Δανελής', 'Δανιηλίδης', 'Δερμιτζάκης', 'Δεσύλλας', 'Δημησκής',
        'Δημητρίου', 'Δημητρόπουλος', 'Δημοβελής', 'Δημόπουλος', 'Διακάκης',
        'Διαμαντής', 'Δινεζάκης', 'Δουβίκας', 'Δουβρόπουλος', 'Δουκάς', 'Δουκατζής',
        'Δουλάμης', 'Δουλγεράκης', 'Δουμάς', 'Δουράνης', 'Δούνης', 'Δραζιώτης',
        'Δρακάκης', 'Δρακόπουλος', 'Δρουλιάς', 'Δόβας', 'Δόσης', 'Ελευθερίου',
        'Εμπορόπουλος', 'Εσπερίδης', 'Ευαγγελάτος', 'Ευαγγελινός', 'Ευκαρπίδης',
        'Ευστρατόπουλος', 'Ευταξιάς', 'Έψιμος', 'Ζαραφέτας', 'Ζαφείρης', 'Ζαχαρίου',
        'Ζενεμπίσης', 'Ζευγίτης', 'Ζηδιανάκης', 'Ζηματίκας', 'Ζηρός', 'Ζιάκας',
        'Ζιώγος', 'Ζολώτας', 'Ζορμπάς', 'Ζουκής', 'Ζουλούμης', 'Ζούνης', 'Ζτούκος',
        'Ζυγούρης', 'Ζώνιος', 'Ζώτος', 'Θεοδοσίου', 'Θεοδωρικάκος', 'Θεοδωρόπουλος',
        'Θεολόγος', 'Θεοχάρης', 'Θηβαίος', 'Θωμάς', 'Θωμόπουλος', 'Ιακωβάκης',
        'Ιατρόπουλος', 'Ιντζές', 'Ισάρης', 'Ισέρης', 'Ιωσηφίδης', 'Κίσσας',
        'Καβούρης', 'Καζανόπουλος', 'Κακαβός', 'Κακατσός', 'Κακοσαίος', 'Καλαμάρας',
        'Καλαμαράκης', 'Καλαμπαλίκης', 'Καλαπόδης', 'Καλαργυρός', 'Καλαϊτζάκης',
        'Καλιάμπος', 'Καλιτσουνάκης', 'Καμπάκας', 'Καμπερίδης', 'Καμποσάκης',
        'Καναβός', 'Κανελλόπουλος', 'Καπατσώρης', 'Καπετάνιος', 'Καπούνης',
        'Καράμπας', 'Καράνης', 'Καραΐσκος', 'Καραγιάννης', 'Καραγρηγορίου',
        'Καραδήμος', 'Καρακάξης', 'Καρακαστανιάς', 'Καρακυρίου', 'Καραλής',
        'Καραμάνος', 'Καραμσαλής', 'Καρανίκας', 'Καρανασίου', 'Καρανικόλας',
        'Καραντζόπουλος', 'Καρατζίκος', 'Καρατζαφέρης', 'Καρούντζος', 'Καρούσος',
        'Καρτάς', 'Καρυπίδης', 'Κασούτσας', 'Καστάνης', 'Κατάκης', 'Καταραχιάς',
        'Κατεβάτης', 'Κατιρτζής', 'Κατσίπης', 'Κατσίφος', 'Κατσαβός', 'Κατσαμάνης',
        'Κατσαντώνης', 'Κατσαρός', 'Κατσιγιάννης', 'Κατσιλής', 'Κατσογιάννης',
        'Καφίρης', 'Καφαντάρης', 'Καψάλης', 'Κελαϊδώνης', 'Κελλάρης', 'Κερασοβίτης',
        'Κεσαλίδης', 'Κεσεμίδης', 'Κεχαγιάς', 'Κιοσές', 'Κιουπλιώτης', 'Κιούσης',
        'Κιτινός', 'Κλήμης', 'Κοκορδέλης', 'Κολοβός', 'Κολοκάθης', 'Κολχούρης',
        'Κομκούδης', 'Κομπολιάς', 'Κονδυλίδης', 'Κονιδάρης', 'Κοντάκος',
        'Κοντογιάννης', 'Κοντοκώστας', 'Κοντός', 'Κορδατζής', 'Κορμπόπουλος',
        'Κορομήλας', 'Κοτσαρής', 'Κοττίκας', 'Κουβάς', 'Κουκλατζής', 'Κουκουβίνος',
        'Κουκουλιάντας', 'Κουλίδης', 'Κουλίζος', 'Κουλουριώτης', 'Κουμιώτης',
        'Κουράκος', 'Κουρής', 'Κουρελής', 'Κουρκουτάς', 'Κουρσάρης', 'Κουρσουμίδης',
        'Κουταλιός', 'Κουτελιέρης', 'Κουτεντάκης', 'Κουτσικόπουλος',
        'Κουτσογιάννης', 'Κουτσογιάννόπουλος', 'Κουτσουλής', 'Κουτσουρέλης',
        'Κουτσούρας', 'Κουτχιάς', 'Κούρτης', 'Κούτρης', 'Κούτσικος', 'Κραββαρίτης',
        'Κρεμμύδας', 'Κριάλης', 'Κριτσέλης', 'Κτενίδης', 'Κυμπάρης', 'Κυπραίος',
        'Κυπριώτης', 'Κυρίτσης', 'Κυργιάκης', 'Κυριαζής', 'Κυριακάκης',
        'Κυριακίδης', 'Κυριατσούλης', 'Κωνσταντάς', 'Κωνσταντακόπουλος',
        'Κωνσταντινίδης', 'Κωνσταντόπουλος', 'Κωστάκης', 'Κωστίδης', 'Κωσταλής',
        'Κωστούλας', 'Κωστόπουλος', 'Κωτούλας', 'Κωτσίδης', 'Κωτσικόρης', 'Κόλκας',
        'Κώττας', 'Λάκκας', 'Λάλας', 'Λάππας', 'Λάτσκος', 'Λέλεκας', 'Λαγγούσης',
        'Λαγογιάννης', 'Λαγοπάτης', 'Λαζαρίδης', 'Λαμπρινός', 'Λαουρδέκης',
        'Λαφατζής', 'Λεβέντης', 'Λελεδάκης', 'Λεμονής', 'Λεντζίου', 'Λιανάκης',
        'Λιβανός', 'Λιθοξοΐδης', 'Λιούτας', 'Λιτίνας', 'Λιόλιος', 'Λουλάκης',
        'Λουπασάκης', 'Λουράντος', 'Λυγκούρας', 'Λυμπέρης', 'Λώλος', 'Μάνδαλος',
        'Μάνδρος', 'Μάνος', 'Μάργαρης', 'Μάρρας', 'Μάστορας', 'Μίσχος', 'Μίχος',
        'Μαγκούφης', 'Μαζαράκης', 'Μακαριάδης', 'Μακρής', 'Μακρυγιάννης',
        'Μακρυκώστας', 'Μαμμής', 'Μανίκας', 'Μανελίδης', 'Μανιώτης', 'Μανουσέλης',
        'Μανουσιάδης', 'Μανούκας', 'Μαντάρης', 'Μαντάς', 'Μαντζουράνης',
        'Μαντζώρος', 'Μανωλάκης', 'Μανωλέας', 'Μαραγκός', 'Μαρακάς', 'Μαργαρώνης',
        'Μαρκόπουλος', 'Μασγαλάς', 'Μαστρογιάννης', 'Μαστρογιώργης', 'Μασόπουλος',
        'Ματσούκας', 'Μαυρικάκης', 'Μαυρογονάτος', 'Μαυροειδάκος', 'Μαυρομανωλάκης',
        'Μαυρομμάτης', 'Μαυρουδής', 'Μαυρούτσος', 'Μελιτσόπουλος', 'Μεταξάς',
        'Μεϊμάρης', 'Μηλιώρης', 'Μητρίδης', 'Μητρόπουλος', 'Μητσόπουλος',
        'Μιχαηλίδης', 'Μιχαλάκης', 'Μιχαλέλλης', 'Μοσχόπουλος', 'Μουσελίμης',
        'Μουτουσίδης', 'Μπέκος', 'Μπίλλας', 'Μπαγανάς', 'Μπακλάβας',
        'Μπακοστεργίου', 'Μπαλάσκας', 'Μπαλουκίδης', 'Μπαλταγιάννης', 'Μπαλτζής',
        'Μπαντές', 'Μπαντής', 'Μπερεδήμας', 'Μπερμπατιώτης', 'Μπλανάς',
        'Μπλιατσίου', 'Μποζίκης', 'Μποτσώλης', 'Μποτώνης', 'Μπουλούκος', 'Μπουρλής',
        'Μποφός', 'Μπούκος', 'Μπούσιος', 'Μπραζιώτης', 'Μπότης', 'Μυλωνάς',
        'Μυσιρλής', 'Μυτελέτσης', 'Μωραΐτης', 'Μωρός', 'Μόκας', 'Μόναχας',
        'Νάστατος', 'Νάστος', 'Νέλος', 'Νανούρης', 'Νασίκας', 'Νασιόπουλος',
        'Νικητόπουλος', 'Νικολαΐδης', 'Νικολόπουλος', 'Νικουλής', 'Νιτσοτόλης',
        'Νούσης', 'Νταβάς', 'Ντουλιάς', 'Ντόβας', 'Ντόκος', 'Ντότης', 'Ξανθάκης',
        'Ξηρογιάννης', 'Ξηρός', 'Ορφανάκης', 'Ορφανιώτης', 'Ότσος', 'Πάγκαλος',
        'Πάνος', 'Πάντος', 'Πέππας', 'Πέτσας', 'Πίππας', 'Πίσσιος', 'Πίτσης',
        'Παλαιολόγος', 'Παληός', 'Παλλάς', 'Παναγιωτακόπουλος', 'Πανδής',
        'Πανούσης', 'Πανταζής', 'Παντζέκος', 'Παντζαρτζίδης', 'Παπαγεωργίου',
        'Παπαγιάννης', 'Παπαγιαννακόπουλος', 'Παπαγιαννόπουλος', 'Παπαδάκης',
        'Παπαδημητράκης', 'Παπαδημητριάδης', 'Παπαδόπουλος', 'Παπαευαγγελίου',
        'Παπαθανασίου', 'Παπαθεοδοσίου', 'Παπαπανός', 'Παπαροϊδάμης', 'Παπαστεργίου',
        'Παπατρέχας', 'Παπαφώτης', 'Παπουδής', 'Παπουλής', 'Παππάς',
        'Παρασκευόπουλος', 'Παργανάς', 'Παρούσης', 'Πασσαλίδης', 'Πατελής',
        'Πατμανίδης', 'Πατσούρας', 'Περάκης', 'Περδίκης', 'Περδικάκης',
        'Περιστερόπουλος', 'Περπινιάς', 'Περράκης', 'Περρώτης', 'Πετράκης',
        'Πετρίδης', 'Πετριτάκης', 'Πετρογιάννης', 'Πετρόπουλος', 'Πευκιανάκης',
        'Πιάγκος', 'Πικούνης', 'Πικρός', 'Πιπεράκης', 'Πιπερίγκος', 'Πισχινάς',
        'Πιτερός', 'Πιτσάκης', 'Πιτσολής', 'Πλακωτάρης', 'Πλιάτσικας', 'Πολυζωάκης',
        'Πολυχρονίδης', 'Πολυχρονόπουλος', 'Πολυχρόνης', 'Πορίχης', 'Πουλημένος',
        'Πουλιέζος', 'Πουλογιαννόπουλος', 'Πουφτσής', 'Προβής', 'Πυλαρινός',
        'Ράλλης', 'Ράπτης', 'Ρέγκας', 'Ρέντας', 'Ρέντζος', 'Ρέππος', 'Ρήγας',
        'Ρήνος', 'Ρίγκος', 'Ρίζος', 'Ρίσβας', 'Ραγκούσης', 'Ραδοβάλης', 'Ραφιός',
        'Ραχμανίδης', 'Ραχωβίτσας', 'Ριζούλης', 'Ρουπακάς', 'Ρουσιανός',
        'Ροϊδούλης', 'Ρωμαίου', 'Ρόγαρης', 'Ρόδης', 'Ρόκας', 'Σάτλας', 'Σίδερης',
        'Σακελλαρίου', 'Σαλίχος', 'Σαλταούρας', 'Σαμακίδης', 'Σαμανίδης', 'Σαμαράς',
        'Σαουλίδης', 'Σαρίκας', 'Σαραντινός', 'Σαραφίδης', 'Σαρρός', 'Σγουρός',
        'Σδραλλής', 'Σεβδάς', 'Σεφέκος', 'Σιγανός', 'Σιδηρόπουλος', 'Σικαλίδης',
        'Σιτόπουλος', 'Σιώμος', 'Σιώρης', 'Σκαρλάτος', 'Σκαρπέτας', 'Σκορδάκης',
        'Σκουλαρίδης', 'Σκρέκας', 'Σκρίμπας', 'Σκόρδος', 'Σμαρδάς', 'Σμπονιάς',
        'Σμπρίνης', 'Σμυρνιώτης', 'Σολακούδης', 'Σουλιντζής', 'Σουρμπής',
        'Σοφιανός', 'Σπάλας', 'Σπαθόπουλος', 'Σπανδωνίδης', 'Σπανουδάκης', 'Σπανός',
        'Σπασόπουλος', 'Σπηλιώτης', 'Σπορδιλής', 'Σπυριδάκης', 'Σπυρόπουλος',
        'Σταθάτος', 'Σταθόπουλος', 'Σταμάτης', 'Σταμέλος', 'Σταματιάδης',
        'Σταμούλης', 'Σταμόπουλος', 'Σταυριανός', 'Σταυρόπουλος', 'Στεργιαλής',
        'Στεργιούδης', 'Στοφοριάδης', 'Στραβοσνίχης', 'Στόγιος', 'Συλλίγαρδος',
        'Συργής', 'Συρρής', 'Σφούνης', 'Σφύρλας', 'Σωτηράλης', 'Σύκας', 'Τάρναρης',
        'Τάσιος', 'Τάχας', 'Ταβερναράκης', 'Τακαντζάς', 'Ταμιωλάκης', 'Τασιούλας',
        'Ταχμαζίδης', 'Ταχτσίδης', 'Τεμουρτζίδης', 'Τερζής', 'Τερζίδης', 'Τζέκος',
        'Τζήκας', 'Τζαβέλλας', 'Τζαλλας', 'Τζανουδάκης', 'Τζεβελέκος', 'Τζιάβας',
        'Τζιάρας', 'Τζινιέρης', 'Τζιόρτζιος', 'Τζιώτζης', 'Τζουβέλης', 'Τζουμάκης',
        'Τοδώρης', 'Τολούδης', 'Τορομίδης', 'Τουρναβίτης', 'Τραχίλης', 'Τρεντσίου',
        'Τριαντακωνσταντής', 'Τριβέλλας', 'Τσάρκος', 'Τσέας', 'Τσέγας', 'Τσέλιος',
        'Τσέλλος', 'Τσαγκρασούλης', 'Τσαγλιώτης', 'Τσακανίκας', 'Τσακμάκης',
        'Τσαλαμάνδρης', 'Τσαμαδός', 'Τσαμασλίδης', 'Τσανδήλας', 'Τσαπραλής',
        'Τσαραμιάδης', 'Τσατσάνης', 'Τσεμπερλίδης', 'Τσεντούρος', 'Τσιάκος',
        'Τσιάρας', 'Τσιαμίτας', 'Τσιαμούρας', 'Τσιαντάς', 'Τσιατής', 'Τσιγαρίδας',
        'Τσικνιάς', 'Τσιρώνης', 'Τσιτούρας', 'Τσομώκος', 'Τσοπανίδης', 'Τσουκνίδας',
        'Τσούμος', 'Τσούπρας', 'Τσόλκας', 'Τσότρας', 'Τσώνης', 'Τσώτσης', 'Τυμβίου',
        'Τυράλης', 'Φαλιέρος', 'Φανουργάκης', 'Φειδερόπουλος', 'Φερεντίνος',
        'Φιλιππάκης', 'Φιλιππάτος', 'Φιλιππόπουλος', 'Φουντζούλας', 'Φουσιέκης',
        'Φουτσιτζής', 'Φούσκας', 'Φραγκόπουλος', 'Φραντζής', 'Φρογάκης', 'Φυδάνης',
        'Φωκάς', 'Φωκαδελής', 'Φωτογλίδης', 'Φωτόπουλος', 'Χέλιος', 'Χαβρεδάκης',
        'Χαλατσής', 'Χαραλάμπους', 'Χαραλαμπίδης', 'Χαρισιάδης', 'Χαρμπίλας',
        'Χαρπαντίδης', 'Χαρτερός', 'Χατζαντώνης', 'Χατζελλής', 'Χατζηβλασίου',
        'Χατζηγεωργίου', 'Χατζηγρηγοράκης', 'Χατζηκύρκος', 'Χατζησάββας',
        'Χατζησαββίδης', 'Χατζησταυράκης', 'Χατζιάρας', 'Χατζόπουλος', 'Χαχούδης',
        'Χητός', 'Χιτός', 'Χονδρολίδης', 'Χουδαλάκης', 'Χουλιάρας', 'Χουντής',
        'Χουχουλής', 'Χριστάκης', 'Χριστάρας', 'Χριστακόπουλος', 'Χριστοδουλάκης',
        'Χριστόπουλος', 'Χρονόπουλος', 'Χρυσίδης', 'Χρυσικός', 'Χρυσοβέργης',
        'Χρυσουλής', 'Ψάλτης', 'Ψυλλάκης', 'Ψυχιάς',
    )

    last_names_female = (
        'Αβραμίδου', 'Αβραμπέκη', 'Αγγελάκη', 'Αγγελίδου', 'Αγγελουσοπούλου',
        'Αγραφιώτη', 'Αδαμοπούλου', 'Αθανασιάδη', 'Αθανασιάδου', 'Αλεξανδράκη',
        'Αλεξανδρίδου', 'Αλεξοπούλου', 'Αλυσανδράτου', 'Ανανιάδου', 'Αναστασάκη',
        'Αναστασίου', 'Ανεζάκη', 'Αντωνάκη', 'Αντωνίου', 'Αποστολάκη',
        'Αποστολίδου', 'Αραπάκη', 'Αραπίδου', 'Αργυράκη', 'Αργυρίου',
        'Αργυροπούλου', 'Αρματά', 'Αρσενάκη', 'Αρχάκη', 'Ασλανίδου', 'Ασουχίδου',
        'Ασσαργιωτάκη', 'Ατσαλάκη', 'Βαΐου', 'Βαβάση', 'Βαγενά', 'Βαζούρα',
        'Βαϊραμίδου', 'Βακουφτσή', 'Βαλεντή', 'Βαλιάκα', 'Βαλκάνου', 'Βαλσαμίδου',
        'Βαμβουκάκη', 'Βαρελίδου', 'Βαρθαλίτη', 'Βαρουτίδου', 'Βαρσάμου',
        'Βασιλάκη', 'Βασιλείου', 'Βασιλειάδη', 'Βασιλοπούλου', 'Βαφειάδου',
        'Βερβερίδου', 'Βερβίτη', 'Βλάσση', 'Βλαχοδήμου', 'Βλάχου', 'Βοσινάκη',
        'Βουλγαρίδου', 'Βουλτσίδου', 'Βουτσινά', 'Βραδή', 'Βρακά', 'Βράσκου',
        'Βυζιηνού', 'Γαβριήλ', 'Γαβριηλίδη', 'Γαλανάκη', 'Γαλάνη', 'Γαλανοπούλου',
        'Γεροκώστα', 'Γερούκη', 'Γεωργακοπούλου', 'Γεωργαρά', 'Γεωργή',
        'Γεωργιάδου', 'Γεωργίτση', 'Γεωργουλάκη', 'Γεωργούλα', 'Γιακαμόζη',
        'Γιαννακουδάκη', 'Γιανναρά', 'Γιαννοπούλου', 'Γιατράκου', 'Γκάβρου',
        'Γκάγκα', 'Γκαλίου', 'Γκιριτζιώνη', 'Γκόβα', 'Γκόνη', 'Γκούβα', 'Γκούνη',
        'Γούλα', 'Γούπα', 'Γραμμένου', 'Γρηγορίου', 'Γρηγοριάδου', 'Γρηγοροπούλου',
        'Γρίβα', 'Δαγλή', 'Δαΐκου', 'Δαμαλά', 'Δαματοπούλου', 'Δαμήλου',
        'Δανδανίδου', 'Δαρδιώτη', 'Δαρσακλή', 'Δαυίδ', 'Δάφνη', 'Δεδούκου', 'Δελή',
        'Δερλώπα', 'Δημακογιάννη', 'Δημητρίου', 'Δημητρέλου', 'Δημητριάδου',
        'Δημοπούλου', 'Δήμου', 'Δημτσούδη', 'Διακουμή', 'Διαμαντοπούλου',
        'Διοπούλου', 'Δούβαλη', 'Δουκίδου', 'Δουλάμη', 'Δουλγεράκη', 'Δουλουφάκη',
        'Δρακάκη', 'Δρακουλή', 'Δραμουντάνη', 'Δρίβα', 'Δρόσου', 'Δρυμαλίτου',
        'Δώρη', 'Ελευθερίου', 'Εμμανουήλ', 'Εμμανουηλίδου', 'Ενωτιάδη',
        'Ευαγγελάκη', 'Ευαγγελίδη', 'Ζαβιτσάνου', 'Ζαννίκου', 'Ζαρειφοπούλου',
        'Ζαρζάνη', 'Ζαφείρη', 'Ζαχαρίου', 'Ζαχαριουδάκη', 'Ζεγλίνα', 'Ζερβά',
        'Ζιάρα', 'Ζυγούρη', 'Ζώη', 'Ζωντανού', 'Θασίτου', 'Θεοδοσίου',
        'Θεοδοσιάδου', 'Θεοδωροπούλου', 'Θωμάκου', 'Ιωακείμ', 'Ιωακειμίδου',
        'Ιωσηφίδου', 'Καζαντζή', 'Κάκκα', 'Κακοτρίχη', 'Καλαθά', 'Καλαϊτζοπούλου',
        'Καλαμάρα', 'Καλδή', 'Καλέμη', 'Καλλιάνταση', 'Καλογιαννάκη', 'Καλογιάννη',
        'Καλομοίρη', 'Καλούδη', 'Καμινάρη', 'Καμπούρη', 'Κανελή', 'Κανελλή',
        'Κανελλοπούλου', 'Κανταρελή', 'Καπανταϊδάκη', 'Καπνιά', 'Καπουρνιώτη',
        'Καραγιάννη', 'Καραγιοβάννη', 'Καραγρηγορίου', 'Καραθανάση', 'Καρακυρίου',
        'Καρακωνσταντινού', 'Καρακώστα', 'Καραμάνη', 'Καραμανλή', 'Καράμπη',
        'Καραμπίνα', 'Καρανάνου', 'Καρανασίου', 'Καραντάνα', 'Καραογλάνη',
        'Καρατάσου', 'Καρβέλη', 'Καργάκου', 'Καρκαλέτση', 'Καρκανάκη', 'Καρολίδου',
        'Καρυδά', 'Κασκαούτη', 'Κασμιρλή', 'Κασσωτάκη', 'Κατσανίκου', 'Κατσαντώνη',
        'Κατσαφάδου', 'Κατσιγιάννη', 'Κατσιλλή', 'Κατσιμάλη', 'Κατσιμάνη',
        'Κατσούλα', 'Καφαντάρη', 'Καφφέ', 'Καχριμανίδη', 'Καψή', 'Κεσίση',
        'Κεσκίνη', 'Κετεσίδου', 'Κεφαλή', 'Κιορίδου', 'Κίτσου', 'Κλεινάκη',
        'Κοκκινίδου', 'Κοκκίνου', 'Κολαΐτου', 'Κόλλια', 'Κολτσάκη', 'Κονιάρη',
        'Κονσούλα', 'Κοντογεωργάκη', 'Κοντογιάννη', 'Κοντού', 'Κορομπόκη',
        'Κορωνίδου', 'Κοτρώτσου', 'Κοτσινά', 'Κουζουλά', 'Κουθούρη', 'Κουκουβά',
        'Κουκουθάκη', 'Κουλαουσάρη', 'Κουλουμπού', 'Κουλοχέρη', 'Κουμάρα',
        'Κουρλού', 'Κουτκιά', 'Κουτουζίδου', 'Κουτσικούρη', 'Κουτσιουμάρη',
        'Κουτσοβίδου', 'Κουτσονίκα', 'Κουτσούμπεη', 'Κουτσούμπη', 'Κουτσουνάκη',
        'Κουτσουρέλη', 'Κουφάκη', 'Κοφινάκη', 'Κυργιά', 'Κυριακοπούλου', 'Κυριάκου',
        'Κυριακούλη', 'Κυριαννάκη', 'Κυρίτση', 'Κυρκούδη', 'Κυρούδη',
        'Κωνσταντινίδου', 'Κωνσταντοπούλου', 'Κωστοπούλου', 'Κωτούλα',
        'Κωτσιονοπούλου', 'Κώτσου', 'Λαλαούνη', 'Λέκκα', 'Λεντζίου', 'Λεπίδα',
        'Λιάκου', 'Λιάνου', 'Λιναρδάκη', 'Λιολιοπούλου', 'Λιόντη', 'Λιούκα',
        'Λίτσιου', 'Λογκάκη', 'Λογοθέτη', 'Λουμπούτσκου', 'Λυμαξή', 'Λυρή', 'Λύτρα',
        'Μαγκανάρη', 'Μαγκαφοπούλου', 'Μαγούλα', 'Μακρή', 'Μακροπούλου', 'Μάλαμα',
        'Μαλίμη', 'Μαλλή', 'Μαμαλά', 'Μανέτα', 'Μανιάτη', 'Μανιτάρου', 'Μανοπούλου',
        'Μανουσοπούλου', 'Μαντά', 'Μάντου', 'Μαράκη', 'Μάρα', 'Μαργαριτάκη',
        'Μαργαρίτη', 'Μαργιά', 'Μαρκαντωνάκη', 'Μαρουγιάννη', 'Μαρτζούκου',
        'Μαρτιάδου', 'Μασαούτη', 'Μασιάλα', 'Μασίκα', 'Μαστραγγελή',
        'Μαστρογιαννίδου', 'Ματεντσίδου', 'Ματσούρη', 'Μαυρίδου', 'Μαυραειδή',
        'Μαυρίδη', 'Μαυροείδη', 'Μαυροπούλου', 'Μέλανι', 'Μενγκ', 'Μεξή',
        'Μηλιάδου', 'Μηλιάκη', 'Μηνά', 'Μητροπούλου', 'Μητσοπούλου', 'Μήτσου',
        'Μιλέα', 'Μισίδου', 'Μιχαηλίδου', 'Μιχαλάρου', 'Μιχελή', 'Μιχελακάκη',
        'Μίχου', 'Μοσχοβάκη', 'Μουτζούρη', 'Μπακοστεργίου', 'Μπακουλή', 'Μπαλή',
        'Μπαλαμπάνη', 'Μπαλανίκα', 'Μπαλάση', 'Μπαλλή', 'Μπαλτατζή', 'Μπαρκούτα',
        'Μπατζάνη', 'Μπατσάκη', 'Μπαφέρα', 'Μπαφίτη', 'Μπεκάκου', 'Μπελέκου',
        'Μπενέτου', 'Μπεσύρη', 'Μπίκα', 'Μπιμπίκα', 'Μπιμπίρη', 'Μπλιατσίου',
        'Μποζίκη', 'Μπονέλη', 'Μπότζα', 'Μποτζιώρη', 'Μπούζα', 'Μπραέσα',
        'Μπρούζου', 'Μπύρου', 'Μυλωνίδου', 'Μυτάρη', 'Μωραΐτη', 'Μωυσίδου',
        'Νάντσου', 'Ναούμ', 'Νάσσου', 'Νατσουλή', 'Νίκα', 'Νικολάτου', 'Νικολάου',
        'Νικολοπούλου', 'Νικολουδάκη', 'Νταγκαλή', 'Ντάνου', 'Ντανώλα', 'Ντζιαβίδα',
        'Ντόβα', 'Ντότση', 'Ντριβαλά', 'Νώε', 'Ξανθοπούλου', 'Ξενάκη', 'Ξενίδη',
        'Ξένου', 'Ξηρίδου', 'Ξηροδήμα', 'Ξηροτύρη', 'Ξυγκάκου', 'Οικονομοπούλου',
        'Οικονόμου', 'Ορφανίδου', 'Παλαιολογοπούλου', 'Παλαμπουγιούκη', 'Παλιεράκη',
        'Παλιούρα', 'Παναγιωτακοπούλου', 'Παναγιώτου', 'Πανκίδου', 'Πανοπούλου',
        'Πάνου', 'Πανταζή', 'Πάντζιου', 'Παντίσκα', 'Πάντου', 'Παπαγεωργίου',
        'Παπαδήμα', 'Παπαδημητροπούλου', 'Παπαδοπούλου', 'Παπαευαγγελίου',
        'Παπαευαγγέλου', 'Παπαθανασίου', 'Παπαθεοδοσίου', 'Παπαθωμά',
        'Παπακωνσταντίνου', 'Παπακώστα', 'Παπανάνου', 'Παπανδρέου',
        'Παπανδρικοπούλου', 'Παπανικολάου', 'Παπανώτα', 'Παπασπηλιωτοπούλου',
        'Παπασταύρου', 'Παπαστεργίου', 'Παπατζήκα', 'Παπαχρήστου', 'Παπουτσοπούλου',
        'Παππά', 'Παράνου', 'Παρασκευά', 'Πατελλή', 'Πατινιωτάκη', 'Πατσουρέα',
        'Παυλάκη', 'Παυλή', 'Παυλίδου', 'Πεμούση', 'Περουλάκη', 'Πετράκη',
        'Πετρίδου', 'Πετροσιάν', 'Πέτρου', 'Πέτση', 'Πετσιά', 'Πέττα', 'Πιπερίδη',
        'Πισκοπάνη', 'Πίσπα', 'Πλατάκη', 'Πολατίδου', 'Πολέμη', 'Πολίτου',
        'Πορφυριάδου', 'Ποσάντζη', 'Ποταμιάνου', 'Πουλή', 'Πουλιάση', 'Πουλίδα',
        'Πουρνάρα', 'Πρέκα', 'Προύβα', 'Πυροβόλου', 'Ραδιοπούλου', 'Ραυτοπούλου',
        'Ρέππα', 'Ρόγγα', 'Ροδίτου', 'Ρόκκα', 'Ρούσσου', 'Ρωμαίου', 'Σαββάκη',
        'Σακελλαρίου', 'Σακκή', 'Σαλέμη', 'Σαμπάνη', 'Σαμτανίδου', 'Σάουερ',
        'Σαπρίκη', 'Σαριδάκη', 'Σαρρή', 'Σγουρένα', 'Σδούκου', 'Σεβαστού',
        'Σελινοπούλου', 'Σεμπέπου', 'Σηκωτίδου', 'Σίββα', 'Σιδηροπούλου',
        'Σιμητοπούλου', 'Σιμιτζή', 'Σιόλου', 'Σιούτα', 'Σκαβέντζου', 'Σκασίλα',
        'Σκαφτούρου', 'Σκοτάδη', 'Σκούμπρου', 'Σκρεμμύδα', 'Σκυλογιάννη', 'Σμιτ',
        'Σοκολάκη', 'Σολωμίδου', 'Σόφρα', 'Σπαθάρη', 'Σπανίδου',
        'Σπανοχριστοδούλου', 'Σπασέγκου', 'Σπηλιάδου', 'Σπυριδάκη', 'Σταθά',
        'Σταματούκου', 'Σταμέλου', 'Σταμούλη', 'Σταυρίδου', 'Σταύρου', 'Στεφάνου',
        'Στούμπου', 'Στρατογιάννη', 'Στρούμπα', 'Στυλιανίδου', 'Συβιλιά',
        'Συμεωνίδου', 'Συνοδινού', 'Συρμού', 'Σύψα', 'Σφακιανάκη', 'Σωτηροπούλου',
        'Ταμπορρίνο', 'Τάντου', 'Ταξίδου', 'Τάσση', 'Τάτση', 'Ταυλαρίδου',
        'Ταφραλή', 'Τζάγκα', 'Τζαναβάρα', 'Τζιγκούρα', 'Τζιόβα', 'Τζιρατούδη',
        'Τζιωρτζή', 'Τόγια', 'Τόλη', 'Τομπουλίδου', 'Τόμπρη', 'Τοπαλή', 'Τοσούνη',
        'Τουλάκη', 'Τουλούπη', 'Τουρνά', 'Τραγούστη', 'Τρεντσίου', 'Τριανταφύλλου',
        'Τρίκα', 'Τριφτανίδου', 'Τρομπούκη', 'Τσάκη', 'Τσακαλάκου', 'Τσακίρη',
        'Τσαμοπούλου', 'Τσαμπαλή', 'Τσαμπούρη', 'Τσαμτσούρη', 'Τσανάκα',
        'Τσαντίδου', 'Τσάτη', 'Τσαχάκη', 'Τσέτου', 'Τσετσέρη', 'Τσικνή', 'Τσικρίκα',
        'Τσίμη', 'Τσιομπάνη', 'Τσιούπρα', 'Τσιπλίκωφ', 'Τσιωλξ', 'Τσουκιά',
        'Τσουνάκου', 'Τσουράκη', 'Τσούρα', 'Τσώνη', 'Τυμβίου', 'Υφαντή', 'Φαββάτα',
        'Φαρμάκη', 'Φασατάκη', 'Φασουλή', 'Φασουλίδου', 'Φειζατίδου', 'Φιδάνη',
        'Φιλιάγκου', 'Φιλίππου', 'Φίλκα', 'Φλασκή', 'Φουρκιώτη', 'Φραγκιαδάκη',
        'Φραγκουδάκη', 'Φρονιμάκη', 'Φυτιλή', 'Φωλιά', 'Φωτακοπούλου', 'Φωτιάδου',
        'Χαλαντζούκα', 'Χαλβατζή', 'Χαλκίδου', 'Χαμαλίδου', 'Χανταμπή', 'Χαντζή',
        'Χαραλαμπίδου', 'Χασάπη', 'Χατζή', 'Χατζηβλασίου', 'Χατζηγεωργίου',
        'Χατζηδάκη', 'Χατζημιχαήλ', 'Χατζηφώτη', 'Χατζηχαρίστου', 'Χιωτίδου',
        'Χολέβα', 'Χονδρούδη', 'Χοντζιά', 'Χορόζη', 'Χορτάτου', 'Χουρζαμάνη',
        'Χρήστου', 'Χριστογιάννη', 'Χριστοδούλου', 'Χριστοπούλου', 'Χριστοφόρη',
        'Χρονοπούλου', 'Χρυσανθακοπούλου', 'Χρυσάφη', 'Χρυσικάκη', 'Χωριανοπούλου',
        'Χωρινού', 'Ψυρρή', 'Ψυχάρη',
    )

    last_names = last_names_male + last_names_female

    def name_male(self):
        pattern = self.random_element(self.formats_male)
        return self.generator.parse(pattern)

    def name_female(self):
        pattern = self.random_element(self.formats_female)
        return self.generator.parse(pattern)

    @classmethod
    def first_name(cls):
        return cls.random_element(cls.first_names)

    @classmethod
    def first_name_male(cls):
        return cls.random_element(cls.first_names_male)

    @classmethod
    def first_name_female(cls):
        return cls.random_element(cls.first_names_female)

    @classmethod
    def last_name(cls):
        return cls.random_element(cls.last_names)

    @classmethod
    def last_name_male(cls):
        return cls.random_element(cls.last_names_male)

    @classmethod
    def last_name_female(cls):
        return cls.random_element(cls.last_names_female)

########NEW FILE########
__FILENAME__ = phone_number
from __future__ import unicode_literals
from ..phone_number import Provider as PhoneNumberProvider


class Provider(PhoneNumberProvider):
    formats = (
        '69########',
        '69## ######',
        '69## ### ###',

        '210#######',
        '210 #######',
        '210 ### ####',

        '2##0######',
        '2##0 ######',
        '2##0 ### ###',

        '2###0#####',
        '2###0 ## ###',

        '(+30) 69## ######',
        '+30 69## ######',
        '+3069########',
        '(+30) 2### ######',
        '+30 2### ######',
        '+302#########',
    )

########NEW FILE########
__FILENAME__ = address
from __future__ import unicode_literals
import re
from ..address import Provider as AddressProvider


class Provider(AddressProvider):

    postal_code_letters = ('A','B','C','E','G','H','J',
        'K','L','M','N','P','R','S','T','V','X','Y')

    city_prefixes = ('North', 'East', 'West', 'South', 'New', 'Lake', 'Port')

    city_suffixes = (
        'town', 'ton', 'land', 'ville', 'berg', 'burgh', 'borough', 'bury', 'view', 'port', 'mouth', 'stad', 'furt',
        'chester', 'mouth', 'fort', 'haven', 'side', 'shire')

    building_number_formats = ('#####', '####', '###')

    street_suffixes = (
        'Alley', 'Avenue', 'Branch', 'Bridge', 'Brook', 'Brooks', 'Burg', 'Burgs', 'Bypass', 'Camp', 'Canyon', 'Cape',
        'Causeway', 'Center', 'Centers', 'Circle', 'Circles', 'Cliff', 'Cliffs', 'Club', 'Common', 'Corner', 'Corners',
        'Course', 'Court', 'Courts', 'Cove', 'Coves', 'Creek', 'Crescent', 'Crest', 'Crossing', 'Crossroad', 'Curve',
        'Dale', 'Dam', 'Divide', 'Drive', 'Drive', 'Drives', 'Estate', 'Estates', 'Expressway', 'Extension',
        'Extensions',
        'Fall', 'Falls', 'Ferry', 'Field', 'Fields', 'Flat', 'Flats', 'Ford', 'Fords', 'Forest', 'Forge', 'Forges',
        'Fork',
        'Forks', 'Fort', 'Freeway', 'Garden', 'Gardens', 'Gateway', 'Glen', 'Glens', 'Green', 'Greens', 'Grove',
        'Groves',
        'Harbor', 'Harbors', 'Haven', 'Heights', 'Highway', 'Hill', 'Hills', 'Hollow', 'Inlet', 'Inlet', 'Island',
        'Island',
        'Islands', 'Islands', 'Isle', 'Isle', 'Junction', 'Junctions', 'Key', 'Keys', 'Knoll', 'Knolls', 'Lake',
        'Lakes',
        'Land', 'Landing', 'Lane', 'Light', 'Lights', 'Loaf', 'Lock', 'Locks', 'Locks', 'Lodge', 'Lodge', 'Loop',
        'Mall',
        'Manor', 'Manors', 'Meadow', 'Meadows', 'Mews', 'Mill', 'Mills', 'Mission', 'Mission', 'Motorway', 'Mount',
        'Mountain', 'Mountain', 'Mountains', 'Mountains', 'Neck', 'Orchard', 'Oval', 'Overpass', 'Park', 'Parks',
        'Parkway',
        'Parkways', 'Pass', 'Passage', 'Path', 'Pike', 'Pine', 'Pines', 'Place', 'Plain', 'Plains', 'Plains', 'Plaza',
        'Plaza', 'Point', 'Points', 'Port', 'Port', 'Ports', 'Ports', 'Prairie', 'Prairie', 'Radial', 'Ramp', 'Ranch',
        'Rapid', 'Rapids', 'Rest', 'Ridge', 'Ridges', 'River', 'Road', 'Road', 'Roads', 'Roads', 'Route', 'Row', 'Rue',
        'Run', 'Shoal', 'Shoals', 'Shore', 'Shores', 'Skyway', 'Spring', 'Springs', 'Springs', 'Spur', 'Spurs',
        'Square',
        'Square', 'Squares', 'Squares', 'Station', 'Station', 'Stravenue', 'Stravenue', 'Stream', 'Stream', 'Street',
        'Street', 'Streets', 'Summit', 'Summit', 'Terrace', 'Throughway', 'Trace', 'Track', 'Trafficway', 'Trail',
        'Trail',
        'Tunnel', 'Tunnel', 'Turnpike', 'Turnpike', 'Underpass', 'Union', 'Unions', 'Valley', 'Valleys', 'Via',
        'Viaduct',
        'View', 'Views', 'Village', 'Village', 'Villages', 'Ville', 'Vista', 'Vista', 'Walk', 'Walks', 'Wall', 'Way',
        'Ways', 'Well', 'Wells')

    postal_code_formats = ('?%? %?%', '?%?-%?%', '?%?%?%')

    provinces = (
        'Alberta', 'British Columbia', 'Manitoba', 'New Brunswick',
        'Newfoundland and Labrador', 'Northwest Territories',
        'New Brunswick',  'Nova Scotia', 'Nunavut', 'Ontario',
        'Prince Edward Island', 'Quebec', 'Saskatchewan', 'Yukon Territory')

    provinces_abbr = (
        'AB', 'BC', 'MB', 'NB', 'NL', 'NT', 'NS',
        'NV', 'ON', 'PE', 'QC', 'SK', 'YT')

    countries = (
        'Afghanistan', 'Albania', 'Algeria', 'American Samoa', 'Andorra', 'Angola', 'Anguilla',
        'Antarctica (the territory South of 60 deg S)', 'Antigua and Barbuda', 'Argentina', 'Armenia', 'Aruba',
        'Australia', 'Austria', 'Azerbaijan',
        'Bahamas', 'Bahrain', 'Bangladesh', 'Barbados', 'Belarus', 'Belgium', 'Belize', 'Benin', 'Bermuda', 'Bhutan',
        'Bolivia', 'Bosnia and Herzegovina', 'Botswana', 'Bouvet Island (Bouvetoya)', 'Brazil',
        'British Indian Ocean Territory (Chagos Archipelago)', 'British Virgin Islands', 'Brunei Darussalam',
        'Bulgaria', 'Burkina Faso', 'Burundi',
        'Cambodia', 'Cameroon', 'Canada', 'Cape Verde', 'Cayman Islands', 'Central African Republic', 'Chad', 'Chile',
        'China', 'Christmas Island', 'Cocos (Keeling) Islands', 'Colombia', 'Comoros', 'Congo', 'Congo', 'Cook Islands',
        'Costa Rica', 'Cote d\'Ivoire', 'Croatia', 'Cuba', 'Cyprus', 'Czech Republic',
        'Denmark', 'Djibouti', 'Dominica', 'Dominican Republic',
        'Ecuador', 'Egypt', 'El Salvador', 'Equatorial Guinea', 'Eritrea', 'Estonia', 'Ethiopia',
        'Faroe Islands', 'Falkland Islands (Malvinas)', 'Fiji', 'Finland', 'France', 'French Guiana',
        'French Polynesia', 'French Southern Territories',
        'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana', 'Gibraltar', 'Greece', 'Greenland', 'Grenada', 'Guadeloupe',
        'Guam', 'Guatemala', 'Guernsey', 'Guinea', 'Guinea-Bissau', 'Guyana',
        'Haiti', 'Heard Island and McDonald Islands', 'Holy See (Vatican City State)', 'Honduras', 'Hong Kong',
        'Hungary',
        'Iceland', 'India', 'Indonesia', 'Iran', 'Iraq', 'Ireland', 'Isle of Man', 'Israel', 'Italy',
        'Jamaica', 'Japan', 'Jersey', 'Jordan',
        'Kazakhstan', 'Kenya', 'Kiribati', 'Korea', 'Korea', 'Kuwait', 'Kyrgyz Republic',
        'Lao People\'s Democratic Republic', 'Latvia', 'Lebanon', 'Lesotho', 'Liberia', 'Libyan Arab Jamahiriya',
        'Liechtenstein', 'Lithuania', 'Luxembourg',
        'Macao', 'Macedonia', 'Madagascar', 'Malawi', 'Malaysia', 'Maldives', 'Mali', 'Malta', 'Marshall Islands',
        'Martinique', 'Mauritania', 'Mauritius', 'Mayotte', 'Mexico', 'Micronesia', 'Moldova', 'Monaco', 'Mongolia',
        'Montenegro', 'Montserrat', 'Morocco', 'Mozambique', 'Myanmar',
        'Namibia', 'Nauru', 'Nepal', 'Netherlands Antilles', 'Netherlands', 'New Caledonia', 'New Zealand', 'Nicaragua',
        'Niger', 'Nigeria', 'Niue', 'Norfolk Island', 'Northern Mariana Islands', 'Norway',
        'Oman',
        'Pakistan', 'Palau', 'Palestinian Territory', 'Panama', 'Papua New Guinea', 'Paraguay', 'Peru', 'Philippines',
        'Pitcairn Islands', 'Poland', 'Portugal', 'Puerto Rico',
        'Qatar',
        'Reunion', 'Romania', 'Russian Federation', 'Rwanda',
        'Saint Barthelemy', 'Saint Helena', 'Saint Kitts and Nevis', 'Saint Lucia', 'Saint Martin',
        'Saint Pierre and Miquelon', 'Saint Vincent and the Grenadines', 'Samoa', 'San Marino', 'Sao Tome and Principe',
        'Saudi Arabia', 'Senegal', 'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore', 'Slovakia (Slovak Republic)',
        'Slovenia', 'Solomon Islands', 'Somalia', 'South Africa', 'South Georgia and the South Sandwich Islands',
        'Spain', 'Sri Lanka', 'Sudan', 'Suriname', 'Svalbard & Jan Mayen Islands', 'Swaziland', 'Sweden', 'Switzerland',
        'Syrian Arab Republic',
        'Taiwan', 'Tajikistan', 'Tanzania', 'Thailand', 'Timor-Leste', 'Togo', 'Tokelau', 'Tonga',
        'Trinidad and Tobago', 'Tunisia', 'Turkey', 'Turkmenistan', 'Turks and Caicos Islands', 'Tuvalu',
        'Uganda', 'Ukraine', 'United Arab Emirates', 'United Kingdom', 'United States of America',
        'United States Minor Outlying Islands', 'United States Virgin Islands', 'Uruguay', 'Uzbekistan',
        'Vanuatu', 'Venezuela', 'Vietnam',
        'Wallis and Futuna', 'Western Sahara',
        'Yemen',
        'Zambia', 'Zimbabwe'
    )

    city_formats = (
        '{{city_prefix}} {{first_name}}{{city_suffix}}',
        '{{city_prefix}} {{first_name}}',
        '{{first_name}}{{city_suffix}}',
        '{{last_name}}{{city_suffix}}',
    )
    street_name_formats = (
        '{{first_name}} {{street_suffix}}',
        '{{last_name}} {{street_suffix}}'
    )
    street_address_formats = (
        '{{building_number}} {{street_name}}',
        '{{building_number}} {{street_name}} {{secondary_address}}',
    )
    address_formats = (
        "{{street_address}}\n{{city}}, {{province_abbr}} {{postalcode}}",
    )
    secondary_address_formats = ('Apt. ###', 'Suite ###')

    @classmethod
    def province(cls):
        """
        """
        return cls.random_element(cls.provinces)

    @classmethod
    def province_abbr(cls):
        return cls.random_element(cls.provinces_abbr)

    @classmethod
    def city_prefix(cls):
        return cls.random_element(cls.city_prefixes)

    @classmethod
    def secondary_address(cls):
        return cls.numerify(cls.random_element(cls.secondary_address_formats))

    @classmethod
    def postal_code_letter(cls):
        """
        Returns a random letter from the list of allowable
        letters in a canadian postal code
        """
        return cls.random_element(cls.postal_code_letters)

    @classmethod
    def postalcode(cls):
        """
        Replaces all question mark ('?') occurrences with a random letter
        from postal_code_formats then passes result to
        numerify to insert numbers
        """
        temp = re.sub(r'\?',
            lambda x: cls.postal_code_letter(),
            cls.random_element(cls.postal_code_formats))
        return cls.numerify(temp)


########NEW FILE########
__FILENAME__ = phone_number
from __future__ import unicode_literals
from ..phone_number import Provider as PhoneNumberProvider


class Provider(PhoneNumberProvider):
    formats = (
        '%##-###-####',
        '%##.###.####',
        '%## ### ####',
        '(%##) ###-####',
        '1-%##-###-####',
        '1 (%##) ###-####',
        '+1 (%##) ###-####',
        '%##-###-#### x###',
        '(%##) ###-#### x###',
    )
########NEW FILE########
__FILENAME__ = ssn
# coding=utf-8
from __future__ import unicode_literals
from ..ssn import Provider as SsnProvider
import random

class Provider(SsnProvider):
    
    #in order to create a valid SIN we need to provide a number that passes a simple modified Luhn Algorithmn checksum
    #this function essentially reverses the checksum steps to create a random valid SIN (Social Insurance Number)    
    @classmethod
    def ssn(cls):
       
        #create an array of 8 elements initialized randomly
        digits = random.sample(range(10), 8)
        
        # All of the digits must sum to a multiple of 10.  
        # sum the first 8 and set 9th to the value to get to a multiple of 10
        digits.append(10 - (sum(digits) % 10))
        
        #digits is now the digital root of the number we want multiplied by the magic number 121 212 121
        #reverse the multiplication which occurred on every other element
        for i in range(1, len(digits), 2):
            if digits[i] % 2 == 0:
                digits[i] = (digits[i] / 2) 
            else:  
                digits[i] = (digits[i] + 9) / 2 
        
        #build the resulting SIN string
        sin = "" 
        for i in range(0, len(digits), 1):
            sin += str(digits[i])
            #add a space to make it conform to normal standards in Canada
            if i % 3 == 2: 
                sin += " "
        
        #finally return our random but valid SIN 
        return sin
  

########NEW FILE########
__FILENAME__ = address
from __future__ import unicode_literals 
from ..address import Provider as AddressProvider


class Provider(AddressProvider):
    city_prefixes = ('North', 'East', 'West', 'South', 'New', 'Lake', 'Port')
    city_suffixes = (
        'town', 'ton', 'land', 'ville', 'berg', 'burgh', 'borough', 'bury', 'view', 'port', 'mouth', 'stad', 'furt',
        'chester', 'mouth', 'fort', 'haven', 'side', 'shire')
    building_number_formats = ('#', '##', '###')
    street_suffixes = (
        'alley', 'avenue', 'branch', 'bridge', 'brook', 'brooks', 'burg', 'burgs', 'bypass', 'camp', 'canyon', 'cape',
        'causeway', 'center', 'centers', 'circle', 'circles', 'cliff', 'cliffs', 'club', 'common', 'corner', 'corners',
        'course', 'court', 'courts', 'cove', 'coves', 'creek', 'crescent', 'crest', 'crossing', 'crossroad', 'curve',
        'dale', 'dam', 'divide', 'drive', 'drive', 'drives', 'estate', 'estates', 'expressway', 'extension',
        'extensions',
        'fall', 'falls', 'ferry', 'field', 'fields', 'flat', 'flats', 'ford', 'fords', 'forest', 'forge', 'forges',
        'fork',
        'forks', 'fort', 'freeway', 'garden', 'gardens', 'gateway', 'glen', 'glens', 'green', 'greens', 'grove',
        'groves',
        'harbor', 'harbors', 'haven', 'heights', 'highway', 'hill', 'hills', 'hollow', 'inlet', 'inlet', 'island',
        'island',
        'islands', 'islands', 'isle', 'isle', 'junction', 'junctions', 'key', 'keys', 'knoll', 'knolls', 'lake',
        'lakes',
        'land', 'landing', 'lane', 'light', 'lights', 'loaf', 'lock', 'locks', 'locks', 'lodge', 'lodge', 'loop',
        'mall',
        'manor', 'manors', 'meadow', 'meadows', 'mews', 'mill', 'mills', 'mission', 'mission', 'motorway', 'mount',
        'mountain', 'mountain', 'mountains', 'mountains', 'neck', 'orchard', 'oval', 'overpass', 'park', 'parks',
        'parkway',
        'parkways', 'pass', 'passage', 'path', 'pike', 'pine', 'pines', 'place', 'plain', 'plains', 'plains', 'plaza',
        'plaza', 'point', 'points', 'port', 'port', 'ports', 'ports', 'prairie', 'prairie', 'radial', 'ramp', 'ranch',
        'rapid', 'rapids', 'rest', 'ridge', 'ridges', 'river', 'road', 'road', 'roads', 'roads', 'route', 'row', 'rue',
        'run', 'shoal', 'shoals', 'shore', 'shores', 'skyway', 'spring', 'springs', 'springs', 'spur', 'spurs',
        'square',
        'square', 'squares', 'squares', 'station', 'station', 'stravenue', 'stravenue', 'stream', 'stream', 'street',
        'street', 'streets', 'summit', 'summit', 'terrace', 'throughway', 'trace', 'track', 'trafficway', 'trail',
        'trail',
        'tunnel', 'tunnel', 'turnpike', 'turnpike', 'underpass', 'union', 'unions', 'valley', 'valleys', 'via',
        'viaduct',
        'view', 'views', 'village', 'village', 'villages', 'ville', 'vista', 'vista', 'walk', 'walks', 'wall', 'way',
        'ways', 'well', 'wells')

    postcode_formats = ('??#? #??', '?#? #??', '?# #??', '?## #??', '??# #??', '??## #??',)

    countries = (
        'Afghanistan', 'Albania', 'Algeria', 'American Samoa', 'Andorra', 'Angola', 'Anguilla',
        'Antarctica (the territory South of 60 deg S)', 'Antigua and Barbuda', 'Argentina', 'Armenia', 'Aruba',
        'Australia', 'Austria', 'Azerbaijan',
        'Bahamas', 'Bahrain', 'Bangladesh', 'Barbados', 'Belarus', 'Belgium', 'Belize', 'Benin', 'Bermuda', 'Bhutan',
        'Bolivia', 'Bosnia and Herzegovina', 'Botswana', 'Bouvet Island (Bouvetoya)', 'Brazil',
        'British Indian Ocean Territory (Chagos Archipelago)', 'British Virgin Islands', 'Brunei Darussalam',
        'Bulgaria', 'Burkina Faso', 'Burundi',
        'Cambodia', 'Cameroon', 'Canada', 'Cape Verde', 'Cayman Islands', 'Central African Republic', 'Chad', 'Chile',
        'China', 'Christmas Island', 'Cocos (Keeling) Islands', 'Colombia', 'Comoros', 'Congo', 'Congo', 'Cook Islands',
        'Costa Rica', 'Cote d\'Ivoire', 'Croatia', 'Cuba', 'Cyprus', 'Czech Republic',
        'Denmark', 'Djibouti', 'Dominica', 'Dominican Republic',
        'Ecuador', 'Egypt', 'El Salvador', 'Equatorial Guinea', 'Eritrea', 'Estonia', 'Ethiopia',
        'Faroe Islands', 'Falkland Islands (Malvinas)', 'Fiji', 'Finland', 'France', 'French Guiana',
        'French Polynesia', 'French Southern Territories',
        'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana', 'Gibraltar', 'Greece', 'Greenland', 'Grenada', 'Guadeloupe',
        'Guam', 'Guatemala', 'Guernsey', 'Guinea', 'Guinea-Bissau', 'Guyana',
        'Haiti', 'Heard Island and McDonald Islands', 'Holy See (Vatican City State)', 'Honduras', 'Hong Kong',
        'Hungary',
        'Iceland', 'India', 'Indonesia', 'Iran', 'Iraq', 'Ireland', 'Isle of Man', 'Israel', 'Italy',
        'Jamaica', 'Japan', 'Jersey', 'Jordan',
        'Kazakhstan', 'Kenya', 'Kiribati', 'Korea', 'Korea', 'Kuwait', 'Kyrgyz Republic',
        'Lao People\'s Democratic Republic', 'Latvia', 'Lebanon', 'Lesotho', 'Liberia', 'Libyan Arab Jamahiriya',
        'Liechtenstein', 'Lithuania', 'Luxembourg',
        'Macao', 'Macedonia', 'Madagascar', 'Malawi', 'Malaysia', 'Maldives', 'Mali', 'Malta', 'Marshall Islands',
        'Martinique', 'Mauritania', 'Mauritius', 'Mayotte', 'Mexico', 'Micronesia', 'Moldova', 'Monaco', 'Mongolia',
        'Montenegro', 'Montserrat', 'Morocco', 'Mozambique', 'Myanmar',
        'Namibia', 'Nauru', 'Nepal', 'Netherlands Antilles', 'Netherlands', 'New Caledonia', 'New Zealand', 'Nicaragua',
        'Niger', 'Nigeria', 'Niue', 'Norfolk Island', 'Northern Mariana Islands', 'Norway',
        'Oman',
        'Pakistan', 'Palau', 'Palestinian Territory', 'Panama', 'Papua New Guinea', 'Paraguay', 'Peru', 'Philippines',
        'Pitcairn Islands', 'Poland', 'Portugal', 'Puerto Rico',
        'Qatar',
        'Reunion', 'Romania', 'Russian Federation', 'Rwanda',
        'Saint Barthelemy', 'Saint Helena', 'Saint Kitts and Nevis', 'Saint Lucia', 'Saint Martin',
        'Saint Pierre and Miquelon', 'Saint Vincent and the Grenadines', 'Samoa', 'San Marino', 'Sao Tome and Principe',
        'Saudi Arabia', 'Senegal', 'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore', 'Slovakia (Slovak Republic)',
        'Slovenia', 'Solomon Islands', 'Somalia', 'South Africa', 'South Georgia and the South Sandwich Islands',
        'Spain', 'Sri Lanka', 'Sudan', 'Suriname', 'Svalbard & Jan Mayen Islands', 'Swaziland', 'Sweden', 'Switzerland',
        'Syrian Arab Republic',
        'Taiwan', 'Tajikistan', 'Tanzania', 'Thailand', 'Timor-Leste', 'Togo', 'Tokelau', 'Tonga',
        'Trinidad and Tobago', 'Tunisia', 'Turkey', 'Turkmenistan', 'Turks and Caicos Islands', 'Tuvalu',
        'Uganda', 'Ukraine', 'United Arab Emirates', 'United Kingdom', 'United States of America',
        'United States Minor Outlying Islands', 'United States Virgin Islands', 'Uruguay', 'Uzbekistan',
        'Vanuatu', 'Venezuela', 'Vietnam',
        'Wallis and Futuna', 'Western Sahara',
        'Yemen',
        'Zambia', 'Zimbabwe'
    )

    city_formats = (
        '{{city_prefix}} {{first_name}}{{city_suffix}}',
        '{{city_prefix}} {{first_name}}',
        '{{first_name}}{{city_suffix}}',
        '{{last_name}}{{city_suffix}}',
    )
    street_name_formats = (
        '{{first_name}} {{street_suffix}}',
        '{{last_name}} {{street_suffix}}'
    )
    street_address_formats = (
        '{{building_number}} {{street_name}}',
        '{{secondary_address}}\n{{street_name}}',
    )
    address_formats = (
        "{{street_address}}\n{{city}}\n{{postcode}}",
    )
    secondary_address_formats = ('Flat #', 'Flat ##', 'Flat ##?', 'Studio #', 'Studio ##', 'Studio ##?')

    @classmethod
    def city_prefix(cls):
        return cls.random_element(cls.city_prefixes)

    @classmethod
    def secondary_address(cls):
        return cls.bothify(cls.random_element(cls.secondary_address_formats))

########NEW FILE########
__FILENAME__ = phone_number
from __future__ import unicode_literals
from ..phone_number import Provider as PhoneNumberProvider


class Provider(PhoneNumberProvider):
    formats = (
        '+44(0)##########',
        '+44(0)#### ######',
        '+44(0)#########',
        '+44(0)#### #####',
        '0##########',
        '0#########',
        '0#### ######',
        '0#### #####',
        '(0####) ######',
        '(0####) #####',
    )

########NEW FILE########
__FILENAME__ = address
from __future__ import unicode_literals
from ..address import Provider as AddressProvider


class Provider(AddressProvider):
    city_prefixes = ('North', 'East', 'West', 'South', 'New', 'Lake', 'Port')
    city_suffixes = (
        'town', 'ton', 'land', 'ville', 'berg', 'burgh', 'borough', 'bury', 'view', 'port', 'mouth', 'stad', 'furt',
        'chester', 'mouth', 'fort', 'haven', 'side', 'shire')
    building_number_formats = ('#####', '####', '###')
    street_suffixes = (
        'Alley', 'Avenue', 'Branch', 'Bridge', 'Brook', 'Brooks', 'Burg', 'Burgs', 'Bypass', 'Camp', 'Canyon', 'Cape',
        'Causeway', 'Center', 'Centers', 'Circle', 'Circles', 'Cliff', 'Cliffs', 'Club', 'Common', 'Corner', 'Corners',
        'Course', 'Court', 'Courts', 'Cove', 'Coves', 'Creek', 'Crescent', 'Crest', 'Crossing', 'Crossroad', 'Curve',
        'Dale', 'Dam', 'Divide', 'Drive', 'Drive', 'Drives', 'Estate', 'Estates', 'Expressway', 'Extension',
        'Extensions',
        'Fall', 'Falls', 'Ferry', 'Field', 'Fields', 'Flat', 'Flats', 'Ford', 'Fords', 'Forest', 'Forge', 'Forges',
        'Fork',
        'Forks', 'Fort', 'Freeway', 'Garden', 'Gardens', 'Gateway', 'Glen', 'Glens', 'Green', 'Greens', 'Grove',
        'Groves',
        'Harbor', 'Harbors', 'Haven', 'Heights', 'Highway', 'Hill', 'Hills', 'Hollow', 'Inlet', 'Inlet', 'Island',
        'Island',
        'Islands', 'Islands', 'Isle', 'Isle', 'Junction', 'Junctions', 'Key', 'Keys', 'Knoll', 'Knolls', 'Lake',
        'Lakes',
        'Land', 'Landing', 'Lane', 'Light', 'Lights', 'Loaf', 'Lock', 'Locks', 'Locks', 'Lodge', 'Lodge', 'Loop',
        'Mall',
        'Manor', 'Manors', 'Meadow', 'Meadows', 'Mews', 'Mill', 'Mills', 'Mission', 'Mission', 'Motorway', 'Mount',
        'Mountain', 'Mountain', 'Mountains', 'Mountains', 'Neck', 'Orchard', 'Oval', 'Overpass', 'Park', 'Parks',
        'Parkway',
        'Parkways', 'Pass', 'Passage', 'Path', 'Pike', 'Pine', 'Pines', 'Place', 'Plain', 'Plains', 'Plains', 'Plaza',
        'Plaza', 'Point', 'Points', 'Port', 'Port', 'Ports', 'Ports', 'Prairie', 'Prairie', 'Radial', 'Ramp', 'Ranch',
        'Rapid', 'Rapids', 'Rest', 'Ridge', 'Ridges', 'River', 'Road', 'Road', 'Roads', 'Roads', 'Route', 'Row', 'Rue',
        'Run', 'Shoal', 'Shoals', 'Shore', 'Shores', 'Skyway', 'Spring', 'Springs', 'Springs', 'Spur', 'Spurs',
        'Square',
        'Square', 'Squares', 'Squares', 'Station', 'Station', 'Stravenue', 'Stravenue', 'Stream', 'Stream', 'Street',
        'Street', 'Streets', 'Summit', 'Summit', 'Terrace', 'Throughway', 'Trace', 'Track', 'Trafficway', 'Trail',
        'Trail',
        'Tunnel', 'Tunnel', 'Turnpike', 'Turnpike', 'Underpass', 'Union', 'Unions', 'Valley', 'Valleys', 'Via',
        'Viaduct',
        'View', 'Views', 'Village', 'Village', 'Villages', 'Ville', 'Vista', 'Vista', 'Walk', 'Walks', 'Wall', 'Way',
        'Ways', 'Well', 'Wells')
    postcode_formats = ('#####', '#####-####')
    states = (
        'Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida',
        'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine',
        'Maryland',
        'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada',
        'NewHampshire', 'NewJersey', 'NewMexico', 'NewYork', 'NorthCarolina', 'NorthDakota', 'Ohio', 'Oklahoma',
        'Oregon',
        'Pennsylvania', 'RhodeIsland', 'SouthCarolina', 'SouthDakota', 'Tennessee', 'Texas', 'Utah', 'Vermont',
        'Virginia',
        'Washington', 'WestVirginia', 'Wisconsin', 'Wyoming' )
    states_abbr = (
        'AL', 'AK', 'AS', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'DC', 'FM', 'FL', 'GA', 'GU', 'HI', 'ID', 'IL', 'IN',
        'IA',
        'KS', 'KY', 'LA', 'ME', 'MH', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY',
        'NC',
        'ND', 'MP', 'OH', 'OK', 'OR', 'PW', 'PA', 'PR', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VI', 'VA', 'WA',
        'WV',
        'WI', 'WY', 'AE', 'AA', 'AP' )
    countries = (
        'Afghanistan', 'Albania', 'Algeria', 'American Samoa', 'Andorra', 'Angola', 'Anguilla',
        'Antarctica (the territory South of 60 deg S)', 'Antigua and Barbuda', 'Argentina', 'Armenia', 'Aruba',
        'Australia', 'Austria', 'Azerbaijan',
        'Bahamas', 'Bahrain', 'Bangladesh', 'Barbados', 'Belarus', 'Belgium', 'Belize', 'Benin', 'Bermuda', 'Bhutan',
        'Bolivia', 'Bosnia and Herzegovina', 'Botswana', 'Bouvet Island (Bouvetoya)', 'Brazil',
        'British Indian Ocean Territory (Chagos Archipelago)', 'British Virgin Islands', 'Brunei Darussalam',
        'Bulgaria', 'Burkina Faso', 'Burundi',
        'Cambodia', 'Cameroon', 'Canada', 'Cape Verde', 'Cayman Islands', 'Central African Republic', 'Chad', 'Chile',
        'China', 'Christmas Island', 'Cocos (Keeling) Islands', 'Colombia', 'Comoros', 'Congo', 'Congo', 'Cook Islands',
        'Costa Rica', 'Cote d\'Ivoire', 'Croatia', 'Cuba', 'Cyprus', 'Czech Republic',
        'Denmark', 'Djibouti', 'Dominica', 'Dominican Republic',
        'Ecuador', 'Egypt', 'El Salvador', 'Equatorial Guinea', 'Eritrea', 'Estonia', 'Ethiopia',
        'Faroe Islands', 'Falkland Islands (Malvinas)', 'Fiji', 'Finland', 'France', 'French Guiana',
        'French Polynesia', 'French Southern Territories',
        'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana', 'Gibraltar', 'Greece', 'Greenland', 'Grenada', 'Guadeloupe',
        'Guam', 'Guatemala', 'Guernsey', 'Guinea', 'Guinea-Bissau', 'Guyana',
        'Haiti', 'Heard Island and McDonald Islands', 'Holy See (Vatican City State)', 'Honduras', 'Hong Kong',
        'Hungary',
        'Iceland', 'India', 'Indonesia', 'Iran', 'Iraq', 'Ireland', 'Isle of Man', 'Israel', 'Italy',
        'Jamaica', 'Japan', 'Jersey', 'Jordan',
        'Kazakhstan', 'Kenya', 'Kiribati', 'Korea', 'Korea', 'Kuwait', 'Kyrgyz Republic',
        'Lao People\'s Democratic Republic', 'Latvia', 'Lebanon', 'Lesotho', 'Liberia', 'Libyan Arab Jamahiriya',
        'Liechtenstein', 'Lithuania', 'Luxembourg',
        'Macao', 'Macedonia', 'Madagascar', 'Malawi', 'Malaysia', 'Maldives', 'Mali', 'Malta', 'Marshall Islands',
        'Martinique', 'Mauritania', 'Mauritius', 'Mayotte', 'Mexico', 'Micronesia', 'Moldova', 'Monaco', 'Mongolia',
        'Montenegro', 'Montserrat', 'Morocco', 'Mozambique', 'Myanmar',
        'Namibia', 'Nauru', 'Nepal', 'Netherlands Antilles', 'Netherlands', 'New Caledonia', 'New Zealand', 'Nicaragua',
        'Niger', 'Nigeria', 'Niue', 'Norfolk Island', 'Northern Mariana Islands', 'Norway',
        'Oman',
        'Pakistan', 'Palau', 'Palestinian Territory', 'Panama', 'Papua New Guinea', 'Paraguay', 'Peru', 'Philippines',
        'Pitcairn Islands', 'Poland', 'Portugal', 'Puerto Rico',
        'Qatar',
        'Reunion', 'Romania', 'Russian Federation', 'Rwanda',
        'Saint Barthelemy', 'Saint Helena', 'Saint Kitts and Nevis', 'Saint Lucia', 'Saint Martin',
        'Saint Pierre and Miquelon', 'Saint Vincent and the Grenadines', 'Samoa', 'San Marino', 'Sao Tome and Principe',
        'Saudi Arabia', 'Senegal', 'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore', 'Slovakia (Slovak Republic)',
        'Slovenia', 'Solomon Islands', 'Somalia', 'South Africa', 'South Georgia and the South Sandwich Islands',
        'Spain', 'Sri Lanka', 'Sudan', 'Suriname', 'Svalbard & Jan Mayen Islands', 'Swaziland', 'Sweden', 'Switzerland',
        'Syrian Arab Republic',
        'Taiwan', 'Tajikistan', 'Tanzania', 'Thailand', 'Timor-Leste', 'Togo', 'Tokelau', 'Tonga',
        'Trinidad and Tobago', 'Tunisia', 'Turkey', 'Turkmenistan', 'Turks and Caicos Islands', 'Tuvalu',
        'Uganda', 'Ukraine', 'United Arab Emirates', 'United Kingdom', 'United States of America',
        'United States Minor Outlying Islands', 'United States Virgin Islands', 'Uruguay', 'Uzbekistan',
        'Vanuatu', 'Venezuela', 'Vietnam',
        'Wallis and Futuna', 'Western Sahara',
        'Yemen',
        'Zambia', 'Zimbabwe'
    )

    city_formats = (
        '{{city_prefix}} {{first_name}}{{city_suffix}}',
        '{{city_prefix}} {{first_name}}',
        '{{first_name}}{{city_suffix}}',
        '{{last_name}}{{city_suffix}}',
    )
    street_name_formats = (
        '{{first_name}} {{street_suffix}}',
        '{{last_name}} {{street_suffix}}'
    )
    street_address_formats = (
        '{{building_number}} {{street_name}}',
        '{{building_number}} {{street_name}} {{secondary_address}}',
    )
    address_formats = (
        "{{street_address}}\n{{city}}, {{state_abbr}} {{postcode}}",
    )
    secondary_address_formats = ('Apt. ###', 'Suite ###')

    @classmethod
    def city_prefix(cls):
        return cls.random_element(cls.city_prefixes)

    @classmethod
    def secondary_address(cls):
        return cls.numerify(cls.random_element(cls.secondary_address_formats))

    @classmethod
    def state(cls):
        return cls.random_element(cls.states)

    @classmethod
    def state_abbr(cls):
        return cls.random_element(cls.states_abbr)

########NEW FILE########
__FILENAME__ = company
from __future__ import unicode_literals
from ..company import Provider as CompanyProvider


class Provider(CompanyProvider):
    formats = (
        '{{last_name}} {{company_suffix}}',
        '{{last_name}}-{{last_name}}',
        '{{last_name}}, {{last_name}} and {{last_name}}'
    )

    catch_phrase_words = (
        (
            'Adaptive', 'Advanced', 'Ameliorated', 'Assimilated', 'Automated', 'Balanced', 'Business-focused',
            'Centralized', 'Cloned', 'Compatible', 'Configurable', 'Cross-group', 'Cross-platform', 'Customer-focused',
            'Customizable', 'Decentralized', 'De-engineered', 'Devolved', 'Digitized', 'Distributed', 'Diverse',
            'Down-sized', 'Enhanced', 'Enterprise-wide', 'Ergonomic', 'Exclusive', 'Expanded', 'Extended', 'Facetoface',
            'Focused', 'Front-line', 'Fully-configurable', 'Function-based', 'Fundamental', 'Future-proofed',
            'Grass-roots', 'Horizontal', 'Implemented', 'Innovative', 'Integrated', 'Intuitive', 'Inverse', 'Managed',
            'Mandatory', 'Monitored', 'Multi-channelled', 'Multi-lateral', 'Multi-layered', 'Multi-tiered', 'Networked',
            'Object-based', 'Open-architected', 'Open-source', 'Operative', 'Optimized', 'Optional', 'Organic',
            'Organized', 'Persevering', 'Persistent', 'Phased', 'Polarised', 'Pre-emptive', 'Proactive',
            'Profit-focused', 'Profound', 'Programmable', 'Progressive', 'Public-key', 'Quality-focused', 'Reactive',
            'Realigned', 'Re-contextualized', 'Re-engineered', 'Reduced', 'Reverse-engineered', 'Right-sized', 'Robust',
            'Seamless', 'Secured', 'Self-enabling', 'Sharable', 'Stand-alone', 'Streamlined', 'Switchable',
            'Synchronised', 'Synergistic', 'Synergized', 'Team-oriented', 'Total', 'Triple-buffered', 'Universal',
            'Up-sized', 'Upgradable', 'User-centric', 'User-friendly', 'Versatile', 'Virtual', 'Visionary',
            'Vision-oriented'
        ),
        (
            '24hour', '24/7', '3rdgeneration', '4thgeneration', '5thgeneration', '6thgeneration', 'actuating',
            'analyzing', 'assymetric', 'asynchronous', 'attitude-oriented', 'background', 'bandwidth-monitored',
            'bi-directional', 'bifurcated', 'bottom-line', 'clear-thinking', 'client-driven', 'client-server',
            'coherent', 'cohesive', 'composite', 'context-sensitive', 'contextually-based', 'content-based',
            'dedicated', 'demand-driven', 'didactic', 'directional', 'discrete', 'disintermediate', 'dynamic',
            'eco-centric', 'empowering', 'encompassing', 'even-keeled', 'executive', 'explicit', 'exuding',
            'fault-tolerant', 'foreground', 'fresh-thinking', 'full-range', 'global', 'grid-enabled', 'heuristic',
            'high-level', 'holistic', 'homogeneous', 'human-resource', 'hybrid', 'impactful', 'incremental',
            'intangible', 'interactive', 'intermediate', 'leadingedge', 'local', 'logistical', 'maximized',
            'methodical', 'mission-critical', 'mobile', 'modular', 'motivating', 'multimedia', 'multi-state',
            'multi-tasking', 'national', 'needs-based', 'neutral', 'nextgeneration', 'non-volatile', 'object-oriented',
            'optimal', 'optimizing', 'radical', 'real-time', 'reciprocal', 'regional', 'responsive', 'scalable',
            'secondary', 'solution-oriented', 'stable', 'static', 'systematic', 'systemic', 'system-worthy', 'tangible',
            'tertiary', 'transitional', 'uniform', 'upward-trending', 'user-facing', 'value-added', 'web-enabled',
            'well-modulated', 'zeroadministration', 'zerodefect', 'zerotolerance'
        ),
        (
            'ability', 'access', 'adapter', 'algorithm', 'alliance', 'analyzer', 'application', 'approach',
            'architecture', 'archive', 'artificialintelligence', 'array', 'attitude', 'benchmark',
            'budgetarymanagement', 'capability', 'capacity', 'challenge', 'circuit', 'collaboration', 'complexity',
            'concept', 'conglomeration', 'contingency', 'core', 'customerloyalty', 'database', 'data-warehouse',
            'definition', 'emulation', 'encoding', 'encryption', 'extranet', 'firmware', 'flexibility', 'focusgroup',
            'forecast', 'frame', 'framework', 'function', 'functionalities', 'GraphicInterface', 'groupware',
            'GraphicalUserInterface', 'hardware', 'help-desk', 'hierarchy', 'hub', 'implementation', 'info-mediaries',
            'infrastructure', 'initiative', 'installation', 'instructionset', 'interface', 'internetsolution',
            'intranet', 'knowledgeuser', 'knowledgebase', 'localareanetwork', 'leverage', 'matrices', 'matrix',
            'methodology', 'middleware', 'migration', 'model', 'moderator', 'monitoring', 'moratorium', 'neural-net',
            'openarchitecture', 'opensystem', 'orchestration', 'paradigm', 'parallelism', 'policy', 'portal',
            'pricingstructure', 'processimprovement', 'product', 'productivity', 'project', 'projection', 'protocol',
            'securedline', 'service-desk', 'software', 'solution', 'standardization', 'strategy', 'structure',
            'success', 'superstructure', 'support', 'synergy', 'systemengine', 'task-force', 'throughput', 'time-frame',
            'toolset', 'utilisation', 'website', 'workforce'
        )
    )

    bsWords = (
        (
            'implement', 'utilize', 'integrate', 'streamline', 'optimize', 'evolve', 'transform', 'embrace', 'enable',
            'orchestrate', 'leverage', 'reinvent', 'aggregate', 'architect', 'enhance', 'incentivize', 'morph',
            'empower', 'envisioneer', 'monetize', 'harness', 'facilitate', 'seize', 'disintermediate', 'synergize',
            'strategize', 'deploy', 'brand', 'grow', 'target', 'syndicate', 'synthesize', 'deliver', 'mesh', 'incubate',
            'engage', 'maximize', 'benchmark', 'expedite', 'reintermediate', 'whiteboard', 'visualize', 'repurpose',
            'innovate', 'scale', 'unleash', 'drive', 'extend', 'engineer', 'revolutionize', 'generate', 'exploit',
            'transition', 'e-enable', 'iterate', 'cultivate', 'matrix', 'productize', 'redefine', 'recontextualize'
        ),
        (
            'clicks-and-mortar', 'value-added', 'vertical', 'proactive', 'robust', 'revolutionary', 'scalable',
            'leading-edge', 'innovative', 'intuitive', 'strategic', 'e-business', 'mission-critical', 'sticky',
            'one-to-one', '24/7', 'end-to-end', 'global', 'B2B', 'B2C', 'granular', 'frictionless', 'virtual', 'viral',
            'dynamic', '24/365', 'best-of-breed', 'killer', 'magnetic', 'bleeding-edge', 'web-enabled', 'interactive',
            'dot-com', 'sexy', 'back-end', 'real-time', 'efficient', 'front-end', 'distributed', 'seamless',
            'extensible', 'turn-key', 'world-class', 'open-source', 'cross-platform', 'cross-media', 'synergistic',
            'bricks-and-clicks', 'out-of-the-box', 'enterprise', 'integrated', 'impactful', 'wireless', 'transparent',
            'next-generation', 'cutting-edge', 'user-centric', 'visionary', 'customized', 'ubiquitous', 'plug-and-play',
            'collaborative', 'compelling', 'holistic', 'rich'
        ),
        (
            'synergies', 'web-readiness', 'paradigms', 'markets', 'partnerships', 'infrastructures', 'platforms',
            'initiatives', 'channels', 'eyeballs', 'communities', 'ROI', 'solutions', 'e-tailers', 'e-services',
            'action-items', 'portals', 'niches', 'technologies', 'content', 'vortals', 'supply-chains', 'convergence',
            'relationships', 'architectures', 'interfaces', 'e-markets', 'e-commerce', 'systems', 'bandwidth',
            'infomediaries', 'models', 'mindshare', 'deliverables', 'users', 'schemas', 'networks', 'applications',
            'metrics', 'e-business', 'functionalities', 'experiences', 'webservices', 'methodologies'
        )
    )

    company_suffixes = ('Inc', 'and Sons', 'LLC', 'Group', 'PLC', 'Ltd')

    def catch_phrase(self):
        """
        :example 'Robust full-range hub'
        """
        result = []
        for word_list in self.catch_phrase_words:
            result.append(self.random_element(word_list))

        return " ".join(result)

    def bs(self):
        """
        :example 'integrate extensible convergence'
        """
        result = []
        for word_list in self.bsWords:
            result.append(self.random_element(word_list))

        return " ".join(result)

########NEW FILE########
__FILENAME__ = person
from __future__ import unicode_literals
from ..person import Provider as PersonProvider


class Provider(PersonProvider):
    formats_female = (
        '{{first_name_female}} {{last_name}}',
        '{{first_name_female}} {{last_name}}',
        '{{first_name_female}} {{last_name}}',
        '{{first_name_female}} {{last_name}}',
        '{{first_name_female}} {{last_name}}',
        '{{prefix_female}} {{first_name_female}} {{last_name}}',
        '{{first_name_female}} {{last_name}} {{suffix_female}}',
        '{{prefix_female}} {{first_name_female}} {{last_name}} {{suffix_female}}'
    )

    formats_male = (
        '{{first_name_male}} {{last_name}}',
        '{{first_name_male}} {{last_name}}',
        '{{first_name_male}} {{last_name}}',
        '{{first_name_male}} {{last_name}}',
        '{{first_name_male}} {{last_name}}',
        '{{prefix_male}} {{first_name_male}} {{last_name}}',
        '{{first_name_male}} {{last_name}} {{suffix_male}}',
        '{{prefix_male}} {{first_name_male}} {{last_name}} {{suffix_male}}'
    )

    formats = formats_male + formats_female

    first_names_female = ('Aaliyah', 'Abagail', 'Abbey', 'Abbie', 'Abbigail',
        'Abby', 'Abigail','Abigale', 'Abigayle', 'Abril', 'Achsah', 'Ada',
        'Adah', 'Adaline', 'Adalyn','Adalynn', 'Adamaris', 'Adda', 'Addie',
        'Addison', 'Addisyn', 'Addyson', 'Adel','Adela', 'Adelaide', 'Adele',
        'Adelia', 'Adelina', 'Adeline', 'Adell', 'Adella','Adelle', 'Adelyn',
        'Adelynn', 'Adilene', 'Adina', 'Adison', 'Adline', 'Adria','Adriana',
        'Adriane', 'Adrianna', 'Adrianne', 'Adriene', 'Adrienne', 'Adyson',
        'Affie', 'Afton', 'Agatha', 'Aggie', 'Agnes', 'Agness', 'Agusta',
        'Aida','Aileen', 'Ailene', 'Aili', 'Aimee', 'Ainsley', 'Aisha',
        'Aiyana', 'Aiyanna','Aja', 'Akeelah', 'Akira', 'Ala', 'Alabama',
        'Alaina', 'Alana', 'Alani', 'Alanna', 'Alannah', 'Alaya', 'Alayna',
        'Alba', 'Alberta', 'Albertha', 'Albertina', 'Albertine', 'Albina',
        'Alcie', 'Alda', 'Aldona', 'Aleah', 'Alease', 'Alecia', 'Aleen',
        'Aleena', 'Alejandra', 'Alena', 'Alene', 'Alesha', 'Alesia',
        'Alessandra', 'Aleta', 'Aletha', 'Alethea', 'Alex', 'Alexa',
        'Alexandr', 'Alexandra', 'Alexandrea', 'Alexandria', 'Alexia',
        'Alexina', 'Alexis', 'Alexus', 'Alexys', 'Alfreda', 'Alia', 'Aliana',
        'Alice', 'Alicia', 'Alida', 'Alina', 'Aline', 'Alisa', 'Alisha',
        'Alison', 'Alissa', 'Alisson', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',
        'Alize', 'Alla', 'Allean', 'Alleen', 'Allena', 'Allene', 'Allie',
        'Alline', 'Allison', 'Allisson', 'Ally', 'Allyson', 'Allyssa', 'Alma',
        'Almeda', 'Almedia', 'Almeta', 'Almina', 'Almira', 'Almyra', 'Aloma',
        'Alondra', 'Alpha', 'Alphonsine', 'Alta', 'Altha', 'Althea', 'Altie',
        'Alvena', 'Alvera', 'Alverda', 'Alverta', 'Alvina', 'Alvira',
        'Alwilda', 'Alwina', 'Alwine', 'Alyce', 'Alycia', 'Alys', 'Alysa',
        'Alyse', 'Alysha', 'Alysia', 'Alyson', 'Alyssa', 'Alyssia', 'Alyvia',
        'Alzina', 'Ama', 'Amalia', 'Amalie', 'Amanda', 'Amani', 'Amara',
        'Amari', 'Amaris', 'Amaya', 'Amber', 'Amberly', 'Amelia', 'Amelie',
        'America', 'Amey', 'Ami', 'Amiah', 'Amie', 'Amina', 'Amira', 'Amirah',
        'Amiya', 'Amiyah', 'Amma', 'Ammie', 'Amparo', 'Amy', 'Amya', 'Ana',
        'Anabel', 'Anabella', 'Anabelle', 'Anahi', 'Anais', 'Analia',
        'Anastacia', 'Anastasia', 'Anaya', 'Andra', 'Andrea', 'Andria',
        'Angel', 'Angela', 'Angele', 'Angeles', 'Angelia', 'Angelic',
        'Angelica', 'Angelina', 'Angeline', 'Angelique', 'Angelita', 'Angella',
        'Angie', 'Anice', 'Anie', 'Anika', 'Anissa', 'Anita', 'Anitra',
        'Aniya', 'Aniyah', 'Anjali', 'Anjanette', 'Anjelica', 'Ann', 'Anna',
        'Annabel', 'Annabell', 'Annabella', 'Annabelle', 'Annalise', 'Annamae',
        'Annamarie', 'Anne', 'Anneliese', 'Annemarie', 'Anner', 'Annetta',
        'Annette', 'Annice', 'Annie', 'Annika', 'Annis', 'Annmarie', 'Anona',
        'Ansley', 'Antionette', 'Antoinette', 'Antonetta', 'Antonette',
        'Antonia', 'Antonina', 'Anya', 'April', 'Ara', 'Arabella', 'Araceli',
        'Aracely', 'Arah', 'Araminta', 'Ardath', 'Ardelia', 'Ardell',
        'Ardella', 'Ardelle', 'Arden', 'Ardeth', 'Ardis', 'Ardith', 'Ardyce',
        'Areli', 'Arely', 'Aretha', 'Argie', 'Aria', 'Ariana', 'Ariane',
        'Arianna', 'Arie', 'Ariel', 'Ariella', 'Arielle', 'Arietta', 'Arizona',
        'Arkie', 'Arla', 'Arleen', 'Arlena', 'Arlene', 'Arleth', 'Arletta',
        'Arley', 'Arlie', 'Arline', 'Arly', 'Arlyne', 'Armani', 'Armida',
        'Arminda', 'Arminta', 'Arnetta', 'Arra', 'Arrie', 'Arta', 'Artelia',
        'Arvilla', 'Aryana', 'Aryanna', 'Asha', 'Ashanti', 'Ashely', 'Ashlea',
        'Ashlee', 'Ashleigh', 'Ashley', 'Ashli', 'Ashlie', 'Ashly', 'Ashlyn',
        'Ashlynn', 'Ashtyn', 'Asia', 'Ason', 'Aspen', 'Assunta', 'Astrid',
        'Atha', 'Athena', 'Attie', 'Aubree', 'Aubrey', 'Aubrie', 'Audie',
        'Audra', 'Audrey', 'Audriana', 'Audrianna', 'Audrina', 'Audry',
        'Augusta', 'Augustina', 'Aura', 'Aurelia', 'Aurilla', 'Aurora',
        'Aurore', 'Autumn', 'Ava', 'Avah', 'Averi', 'Averie', 'Avie', 'Avis',
        'Ayana', 'Ayanna', 'Ayesha', 'Ayla', 'Ayleen', 'Aylin', 'Azalee',
        'Azaria', 'Azariah', 'Azul', 'Azzie', 'Babette', 'Baby', 'Bailee',
        'Bailey', 'Bama', 'Bambi', 'Barb', 'Barbara', 'Barbie', 'Barbra',
        'Baylee', 'Baylie', 'Bea', 'Beadie', 'Beatrice', 'Beatrix', 'Beatriz',
        'Beaulah', 'Bebe', 'Beckie', 'Becky', 'Beda', 'Bee', 'Belen', 'Belia',
        'Belinda', 'Bell', 'Bella', 'Belle', 'Belva', 'Bena', 'Benita',
        'Bennie', 'Berdie', 'Berenice', 'Bernadette', 'Bernadine',
        'Bernardine', 'Berneice', 'Bernetta', 'Bernice', 'Berniece', 'Bernita',
        'Berta', 'Bertha', 'Bertie', 'Bertina', 'Beryl', 'Bess', 'Besse',
        'Bessie', 'Beth', 'Betha', 'Bethann', 'Bethany', 'Bethel', 'Bethzy',
        'Betsey', 'Betsy', 'Bette', 'Bettie', 'Bettina', 'Betty', 'Bettye',
        'Bettyjane', 'Bettylou', 'Beula', 'Beulah', 'Bev', 'Beverlee',
        'Beverley', 'Beverly', 'Beyonce', 'Bianca', 'Biddie', 'Billie',
        'Billy', 'Billye', 'Bina', 'Bird', 'Birdella', 'Birdie', 'Birtha',
        'Birtie', 'Blair', 'Blake', 'Blanca', 'Blanch', 'Blanche', 'Blanchie',
        'Blossom', 'Bobbi', 'Bobbie', 'Bobby', 'Bobbye', 'Bonita', 'Bonnie',
        'Bonny', 'Braelyn', 'Brande', 'Brandee', 'Brandi', 'Brandie',
        'Brandon', 'Brandy', 'Brea', 'Breana', 'Breann', 'Breanna', 'Breanne',
        'Bree', 'Brenda', 'Brenna', 'Breonna', 'Brett', 'Bria', 'Briana',
        'Brianda', 'Brianna', 'Brianne', 'Bridget', 'Bridgett', 'Bridgette',
        'Brielle', 'Brigette', 'Brigid', 'Brigitte', 'Briley', 'Brinda',
        'Brinley', 'Brionna', 'Brisa', 'Bristol', 'Britany', 'Britney',
        'Britni', 'Britny', 'Britt', 'Britta', 'Brittaney', 'Brittani',
        'Brittanie', 'Brittany', 'Brittnay', 'Brittnee', 'Brittney', 'Brittni',
        'Brittnie', 'Brittny', 'Brook', 'Brooke', 'Brooklyn', 'Brooklynn',
        'Bryana', 'Bryanna', 'Brylee', 'Bryn', 'Brynlee', 'Brynn', 'Buelah',
        'Buena', 'Buffy', 'Bula', 'Bulah', 'Buna', 'Burnice', 'Byrd', 'Byrdie',
        'Caddie', 'Cadence', 'Cailyn', 'Caitlin', 'Caitlyn', 'Caitlynn',
        'Caldonia', 'Caleigh', 'Cali', 'Calista', 'Calla', 'Calleigh',
        'Callie', 'Cambria', 'Cameron', 'Cami', 'Camila', 'Camilla', 'Camille',
        'Camisha', 'Cammie', 'Campbell', 'Camryn', 'Candace', 'Candi',
        'Candice', 'Candida', 'Candis', 'Candy', 'Candyce', 'Cannie',
        'Capitola', 'Cappie', 'Caprice', 'Cara', 'Caren', 'Carey', 'Cari',
        'Carie', 'Carin', 'Carina', 'Carisa', 'Carissa', 'Carla', 'Carlee',
        'Carleen', 'Carleigh', 'Carlene', 'Carley', 'Carli', 'Carlie',
        'Carlota', 'Carlotta', 'Carly', 'Carlyn', 'Carma', 'Carmel', 'Carmela',
        'Carmelita', 'Carmella', 'Carmen', 'Caro', 'Carol', 'Carolann',
        'Carole', 'Carolee', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne',
        'Carolynn', 'Caron', 'Carra', 'Carri', 'Carrie', 'Carrol', 'Carroll',
        'Carry', 'Carson', 'Cary', 'Caryl', 'Caryn', 'Casandra', 'Casey',
        'Casie', 'Cassandra', 'Cassidy', 'Cassie', 'Cassondra', 'Catalina',
        'Catharine', 'Catherine', 'Cathern', 'Cathey', 'Cathi', 'Cathie',
        'Cathleen', 'Cathrine', 'Cathryn', 'Cathy', 'Catina', 'Catrina',
        'Caydence', 'Cayla', 'Caylee', 'Cecelia', 'Cecile', 'Cecilia',
        'Cecily', 'Ceil', 'Celena', 'Celesta', 'Celeste', 'Celestia',
        'Celestine', 'Celia', 'Celie', 'Celina', 'Celine', 'Cena', 'Ceola',
        'Chaka', 'Chana', 'Chanda', 'Chandler', 'Chandra', 'Chanel',
        'Chanelle', 'Chaney', 'Chanie', 'Channie', 'Channing', 'Chantal',
        'Chante', 'Chantel', 'Chantelle', 'Charissa', 'Charisse', 'Charity',
        'Charla', 'Charlee', 'Charleen', 'Charlene', 'Charley', 'Charlie',
        'Charline', 'Charlize', 'Charlotta', 'Charlotte', 'Charlottie',
        'Charlsie', 'Charmaine', 'Charolette', 'Chase', 'Chasity', 'Chastity',
        'Chaya', 'Chelsea', 'Chelsey', 'Chelsi', 'Chelsie', 'Chelsy', 'Cher',
        'Cherelle', 'Cheri', 'Cherie', 'Cherilyn', 'Cherise', 'Cherish',
        'Cherrelle', 'Cherri', 'Cherrie', 'Cherry', 'Cherryl', 'Cheryl',
        'Cheryle', 'Cheryll', 'Chessie', 'Chestina', 'Cheyanne', 'Cheyenne',
        'Chimere', 'China', 'Chiquita', 'Chloe', 'Chloie', 'Chris', 'Chrissie',
        'Chrissy', 'Christa', 'Christal', 'Christeen', 'Christel', 'Christen',
        'Christena', 'Christene', 'Christi', 'Christian', 'Christiana',
        'Christie', 'Christin', 'Christina', 'Christine', 'Christy',
        'Chrystal', 'Chyna', 'Chynna', 'Ciara', 'Ciarra', 'Cicely', 'Cielo',
        'Ciera', 'Cierra', 'Ciji', 'Cilla', 'Cinda', 'Cindi', 'Cindy',
        'Cinnamon', 'Cinthia', 'Citlali', 'Citlalli', 'Clair', 'Claire',
        'Clara', 'Clarabelle', 'Clare', 'Claribel', 'Clarice', 'Clarinda',
        'Clarine', 'Clarisa', 'Clarissa', 'Classie', 'Claudette', 'Claudia',
        'Claudie', 'Claudine', 'Cleda', 'Clella', 'Clem', 'Clemence',
        'Clementina', 'Clementine', 'Clemie', 'Clemma', 'Clemmie', 'Cleo',
        'Cleola', 'Cleone', 'Cleora', 'Cleta', 'Cleva', 'Clevie', 'Cliffie',
        'Cloe', 'Clora', 'Clotilda', 'Clotilde', 'Clyda', 'Clydie', 'Clytie',
        'Coleen', 'Coletta', 'Colette', 'Colleen', 'Collette', 'Columbia',
        'Concepcion', 'Concetta', 'Concha', 'Connie', 'Constance', 'Consuela',
        'Consuelo', 'Contina', 'Cora', 'Coraima', 'Coral', 'Coralie', 'Corda',
        'Cordelia', 'Cordella', 'Cordia', 'Cordie', 'Corean', 'Corene',
        'Coretta', 'Corey', 'Cori', 'Corie', 'Corina', 'Corine', 'Corinna',
        'Corinne', 'Corliss', 'Cornelia', 'Cornie', 'Corrie', 'Corrina',
        'Corrine', 'Cortney', 'Cory', 'Courtney', 'Creola', 'Cressie', 'Crete',
        'Crissie', 'Crissy', 'Crista', 'Cristal', 'Cristen', 'Cristi',
        'Cristin', 'Cristina', 'Cristine', 'Cristy', 'Cruz', 'Crysta',
        'Crystal', 'Cuba', 'Cydney', 'Cyndi', 'Cyntha', 'Cynthia', 'Dafne',
        'Dagmar', 'Dagny', 'Dahlia', 'Daija', 'Daijah', 'Daisey', 'Daisha',
        'Daisie', 'Daisy', 'Daisye', 'Daja', 'Dakota', 'Dale', 'Dalia',
        'Dallas', 'Damaris', 'Dana', 'Danae', 'Daneen', 'Danelle', 'Danette',
        'Dani', 'Dania', 'Danica', 'Daniela', 'Daniele', 'Daniella',
        'Danielle', 'Danika', 'Danita', 'Danna', 'Dannie', 'Dannielle',
        'Danyel', 'Danyell', 'Danyelle', 'Daphne', 'Dara', 'Darby', 'Darci',
        'Darcie', 'Darcy', 'Daria', 'Darian', 'Dariana', 'Darla', 'Darleen',
        'Darlene', 'Darline', 'Darlyne', 'Dasia', 'Davina', 'Dawn', 'Dawna',
        'Dawne', 'Dayami', 'Dayana', 'Dayanara', 'Dayle', 'Dayna', 'Dayse',
        'Deana', 'Deandra', 'Deann', 'Deanna', 'Deanne', 'Deasia', 'Deb',
        'Debbi', 'Debbie', 'Debbra', 'Debby', 'Debera', 'Debi', 'Debora',
        'Deborah', 'Deborrah', 'Debra', 'Debrah', 'Debroah', 'Dedra', 'Dee',
        'Deeann', 'Deedee', 'Deena', 'Deetta', 'Deidra', 'Deidre', 'Deirdre',
        'Deja', 'Dejah', 'Delaney', 'Delcie', 'Delfina', 'Delia', 'Deliah',
        'Delila', 'Delilah', 'Delina', 'Delinda', 'Delisa', 'Dell', 'Della',
        'Dellar', 'Delle', 'Dellia', 'Dellie', 'Delma', 'Delois', 'Delora',
        'Delores', 'Deloris', 'Delpha', 'Delphia', 'Delphine', 'Delsie',
        'Delta', 'Dema', 'Demetra', 'Demetria', 'Demi', 'Dena', 'Deneen',
        'Denese', 'Denice', 'Denine', 'Denise', 'Denisha', 'Denisse', 'Denita',
        'Dennie', 'Desirae', 'Desiree', 'Dessa', 'Dessie', 'Destany',
        'Destinee', 'Destiney', 'Destini', 'Destiny', 'Devan', 'Devin',
        'Devon', 'Devyn', 'Dewey', 'Deyanira', 'Dezzie', 'Diamond', 'Dian',
        'Diana', 'Diandra', 'Diane', 'Diann', 'Dianna', 'Dianne', 'Dicie',
        'Dicy', 'Dillie', 'Dimple', 'Dina', 'Dinah', 'Dione', 'Dionne',
        'Dixie', 'Diya', 'Djuana', 'Djuna', 'Docia', 'Dola', 'Dollie', 'Dolly',
        'Dollye', 'Dolores', 'Doloris', 'Domenica', 'Dominga', 'Dominique',
        'Dominque', 'Domonique', 'Dona', 'Donia', 'Donie', 'Donita', 'Donna',
        'Donnie', 'Dora', 'Dorathea', 'Dorathy', 'Dorcas', 'Doreen', 'Dorene',
        'Doretha', 'Doretta', 'Dori', 'Dorinda', 'Dorine', 'Doris', 'Dorla',
        'Dorotha', 'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthea',
        'Dorthey', 'Dorthy', 'Dosha', 'Doshia', 'Doshie', 'Dosia', 'Dossie',
        'Dot', 'Dottie', 'Dotty', 'Dove', 'Dovie', 'Drema', 'Drew', 'Drucilla',
        'Drusilla', 'Dulce', 'Dulcie', 'Dusty', 'Dwan', 'Dyan', 'Dylan',
        'Earlean', 'Earlene', 'Earlie', 'Earline', 'Earnestine', 'Eartha',
        'Easter', 'Eathel', 'Ebba', 'Eboni', 'Ebony', 'Echo', 'Eda', 'Eddie',
        'Eden', 'Edie', 'Edith', 'Edla', 'Edmonia', 'Edna', 'Ednah', 'Edra',
        'Edrie', 'Edris', 'Edwina', 'Edyth', 'Edythe', 'Effa', 'Effie',
        'Eileen', 'Eithel', 'Ela', 'Elaina', 'Elaine', 'Elana', 'Elayne',
        'Elba', 'Elberta', 'Elda', 'Eldora', 'Eleanor', 'Eleanora', 'Eleanore',
        'Elease', 'Electa', 'Elena', 'Elenor', 'Elenora', 'Elenore',
        'Eleonora', 'Eleonore', 'Elfie', 'Elfreda', 'Elfrieda', 'Elgie',
        'Elia', 'Eliana', 'Elianna', 'Elida', 'Elinor', 'Elinore', 'Elisa',
        'Elisabeth', 'Elise', 'Elisha', 'Elissa', 'Eliza', 'Elizabet',
        'Elizabeth', 'Elizbeth', 'Elizebeth', 'Ella', 'Ellamae', 'Ellar',
        'Elle', 'Ellen', 'Eller', 'Elliana', 'Ellie', 'Ellyn', 'Elma',
        'Elmina', 'Elmira', 'Elmire', 'Elmyra', 'Elna', 'Elnora', 'Elodie',
        'Elois', 'Eloisa', 'Eloise', 'Elouise', 'Elsa', 'Else', 'Elsie',
        'Elta', 'Elva', 'Elvera', 'Elvia', 'Elvie', 'Elvina', 'Elvira',
        'Elwanda', 'Elyse', 'Elyssa', 'Elza', 'Elzada', 'Ema', 'Emaline',
        'Ember', 'Emelia', 'Emelie', 'Emeline', 'Emely', 'Emerald', 'Emerson',
        'Emery', 'Emilee', 'Emilia', 'Emilie', 'Emily', 'Emma', 'Emmalee',
        'Emmaline', 'Emmer', 'Emmie', 'Emmy', 'Emogene', 'Ena', 'Enid',
        'Enola', 'Enriqueta', 'Eola', 'Eppie', 'Epsie', 'Era', 'Erica',
        'Ericka', 'Erie', 'Erika', 'Erin', 'Eris', 'Erla', 'Erlene', 'Erlinda',
        'Erline', 'Erma', 'Ermina', 'Ermine', 'Erna', 'Ernestina', 'Ernestine',
        'Erykah', 'Eryn', 'Esmeralda', 'Esperanza', 'Essa', 'Essence', 'Essie',
        'Esta', 'Estefani', 'Estefania', 'Estefany', 'Estela', 'Estell',
        'Estella', 'Estelle', 'Ester', 'Esther', 'Estie', 'Estrella', 'Etha',
        'Ethel', 'Ethelene', 'Ethelyn', 'Ether', 'Ethie', 'Ethyl', 'Ethyle',
        'Etna', 'Etta', 'Etter', 'Ettie', 'Eudora', 'Eugenia', 'Eugenie',
        'Eula', 'Eulah', 'Eulalia', 'Eulalie', 'Euna', 'Eunice', 'Euphemia',
        'Eura', 'Eva', 'Evalena', 'Evaline', 'Evalyn', 'Evangelina',
        'Evangeline', 'Eve', 'Evelena', 'Evelin', 'Evelina', 'Eveline',
        'Evelyn', 'Evelyne', 'Evelynn', 'Ever', 'Evette', 'Evia', 'Evie',
        'Evita', 'Evon', 'Evonne', 'Exa', 'Exie', 'Fabiola', 'Fae', 'Fairy',
        'Faith', 'Fallon', 'Falon', 'Fannie', 'Fanny', 'Fannye', 'Farah',
        'Farrah', 'Fatima', 'Fawn', 'Fay', 'Faye', 'Felecia', 'Felice',
        'Felicia', 'Felicie', 'Felicitas', 'Felicity', 'Felipa', 'Felisha',
        'Fern', 'Fernanda', 'Ferne', 'Fidelia', 'Filomena', 'Finley', 'Fiona',
        'Flavia', 'Fleda', 'Fleeta', 'Fleta', 'Flo', 'Flonnie', 'Flor',
        'Flora', 'Florance', 'Florence', 'Florene', 'Floretta', 'Florida',
        'Florie', 'Florine', 'Florrie', 'Flossie', 'Floy', 'Fonda', 'Forest',
        'Fran', 'Franc', 'Frances', 'Francesca', 'Francies', 'Francina',
        'Francine', 'Francis', 'Francisca', 'Francisquita', 'Frankie', 'Freda',
        'Freddie', 'Frederica', 'Fredericka', 'Freeda', 'Freida', 'Frida',
        'Frieda', 'Frona', 'Fronia', 'Fronie', 'Fronnie', 'Fumiko', 'Gabriela',
        'Gabriella', 'Gabrielle', 'Gail', 'Gale', 'Galilea', 'Garnet',
        'Garnett', 'Gay', 'Gaye', 'Gayla', 'Gayle', 'Gaylene', 'Gaynell',
        'Gearldine', 'Gemma', 'Gena', 'Gene', 'Genesis', 'Geneva', 'Genevieve',
        'Genevra', 'Genie', 'Gennie', 'Genoveva', 'Georganna', 'Georgeann',
        'Georgeanna', 'Georgene', 'Georgetta', 'Georgette', 'Georgia',
        'Georgiana', 'Georgiann', 'Georgianna', 'Georgie', 'Georgina',
        'Georgine', 'Geraldine', 'Geralyn', 'Gerda', 'Geri', 'Germaine',
        'Gerri', 'Gerry', 'Gertha', 'Gertie', 'Gertrude', 'Gia', 'Giada',
        'Giana', 'Gianna', 'Gidget', 'Gigi', 'Gilda', 'Gillian', 'Gillie',
        'Gina', 'Ginger', 'Ginny', 'Giovanna', 'Girtha', 'Gisele', 'Giselle',
        'Gisselle', 'Giuliana', 'Gladis', 'Gladyce', 'Gladys', 'Glenda',
        'Glendora', 'Glenn', 'Glenna', 'Glennie', 'Glennis', 'Glinda',
        'Gloria', 'Glynda', 'Glynis', 'Golda', 'Golden', 'Goldia', 'Goldie',
        'Grace', 'Gracelyn', 'Gracia', 'Gracie', 'Graciela', 'Grayce',
        'Grecia', 'Gregoria', 'Greta', 'Gretchen', 'Gretta', 'Grisel',
        'Griselda', 'Guadalupe', 'Gunda', 'Gussie', 'Gusta', 'Gustie', 'Gwen',
        'Gwenda', 'Gwendolyn', 'Gwyn', 'Gwyneth', 'Hadassah', 'Hadley',
        'Hailee', 'Hailey', 'Hailie', 'Haleigh', 'Haley', 'Hali', 'Halie',
        'Halle', 'Halley', 'Hallie', 'Hana', 'Hanna', 'Hannah', 'Harlene',
        'Harley', 'Harlow', 'Harmony', 'Harper', 'Harriet', 'Harriett',
        'Harriette', 'Haruko', 'Hasel', 'Hassie', 'Hattie', 'Haven', 'Hayden',
        'Haylee', 'Hayleigh', 'Hayley', 'Haylie', 'Hazel', 'Hazelle', 'Hazle',
        'Heather', 'Heaven', 'Hedwig', 'Hedy', 'Heidi', 'Heidy', 'Helaine',
        'Helen', 'Helena', 'Helene', 'Helga', 'Hellen', 'Helma', 'Helyn',
        'Hennie', 'Henretta', 'Henrietta', 'Henriette', 'Herlinda', 'Herma',
        'Hermina', 'Hermine', 'Herminia', 'Hertha', 'Hessie', 'Hester',
        'Hettie', 'Hetty', 'Hilah', 'Hilary', 'Hilda', 'Hildegard',
        'Hildegarde', 'Hildred', 'Hildur', 'Hillary', 'Hilma', 'Holli',
        'Hollie', 'Hollis', 'Holly', 'Honora', 'Hope', 'Hortencia', 'Hortense',
        'Hortensia', 'Hulda', 'Huldah', 'Hunter', 'Ica', 'Icey', 'Icie', 'Icy',
        'Ida', 'Idabelle', 'Idamae', 'Idell', 'Idella', 'Iesha', 'Ieshia',
        'Ila', 'Ilah', 'Ilda', 'Ilene', 'Iliana', 'Illa', 'Ilma', 'Ilo',
        'Ilona', 'Ima', 'Imani', 'Imelda', 'Imo', 'Imogene', 'Ina', 'India',
        'Indiana', 'Inell', 'Ines', 'Inez', 'Infant', 'Inga', 'Ingeborg',
        'Inger', 'Ingrid', 'Iola', 'Iona', 'Ione', 'Ira', 'Ireland', 'Irena',
        'Irene', 'Iridian', 'Irine', 'Iris', 'Irma', 'Irva', 'Isa', 'Isabel',
        'Isabela', 'Isabell', 'Isabella', 'Isabelle', 'Isadora', 'Isamar',
        'Isis', 'Isla', 'Isobel', 'Itzel', 'Iva', 'Ivah', 'Ivana', 'Ivanna',
        'Ivette', 'Ivey', 'Ivie', 'Ivonne', 'Ivory', 'Ivy', 'Iyana', 'Iyanna',
        'Iza', 'Izabella', 'Izabelle', 'Izetta', 'Izola', 'Izora', 'Jacalyn',
        'Jacey', 'Jackeline', 'Jacki', 'Jackie', 'Jacklyn', 'Jaclyn', 'Jacque',
        'Jacquelin', 'Jacqueline', 'Jacquelyn', 'Jacquline', 'Jacqulyn',
        'Jada', 'Jade', 'Jaden', 'Jadyn', 'Jaeda', 'Jaelyn', 'Jaelynn',
        'Jaida', 'Jaiden', 'Jaidyn', 'Jailene', 'Jailyn', 'Jaime', 'Jaimee',
        'Jakayla', 'Jaleesa', 'Jalisa', 'Jalissa', 'Jaliyah', 'Jalyn',
        'Jalynn', 'Jamey', 'Jami', 'Jamie', 'Jamila', 'Jamiya', 'Jammie',
        'Jamya', 'Jan', 'Jana', 'Janae', 'Janay', 'Jane', 'Janeen', 'Janel',
        'Janell', 'Janelle', 'Janene', 'Janessa', 'Janet', 'Janette', 'Janey',
        'Janiah', 'Janice', 'Janie', 'Janine', 'Janis', 'Janiya', 'Janiyah',
        'Jann', 'Janna', 'Jannette', 'Jannie', 'January', 'Janyce', 'Jaquelin',
        'Jaqueline', 'Jaslene', 'Jaslyn', 'Jasmin', 'Jasmine', 'Jasmyn',
        'Jasmyne', 'Jaunita', 'Jaycee', 'Jaycie', 'Jayda', 'Jayde', 'Jayden',
        'Jaye', 'Jayla', 'Jaylah', 'Jaylee', 'Jayleen', 'Jaylen', 'Jaylene',
        'Jaylin', 'Jaylyn', 'Jaylynn', 'Jayme', 'Jayne', 'Jazlene', 'Jazlyn',
        'Jazlynn', 'Jazmin', 'Jazmine', 'Jazmyn', 'Jazmyne', 'Jean', 'Jeana',
        'Jeane', 'Jeanetta', 'Jeanette', 'Jeanie', 'Jeanine', 'Jeanmarie',
        'Jeanna', 'Jeanne', 'Jeannette', 'Jeannie', 'Jeannine', 'Jeffie',
        'Jemima', 'Jena', 'Jenelle', 'Jenifer', 'Jenilee', 'Jenna', 'Jennette',
        'Jenni', 'Jennie', 'Jennifer', 'Jenniffer', 'Jenny', 'Jensen',
        'Jeraldine', 'Jeri', 'Jerica', 'Jerilyn', 'Jerilynn', 'Jerri',
        'Jerrica', 'Jerrie', 'Jerrilyn', 'Jerusha', 'Jeryl', 'Jesenia',
        'Jesica', 'Jesse', 'Jessenia', 'Jessi', 'Jessica', 'Jessie', 'Jessika',
        'Jessye', 'Jetta', 'Jettie', 'Jewel', 'Jewell', 'Jill', 'Jillian',
        'Jimena', 'Jinnie', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joann', 'Joanna',
        'Joanne', 'Jocelyn', 'Jocelyne', 'Jocelynn', 'Jodi', 'Jodie', 'Jody',
        'Joell', 'Joella', 'Joelle', 'Joellen', 'Joetta', 'Joette', 'Johana',
        'Johanna', 'Johannah', 'Johnie', 'Johnna', 'Johnnie', 'Joi', 'Joleen',
        'Jolene', 'Jolette', 'Jolie', 'Joline', 'Jonell', 'Joni', 'Jonna',
        'Jonnie', 'Jordan', 'Jordin', 'Jordyn', 'Joretta', 'Jorja', 'Josefa',
        'Josefina', 'Josefita', 'Joselin', 'Joseline', 'Joselyn', 'Josephine',
        'Josette', 'Josie', 'Josiephine', 'Joslyn', 'Jossie', 'Journey',
        'Jovita', 'Joy', 'Joyce', 'Joycelyn', 'Joye', 'Juana', 'Juanita',
        'Judi', 'Judie', 'Judith', 'Judy', 'Judyth', 'Jule', 'Juli', 'Julia',
        'Juliana', 'Juliann', 'Julianna', 'Julianne', 'Julie', 'Juliet',
        'Juliette', 'Julisa', 'Julissa', 'June', 'Junia', 'Junie', 'Justice',
        'Justina', 'Justine', 'Kaaren', 'Kacey', 'Kaci', 'Kacie', 'Kacy',
        'Kadence', 'Kadijah', 'Kaela', 'Kaelyn', 'Kaelynn', 'Kaia', 'Kaila',
        'Kailee', 'Kailey', 'Kailyn', 'Kaitlin', 'Kaitlyn', 'Kaitlynn',
        'Kaiya', 'Kala', 'Kaleena', 'Kaleigh', 'Kalene', 'Kaley', 'Kali',
        'Kalie', 'Kaliyah', 'Kallie', 'Kalyn', 'Kamari', 'Kameron', 'Kami',
        'Kamila', 'Kamilah', 'Kamora', 'Kamryn', 'Kamya', 'Kandace', 'Kandi',
        'Kandice', 'Kandy', 'Kanesha', 'Kanisha', 'Kara', 'Karan', 'Karel',
        'Karen', 'Kari', 'Karie', 'Karin', 'Karina', 'Karis', 'Karissa',
        'Karla', 'Karlee', 'Karlene', 'Karley', 'Karli', 'Karlie', 'Karly',
        'Karma', 'Karol', 'Karolyn', 'Karon', 'Karren', 'Karri', 'Karrie',
        'Karsyn', 'Karyl', 'Karyme', 'Karyn', 'Kasandra', 'Kasey', 'Kasie',
        'Kassandra', 'Kassidy', 'Kassie', 'Katarina', 'Kate', 'Katelin',
        'Katelyn', 'Katelynn', 'Katerina', 'Kathaleen', 'Katharina',
        'Katharine', 'Katharyn', 'Katherin', 'Katherine', 'Kathern',
        'Katheryn', 'Kathey', 'Kathi', 'Kathie', 'Kathleen', 'Kathlene',
        'Kathlyn', 'Kathrine', 'Kathryn', 'Kathryne', 'Kathy', 'Kathyrn',
        'Kati', 'Katia', 'Katie', 'Katina', 'Katlin', 'Katlyn', 'Katlynn',
        'Katrina', 'Kattie', 'Katy', 'Kay', 'Kaya', 'Kaycee', 'Kayden',
        'Kaydence', 'Kaye', 'Kayla', 'Kaylah', 'Kaylan', 'Kaylee', 'Kayleen',
        'Kayleigh', 'Kaylen', 'Kaylene', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin',
        'Kaylyn', 'Kaylynn', 'Kazuko', 'Keanna', 'Keara', 'Kecia', 'Keeley',
        'Keely', 'Keena', 'Keesha', 'Keila', 'Keira', 'Keisha', 'Kelcie',
        'Keli', 'Kelis', 'Kellee', 'Kelley', 'Kelli', 'Kellie', 'Kelly',
        'Kelsea', 'Kelsey', 'Kelsi', 'Kelsie', 'Kendal', 'Kendall', 'Kendra',
        'Kenia', 'Kenisha', 'Kenley', 'Kenna', 'Kennedi', 'Kennedy', 'Kenya',
        'Kenyatta', 'Kenzie', 'Keri', 'Kerri', 'Kerrie', 'Kerry', 'Kesha',
        'Keshia', 'Keyla', 'Khadijah', 'Khalilah', 'Khloe', 'Kia', 'Kiana',
        'Kianna', 'Kiara', 'Kiarra', 'Kiera', 'Kierra', 'Kiersten', 'Kiley',
        'Kim', 'Kimber', 'Kimberely', 'Kimberlee', 'Kimberley', 'Kimberli',
        'Kimberlie', 'Kimberly', 'Kimora', 'Kindra', 'Kinley', 'Kinsey',
        'Kinsley', 'Kira', 'Kirsten', 'Kirstie', 'Kirstin', 'Kisha', 'Kittie',
        'Kitty', 'Kiya', 'Kiyoko', 'Kizzie', 'Kizzy', 'Kloe', 'Kori',
        'Kortney', 'Kourtney', 'Kris', 'Krissy', 'Krista', 'Kristal',
        'Kristan', 'Kristen', 'Kristi', 'Kristian', 'Kristie', 'Kristin',
        'Kristina', 'Kristine', 'Kristy', 'Kristyn', 'Krysta', 'Krystal',
        'Krysten', 'Krystin', 'Krystina', 'Krystle', 'Kya', 'Kyara', 'Kyla',
        'Kylah', 'Kyle', 'Kylee', 'Kyleigh', 'Kylene', 'Kylie', 'Kyra',
        'Kyrie', 'Lacey', 'Laci', 'Lacie', 'Lacy', 'Ladonna', 'Lady', 'Lahoma',
        'Laila', 'Lailah', 'Lainey', 'Laisha', 'Lakeisha', 'Laken', 'Lakendra',
        'Lakesha', 'Lakeshia', 'Lakisha', 'Lala', 'Lalla', 'Lana', 'Lanette',
        'Laney', 'Lani', 'Lanie', 'Lanita', 'Lannie', 'Laquita', 'Lara',
        'Larae', 'Laraine', 'Larissa', 'Larue', 'Lashanda', 'Lashawn',
        'Lashonda', 'Lashunda', 'Lasonya', 'Lassie', 'Latanya', 'Latarsha',
        'Latasha', 'Latesha', 'Latifah', 'Latisha', 'Latonia', 'Latonya',
        'Latoria', 'Latosha', 'Latoya', 'Latoyia', 'Latrice', 'Latricia',
        'Latrina', 'Launa', 'Laura', 'Laureen', 'Laurel', 'Lauren', 'Laurene',
        'Lauretta', 'Laurette', 'Lauri', 'Laurie', 'Laurine', 'Lauryn',
        'Lavada', 'Lavelle', 'Lavenia', 'Lavera', 'Lavern', 'Laverna',
        'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavona', 'Lavonda',
        'Lavonia', 'Lavonne', 'Lawanda', 'Layla', 'Laylah', 'Lea', 'Leafy',
        'Leah', 'Leala', 'Leana', 'Leandra', 'Leaner', 'Leann', 'Leanna',
        'Leanne', 'Leatha', 'Leatrice', 'Leda', 'Lee', 'Leeann', 'Leesa',
        'Leia', 'Leigh', 'Leighton', 'Leila', 'Leilani', 'Leisa', 'Leisha',
        'Leitha', 'Lela', 'Lelah', 'Lelar', 'Lelia', 'Lella', 'Lemma', 'Lempi',
        'Lena', 'Lenna', 'Lennie', 'Lenora', 'Lenore', 'Leola', 'Leoma',
        'Leona', 'Leone', 'Leonia', 'Leonie', 'Leonor', 'Leonora', 'Leonore',
        'Leontine', 'Leora', 'Leota', 'Lera', 'Lesa', 'Lesia', 'Leslee',
        'Lesley', 'Lesli', 'Leslie', 'Lesly', 'Lessie', 'Lesta', 'Leta',
        'Letha', 'Lethia', 'Leticia', 'Letitia', 'Letta', 'Lettie', 'Letty',
        'Leva', 'Levina', 'Lexi', 'Lexie', 'Lexis', 'Lexus', 'Leyla', 'Lia',
        'Liana', 'Liane', 'Libbie', 'Libby', 'Liberty', 'Lida', 'Liddie',
        'Lidia', 'Lidie', 'Lila', 'Lilah', 'Lilia', 'Lilian', 'Liliana',
        'Lilianna', 'Lilie', 'Lilla', 'Liller', 'Lillia', 'Lillian',
        'Lilliana', 'Lillianna', 'Lillie', 'Lillis', 'Lilly', 'Lily', 'Lilyan',
        'Lilyana', 'Lilyanna', 'Lina', 'Linda', 'Lindsay', 'Lindsey', 'Lindy',
        'Linette', 'Linna', 'Linnea', 'Linnie', 'Linsey', 'Lisa', 'Lisbeth',
        'Lise', 'Lisette', 'Lisha', 'Lissa', 'Lissette', 'Lissie', 'Lita',
        'Litha', 'Littie', 'Litzy', 'Livia', 'Liz', 'Liza', 'Lizabeth',
        'Lizbeth', 'Lizeth', 'Lizette', 'Lizzie', 'Lockie', 'Loda', 'Logan',
        'Lois', 'Lola', 'Lolita', 'Lolla', 'Lollie', 'Loma', 'Lona', 'London',
        'Londyn', 'Loni', 'Lonie', 'Lonna', 'Lonnie', 'Lora', 'Loraine',
        'Lorayne', 'Lorean', 'Loree', 'Loreen', 'Lorelai', 'Lorelei', 'Loren',
        'Lorena', 'Lorene', 'Lorenza', 'Loretta', 'Loretto', 'Lori', 'Loria',
        'Loriann', 'Lorie', 'Lorinda', 'Lorine', 'Loris', 'Lorna', 'Lorraine',
        'Lorrayne', 'Lorri', 'Lorrie', 'Lossie', 'Lota', 'Lotta', 'Lottie',
        'Lou', 'Louann', 'Louanna', 'Louella', 'Louetta', 'Louie', 'Louisa',
        'Louise', 'Louisiana', 'Loula', 'Lourdes', 'Louvenia', 'Love', 'Lovey',
        'Lovie', 'Lovina', 'Lovisa', 'Loyce', 'Lu', 'Luana', 'Luann', 'Luanne',
        'Luberta', 'Lucero', 'Lucetta', 'Lucia', 'Luciana', 'Lucie', 'Lucile',
        'Lucille', 'Lucina', 'Lucinda', 'Lucindy', 'Lucretia', 'Lucy', 'Luda',
        'Ludie', 'Lue', 'Luella', 'Luetta', 'Lugenia', 'Luisa', 'Lula',
        'Lulah', 'Lular', 'Lulie', 'Lulla', 'Lulu', 'Luna', 'Lupe', 'Lura',
        'Lurana', 'Lurena', 'Lurline', 'Lutie', 'Luvenia', 'Luverne',
        'Luvinia', 'Luz', 'Lyda', 'Lydia', 'Lyla', 'Lylah', 'Lyn', 'Lynda',
        'Lyndia', 'Lyndsay', 'Lyndsey', 'Lynette', 'Lynn', 'Lynne', 'Lynnette',
        'Lynsey', 'Lyric', 'Mabel', 'Mabell', 'Mabelle', 'Mable', 'Macel',
        'Macey', 'Machelle', 'Maci', 'Macie', 'Mackenzie', 'Macy', 'Madaline',
        'Madalyn', 'Madalynn', 'Maddison', 'Madeleine', 'Madelene', 'Madeline',
        'Madelyn', 'Madelynn', 'Madge', 'Madie', 'Madilyn', 'Madilynn',
        'Madisen', 'Madison', 'Madisyn', 'Madlyn', 'Madonna', 'Madora',
        'Madyson', 'Mae', 'Maebell', 'Maebelle', 'Maegan', 'Maeve', 'Mafalda',
        'Magan', 'Magdalen', 'Magdalena', 'Magdalene', 'Magen', 'Maggie',
        'Magnolia', 'Mahala', 'Mahalia', 'Mahalie', 'Mai', 'Maia', 'Maida',
        'Maira', 'Maiya', 'Makaila', 'Makala', 'Makayla', 'Makena', 'Makenna',
        'Makenzie', 'Malaya', 'Maleah', 'Malia', 'Maliah', 'Malinda',
        'Malissa', 'Malissie', 'Maliyah', 'Mallie', 'Mallorie', 'Mallory',
        'Malorie', 'Malvina', 'Mame', 'Mamie', 'Mammie', 'Manda', 'Mandi',
        'Mandie', 'Mandy', 'Manerva', 'Manervia', 'Manie', 'Manila', 'Manilla',
        'Mannie', 'Manuela', 'Manuelita', 'Mara', 'Maralyn', 'Maranda',
        'Marcela', 'Marcelina', 'Marceline', 'Marcella', 'Marcelle', 'Marci',
        'Marcia', 'Marcie', 'Marcy', 'Mardell', 'Mareli', 'Marely', 'Maren',
        'Margaret', 'Margarete', 'Margaretha', 'Margarett', 'Margaretta',
        'Margarette', 'Margarita', 'Margarite', 'Marge', 'Margene', 'Margeret',
        'Margery', 'Marget', 'Margie', 'Margo', 'Margot', 'Margret',
        'Margrett', 'Margretta', 'Marguerite', 'Margueritte', 'Margurite',
        'Margy', 'Mari', 'Maria', 'Mariah', 'Mariam', 'Marian', 'Mariana',
        'Marianita', 'Mariann', 'Marianna', 'Marianne', 'Maribel', 'Maribeth',
        'Maricela', 'Marie', 'Mariel', 'Mariela', 'Marietta', 'Marilee',
        'Marilla', 'Marilou', 'Marilyn', 'Marilynn', 'Marin', 'Marina',
        'Marinda', 'Marion', 'Marisa', 'Marisela', 'Marisol', 'Marissa',
        'Marita', 'Maritza', 'Mariyah', 'Marjorie', 'Marjory', 'Markita',
        'Marla', 'Marlana', 'Marlee', 'Marleen', 'Marleigh', 'Marlen',
        'Marlena', 'Marlene', 'Marley', 'Marlie', 'Marlo', 'Marlyn', 'Marlys',
        'Marni', 'Marnie', 'Marnita', 'Marolyn', 'Marquita', 'Marry', 'Marsha',
        'Marta', 'Martha', 'Marti', 'Martika', 'Martina', 'Martine', 'Marty',
        'Marva', 'Marvel', 'Mary', 'Maryam', 'Maryann', 'Maryanne',
        'Marybelle', 'Marybeth', 'Maryellen', 'Maryjane', 'Maryjo', 'Marylee',
        'Marylin', 'Marylou', 'Marylouise', 'Marylyn', 'Masako', 'Mathilda',
        'Mathilde', 'Matie', 'Matilda', 'Matilde', 'Mattie', 'Mattye', 'Maud',
        'Maude', 'Maudie', 'Maura', 'Maureen', 'Maurine', 'Mavis', 'Maxie',
        'Maxine', 'May', 'Maya', 'Maybell', 'Maybelle', 'Maye', 'Mayme',
        'Maymie', 'Mayra', 'Mazie', 'Mckayla', 'Mckenna', 'Mckenzie',
        'Mckinley', 'Meadow', 'Meagan', 'Meaghan', 'Mechelle', 'Meda', 'Media',
        'Medora', 'Meg', 'Megan', 'Meggan', 'Meghan', 'Meghann', 'Melanie',
        'Melany', 'Melba', 'Melina', 'Melinda', 'Melisa', 'Melissa',
        'Melissia', 'Mell', 'Mellie', 'Mellisa', 'Mellissa', 'Melodee',
        'Melodie', 'Melody', 'Melonie', 'Melony', 'Melva', 'Melvina', 'Mena',
        'Mendy', 'Mercedes', 'Mercy', 'Meredith', 'Merilyn', 'Merle',
        'Merlene', 'Merna', 'Merri', 'Merrie', 'Merrilee', 'Merrily', 'Merry',
        'Mertie', 'Meryl', 'Meta', 'Metha', 'Metta', 'Mettie', 'Mia', 'Miah',
        'Micaela', 'Micah', 'Micayla', 'Michaela', 'Michaele', 'Michal',
        'Michele', 'Michelina', 'Michell', 'Michelle', 'Mickey', 'Mickie',
        'Miesha', 'Migdalia', 'Mignon', 'Mikaela', 'Mikaila', 'Mikala',
        'Mikalah', 'Mikayla', 'Mila', 'Milagros', 'Milan', 'Milda', 'Mildred',
        'Miley', 'Milissa', 'Millicent', 'Millie', 'Milly', 'Mima', 'Mimi',
        'Mina', 'Minda', 'Mindi', 'Mindy', 'Minerva', 'Minervia', 'Minna',
        'Minnie', 'Minta', 'Mintie', 'Mira', 'Miracle', 'Miranda', 'Mireya',
        'Miriah', 'Miriam', 'Mirna', 'Mirtie', 'Missie', 'Missouri', 'Missy',
        'Misti', 'Mistie', 'Misty', 'Mittie', 'Mitzi', 'Miya', 'Modena',
        'Moesha', 'Moira', 'Mollie', 'Molly', 'Mona', 'Monica', 'Monika',
        'Monique', 'Monna', 'Monnie', 'Monserrat', 'Montana', 'Montie', 'Mora',
        'Morgan', 'Moriah', 'Mossie', 'Mozell', 'Mozella', 'Mozelle', 'Muriel',
        'Murl', 'Mya', 'Myah', 'Myla', 'Mylee', 'Mylie', 'Myra', 'Myranda',
        'Myrl', 'Myrle', 'Myrna', 'Myrta', 'Myrtice', 'Myrtie', 'Myrtis',
        'Myrtle', 'Nada', 'Nadia', 'Nadine', 'Naima', 'Nakia', 'Nakisha',
        'Nakita', 'Nallely', 'Nan', 'Nana', 'Nanci', 'Nancie', 'Nancy',
        'Nanette', 'Nanie', 'Nanna', 'Nannette', 'Nannie', 'Naoma', 'Naomi',
        'Narcissus', 'Natalee', 'Natalia', 'Natalie', 'Nataly', 'Natalya',
        'Natasha', 'Nathalia', 'Nathalie', 'Nathaly', 'Natosha', 'Nautica',
        'Nayeli', 'Nayely', 'Nealie', 'Nealy', 'Nedra', 'Neha', 'Nelda',
        'Nelia', 'Nelie', 'Nell', 'Nella', 'Nelle', 'Nellie', 'Nelly', 'Nena',
        'Neola', 'Neoma', 'Neppie', 'Nereida', 'Neta', 'Netta', 'Nettie',
        'Neva', 'Nevada', 'Nevaeh', 'Neveah', 'Nia', 'Nichelle', 'Nichol',
        'Nichole', 'Nicki', 'Nicola', 'Nicole', 'Nicolette', 'Nicolle', 'Niki',
        'Nikia', 'Nikita', 'Nikki', 'Nikole', 'Nila', 'Nilda', 'Nina',
        'Ninnie', 'Nira', 'Nita', 'Nobie', 'Noel', 'Noelia', 'Noelle', 'Noemi',
        'Noemie', 'Nohely', 'Nola', 'Nolia', 'Nolie', 'Noma', 'Nona', 'Nonie',
        'Nora', 'Norah', 'Noreen', 'Norene', 'Noreta', 'Noretta', 'Norine',
        'Norita', 'Norma', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Nyla',
        'Nylah', 'Nyree', 'Ocie', 'Octa', 'Octavia', 'Octavie', 'Oda',
        'Odalis', 'Odalys', 'Odelia', 'Odell', 'Odessa', 'Odette', 'Odie',
        'Odile', 'Ofelia', 'Ola', 'Olar', 'Olena', 'Olene', 'Oleta', 'Olevia',
        'Olga', 'Olie', 'Olinda', 'Oline', 'Oliva', 'Olive', 'Olivia',
        'Olivine', 'Ollie', 'Olympia', 'Oma', 'Omie', 'Ona', 'Oneida', 'Oneta',
        'Oney', 'Onie', 'Onnie', 'Opal', 'Opha', 'Ophelia', 'Ora', 'Orah',
        'Oral', 'Oralia', 'Orelia', 'Orene', 'Orilla', 'Orlena', 'Orma',
        'Orpha', 'Orra', 'Orrie', 'Osa', 'Osie', 'Ossie', 'Ota', 'Otelia',
        'Otha', 'Ottie', 'Ottilia', 'Ottilie', 'Ouida', 'Ova', 'Ozell',
        'Ozella', 'Ozie', 'Paige', 'Pairlee', 'Paisley', 'Paityn', 'Pallie',
        'Palma', 'Paloma', 'Pam', 'Pamala', 'Pamela', 'Pamelia', 'Pamella',
        'Pandora', 'Pansy', 'Paola', 'Paralee', 'Paris', 'Parker', 'Parlee',
        'Parthenia', 'Pat', 'Patience', 'Patrica', 'Patrice', 'Patricia',
        'Patsy', 'Patti', 'Pattie', 'Patty', 'Paula', 'Pauletta', 'Paulette',
        'Paulina', 'Pauline', 'Payten', 'Payton', 'Pearl', 'Pearla', 'Pearle',
        'Pearlene', 'Pearlie', 'Pearline', 'Pearly', 'Peggie', 'Peggy',
        'Penelope', 'Penni', 'Pennie', 'Penny', 'Pepper', 'Perla', 'Permelia',
        'Perri', 'Petra', 'Peyton', 'Phebe', 'Pheobe', 'Phillis', 'Philomena',
        'Philomene', 'Phoebe', 'Phoenix', 'Phylicia', 'Phylis', 'Phyliss',
        'Phyllis', 'Pink', 'Pinkey', 'Pinkie', 'Piper', 'Pluma', 'Pollie',
        'Polly', 'Porsche', 'Porsha', 'Portia', 'Precious', 'Presley',
        'Pricilla', 'Princess', 'Priscila', 'Priscilla', 'Prudence', 'Prudie',
        'Qiana', 'Queen', 'Queenie', 'Quiana', 'Quinn', 'Rachael', 'Racheal',
        'Rachel', 'Rachelle', 'Racquel', 'Rae', 'Raegan', 'Raelyn', 'Raelynn',
        'Rafaela', 'Ragna', 'Raina', 'Ramona', 'Randi', 'Raquel', 'Rashida',
        'Raven', 'Rayna', 'Rayne', 'Reagan', 'Reanna', 'Reatha', 'Reba',
        'Rebeca', 'Rebecca', 'Rebekah', 'Reece', 'Reese', 'Regan', 'Regena',
        'Regenia', 'Regina', 'Reilly', 'Reina', 'Rella', 'Rena', 'Renada',
        'Renae', 'Renata', 'Rene', 'Renea', 'Renee', 'Renita', 'Rennie',
        'Ressie', 'Reta', 'Retha', 'Retta', 'Rettie', 'Reva', 'Reyna', 'Rhea',
        'Rheta', 'Rhianna', 'Rhiannon', 'Rhoda', 'Rhona', 'Rhonda', 'Rianna',
        'Richelle', 'Ricki', 'Rihanna', 'Rikki', 'Riley', 'Rilla', 'Rillie',
        'Rinda', 'Risa', 'Rita', 'River', 'Riya', 'Robbie', 'Robbin',
        'Roberta', 'Robin', 'Robyn', 'Rochelle', 'Rocio', 'Roena', 'Rolanda',
        'Roma', 'Romaine', 'Romona', 'Rona', 'Ronda', 'Roni', 'Ronna',
        'Ronnie', 'Rory', 'Rosa', 'Rosabelle', 'Rosalee', 'Rosalia', 'Rosalie',
        'Rosalind', 'Rosalinda', 'Rosaline', 'Rosalyn', 'Rosamond', 'Rosann',
        'Rosanna', 'Rosanne', 'Rosaria', 'Rosario', 'Rose', 'Roseann',
        'Roseanna', 'Roseanne', 'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary',
        'Rosena', 'Rosetta', 'Rosey', 'Rosia', 'Rosie', 'Rosina', 'Rosita',
        'Roslyn', 'Rossie', 'Rosy', 'Rowan', 'Rowena', 'Roxana', 'Roxane',
        'Roxann', 'Roxanna', 'Roxanne', 'Roxie', 'Roxy', 'Rozanne', 'Rozella',
        'Rubi', 'Rubie', 'Ruby', 'Rubye', 'Ruie', 'Ruth', 'Rutha', 'Ruthann',
        'Ruthanne', 'Ruthe', 'Ruthie', 'Ryann', 'Rylan', 'Rylee', 'Ryleigh',
        'Rylie', 'Sabina', 'Sable', 'Sabra', 'Sabrina', 'Sada', 'Sade',
        'Sadie', 'Sadye', 'Sage', 'Saige', 'Salena', 'Salina', 'Sallie',
        'Sally', 'Salma', 'Salome', 'Samantha', 'Samara', 'Samatha', 'Samira',
        'Samiyah', 'Sammie', 'Sanaa', 'Sanai', 'Sandi', 'Sandie', 'Sandra',
        'Sandy', 'Saniya', 'Saniyah', 'Sanjuana', 'Sanjuanita', 'Sannie',
        'Santa', 'Santana', 'Santina', 'Santos', 'Sara', 'Sarah', 'Sarahi',
        'Sarai', 'Sariah', 'Sarina', 'Sarita', 'Sarrah', 'Sasha', 'Saundra',
        'Savana', 'Savanah', 'Savanna', 'Savannah', 'Savilla', 'Scarlet',
        'Scarlett', 'Sebrina', 'Selah', 'Selena', 'Selene', 'Selina', 'Selma',
        'Sena', 'Senora', 'Serena', 'Serenity', 'Serina', 'Shae', 'Shaina',
        'Shakira', 'Shalon', 'Shalonda', 'Shameka', 'Shamika', 'Shana',
        'Shanae', 'Shanda', 'Shandra', 'Shane', 'Shaneka', 'Shanell',
        'Shanelle', 'Shanequa', 'Shani', 'Shania', 'Shanice', 'Shaniece',
        'Shanika', 'Shaniqua', 'Shanita', 'Shaniya', 'Shanna', 'Shannan',
        'Shannen', 'Shannon', 'Shanon', 'Shanta', 'Shante', 'Shantel',
        'Shantell', 'Shaquana', 'Shaquita', 'Shara', 'Shardae', 'Sharday',
        'Sharde', 'Sharee', 'Sharen', 'Shari', 'Sharita', 'Sharla', 'Sharleen',
        'Sharlene', 'Sharman', 'Sharon', 'Sharonda', 'Sharron', 'Sharyl',
        'Sharyn', 'Shasta', 'Shatara', 'Shauna', 'Shaunna', 'Shavon',
        'Shavonne', 'Shawanda', 'Shawna', 'Shawnda', 'Shawnee', 'Shawnna',
        'Shawnte', 'Shay', 'Shayla', 'Shaylee', 'Shayna', 'Shea', 'Sheena',
        'Sheila', 'Sheilah', 'Shelba', 'Shelbi', 'Shelbie', 'Shelby', 'Shelia',
        'Shelley', 'Shelli', 'Shellie', 'Shelly', 'Shelva', 'Shelvia',
        'Shelvie', 'Shena', 'Shenna', 'Sheree', 'Sheri', 'Sheridan', 'Sherie',
        'Sherilyn', 'Sherita', 'Sherlyn', 'Sheron', 'Sherree', 'Sherri',
        'Sherrie', 'Sherrill', 'Sherron', 'Sherry', 'Sherryl', 'Sheryl',
        'Sheryll', 'Sheyla', 'Shianne', 'Shiela', 'Shiloh', 'Shira', 'Shirl',
        'Shirlee', 'Shirleen', 'Shirlene', 'Shirley', 'Shirleyann', 'Shirlie',
        'Shona', 'Shonda', 'Shonna', 'Shreya', 'Shyann', 'Shyanne', 'Shyla',
        'Sibbie', 'Sibyl', 'Siddie', 'Sidney', 'Siena', 'Sienna', 'Sierra',
        'Signa', 'Signe', 'Sigrid', 'Silvia', 'Simona', 'Simone', 'Sina',
        'Sinda', 'Siobhan', 'Sister', 'Sky', 'Skye', 'Skyla', 'Skylar',
        'Skyler', 'Sloane', 'Socorro', 'Sofia', 'Soledad', 'Somer', 'Sommer',
        'Sondra', 'Sonia', 'Sonja', 'Sonji', 'Sonya', 'Sophia', 'Sophie',
        'Sophronia', 'Spring', 'Stacey', 'Staci', 'Stacia', 'Stacie', 'Stacy',
        'Star', 'Starla', 'Starr', 'Stasia', 'Stefani', 'Stefanie', 'Stella',
        'Stephaine', 'Stephani', 'Stephania', 'Stephanie', 'Stephany',
        'Stephenie', 'Stevie', 'Stormy', 'Sudie', 'Sue', 'Suellen', 'Sula',
        'Summer', 'Sunday', 'Sunny', 'Sunshine', 'Susan', 'Susana', 'Susann',
        'Susanna', 'Susannah', 'Susanne', 'Susie', 'Sussie', 'Suzan', 'Suzann',
        'Suzanna', 'Suzanne', 'Suzette', 'Suzie', 'Suzy', 'Sybil', 'Sybilla',
        'Syble', 'Sydell', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylva',
        'Sylvania', 'Sylvia', 'Symone', 'Syreeta', 'Tabatha', 'Tabetha',
        'Tabitha', 'Tai', 'Taina', 'Taja', 'Takisha', 'Talia', 'Taliyah',
        'Tamala', 'Tamara', 'Tamatha', 'Tambra', 'Tameka', 'Tamekia', 'Tamela',
        'Tamera', 'Tami', 'Tamia', 'Tamica', 'Tamie', 'Tamika', 'Tamiko',
        'Tamisha', 'Tammi', 'Tammie', 'Tammy', 'Tamra', 'Tamya', 'Tana',
        'Tanesha', 'Tangela', 'Tania', 'Tanika', 'Tanisha', 'Taniya',
        'Taniyah', 'Tanja', 'Tanya', 'Tara', 'Tarah', 'Taraji', 'Tari',
        'Tarsha', 'Taryn', 'Tasha', 'Tashina', 'Tasia', 'Tatia', 'Tatiana',
        'Tatianna', 'Tatum', 'Tatyana', 'Tatyanna', 'Tawana', 'Tawanda',
        'Tawanna', 'Tawny', 'Tawnya', 'Taya', 'Tayla', 'Tayler', 'Taylor',
        'Tea', 'Teagan', 'Teela', 'Teena', 'Tella', 'Tempie', 'Tena', 'Tenika',
        'Tenisha', 'Tennessee', 'Tennie', 'Tennille', 'Tera', 'Teresa',
        'Terese', 'Teressa', 'Teri', 'Terra', 'Terri', 'Terrie', 'Terry',
        'Tess', 'Tessa', 'Tessie', 'Texanna', 'Texas', 'Texie', 'Thalia',
        'Thea', 'Theda', 'Thekla', 'Thelma', 'Theodocia', 'Theodora',
        'Theodosia', 'Theola', 'Theresa', 'Therese', 'Theresia', 'Theta',
        'Thomasina', 'Thora', 'Thresa', 'Thursa', 'Thyra', 'Tia', 'Tiana',
        'Tianna', 'Tiara', 'Tiarra', 'Tiera', 'Tierra', 'Tiesha', 'Tiffani',
        'Tiffanie', 'Tiffany', 'Tilda', 'Tilla', 'Tillie', 'Tina', 'Tiney',
        'Tinie', 'Tinnie', 'Tiny', 'Tisa', 'Tisha', 'Tishie', 'Tobi', 'Toby',
        'Toccara', 'Tomasa', 'Tomeka', 'Tomika', 'Tommie', 'Tonda', 'Toni',
        'Tonia', 'Tonja', 'Tonya', 'Tori', 'Torie', 'Torrie', 'Tory', 'Tosha',
        'Toshiko', 'Towanda', 'Toya', 'Tracee', 'Tracey', 'Traci', 'Tracie',
        'Tracy', 'Treasure', 'Treena', 'Trena', 'Tresa', 'Tressa', 'Tressie',
        'Treva', 'Tricia', 'Trilby', 'Trina', 'Trinidad', 'Trinity', 'Trish',
        'Trisha', 'Trista', 'Tristan', 'Tristen', 'Trudi', 'Trudie', 'Trudy',
        'Trula', 'Tula', 'Twila', 'Twyla', 'Tyesha', 'Tyra', 'Ula', 'Una',
        'Unique', 'Unknown', 'Ura', 'Ursula', 'Vada', 'Val', 'Valarie',
        'Valencia', 'Valentina', 'Valentine', 'Valeria', 'Valerie', 'Valery',
        'Valinda', 'Vallie', 'Valorie', 'Vanesa', 'Vanessa', 'Vannie', 'Vara',
        'Vashti', 'Vassie', 'Veda', 'Vela', 'Velda', 'Velia', 'Vella', 'Velma',
        'Velva', 'Velvet', 'Vena', 'Venessa', 'Venice', 'Venie', 'Venita',
        'Vennie', 'Venus', 'Veola', 'Vera', 'Verda', 'Verdell', 'Verdie',
        'Verena', 'Vergie', 'Verla', 'Verlene', 'Verlie', 'Verna', 'Verne',
        'Vernell', 'Vernelle', 'Vernetta', 'Vernia', 'Vernice', 'Vernie',
        'Vernita', 'Verona', 'Veronica', 'Versa', 'Versie', 'Vertie', 'Vessie',
        'Vesta', 'Veta', 'Veva', 'Vicie', 'Vickey', 'Vicki', 'Vickie', 'Vicky',
        'Victoria', 'Victorine', 'Victory', 'Vicy', 'Vida', 'Vikki', 'Villa',
        'Vilma', 'Vina', 'Vincenza', 'Viney', 'Vinie', 'Vinnie', 'Viola',
        'Violet', 'Violeta', 'Violetta', 'Violette', 'Vira', 'Virdie',
        'Virgia', 'Virgie', 'Virginia', 'Viridiana', 'Vita', 'Viva', 'Vivian',
        'Viviana', 'Vivien', 'Vivienne', 'Vlasta', 'Vonda', 'Vonetta',
        'Vonnie', 'Wanda', 'Waneta', 'Wanita', 'Wava', 'Wende', 'Wendi',
        'Wendy', 'Whitley', 'Whitney', 'Wilda', 'Wilhelmina', 'Wilhelmine',
        'Willa', 'Willene', 'Willia', 'Willie', 'Williemae', 'Willodean',
        'Willow', 'Wilma', 'Windy', 'Winifred', 'Winnie', 'Winnifred',
        'Winona', 'Winter', 'Wynona', 'Xena', 'Ximena', 'Xiomara', 'Yadira',
        'Yahaira', 'Yajaira', 'Yamilet', 'Yamilex', 'Yareli', 'Yaretzi',
        'Yaritza', 'Yasmeen', 'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia',
        'Yessenia', 'Yetta', 'Yolanda', 'Yolonda', 'Yoselin', 'Yoshiko',
        'Yuliana', 'Yulisa', 'Yulissa', 'Yuridia', 'Yvette', 'Yvonne', 'Zada',
        'Zadie', 'Zaida', 'Zana', 'Zandra', 'Zaniyah', 'Zara', 'Zaria',
        'Zariah', 'Zela', 'Zelda', 'Zelia', 'Zella', 'Zelma', 'Zelpha', 'Zena',
        'Zenobia', 'Zeta', 'Zetta', 'Zettie', 'Zhane', 'Zillah', 'Zilpah',
        'Zilpha', 'Zina', 'Zion', 'Zita', 'Zoa', 'Zoe', 'Zoey', 'Zoie', 'Zola',
        'Zona', 'Zora', 'Zula'

    )

    first_names_male = ('Aaden', 'Aarav', 'Aaron', 'Ab', 'Abb', 'Abbott',
        'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abie',
        'Abner', 'Abraham', 'Abram', 'Ace', 'Acey', 'Acie', 'Acy', 'Adalberto',
        'Adam', 'Adams', 'Adan', 'Add', 'Adelard', 'Adelbert', 'Aden', 'Adin',
        'Aditya', 'Adlai', 'Admiral', 'Adolf', 'Adolfo', 'Adolph', 'Adolphus',
        'Adonis', 'Adrain', 'Adrian', 'Adriel', 'Adrien', 'Adron', 'Aedan',
        'Agustin', 'Agustus', 'Ah', 'Ahmad', 'Ahmed', 'Aidan', 'Aiden',
        'Aidyn', 'Aime', 'Akeem', 'Al', 'Alan', 'Alanzo', 'Albert', 'Alberto',
        'Albertus', 'Albin', 'Albion', 'Alby', 'Alcee', 'Alcide', 'Alden',
        'Aldo', 'Alec', 'Aleck', 'Alejandro', 'Alek', 'Alessandro', 'Alex',
        'Alexande', 'Alexander', 'Alexandre', 'Alexandro', 'Alexis',
        'Alexzander', 'Alf', 'Alferd', 'Alfie', 'Alfonse', 'Alfonso',
        'Alfonzo', 'Alford', 'Alfred', 'Alfredo', 'Alger', 'Algernon', 'Algie',
        'Algot', 'Ali', 'Alijah', 'Allan', 'Allen', 'Allyn', 'Almer', 'Almon',
        'Almond', 'Almus', 'Alois', 'Alonso', 'Alonza', 'Alonzo', 'Aloys',
        'Aloysius', 'Alpheus', 'Alphons', 'Alphonse', 'Alphonso', 'Alphonsus',
        'Alston', 'Alto', 'Alton', 'Alva', 'Alvah', 'Alvan', 'Alvaro', 'Alver',
        'Alvia', 'Alvie', 'Alvin', 'Alvis', 'Alvy', 'Alwin', 'Amado', 'Amare',
        'Amari', 'Amarion', 'Amasa', 'Ambers', 'Ambrose', 'Americo', 'Amerigo',
        'Amil', 'Amin', 'Amir', 'Amit', 'Ammon', 'Amon', 'Amos', 'Ananias',
        'Anastacio', 'Anatole', 'Ancel', 'Ancil', 'Anders', 'Anderson',
        'Andon', 'Andra', 'Andrae', 'Andre', 'Andreas', 'Andres', 'Andrew',
        'Andy', 'Anfernee', 'Angel', 'Angelo', 'Angus', 'Anibal', 'Ansel',
        'Anson', 'Anthoney', 'Anthony', 'Antione', 'Antoine', 'Anton',
        'Antone', 'Antonio', 'Antony', 'Antwain', 'Antwan', 'Antwon', 'Anwar',
        'Arba', 'Arbie', 'Arch', 'Archer', 'Archibald', 'Archie', 'Ardell',
        'Arden', 'Ari', 'Aric', 'Arjun', 'Arlan', 'Arland', 'Arlen', 'Arley',
        'Arlie', 'Arlin', 'Arlington', 'Arlis', 'Arlo', 'Arlyn', 'Arman',
        'Armand', 'Armando', 'Armani', 'Armin', 'Armond', 'Armstead', 'Arnav',
        'Arne', 'Arnett', 'Arnie', 'Arno', 'Arnold', 'Arnoldo', 'Arnulfo',
        'Aron', 'Arron', 'Arsenio', 'Art', 'Arther', 'Arthor', 'Arthur',
        'Artie', 'Artis', 'Arturo', 'Arvel', 'Arvid', 'Arvil', 'Arvin', 'Arvo',
        'Aryan', 'Asa', 'Asberry', 'Asbury', 'Ashby', 'Asher', 'Ashton',
        'Atha', 'Atlas', 'Atticus', 'Attilio', 'Aubra', 'Aubrey', 'Audie',
        'Audley', 'Audy', 'August', 'Auguste', 'Augustin', 'Augustine',
        'Augustus', 'Aurelio', 'Aurthur', 'Austen', 'Austin', 'Auston',
        'Austyn', 'Auther', 'Author', 'Authur', 'Autry', 'Avery', 'Avon',
        'Axel', 'Ayaan', 'Aydan', 'Ayden', 'Aydin', 'Babe', 'Babyboy',
        'Bailey', 'Baker', 'Baldwin', 'Ballard', 'Banks', 'Barnard', 'Barnett',
        'Barney', 'Barnie', 'Baron', 'Barrett', 'Barrie', 'Barron', 'Barry',
        'Bart', 'Bartholomew', 'Bartley', 'Barton', 'Bascom', 'Basil',
        'Baxter', 'Bayard', 'Beau', 'Beckett', 'Beckham', 'Bedford', 'Beecher',
        'Bell', 'Belton', 'Ben', 'Benard', 'Benedict', 'Benito', 'Benjaman',
        'Benjamen', 'Benjamin', 'Benjamine', 'Benji', 'Benjiman', 'Benjman',
        'Bennett', 'Bennie', 'Benny', 'Benson', 'Bentley', 'Benton', 'Berkley',
        'Berlin', 'Bernard', 'Bernardo', 'Bernhard', 'Bernie', 'Berry', 'Bert',
        'Bertie', 'Berton', 'Bertram', 'Bertrand', 'Beryl', 'Bethel', 'Bilal',
        'Bill', 'Billie', 'Billy', 'Bird', 'Birt', 'Bishop', 'Bjorn', 'Blain',
        'Blaine', 'Blair', 'Blaise', 'Blake', 'Blanchard', 'Blane', 'Blas',
        'Blaze', 'Bliss', 'Bluford', 'Bo', 'Bob', 'Bobbie', 'Bobby', 'Bode',
        'Bolden', 'Booker', 'Boone', 'Boris', 'Bose', 'Boss', 'Boston',
        'Bowman', 'Boyce', 'Boyd', 'Boysie', 'Brad', 'Braden', 'Bradford',
        'Bradley', 'Bradly', 'Brady', 'Bradyn', 'Braeden', 'Braedon',
        'Braiden', 'Brain', 'Branch', 'Brandan', 'Branden', 'Brandin',
        'Brandon', 'Brandt', 'Brandy', 'Brandyn', 'Brannon', 'Branson',
        'Brant', 'Brantley', 'Braulio', 'Braxton', 'Brayan', 'Brayden',
        'Braydon', 'Braylen', 'Braylon', 'Brendan', 'Brenden', 'Brendon',
        'Brennan', 'Brennen', 'Brennon', 'Brent', 'Brenton', 'Bret', 'Brett',
        'Brian', 'Brice', 'Bridger', 'Brien', 'Brion', 'Britt', 'Brittany',
        'Britton', 'Brock', 'Broderick', 'Brodie', 'Brody', 'Brogan',
        'Bronson', 'Brook', 'Brooks', 'Brown', 'Bruce', 'Bruno', 'Bryan',
        'Bryant', 'Bryce', 'Brycen', 'Bryon', 'Bryson', 'Bryton', 'Buck',
        'Bud', 'Budd', 'Buddie', 'Buddy', 'Buel', 'Buell', 'Buford', 'Bunk',
        'Burdette', 'Buren', 'Burgess', 'Burk', 'Burke', 'Burl', 'Burleigh',
        'Burley', 'Burnell', 'Burnett', 'Burney', 'Burnice', 'Burnie', 'Burns',
        'Burr', 'Burrel', 'Burrell', 'Burt', 'Burton', 'Bush', 'Buster',
        'Butch', 'Butler', 'Bynum', 'Byrd', 'Byron', 'Cade', 'Caden', 'Cael',
        'Caesar', 'Caiden', 'Cain', 'Cal', 'Cale', 'Caleb', 'Calhoun',
        'Callie', 'Callum', 'Calvin', 'Cam', 'Camden', 'Cameron', 'Camilo',
        'Campbell', 'Camren', 'Camron', 'Camryn', 'Candido', 'Cannon',
        'Canyon', 'Cap', 'Captain', 'Carey', 'Carl', 'Carleton', 'Carlie',
        'Carlisle', 'Carlo', 'Carlos', 'Carlton', 'Carlyle', 'Carmel',
        'Carmelo', 'Carmen', 'Carmine', 'Carnell', 'Carrie', 'Carrol',
        'Carroll', 'Carsen', 'Carson', 'Carter', 'Cary', 'Cas', 'Case',
        'Casen', 'Casey', 'Cash', 'Casimer', 'Casimir', 'Casimiro', 'Cason',
        'Casper', 'Cass', 'Cassidy', 'Cassie', 'Cassius', 'Caswell', 'Cato',
        'Cayden', 'Ceasar', 'Cecil', 'Cedric', 'Cedrick', 'Celestino',
        'Cephus', 'Cesar', 'Ceylon', 'Chace', 'Chad', 'Chadd', 'Chadrick',
        'Chadwick', 'Chaim', 'Chalmer', 'Chalmers', 'Champ', 'Chance',
        'Chancey', 'Chancy', 'Chandler', 'Channing', 'Charle', 'Charles',
        'Charley', 'Charlie', 'Charls', 'Charlton', 'Charly', 'Chas', 'Chase',
        'Chauncey', 'Chauncy', 'Chaz', 'Che', 'Chesley', 'Chester', 'Chet',
        'Cheyenne', 'Chin', 'Chip', 'Chris', 'Christ', 'Christian',
        'Christina', 'Christion', 'Christop', 'Christoper', 'Christophe',
        'Christopher', 'Chuck', 'Cicero', 'Clabe', 'Claiborne', 'Clair',
        'Clarance', 'Clare', 'Clarence', 'Clark', 'Clarke', 'Clarnce', 'Claud',
        'Claude', 'Claudie', 'Claudio', 'Claudius', 'Claus', 'Clay', 'Clayton',
        'Clearence', 'Cleave', 'Clell', 'Clem', 'Clemence', 'Clemens',
        'Clement', 'Clemente', 'Clemmie', 'Clemon', 'Cleo', 'Cleon', 'Cletus',
        'Cleve', 'Cleveland', 'Clide', 'Cliff', 'Clifford', 'Clifton', 'Clint',
        'Clinton', 'Clive', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Codey',
        'Codi', 'Codie', 'Cody', 'Coen', 'Cohen', 'Colbert', 'Colby', 'Cole',
        'Coleman', 'Coleton', 'Coley', 'Colie', 'Colin', 'Collie', 'Collier',
        'Collin', 'Collins', 'Collis', 'Colon', 'Colonel', 'Colt', 'Colten',
        'Colter', 'Colton', 'Columbus', 'Colvin', 'Commodore', 'Con', 'Conard',
        'Conley', 'Conner', 'Connie', 'Connor', 'Conor', 'Conrad',
        'Constantine', 'Conway', 'Coolidge', 'Cooper', 'Corbett', 'Corbin',
        'Cordaro', 'Cordell', 'Cordero', 'Corey', 'Cornel', 'Cornelious',
        'Cornelius', 'Cornell', 'Corry', 'Cortez', 'Cortney', 'Corwin', 'Cory',
        'Cosmo', 'Coty', 'Council', 'Courtland', 'Courtney', 'Coy', 'Craig',
        'Crawford', 'Creed', 'Cris', 'Cristian', 'Cristobal', 'Cristofer',
        'Cristopher', 'Crockett', 'Cruz', 'Cullen', 'Curley', 'Curt', 'Curtis',
        'Curtiss', 'Cyril', 'Cyrus', 'Dabney', 'Dakoda', 'Dakota', 'Dakotah',
        'Dale', 'Dallas', 'Dallin', 'Dalton', 'Dalvin', 'Damarcus', 'Damari',
        'Damarion', 'Dameon', 'Damian', 'Damien', 'Damion', 'Damon', 'Damond',
        'Dan', 'Dana', 'Dandre', 'Dane', 'Dangelo', 'Danial', 'Daniel', 'Dann',
        'Dannie', 'Danniel', 'Danny', 'Dante', 'Daquan', 'Darby', 'Darcy',
        'Darell', 'Daren', 'Darian', 'Darien', 'Darin', 'Dario', 'Darion',
        'Darius', 'Darl', 'Darnell', 'Darold', 'Daron', 'Darrel', 'Darrell',
        'Darren', 'Darrian', 'Darrick', 'Darrien', 'Darrin', 'Darrion',
        'Darrius', 'Darron', 'Darry', 'Darryl', 'Darryle', 'Darryll', 'Darryn',
        'Darvin', 'Darwin', 'Darwyn', 'Daryl', 'Daryle', 'Daryn', 'Dashawn',
        'Daulton', 'Daunte', 'Davante', 'Dave', 'Davey', 'Davian', 'David',
        'Davie', 'Davin', 'Davion', 'Davis', 'Davon', 'Davonta', 'Davonte',
        'Davy', 'Dawson', 'Dax', 'Daxton', 'Dayne', 'Dayton', 'Deacon', 'Dean',
        'Deandre', 'Deane', 'Deangelo', 'Deante', 'Declan', 'Dedric',
        'Dedrick', 'Deegan', 'Deforest', 'Deion', 'Dejon', 'Dejuan', 'Del',
        'Delano', 'Delbert', 'Dell', 'Della', 'Delma', 'Delmar', 'Delmas',
        'Delmer', 'Delmus', 'Delos', 'Delphin', 'Delton', 'Delvin', 'Delwin',
        'Demarco', 'Demarcus', 'Demario', 'Demarion', 'Demetri', 'Demetric',
        'Demetrios', 'Demetrius', 'Demian', 'Demond', 'Demonte', 'Dempsey',
        'Denis', 'Dennie', 'Dennis', 'Denny', 'Denton', 'Denver', 'Denzel',
        'Denzell', 'Denzil', 'Deon', 'Deondre', 'Deonta', 'Deontae', 'Deonte',
        'Dequan', 'Derald', 'Dereck', 'Derek', 'Dereon', 'Deric', 'Derick',
        'Derik', 'Derl', 'Deron', 'Derrek', 'Derrell', 'Derrick', 'Derwin',
        'Deryl', 'Desean', 'Deshaun', 'Deshawn', 'Desi', 'Desmond', 'Dessie',
        'Destin', 'Destry', 'Devan', 'Devante', 'Devaughn', 'Deven', 'Devin',
        'Devon', 'Devonta', 'Devontae', 'Devonte', 'Devyn', 'Deward',
        'Dewayne', 'Dewey', 'Dewitt', 'Dexter', 'Diallo', 'Diamond', 'Diane',
        'Dick', 'Dickie', 'Diego', 'Dijon', 'Dilan', 'Dillan', 'Dillard',
        'Dillion', 'Dillon', 'Dimitri', 'Dimitrios', 'Dink', 'Dino', 'Dion',
        'Dionicio', 'Dionte', 'Dirk', 'Dixon', 'Doc', 'Dock', 'Doctor', 'Doll',
        'Dolph', 'Dolphus', 'Domenic', 'Domenick', 'Domenico', 'Domingo',
        'Dominic', 'Dominick', 'Dominik', 'Don', 'Donaciano', 'Donal',
        'Donald', 'Donat', 'Donato', 'Donavan', 'Donavon', 'Dondre', 'Donell',
        'Donn', 'Donnell', 'Donnie', 'Donny', 'Donovan', 'Donta', 'Dontae',
        'Donte', 'Dora', 'Dorian', 'Dorman', 'Dorr', 'Dorris', 'Dorsey',
        'Doss', 'Doug', 'Douglas', 'Douglass', 'Dow', 'Doyle', 'Dozier',
        'Drake', 'Draven', 'Drew', 'Drury', 'Duane', 'Duard', 'Dudley', 'Duff',
        'Duke', 'Duncan', 'Durell', 'Durrell', 'Durward', 'Durwood', 'Dustan',
        'Dustin', 'Dusty', 'Dustyn', 'Duwayne', 'Dwain', 'Dwaine', 'Dwane',
        'Dwayne', 'Dwight', 'Dwyane', 'Dylan', 'Dyllan', 'Dylon', 'Ean',
        'Earl', 'Earle', 'Earley', 'Earlie', 'Early', 'Earnest', 'Easton',
        'Ebb', 'Ebbie', 'Eben', 'Ebenezer', 'Eber', 'Ebert', 'Ed', 'Edd',
        'Eddie', 'Eddy', 'Eden', 'Edgar', 'Edgardo', 'Edie', 'Edison', 'Edmon',
        'Edmond', 'Edmund', 'Edsel', 'Edson', 'Eduardo', 'Edw', 'Edward',
        'Edwardo', 'Edwin', 'Effie', 'Efrain', 'Efrem', 'Efren', 'Egbert',
        'Einar', 'Eino', 'Elam', 'Elbert', 'Elbridge', 'Elby', 'Elden',
        'Elder', 'Eldon', 'Eldred', 'Eldridge', 'Elex', 'Elgie', 'Elgin',
        'Eli', 'Elian', 'Elias', 'Elick', 'Elie', 'Eliezer', 'Eliga', 'Eligah',
        'Elige', 'Elihu', 'Elijah', 'Eliot', 'Eliseo', 'Elisha', 'Elizah',
        'Ell', 'Ellery', 'Elliot', 'Elliott', 'Ellis', 'Ellison', 'Ellsworth',
        'Ellwood', 'Elmer', 'Elmo', 'Elmore', 'Elon', 'Elonzo', 'Eloy',
        'Elroy', 'Elsworth', 'Elton', 'Elvin', 'Elvis', 'Elwin', 'Elwood',
        'Elwyn', 'Ely', 'Elza', 'Elzie', 'Elzy', 'Emanuel', 'Emerson', 'Emery',
        'Emett', 'Emil', 'Emile', 'Emiliano', 'Emilio', 'Emit', 'Emma',
        'Emmanuel', 'Emmet', 'Emmett', 'Emmit', 'Emmitt', 'Emmons', 'Emory',
        'Emry', 'Encarnacion', 'Ennis', 'Enoch', 'Enos', 'Enrico', 'Enrique',
        'Enzo', 'Ephraim', 'Ephram', 'Ephriam', 'Epifanio', 'Erasmo',
        'Erasmus', 'Erastus', 'Erby', 'Eric', 'Erich', 'Erick', 'Erie', 'Erik',
        'Erin', 'Erland', 'Erle', 'Erling', 'Ernest', 'Ernesto', 'Ernie',
        'Ernst', 'Errol', 'Ervin', 'Erving', 'Erwin', 'Esau', 'Esco',
        'Esequiel', 'Esker', 'Esley', 'Essex', 'Esteban', 'Estel', 'Estes',
        'Estevan', 'Estill', 'Eston', 'Ethan', 'Ethelbert', 'Ethen', 'Eugene',
        'Eugenio', 'Eusebio', 'Eustace', 'Evan', 'Evander', 'Evans', 'Evelyn',
        'Everet', 'Everett', 'Everette', 'Evert', 'Evertt', 'Ewald', 'Ewart',
        'Ewell', 'Ewin', 'Ewing', 'Ezekiel', 'Ezell', 'Ezequiel', 'Ezra',
        'Ezzard', 'Fabian', 'Faron', 'Farrell', 'Farris', 'Fate', 'Faustino',
        'Fayette', 'Fed', 'Federico', 'Felipe', 'Felix', 'Felton', 'Fenton',
        'Ferd', 'Ferdinand', 'Ferman', 'Fernand', 'Fernando', 'Ferrell',
        'Ferris', 'Festus', 'Fidel', 'Fidencio', 'Fielding', 'Finis', 'Finley',
        'Finn', 'Finnegan', 'Firman', 'Fisher', 'Fitzgerald', 'Fitzhugh',
        'Fleet', 'Flem', 'Fleming', 'Fletcher', 'Flint', 'Florencio',
        'Florentino', 'Florian', 'Floy', 'Floyd', 'Foch', 'Ford', 'Forest',
        'Forrest', 'Foster', 'Fount', 'Foy', 'Frances', 'Francesco', 'Francis',
        'Francisco', 'Franco', 'Frank', 'Frankie', 'Franklin', 'Franklyn',
        'Franz', 'Frazier', 'Fred', 'Freddie', 'Freddy', 'Frederic',
        'Frederick', 'Fredie', 'Fredric', 'Fredrick', 'Fredy', 'Freeman',
        'Fremont', 'French', 'Friend', 'Fritz', 'Fuller', 'Fulton', 'Furman',
        'Gabe', 'Gabriel', 'Gael', 'Gaetano', 'Gage', 'Gaige', 'Gail',
        'Gaines', 'Gaither', 'Gale', 'Galen', 'Gannon', 'Gardner', 'Garett',
        'Garey', 'Garfield', 'Garland', 'Garner', 'Garnet', 'Garnett',
        'Garold', 'Garret', 'Garrett', 'Garrick', 'Garrison', 'Garry', 'Garth',
        'Garvin', 'Gary', 'Gasper', 'Gaston', 'Gauge', 'Gaven', 'Gavin',
        'Gavyn', 'Gay', 'Gayle', 'Gaylen', 'Gaylon', 'Gaylord', 'Gearld',
        'Geary', 'Gee', 'Genaro', 'Gene', 'General', 'Genie', 'Gennaro',
        'Geno', 'Geo', 'Geoff', 'Geoffrey', 'George', 'Georgie', 'Geovanni',
        'Gerald', 'Geraldo', 'Gerard', 'Gerardo', 'Gerhard', 'Gerhardt',
        'Germaine', 'German', 'Gerold', 'Gerrit', 'Gerry', 'Giancarlo',
        'Gianni', 'Gibson', 'Gideon', 'Gifford', 'Gil', 'Gilbert', 'Gilberto',
        'Giles', 'Gilford', 'Gilman', 'Gilmer', 'Gilmore', 'Gino', 'Giovani',
        'Giovanni', 'Giovanny', 'Giuseppe', 'Gladstone', 'Glen', 'Glendon',
        'Glenn', 'Glenwood', 'Glover', 'Glynn', 'Godfrey', 'Goebel', 'Golden',
        'Gonzalo', 'Gorden', 'Gordon', 'Gorge', 'Gottlieb', 'Governor',
        'Grady', 'Grafton', 'Graham', 'Grant', 'Granville', 'Graves', 'Gray',
        'Graydon', 'Grayling', 'Grayson', 'Green', 'Greene', 'Greg', 'Gregg',
        'Greggory', 'Gregorio', 'Gregory', 'Greyson', 'Griffin', 'Griffith',
        'Grove', 'Grover', 'Guido', 'Guilford', 'Guillermo', 'Gunnar',
        'Gunner', 'Gurney', 'Gus', 'Guss', 'Gussie', 'Gust', 'Gustaf',
        'Gustav', 'Gustave', 'Gustavo', 'Gustavus', 'Guthrie', 'Guy', 'Haden',
        'Hadley', 'Haiden', 'Hakeem', 'Hakim', 'Hal', 'Halbert', 'Hale',
        'Hall', 'Halley', 'Hallie', 'Halsey', 'Ham', 'Hamilton', 'Hamp',
        'Hampton', 'Hamza', 'Handy', 'Hank', 'Hans', 'Hansel', 'Hansford',
        'Hanson', 'Harden', 'Hardie', 'Hardin', 'Harding', 'Hardy', 'Harl',
        'Harlan', 'Harland', 'Harlen', 'Harley', 'Harlie', 'Harlon', 'Harlow',
        'Harm', 'Harman', 'Harmon', 'Harold', 'Harper', 'Harrell', 'Harrie',
        'Harris', 'Harrison', 'Harrold', 'Harry', 'Hart', 'Hartley',
        'Hartwell', 'Harve', 'Harvey', 'Harvie', 'Harvy', 'Hasan', 'Haskell',
        'Hassan', 'Hattie', 'Haven', 'Hayden', 'Hayes', 'Hays', 'Hayward',
        'Haywood', 'Hazen', 'Heath', 'Heber', 'Hebert', 'Hector', 'Helmer',
        'Hence', 'Henderson', 'Henery', 'Henri', 'Henry', 'Herb', 'Herbert',
        'Heriberto', 'Herman', 'Hermann', 'Hermon', 'Hernan', 'Herschel',
        'Hershel', 'Hershell', 'Hervey', 'Heyward', 'Hezekiah', 'Hezzie',
        'Hideo', 'Hilario', 'Hilary', 'Hilbert', 'Hill', 'Hillard', 'Hillary',
        'Hillery', 'Hilliard', 'Hilmer', 'Hilton', 'Hiram', 'Hiroshi',
        'Hjalmar', 'Hjalmer', 'Hobart', 'Hobert', 'Hobson', 'Hoke', 'Holden',
        'Holland', 'Hollie', 'Hollis', 'Holmes', 'Homer', 'Hoover', 'Hope',
        'Horace', 'Horacio', 'Horatio', 'Horton', 'Hosea', 'Hosie', 'Hosteen',
        'Houston', 'Howard', 'Howell', 'Hoy', 'Hoyt', 'Hubbard', 'Hubert',
        'Hudson', 'Huey', 'Hugh', 'Hughes', 'Hughey', 'Hughie', 'Hugo',
        'Humberto', 'Humphrey', 'Hung', 'Hunt', 'Hunter', 'Hurbert', 'Hurley',
        'Huston', 'Huy', 'Hyman', 'Hymen', 'Hyrum', 'Ian', 'Ibrahim', 'Ida',
        'Ignacio', 'Ignatius', 'Ignatz', 'Ike', 'Illya', 'Imanol', 'Immanuel',
        'Infant', 'Ingram', 'Ira', 'Irl', 'Irven', 'Irvin', 'Irvine', 'Irving',
        'Irwin', 'Isaac', 'Isaak', 'Isadore', 'Isai', 'Isaiah', 'Isaias',
        'Isam', 'Ishaan', 'Isham', 'Ishmael', 'Isiah', 'Isidor', 'Isidore',
        'Isidro', 'Ismael', 'Isom', 'Israel', 'Isreal', 'Issac', 'Iva', 'Ivan',
        'Iver', 'Iverson', 'Ivey', 'Ivor', 'Ivory', 'Ivy', 'Izaiah', 'Izayah',
        'Jabari', 'Jabbar', 'Jabez', 'Jace', 'Jack', 'Jackson', 'Jacky',
        'Jacob', 'Jacoby', 'Jacques', 'Jacquez', 'Jade', 'Jaden', 'Jadiel',
        'Jadon', 'Jadyn', 'Jaeden', 'Jagger', 'Jaheem', 'Jaheim', 'Jahiem',
        'Jahir', 'Jaiden', 'Jaidyn', 'Jaime', 'Jaimie', 'Jair', 'Jairo',
        'Jajuan', 'Jake', 'Jakob', 'Jakobe', 'Jaleel', 'Jalen', 'Jalon',
        'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamari', 'Jamarion', 'Jame',
        'Jameel', 'Jamel', 'James', 'Jameson', 'Jamey', 'Jamie', 'Jamil',
        'Jamin', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jaquan', 'Jaquez',
        'Jarad', 'Jared', 'Jaren', 'Jaret', 'Jarett', 'Jarod', 'Jaron',
        'Jarrad', 'Jarred', 'Jarrell', 'Jarret', 'Jarrett', 'Jarrod', 'Jarvis',
        'Jase', 'Jasen', 'Jasiah', 'Jason', 'Jasper', 'Javen', 'Javier',
        'Javion', 'Javon', 'Javonte', 'Jax', 'Jaxen', 'Jaxon', 'Jaxson',
        'Jaxton', 'Jay', 'Jayce', 'Jaycob', 'Jaydan', 'Jayden', 'Jaydin',
        'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon', 'Jayme', 'Jaymes',
        'Jayson', 'Jayvion', 'Jayvon', 'Jean', 'Jeb', 'Jed', 'Jedediah',
        'Jedidiah', 'Jeff', 'Jefferey', 'Jefferson', 'Jeffery', 'Jeffie',
        'Jeffrey', 'Jeffry', 'Jelani', 'Jemal', 'Jennings', 'Jens', 'Jensen',
        'Jep', 'Jeptha', 'Jerad', 'Jerald', 'Jeramiah', 'Jeramie', 'Jeramy',
        'Jere', 'Jered', 'Jerel', 'Jereme', 'Jeremey', 'Jeremiah', 'Jeremie',
        'Jeremy', 'Jerimiah', 'Jerimy', 'Jermain', 'Jermaine', 'Jermey',
        'Jerod', 'Jerold', 'Jerome', 'Jeromy', 'Jerrad', 'Jerrel', 'Jerrell',
        'Jerrod', 'Jerrold', 'Jerry', 'Jess', 'Jesse', 'Jessee', 'Jessie',
        'Jessy', 'Jesus', 'Jethro', 'Jett', 'Jettie', 'Jevon', 'Jewell',
        'Jiles', 'Jim', 'Jimmie', 'Jimmy', 'Joaquin', 'Job', 'Jobe', 'Joe',
        'Joel', 'Joeseph', 'Joesph', 'Joey', 'Johan', 'Johathan', 'John',
        'Johnathan', 'Johnathon', 'Johney', 'Johnie', 'Johnnie', 'Johnny',
        'Johnpaul', 'Johnson', 'Johny', 'Jon', 'Jonah', 'Jonas', 'Jonatan',
        'Jonathan', 'Jonathon', 'Jones', 'Jonnie', 'Jordan', 'Jorden', 'Jordi',
        'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jory', 'Jose', 'Josef',
        'Joseluis', 'Joseph', 'Josephus', 'Josh', 'Joshua', 'Joshuah',
        'Josiah', 'Josue', 'Jovan', 'Jovani', 'Jovanni', 'Jovanny', 'Jovany',
        'Joy', 'Juan', 'Judah', 'Judd', 'Jude', 'Judge', 'Judson', 'Juelz',
        'Jule', 'Jules', 'Julian', 'Julien', 'Julio', 'Julious', 'Julius',
        'Juluis', 'Junior', 'Junious', 'Junius', 'Justen', 'Justice', 'Justin',
        'Juston', 'Justus', 'Justyn', 'Juwan', 'Kade', 'Kadeem', 'Kaden',
        'Kadin', 'Kadyn', 'Kaeden', 'Kael', 'Kahlil', 'Kai', 'Kaiden', 'Kale',
        'Kaleb', 'Kalel', 'Kalen', 'Kalvin', 'Kamari', 'Kamden', 'Kameron',
        'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kanye', 'Kareem', 'Kareen',
        'Karim', 'Karl', 'Karson', 'Karter', 'Kasen', 'Kasey', 'Kash', 'Kason',
        'Kavon', 'Kayden', 'Kaye', 'Kayson', 'Kazuo', 'Keagan', 'Keandre',
        'Keanu', 'Keaton', 'Keegan', 'Keenan', 'Keenen', 'Kegan', 'Keifer',
        'Keion', 'Keith', 'Kelan', 'Kelby', 'Kellan', 'Kellen', 'Kelley',
        'Kelly', 'Kelsey', 'Kelton', 'Kelvin', 'Kem', 'Ken', 'Kenan', 'Kendal',
        'Kendall', 'Kendell', 'Kendrick', 'Kenji', 'Kennard', 'Kennedy',
        'Kenneth', 'Kenney', 'Kennith', 'Kennth', 'Kenny', 'Kent', 'Kenton',
        'Kenya', 'Kenyatta', 'Kenyon', 'Keon', 'Kermit', 'Kerry', 'Kerwin',
        'Keshaun', 'Keshawn', 'Kevan', 'Keven', 'Kevin', 'Kevon', 'Keyon',
        'Keyshawn', 'Khalid', 'Khalil', 'Khari', 'Khiry', 'Kian', 'Kiara',
        'Kiefer', 'Kiel', 'Kieran', 'Kieth', 'Kiley', 'Killian', 'Kim',
        'Kimball', 'Kimberly', 'King', 'Kingston', 'Kinte', 'Kip', 'Kipp',
        'Kirby', 'Kirk', 'Kirt', 'Kit', 'Kiyoshi', 'Knox', 'Knute', 'Kobe',
        'Koby', 'Koda', 'Kody', 'Koen', 'Kolby', 'Kole', 'Kolten', 'Kolton',
        'Konner', 'Konnor', 'Korbin', 'Kordell', 'Korey', 'Kory', 'Kraig',
        'Kris', 'Krish', 'Kristen', 'Kristian', 'Kristin', 'Kristofer',
        'Kristoffer', 'Kristopher', 'Kunta', 'Kurt', 'Kurtis', 'Kwame', 'Kyan',
        'Kylan', 'Kyle', 'Kyler', 'Kymani', 'Kyree', 'Kyson', 'Lacey', 'Lacy',
        'Ladarius', 'Laddie', 'Lafayette', 'Lafe', 'Lamar', 'Lamarcus',
        'Lambert', 'Lamont', 'Lamonte', 'Lance', 'Landan', 'Landen', 'Landin',
        'Landon', 'Landyn', 'Lane', 'Lannie', 'Lanny', 'Laquan', 'Lark',
        'Larkin', 'Laron', 'Larry', 'Lars', 'Larue', 'Lary', 'Lashawn',
        'Latrell', 'Laurance', 'Laurel', 'Laurence', 'Lavar', 'Lavern',
        'Laverne', 'Lavon', 'Lawerence', 'Lawrance', 'Lawrence', 'Lawson',
        'Lawton', 'Lawyer', 'Layne', 'Layton', 'Lazaro', 'Le', 'Lea', 'Leamon',
        'Leander', 'Leandro', 'Lee', 'Leeroy', 'Leif', 'Leigh', 'Leighton',
        'Leland', 'Lem', 'Lemmie', 'Lemon', 'Lemuel', 'Len', 'Lena', 'Lenard',
        'Lennie', 'Lennon', 'Lenny', 'Lenon', 'Lenord', 'Lenwood', 'Leo',
        'Leon', 'Leonard', 'Leonardo', 'Leonce', 'Leonel', 'Leonidas',
        'Leopold', 'Leopoldo', 'Leroy', 'Les', 'Lesley', 'Leslie', 'Less',
        'Lessie', 'Lester', 'Levar', 'Levern', 'Levi', 'Levie', 'Levin',
        'Levon', 'Levy', 'Lew', 'Lewis', 'Lex', 'Lexie', 'Liam', 'Lige',
        'Lilburn', 'Lillard', 'Lim', 'Lincoln', 'Lindbergh', 'Lindell',
        'Linden', 'Lindsay', 'Lindsey', 'Lindy', 'Link', 'Linn', 'Linnie',
        'Linton', 'Linus', 'Linwood', 'Linzy', 'Lionel', 'Lisandro', 'Lish',
        'Lisle', 'Liston', 'Little', 'Littleton', 'Llewellyn', 'Lloyd',
        'Logan', 'Lon', 'London', 'Lone', 'Loney', 'Long', 'Lonie', 'Lonnie',
        'Lonny', 'Lonzo', 'Lora', 'Loran', 'Loren', 'Lorenz', 'Lorenza',
        'Lorenzo', 'Lorin', 'Loring', 'Lorne', 'Lott', 'Lou', 'Louie', 'Louis',
        'Love', 'Lovell', 'Lovett', 'Lovie', 'Lowell', 'Loy', 'Loyal', 'Loyd',
        'Luc', 'Luca', 'Lucas', 'Lucian', 'Luciano', 'Lucien', 'Lucio',
        'Lucious', 'Lucius', 'Lucky', 'Ludwig', 'Lue', 'Luigi', 'Luis', 'Luka',
        'Lukas', 'Luke', 'Lula', 'Lum', 'Lupe', 'Luster', 'Lute', 'Luther',
        'Luverne', 'Lydell', 'Lyle', 'Lyman', 'Lyn', 'Lyndon', 'Lynn',
        'Lynwood', 'Lyric', 'Mac', 'Macarthur', 'Mace', 'Maceo', 'Mack',
        'Mackenzie', 'Madden', 'Maddox', 'Maddux', 'Madison', 'Mae', 'Mahlon',
        'Major', 'Makai', 'Makhi', 'Mal', 'Malachi', 'Malakai', 'Malaki',
        'Malcolm', 'Malcom', 'Male', 'Malik', 'Malvin', 'Mamie', 'Manford',
        'Manley', 'Manly', 'Mannie', 'Manning', 'Mansfield', 'Manson',
        'Manuel', 'Marc', 'Marcel', 'Marcelino', 'Marcell', 'Marcello',
        'Marcellus', 'Marcelo', 'Marchello', 'Marco', 'Marcos', 'Marcus',
        'Margarito', 'Mariano', 'Mario', 'Marion', 'Marius', 'Mark', 'Markel',
        'Markell', 'Markus', 'Marland', 'Marley', 'Marlin', 'Marlo', 'Marlon',
        'Marlyn', 'Marques', 'Marquez', 'Marquis', 'Marquise', 'Marrion',
        'Marsh', 'Marshal', 'Marshall', 'Mart', 'Martell', 'Martez', 'Martin',
        'Marty', 'Marvin', 'Masao', 'Mason', 'Mat', 'Mateo', 'Math', 'Mathew',
        'Mathews', 'Mathias', 'Matias', 'Matt', 'Matteo', 'Matthew',
        'Matthias', 'Maurice', 'Mauricio', 'Mauro', 'Maury', 'Maverick', 'Max',
        'Maxie', 'Maxim', 'Maximilian', 'Maximiliano', 'Maximillian', 'Maximo',
        'Maximus', 'Maxwell', 'Maxx', 'May', 'Maynard', 'Mayo', 'Mcarthur',
        'Mckinley', 'Mearl', 'Mekhi', 'Mel', 'Melbourne', 'Mell', 'Melton',
        'Melville', 'Melvin', 'Melvyn', 'Memphis', 'Menachem', 'Mercer',
        'Merl', 'Merle', 'Merlin', 'Merlyn', 'Merrill', 'Merritt', 'Merton',
        'Mervin', 'Mervyn', 'Merwin', 'Messiah', 'Metro', 'Meyer', 'Micah',
        'Michael', 'Michal', 'Michale', 'Micheal', 'Michel', 'Michial',
        'Mickey', 'Micky', 'Miguel', 'Miguelangel', 'Mikal', 'Mike', 'Mikeal',
        'Mikel', 'Mikhail', 'Milan', 'Milas', 'Milburn', 'Miles', 'Milford',
        'Millard', 'Miller', 'Mills', 'Milo', 'Milton', 'Miner', 'Minor',
        'Minoru', 'Misael', 'Mitch', 'Mitchel', 'Mitchell', 'Moe', 'Mohamed',
        'Mohammad', 'Mohammed', 'Moises', 'Monroe', 'Mont', 'Montana', 'Monte',
        'Montel', 'Montgomery', 'Montie', 'Montrell', 'Monty', 'Moody',
        'Mordechai', 'Morgan', 'Morris', 'Mortimer', 'Morton', 'Mose', 'Moses',
        'Moshe', 'Muhammad', 'Murdock', 'Murl', 'Murphy', 'Murray', 'Murry',
        'Mustafa', 'Mychal', 'Myer', 'Mykel', 'Myles', 'Myrl', 'Myron',
        'Myrtle', 'Najee', 'Nakia', 'Namon', 'Napoleon', 'Nash', 'Nasir',
        'Nat', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',
        'Neal', 'Ned', 'Needham', 'Neely', 'Nehemiah', 'Neil', 'Nello', 'Nels',
        'Nelson', 'Nery', 'Nestor', 'Nevin', 'Newell', 'Newman', 'Newt',
        'Newton', 'Nicholas', 'Nicholaus', 'Nick', 'Nicklaus', 'Nickolas',
        'Nicky', 'Nico', 'Nicolas', 'Nigel', 'Nikhil', 'Nikko', 'Niko',
        'Nikolai', 'Nikolas', 'Nile', 'Niles', 'Nils', 'Nim', 'Noah', 'Noble',
        'Noe', 'Noel', 'Nolan', 'Nolen', 'Norbert', 'Norberto', 'Norman',
        'Normand', 'Norris', 'North', 'Norton', 'Norval', 'Norwood', 'Nunzio',
        'Oakley', 'Obe', 'Obed', 'Obie', 'Ocie', 'Octave', 'Octavio',
        'Octavius', 'Oda', 'Oddie', 'Odell', 'Odie', 'Odin', 'Odis', 'Odus',
        'Offie', 'Ogden', 'Okey', 'Ola', 'Olaf', 'Olan', 'Oland', 'Ole',
        'Olen', 'Oley', 'Olie', 'Olin', 'Oliver', 'Ollie', 'Olof', 'Omar',
        'Omari', 'Omarion', 'Omer', 'Oneal', 'Ora', 'Oral', 'Oran', 'Orange',
        'Oren', 'Orie', 'Orin', 'Orion', 'Oris', 'Orla', 'Orland', 'Orlando',
        'Orley', 'Orlin', 'Orlo', 'Orren', 'Orrie', 'Orrin', 'Orris', 'Orson',
        'Orval', 'Orvel', 'Orvil', 'Orville', 'Orvin', 'Orvis', 'Osbaldo',
        'Osborn', 'Osborne', 'Oscar', 'Osie', 'Ossie', 'Osvaldo', 'Oswald',
        'Oswaldo', 'Otha', 'Othel', 'Otho', 'Otis', 'Ott', 'Ottie', 'Ottis',
        'Otto', 'Ova', 'Ovid', 'Ovila', 'Owen', 'Owens', 'Ozell', 'Ozie',
        'Ozzie', 'Pablo', 'Page', 'Palmer', 'Paris', 'Park', 'Parker',
        'Parley', 'Parrish', 'Pascal', 'Pasquale', 'Pat', 'Pate', 'Patric',
        'Patrick', 'Paul', 'Paulo', 'Paxton', 'Payton', 'Pearley', 'Pedro',
        'Percival', 'Percy', 'Perley', 'Pernell', 'Perry', 'Pershing', 'Pete',
        'Peter', 'Peyton', 'Phil', 'Philip', 'Phillip', 'Philo', 'Phoenix',
        'Pierce', 'Pierre', 'Pinkney', 'Pleas', 'Pleasant', 'Ples', 'Plummer',
        'Polk', 'Porfirio', 'Porter', 'Posey', 'Powell', 'Pranav', 'Pratt',
        'Prentice', 'Prentiss', 'Presley', 'Press', 'Preston', 'Price',
        'Primus', 'Prince', 'Prosper', 'Pryor', 'Purl', 'Quentin', 'Quincy',
        'Quinn', 'Quint', 'Quinten', 'Quintin', 'Quinton', 'Rae', 'Raekwon',
        'Rafael', 'Rafe', 'Raheem', 'Rahn', 'Rahsaan', 'Rahul', 'Raiden',
        'Rakeem', 'Raleigh', 'Ralph', 'Ramiro', 'Ramon', 'Ramsey', 'Rance',
        'Rand', 'Randal', 'Randall', 'Randel', 'Randell', 'Randle', 'Randolf',
        'Randolph', 'Randy', 'Ransom', 'Raoul', 'Raphael', 'Raquan', 'Ras',
        'Rashaad', 'Rashaan', 'Rashad', 'Rashawn', 'Rasheed', 'Raul', 'Raven',
        'Ray', 'Rayan', 'Rayburn', 'Rayfield', 'Rayford', 'Raymon', 'Raymond',
        'Raymundo', 'Raynard', 'Rayshawn', 'Reagan', 'Reason', 'Red', 'Redden',
        'Redmond', 'Reece', 'Reed', 'Reese', 'Refugio', 'Regan', 'Reggie',
        'Reginal', 'Reginald', 'Regis', 'Reid', 'Reilly', 'Reinaldo',
        'Reinhold', 'Reino', 'Remington', 'Remy', 'Renaldo', 'Renard', 'Rene',
        'Reno', 'Reuben', 'Reubin', 'Rex', 'Rexford', 'Rey', 'Reyes',
        'Reynaldo', 'Reynold', 'Reynolds', 'Rhett', 'Rhoda', 'Rhys', 'Rian',
        'Ricardo', 'Ricci', 'Rice', 'Rich', 'Richard', 'Richie', 'Richmond',
        'Rick', 'Rickey', 'Ricki', 'Rickie', 'Ricky', 'Rico', 'Ridge',
        'Rigoberto', 'Riley', 'Rishi', 'Ritchie', 'River', 'Rob', 'Robb',
        'Robbie', 'Robbin', 'Robby', 'Robert', 'Roberto', 'Robin', 'Robley',
        'Robt', 'Roby', 'Rocco', 'Rock', 'Rocky', 'Rod', 'Roddy', 'Roderic',
        'Roderick', 'Rodger', 'Rodney', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roe',
        'Roel', 'Rogelio', 'Roger', 'Rogers', 'Rohan', 'Roland', 'Rolando',
        'Rolf', 'Roll', 'Rolla', 'Rolland', 'Rollie', 'Rollin', 'Rollo',
        'Roma', 'Roman', 'Rome', 'Romello', 'Romeo', 'Romie', 'Ron', 'Ronal',
        'Ronald', 'Ronaldo', 'Ronan', 'Rondal', 'Ronin', 'Ronnie', 'Ronny',
        'Roosevelt', 'Rory', 'Rosario', 'Rosco', 'Roscoe', 'Rosendo',
        'Rosevelt', 'Ross', 'Rossie', 'Roswell', 'Rowan', 'Rowland', 'Roy',
        'Royal', 'Royce', 'Rube', 'Ruben', 'Rubin', 'Ruby', 'Rudolf',
        'Rudolfo', 'Rudolph', 'Rudy', 'Rueben', 'Ruel', 'Ruffin', 'Ruffus',
        'Rufus', 'Rupert', 'Rush', 'Russ', 'Russel', 'Russell', 'Rustin',
        'Rusty', 'Rutherford', 'Ryan', 'Ryder', 'Ryker', 'Rylan', 'Ryland',
        'Rylee', 'Ryley', 'Ryne', 'Sabastian', 'Sage', 'Saint', 'Sal',
        'Salomon', 'Salvador', 'Salvatore', 'Sam', 'Samie', 'Samir', 'Sammie',
        'Sammy', 'Sampson', 'Samson', 'Samual', 'Samuel', 'Sanders', 'Sandy',
        'Sanford', 'Santana', 'Santiago', 'Santino', 'Santo', 'Santos', 'Saul',
        'Saverio', 'Savion', 'Savon', 'Sawyer', 'Schley', 'Schuyler', 'Scot',
        'Scott', 'Scottie', 'Scotty', 'Seaborn', 'Seamus', 'Sean', 'Sebastian',
        'Sedrick', 'Seldon', 'Selmer', 'Semaj', 'Seneca', 'Sergio', 'Seth',
        'Severo', 'Severt', 'Seward', 'Seymour', 'Shad', 'Shade', 'Shafter',
        'Shamar', 'Shan', 'Shane', 'Shannon', 'Shanon', 'Shaquan', 'Shaquille',
        'Sharif', 'Sharon', 'Shaun', 'Shawn', 'Shay', 'Shayne', 'Shea',
        'Shedrick', 'Shelby', 'Sheldon', 'Shelley', 'Shellie', 'Shelly',
        'Shelton', 'Shemar', 'Shep', 'Shepherd', 'Sheridan', 'Sherman',
        'Sherrill', 'Sherwin', 'Sherwood', 'Shirley', 'Shoji', 'Shon',
        'Shyheim', 'Sid', 'Sidney', 'Sie', 'Sigmund', 'Sigurd', 'Silas',
        'Silver', 'Silvester', 'Silvio', 'Sim', 'Simeon', 'Simmie', 'Simon',
        'Simpson', 'Sincere', 'Sing', 'Skip', 'Skylar', 'Skyler', 'Slade',
        'Smith', 'Sol', 'Soloman', 'Solomon', 'Solon', 'Son', 'Sonny', 'Soren',
        'Spencer', 'Spenser', 'Spurgeon', 'Squire', 'Stacey', 'Stacy',
        'Stafford', 'Stan', 'Stanford', 'Stanislaus', 'Stanley', 'Stanton',
        'Starling', 'Stefan', 'Stephan', 'Stephanie', 'Stephen', 'Stephon',
        'Sterling', 'Stetson', 'Stevan', 'Steve', 'Steven', 'Stevie',
        'Steward', 'Stewart', 'Stone', 'Stonewall', 'Stoney', 'Storm',
        'Stuart', 'Sullivan', 'Sumner', 'Susie', 'Sydney', 'Syed', 'Sylas',
        'Sylvan', 'Sylvanus', 'Sylvester', 'Tab', 'Tad', 'Taft', 'Tahj', 'Taj',
        'Tal', 'Talan', 'Talen', 'Tallie', 'Talmadge', 'Talmage', 'Talon',
        'Tandy', 'Tanner', 'Tarik', 'Tariq', 'Tate', 'Tatsuo', 'Taurean',
        'Taurus', 'Tavares', 'Tavaris', 'Tavian', 'Tavion', 'Tavon', 'Tayler',
        'Taylor', 'Tayshaun', 'Teagan', 'Ted', 'Teddie', 'Teddy', 'Tegan',
        'Telly', 'Terance', 'Terell', 'Terence', 'Terrance', 'Terrell',
        'Terrence', 'Terrill', 'Terry', 'Tevin', 'Tex', 'Thad', 'Thaddeus',
        'Theadore', 'Thedore', 'Theo', 'Theodis', 'Theodore', 'Theophile',
        'Therman', 'Theron', 'Thomas', 'Thompson', 'Thor', 'Thornton',
        'Thorwald', 'Thos', 'Thurlow', 'Thurman', 'Thurston', 'Tilden',
        'Tillman', 'Tilman', 'Tim', 'Timmie', 'Timmothy', 'Timmy', 'Timothy',
        'Tito', 'Titus', 'Tobe', 'Tobias', 'Tobie', 'Tobin', 'Toby', 'Tod',
        'Todd', 'Toivo', 'Tolbert', 'Tollie', 'Tom', 'Toma', 'Tomas', 'Tomie',
        'Tommie', 'Tommy', 'Toney', 'Tony', 'Torey', 'Toriano', 'Torrance',
        'Torrence', 'Torrey', 'Torry', 'Tory', 'Toshio', 'Toy', 'Trace',
        'Tracey', 'Tracy', 'Trae', 'Travis', 'Travon', 'Trayvon', 'Tre',
        'Tremaine', 'Tremayne', 'Trent', 'Trenten', 'Trenton', 'Trever',
        'Trevin', 'Trevion', 'Trevon', 'Trevor', 'Trey', 'Treyton', 'Treyvon',
        'Trinidad', 'Trinity', 'Tripp', 'Tristan', 'Tristen', 'Tristian',
        'Tristin', 'Triston', 'Troy', 'True', 'Trumaine', 'Truman', 'Trystan',
        'Tuan', 'Tucker', 'Turner', 'Ty', 'Tye', 'Tyler', 'Tylor', 'Tyquan',
        'Tyree', 'Tyreek', 'Tyreese', 'Tyrek', 'Tyreke', 'Tyrel', 'Tyrell',
        'Tyrese', 'Tyrik', 'Tyrin', 'Tyriq', 'Tyrique', 'Tyron', 'Tyrone',
        'Tyrus', 'Tyshawn', 'Tyson', 'Ulises', 'Ulysses', 'Unknown', 'Unnamed',
        'Urban', 'Uriah', 'Uriel', 'Urijah', 'Val', 'Valentin', 'Valentine',
        'Valentino', 'Van', 'Vance', 'Vander', 'Vashon', 'Vaughn', 'Vera',
        'Vere', 'Vergil', 'Verl', 'Verle', 'Verlin', 'Verlon', 'Verlyn',
        'Vern', 'Verna', 'Vernal', 'Verne', 'Vernell', 'Verner', 'Vernie',
        'Vernon', 'Vester', 'Vic', 'Vicente', 'Vick', 'Victor', 'Victoriano',
        'Vidal', 'Vince', 'Vincent', 'Vincenzo', 'Vinson', 'Vinton', 'Virge',
        'Virgel', 'Virgie', 'Virgil', 'Virgle', 'Vito', 'Vollie', 'Volney',
        'Von', 'Wade', 'Waino', 'Waldemar', 'Waldo', 'Walker', 'Wallace',
        'Wally', 'Walt', 'Walter', 'Walton', 'Ward', 'Wardell', 'Warner',
        'Warren', 'Wash', 'Washington', 'Watson', 'Watt', 'Waverly', 'Wayde',
        'Wayland', 'Waylon', 'Wayman', 'Waymon', 'Wayne', 'Weaver', 'Webb',
        'Webster', 'Weldon', 'Wellington', 'Wells', 'Welton', 'Wendel',
        'Wendell', 'Wenzel', 'Werner', 'Wes', 'Wesley', 'Wess', 'West',
        'Westin', 'Westley', 'Weston', 'Wheeler', 'Whit', 'Whitney', 'Wilber',
        'Wilbert', 'Wilbur', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred',
        'Wilfredo', 'Wilfrid', 'Wilhelm', 'Wiliam', 'Wilkie', 'Will',
        'Willaim', 'Willam', 'Willard', 'William', 'Williams', 'Willian',
        'Williard', 'Willie', 'Willis', 'Willy', 'Wilmer', 'Wilson', 'Wilton',
        'Windell', 'Winfield', 'Winford', 'Winfred', 'Wing', 'Winifred',
        'Winnie', 'Winston', 'Winthrop', 'Winton', 'Wirt', 'Wm', 'Wong',
        'Wood', 'Woodie', 'Woodroe', 'Woodrow', 'Woodson', 'Woody', 'Worley',
        'Worth', 'Wright', 'Wyatt', 'Wylie', 'Wyman', 'Xander', 'Xavier',
        'Xzavier', 'Yaakov', 'Yadiel', 'Yael', 'Yahir', 'Yair', 'Yancy',
        'Yandel', 'Yee', 'Yehuda', 'Yoel', 'York', 'Yosef', 'Yoshio', 'Young',
        'Yurem', 'Yusuf', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',
        'Zackery', 'Zaid', 'Zaiden', 'Zain', 'Zaire', 'Zakary', 'Zander',
        'Zane', 'Zavier', 'Zavion', 'Zayden', 'Zayne', 'Zeb', 'Zebulon',
        'Zechariah', 'Zed', 'Zeke', 'Zenas', 'Zeno', 'Zigmund', 'Zion',
        'Zollie'

    )

    first_names = first_names_male + first_names_female

    last_names = (
        'Abbott', 'Abernathy', 'Abshire', 'Adams', 'Altenwerth', 'Anderson', 'Ankunding', 'Armstrong', 'Auer',
        'Aufderhar',
        'Bahringer', 'Bailey', 'Balistreri', 'Barrows', 'Bartell', 'Bartoletti', 'Barton', 'Bashirian', 'Batz', 'Bauch',
        'Baumbach', 'Bayer', 'Beahan', 'Beatty', 'Bechtelar', 'Becker', 'Bednar', 'Beer', 'Beier', 'Berge', 'Bergnaum',
        'Bergstrom', 'Bernhard', 'Bernier', 'Bins', 'Blanda', 'Blick', 'Block', 'Bode', 'Boehm', 'Bogan', 'Bogisich',
        'Borer', 'Bosco', 'Botsford', 'Boyer', 'Boyle', 'Bradtke', 'Brakus', 'Braun', 'Breitenberg', 'Brekke', 'Brown',
        'Bruen', 'Buckridge',
        'Carroll', 'Carter', 'Cartwright', 'Casper', 'Cassin', 'Champlin', 'Christiansen', 'Cole', 'Collier', 'Collins',
        'Conn', 'Connelly', 'Conroy', 'Considine', 'Corkery', 'Cormier', 'Corwin', 'Cremin', 'Crist', 'Crona', 'Cronin',
        'Crooks', 'Cruickshank', 'Cummerata', 'Cummings',
        'Dach', 'D\'Amore', 'Daniel', 'Dare', 'Daugherty', 'Davis', 'Deckow', 'Denesik', 'Dibbert', 'Dickens', 'Dicki',
        'Dickinson', 'Dietrich', 'Donnelly', 'Dooley', 'Douglas', 'Doyle', 'DuBuque', 'Durgan',
        'Ebert', 'Effertz', 'Eichmann', 'Emard', 'Emmerich', 'Erdman', 'Ernser', 'Fadel',
        'Fahey', 'Farrell', 'Fay', 'Feeney', 'Feest', 'Feil', 'Ferry', 'Fisher', 'Flatley', 'Frami', 'Franecki',
        'Friesen', 'Fritsch', 'Funk',
        'Gaylord', 'Gerhold', 'Gerlach', 'Gibson', 'Gislason', 'Gleason', 'Gleichner', 'Glover', 'Goldner', 'Goodwin',
        'Gorczany', 'Gottlieb', 'Goyette', 'Grady', 'Graham', 'Grant', 'Green', 'Greenfelder', 'Greenholt', 'Grimes',
        'Gulgowski', 'Gusikowski', 'Gutkowski', 'Gutmann',
        'Haag', 'Hackett', 'Hagenes', 'Hahn', 'Haley', 'Halvorson', 'Hamill', 'Hammes', 'Hand', 'Hane', 'Hansen',
        'Harber', 'Harris', 'Hartmann', 'Harvey', 'Hauck', 'Hayes', 'Heaney', 'Heathcote', 'Hegmann', 'Heidenreich',
        'Heller', 'Herman', 'Hermann', 'Hermiston', 'Herzog', 'Hessel', 'Hettinger', 'Hickle', 'Hilll', 'Hills',
        'Hilpert', 'Hintz', 'Hirthe', 'Hodkiewicz', 'Hoeger', 'Homenick', 'Hoppe', 'Howe', 'Howell', 'Hudson', 'Huel',
        'Huels', 'Hyatt',
        'Jacobi', 'Jacobs', 'Jacobson', 'Jakubowski', 'Jaskolski', 'Jast', 'Jenkins', 'Jerde', 'Jewess', 'Johns',
        'Johnson', 'Johnston', 'Jones',
        'Kassulke', 'Kautzer', 'Keebler', 'Keeling', 'Kemmer', 'Kerluke', 'Kertzmann', 'Kessler', 'Kiehn', 'Kihn',
        'Kilback', 'King', 'Kirlin', 'Klein', 'Kling', 'Klocko', 'Koch', 'Koelpin', 'Koepp', 'Kohler', 'Konopelski',
        'Koss', 'Kovacek', 'Kozey', 'Krajcik', 'Kreiger', 'Kris', 'Kshlerin', 'Kub', 'Kuhic', 'Kuhlman', 'Kuhn',
        'Kulas', 'Kunde', 'Kunze', 'Kuphal', 'Kutch', 'Kuvalis',
        'Labadie', 'Lakin', 'Lang', 'Langosh', 'Langworth', 'Larkin', 'Larson', 'Leannon', 'Lebsack', 'Ledner',
        'Leffler', 'Legros', 'Lehner', 'Lemke', 'Lesch', 'Leuschke', 'Lind', 'Lindgren', 'Littel', 'Little', 'Lockman',
        'Lowe', 'Lubowitz', 'Lueilwitz', 'Luettgen', 'Lynch',
        'Macejkovic', 'Maggio', 'Mann', 'Mante', 'Marks', 'Marquardt', 'Marvin', 'Mayer', 'Mayert', 'McClure',
        'McCullough', 'McDermott', 'McGlynn', 'McKenzie', 'McLaughlin', 'Medhurst', 'Mertz', 'Metz', 'Miller', 'Mills',
        'Mitchell', 'Moen', 'Mohr', 'Monahan', 'Moore', 'Morar', 'Morissette', 'Mosciski', 'Mraz', 'Mueller', 'Muller',
        'Murazik', 'Murphy', 'Murray',
        'Nader', 'Nicolas', 'Nienow', 'Nikolaus', 'Nitzsche', 'Nolan',
        'Oberbrunner', 'O\'Connell', 'O\'Conner', 'O\'Hara', 'O\'Keefe', 'O\'Kon', 'Okuneva', 'Olson', 'Ondricka',
        'O\'Reilly', 'Orn', 'Ortiz', 'Osinski',
        'Pacocha', 'Padberg', 'Pagac', 'Parisian', 'Parker', 'Paucek', 'Pfannerstill', 'Pfeffer', 'Pollich', 'Pouros',
        'Powlowski', 'Predovic', 'Price', 'Prohaska', 'Prosacco', 'Purdy',
        'Quigley', 'Quitzon',
        'Rath', 'Ratke', 'Rau', 'Raynor', 'Reichel', 'Reichert', 'Reilly', 'Reinger', 'Rempel', 'Renner', 'Reynolds',
        'Rice', 'Rippin', 'Ritchie', 'Robel', 'Roberts', 'Rodriguez', 'Rogahn', 'Rohan', 'Rolfson', 'Romaguera', 'Roob',
        'Rosenbaum', 'Rowe', 'Ruecker', 'Runolfsdottir', 'Runolfsson', 'Runte', 'Russel', 'Rutherford', 'Ryan',
        'Sanford', 'Satterfield', 'Sauer', 'Sawayn',
        'Schaden', 'Schaefer', 'Schamberger', 'Schiller', 'Schimmel', 'Schinner', 'Schmeler', 'Schmidt', 'Schmitt',
        'Schneider', 'Schoen', 'Schowalter', 'Schroeder', 'Schulist', 'Schultz', 'Schumm', 'Schuppe', 'Schuster',
        'Senger', 'Shanahan', 'Shields', 'Simonis', 'Sipes', 'Skiles', 'Smith', 'Smitham', 'Spencer', 'Spinka',
        'Sporer', 'Stamm', 'Stanton', 'Stark', 'Stehr', 'Steuber', 'Stiedemann', 'Stokes', 'Stoltenberg', 'Stracke',
        'Streich', 'Stroman', 'Strosin', 'Swaniawski', 'Swift',
        'Terry', 'Thiel', 'Thompson', 'Tillman', 'Torp', 'Torphy', 'Towne', 'Toy', 'Trantow', 'Tremblay', 'Treutel',
        'Tromp', 'Turcotte', 'Turner',
        'Ullrich', 'Upton',
        'Vandervort', 'Veum', 'Volkman', 'Von', 'VonRueden',
        'Waelchi', 'Walker', 'Walsh', 'Walter', 'Ward', 'Waters', 'Watsica', 'Weber', 'Wehner', 'Weimann', 'Weissnat',
        'Welch', 'West', 'White', 'Wiegand', 'Wilderman', 'Wilkinson', 'Will', 'Williamson', 'Willms', 'Windler',
        'Wintheiser', 'Wisoky', 'Wisozk', 'Witting', 'Wiza', 'Wolf', 'Wolff', 'Wuckert', 'Wunsch', 'Wyman',
        'Yost', 'Yundt',
        'Zboncak', 'Zemlak', 'Ziemann', 'Zieme', 'Zulauf'
    )

    prefixes_female = ('Mrs.', 'Ms.', 'Miss', 'Dr.')
    prefixes_male = ('Mr.', 'Dr.')

    prefixes = prefixes_female + prefixes_male

    suffixes_female = ('MD', 'DDS', 'PhD', 'DVM')
    suffixes_male = ('Jr.', 'Sr.', 'I', 'II', 'III', 'IV', 'V', 'MD', 'DDS', 'PhD', 'DVM')

    suffixes = suffixes_female + suffixes_male

    def name_male(self):
        pattern = self.random_element(self.formats_male)
        return self.generator.parse(pattern)

    def name_female(self):
        pattern = self.random_element(self.formats_female)
        return self.generator.parse(pattern)

    @classmethod
    def first_name(cls):
        return cls.random_element(cls.first_names)

    @classmethod
    def first_name_male(cls):
        return cls.random_element(cls.first_names_male)

    @classmethod
    def first_name_female(cls):
        return cls.random_element(cls.first_names_female)

    @classmethod
    def last_name(cls):
        return cls.random_element(cls.last_names)

    @classmethod
    def prefix(cls):
        return cls.random_element((cls.prefix_male(), cls.prefix_female()))

    @classmethod
    def prefix_male(cls):
        return cls.random_element(cls.prefixes_male)

    @classmethod
    def prefix_female(cls):
        return cls.random_element(cls.prefixes_female)


    @classmethod
    def suffix(cls):
        return cls.random_element((cls.suffix_male(), cls.suffix_female()))

    @classmethod
    def suffix_male(cls):
        return cls.random_element(cls.suffixes_male)

    @classmethod
    def suffix_female(cls):
        return cls.random_element(cls.suffixes_female)

########NEW FILE########
__FILENAME__ = phone_number
from __future__ import unicode_literals
from ..phone_number import Provider as PhoneNumberProvider


class Provider(PhoneNumberProvider):
    formats = (
        '+##(#)##########',
        '+##(#)##########',
        '0##########',
        '0##########',
        '###-###-####',
        '(###)###-####',
        '1-###-###-####',
        '###.###.####',
        '###-###-####',
        '(###)###-####',
        '1-###-###-####',
        '###.###.####',
        '###-###-####x###',
        '(###)###-####x###',
        '1-###-###-####x###',
        '###.###.####x###',
        '###-###-####x####',
        '(###)###-####x####',
        '1-###-###-####x####',
        '###.###.####x####',
        '###-###-####x#####',
        '(###)###-####x#####',
        '1-###-###-####x#####',
        '###.###.####x#####'
    )
########NEW FILE########
__FILENAME__ = ssn
# coding=utf-8
from __future__ import unicode_literals
from ..ssn import Provider as SsnProvider

class Provider(SsnProvider):
    ssn_formats = ("###-##-####",)
    
    @classmethod
    def ssn(cls):
        return cls.bothify(cls.random_element(cls.ssn_formats))
########NEW FILE########
__FILENAME__ = address
# coding=utf-8

from __future__ import unicode_literals
from ..address import Provider as AddressProvider


class Provider(AddressProvider):
    building_number_formats = ('%', '%#', '%#', '%#', '%##')
    street_prefixes = (
        'Plaza', 'Calle', 'Avenida', 'Via', 'Vial', 'Rambla', 'Glorieta', 'Urbanización', 'Callejón', 'Cañada',
        'Alameda', 'Acceso', 'C.', 'Ronda', 'Pasaje', 'Cuesta', 'Pasadizo', 'Paseo', 'Camino'
    )
    postcode_formats = ('#####', )
    states = (
        'Álava', 'Albacete', 'Alicante', 'Almería', 'Asturias', 'Ávila', 'Badajoz',
        'Baleares', 'Barcelona', 'Burgos', 'Cáceres', 'Cádiz', 'Cantabria', 'Castellón',
        'Ceuta', 'Ciudad', 'Córdoba', 'Cuenca', 'Girona', 'Granada', 'Guadalajara',
        'Guipúzcoa', 'Huelva', 'Huesca', 'Jaén', 'La Coruña', 'La Rioja', 'Las Palmas',
        'León', 'Lleida', 'Lugo', 'Madrid', 'Málaga', 'Melilla', 'Murcia', 'Navarra',
        'Ourense', 'Palencia', 'Pontevedra', 'Salamanca', 'Santa Cruz de Tenerife',
        'Segovia', 'Sevilla', 'Soria', 'Tarragona', 'Teruel', 'Toledo', 'Valencia',
        'Valladolid', 'Vizcaya', 'Zamora', 'Zaragoza'
    )
    countries = (
        'Afganistán', 'Akrotiri', 'Albania', 'Alemania', 'Andorra', 'Angola', 'Anguila',
        'Antártida', 'Antigua y Barbuda', 'Antillas Neerlandesas', 'Arabia Saudí',
        'Arctic Ocean', 'Argelia', 'Argentina', 'Armenia', 'Aruba', 'Ashmore and Cartier Islands',
        'Atlantic Ocean', 'Australia', 'Austria', 'Azerbaiyán', 'Bahamas',
        'Bahráin', 'Bangladesh', 'Barbados', 'Bélgica', 'Belice', 'Benín', 'Bermudas',
        'Bielorrusia', 'Birmania Myanmar', 'Bolivia', 'Bosnia y Hercegovina',
        'Botsuana', 'Brasil', 'Brunéi', 'Bulgaria', 'Burkina Faso', 'Burundi', 'Bután',
        'Cabo Verde', 'Camboya', 'Camerún', 'Canadá', 'Chad', 'Chile', 'China',
        'Chipre', 'Clipperton Island', 'Colombia', 'Comoras', 'Congo', 'Coral Sea Islands',
        'Corea del Norte', 'Corea del Sur', 'Costa de Marfil', 'Costa Rica',
        'Croacia', 'Cuba', 'Dhekelia', 'Dinamarca', 'Dominica', 'Ecuador', 'Egipto', 'El Salvador',
        'El Vaticano', 'Emiratos Árabes Unidos', 'Eritrea', 'Eslovaquia',
        'Eslovenia', 'España', 'Estados Unidos', 'Estonia', 'Etiopía', 'Filipinas',
        'Finlandia', 'Fiyi', 'Francia', 'Gabón', 'Gambia', 'Gaza Strip', 'Georgia',
        'Ghana', 'Gibraltar', 'Granada', 'Grecia', 'Groenlandia', 'Guam', 'Guatemala',
        'Guernsey', 'Guinea', 'Guinea Ecuatorial', 'Guinea-Bissau', 'Guyana', 'Haití',
        'Honduras', 'Hong Kong', 'Hungría', 'India', 'Indian Ocean', 'Indonesia',
        'Irán', 'Iraq', 'Irlanda', 'Isla Bouvet', 'Isla Christmas', 'Isla Norfolk',
        'Islandia', 'Islas Caimán', 'Islas Cocos', 'Islas Cook', 'Islas Feroe', 'Islas Georgia del Sur y Sandwich del Sur',
        'Islas Heard y McDonald', 'Islas Malvinas', 'Islas Marianas del Norte', 'Islas Marshall',
        'Islas Pitcairn', 'Islas Salomón', 'Islas Turcas y Caicos', 'Islas Vírgenes Americanas',
        'Islas Vírgenes Británicas', 'Israel', 'Italia', 'Jamaica', 'Jan Mayen', 'Japón', 'Jersey',
        'Jordania', 'Kazajistán', 'Kenia', 'Kirguizistán', 'Kiribati', 'Kuwait', 'Laos',
        'Lesoto', 'Letonia', 'Líbano', 'Liberia', 'Libia', 'Liechtenstein', 'Lituania',
        'Luxemburgo', 'Macao', 'Macedonia', 'Madagascar', 'Malasia', 'Malaui',
        'Maldivas', 'Malí', 'Malta', 'Man, Isle of', 'Marruecos', 'Mauricio',
        'Mauritania', 'Mayotte', 'México', 'Micronesia', 'Moldavia', 'Mónaco',
        'Mongolia', 'Montserrat', 'Mozambique', 'Namibia', 'Nauru', 'Navassa Island',
        'Nepal', 'Nicaragua', 'Níger', 'Nigeria', 'Niue', 'Noruega', 'Nueva Caledonia',
        'Nueva Zelanda', 'Omán', 'Pacific Ocean', 'Países Bajos', 'Pakistán', 'Palaos',
        'Panamá', 'Papúa-Nueva Guinea', 'Paracel Islands', 'Paraguay', 'Perú',
        'Polinesia Francesa', 'Polonia', 'Portugal', 'Puerto Rico', 'Qatar', 'Reino Unido',
        'República Centroafricana', 'República Checa', 'República Democrática del Congo',
        'República Dominicana', 'Ruanda', 'Rumania', 'Rusia', 'Sáhara Occidental', 'Samoa',
        'Samoa Americana', 'San Cristóbal y Nieves', 'San Marino',
        'San Pedro y Miquelón', 'San Vicente y las Granadinas', 'Santa Helena', 'Santa Lucía',
        'Santo Tomé y Príncipe', 'Senegal', 'Seychelles', 'Sierra Leona',
        'Singapur', 'Siria', 'Somalia', 'Southern Ocean', 'Spratly Islands', 'Sri Lanka',
        'Suazilandia', 'Sudáfrica', 'Sudán', 'Suecia', 'Suiza', 'Surinam',
        'Svalbard y Jan Mayen', 'Tailandia', 'Taiwán', 'Tanzania', 'Tayikistán',
        'TerritorioBritánicodel Océano Indico', 'Territorios Australes Franceses',
        'Timor Oriental', 'Togo', 'Tokelau', 'Tonga', 'Trinidad y Tobago', 'Túnez',
        'Turkmenistán', 'Turquía', 'Tuvalu', 'Ucrania', 'Uganda', 'Unión Europea',
        'Uruguay', 'Uzbekistán', 'Vanuatu', 'Venezuela', 'Vietnam', 'Wake Island',
        'Wallis y Futuna', 'West Bank', 'World', 'Yemen', 'Yibuti', 'Zambia', 'Zimbabue'
    )

    city_formats = (
        '{{state_name}}',
    )

    street_name_formats = (
        '{{street_prefix}} {{first_name}} {{last_name}}',
        '{{street_prefix}} de {{first_name}} {{last_name}}',

    )
    street_address_formats = (
        '{{street_name}} {{building_number}}',
        '{{street_name}} {{building_number}} {{secondary_address}} ',
    )
    address_formats = (
        "{{street_address}}\n{{city}}, {{postcode}}",
    )
    secondary_address_formats = ('Apt. ##', 'Piso #', 'Puerta #')

    @classmethod
    def state_name(cls):
        return cls.random_element(cls.states)

    @classmethod
    def street_prefix(cls):
        return cls.random_element(cls.street_prefixes)

    @classmethod
    def secondary_address(cls):
        return cls.numerify(cls.random_element(cls.secondary_address_formats))

    @classmethod
    def state(cls):
        return cls.random_element(cls.states)


########NEW FILE########
__FILENAME__ = person
# coding=utf-8
from __future__ import unicode_literals
from ..person import Provider as PersonProvider


class Provider(PersonProvider):
    formats = (
        '{{first_name}} {{last_name}} {{last_name}}',
        '{{first_name}} {{last_name}} {{last_name}}',
        '{{first_name}} {{last_name}} {{last_name}}',
        '{{first_name}} {{last_name}} {{last_name}}',
        '{{first_name}} {{last_name}} {{last_name}}',
        '{{first_name}} {{last_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{prefix}} {{last_name}}',
        '{{first_name}} {{last_name}}-{{last_name}}',
        '{{first_name}} {{first_name}} {{last_name}} {{last_name}}',
    )

    first_names = (
        'Abel', 'Abraham', 'Abram', 'Ada', 'Adán', 'Adrián', 'Adriana', 'Alan', 'Alana',
        'Alejandra', 'Alejandro', 'Alex', 'Alexa', 'Alexandra', 'Alexandría', 'Alexia',
        'Alexis', 'Alexis', 'Alfredo', 'Alicia', 'Alina', 'Alonzo', 'Amanda', 'Amaya',
        'Amelia', 'América', 'Ana', 'Andrea', 'Andrés', 'Ángel', 'Ángela', 'Angélica',
        'Angelina', 'Antonio', 'Ariana', 'Armando', 'Arturo', 'Asia', 'Aurora',
        'Benjamín', 'Brenda', 'Camila', 'Carlos', 'Carmen', 'Carolina', 'Cecilia',
        'Celeste', 'César', 'Clara', 'Claudia', 'Daniel', 'Daniela', 'Daniella',
        'David', 'Diana', 'Diego', 'Dulce', 'Édgar', 'Eduardo', 'Elena', 'Eliana',
        'Elías', 'Elisa', 'Elsa', 'Emanuel', 'Emilia', 'Emiliano', 'Emilio', 'Enrique',
        'Ernesto', 'Esmeralda', 'Esteban', 'Estrella', 'Eva', 'Ezequiel', 'Fabián',
        'Fátima', 'Felipe', 'Fernanda', 'Fernando', 'Francisco', 'Gabriel', 'Gabriela',
        'Gerardo', 'Gloria', 'Guadalupe', 'Guillermo', 'Gustavo', 'Héctor', 'Hugo',
        'Iris', 'Isabel', 'Isabela', 'Israel', 'Iván', 'Jaime', 'Jairo' 'Javier',
        'Jazmín', 'Jesús', 'Jimena', 'Joaquín', 'Joel', 'Jorge', 'José', 'Josué',
        'Juan', 'Julia', 'Julián', 'Juliana', 'Julio', 'Laura', 'Leila', 'Leonardo',
        'Lía', 'Lila', 'Lilian', 'Liliana', 'Linda', 'Lola', 'Lorenzo', 'Lucas',
        'Lucía', 'Lucián', 'Luis', 'Manuel', 'Marco', 'Marcos', 'María', 'Mariana',
        'Marina', 'Mario', 'Marisol', 'Martín', 'Mateo', 'Matías', 'Mauricio', 'Max',
        'Maximiliano', 'Maya', 'Melina', 'Mercedes', 'Miguel', 'Miranda', 'Miriam',
        'Mónica', 'Isabella', 'Natalia', 'Nicolás', 'Noé', 'Nora', 'Óliver', 'Olivia',
        'Omar', 'Orlando', 'Óscar', 'Pablo', 'Paola', 'Patricia', 'Paúl', 'Pedro',
        'Penélope', 'Perla', 'Rafael', 'Ramón', 'Raquel', 'Raúl', 'Regina', 'Ricardo',
        'Roberto', 'Rodrigo', 'Román', 'Rosa', 'Rubén', 'Salvador', 'Samuel', 'Sandra',
        'Santiago', 'Sara', 'Saúl', 'Sebastián', 'Selena', 'Serena', 'Sergio', 'Simón',
        'Sofía', 'Talía', 'Tatiana', 'Tobías', 'Tomás', 'Valentina', 'Valeria',
        'Verónica', 'Víctor', 'Victoria', 'Virginia', 'Vivian', 'Viviana', 'Xavier',
        'Ximena'
    )


    last_names = (
        'Abad', 'Adadia', 'Abascal', 'Abella', 'Abellán', 'Abril', 'Acedo', 'Acevedo',
        'Acero', 'Acosta', 'Acuña', 'Adán', 'Aguado', 'Agudo', 'Águila', 'Aguilar',
        'Aguilera', 'Aguiló', 'Aguirre', 'Agullo', 'Agustí', 'Agustín', 'Álamo',
        'Alarcón', 'Alba', 'Alberdi', 'Albero', 'Alberola', 'Alberto', 'Alcalá',
        'Alcalde', 'Alcántara', 'Alcaraz', 'Alcázar', 'Alcolea', 'Alegre', 'Alegria',
        'Alemán', 'Alemany', 'Alfaro', 'Alfonso', 'Aliaga', 'Almagro', 'Almansa',
        'Almazán', 'Almeida', 'Alonso', 'Alsina', 'Alvarado', 'Álvarez', 'Álvaro',
        'Aller', 'Amador', 'Amat', 'Amaya', 'Amigó', 'Amo', 'Amor', 'Amores', 'Amorós',
        'Anaya', 'Andrade', 'Andrés', 'Andreu', 'Ángel', 'Anglada', 'Angulo', 'Anguita',
        'Antón', 'Antúnez', 'Aparicio', 'Aragón', 'Aragonés', 'Aramburu', 'Arana',
        'Aranda', 'Araujo', 'Arce', 'Arco', 'Arcos', 'Arellano', 'Arenas', 'Arévalo',
        'Arias', 'Ariño', 'Ariza', 'Arjona', 'Armas', 'Armengol', 'Arnaiz', 'Arnal',
        'Arnau', 'Aroca', 'Arranz', 'Arregui', 'Arribas', 'Arrieta', 'Arroyo',
        'Arteaga', 'Artigas', 'Asenjo', 'Asensio', 'Atienza', 'Ávila', 'Avilés',
        'Ayala', 'Ayllón', 'Ayuso', 'Azcona', 'Aznar', 'Azorin', 'Badía', 'Baena',
        'Báez', 'Baeza', 'Balaguer', 'Ballester', 'Ballesteros', 'Baños', 'Baquero',
        'Barba', 'Barberá', 'Barbero', 'Barceló', 'Bárcena', 'Barco', 'Baró', 'Barón',
        'Barragán', 'Barral', 'Barranco', 'Barreda', 'Barrena', 'Barrera', 'Barriga',
        'Barrio', 'Barrios', 'Barros', 'Barroso', 'Bartolomé', 'Bas', 'Bastida',
        'Batalla', 'Batlle', 'Bautista', 'Bauzà', 'Bayo', 'Bayón', 'Bayona', 'Becerra',
        'Bejarano', 'Belda', 'Belmonte', 'Beltrán', 'Bellido', 'Bello', 'Benavent',
        'Benavente', 'Benavides', 'Benet', 'Benítez', 'Benito', 'Berenguer', 'Bermejo',
        'Bermúdez', 'Bernad', 'Bernal', 'Bernat', 'Berrocal', 'Bertrán', 'Bilbao',
        'Blanca', 'Blanco', 'Blanch', 'Blanes', 'Blasco', 'Blázquez', 'Boada', 'Boix',
        'Bolaños', 'Bonet', 'Bonilla', 'Borja', 'Borrás', 'Borrego', 'Borrell', 'Bosch',
        'Botella', 'Bou', 'Bravo', 'Briones', 'Bru', 'Buendía', 'Bueno', 'Burgos',
        'Busquets', 'Bustamante', 'Bustos', 'Caballero', 'Cabanillas', 'Cabañas',
        'Cabello', 'Cabeza', 'Cabezas', 'Cabo', 'Cabrera', 'Cabrero', 'Cáceres',
        'Cadenas', 'Cal', 'Calatayud', 'Calderón', 'Calvet', 'Calvo', 'Calleja',
        'Calzada', 'Camacho', 'Cámara', 'Camino', 'Campillo', 'Campo', 'Campos',
        'Campoy', 'Camps', 'Canales', 'Canals', 'Canet', 'Cano', 'Cánovas', 'Cantero',
        'Cantón', 'Cañas', 'Cañellas', 'Cañete', 'Cañizares', 'Caparrós', 'Capdevila',
        'Carballo', 'Carbajo', 'Carbó', 'Carbonell', 'Cárdenas', 'Cardona', 'Carlos',
        'Carmona', 'Carnero', 'Caro', 'Carpio', 'Carranza', 'Carrasco', 'Carreño',
        'Carrera', 'Carreras', 'Carretero', 'Carrillo', 'Carrión', 'Carro', 'Carvajal',
        'Casado', 'Casal', 'Casals', 'Casanova', 'Casanovas', 'Casares', 'Casas',
        'Cases', 'Castañeda', 'Castejón', 'Castell', 'Castellanos', 'Castelló',
        'Castells', 'Castilla', 'Castillo', 'Castrillo', 'Castro', 'Catalá', 'Catalán',
        'Cazorla', 'Cepeda', 'Cerdá', 'Cerdán', 'Cerezo', 'Cerro', 'Cervantes',
        'Cervera', 'Céspedes', 'Cid', 'Cifuentes', 'Cisneros', 'Clavero', 'Clemente',
        'Cobo', 'Cobos', 'Coca', 'Codina', 'Coello', 'Colom', 'Coloma', 'Colomer',
        'Coll', 'Collado', 'Comas', 'Company', 'Conde', 'Conesa', 'Contreras',
        'Corbacho', 'Cordero', 'Córdoba', 'Cornejo', 'Corominas', 'Coronado', 'Corral',
        'Correa', 'Cortés', 'Cortina', 'Costa', 'Cózar', 'Criado', 'Crespi', 'Crespo',
        'Cruz', 'Cuadrado', 'Cuéllar', 'Cuenca', 'Cuervo', 'Cuesta', 'Cueto', 'Cuevas',
        'Chacón', 'Chamorro', 'Chaparro', 'Chaves', 'Checa', 'Chico', 'Dalmau',
        'Dávila', 'Daza', 'Delgado', 'Díaz', 'Diego', 'Diéguez', 'Díez', 'Doménech',
        'Domingo', 'Domínguez', 'Donaire', 'Donoso', 'Duarte', 'Dueñas', 'Duque',
        'Durán', 'Echevarría', 'Echeverría', 'Egea', 'Elías', 'Elorza', 'Enríquez',
        'Escalona', 'Escamilla', 'Escobar', 'Escolano', 'Escribano', 'Escrivá',
        'Escudero', 'Espada', 'España', 'Español', 'Esparza', 'Espejo', 'Espinosa',
        'Esteban', 'Esteve', 'Estévez', 'Estrada', 'Expósito', 'Fabra', 'Fábregas',
        'Fabregat', 'Fajardo', 'Falcó', 'Falcón', 'Farré', 'Feijoo', 'Feliu',
        'Fernández', 'Ferrán', 'Ferrández', 'Ferrándiz', 'Ferrando', 'Ferrer',
        'Ferrera', 'Ferrero', 'Ferreras', 'Figueras', 'Figueroa', 'Figuerola', 'Fiol',
        'Flor', 'Flores', 'Folch', 'Fonseca', 'Font', 'Fortuny', 'Franch', 'Francisco',
        'Franco', 'Franch', 'Frías', 'Frutos', 'Fuente', 'Fuentes', 'Fuertes', 'Fuster',
        'Gabaldón', 'Galán', 'Galiano', 'Galindo', 'Galván', 'Gálvez', 'Gallardo',
        'Gallart', 'Gallego', 'Gallo', 'Gámez', 'Gárate', 'Garay', 'Garcés', 'García',
        'Gargallo', 'Garmendia', 'Garrido', 'Garriga', 'Garzón', 'Gascón', 'Gaya',
        'Gelabert', 'Gibert', 'Gil', 'Gilabert', 'Giménez', 'Gimeno', 'Giner', 'Giralt',
        'Girón', 'Girona', 'Gisbert', 'Godoy', 'Goicoechea', 'Gómez', 'Gomila', 'Gomis',
        'González', 'Gonzalo', 'Goñi', 'Gordillo', 'Gracia', 'Granados', 'Grande',
        'Gras', 'Grau', 'Gual', 'Guardia', 'Guardiola', 'Guerra', 'Guerrero',
        'Guijarro', 'Guillén', 'Guitart', 'Gutiérrez', 'Guzmán', 'Haro', 'Heras',
        'Heredia', 'Hernández', 'Hernando', 'Herranz', 'Herrera', 'Herrero', 'Hervás',
        'Hervia', 'Hidalgo', 'Hierro', 'Higueras', 'Hoyos', 'Hoz', 'Huerta', 'Huertas',
        'Huguet', 'Hurtado', 'Ibáñez', 'Ibarra', 'Iborra', 'Iglesia', 'Iglesias',
        'Infante', 'Iniesta', 'Íñigo', 'Iñiguez', 'Iriarte', 'Isern', 'Izaguirre',
        'Izquierdo', 'Jaén', 'Jara', 'Jaume', 'Jáuregui', 'Jerez', 'Jiménez', 'Jódar',
        'Jordá', 'Jordán', 'Jove', 'Jover', 'Juan', 'Juárez', 'Juliá', 'Julián',
        'Jurado', 'Lago', 'Laguna', 'Lamas', 'Landa', 'Lara', 'Larrañaga', 'Larrea',
        'Lasa', 'Lastra', 'Leal', 'Ledesma', 'Leiva', 'León', 'Lerma', 'Lillo',
        'Linares', 'Lobato', 'Lobo', 'López', 'Lorenzo', 'Losa', 'Losada', 'Lozano',
        'Lucas', 'Lucena', 'Luís', 'Luján', 'Lumbreras', 'Luna', 'Luque', 'Luz',
        'Llabrés', 'Lladó', 'Llamas', 'Llano', 'Llanos', 'Lledó', 'Llobet', 'Llopis',
        'Llorens', 'Llorente', 'Lloret', 'Lluch', 'Macías', 'Machado', 'Madrid',
        'Madrigal', 'Maestre', 'Maldonado', 'Malo', 'Mancebo', 'Manjón', 'Manrique',
        'Manso', 'Manuel', 'Manzanares', 'Manzano', 'Marco', 'Marcos', 'Marí', 'Marín',
        'Mariño', 'Mariscal', 'Mármol', 'Marqués', 'Márquez', 'Martí', 'Martín',
        'Martínez', 'Martorell', 'Mas', 'Mascaró', 'Mata', 'Matas', 'Mate', 'Mateo',
        'Mateos', 'Mateu', 'Mayo', 'Mayol', 'Mayoral', 'Maza', 'Medina', 'Meléndez',
        'Melero', 'Mena', 'Méndez', 'Mendizábal', 'Mendoza', 'Menéndez', 'Mercader',
        'Merino', 'Mesa', 'Miguel', 'Milla', 'Millán', 'Mínguez', 'Mir', 'Miralles',
        'Miranda', 'Miró', 'Moles', 'Molina', 'Moliner', 'Molins', 'Moll', 'Monreal',
        'Montalbán', 'Montaña', 'Montenegro', 'Montero', 'Montes', 'Montesinos',
        'Montoya', 'Montserrat', 'Mora', 'Moraleda', 'Morales', 'Morán', 'Morante',
        'Morata', 'Morcillo', 'Morell', 'Moreno', 'Morera', 'Morillo', 'Mosquera',
        'Moya', 'Múgica', 'Mulet', 'Múñiz', 'Muñoz', 'Mur', 'Murcia', 'Murillo', 'Muro',
        'Nadal', 'Naranjo', 'Narváez', 'Navarrete', 'Navarro', 'Navas', 'Nebot',
        'Neira', 'Nevado', 'Nicolau', 'Nicolás', 'Nieto', 'Niño', 'Nogueira', 'Noguera',
        'Nogués', 'Noriega', 'Novoa', 'Núñez', 'Ocaña', 'Ochoa', 'Ojeda', 'Oliva',
        'Olivares', 'Olivé', 'Oliver', 'Olivera', 'Oliveras', 'Olmedo', 'Olmo', 'Oller',
        'Ordóñez', 'Orozco', 'Ortega', 'Ortiz', 'Ortuño', 'Osorio', 'Osuna', 'Otero',
        'Pablo', 'Pacheco', 'Padilla', 'Páez', 'Pagès', 'Palacio', 'Palacios', 'Palau',
        'Palma', 'Palmer', 'Palomar', 'Palomares', 'Palomino', 'Palomo', 'Pallarès',
        'Paniagua', 'Pardo', 'Paredes', 'Pareja', 'Parejo', 'Parra', 'Pascual',
        'Pastor', 'Patiño', 'Pavón', 'Paz', 'Pazos', 'Pedraza', 'Pedrero', 'Pedro',
        'Pedrosa', 'Peinado', 'Peiró', 'Peláez', 'Pelayo', 'Pellicer', 'Peña',
        'Peñalver', 'Peñas', 'Pera', 'Peral', 'Perales', 'Peralta', 'Perea', 'Pereira',
        'Perelló', 'Perera', 'Pérez', 'Pi', 'Pina', 'Pineda', 'Pinedo', 'Pinilla',
        'Pino', 'Pinto', 'Pintor', 'Piña', 'Piñeiro', 'Piñol', 'Piquer', 'Pizarro',
        'Pla', 'Plana', 'Planas', 'Plaza', 'Pol', 'Polo', 'Pomares', 'Pombo', 'Ponce',
        'Pons', 'Pont', 'Porcel', 'Porras', 'Porta', 'Portero', 'Portillo', 'Posada',
        'Pou', 'Poza', 'Pozo', 'Pozuelo', 'Prada', 'Prado', 'Prat', 'Prats', 'Priego',
        'Prieto', 'Puente', 'Puerta', 'Puga', 'Puig', 'Pujadas', 'Pujol', 'Pulido',
        'Quero', 'Querol', 'Quesada', 'Quevedo', 'Quintana', 'Quintanilla', 'Quintero',
        'Quiroga', 'Quirós', 'Ramírez', 'Ramis', 'Ramón', 'Ramos', 'Raya', 'Real',
        'Rebollo', 'Recio', 'Redondo', 'Reguera', 'Reig', 'Reina', 'Requena', 'Revilla',
        'Rey', 'Reyes', 'Riba', 'Ribas', 'Ribera', 'Ribes', 'Ricart', 'Rico', 'Riera',
        'Rincón', 'Río', 'Ríos', 'Ripoll', 'Riquelme', 'Rius', 'Rivero', 'Robledo',
        'Robles', 'Roca', 'Rocamora', 'Rocha', 'Roda', 'Ródenas', 'Rodrigo',
        'Rodríguez', 'Roig', 'Rojas', 'Roldán', 'Roma', 'Román', 'Romero', 'Romeu',
        'Ropero', 'Ros', 'Rosa', 'Rosado', 'Rosales', 'Rosell', 'Roselló', 'Rosselló',
        'Roura', 'Rovira', 'Royo', 'Rozas', 'Ruano', 'Rubio', 'Rueda', 'Ruiz',
        'Saavedra', 'Sabater', 'Sacristán', 'Sáenz', 'Sáez', 'Sainz', 'Sala',
        'Salamanca', 'Salas', 'Salazar', 'Salcedo', 'Saldaña', 'Sales', 'Salgado',
        'Salinas', 'Salmerón', 'Salom', 'Salvà', 'Salvador', 'Samper', 'Sanabria',
        'Sánchez', 'Sancho', 'Sandoval', 'Sanjuan', 'Sanmartín', 'Sanmiguel', 'Sans',
        'Santamaría', 'Santos', 'Sanz', 'Sarabia', 'Sarmiento', 'Sastre', 'Saura',
        'Sebastián', 'Seco', 'Sedano', 'Segarra', 'Segovia', 'Seguí', 'Segura', 'Serna',
        'Serra', 'Serrano', 'Sevilla', 'Sevillano', 'Sierra', 'Silva', 'Simó',
        'Sobrino', 'Sola', 'Solana', 'Solano', 'Solé', 'Soler', 'Solera', 'Solís',
        'Solsona', 'Somoza', 'Soria', 'Soriano', 'Sosa', 'Sotelo', 'Soto', 'Suárez',
        'Sureda', 'Taboada', 'Talavera', 'Tamarit', 'Tamayo', 'Tapia', 'Tejada',
        'Tejedor', 'Tejera', 'Tejero', 'Téllez', 'Tello', 'Tena', 'Tenorio', 'Terrón',
        'Teruel', 'Tirado', 'Toledo', 'Tolosa', 'Tomás', 'Tomé', 'Tormo', 'Toro',
        'Torralba', 'Torre', 'Torrecilla', 'Torrens', 'Torrent', 'Torrents', 'Torres',
        'Torrijos', 'Tovar', 'Trillo', 'Trujillo', 'Tudela', 'Tur', 'Ugarte', 'Ureña',
        'Uría', 'Uriarte', 'Uribe', 'Urrutia', 'Valbuena', 'Valcárcel', 'Valderrama',
        'Valdés', 'Valencia', 'Valenciano', 'Valentín', 'Valenzuela', 'Valera',
        'Valero', 'Valverde', 'Vall', 'Valle', 'Vallejo', 'Vallés', 'Valls', 'Vaquero',
        'Vara', 'Varela', 'Vargas', 'Vázquez', 'Vega', 'Velasco', 'Velázquez', 'Vélez',
        'Vendrell', 'Vera', 'Verdejo', 'Verdú', 'Verdugo', 'Vergara', 'Viana',
        'Vicente', 'Vicens', 'Vidal', 'Vigil', 'Vila', 'Vilanova', 'Vilalta',
        'Vilaplana', 'Vilar', 'Villa', 'Villalba', 'Villalobos', 'Villalonga',
        'Villanueva', 'Villar', 'Villaverde', 'Villegas', 'Villena', 'Viña', 'Viñas',
        'Vives', 'Vizcaíno', 'Yáñez', 'Yuste', 'Zabala', 'Zabaleta', 'Zamora',
        'Zamorano', 'Zapata', 'Zaragoza', 'Zorrilla', 'Zurita'
    )

    prefixes = ('de', 'del')

    @classmethod
    def prefix(cls):
        return cls.random_element(cls.prefixes)
########NEW FILE########
__FILENAME__ = phone_number
from __future__ import unicode_literals
from ..phone_number import Provider as PhoneNumberProvider


class Provider(PhoneNumberProvider):
    formats = (
        '+34 ### ### ###',
        '+34 #########',
        '+34 ### ## ## ##',
        '+34### ### ###',
        '+34#########',
        '+34### ## ## ##',
    )
########NEW FILE########
__FILENAME__ = address
# -*- encoding: utf-8 -*-
from __future__ import unicode_literals
from ..address import Provider as AddressProvider
#import locale

class Provider(AddressProvider):
    #current_locale = locale.setlocale(locale.LC_ALL, "es_MX.UTF-8")
    city_prefixes = ('Sur', 'Norte',)
    city_adjetives = ('Nueva', 'Vieja',)
    city_suffixies = ('de la Montaña', 'los bajos', 'los altos', )
    street_prefixes = (
        'Ampliación', 'Andador', 'Avenida', 'Boulevard', 'Calle', 'Callejón',
        'Calzada', 'Cerrada', 'Circuito', 'Circunvalación', 'Continuación',
        'Corredor', 'Diagonal', 'Eje vial', 'Pasaje', 'Peatonal', 'Periférico',
        'Privada', 'Prolongación', 'Retorno', 'Viaducto'
        )
    building_number_formats = ('#####', '####', '###')
    postcode_formats = ('#####', '#####-####')
    ## States and abbrs from Mexico from INEGI
    ## http://www.inegi.org.mx/geo/contenidos/geoestadistica/CatalogoClaves.aspx
    states = (
        ('AGS','Aguascalientes'), ('BC','Baja California'),
        ('BCS','Baja California Sur'), ('CAMP','Campeche'),
        ('COAH', 'Coahuila de Zaragoza'), ('COL', 'Colima'),
        ('CHIS', 'Chiapas'), ('CHIH', 'Chihuahua'),
        ('DF','Distrito Federal'), ('DGO', 'Durango'),
        ('GTO', 'Guanajuato'), ('GRO', 'Guerrero'), ('HGO', 'Hidalgo'),
        ('JAL', 'Jalisco'), ('MEX', 'México'),
        ('MICH', 'Michoacán de Ocampo'), ('MOR', 'Morelos'),
        ('NAY', 'Nayarit'), ('NL', 'Nuevo León'), ('OAX', 'Oaxaca'),
        ('PUE','Puebla'), ('QRO', 'Querétaro'),
        ('Q. ROO', 'Quintana Roo'), ('SLP', 'San Luis Potosí'),
        ('SIN', 'Sinaloa'), ('SON', 'Sonora'), ('TAB', 'Tabasco'),
        ('TAMPS','Tamaulipas'), ('TLAX','Tlaxcala'),
        ('VER', 'Veracruz de Ignacio de la Llave'),
        ('YUC', 'Yucatán'), ('ZAC','Zacatecas'),)

    zip_codes = {
        ## The ZipCodes has a begin & final range
        ## Source: Norma Técnica de Domicilios INEGI
        'AGS': (20000, 20999), 'BC' : (21000, 22999),
        'BCS': (23000, 23999), 'CAMP' : (24000, 24999),
        'COAH': (25000, 27999), 'COL': (28000, 28999),
        'CHIS': (29000, 30999), 'CHIH': (31000, 33999),
        'DF': (1000, 19999), 'DGO': (36000, 35999),
        'GTO': (36000, 38999), 'GRO': (39000, 41999),
        'HGO': (42000, 43999), 'JAL': (44000, 49999),
        'MEX': (50000, 57999), 'MICH': (58000, 61999),
        'MOR': (62000, 62999), 'NAY': (63000, 63999),
        'NL': (64000, 67999), 'OAX': (68000, 71999),
        'PUE': (72000, 75999), 'QRO': (76000, 76999),
        'Q. ROO': (77000, 75999), 'SLP': (78000, 79999),
        'SIN': (80000, 82999), 'SON': (83000, 85999),
        'TAB': (86000, 86999), 'TAMPS': (87000, 89999),
        'TLAX': (90000, 90999), 'VER': (91000, 97999),
        'YUC': (97000, 97999), 'ZAC': (98000, 99999)
    }
    ## List of Countries https://www.un.org/es/members/
    countries = (
        'Afganistán', 'Albania', 'Alemania', 'Andorra', 'Angola',
        'Antigua y Barbuda', 'Arabia Saudita', 'Argelia', 'Argentina',
        'Armenia', 'Australia', 'Austria', 'Azerbaiyán',
        'Bahamas', 'Bahrein', 'Bangladesh', 'Barbados', 'Belarús',
        'Bélgica', 'Belice', 'Benin', 'Bhután', 'Bolivia',
        'Bosnia y Herzegovina', 'Botswana', 'Brasil', 'Brunei Darussalam',
        'Bulgaria', 'Burkina Faso', 'Burundi', 'Cabo Verde', 'Camboya',
        'Camerún', 'Canadá', 'Chad', 'Chile', 'China', 'Chipre','Colombia',
        'Comoras', 'Congo', 'Costa Rica', 'Côte d\'Ivoire', 'Croacia',
        'Cuba', 'Dinamarca', 'Djibouti', 'Dominicana', 'Ecuador', 'Egipto',
        'El Salvador', 'Emiratos Árabes Unidos', 'Eritrea', 'Eslovaquia',
        'Eslovenia', 'España', 'Estados Unidos de América', 'Estonia',
        'Etiopía', 'ex República Yugoslava de Macedonia',
        'Federación de Rusia', 'Fiji', 'Filipinas', 'Finlandia', 'Francia',
        'Gabón', 'Gambia', 'Georgia', 'Ghana', 'Granada', 'Grecia',
        'Guatemala', 'Guinea', 'Guinea Bissau', 'Guinea Ecuatorial',
        'Guyana', 'Haití', 'Honduras', 'Hungría', 'India', 'Indonesia',
        'Irán', 'Iraq', 'Irlanda', 'Islandia', 'Islas Marshall',
        'Islas Salomón', 'Israel', 'Italia', 'Jamaica', 'Japón',
        'Jordania', 'Kazajstán', 'Kenya', 'Kirguistán', 'Kiribati',
        'Kuwait', 'Lesotho', 'Letonia', 'Líbano', 'Liberia', 'Libia',
        'Liechtenstein', 'Lituania', 'Luxemburgo', 'Madagascar',
        'Malasia', 'Malawi', 'Maldivas', 'Mali', 'Malta','Marruecos',
        'Mauricio', 'Mauritania', 'México', 'Micronesia', 'Mónaco',
        'Mongolia', 'Montenegro','Mozambique','Myanmar', 'Namibia',
        'Nauru', 'Nicaragua', 'Niger', 'Nigeria', 'Noruega',
        'Nueva Zelandia', 'Omán', 'Países Bajos', 'Pakistán', 'Palau',
        'Panamá', 'Papua Nueva Guinea', 'Paraguay', 'Perú', 'Polonia',
        'Portugal', 'Qatar',
        'Reino Unido de Gran Bretaña e Irlanda del Norte',
        'República Árabe Siria', 'República Centroafricana',
        'República Checa', 'República de Corea', 'República de Moldova',
        'República Democrática del Congo',
        'República Democrática Popular Lao',
        'República Dominicana',
        'República Federal Democrática de Nepal',
        'República Popular Democrática de Corea',
        'República Unida de Tanzanía', 'Rumania', 'Rwanda',
        'Saint Kitts y Nevis', 'Samoa', 'San Marino', 'Santa Lucía',
        'Santo Tomé y Príncipe', 'San Vicente y las Granadinas',
        'Senegal', 'Serbia', 'Seychelles', 'Sierra Leona', 'Singapur',
        'Somalia', 'Sri Lanka', 'Sudáfrica', 'Sudán', 'Sudán del Sur',
        'Suecia', 'Suiza', 'Suriname', 'Swazilandia', 'Tailandia',
        'Tayikistán', 'Timor-Leste', 'Togo', 'Tonga', 'Trinidad y Tabago',
        'Túnez', 'Turkmenistán', 'Turquía', 'Tuvalu', 'Ucrania', 'Uganda',
        'Uruguay', 'Uzbekistán', 'Vanuatu', 'Venezuela', 'Vietman',
        'Yemen', 'Zambia', 'Zimbabwe'
    )

    city_formats = (
        '{{city_adjetive}} {{country}}',
        'San {{first_name}} {{city_suffix}}',
    )
    street_name_formats = (
        '{{street_prefix}} {{last_name}}',
        '{{street_prefix}} {{country}}',
        '{{street_prefix}} {{state}}',
        '{{street_prefix}} {{city_prefix}} {{last_name}}'
    )
    street_address_formats = (
        #'{{building_number}} {{street_name}}',
        '{{street_name}} {{secondary_address}}',
        #'{{building_number}} {{street_name}} {{secondary_address}}',
    )
    address_formats = (
        "{{street_address}}\n{{city}}, {{state_abbr}} {{postcode}}",
    )
    secondary_address_formats = ('### ###', '### Interior ###',
        '### Edif. ### , Depto. ###')

    @classmethod
    def city_prefix(cls):
        return cls.random_element(cls.city_prefixes)

    @classmethod
    def city_suffix(cls):
        return cls.random_element(cls.city_suffixies)

    @classmethod
    def city_adjetive(cls):
        return cls.random_element(cls.city_adjetives)

    @classmethod
    def street_prefix(cls):
        """
        :example 'Avenida'
        """
        return cls.random_element(cls.street_prefixes)
    @classmethod
    def secondary_address(cls):
        """
        :example '020 Interior 999'
        """
        return cls.numerify(cls.random_element(cls.secondary_address_formats))

    @classmethod
    def state(cls):
        """
        example: u'Guerrero'
        """
        return cls.random_element(cls.states)[1]

    @classmethod
    def state_abbr(cls):
        """
        example: u'GRO'
        """
        return cls.random_element(cls.states)[0]


########NEW FILE########
__FILENAME__ = company
# -*- encoding: utf-8 -*-
from __future__ import unicode_literals
from ..company import Provider as CompanyProvider


class Provider(CompanyProvider):
    formats = (
        '{{last_name}} {{company_suffix}}',
        '{{last_name}}-{{last_name}}',
        '{{company_prefix}} {{last_name}}-{{last_name}}',
        '{{company_prefix}} {{last_name}} y {{last_name}}',
        '{{company_prefix}} {{last_name}}, {{last_name}} y {{last_name}}',
        '{{last_name}}-{{last_name}} {{company_suffix}}',
        '{{last_name}}, {{last_name}} y {{last_name}}',
        '{{last_name}} y {{last_name}} {{company_suffix}}'
    )

    catch_phrase_words = (
        (
           "habilidad", "acceso", "adaptador", "algoritmo", "alianza",
           "analista", "aplicación", "enfoque", "arquitectura",
           "archivo", "inteligencia artificial", "array", "actitud",
           "medición", "gestión presupuestaria", "capacidad", "desafío",
           "circuito", "colaboración", "complejidad", "concepto",
           "conglomeración", "contingencia", "núcleo", "fidelidad",
           "base de datos", "data-warehouse", "definición", "emulación",
           "codificar", "encriptar", "extranet", "firmware",
           "flexibilidad", "focus group", "previsión", "base de trabajo",
           "función", "funcionalidad", "Interfaz Gráfica", "groupware",
           "Interfaz gráfico de usuario", "hardware", "Soporte", "jerarquía",
           "conjunto", "implementación", "infraestructura", "iniciativa",
           "instalación", "conjunto de instrucciones", "interfaz",
           "intranet", "base del conocimiento", "red de area local",
           "aprovechar", "matrices", "metodologías", "middleware",
           "migración", "modelo", "moderador", "monitorizar",
           "arquitectura abierta", "sistema abierto", "orquestar",
           "paradigma", "paralelismo", "política", "portal",
           "estructura de precios", "proceso de mejora",
           "producto", "productividad", "proyecto", "proyección",
           "protocolo", "línea segura", "software", "solución",
           "estandardización", "estrategia", "estructura", "éxito",
           "superestructura", "soporte", "sinergia", "mediante",
           "marco de tiempo", "caja de herramientas", "utilización",
           "website", "fuerza de trabajo"),
        (
            "24 horas", "24/7", "3ra generación", "4ta generación",
            "5ta generación", "6ta generación", "analizada",
            "asimétrica", "asíncrona", "monitorizada por red",
            "bidireccional", "bifurcada", "generada por el cliente",
            "cliente servidor", "coherente", "cohesiva", "compuesto",
            "sensible al contexto", "basado en el contexto",
            "basado en contenido", "dedicada",
            "generado por la demanda", "didactica", "direccional",
            "discreta", "dinámica", "potenciada", "acompasada",
            "ejecutiva", "explícita", "tolerante a fallos",
            "innovadora", "amplio ábanico", "global", "heurística",
            "alto nivel", "holística", "homogénea", "híbrida",
            "incremental", "intangible", "interactiva", "intermedia",
            "local", "logística", "maximizada", "metódica",
            "misión crítica", "móbil", "modular", "motivadora",
            "multimedia", "multiestado", "multitarea", "nacional",
            "basado en necesidades", "neutral", "nueva generación",
            "no-volátil", "orientado a objetos", "óptima", "optimizada",
            "radical", "tiempo real", "recíproca", "regional",
            "escalable", "secundaria", "orientada a soluciones",
            "estable", "estatica", "sistemática", "sistémica",
            "tangible", "terciaria", "transicional", "uniforme",
            "valor añadido", "vía web", "defectos cero", "tolerancia cero"
        ),
        (
            'adaptivo', 'avanzado', 'asimilado', 'automatizado',
            'balanceado', 'enfocado al negocio',
            'centralizado', 'clonado', 'compatible', 'configurable',
            'multiplataforma', 'enfocado al cliente', 'personalizable',
            'descentralizado', 'digitizado', 'distribuido', 'diverso',
            'mejorado', 'en toda la empresa', 'ergonómico', 'exclusivo',
            'expandido', 'extendido', 'cara a cara', 'enfocado',
            'de primera línea', 'totalmente configurable',
            'basado en funcionalidad', 'fundamental', 'horizontal',
            'implementado', 'innovador', 'integrado', 'intuitivo',
            'inverso', 'administrado', 'mandatorio', 'monitoreado',
            'multicanal', 'multilateral', 'multi-capas', 'en red',
            'basado en objetos', 'de arquitectura abierta',
            'Open-source', 'operativo', 'optimizado', 'opcional',
            'orgánico', 'organizado', 'perseverante', 'persistente',
            'polarizado', 'preventivo', 'proactivo', 'enfocado a ganancias',
            'programable', 'progresivo', 'llave pública',
            'enfocado a la calidad', 'reactivo', 'realineado',
            're-contextualizado', 'reducido', 'con ingeniería inversa',
            'de tamaño adecuado', 'robusto', 'seguro', 'compartible',
            'sincronizado', 'orientado a equipos', 'total',
            'universal', 'actualizable', 'centrado al usuario',
            'versátil', 'virtual', 'visionario',
        )
    )

    bsWords = (
        (
            'implementa', 'utiliza', 'integrata', 'optimiza',
            'evoluciona', 'transforma', 'abraza', 'habilia',
            'orquesta', 'reinventa', 'agrega', 'mejora', 'incentiviza',
            'modifica', 'empondera', 'monetiza', 'fortalece',
            'facilita', 'synergiza',  'crear marca', 'crece',
            'sintetiza', 'entrega', 'mezcla', 'incuba', 'compromete',
            'maximiza', 'inmediata', 'visualiza', 'inova',
            'escala', 'libera', 'maneja', 'extiende', 'revoluciona',
            'genera', 'explota', 'transición', 'itera', 'cultiva',
            'redefine', 'recontextualiza',
        ),
        (
            'synergías', 'paradigmas', 'marcados', 'socios',
            'infraestructuras', 'plataformas', 'iniciativas',
            'chanales', 'communidades', 'ROI', 'soluciones',
            'portales', 'nichos', 'tecnologías', 'contenido',
            'cadena de producción', 'convergencia', 'relaciones',
            'architecturas', 'interfaces', 'comercio electrónico',
            'sistemas', 'ancho de banda', 'modelos', 'entregables',
            'usuarios', 'esquemas', 'redes', 'aplicaciones', 'métricas',
            'funcionalidades', 'experiencias', 'servicios web',
            'metodologías'
        ),
        (
            'valor agregado', 'verticales', 'proactivas', 'robustas',
            'revolucionarias', 'escalables', 'de punta', 'innovadoras',
            'intuitivas', 'estratégicas', 'e-business', 'de misión crítica',
            'uno-a-uno', '24/7', 'end-to-end', 'globales', 'B2B', 'B2C',
            'granulares', 'sin fricciones', 'virtuales', 'virales',
            'dinámicas', '24/365', 'magnéticas', 'listo para la web',
            'interactivas', 'dot-com', 'sexi', 'en tiempo real',
            'eficientes', 'front-end', 'distribuidas', 'extensibles',
            'llave en mano', 'de clase mundial', 'open-source',
            'plataforma cruzada', 'de paquete', 'empresariales',
            'integrado', 'impacto total', 'inalámbrica', 'transparentes',
            'de siguiente generación', 'lo último', 'centrado al usuario',
            'visionarias', 'personalizado', 'ubicuas', 'plug-and-play',
            'colaborativas', 'holísticas', 'ricas'
        ),
    )

    company_preffixes = ('Despacho', 'Grupo', 'Corporativo', 'Club',
                         'Industrias', 'Laboratorios', 'Proyectos')

    company_suffixes = ('A.C.', 'S.A.', 'S.A. de C.V.', 'S.C.',
        'S. R.L. de C.V.','e Hijos', 'y Asociados')

    def company_prefix(self):
        """
        Ejemplo: Grupo
        """
        return self.random_element(self.company_preffixes)

    def catch_phrase(self):
        """
        :example 'Robust full-range hub'
        """
        result = []
        for word_list in self.catch_phrase_words:
            result.append(self.random_element(word_list))

        return " ".join(result)

    def bs(self):
        """
        :example 'integrate extensible convergence'
        """
        result = []
        for word_list in self.bsWords:
            result.append(self.random_element(word_list))

        return " ".join(result)

########NEW FILE########
__FILENAME__ = person
# -*- encoding: utf-8 -*-
from __future__ import unicode_literals
from ..person import Provider as PersonProvider


class Provider(PersonProvider):
    formats = (
        '{{first_name}} {{last_name}} {{last_name}}',
        '{{first_name}} {{first_name}} {{last_name}}',
        '{{first_name}} {{first_name}} {{last_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{prefix}} {{first_name}} {{last_name}}',
    )

    first_names = ('Abel', 'Abelardo', 'Abigail', 'Abraham', 'Abril',
    'Adalberto', 'Adán', 'Adela', 'Adriana',
    'Aida','Alejandra','Agustín', 'Alberto', 'Aldonza', 'Alicia',
    'Alta  Gracia', 'Alonso', 'Aldo', 'Alejandro', 'Alfonso', 'Alfredo',
    'Alma', 'Alvaro', 'Amalia', 'Amanda', 'Amador', 'Amelia', 'Ana',
    'Anabel', 'Ana Luisa', 'Ana María', 'Anel', 'Andrea', 'Andrés',
    'Ángel', 'Ángela', 'Angélica', 'Antonia', 'Antonio', 'Araceli',
    'Arcelia', 'Ariadna', 'Armando', 'Arturo',  'Asunción', 'Augusto',
    'Aurora', 'Aurelio', 'Barbara', 'Beatriz' , 'Berta','Benito',
    'Benjamín', 'Bernardo', 'Bernabé','Bianca','Blanca',
    'Bruno','Camila', 'Camilo', 'Caridad', 'Carla','Carlos', 'Carlota',
    'Carmen', 'Carolina', 'Catalina', 'César','Cecilia', 'Celia',
    'Citlali', 'Clara', 'Claudia','Claudio', 'Clemente', 'Concepción',
    'Conchita', 'Cornelio', 'Cristian', 'Cristal',
    'Cristina','Cristobal', 'Cynthia', 'Dalia', 'Daniel', 'Daniela',
    'Darío', 'David', 'Débora', 'Delia', 'Diana','Diego', 'Dolores',
    'Dulce', 'Dulce María', 'Eduardo', 'Elena', 'Elias', 'Elisa',
    'Eloisa', 'Elsa', 'Elvia', 'Elvira', 'Eloy', 'Emilia', 'Emiliano',
    'Emilio', 'Enrique', 'Eric', 'Ernesto', 'Esmeralda', 'Esteban',
    'Estefanía', 'Estela', 'Esparta','Espartaco','Esperanza', 'Estela',
    'Esther', 'Eugenia', 'Eugenio', 'Eva', 'Evelio', 'Fabiola',
    'Federico', 'Felipe', 'Fernando', 'Felix', 'Fidel', 'Flavio',
    'Florencia', 'Francisco', 'Francisco Javier', 'Francisca', 'Frida',
    'Gabino', 'Gabriela', 'Gabriel', 'Genaro', 'Georgina', 'Gerardo',
    'Gerónimo', 'Germán', 'Gilberto', 'Guillermina', 'Gloria',
    'Gonzalo', 'Graciela', 'Gregorio', 'Guillermo',
    'Guadalupe','Gustavo', 'Héctor', 'Helena', 'Hermelinda' 'Hernán',
    'Hilda', 'Homero', 'Horacio', 'Hugo', 'Humberto', 'Ignacio', 'Ilse',
    'Indira', 'Inés', 'Irene', 'Irma', 'Itzel', 'Isaac', 'Isabel',
    'Isabela', 'Israel', 'Iván', 'Ivonne', 'Jacinto' 'Jacobo', 'Jaime',
    'Javier', 'Jaqueline', 'Jerónimo', 'Jesús','Joaquín', 'Jonás',
    'Jorge', 'Jorge Luis', 'Jos', 'José', 'Josefina', 'José Carlos',
    'José Eduardo', 'José Emilio', 'José Luis', 'José Manuél',
    'José María', 'Juan', 'Juana', 'Juan Carlos', 'Judith', 'Julia',
    'Julio', 'Julio César', 'Laura', 'Leonardo', 'Leonel', 'Leonor',
    'Karla', 'Karina' 'Leticia', 'Lorenzo', 'Lucas', 'Lilia',  'Liliana',
    'Linda','Lorena', 'Lourdes', 'Lucía', 'Luisa', 'Luz', 'Luis',
    'Luis Miguel', 'Luis Manuel', 'Magdalena', 'Manuel', 'Marco Antonio',
    'Marcela', 'Marcos', 'Margarita', 'María', 'Marisela', 'Marisol',
    'María del Carmen', 'María Cristina', 'María Elena',
    'María Eugenia', 'María José', 'María Luisa', 'María Teresa', 'Marisol',
    'Martha', 'Mayte', 'Mariano', 'Mariana', 'Mario', 'Martín', 'Mateo',
    'Mauro', 'Mauricio', 'Maximiliano', 'Mercedes','Micaela', 'Minerva',
    'Mitzy', 'Miguel', 'Miguel Ángel', 'Miriam', 'Modesto', 'Mónica',
    'Nadia', 'Natalia', 'Natividad', 'Nancy', 'Nayeli', 'Nelly',
    'Noelia', 'Noemí', 'Norma','Nicolás', 'Octavio', 'Ofelia', 'Olivia',
    'Óliver', 'Olga', 'Óscar', 'Oswaldo', 'Omar', 'Pablo', 'Paola',
    'Patricia', 'Pamela', 'Patricio', 'Pascual', 'Paulina', 'Pedro',
    'Perla', 'Pilar', 'Porfirio', 'Rafaél', 'Ramiro', 'Ramón', 'Raúl',
    'Raquel', 'Rebeca', 'Reina', 'Renato', 'René', 'Reynaldo',
    'Ricardo', 'Roberto', 'Rodolfo', 'Rocío', 'Rodrigo', 'Rolando',
    'Rosa', 'Rosalia', 'Rosario','Rubén', 'Rufino', 'Ruby', 'Salvador',
    'Salma', 'Samuel', 'Sandra', 'Santiago', 'Sara','Sessa', 'Sergio',
    'Serafín', 'Silvano','Silvia', 'Sofía', 'Socorro', 'Soledad',
    'Sonia', 'Susana', 'Tania', 'Teresa','Teodoro', 'Timoteo', 'Tomás',
    'Trinidad', 'Verónica', 'Vicente', 'Violeta', 'Uriel', 'Úrsula',
    'Vanesa', 'Víctor', 'Victoria', 'Virginia', 'Wilfrido', 'Wendolin',
    'Yeni', 'Yolanda', 'Yuridia', 'Zacarías', 'Zeferino', 'Zoé')


    last_names = ( 'Abrego', 'Abreu', 'Acevedo', 'Acosta', 'Acuña',
'Adame', 'Aguayo', 'Aguilar', 'Aguilera', 'Aguirre', 'Alarcón', 'Alba',
'Alcala', 'Alcántar', 'Alcaraz', 'Alejandro', 'Alemán', 'Alfaro',
'Almanza', 'Almaraz', 'Almonte', 'Alonso', 'Alonzo', 'Altamirano',
'Alva', 'Alvarado', 'Alvarez', 'Amador', 'Amaya', 'Anaya', 'Anguiano',
'Angulo', 'Aparicio', 'Apodaca', 'Aponte', 'Aragón', 'Aranda', 'Arce',
'Archuleta', 'Arellano', 'Arenas', 'Arevalo', 'Arguello', 'Arias',
'Armas', 'Armendáriz', 'Armenta', 'Arredondo', 'Arreola', 'Arriaga',
'Arroyo', 'Arteaga', 'Ávalos', 'Ávila', 'Avilés', 'Ayala', 'Baca',
'Badillo', 'Báez', 'Baeza', 'Bahena', 'Balderas', 'Ballesteros',
'Bañuelos', 'Barajas', 'Barela', 'Barragán', 'Barraza', 'Barrera',
'Barreto', 'Barrientos', 'Barrios', 'Batista', 'Becerra', 'Beltrán',
'Benavides', 'Benavídez', 'Benítez', 'Bermúdez', 'Bernal', 'Berríos',
'Bétancourt', 'Blanco', 'Bonilla', 'Borrego', 'Botello', 'Bravo',
'Briones', 'Briseño', 'Brito', 'Bueno', 'Burgos', 'Bustamante',
'Bustos', 'Caballero', 'Cabán', 'Cabrera', 'Cadena', 'Caldera',
'Calderón', 'Calvillo', 'Camacho', 'Camarillo', 'Campos', 'Canales',
'Candelaria', 'Cano', 'Cantú', 'Caraballo', 'Carbajal', 'Cardenas',
'Cardona', 'Carmona', 'Carranza', 'Carrasco', 'Carreón', 'Carrera',
'Carrero', 'Carrillo', 'Carrión', 'Carvajal', 'Casanova', 'Casares',
'Casárez', 'Casas', 'Casillas', 'Castañeda', 'Castellanos', 'Castillo',
'Castro', 'Cavazos', 'Cazares', 'Ceballos', 'Cedillo', 'Ceja',
'Centeno', 'Cepeda', 'Cervantes', 'Cervántez', 'Chacón', 'Chapa',
'Chavarría', 'Chávez', 'Cintrón', 'Cisneros', 'Collado', 'Collazo',
'Colón', 'Colunga', 'Concepción', 'Contreras', 'Cordero', 'Córdova',
'Cornejo', 'Corona', 'Coronado', 'Corral', 'Corrales', 'Correa',
'Cortés', 'Cortez', 'Cotto', 'Covarrubias', 'Crespo', 'Cruz', 'Cuellar',
'Curiel', 'Dávila', 'de Anda', 'de Jesús', 'de la Crúz', 'de la Fuente',
'de la Garza', 'de la O', 'de la Rosa', 'de la Torre', 'de León',
'Delgadillo', 'Delgado', 'del Río', 'del Valle', 'Díaz', 'Domínguez',
'Duarte', 'Dueñas', 'Durán', 'Echeverría', 'Elizondo', 'Enríquez',
'Escalante', 'Escamilla', 'Escobar', 'Escobedo', 'Esparza', 'Espinal',
'Espino', 'Espinosa', 'Espinoza', 'Esquibel', 'Esquivel', 'Estévez',
'Estrada', 'Fajardo', 'Farías', 'Feliciano', 'Fernández', 'Ferrer',
'Fierro', 'Figueroa', 'Flores', 'Flórez', 'Fonseca', 'Franco', 'Frías',
'Fuentes', 'Gaitán', 'Galarza', 'Galindo', 'Gallardo', 'Gallegos',
'Galván', 'Gálvez', 'Gamboa', 'Gamez', 'Gaona', 'Garay', 'García',
'Garibay', 'Garica', 'Garrido', 'Garza', 'Gastélum', 'Gaytán', 'Gil',
'Girón', 'Godínez', 'Godoy', 'Gómez', 'Gonzales', 'González', 'Gollum',
'Gracia', 'Granado', 'Granados', 'Griego', 'Grijalva', 'Guajardo',
'Guardado', 'Guerra', 'Guerrero', 'Guevara', 'Guillen', 'Gurule',
'Gutiérrez', 'Guzmán', 'Haro', 'Henríquez', 'Heredia', 'Hernádez',
'Hernandes', 'Hernández', 'Herrera', 'Hidalgo', 'Hinojosa', 'Holguín',
'Huerta', 'Hurtado', 'Ibarra', 'Iglesias', 'Irizarry', 'Jaime',
'Jaimes', 'Jáquez', 'Jaramillo', 'Jasso', 'Jiménez', 'Jimínez',
'Juárez', 'Jurado', 'Laboy', 'Lara', 'Laureano', 'Leal', 'Lebrón',
'Ledesma', 'Leiva', 'Lemus', 'León', 'Lerma', 'Leyva', 'Limón',
'Linares', 'Lira', 'Llamas', 'Loera', 'Lomeli', 'Longoria', 'López',
'Lovato', 'Loya', 'Lozada', 'Lozano', 'Lucero', 'Lucio', 'Luevano',
'Lugo', 'Luna', 'Macías', 'Madera', 'Madrid', 'Madrigal', 'Maestas',
'Magaña', 'Malave', 'Maldonado', 'Manzanares', 'Mares', 'Marín',
'Márquez', 'Marrero', 'Marroquín', 'Martínez', 'Mascareñas', 'Mata',
'Mateo', 'Matías', 'Matos', 'Maya', 'Mayorga', 'Medina', 'Medrano',
'Mejía', 'Meléndez', 'Melgar', 'Mena', 'Menchaca', 'Méndez', 'Mendoza',
'Menéndez', 'Meraz', 'Mercado', 'Merino', 'Mesa', 'Meza', 'Miramontes',
'Miranda', 'Mireles', 'Mojica', 'Molina', 'Mondragón', 'Monroy',
'Montalvo', 'Montañez', 'Montaño', 'Montemayor', 'Montenegro',
'Montero', 'Montes', 'Montez', 'Montoya', 'Mora', 'Morales', 'Moreno',
'Mota', 'Moya', 'Munguía', 'Muñiz', 'Muñoz', 'Murillo', 'Muro',
'Nájera', 'Naranjo', 'Narváez', 'Nava', 'Navarrete', 'Navarro',
'Nazario', 'Negrete', 'Negrón', 'Nevárez', 'Nieto', 'Nieves', 'Niño',
'Noriega', 'Núñez', 'Ocampo', 'Ocasio', 'Ochoa', 'Ojeda', 'Olivares',
'Olivárez', 'Olivas', 'Olivera', 'Olivo', 'Olmos', 'Olvera',
'Ontiveros', 'Oquendo', 'Ordóñez', 'Orellana', 'Ornelas', 'Orosco',
'Orozco', 'Orta', 'Ortega', 'Ortiz', 'Osorio', 'Otero', 'Ozuna',
'Pabón', 'Pacheco', 'Padilla', 'Padrón', 'Páez', 'Palacios', 'Palomino',
'Palomo', 'Pantoja', 'Paredes', 'Parra', 'Partida', 'Patiño', 'Paz',
'Pedraza', 'Pedroza', 'Pelayo', 'Peña', 'Perales', 'Peralta', 'Perea',
'Peres', 'Pérez', 'Pichardo', 'Piña', 'Pineda', 'Pizarro', 'Polanco',
'Ponce', 'Porras', 'Portillo', 'Posada', 'Prado', 'Preciado', 'Prieto',
'Puente', 'Puga', 'Pulido', 'Quesada', 'Quezada', 'Quiñones',
'Quiñónez', 'Quintana', 'Quintanilla', 'Quintero', 'Quiroz', 'Rael',
'Ramírez', 'Ramón', 'Ramos', 'Rangel', 'Rascón', 'Raya', 'Razo',
'Regalado', 'Rendón,' 'Rentería', 'Reséndez', 'Reyes', 'Reyna',
'Reynoso', 'Rico', 'Rincón', 'Riojas', 'Ríos', 'Rivas', 'Rivera',
'Rivero', 'Robledo', 'Robles', 'Rocha', 'Rodarte', 'Rodrígez',
'Rodríguez', 'Rodríquez', 'Rojas', 'Rojo', 'Roldán', 'Rolón', 'Romero',
'Romo', 'Roque', 'Rosado', 'Rosales', 'Rosario', 'Rosas', 'Roybal',
'Rubio', 'Ruelas', 'Ruiz', 'Saavedra', 'Sáenz', 'Saiz', 'Salas',
'Salazar', 'Salcedo', 'Salcido', 'Saldaña', 'Saldivar', 'Salgado',
'Salinas', 'Samaniego', 'Sanabria', 'Sanches', 'Sánchez', 'Sandoval',
'Santacruz', 'Santana', 'Santiago', 'Santillán', 'Sarabia', 'Sauceda',
'Saucedo', 'Segovia', 'Segura', 'Sepúlveda', 'Serna', 'Serrano',
'Serrato', 'Sevilla', 'Sierra', 'Sisneros', 'Solano', 'Solís', 'Soliz',
'Solorio', 'Solorzano', 'Soria', 'Sosa', 'Sotelo', 'Soto', 'Suárez',
'Tafoya', 'Tamayo', 'Tamez', 'Tapia', 'Tejada', 'Tejeda', 'Téllez',
'Tello', 'Terán', 'Terrazas', 'Tijerina', 'Tirado', 'Toledo', 'Toro',
'Torres', 'Tórrez', 'Tovar', 'Trejo', 'Treviño', 'Trujillo', 'Ulibarri',
'Ulloa', 'Urbina', 'Ureña', 'Urías', 'Uribe', 'Urrutia', 'Vaca',
'Valadez', 'Valdés', 'Valdez', 'Valdivia', 'Valencia', 'Valentín',
'Valenzuela', 'Valladares', 'Valle', 'Vallejo', 'Valles', 'Valverde',
'Vanegas', 'Varela', 'Vargas', 'Vásquez', 'Vázquez', 'Vega', 'Vela',
'Velasco', 'Velásquez', 'Velázquez', 'Vélez', 'Véliz', 'Venegas',
'Vera', 'Verdugo', 'Verduzco', 'Vergara', 'Viera', 'Vigil', 'Villa',
'Villagómez', 'Villalobos', 'Villalpando', 'Villanueva', 'Villareal',
'Villarreal', 'Villaseñor', 'Villegas', 'Yáñez', 'Ybarra', 'Zambrano',
'Zamora', 'Zamudio', 'Zapata', 'Zaragoza', 'Zarate', 'Zavala', 'Zayas',
'Zedillo', 'Zelaya', 'Zepeda', 'Zúñiga' )

    prefixes = ('Sr(a).', 'Dr.', 'Mtro.', 'Lic.' ,
                'Ing.')


    @classmethod
    def prefix(cls):
        return cls.random_element(cls.prefixes)
########NEW FILE########
__FILENAME__ = phone_number
from __future__ import unicode_literals
from ..phone_number import Provider as PhoneNumberProvider


class Provider(PhoneNumberProvider):
    formats = (
        '+##(#)##########',
        '+##(#)##########',
        '0##########',
        '0##########',
        '###-###-####',
        '(###)###-####',
        '1-###-###-####',
        '###.###.####',
        '###-###-####',
        '(###)###-####',
        '1-###-###-####',
        '###.###.####',
        '###-###-####x###',
        '(###)###-####x###',
        '1-###-###-####x###',
        '###.###.####x###',
        '###-###-####x####',
        '(###)###-####x####',
        '1-###-###-####x####',
        '###.###.####x####',
        '###-###-####x#####',
        '(###)###-####x#####',
        '1-###-###-####x#####',
        '###.###.####x#####'
    )

########NEW FILE########
__FILENAME__ = address
# -*- coding: utf-8 -*-

from __future__ import unicode_literals
from ..address import Provider as AddressProvider


class Provider(AddressProvider):
    city_prefixes = ('شمال', 'غرب', 'شرق', 'جنوب', 'بندر', 'شهر', 'روستای', 'دهستان', 'شهرستان', 'باغات', 'استان')
    building_number_formats = ('#####', '####', '###')
    street_suffixes = (
        'کوچه', 'خیابان', 'پل', 'دره', 'میدان', 'چهار راه', 'بن بست', 'بلوار', 'جنب', 'تقاطع', 'آزاد راه', 'بزرگ راه',  'جزیره', 'کوه', 'جاده', 'تونل'
        )
    postcode_formats = ('###', '####', '#####','######', '##########')
    states = (
        'آذربایجان شرقی', 'آذربایجان غربی', 'اردبیل', 'خراسان', 'کردستان', 'گیلان', 'اصفهان', 'البرز', 'ایلام', 'بوشهر', 'تهران', 'چهارمحال و بختیاری', 'خراسان جنوبی', 'خراسان رضوی', 'خراسان شمالی', 'خوزستان', 'زنجان', 'سمنان', 'سیستان و بلوچستان', 'فارس', 'قزوین', 'قم', 'کرمان', 'کرمانشاه', 'کهگیلویه و بویراحمد', 'گلستان', 'لرستان', 'مازندران', 'مرکزی', 'هرمزگان', 'همدان', 'یزد'
        )
    countries = (
        'جمهوری آذربایجان', 'آرژانتین', 'آفریقای جنوبی', 'جمهوری آفریقای مرکزی', 'آلبانی', 'آلمان', 'آنتیگوا و باربودا', 'آندورا', 'آنگولا', 'اتریش', 'اتیوپی', 'اردن', 'ارمنستان', 'اروگوئه', 'اریتره', 'ازبکستان', 'اسپانیا', 'استرالیا', 'استونی', 'اسرائیل', 'اسلواکی', 'اسلوونی', 'افغانستان', 'اکوادور', 'الجزایر', 'السالوادور', 'امارات متحده عربی', 'اندونزی', 'اوکراین', 'اوگاندا', 'ایالات متحده آمریکا', 'ایتالیا', 'ایران', 'جمهوری ایرلند', 'ایسلند', 'باربادوس', 'باهاما', 'بحرین', 'برزیل', 'برونئی', 'بریتانیا', 'بلاروس', 'بلژیک', 'بلغارستان', 'بلیز', 'بنگلادش', 'بنین', 'پادشاهی بوتان', 'بوتسوانا', 'بورکینافاسو', 'بوروندی', 'بوسنی و هرزگوین', 'بولیوی', 'پاپوآ گینه نو', 'پاراگوئه', 'پاناما', 'پاکستان', 'پرتغال', 'پرو', 'پورتوریکو', 'تاجیکستان', 'تانزانیا', 'تایلند', 'جمهوری چین', 'ترکمنستان', 'ترکیه', 'ترینیداد و توباگو', 'توگو', 'تونس', 'تونگا', 'تووالو', 'تیمور شرقی', 'جامائیکا', 'جزایر سلیمان', 'جزایر مارشال', 'جمهوری چک', 'جمهوری دومینیکن', 'جیبوتی', 'چاد', 'چین', 'دانمارک', 'دومینیکا', 'جمهوری دومینیکن', 'رواندا', 'روسیه', 'رومانی', 'زامبیا', 'نیوزیلند', 'زیمباوه', 'جمهوری دموکراتیک کنگو (زئیر)', 'ژاپن', 'سائوتومه و پرینسیپ', 'ساحل عاج', 'ساموآی غربی', 'سن مارینو', 'سری‌لانکا', 'سنت کیتس و نویس', 'سنت لوسیا', 'سنت وینسنت و گرنادین‌ها', 'سنگاپور', 'سنگال', 'سوئد', 'سوئیس', 'سوازیلند', 'سودان', 'سودان جنوبی', 'سورینام', 'سوریه', 'سومالی', 'سیرالئون', 'سیشل', 'شیلی', 'صربستان', 'عراق', 'عربستان سعودی', 'عمان', 'غنا', 'فرانسه', 'فلسطین', 'فنلاند', 'فیجی', 'فیلیپین', 'قبرس', 'قرقیزستان', 'قزاقستان', 'قطر', 'کامبوج', 'کامرون', 'کانادا', 'کره جنوبی', 'کره شمالی', 'کرواسی', 'کاستاریکا', 'کلمبیا', 'جمهوری کنگو', 'جمهوری دموکراتیک کنگو', 'کنیا', 'کوبا', 'کوزوو', 'مجمع‌الجزایر قمر', 'کویت', 'کیپ ورد', 'کیریباتی', 'گابن', 'گامبیا', 'گرجستان', 'گرنادا', 'گرینلند(از مستعمرات دانمارک)', 'گواتمالا', 'گویان', 'گینه', 'گینه استوایی', 'گینه بیسائو', 'لائوس', 'لبنان', 'لتونی', 'لسوتو', 'لهستان', 'لوکزامبورگ', 'لیبریا', 'لیبی', 'لیتوانی', 'لیختن‌اشتاین', 'ماداگاسکار', 'مالاوی', 'مالت', 'مالدیو', 'مالزی', 'مالی', 'مجارستان', 'مراکش', 'مصر', 'مغولستان', 'مقدونیه', 'مکزیک', 'موریتانی', 'موریس', 'موزامبیک', 'مولداوی', 'موناکو', 'مونته‌نگرو', 'میانمار', 'ایالات فدرال میکرونزی', 'نائورو', 'نامیبیا', 'نپال', 'نروژ', 'نیجریه', 'نیکاراگوئه', 'نیوزیلند', 'واتیکان', 'وانواتو', 'ونزوئلا', 'ویتنام', 'هائیتی', 'هلند', 'هندوراس', 'هند', 'یمن', 'یونان'
    )

    city_formats = (
        '{{city_prefix}} {{first_name}}'
    )
    street_name_formats = (
        '{{first_name}} {{street_suffix}}',
        '{{last_name}} {{street_suffix}}'
    )
    street_address_formats = (
        '{{building_number}} {{street_name}}',
        '{{building_number}} {{street_name}} {{secondary_address}}',
    )
    address_formats = (
        "{{street_address}}\n{{city}}, {{state}} {{postcode}}",
    )
    secondary_address_formats = ('سوئیت ###', 'واحد ###')

    @classmethod
    def city_prefix(cls):
        return cls.random_element(cls.city_prefixes)

    @classmethod
    def secondary_address(cls):
        return cls.numerify(cls.random_element(cls.secondary_address_formats))

    @classmethod
    def state(cls):
        return cls.random_element(cls.states)

########NEW FILE########
__FILENAME__ = person
# -*- coding: utf-8 -*-

from __future__ import unicode_literals
from ..person import Provider as PersonProvider


class Provider(PersonProvider):
    formats = (
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{prefix}} {{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}} {{suffix}}',
        '{{prefix}} {{first_name}} {{last_name}} {{suffix}}'
    )

    first_names = (
        # top 50 Female Names in Iran: http://www.sabteahval.ir/Upload/Modules/Contents/asset100/name/d1391.htm
        'فاطمه', 'اسما', 'زهرا', 'عسل', 'نازنین زهرا', 'النا', 'زینب', 'سارا', 'یسنا', 'آتنا', 'ریحانه', 'آیناز', 'هستی', 'محیا', 'ستایش', 'باران', 'ثنا', 'هلیا', 'مریم', 'یلدا', 'فاطمه زهرا', 'ملیكا', 'سارینا', 'نازنین', 'مهسا', 'آیلین', 'نرگس', 'حنانه', 'رقیه', 'كیانا', 'كوثر', 'هانیه', 'مبینا', 'مهدیس', 'رها', 'آوا', 'اسرا', 'یگانه', 'نیایش', 'حدیث', 'الینا', 'سوگند', 'مائده', 'پریا', 'معصومه', 'مهدیه', 'آیدا', 'الناز', 'محدثه', 'یاسمین',
        # top 50 male Names in Iran: http://www.sabteahval.ir/Upload/Modules/Contents/asset100/name/p1391.htm
        'امیر علی', 'پرهام', 'ابوالفضل', 'كیان', 'امیرحسین', 'متین', 'محمد طاها', 'عرفان', 'محمد', 'دانیال', 'علی', 'آرمین', 'امیرمحمد', 'آرتین', 'حسین', 'سبحان', 'مهدی', 'سینا', 'محمد مهدی', 'آریا', 'محمدرضا', 'محمدپارسا', 'طاها', 'سجاد', 'امیررضا', 'آرش', 'امیرعباس', 'نیما', 'علیرضا', 'عرشیا', 'محمدامین', 'مبین', 'محمدحسین', 'یوسف', 'رضا', 'احسان', 'علی اصغر', 'آرین', 'امیرمهدی', 'محمدیاسین', 'ماهان', 'عباس', 'پارسا', 'حسام', 'یاسین', 'علی رضا', 'ایلیا', 'علی اكبر', 'محمدجواد', 'بنیامین'
    )

    last_names = (
        'محمدی', 'محمد پور', 'اکبر پور', 'رضا زاده', 'مجتهدی', 'دایی', 'حمیدی', 'کابلی', 'عبدالعلی', 'احمدی', 'اشرفی', 'علیجانی', 'ابوطالبی', 'علی شاهی', 'الوندی', 'بهمنی', 'بهرامی', 'هنری', 'ایروانی', 'حریریان', 'جعفر پور', 'جلالی', 'جلیلی', 'روحانی', 'خسروجردی', 'منصوری', 'مهدیان', 'نوروزی', 'نوری', 'رسته', 'سماوات', 'سمسار', 'شادروان', 'شاکری', 'سلطانی', 'شبیری', 'تحسینی', 'تنزیلی', 'طلوعی', 'ولاشجردی', 'وثاق', 'ظفری', 'زمانی', 'زارع', 'زارعی', 'ربانی', 'شمشیری', 'صارمی', 'صیادی', 'سرخوشیان',
        'رستمی', 'رسولی', 'رفیعی', 'کریمی', 'کرمانی', 'سعیدی', 'عباسی', 'پویان', 'ترکاشوند', 'زنجانی', 'تهرانی', 'جنتی', 'صنایعی', 'جهانی', 'اشتری', 'چنگیزی', 'دادفر', 'سغیری', 'پارسا', 'ضابطی', 'میردامادی', 'عقیلی', 'نامور', 'حسنی', 'لاهوتی', 'محجوب', 'هاشمی', 'معروف', 'معین', 'هوشیار', 'هومن', 'هدایت', 'قاضی', 'ملکیان', 'ضرغامی', 'یزدی', 'نوبختی', 'مجتبوی', 'نیلوفری', 'لاچینی', 'علی پور', 'عبدالمالکی', 'فرجی', 'موسوی', 'همدانی', 'موحد', 'کمالی', 'گلپایگانی', 'نعمتی', 'عزیزی'
    )

    prefixes = ('جناب آقای', 'سرکار خانم', 'جناب آقای دکتر', 'سرکار خانم دکتر')

    @classmethod
    def prefix(cls):
        return cls.random_element(cls.prefixes)

    @classmethod
    def suffix(cls):
        return ''

########NEW FILE########
__FILENAME__ = phone_number
from __future__ import unicode_literals
from ..phone_number import Provider as PhoneNumberProvider


class Provider(PhoneNumberProvider):
    formats = (
        # Mobile
        '+98 91# ### ####',
        '091# ### ####',
        '+98 920 ### ####',
        '0920 ### ####',
        '+98 921 ### ####',
        '0921 ### ####',
        '+98 93# ### ####',
        '093# ### ####',
        # Land lines
        '+98 21 #### ####',
        '021 #### ####',
        '+98 25 #### ####',
        '025 #### ####',
        '+98 26 #### ####',
        '026 #### ####',
        '+98 ### #### ####',
        '0### #### ####'
    )
########NEW FILE########
__FILENAME__ = file
from __future__ import unicode_literals
from faker.providers import BaseProvider


class Provider(BaseProvider):
    application_mime_types = (

        "application/atom+xml", # Atom feeds
        "application/ecmascript",
        # ECMAScript/JavaScript; Defined in RFC 4329 (equivalent to application/javascript but with stricter processing rules)
        "application/EDI-X12", # EDI X12 data; Defined in RFC 1767
        "application/EDIFACT", # EDI EDIFACT data; Defined in RFC 1767
        "application/json", # JavaScript Object Notation JSON; Defined in RFC 4627
        "application/javascript", # ECMAScript/JavaScript; Defined in RFC 4329 (equivalent to application/ecmascript
        #   but with looser processing rules) It is not accepted in IE 8
        #   or earlier - text/javascript is accepted but it is defined as obsolete in RFC 4329.
        #   The "type" attribute of the <script> tag in HTML5 is optional and in practice
        #   omitting the media type of JavaScript programs is the most interoperable
        #   solution since all browsers have always assumed the correct
        #   default even before HTML5.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        "application/octet-stream",  # Arbitrary binary data.[6] Generally speaking this type identifies files that are not associated with a specific application. Contrary to past assumptions by software packages such as Apache this is not a type that should be applied to unknown files. In such a case, a server or application should not indicate a content type, as it may be incorrect, but rather, should omit the type in order to allow the recipient to guess the type.[7]
        "application/ogg", # Ogg, a multimedia bitstream container format; Defined in RFC 5334
        "application/pdf", # Portable Document Format, PDF has been in use for document exchange
        #   on the Internet since 1993; Defined in RFC 3778
        "application/postscript", # PostScript; Defined in RFC 2046
        "application/rdf+xml", # Resource Description Framework; Defined by RFC 3870
        "application/rss+xml", # RSS feeds
        "application/soap+xml", # SOAP; Defined by RFC 3902
        "application/font-woff", # Web Open Font Format; (candidate recommendation; use application/x-font-woff
        #   until standard is official)
        "application/xhtml+xml", # XHTML; Defined by RFC 3236
        "application/xml-dtd", # DTD files; Defined by RFC 3023
        "application/xop+xml", # XOP
        "application/zip", # ZIP archive files; Registered[8]
        "application/gzip",         # Gzip, Defined in RFC 6713
    )

    audio_mime_types = (
        "audio/basic", # mulaw audio at 8 kHz, 1 channel; Defined in RFC 2046
        "audio/L24", # 24bit Linear PCM audio at 8-48 kHz, 1-N channels; Defined in RFC 3190
        "audio/mp4", # MP4 audio
        "audio/mpeg", # MP3 or other MPEG audio; Defined in RFC 3003
        "audio/ogg", # Ogg Vorbis, Speex, Flac and other audio; Defined in RFC 5334
        "audio/vorbis", # Vorbis encoded audio; Defined in RFC 5215
        "audio/vnd.rn-realaudio", # RealAudio; Documented in RealPlayer Help[9]
        "audio/vnd.wave", # WAV audio; Defined in RFC 2361
        "audio/webm",               # WebM open media format
    )

    image_mime_types = (
        "image/gif", # GIF image; Defined in RFC 2045 and RFC 2046
        "image/jpeg", # JPEG JFIF image; Defined in RFC 2045 and RFC 2046
        "image/pjpeg",
        # JPEG JFIF image; Associated with Internet Explorer; Listed in ms775147(v=vs.85) - Progressive JPEG, initiated before global browser support for progressive JPEGs (Microsoft and Firefox).
        "image/png", # Portable Network Graphics; Registered,[10] Defined in RFC 2083
        "image/svg+xml", # SVG vector image; Defined in SVG Tiny 1.2 Specification Appendix M
        "image/tiff", # Tag Image File Format (only for Baseline TIFF); Defined in RFC 3302
        "image/vnd.microsoft.icon",  # ICO image; Registered[11]
    )

    message_mime_types = (
        "message/http", # Defined in RFC 2616
        "message/imdn+xml", # IMDN Instant Message Disposition Notification; Defined in RFC 5438
        "message/partial", # Email; Defined in RFC 2045 and RFC 2046
        "message/rfc822",  # Email; EML files, MIME files, MHT files, MHTML files; Defined in RFC 2045 and RFC 2046
    )

    model_mime_types = (
        "model/example", # Defined in RFC 4735
        "model/iges", # IGS files, IGES files; Defined in RFC 2077
        "model/mesh", # MSH files, MESH files; Defined in RFC 2077, SILO files
        "model/vrml", # WRL files, VRML files; Defined in RFC 2077
        "model/x3d+binary", # X3D ISO standard for representing 3D computer graphics, X3DB binary files
        "model/x3d+vrml", # X3D ISO standard for representing 3D computer graphics, X3DV VRML files
        "model/x3d+xml",  # X3D ISO standard for representing 3D computer graphics, X3D XML files
    )

    multipart_mime_types = (
        "multipart/mixed", # MIME Email; Defined in RFC 2045 and RFC 2046
        "multipart/alternative", # MIME Email; Defined in RFC 2045 and RFC 2046
        "multipart/related", # MIME Email; Defined in RFC 2387 and used by MHTML (HTML mail)
        "multipart/form-data", # MIME Webform; Defined in RFC 2388
        "multipart/signed", # Defined in RFC 1847
        "multipart/encrypted",  # Defined in RFC 1847
    )

    text_mime_types = (
        "text/cmd", # commands; subtype resident in Gecko browsers like Firefox 3.5
        "text/css", # Cascading Style Sheets; Defined in RFC 2318
        "text/csv", # Comma-separated values; Defined in RFC 4180
        "text/html", # HTML; Defined in RFC 2854
        "text/javascript",
        # (Obsolete): JavaScript; Defined in and obsoleted by RFC 4329 in order to discourage its usage in favor of application/javascript. However, text/javascript is allowed in HTML 4 and 5 and, unlike application/javascript, has cross-browser support. The "type" attribute of the <script> tag in HTML5 is optional and there is no need to use it at all since all browsers have always assumed the correct default (even in HTML 4 where it was required by the specification).
        "text/plain", # Textual data; Defined in RFC 2046 and RFC 3676
        "text/vcard", # vCard (contact information); Defined in RFC 6350
        "text/xml",  # Extensible Markup Language; Defined in RFC 3023
    )

    video_mime_types = (
        "video/mpeg", # MPEG-1 video with multiplexed audio; Defined in RFC 2045 and RFC 2046
        "video/mp4", # MP4 video; Defined in RFC 4337
        "video/ogg", # Ogg Theora or other video (with audio); Defined in RFC 5334
        "video/quicktime", # QuickTime video; Registered[12]
        "video/webm", # WebM Matroska-based open media format
        "video/x-matroska", # Matroska open media format
        "video/x-ms-wmv", # Windows Media Video; Documented in Microsoft KB 288102
        "video/x-flv",  # Flash video (FLV files)
    )

    mime_types = {
        'application': application_mime_types,
        'audio': audio_mime_types,
        'image': image_mime_types,
        'message': message_mime_types,
        'model': model_mime_types,
        'multipart': multipart_mime_types,
        'text': text_mime_types,
        'video': video_mime_types
    }

    @classmethod
    def mime_type(cls, category=None):
        """
        :param category: application|audio|image|message|model|multipart|text|video
        """
        category = category if category else cls.random_element(list(cls.mime_types.keys()))
        return cls.random_element(cls.mime_types[category])


########NEW FILE########
__FILENAME__ = address
# coding=utf8
from __future__ import unicode_literals
from ..address import Provider as AddressProvider


class Provider(AddressProvider):

    building_number_formats = ('###', '##', '#')

    postcode_formats = ('#####', )

    city_formats = ('{{city_name}}', )
    
    street_name_formats = ('{{fruit}}{{street_suffix}}', )
    
    street_address_formats = ('{{street_name}} {{building_number}}',)
    
    address_formats = ("{{street_address}}\n{{postcode}} {{city}}", )

    cities = (
        'Akaa', 'Alajärvi', 'Alavus', 'Espoo', 'Forssa', 'Haapajärvi', 
        'Haapavesi', 'Hämeenlinna', 'Hamina', 'Hanko', 'Harjavalta', 
        'Haukipudas', 'Heinola', 'Helsinki', 'Huittinen', 'Hyvinkää', 
        'Iisalmi', 'Ikaalinen', 'Imatra', 'Jakobstad', 'Joensuu', 'Juankoski', 
        'Jyväskylä', 'Jämsä', 'Järvenpää', 'Kaarina', 'Kajaani', 'Kalajoki', 
        'Kankaanpää', 'Kannus', 'Karkkila', 'Kaskinen', 'Kauhajoki', 'Kauhava', 
        'Kauniainen', 'Kemi', 'Kemijärvi', 'Kerava', 'Keuruu', 'Kitee', 
        'Kiuruvesi', 'Kokemäki', 'Kokkola', 'Kotka', 'Kouvola', 'Kristinestad', 
        'Kuhmo', 'Kuopio', 'Kurikka', 'Kuusamo', 'Lahti', 'Laitila', 
        'Lappeenranta', 'Lapua', 'Lieksa', 'Lohja', 'Loimaa', 'Loviisa', 
        'Mänttä-Vilppula', 'Mariehamn', 'Mikkeli', 'Naantali', 'Närpes', 
        'Nilsiä', 'Nivala', 'Nokia', 'Nurmes', 'Nykarleby', 'Orimattila', 
        'Orivesi', 'Oulainen', 'Oulu', 'Outokumpu', 'Paimio', 'Pargas', 
        'Parkano', 'Pieksämäki', 'Pori', 'Porvoo', 'Pudasjärvi', 'Pyhäjärvi', 
        'Raahe', 'Raseborg', 'Rauma', 'Raisio', 'Riihimäki', 'Rovaniemi', 
        'Saarijärvi', 'Salo', 'Sastamala', 'Savonlinna', 'Seinäjoki', 'Siuntio', 
        'Somero', 'Suonenjoki', 'Tampere', 'Tornio', 'Turku', 'Ulvila', 
        'Uusikaupunki', 'Vaasa', 'Valkeakoski', 'Vantaa', 'Varkaus', 
        'Viitasaari', 'Virrat', 'Ylivieska', 'Ylöjärvi', 'Äänekoski', 'Ähtäri'
    )

    countries = (
        'Afganistan', 'Alankomaat', 'Albania', 'Algeria', 'Andorra', 'Angola', 
        'Antigua ja Barbuda', 'Argentiina', 'Armenia', 'Australia', 
        'Azerbaidžan', 'Bahama', 'Bahrain', 'Bangladesh', 'Barbados', 'Belgia', 
        'Belize', 'Benin', 'Bhutan', 'Bolivia', 'Bosnia ja Hertsegovina', 
        'Botswana', 'Brasilia', 'Brunei', 'Bulgaria', 'Burkina', 'Faso', 
        'Burundi', 'Chile', 'Costa', 'Rica', 'Djibouti', 'Dominica', 
        'Dominikaaninen tasavalta', 'Ecuador', 'Egypti', 'El', 'Salvador', 
        'Eritrea', 'Espanja', 'Etelä-Afrikka', 'Korean tasavalta', 
        'Etelä-Sudan', 'Etiopia', 'Fidži', 'Filippiinit', 'Gabon', 'Gambia', 
        'Georgia', 'Ghana', 'Grenada', 'Guatemala', 'Guinea-Bissau', 'Guinea', 
        'Guyana', 'Haiti', 'Honduras', 'Indonesia', 'Intia', 'Irak', 'Iran', 
        'Irlanti', 'Islanti', 'Israel', 'Italia', 'Itä-Timor', 'Itävalta', 
        'Jamaika', 'Japani', 'Jemen', 'Jordania', 'Kambodža', 'Kamerun', 
        'Kanada', 'Kap', 'Verde', 'Kazakstan', 'Kenia', 
        'Keski-Afrikan tasavalta', 'Kiina', 'Kirgisia', 'Kiribati', 
        'Kolumbia', 'Komorit', 'Kongon demokraattinen tasavalta', 
        'Kongon tasavalta', 'Kosovo', 'Kreikka', 'Kroatia', 'Kuuba', 'Kuwait', 
        'Kypros', 'Laos', 'Latvia', 'Lesotho', 'Libanon', 'Liberia', 'Libya', 
        'Liechtenstein', 'Liettua', 'Luxemburg', 'Madagaskar', 'Makedonia', 
        'Malawi', 'Malediivit', 'Malesia', 'Mali', 'Malta', 'Marokko', 
        'Marshallinsaaret', 'Mauritania', 'Mauritius', 'Meksiko', 'Mikronesia', 
        'Moldova', 'Monaco', 'Mongolia', 'Montenegro', 'Mosambik', 'Myanmar', 
        'Namibia', 'Nauru', 'Nepal', 'Nicaragua', 'Nigeria', 'Niger', 'Norja', 
        'Norsunluurannikko', 'Oman', 'Pakistan', 'Palau', 'Panama', 
        'Papua-Uusi-Guinea', 'Paraguay', 'Peru', 
        'Korean demokraattinen kansantasavalta', 'Portugali', 'Puola', 
        'Päiväntasaajan Guinea', 'Qatar', 'Ranska', 'Romania', 'Ruanda', 
        'Ruotsi', 'Saint Kitts ja Nevis', 'Saint Lucia', 
        'Saint Vincent ja Grenadiinit', 'Saksa', 'Salomonsaaret', 'Sambia', 
        'Samoa', 'San Marino', 'São Tomé ja Príncipe', 
        'Saudi-Arabia', 'Senegal', 'Serbia', 'Seychellit', 'Sierra', 'Leone', 
        'Singapore', 'Slovakia', 'Slovenia', 'Somalia', 'Sri', 'Lanka', 'Sudan', 
        'Suomi', 'Suriname', 'Swazimaa', 'Sveitsi', 'Syyria', 'Tadžikistan', 
        'Tansania', 'Tanska', 'Thaimaa', 'Togo', 'Tonga', 'Trinidad ja Tobago', 
        'Tšad', 'Tšekki', 'Tunisia', 'Turkki', 'Turkmenistan', 'Tuvalu', 
        'Uganda', 'Ukraina', 'Unkari', 'Uruguay', 'Uusi-Seelanti', 'Uzbekistan', 
        'Valko-Venäjä', 'Vanuatu', 'Vatikaanivaltio', 'Venezuela', 'Venäjä', 
        'Vietnam', 'Viro', 'Yhdistyneet arabiemiirikunnat', 
        'Yhdistynyt kuningaskunta', 'Yhdysvallat', 'Zimbabwe'
    )

    states = (
        'Turun ja Porin lääni', 'Uudenmaan ja Hämeen lääni', 'Pohjanmaan lääni', 
        'Viipurin ja Savonlinnan lääni', 'Käkisalmen lääni', 
        'Savonlinnan ja Kymenkartanon lääni', 'Kymenkartanon ja Savon lääni', 
        'Vaasan lääni', 'Oulun lääni', 'Kymenkartanon lääni', 
        'Savon ja Karjalan lääni', 'Viipurin lääni', 'Uudenmaan lääni', 
        'Hämeen lääni', 'Mikkelin lääni', 'Kuopion lääni', 'Ahvenanmaan lääni', 
        'Petsamon lääni', 'Lapin lääni', 'Kymen lääni', 'Keski-Suomen lääni', 
        'Pohjois-Karjalan lääni', 'Etelä-Suomen lääni', 'Länsi-Suomen lääni', 
        'Itä-Suomen lääni', '', 'Turun ja Porin lääni', 
        'Uudenmaan ja Hämeen lääni', 'Pohjanmaan lääni', 
        'Viipurin ja Savonlinnan lääni', 'Käkisalmen lääni', 
        'Savonlinnan ja Kymenkartanon lääni', 'Kymenkartanon ja Savon lääni', 
        'Vaasan lääni', 'Oulun lääni', 'Kymenkartanon lääni', 
        'Savon ja Karjalan lääni', 'Viipurin lääni', 'Uudenmaan lääni', 
        'Hämeen lääni', 'Mikkelin lääni', 'Kuopion lääni', 'Ahvenanmaan lääni', 
        'Petsamon lääni', 'Lapin lääni', 'Kymen lääni', 'Keski-Suomen lääni', 
        'Pohjois-Karjalan lääni', 'Etelä-Suomen lääni', 'Länsi-Suomen lääni', 
        'Itä-Suomen lääni'
    )

    street_suffixes = ('tie', 'katu', 'polku', 'kuja', 'bulevardi')

    # Using fruits to generate street names, since it doesn't make 
    # much grammatical sense to use first names

    fruits = (
        'Ananas', 'Ananaskirsikka', 'Annoona', 'Appelsiini', 'Aprikoosi', 
        'Avokado', 'Banaani', 'Cantaloupemeloni', 'Durio', 'Feijoa', 
        'Galiameloni', 'Granaattiomena', 'Granadilla', 'Greippi', 'Guava', 
        'Hunajameloni', 'Jakkihedelmä', 'Kaki', 'Kaktusviikuna', 'Karambola', 
        'Kastanja', 'Keittobanaani', 'Keltainen', 'kiivi', 'Keltapassio', 
        'Kiivi', 'Kirsikka', 'Kirsikkaluumu', 'Kiwai', 'Kiwano','Kookospähkinä', 
        'Kumkvatti', 'Limetti', 'Limkvatti', 'Litsi', 'Longaani', 'Luumu', 
        'Mandariini', 'Mango', 'Mangostaani', 'Maracuya', 'Meloni', 'Nashi', 
        'Nektariini', 'Omena', 'Papaija', 'Passionhedelmä', 'Persikka','Pepino', 
        'Pikkusitrukset', 'Pitahaya', 'Pomelo', 'Pähkinä', 'Päärynä', 
        'Rambutani', 'Rumeliini', 'Sapodilla', 'Salaki', 'Sitruuna', 
        'Sokerimeloni', 'Sweetie', 'Taateli', 'Tamarillo', 'Tomaatti', 
        'Verkkomeloni', 'Vesimeloni', 'Viikuna', 'Viinirypäle', 'Ananas', 
        'Annoona', 'Appelsiini', 'Aprikoosi', 'Avokado', 'Banaani', 
        'Cantaloupemeloni', 'Durio', 'Feijoa', 'Galiameloni', 'Granaattiomena', 
        'Granadilla', 'Greippi', 'Guava', 'Hunajameloni', 'Jakkihedelmä','Kaki', 
        'Kaktusviikuna', 'Karambola', 'Kastanja', 'Keittobanaani','Keltapassio', 
        'Kiivi', 'Kirsikka', 'Kirsikkaluumu', 'Kiwai', 'Kiwano','Kookospähkinä', 
        'Kumkvatti', 'Limetti', 'Limkvatti', 'Litsi', 'Longaani', 'Luumu', 
        'Mandariini', 'Mango', 'Mangostaani', 'Maracuya', 'Meloni', 'Nashi', 
        'Nektariini', 'Omena', 'Papaija', 'Passionhedelmä', 'Persikka','Pepino', 
        'Pikkusitrukset', 'Pitahaya', 'Pomelo', 'Pähkinä', 'Päärynä',
        'Rambutani', 'Rumeliini', 'Sapodilla', 'Salaki', 'Sitruuna', 
        'Sokerimeloni', 'Sweetie', 'Taateli', 'Tamarillo', 'Tomaatti', 
        'Verkkomeloni', 'Vesimeloni', 'Viikuna', 'Viinirypäle'
    )

    @classmethod
    def fruit(cls):
        return cls.random_element(cls.fruits)

    @classmethod
    def city_name(cls):
        return cls.random_element(cls.cities)

    @classmethod
    def state(cls):
        return cls.random_element(cls.states)

########NEW FILE########
__FILENAME__ = company
from __future__ import unicode_literals
from ..company import Provider as CompanyProvider


class Provider(CompanyProvider):
    formats = (
        '{{last_name}} {{company_suffix}}',
        '{{last_name}} {{last_name}} {{company_suffix}}',
        '{{last_name}} {{last_name}} {{company_suffix}}',
        '{{last_name}}'
    )

    company_suffixes = (
        'As Oy', 'Tmi', 'Oy', 'Oyj', 'Ky', 'Osk', 'ry'
    )

########NEW FILE########
__FILENAME__ = internet
# coding=utf-8
from __future__ import unicode_literals
from ..internet import Provider as InternetProvider

import re

class Provider(InternetProvider):

    free_email_domains = (
        'gmail.com', 'googlemail.com', 'hotmail.com', 'suomi24.fi', 
        'kolumbus.fi', 'luukku.com', 'surffi.net'
    )
    
    tlds = ('com', 'com', 'com', 'fi', 'fi', 'net', 'org')

    @staticmethod
    def _to_ascii(string):
        replacements = (
            ('ä', 'a'), ('Ä', 'A'),
            ('ö', 'o'), ('O', 'O'),
        )
        for search, replace in replacements:
            string = string.replace(search, replace)

        return string

    def user_name(self):
        pattern = self.random_element(self.user_name_formats)
        return self._to_ascii(
            self.bothify(self.generator.parse(pattern)
        ).lower())

    def domain_word(self):
        company = self.generator.format('company')
        company_elements = company.split(' ')
        company = self._to_ascii(company_elements.pop(0))
        return re.sub(r'\W', '', company).lower()

########NEW FILE########
__FILENAME__ = person
# coding=utf-8
from __future__ import unicode_literals
from ..person import Provider as PersonProvider


class Provider(PersonProvider):
    formats = (
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{last_name}}, {{first_name}}'
    )

    prefixes = (
        'Herra', 'hra', 'Rouva', 'rva', 'Tohtori', 'tri', 'prof.', 'arkkit.' 
    )

    suffixes = ('DI', 'PhD', 'MSc', 'BSc')

    first_names = (
        'Aake', 'Aapeli', 'Aapo', 'Aarne', 'Aarni', 'Aarno', 'Aaro', 'Aaron', 
        'Aarre', 'Aatami', 'Aatos', 'Aatto', 'Aatu', 'Ahti', 'Aimo', 'Aki', 
        'Aksel', 'Akseli', 'Aku', 'Alarik', 'Aleksanteri', 'Aleksi', 'Aleksis', 
        'Ali', 'Allan', 'Alpo', 'Altti', 'Alvar', 'Alvari', 'Anselmi', 'Anssi', 
        'Antero', 'Anton', 'Antti', 'Antton', 'Anttoni', 'Ari', 'Ari-Pekka', 
        'Armas', 'Arto', 'Arttu', 'Arttur', 'Artturi', 'Arvi', 'Arvo', 'Asko', 
        'Aslak', 'Asser', 'Asseri', 'Atte', 'Aukusti', 'Aulis', 'Auvo','Benjam', 
        'Benjamin', 'Daniel', 'Eeli', 'Eelis', 'Eemeli', 'Eemil', 'Eerik', 
        'Eerikki', 'Eero', 'Eetu', 'Eevert', 'Eevertti', 'Einari', 'Eino', 
        'Elias', 'Eliel', 'Eljas', 'Elmeri', 'Elmo', 'Ensio', 'Erkki', 'Erno', 
        'Esa', 'Esaias', 'Esko', 'Hannes', 'Hannu', 'Harri', 'Harry', 'Heikki', 
        'Heimo', 'Heino','Hemmo', 'Henri', 'Henrik', 'Henrikki', 'Herman', 
        'Hermanni', 'Huugo', 'Iikka', 'Iiro', 'Iisak', 'Iisakki', 'Iivari', 
        'Ilari', 'Ilkka', 'Ilmari', 'Ilmo', 'Ilpo', 'Immanuel', 'Into', 'Ismo', 
        'Isto', 'Jaakko', 'Jalmar', 'Jalmari', 'Jalo', 'Jami', 'Jani', 'Janne', 
        'Jari', 'Jari-Pekka', 'Jarkko', 'Jarmo', 'Jarno', 'Jasper', 'Jere', 
        'Jeremias', 'Jesse', 'Jimi', 'Joel', 'Johannes', 'Joni', 'Jonne', 
        'Joona', 'Joonas', 'Joonatan', 'Jooseppi', 'Jori', 'Jorma',  'Jouko', 
        'Jouni', 'Juha', 'Juha-Matti', 'Juha-Pekka', 'Juhana', 'Juhani', 'Juho', 
        'Jukka', 'Jukka-Pekka', 'Julius', 'Jussi', 'Juuso', 'Jyri', 'Jyrki', 
        'Kaapo', 'Kaarle', 'Kaarlo', 'Kai', 'Kaino', 'Kalervo', 'Kaleva', 
        'Kalevi', 'Kalle', 'Kari', 'Karri', 'Kasper', 'Kasperi', 'Kauko', 
        'Kauno', 'Keijo', 'Kimi', 'Kimmo', 'Klaus', 'Konsta', 'Konstantin', 
        'Kosti', 'Kristian', 'Kullervo', 'Kustaa', 'Kusti', 'Kyösti', 'Lari', 
        'Lasse', 'Lassi', 'Lauri', 'Leevi', 'Lenni', 'Leo', 'Luka', 'Luukas', 
        'Manu', 'Markku', 'Marko', 'Markus', 'Martti', 'Matias', 'Matti', 
        'Mauno', 'Maunu', 'Mauri', 'Miika', 'Miikka', 'Mika', 'Mikael', 'Mikko', 
        'Miko', 'Miro', 'Miska', 'Nestor', 'Nestori', 'Niilo', 'Niklas', 'Niko', 
        'Nikolai', 'Nuutti', 'Oiva', 'Olavi', 'Oliver', 'Olli', 'Olli-Pekka', 
        'Onni', 'Orvo', 'Oskar', 'Oskari', 'Osmo', 'Ossi', 'Ossian', 'Otso', 
        'Otto', 'Paavali', 'Paavo', 'Panu', 'Pasi', 'Paul', 'Pauli', 'Pekka', 
        'Pellervo', 'Pentti', 'Pertti', 'Perttu', 'Petri', 'Petter', 'Petteri', 
        'Pietari', 'Pyry', 'Päiviö', 'Rafael', 'Raimo', 'Raine', 'Rainer', 
        'Rami', 'Rasmus', 'Rauli', 'Rauni', 'Rauno', 'Reijo', 'Reima', 'Reino', 
        'Riku', 'Risto', 'Roni', 'Sakari', 'Saku', 'Salomon', 'Sami', 'Sampo', 
        'Sampsa', 'Samu', 'Samuel', 'Samuli', 'Santeri', 'Santtu', 'Sauli', 
        'Sebastian', 'Seppo', 'Severi', 'Simo', 'Soini', 'Sulevi', 'Sulo', 
        'Taavetti', 'Taavi', 'Taisto', 'Taito', 'Taneli', 'Tapani', 'Tapio', 
        'Tarmo', 'Tatu', 'Tauno', 'Teemu', 'Teijo', 'Tenho', 'Teppo', 
        'Terho', 'Tero', 'Teuvo', 'Timo', 'Tino', 'Toimi', 'Toivo', 'Tomi', 
        'Tommi', 'Toni', 'Topi', 'Topias', 'Torsti', 'Touko', 'Tuomas', 'Tuomo', 
        'Tuukka', 'Tuure', 'Ukko', 'Uljas', 'Untamo', 'Unto', 'Uolevi', 'Urho', 
        'Urpo', 'Usko', 'Uuno', 'Valde', 'Valdemar', 'Valentin', 'Valto', 
        'Valtteri', 'Waltteri', 'Veeti', 'Veijo', 'Veikka', 'Veikko', 'Veli', 
        'Veli-Matti', 'Veli-Pekka', 'Verner', 'Verneri', 'Vesa', 'Vieno', 
        'Vilhelmi', 'Vilho', 'Vili', 'Viljam', 'Viljami', 'Viljo', 'Ville', 
        'Voitto', 'Väinämö', 'Väinö', 'Ylermi', 'Yrjö', 'Aada', 'Aallotar', 
        'Aija', 'Aila', 'Aili', 'Aina', 'Aini', 'Aino', 'Aira', 'Airi', 
        'Aleksandra', 'Aliina', 'Aliisa', 'Alina', 'Alisa', 'Alli', 'Alma', 
        'Amalia', 'Amanda', 'Anastasia', 'Anelma', 'Anette', 'Anita', 'Anitta',
        'Anja', 'Anna', 'Anna-Kaisa', 'Anna-Leena', 'Anna-Liisa', 'Anna-Maija', 
        'Anna-Mari', 'Anna-Maria', 'Anne', 'Anne-Mari', 'Anne-Maria', 'Annele', 
        'Anneli', 'Anni', 'Anniina', 'Annika', 'Annikki', 'Annukka', 'Anu', 
        'Arja', 'Armi', 'Asta', 'Auli', 'Aulikki', 'Aune', 'Aura', 'Aurora', 
        'Bertta', 'Eedit', 'Eelin', 'Eerika', 'Eeva', 'Eeva-Liisa', 'Eevi', 
        'Eija', 'Eila', 'Eine', 'Eini', 'Eira', 'Elena', 'Eliina', 'Eliisa', 
        'Eliisabet', 'Elina', 'Elisa', 'Elisabet', 'Elise', 'Ella', 'Ellen', 
        'Elli', 'Elma', 'Elna', 'Elsa', 'Else', 'Elsi', 'Elvi', 'Elviira', 
        'Emilia', 'Emma', 'Emmi', 'Enni', 'Eriika', 'Erja', 'Essi', 
        'Ester', 'Esteri', 'Eveliina', 'Fanni', 'Hanna', 'Hanna-Leena', 
        'Hanna-Mari', 'Hanne', 'Hannele', 'Heidi', 'Heini', 'Heleena', 'Helena', 
        'Heli', 'Helinä', 'Heljä', 'Helka', 'Hellevi', 'Helli', 'Hellin', 
        'Hellä', 'Helmi', 'Helmiina', 'Helvi', 'Hely', 'Henna', 'Henrietta', 
        'Henriikka', 'Hertta', 'Heta', 'Hilda', 'Hilja', 'Hilkka', 'Hilla', 
        'Hillevi', 'Hilma', 'Iida', 'Iina', 'Iines', 'Iiris', 'Ilma', 'Ilmi', 
        'Ilona', 'Ilta', 'Impi', 'Inari', 'Inka', 'Inkeri', 'Ira', 'Irene', 
        'Irina', 'Iris', 'Irja', 'Irma', 'Irmeli', 'Isabella', 'Jaana', 'Jade', 
        'Janette', 'Janika', 'Janina', 'Janita', 'Janna', 'Jasmiina', 'Jasmin', 
        'Jemina', 'Jenna', 'Jenni', 'Joanna', 'Johanna', 'Jonna', 'Josefiina', 
        'Julia', 'Justiina', 'Jutta', 'Juulia', 'Kaarin', 'Kaarina', 'Kaija', 
        'Kaino', 'Kaisa', 'Kaisu', 'Kanerva', 'Karita', 'Karoliina','Katariina', 
        'Kati', 'Katja', 'Katri', 'Katriina', 'Kerttu', 'Kiia', 'Kirsi', 
        'Kirsi-Marja', 'Kirsti', 'Kreeta', 'Krista', 'Kristiina', 'Kustaava', 
        'Kyllikki', 'Lahja', 'Laila', 'Laimi', 'Laina', 'Laura', 'Lea', 'Leea', 
        'Leena', 'Leila', 'Lemmikki', 'Lemmitty', 'Lempi', 'Liisa', 'Liisi', 
        'Lilja', 'Lilli', 'Linda', 'Linnea', 'Lotta', 'Loviisa', 'Lumi','Lyydi', 
        'Lyydia', 'Lyyli', 'Maaret', 'Maaria', 'Maarit', 'Maija', 'Maija-Leena', 
        'Maija-Liisa', 'Maiju', 'Maila', 'Maire', 'Margareeta', 'Margareetta', 
        'Mari', 'Maria', 'Marianna', 'Marianne', 'Mariia', 'Mariitta', 'Marika', 
        'Marita', 'Maritta', 'Marja', 'Marja-Leena', 'Marja-Liisa', 
        'Marja-Riitta', 'Marja-Terttu', 'Marjaana', 'Marjatta', 'Marjo', 
        'Marjo-Riitta', 'Marjukka', 'Marjut', 'Marketta', 'Marleena', 'Martta', 
        'Matilda', 'Matleena', 'Meeri','Meri', 'Merja', 'Mervi', 'Miia','Miina', 
        'Mikaela', 'Milja', 'Milka', 'Milla','Mimosa', 'Minea', 'Minja','Minna', 
        'Minttu', 'Mira', 'Mirja', 'Mirjam','Mirjami', 'Mirka', 'Mirva','Moona', 
        'Naima', 'Natalia', 'Nea', 'Neea', 'Nella', 'Nelli', 'Netta', 'Niina', 
        'Noora', 'Oili', 'Olivia', 'Onerva', 'Oona', 'Orvokki', 'Outi', 'Paula', 
        'Pauliina','Peppi', 'Petra', 'Pihla', 'Piia', 'Pilvi', 'Pinja','Pirita', 
        'Piritta', 'Pirjo', 'Pirkko', 'Pirkko-Liisa', 'Päivi', 'Päivikki', 
        'Raakel', 'Raija', 'Raila', 'Raili', 'Raisa', 'Rauha', 'Rauni', 
        'Rebekka', 'Reeta', 'Reetta', 'Reija', 'Riikka', 'Riina', 'Riitta', 
        'Riitta-Liisa', 'Ritva', 'Ronja', 'Roosa', 'Saana', 'Saara', 'Saija', 
        'Saila', 'Saima', 'Saimi', 'Saini', 'Salla', 'Salli', 'Salme','Sanelma', 
        'Sanna', 'Sanni', 'Sara', 'Sari', 'Sarita', 'Satu', 'Seija', 'Selma', 
        'Senja', 'Senni', 'Siiri', 'Silja', 'Sini', 'Sinikka', 'Sirkka', 
        'Sirkka-Liisa', 'Sirkku', 'Sirpa', 'Sisko', 'Siviä', 'Sofia', 'Sohvi', 
        'Soile', 'Soili', 'Soilikki', 'Sointu', 'Sonja', 'Stiina', 'Suoma', 
        'Susan', 'Susanna','Susanne', 'Suvi', 'Sylvi', 'Sylvia', 'Säde','Taija', 
        'Taimi', 'Taina', 'Talvikki', 'Tanja', 'Tarja', 'Taru', 'Tea', 'Teija', 
        'Tekla', 'Tellervo', 'Teresa', 'Terhi', 'Terhikki', 'Terttu', 'Tiia', 
        'Tiina', 'Tilda', 'Titta', 'Toini', 'Tuija', 'Tuire', 'Tuovi', 'Tuuli', 
        'Tuulia', 'Tuulikki', 'Tytti', 'Tyyne', 'Tyyni', 'Ulla', 'Ulla-Maija', 
        'Unelma', 'Ursula', 'Valma', 'Valpuri', 'Vappu', 'Varpu', 'Veera', 
        'Vellamo', 'Venla', 'Vieno', 'Viivi', 'Vilhelmiina', 'Wilhelmiina', 
        'Vilja', 'Vilma', 'Wilma', 'Viola', 'Virpi', 'Virva', 'Virve', 'Vuokko'
    )

    last_names = (
        'Aalto', 'Aaltonen', 'Aarnio', 'Ahde', 'Aho', 'Ahopalo', 'Ahokas', 
        'Ahokangas', 'Ahola', 'Ahonen', 'Ahti', 'Ahtisaari', 'Alanen', 
        'Alasalmi', 'Alho', 'Annala', 'Anttila', 'Anttonen', 'Arajärvi', 'Aro', 
        'Aromaa', 'Asikainen', 'Askola', 'Astala', 'Asunmaa', 'Aura', 'Autio', 
        'Auvinen', 'Eerikäinen', 'Eerola', 'Einiö', 'Ekola', 'Elo', 'Elomaa', 
        'Eloranta', 'Elsilä', 'Ernamo', 'Erola', 'Eronen', 'Eskelinen','Eskola', 
        'Haanpää', 'Haapakoski', 'Haapasalo', 'Haataja', 'Hakala', 'Hannula', 
        'Harju', 'Harjula', 'Hartikainen', 'Hautala', 'Heikkilä', 'Heikkinen', 
        'Heinonen', 'Heiskanen', 'Helminen', 'Hietanen', 'Hiltunen','Hinkkanen', 
        'Hintikka', 'Hirsjärvi', 'Hirvelä', 'Hirvonen', 'Holappa', 'Hujanen', 
        'Huotari', 'Huovinen', 'Huttunen', 'Huusko', 'Huuskonen', 'Hynninen', 
        'Hyttinen', 'Häkkinen', 'Häkämies', 'Hämäläinen', 'Hänninen', 
        'Ihalainen', 'Ihamäki', 'Iivonen', 'Ijäs', 'Ikola', 'Ikonen','Ikäheimo', 
        'Ilmola', 'Ilmonen', 'Ilvonen', 'Immonen', 'Inkinen', 'Innanen', 
        'Isokangas', 'Isokallio', 'Isokoski', 'Isometsä', 'Isomäki', 'Isotalo', 
        'Issakainen', 'Itkonen', 'Itälä', 'Jaakkola', 'Jaakonsaari', 'Jaatinen',
        'Jalava', 'Jalkanen', 'Jalonen', 'Jantunen', 'Jarva', 'Jokela', 
        'Jokelainen', 'Jokinen', 'Juhola', 'Jukarainen', 'Jukola', 'Julkunen', 
        'Juntunen', 'Jussila', 'Jutila', 'Juva', 'Juvonen', 'Jylhä', 
        'Jäntti', 'Järvi', 'Järvilehto', 'Järvinen', 'Jääskeläinen', 
        'Kainulainen', 'Kallio', 'Kalliokoski', 'Kangas', 'Karhu','Karjalainen', 
        'Karonen', 'Karppanen', 'Karppinen', 'Kataisto', 'Kataja', 'Kemppainen', 
        'Keskinen', 'Keto', 'Ketola', 'Kettunen', 'Kinnunen', 'Kivelä', 
        'Kiviluoto', 'Kivinen', 'Kivistö', 'Koistinen', 'Koivula', 'Kokkonen', 
        'Korhonen', 'Korpela', 'Koskinen', 'Kosonen', 'Krouvi' 'Kulmala', 
        'Kunnas', 'Kuosmanen', 'Kuparinen', 'Kurkela', 'Kurkinen', 'Kuusela', 
        'Kuusisto', 'Laaksonen', 'Laatikainen', 'Lahtela', 'Lahti', 'Lahtinen', 
        'Laiho', 'Laine', 'Laitinen', 'Lamminen', 'Lampinen', 'Lankinen', 
        'Lappalainen', 'Larivaara', 'Lassila', 'Latvanen', 'Laukkanen', 
        'Laurila', 'Lauronen', 'Lehtinen', 'Lehto', 'Lehtonen', 'Leino', 
        'Leinonen', 'Lepistö', 'Leppälä', 'Leppänen', 'Leskinen', 'Lesonen', 
        'Liikanen', 'Lilja', 'Linna', 'Lipponen', 'Litmanen', 'Liukkonen', 
        'Loponen', 'Luhtanen', 'Lumme', 'Luostarinen', 'Makkonen', 'Manninen', 
        'Markku', 'Martikainen', 'Matikainen', 'Matinsalo', 'Mattila', 
        'Meriluoto', 'Miettunen', 'Mieto', 'Mikkola', 'Moilanen', 'Mustonen', 
        'Muukkonen', 'Myllylä', 'Myllyniemi', 'Mäenpää', 'Mäkelä', 'Mäki', 
        'Mäkilä', 'Mäkinen', 'Mänttäri', 'Mänty', 'Määttä', 'Naarajärvi', 
        'Narinen', 'Nenonen', 'Neuvonen', 'Nevala', 'Nevalainen', 'Niemelä', 
        'Niemi', 'Nieminen', 'Niinisalo', 'Niinistö', 'Niiranen', 'Nikkinen', 
        'Nikkola', 'Nikkonen', 'Nikula', 'Niskala', 'Nissinen', 'Nousiainen', 
        'Nummi', 'Numminen', 'Nurmela', 'Nurmi', 'Nurminen', 'Nuutinen', 
        'Nykänen', 'Närhi', 'Oikarinen', 'Oittinen', 'Ojakangas', 'Ojala', 
        'Ojalehto', 'Ojanen', 'Oksanen', 'Ollikainen', 'Ollila', 'Onnela', 
        'Oranen', 'Otila', 'Outila', 'Outinen', 'Ovaska', 'Paananen', 'Paasio', 
        'Pajari', 'Pale', 'Pakarinen', 'Parras', 'Parviainen', 'Pasanen', 
        'Pekkanen', 'Pekkala', 'Pelkonen', 'Peltola', 'Peltonen', 'Peltoniemi', 
        'Peltosaari', 'Pennanen', 'Pesonen', 'Pesälä', 'Petäjä', 'Pirhonen', 
        'Pirinen', 'Pitkänen', 'Pohjola', 'Pohjonen', 'Pokka', 'Porkka', 'Poso', 
        'Poutanen', 'Puikkonen', 'Pulkkinen', 'Purho', 'Pyysalo', 'Päätalo', 
        'Rahikainen', 'Rahkamo', 'Rahnasto', 'Rajala', 'Rannisto', 'Rantala', 
        'Rantanen', 'Rauhala', 'Rautakorpi', 'Rautanen', 'Rautavaara', 
        'Rautiainen', 'Rautio', 'Reinikainen', 'Rekunen', 'Repo', 'Repomem', 
        'Riihelä', 'Riihijärvi', 'Riikonen', 'Rinne', 'Rintala', 'Rissanen', 
        'Ritala', 'Roimola', 'Roivas', 'Ronni', 'Ruohonen', 'Ruutu', 'Ryttäri', 
        'Räikkönen', 'Räisänen', 'Räty', 'Saarela', 'Saari', 'Saarikoski', 
        'Saario', 'Saarinen', 'Saikkonen', 'Sainio', 'Saisio', 'Saksala', 
        'Salli', 'Sallinen', 'Salmi', 'Salminen', 'Salo', 'Salonen', 
        'Savolainen', 'Seppälä', 'Seppänen', 'Setälä', 'Sillanpää', 'Sinisalo', 
        'Sipilä', 'Sipinen', 'Sirkiä', 'Sirviö', 'Soikkeli', 'Soinio', 
        'Sormunen', 'Suhonen', 'Sulkanen', 'Suntila', 'Suominen', 'Supinen', 
        'Takala', 'Tammisto', 'Tamminen', 'Tanskanen', 'Taipale', 'Tarkka', 
        'Tenhunen', 'Tiainen', 'Tiihonen', 'Tiilikainen', 'Tikkanen', 'Timonen', 
        'Tirkkonen', 'Toivonen', 'Tuomi', 'Tuominen', 'Tuomioja', 'Tuomola', 
        'Turunen', 'Tuuri', 'Ukkola', 'Ulmanen', 'Uosukainen', 'Uotila', 
        'Uotinen', 'Uronen', 'Utriainen', 'Utrio', 'Uusitalo', 'Vainikainen', 
        'Vainio', 'Vanhala', 'Varala', 'Varis', 'Varvikko', 'Vatanen','Veintie', 
        'Venäläinen', 'Viitala', 'Viitanen', 'Viljanen', 'Vinni', 'Virolainen', 
        'Virtanen', 'Vitikka', 'Voutilainen', 'Vuolle', 'Vuorela', 'Vuorinen', 
        'Vuoristo', 'Välkkynen', 'Väänänen', 'Väätäinen', 'Ykspetäjä', 
        'Ylikangas', 'Ylikoski', 'Ylimäki', 'Ylinen', 'Yliniemi', 'Ylioja', 
        'Ylisuvanto', 'Ylitalo', 'Ylämäki', 'Ylänne', 'Ylätalo', 'Ylönen', 
        'Ylöstalo', 'Yrjälä', 'Yrjänä', 'Yrjänäinen', 'Yrjölä', 'Yrjönen'
    )

    @classmethod
    def prefix(cls):
        return cls.random_element(cls.prefixes)

    @classmethod
    def suffix(cls):
        return cls.random_element(cls.suffixes)
########NEW FILE########
__FILENAME__ = phone_number
from __future__ import unicode_literals
from ..phone_number import Provider as PhoneNumberProvider


class Provider(PhoneNumberProvider):
    formats = (
        '+358 ## #######',
        '+358 #########',
        '+358#########',
        '(+358) #########',
        '0#########',
        '0## ### ####'
    )

########NEW FILE########
__FILENAME__ = address
# coding=utf-8
from __future__ import unicode_literals
from ..address import Provider as AddressProvider


class Provider(AddressProvider):
    city_suffixes = ('Ville', 'Bourg', '-les-Bains', '-sur-Mer', '-la-Forêt', 'boeuf', 'nec', 'dan')
    street_prefixes = ('rue', 'rue', 'chemin', 'avenue', 'boulevard')
    city_formats = (
        '{{last_name}}',
        '{{last_name}}',
        '{{last_name}}',
        '{{last_name}}',
        '{{last_name}}{{city_suffix}}',
        '{{last_name}}{{city_suffix}}',
        '{{last_name}}{{city_suffix}}',
        '{{last_name}}-sur-{{last_name}}',
    )
    street_name_formats = (
        '{{street_prefix}} {{last_name}}',
        '{{street_prefix}} {{first_name}} {{last_name}}',
        '{{street_prefix}} de {{last_name}}',
    )

    street_address_formats = (
        '{{street_name}}',
        '{{building_number}}, {{street_name}}',
        '{{building_number}}, {{street_name}}',
        '{{building_number}}, {{street_name}}',
        '{{building_number}}, {{street_name}}',
        '{{building_number}}, {{street_name}}',
    )

    address_formats = (
        "{{street_address}}\n{{postcode}} {{city}}",
    )

    building_number_formats = ('%', '%#', '%#', '%#', '%##')
    postcode_formats = ('#####', '## ###')
    countries = (
        'Afghanistan', 'Afrique du sud', 'Albanie', 'Algérie', 'Allemagne', 'Andorre', 'Angola', 'Anguilla',
        'Antarctique', 'Antigua et Barbuda', 'Antilles néerlandaises', 'Arabie saoudite', 'Argentine', 'Arménie',
        'Aruba', 'Australie', 'Autriche', 'Azerbaïdjan', 'Bahamas', 'Bahrain', 'Bangladesh', 'Belgique', 'Belize',
        'Benin', 'Bermudes (Les)', 'Bhoutan', 'Biélorussie', 'Bolivie', 'Bosnie-Herzégovine', 'Botswana',
        'Bouvet (Îles)', 'Brunei', 'Brésil', 'Bulgarie', 'Burkina Faso', 'Burundi', 'Cambodge', 'Cameroun', 'Canada',
        'Cap Vert', 'Cayman (Îles)', 'Chili', 'Chine (Rép. pop.)', 'Christmas (Île)', 'Chypre', 'Cocos (Îles)',
        'Colombie', 'Comores', 'Cook (Îles)', 'Corée du Nord', 'Corée, Sud', 'Costa Rica', 'Croatie', 'Cuba',
        'Côte d\'Ivoire', 'Danemark', 'Djibouti', 'Dominique', 'Égypte', 'El Salvador', 'Émirats arabes unis',
        'Équateur', 'Érythrée', 'Espagne', 'Estonie', 'États-Unis', 'Ethiopie', 'Falkland (Île)',
        'Fidji (République des)', 'Finlande', 'France', 'Féroé (Îles)', 'Gabon',
        'Gambie', 'Ghana', 'Gibraltar', 'Grenade', 'Groenland', 'Grèce', 'Guadeloupe', 'Guam', 'Guatemala', 'Guinée',
        'Guinée Equatoriale', 'Guinée-Bissau', 'Guyane', 'Guyane française', 'Géorgie',
        'Géorgie du Sud et Sandwich du Sud (Îles)', 'Haïti', 'Heard et McDonald (Îles)', 'Honduras', 'Hong Kong',
        'Hongrie', 'Îles Mineures Éloignées des États-Unis', 'Inde', 'Indonésie', 'Irak', 'Iran', 'Irlande', 'Islande',
        'Israël', 'Italie', 'Jamaïque', 'Japon', 'Jordanie', 'Kazakhstan', 'Kenya', 'Kirghizistan', 'Kiribati',
        'Koweit', 'La Barbad', 'Laos', 'Lesotho', 'Lettonie', 'Liban', 'Libye', 'Libéria', 'Liechtenstein', 'Lithuanie',
        'Luxembourg', 'Macau', 'Macédoine', 'Madagascar', 'Malaisie', 'Malawi', 'Maldives (Îles)', 'Mali', 'Malte',
        'Mariannes du Nord (Îles)', 'Maroc', 'Marshall (Îles)', 'Martinique', 'Maurice', 'Mauritanie', 'Mayotte',
        'Mexique', 'Micronésie (États fédérés de)', 'Moldavie', 'Monaco', 'Mongolie', 'Montserrat', 'Mozambique',
        'Myanmar', 'Namibie', 'Nauru', 'Nepal',
        'Nicaragua', 'Niger', 'Nigeria', 'Niue', 'Norfolk (Îles)', 'Norvège', 'Nouvelle Calédonie', 'Nouvelle-Zélande',
        'Oman', 'Ouganda', 'Ouzbékistan', 'Pakistan', 'Palau', 'Panama', 'Papouasie-Nouvelle-Guinée', 'Paraguay',
        'Pays-Bas', 'Philippines', 'Pitcairn (Îles)', 'Pologne', 'Polynésie française', 'Porto Rico', 'Portugal',
        'Pérou', 'Qatar', 'Roumanie', 'Royaume-Uni', 'Russie', 'Rwanda', 'Rép. Dém. du Congo',
        'République centrafricaine', 'République Dominicaine', 'République tchèque', 'Réunion (La)',
        'Sahara Occidental', 'Saint Pierre et Miquelon', 'Saint Vincent et les Grenadines', 'Saint-Kitts et Nevis',
        'Saint-Marin (Rép. de)', 'Sainte Hélène', 'Sainte Lucie', 'Samoa', 'Samoa', 'Seychelles', 'Sierra Leone',
        'Singapour', 'Slovaquie', 'Slovénie', 'Somalie', 'Soudan', 'Sri Lanka', 'Suisse', 'Suriname', 'Suède',
        'Svalbard et Jan Mayen (Îles)', 'Swaziland', 'Syrie', 'São Tomé et Príncipe (Rép.)', 'Sénégal', 'Tadjikistan',
        'Taiwan', 'Tanzanie', 'Tchad',
        'Territoire britannique de l\'océan Indien', 'Territoires français du sud', 'Thailande', 'Timor', 'Togo',
        'Tokelau', 'Tonga', 'Trinité et Tobago', 'Tunisie', 'Turkménistan', 'Turks et Caïques (Îles)', 'Turquie',
        'Tuvalu', 'Ukraine', 'Uruguay', 'Vanuatu', 'Vatican (Etat du)', 'Venezuela', 'Vierges (Îles)',
        'Vierges britanniques (Îles)', 'Vietnam', 'Wallis et Futuna (Îles)', 'Yemen', 'Yougoslavie', 'Zambie', 'Zaïre',
        'Zimbabwe'
    )
    regions = (
        'Alsace', 'Aquitaine', 'Auvergne', 'Bourgogne', 'Bretagne', 'Centre', 'Champagne-Ardenne',
        'Corse', 'Franche-Comté', 'Île-de-France', 'Languedoc-Roussillon', 'Limousin',
        'Lorraine', 'Midi-Pyrénées', 'Nord-Pas-de-Calais', 'Basse-Normandie', 'Haute-Normandie',
        'Pays-de-Loire', 'Picardie', 'Poitou-Charentes', "Province-Alpes-Côte d'Azur", 'Rhone-Alpes',
        'Guadeloupe', 'Martinique', 'Guyane', 'Réunion', 'Saint-Pierre-et-Miquelon', 'Mayotte',
        'Saint-Barthélémy', 'Saint-Martin', 'Wallis-et-Futuna', 'Polynésie française', 'Nouvelle-Calédonie'
    )

    departments = (
        ('01', 'Ain'), ('02', 'Aisne'), ('03', 'Allier'), ('04', 'Alpes-de-Haute-Provence'), ('05', 'Hautes-Alpes'),
        ('06', 'Alpes-Maritimes'), ('07', 'Ardèche'), ('08', 'Ardennes'), ('09', 'Ariège'), ('10', 'Aube'),
        ('11', 'Aude'), ('12', 'Aveyron'), ('13', 'Bouches-du-Rhône'), ('14', 'Calvados'), ('15', 'Cantal'),
        ('16', 'Charente'), ('17', 'Charente-Maritime'), ('18', 'Cher'), ('19', 'Corrèze'), ('2A', 'Corse-du-Sud'),
        ('2B', 'Haute-Corse'), ('21', "Côte-d'Or"), ('22', "Côtes-d'Armor"), ('23', 'Creuse'), ('24', 'Dordogne'),
        ('25', 'Doubs'), ('26', 'Drôme'), ('27', 'Eure'), ('28', 'Eure-et-Loir'), ('29', 'Finistère'), ('30', 'Gard'),
        ('31', 'Haute-Garonne'), ('32', 'Gers'), ('33', 'Gironde'), ('34', 'Hérault'), ('35', 'Ille-et-Vilaine'),
        ('36', 'Indre'), ('37', 'Indre-et-Loire'), ('38', 'Isère'), ('39', 'Jura'), ('40', 'Landes'),
        ('41', 'Loir-et-Cher'),
        ('42', 'Loire'), ('43', 'Haute-Loire'), ('44', 'Loire-Atlantique'), ('45', 'Loiret'), ('46', 'Lot'),
        ('47', 'Lot-et-Garonne'), ('48', 'Lozère'), ('49', 'Maine-et-Loire'), ('50', 'Manche'), ('51', 'Marne'),
        ('52', 'Haute-Marne'), ('53', 'Mayenne'), ('54', 'Meurthe-et-Moselle'), ('55', 'Meuse'), ('56', 'Morbihan'),
        ('57', 'Moselle'), ('58', 'Nièvre'), ('59', 'Nord'), ('60', 'Oise'), ('61', 'Orne'), ('62', 'Pas-de-Calais'),
        ('63', 'Puy-de-Dôme'), ('64', 'Pyrénées-Atlantiques'), ('65', 'Hautes-Pyrénées'), ('66', 'Pyrénées-Orientales'),
        ('67', 'Bas-Rhin'), ('68', 'Haut-Rhin'), ('69', 'Rhône'), ('70', 'Haute-Saône'), ('71', 'Saône-et-Loire'),
        ('72', 'Sarthe'), ('73', 'Savoie'), ('74', 'Haute-Savoie'), ('75', 'Paris'), ('76', 'Seine-Maritime'),
        ('77', 'Seine-et-Marne'), ('78', 'Yvelines'), ('79', 'Deux-Sèvres'), ('80', 'Somme'), ('81', 'Tarn'),
        ('82', 'Tarn-et-Garonne'), ('83', 'Var'), ('84', 'Vaucluse'), ('85', 'Vendée'), ('86', 'Vienne'),
        ('87', 'Haute-Vienne'), ('88', 'Vosges'), ('89', 'Yonne'), ('90', 'Territoire de Belfort'), ('91', 'Essonne'),
        ('92', 'Hauts-de-Seine'), ('93', 'Seine-Saint-Denis'), ('94', 'Val-de-Marne'), ('95', "Val-d'Oise"),
        ('971', 'Guadeloupe'), ('972', 'Martinique'), ('973', 'Guyane'), ('974', 'La Réunion'), ('976', 'Mayotte')
    )

    @classmethod
    def street_prefix(cls):
        """
        :example 'rue'
        """
        return cls.random_element(cls.street_prefixes)

    @classmethod
    def region(cls):
        """
        :example 'Guadeloupe'
        """
        return cls.random_element(cls.regions)

    @classmethod
    def department(cls):
        """
        Randomly returns a french department ('departmentNumber' , 'departmentName').
        :example ('2B' . 'Haute-Corse')
        """
        return cls.random_element(cls.departments)

    @classmethod
    def department_name(cls):
        """
        Randomly returns a french department name.
        :example 'Ardèche'
        """
        return cls.department()[1]

    @classmethod
    def department_number(cls):
        """
        Randomly returns a french department number.

        :example '59'
        """
        return cls.department()[0]




########NEW FILE########
__FILENAME__ = company
# coding=utf-8
from __future__ import unicode_literals
from ..company import Provider as CompanyProvider


class Provider(CompanyProvider):
    formats = (
        '{{last_name}} {{company_suffix}}',
        '{{last_name}} {{last_name}} {{company_suffix}}',
        '{{last_name}}',
        '{{last_name}}',
    )

    catch_phrase_formats = (
        '{{catch_phrase_noun}} {{catch_phrase_verb}} {{catch_phrase_attribute}}',
    )

    nouns = (
        'la sécurité', 'le plaisir', 'le confort', 'la simplicité', "l'assurance", "l'art", 'le pouvoir', 'le droit',
        'la possibilité', "l'avantage", 'la liberté'
    )

    verbs = (
        'de rouler', "d'avancer", "d'évoluer", 'de changer', "d'innover", 'de louer', "d'atteindre vos buts",
        'de concrétiser vos projets'
    )

    attributes = (
        'de manière efficace', 'plus rapidement', 'plus facilement', 'plus simplement', 'en toute tranquilité',
        'avant-tout', 'autrement', 'naturellement', 'à la pointe', 'sans soucis', "à l'état pur",
        'à sa source', 'de manière sûre', 'en toute sécurité'
    )

    company_suffixes = ('SA', 'S.A.', 'SARL', 'S.A.R.L.', 'S.A.S.', 'et Fils')

    siren_format = "### ### ###"

    @classmethod
    def catch_phrase_noun(cls):
        """
        Returns a random catch phrase noun.
        """
        return cls.random_element(cls.nouns)

    @classmethod
    def catch_phrase_attribute(cls):
        """
        Returns a random catch phrase attribute.
        """
        return cls.random_element(cls.attributes)

    @classmethod
    def catch_phrase_verb(cls):
        """
        Returns a random catch phrase verb.
        """
        return cls.random_element(cls.verbs)

    def catch_phrase(self):
        """
        :example 'integrate extensible convergence'
        """
        catch_phrase = ""
        while True:

            pattern = self.random_element(self.catch_phrase_formats)
            catch_phrase = self.generator.parse(pattern)
            catch_phrase = catch_phrase[0].upper() + catch_phrase[1:]

            if self._is_catch_phrase_valid(catch_phrase):
                break

        return catch_phrase

    # An array containing string which should not appear twice in a catch phrase
    words_which_should_not_appear_twice = ('sécurité', 'simpl')

    @classmethod
    def _is_catch_phrase_valid(cls, catch_phrase):
        """
        Validates a french catch phrase.

        :param catch_phrase: The catch phrase to validate.
        """
        for word in cls.words_which_should_not_appear_twice:
            # Fastest way to check if a piece of word does not appear twice.
            begin_pos = catch_phrase.find(word)
            end_pos = catch_phrase.find(word, begin_pos + 1)

            if begin_pos != -1 and begin_pos != end_pos: return False

        return True

    @classmethod
    def siren(cls):
        """
        Generates a siren number (9 digits).
        """
        return cls.numerify(cls.siren_format)

    @classmethod
    def siret(cls, max_sequential_digits=2):
        """
        Generates a siret number (14 digits).
        It is in fact the result of the concatenation of a siren number (9 digits),
        a sequential number (4 digits) and a control number (1 digit) concatenation.
        If $max_sequential_digits is invalid, it is set to 2.
        :param max_sequential_digits The maximum number of digits for the sequential number (> 0 && <= 4).
        """
        if max_sequential_digits > 4 or max_sequential_digits <= 0:
            max_sequential_digits = 2

        sequential_number = str(cls.random_number(max_sequential_digits)).zfill(4)
        return cls.numerify(cls.siren() + ' ' + sequential_number + '#')






########NEW FILE########
__FILENAME__ = internet
# coding=utf-8
from __future__ import unicode_literals
from ..internet import Provider as InternetProvider


class Provider(InternetProvider):
    safe_email_tlds = ('com', 'net', 'fr', 'fr')
    free_email_domains = (
    'voila.fr', 'gmail.com', 'hotmail.fr', 'yahoo.fr', 'laposte.net', 'free.fr', 'sfr.fr', 'orange.fr', 'bouygtel.fr',
    'club-internet.fr', 'dbmail.com', 'live.com', 'ifrance.com', 'noos.fr', 'tele2.fr', 'tiscali.fr', 'wanadoo.fr')
    tlds = ('com', 'com', 'com', 'net', 'org', 'fr', 'fr', 'fr')

    @staticmethod
    def _to_ascii(string):
        replacements = (
            ('à', 'a'), ('À', 'A'), ('ç', 'c'), ('Ç', 'c'), ('é', 'e'), ('É', 'E'), ('è', 'e'),
            ('È', 'E'), ('ë', 'e'), ('Ë', 'E'), ('ï', 'i'), ('Ï', 'I'), ('î', 'i'), ('Î', 'I'),
            ('ô', 'o'), ('Ô', 'O'), ('ù', ''), ('Ù', 'U'),
        )
        for search, replace in replacements:
            string = string.replace(search, replace)

        return string

    def user_name(self):
        pattern = self.random_element(self.user_name_formats)
        return self._to_ascii(self.bothify(self.generator.parse(pattern))).lower()

    def domain_word(self):
        company = self.generator.format('company')
        company_elements = company.split(' ')
        company = company_elements[0]
        company = company.replace(" ", "")

        return self._to_ascii(company).lower()
########NEW FILE########
__FILENAME__ = person
# coding=utf-8
from __future__ import unicode_literals
from ..person import Provider as PersonProvider


class Provider(PersonProvider):
    formats = (
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{prefix}} {{last_name}}',
        '{{first_name}} {{last_name}}-{{last_name}}',
        '{{first_name}}-{{first_name}} {{last_name}}',
    )

    first_names = (
        'Adrien', 'Aimé', 'Alain', 'Alexandre', 'Alfred', 'Alphonse', 'André', 'Antoine', 'Arthur', 'Auguste',
        'Augustin', 'Benjamin', 'Benoît', 'Bernard', 'Bertrand', 'Charles', 'Christophe', 'Daniel', 'David', 'Denis',
        'Édouard', 'Émile', 'Emmanuel', 'Éric', 'Étienne', 'Eugène', 'François', 'Franck', 'Frédéric', 'Gabriel',
        'Georges', 'Gérard', 'Gilbert', 'Gilles', 'Grégoire', 'Guillaume', 'Guy', 'William', 'Henri', 'Honoré',
        'Hugues', 'Isaac', 'Jacques', 'Jean', 'Jérôme', 'Joseph', 'Jules', 'Julien', 'Laurent', 'Léon', 'Louis', 'Luc',
        'Lucas', 'Marc', 'Marcel', 'Martin', 'Matthieu', 'Maurice', 'Michel', 'Nicolas', 'Noël', 'Olivier', 'Patrick',
        'Paul', 'Philippe', 'Pierre', 'Raymond', 'Rémy', 'René', 'Richard', 'Robert', 'Roger', 'Roland', 'Sébastien',
        'Stéphane', 'Théodore', 'Théophile', 'Thibaut', 'Thibault', 'Thierry', 'Thomas', 'Timothée', 'Tristan',
        'Victor', 'Vincent', 'Xavier', 'Yves', 'Zacharie',
        'Adélaïde', 'Adèle', 'Adrienne', 'Agathe', 'Agnès', 'Aimée', 'Alexandrie', 'Alix', 'Alexandria', 'Alex',
        'Alice', 'Amélie', 'Anaïs', 'Anastasie', 'Andrée', 'Anne', 'Anouk', 'Antoinette', 'Arnaude', 'Astrid', 'Audrey',
        'Aurélie', 'Aurore', 'Bernadette', 'Brigitte', 'Capucine', 'Caroline', 'Catherine', 'Cécile', 'Céline',
        'Célina', 'Chantal', 'Charlotte', 'Christelle', 'Christiane', 'Christine', 'Claire', 'Claudine', 'Clémence',
        'Colette', 'Constance', 'Corinne', 'Danielle', 'Denise', 'Diane', 'Dorothée', 'Édith', 'Éléonore', 'Élisabeth',
        'Élise', 'Élodie', 'Émilie', 'Emmanuelle', 'Françoise', 'Frédérique', 'Gabrielle', 'Geneviève', 'Hélène',
        'Henriette', 'Hortense', 'Inès', 'Isabelle', 'Jacqueline', 'Jeanne', 'Jeannine', 'Joséphine', 'Josette',
        'Julie', 'Juliette', 'Laetitia', 'Laure', 'Laurence', 'Lorraine', 'Louise', 'Luce', 'Lucie', 'Lucy',
        'Madeleine', 'Manon', 'Marcelle', 'Margaux', 'Margaud', 'Margot', 'Marguerite', 'Margot', 'Margaret', 'Maggie',
        'daisy', 'Marianne', 'Marie', 'Marine', 'Marthe', 'Martine', 'Maryse', 'Mathilde', 'Michèle', 'Michelle',
        'Michelle', 'Monique', 'Nathalie', 'Nath', 'Nathalie', 'Nicole', 'Noémi', 'Océane', 'Odette', 'Olivie',
        'Patricia', 'Paulette', 'Pauline', 'Pénélope', 'Philippine', 'Renée', 'Sabine', 'Simone', 'Sophie', 'Stéphanie',
        'Susanne', 'Suzanne', 'Susan', 'Suzanne', 'Sylvie', 'Thérèse', 'Valentine', 'Valérie', 'Véronique', 'Victoire',
        'Virginie', 'Zoé',
        'Camille', 'Claude', 'Dominique'
    )

    last_names = (
        'Martin', 'Bernard', 'Thomas', 'Robert', 'Petit', 'Dubois', 'Richard', 'Garcia', 'Durand', 'Moreau', 'Lefebvre',
        'Simon', 'Laurent', 'Michel', 'Leroy', 'Martinez', 'David', 'Fontaine', 'Da Silva', 'Morel', 'Fournier',
        'Dupont', 'Bertrand', 'Lambert', 'Rousseau', 'Girard', 'Roux', 'Vincent', 'Lefevre', 'Boyer', 'Lopez', 'Bonnet',
        'Andre', 'Francois', 'Mercier', 'Muller', 'Guerin', 'Legrand', 'Sanchez', 'Garnier', 'Chevalier', 'Faure',
        'Perez', 'Clement', 'Fernandez', 'Blanc', 'Robin', 'Morin', 'Gauthier', 'Pereira', 'Perrin', 'Roussel', 'Henry',
        'Duval', 'Gautier', 'Nicolas', 'Masson', 'Marie', 'Noel', 'Ferreira', 'Lemaire', 'Mathieu', 'Riviere', 'Denis',
        'Marchand', 'Rodriguez', 'Dumont', 'Payet', 'Lucas', 'Dufour', 'Dos Santos', 'Joly', 'Blanchard', 'Meunier',
        'Rodrigues', 'Caron', 'Gerard', 'Fernandes', 'Brunet', 'Meyer', 'Barbier', 'Leroux', 'Renard', 'Goncalves',
        'Gaillard', 'Brun', 'Roy', 'Picard', 'Giraud', 'Roger', 'Schmitt', 'Colin', 'Arnaud', 'Vidal', 'Gonzalez',
        'Lemoine', 'Roche', 'Aubert', 'Olivier', 'Leclercq', 'Pierre', 'Philippe', 'Bourgeois', 'Renaud', 'Martins',
        'Leclerc', 'Guillaume', 'Lacroix', 'Lecomte', 'Benoit', 'Fabre', 'Carpentier', 'Vasseur', 'Louis', 'Hubert',
        'Jean', 'Dumas', 'Rolland', 'Grondin', 'Rey', 'Huet', 'Gomez', 'Dupuis', 'Guillot', 'Berger', 'Moulin',
        'Hoarau', 'Menard', 'Deschamps', 'Fleury', 'Adam', 'Boucher', 'Poirier', 'Bertin', 'Charles', 'Aubry',
        'Da Costa', 'Royer', 'Dupuy', 'Maillard', 'Paris', 'Baron', 'Lopes', 'Guyot', 'Carre', 'Jacquet', 'Renault',
        'Herve', 'Charpentier', 'Klein', 'Cousin', 'Collet', 'Leger', 'Ribeiro', 'Hernandez', 'Bailly', 'Schneider',
        'Le Gall', 'Ruiz', 'Langlois', 'Bouvier', 'Gomes', 'Prevost', 'Julien', 'Lebrun', 'Breton', 'Germain', 'Millet',
        'Boulanger', 'Remy', 'Le Roux', 'Daniel', 'Marques', 'Maillot', 'Leblanc', 'Le Goff', 'Barre', 'Perrot',
        'Leveque', 'Marty', 'Benard', 'Monnier', 'Hamon', 'Pelletier', 'Alves', 'Etienne', 'Marchal', 'Poulain',
        'Tessier', 'Lemaitre', 'Guichard', 'Besson', 'Mallet', 'Hoareau', 'Gillet', 'Weber', 'Jacob', 'Collin',
        'Chevallier', 'Perrier', 'Michaud', 'Carlier', 'Delaunay', 'Chauvin', 'Alexandre', 'Marechal', 'Antoine',
        'Lebon', 'Cordier', 'Lejeune', 'Bouchet', 'Pasquier', 'Legros', 'Delattre', 'Humbert', 'De Oliveira', 'Briand',
        'Lamy', 'Launay', 'Gilbert', 'Perret', 'Lesage', 'Gay', 'Nguyen', 'Navarro', 'Besnard', 'Pichon', 'Hebert',
        'Cohen', 'Pons', 'Lebreton', 'Sauvage', 'De Sousa', 'Pineau', 'Albert', 'Jacques', 'Pinto', 'Barthelemy',
        'Turpin', 'Bigot', 'Lelievre', 'Georges', 'Reynaud', 'Ollivier', 'Martel', 'Voisin', 'Leduc', 'Guillet',
        'Vallee', 'Coulon', 'Camus', 'Marin', 'Teixeira', 'Costa', 'Mahe', 'Didier', 'Charrier', 'Gaudin', 'Bodin',
        'Guillou', 'Gregoire', 'Gros', 'Blanchet', 'Buisson', 'Blondel', 'Paul', 'Dijoux', 'Barbe', 'Hardy', 'Laine',
        'Evrard', 'Laporte', 'Rossi', 'Joubert', 'Regnier', 'Tanguy', 'Gimenez', 'Allard', 'Devaux', 'Morvan', 'Levy',
        'Dias', 'Courtois', 'Lenoir', 'Berthelot', 'Pascal', 'Vaillant', 'Guilbert', 'Thibault', 'Moreno', 'Duhamel',
        'Colas', 'Masse', 'Baudry', 'Bruneau', 'Verdier', 'Delorme', 'Blin', 'Guillon', 'Mary', 'Coste', 'Pruvost',
        'Maury', 'Allain', 'Valentin', 'Godard', 'Joseph', 'Brunel', 'Marion', 'Texier', 'Seguin', 'Raynaud', 'Bourdon',
        'Raymond', 'Bonneau', 'Chauvet', 'Maurice', 'Legendre', 'Loiseau', 'Ferrand', 'Toussaint', 'Techer', 'Lombard',
        'Lefort', 'Couturier', 'Bousquet', 'Diaz', 'Riou', 'Clerc', 'Weiss', 'Imbert', 'Jourdan', 'Delahaye', 'Gilles',
        'Guibert', 'Begue', 'Descamps', 'Delmas', 'Peltier', 'Dupre', 'Chartier', 'Martineau', 'Laroche', 'Leconte',
        'Maillet', 'Parent', 'Labbe', 'Potier', 'Bazin', 'Normand', 'Pottier', 'Torres', 'Lagarde', 'Blot', 'Jacquot',
        'Lemonnier', 'Grenier', 'Rocher', 'Bonnin', 'Boutin', 'Fischer', 'Munoz', 'Neveu', 'Lacombe', 'Mendes',
        'Delannoy', 'Auger', 'Wagner', 'Fouquet', 'Mace', 'Ramos', 'Pages', 'Petitjean', 'Chauveau', 'Foucher', 'Peron',
        'Guyon', 'Gallet', 'Rousset', 'Traore', 'Bernier', 'Vallet', 'Letellier', 'Bouvet', 'Hamel', 'Chretien',
        'Faivre', 'Boulay', 'Thierry', 'Samson', 'Ledoux', 'Salmon', 'Gosselin', 'Lecoq', 'Pires', 'Leleu', 'Becker',
        'Diallo', 'Merle', 'Valette'
    )

    prefixes = ('de', 'de la', 'Le', 'du')

    @classmethod
    def prefix(cls):
        return cls.random_element(cls.prefixes)
########NEW FILE########
__FILENAME__ = phone_number
from __future__ import unicode_literals
from ..phone_number import Provider as PhoneNumberProvider


class Provider(PhoneNumberProvider):
    formats = (
        '+33 (0)1 ## ## ## ##',
        '+33 (0)1 ## ## ## ##',
        '+33 (0)2 ## ## ## ##',
        '+33 (0)3 ## ## ## ##',
        '+33 (0)4 ## ## ## ##',
        '+33 (0)5 ## ## ## ##',
        '+33 (0)6 ## ## ## ##',
        '+33 (0)8 ## ## ## ##',
        '+33 1 ## ## ## ##',
        '+33 1 ## ## ## ##',
        '+33 2 ## ## ## ##',
        '+33 3 ## ## ## ##',
        '+33 4 ## ## ## ##',
        '+33 5 ## ## ## ##',
        '+33 6 ## ## ## ##',
        '+33 8 ## ## ## ##',
        '01########',
        '01########',
        '02########',
        '03########',
        '04########',
        '05########',
        '06########',
        '08########',
        '01 ## ## ## ##',
        '01 ## ## ## ##',
        '02 ## ## ## ##',
        '03 ## ## ## ##',
        '04 ## ## ## ##',
        '05 ## ## ## ##',
        '06 ## ## ## ##',
        '08 ## ## ## ##',
    )
########NEW FILE########
__FILENAME__ = address
# coding=utf-8
from __future__ import unicode_literals
from ..address import Provider as AddressProvider


class Provider(AddressProvider):

    city_formats = ('{{city_name}}', )

    street_name_formats = (
        '{{first_name}} {{last_name}}',
        '{{last_name}}'
    )

    street_address_formats = ('{{building_number}} {{street_name}}', )

    address_formats = ('{{street_address}}\n{{city}} {{postcode}}','{{street_address}}\n{{city}}-{{postcode}}' )

    building_number_formats = ('####','###', '##', '#', '#/#','##/##','##/###','##/####')

    postcode_formats = ('######', )

    cities = (
       'आदिलाबाद','अगरतला','अहमदाबाद', 'अहमदनगर' , 'अजमेर' ,'अम्बाजी' ,'अमरपुर' ,'इलाहाबाद' ,'अकोला' 'अखनूर', 
       'अन्तर्गत' , 'अलांग' ,'अलीगढ' ,'दादरा और नागर हवेली', 'अमरावती' , 'अमरोहा', 'अनन्तपुर', 'करना', 'जिससेबेलारी',
       'अनंतनाग','भागलपुर',  'पेपरबोर्डस','त्रिबेनी', 'टिसूज', 'भद्रक', 'बचेली' ,'बहादुरगंज' ,'बहादुरगढ' ,'चिरमिरी', 'चिराला', 'चित्रदुर्ग' ,
       'चित्तूर' ,'चित्रकूट' ,'देवगढ़' , 'दालखोला' , 'देवास', 'चंडीगढ', 'फादर', 'चिन्नफ', 'चिपलुन', 'चक्रधरपुर', 'चंबा', 'फतहपुर', 'फतेहपुर',
       'फतेहगढ', 'फतहपुर' ,'फतहपुर' ,'चित्तूर' ,'चित्रकूट', 'सभापतिने', 'देवगढ़', 'द्वारारस्वीकृति', 'दालखोला', 
       'धर्मापुरी', 'पाकाला', 'धारवाड' ,'असम',  'देहरा' , 'रानीताल' ,'खडगपुर', 'मोकामा', 'मोकोकचुंग' ,'जिलोंपर' ,'विस्तारण' ,'मोतिहारी' 
    )

    states = (
        'अरूणाचल प्रदेश', 'बिहार', 'असम' ,'आंध्र प्रदेश' ,'छत्तीसगढ','हरियाणा' ,'गुजरात' ,'हिमाचल प्रदेश', 'गोवा', 'मध्य प्रदेश', 'महाराष्ट्र', 'कश्मीर',
        'केरल' , 'कर्नाटक', 'मणिपुर' ,'मिजोरम', 'मेघालय', 'सिबक्कम' ,'राजस्थान','पंजाब', 'उडीसा' ,'उत्तरांचल' ,'उत्तर प्रदेश', 'तमिलनाडु', 'त्रिपुरा',
        'पश्चिमी बंगाल', 'अंडमान और निकोबार', 'द्वीप समूह' , 'दमन और दीव', 'दादरा और नागर हवेली', 'दिल्ली','पांडिचेरी', 'लक्षद्वीप'
    )

    countries = (
        'आर्मेनिया', 'यू.के.','फ्रांस', 'अजेपटीना', 'ब्राजील'  ,'ईरान', 'यूनान', 'स्पेन' ,'हमारे' , 'जॉजिऩया', 'लेबनान' , 'सायप्रस', 'सीरिया', 'कनाडा', 'रूस' ,
        'संयुक्त राज्य अमरीका' ,'नेदर्लान्ड', 'फ्रांस','ऑस्ट्रेलिया', 'एंटीगुआ', 'बार्बुडा' ,'अर्जेंटीना', 'आर्मेनिया' ,'ऑस्ट्रिया', 'अज़रबाइजान','बारबाडोस', 'बेलारूस', 'बेल्जियम',
        'बेलीज़' ,'बेनिन', 'बहामास' ,'बहरीन', 'बांग्लादेश', 'भूटान', 'बोलिविया', 'बोस्निया'  ,'हर्जेगोविना', 'बोत्सवाना' , 'ब्राजील' ,'ब्रुनेई' ,'बुल्गारिया', 'बुर्किना', 'फ़ासो',
        'बर्मा', 'बुरूंडी','डोमिनिकन रिपब्लिक','गिनिया', 'टीमोर','फ़िनलैंड','गेबोन', 'गाम्बिया', 'जर्मनी', 'जार्जिया ग्रेनेडा','घाना' ,'यूनान' ,'ग्रेट ब्रिटेन', 'हंगरी',
        'भारत', 'इराक', 'आयरलैंड', 'इंडोनेशिया' , 'इसराइल' , 'आइलैंड', 'ईरान' ,'इटली','जमैका' ,'जॉर्डन','जापान','क़जाख़स्तान', 'केन्या', 'किरिबाती',  'दक्षिण कोरिया', 'लातविया',
        'लाओस' , 'उत्तर कोरिया', 'दक्षिण कोसोवो', 'कुवैत', 'लेबनान', 'लिचटीनस्टीन', 'लिथुआनिया' ,'लक्समबर्ग', 'लीबिया' ,'लाइबेरिया', 'लेसोथो',
        'नेपाल' ,'न्यूजीलैंड', 'निकारागुआ', 'नाइजर', 'नाउरू','लुसिया', 'रूस',  'रोमानिया', 'अरब', 'अमीरात', 'यूएई' ,'युगांडा', 'यूक्रेन', 'उरूग्वे', 
        'उज़बेकिस्तान', 'यूनाइटेड किंगडम', 'वानुआतू', 'वेटिकन सिटी' , 'वेनेजुएला',  'पश्चिमी सहारा'  , 'वियतनाम', 'यमन', 'ज़ायर' , 'जाबम्बया', 'जिम्बाब्वे' 
    )

    @classmethod
    def city_name(cls):
        return cls.random_element(cls.cities)

    @classmethod
    def state(cls):
        return cls.random_element(cls.states)

########NEW FILE########
__FILENAME__ = person
# coding=utf-8
from __future__ import unicode_literals
from ..person import Provider as PersonProvider


class Provider(PersonProvider):
    formats = (
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{last_name}}, {{first_name}}'
    )

    first_names = (
        'अभय','आदित्य','अजित','अखिल','अमर','आनन्द','अंकुर','अनुपम','अशोक','चन्दना','गणेश','गौतम','गोविंदा','हनुमान्','इन्द्रजित','ईश',
        'जगन्नाथ','जगदीश','जयदेव','जितेन्द्र','कैलाश','कालिदास','कम्बोज','किरण','ललित','मानदीप','मोहन','मुकेश','नरेन्द्र','नारायण','निखिल','प्रभाकर',
        'प्रबोध','प्रदीप','प्रणव','प्रेम','राजीव','रतन','रोहन','विष्णु','विक्रम','विजया','विजय','विवेक','यश',
        'अभिलाषा','अदिती','ऐश्वर्या','अमिता','अंकिता','आशा','अवनी','भरत','चेतना','दिव्या','एषा','इन्दु','जया','जयन्ती','ज्योत्सना','कान्ती','कुमारी',
        'लता','लीला','मालती','मोहिनी','निशा','पूर्णिमा','पुष्पा','रचना','रजनी','रश्मी','रिया','सरला','सरस्वती','सावित्री','शक्ति','शान्ता','शर्मिला','श्यामा',
        'सुलभा','तृष्णा','विद्या'
    )

    last_names = (
        'पाटिल','शर्मा','आचार्य','अग्रवाल','सिंह','अहलुवालिया','आहूजा','पुष्कर','शिरोळे','गायकवाड','गावित','शिरोळे','बापट','अरोड़ा','बाबू',
        'बादामी','जमानत','बजाज','बक्षी','बालकृष्णन','बालासुब्रमणियम','बसु','भंडारी','चौधरी','चौहान','छाबरा','दादा','डानी','डार', 'दारा', 'दत्ता',
        'दवे', 'दयाल', 'धालीवाल','दीक्षित', 'दोषी', 'दुआ', 'दूबे' ,'ढींगरा','वाल', 'साया', 'बना', 'ड़ाल' ,'गर्ग' ,'गणेश','गांगुली','गुप्ता',
        'हेगडे','जोशी','काले','कृष्णा', 'कृष्णमूर्ति', 'कृष्णन' ,'कुलकर्णी', 'कुमार', 'कुण्डा', 'नाम', 'रामलला', 'लता', 'लोदी', 'लोकनाट्यों',
        'विकावि', 'लाल', 'लाला' ,'वफादार', 'लूथरा' ,'मदन', 'मगर' ,'भारत', 'महावीर' , 'महादेव', 'महाजन', 'महाराज', 'मजूमदार', 'मल्लिक' ,'सेनाधीश',
        'माने' ,'मंगल', 'मंगत', 'रामशर्मा' ,'मणि', 'मान',  'श्रीविमल', 'कुमार', 'मंडल'
    )

########NEW FILE########
__FILENAME__ = phone_number
from __future__ import unicode_literals
from ..phone_number import Provider as PhoneNumberProvider


class Provider(PhoneNumberProvider):
    formats = (
        '+91 ##########',
        '+91 ### #######',
        '0##-########',
        '0##########',
        '0#### ######',
    )

########NEW FILE########
__FILENAME__ = internet
from __future__ import unicode_literals
from . import BaseProvider
import random
import re
from faker.providers.lorem import Provider as Lorem


class Provider(BaseProvider):
    safe_email_tlds = ('org', 'com', 'net')
    free_email_domains = ('gmail.com', 'yahoo.com', 'hotmail.com')
    tlds = ('com', 'com', 'com', 'com', 'com', 'com', 'biz', 'info', 'net', 'org')

    uri_pages = (
    'index', 'home', 'search', 'main', 'post', 'homepage', 'category', 'register', 'login', 'faq', 'about', 'terms',
    'privacy', 'author')
    uri_paths = (
    'app', 'main', 'wp-content', 'search', 'category', 'tag', 'categories', 'tags', 'blog', 'posts', 'list', 'explore')
    uri_extensions = ('.html', '.html', '.html', '.htm', '.htm', '.php', '.php', '.jsp', '.asp')

    user_name_formats = (
        '{{last_name}}.{{first_name}}',
        '{{first_name}}.{{last_name}}',
        '{{first_name}}##',
        '?{{last_name}}',
    )
    email_formats = (
        '{{user_name}}@{{domain_name}}',
        '{{user_name}}@{{free_email_domain}}',
    )
    url_formats = (
        'http://www.{{domain_name}}/',
        'http://{{domain_name}}/',
    )
    uri_formats = (
        '{{url}}',
        '{{url}}{{uri_page}}/',
        '{{url}}{{uri_page}}{{uri_extension}}',
        '{{url}}{{uri_path}}/{{uri_page}}/',
        '{{url}}{{uri_path}}/{{uri_page}}{{uri_extension}}',
    )

    def email(self):
        pattern = self.random_element(self.email_formats)
        return "".join(self.generator.parse(pattern).split(" "))

    def safe_email(self):
        return self.user_name() + '@example.' + self.random_element(self.safe_email_tlds)

    def free_email(self):
        return self.user_name() + '@' + self.free_email_domain()

    def company_email(self):
        return self.user_name() + '@' + self.domain_name()

    @classmethod
    def free_email_domain(cls):
        return cls.random_element(cls.free_email_domains)

    def user_name(self):
        pattern = self.random_element(self.user_name_formats)
        return self.bothify(self.generator.parse(pattern)).lower()

    def domain_name(self):
        return self.domain_word() + '.' + self.tld()

    def domain_word(self):
        company = self.generator.format('company')
        company_elements = company.split(' ')
        company = company_elements.pop(0)
        return re.sub(r'\W', '', company).lower()

    def tld(self):
        return self.random_element(self.tlds)

    def url(self):
        pattern = self.random_element(self.url_formats)
        return self.generator.parse(pattern)

    def ipv4(self):
        """
        Convert 32-bit integer to dotted IPv4 address.
        """
        return ".".join(map(lambda n: str(random.randint(-2147483648, 2147483647) >> n & 0xFF), [24, 16, 8, 0]))

    def ipv6(self):
        res = [hex(random.randint(0, 65535))[2:].zfill(4) for i in range(0, 8)]
        return ":".join(res)

    def mac_address(self):
        mac = [random.randint(0x00, 0xff) for i in range(0, 6)]
        return ":".join(map(lambda x: "%02x" % x, mac))

    @classmethod
    def uri_page(cls):
        return cls.random_element(cls.uri_pages)

    @classmethod
    def uri_path(cls, deep=None):
        deep = deep if deep else random.randint(1, 3)
        return "/".join([cls.random_element(cls.uri_paths) for _ in range(0, deep)])

    @classmethod
    def uri_extension(cls):
        return cls.random_element(cls.uri_extensions)

    def uri(self):
        pattern = self.random_element(self.uri_formats)
        return self.generator.parse(pattern)

    @classmethod
    def slug(cls, value=None):
        """
        Django algorithm
        """
        import unicodedata

        #value = unicode(value or Lorem.text(20))
        #value = unicodedata.normalize('NFKD', value).encode('ascii', 'ignore')
        #value = unicode(re.sub(r'[^\w\s-]', '', value).strip().lower())
        #return re.sub('[-\s]+', '-', value)
        value = unicodedata.normalize('NFKD', value or Lorem.text(20)).encode('ascii', 'ignore').decode('ascii')
        value = re.sub('[^\w\s-]', '', value).strip().lower()
        return re.sub('[-\s]+', '-', value)

########NEW FILE########
__FILENAME__ = address
# coding=utf-8
from __future__ import unicode_literals
from ..address import Provider as AddressProvider


class Provider(AddressProvider):
    city_prefixes = ('San', 'Borgo', 'Sesto', 'Quarto', 'Settimo')
    city_suffixes = (
        'a mare', 'lido', 'ligure', 'del friuli', 'salentino', 'calabro', 'veneto', 'nell\'emilia', 'umbro', 'laziale',
        'terme', 'sardo')
    building_number_formats = ('###', '##', '#')
    street_suffixes = (
        'Piazza', 'Strada', 'Via', 'Borgo', 'Contrada', 'Rotonda', 'Incrocio', 'Viale', 'Stretto', 'Vicolo', 'Canale')
    postcode_formats = ('#####',)
    states = ('Agrigento', 'Alessandria', 'Ancona', 'Aosta', 'Arezzo', 'Ascoli Piceno', 'Asti', 'Avellino', 'Bari',
              'Barletta-Andria-Trani', 'Belluno', 'Benevento', 'Bergamo', 'Biella', 'Bologna', 'Bolzano', 'Brescia',
              'Brindisi', 'Cagliari', 'Caltanissetta', 'Campobasso', 'Carbonia-Iglesias', 'Caserta', 'Catania',
              'Catanzaro', 'Chieti', 'Como', 'Cosenza', 'Cremona', 'Crotone', 'Cuneo', 'Enna', 'Fermo', 'Ferrara',
              'Firenze', 'Foggia', 'Forlì-Cesena', 'Frosinone', 'Genova', 'Gorizia', 'Grosseto', 'Imperia', 'Isernia',
              'La Spezia', 'L\'Aquila', 'Latina', 'Lecce', 'Lecco', 'Livorno', 'Lodi', 'Lucca', 'Macerata', 'Mantova',
              'Massa-Carrara', 'Matera', 'Messina', 'Milano', 'Modena', 'Monza e della Brianza', 'Napoli', 'Novara',
              'Nuoro', 'Olbia-Tempio', 'Oristano', 'Padova', 'Palermo', 'Parma', 'Pavia', 'Perugia', 'Pesaro e Urbino',
              'Pescara', 'Piacenza', 'Pisa', 'Pistoia', 'Pordenone', 'Potenza', 'Prato', 'Ragusa', 'Ravenna',
              'Reggio Calabria', 'Reggio Emilia', 'Rieti', 'Rimini', 'Roma', 'Rovigo', 'Salerno', 'Medio Campidano',
              'Sassari', 'Savona', 'Siena', 'Siracusa', 'Sondrio', 'Taranto', 'Teramo', 'Terni', 'Torino', 'Ogliastra',
              'Trapani', 'Trento', 'Treviso', 'Trieste', 'Udine', 'Varese', 'Venezia', 'Verbano-Cusio-Ossola',
              'Vercelli', 'Verona', 'Vibo Valentia', 'Vicenza', 'Viterbo' )
    states_abbr = (
        'AG', 'AL', 'AN', 'AO', 'AR', 'AP', 'AT', 'AV', 'BA', 'BT', 'BL', 'BN', 'BG', 'BI', 'BO', 'BZ', 'BS', 'BR',
        'CA',
        'CL', 'CB', 'CI', 'CE', 'CT', 'CZ', 'CH', 'CO', 'CS', 'CR', 'KR', 'CN', 'EN', 'FM', 'FE', 'FI', 'FG', 'FC',
        'FR',
        'GE', 'GO', 'GR', 'IM', 'IS', 'SP', 'AQ', 'LT', 'LE', 'LC', 'LI', 'LO', 'LU', 'MC', 'MN', 'MS', 'MT', 'ME',
        'MI',
        'MO', 'MB', 'NA', 'NO', 'NU', 'OT', 'OR', 'PD', 'PA', 'PR', 'PV', 'PG', 'PU', 'PE', 'PC', 'PI', 'PT', 'PN',
        'PZ',
        'PO', 'RG', 'RA', 'RC', 'RE', 'RI', 'RN', 'RM', 'RO', 'SA', 'VS', 'SS', 'SV', 'SI', 'SR', 'SO', 'TA', 'TE',
        'TR',
        'TO', 'OG', 'TP', 'TN', 'TV', 'TS', 'UD', 'VA', 'VE', 'VB', 'VC', 'VR', 'VV', 'VI', 'VT' )
    countries = (
        'Afghanistan', 'Albania', 'Algeria', 'American Samoa', 'Andorra', 'Angola', 'Anguilla',
        'Antartide (territori a sud del 60° parallelo)', 'Antigua e Barbuda', 'Argentina', 'Armenia', 'Aruba',
        'Australia', 'Austria', 'Azerbaijan',
        'Bahamas', 'Bahrain', 'Bangladesh', 'Barbados', 'Bielorussia', 'Belgio', 'Belize', 'Benin', 'Bermuda', 'Bhutan',
        'Bolivia', 'Bosnia e Herzegovina', 'Botswana', 'Bouvet Island (Bouvetoya)', 'Brasile',
        'Territorio dell\'arcipelago indiano', 'Isole Vergini Britanniche', 'Brunei Darussalam', 'Bulgaria',
        'Burkina Faso', 'Burundi',
        'Cambogia', 'Cameroon', 'Canada', 'Capo Verde', 'Isole Cayman', 'Repubblica Centrale Africana', 'Chad', 'Cile',
        'Cina', 'Isola di Pasqua', 'Isola di Cocos (Keeling)', 'Colombia', 'Comoros', 'Congo', 'Isole Cook',
        'Costa Rica', 'Costa d\'Avorio', 'Croazia', 'Cuba', 'Cipro', 'Repubblica Ceca',
        'Danimarca', 'Gibuti', 'Repubblica Dominicana',
        'Equador', 'Egitto', 'El Salvador', 'Guinea Equatoriale', 'Eritrea', 'Estonia', 'Etiopia',
        'Isole Faroe', 'Isole Falkland (Malvinas)', 'Fiji', 'Finlandia', 'Francia', 'Guyana Francese',
        'Polinesia Francese', 'Territori Francesi del sud',
        'Gabon', 'Gambia', 'Georgia', 'Germania', 'Ghana', 'Gibilterra', 'Grecia', 'Groenlandia', 'Grenada',
        'Guadalupa', 'Guam', 'Guatemala', 'Guernsey', 'Guinea', 'Guinea-Bissau', 'Guyana',
        'Haiti', 'Heard Island and McDonald Islands', 'Città del Vaticano', 'Honduras', 'Hong Kong', 'Ungheria',
        'Islanda', 'India', 'Indonesia', 'Iran', 'Iraq', 'Irlanda', 'Isola di Man', 'Israele', 'Italia',
        'Giamaica', 'Giappone', 'Jersey', 'Giordania',
        'Kazakhstan', 'Kenya', 'Kiribati', 'Korea', 'Kuwait', 'Republicca Kirgiza',
        'Repubblica del Laos', 'Latvia', 'Libano', 'Lesotho', 'Liberia', 'Libyan Arab Jamahiriya', 'Liechtenstein',
        'Lituania', 'Lussemburgo',
        'Macao', 'Macedonia', 'Madagascar', 'Malawi', 'Malesia', 'Maldive', 'Mali', 'Malta', 'Isole Marshall',
        'Martinica', 'Mauritania', 'Mauritius', 'Mayotte', 'Messico', 'Micronesia', 'Moldova', 'Principato di Monaco',
        'Mongolia', 'Montenegro', 'Montserrat', 'Marocco', 'Mozambico', 'Myanmar',
        'Namibia', 'Nauru', 'Nepal', 'Antille Olandesi', 'Olanda', 'Nuova Caledonia', 'Nuova Zelanda', 'Nicaragua',
        'Niger', 'Nigeria', 'Niue', 'Isole Norfolk', 'Northern Mariana Islands', 'Norvegia',
        'Oman',
        'Pakistan', 'Palau', 'Palestina', 'Panama', 'Papua Nuova Guinea', 'Paraguay', 'Peru', 'Filippine',
        'Pitcairn Islands', 'Polonia', 'Portogallo', 'Porto Rico',
        'Qatar',
        'Reunion', 'Romania', 'Russia', 'Rwanda',
        'San Bartolomeo', 'Sant\'Elena', 'Saint Kitts and Nevis', 'Saint Lucia', 'Saint Martin',
        'Saint Pierre and Miquelon', 'Saint Vincent and the Grenadines', 'Samoa', 'San Marino', 'Sao Tome and Principe',
        'Arabia Saudita', 'Senegal', 'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore', 'Slovenia', 'Isole Solomon',
        'Somalia', 'Sud Africa', 'Georgia del sud e South Sandwich Islands', 'Spagna', 'Sri Lanka', 'Sudan', 'Suriname',
        'Svalbard & Jan Mayen Islands', 'Swaziland', 'Svezia', 'Svizzera', 'Siria',
        'Taiwan', 'Tajikistan', 'Tanzania', 'Tailandia', 'Timor-Leste', 'Togo', 'Tokelau', 'Tonga', 'Trinidad e Tobago',
        'Tunisia', 'Turchia', 'Turkmenistan', 'Isole di Turks and Caicos', 'Tuvalu',
        'Uganda', 'Ucraina', 'Emirati Arabi Uniti', 'Regno Unito', 'Stati Uniti d\'America',
        'United States Minor Outlying Islands', 'Isole Vergini Statunitensi', 'Uruguay', 'Uzbekistan',
        'Vanuatu', 'Venezuela', 'Vietnam',
        'Wallis and Futuna', 'Western Sahara',
        'Yemen',
        'Zambia', 'Zimbabwe'
    )

    city_formats = (
        '{{city_prefix}} {{first_name}} {{city_suffix}}',
        '{{city_prefix}} {{first_name}}',
        '{{first_name}} {{city_suffix}}',
        '{{last_name}} {{city_suffix}}',
    )
    street_name_formats = (
        '{{street_suffix}} {{first_name}}',
        '{{street_suffix}} {{last_name}}'
    )
    street_address_formats = (
        '{{street_name}} {{building_number}}',
        '{{street_name}} {{building_number}} {{secondary_address}}',
    )
    address_formats = (
        "{{street_address}}\n{{city}}, {{postcode}} {{state}} ({{state_abbr}})",
    )
    secondary_address_formats = ('Appartamento ##', 'Piano #')

    @classmethod
    def city_prefix(cls):
        return cls.random_element(cls.city_prefixes)

    @classmethod
    def secondary_address(cls):
        return cls.numerify(cls.random_element(cls.secondary_address_formats))

    @classmethod
    def state(cls):
        return cls.random_element(cls.states)

    @classmethod
    def state_abbr(cls):
        return cls.random_element(cls.states_abbr)

########NEW FILE########
__FILENAME__ = company
# coding=utf-8
from __future__ import unicode_literals
from ..company import Provider as CompanyProvider


class Provider(CompanyProvider):
    formats = (
        '{{last_name}} {{company_suffix}}',
        '{{last_name}}-{{last_name}} {{company_suffix}}',
        '{{last_name}}, {{last_name}} e {{last_name}} {{company_suffix}}'
    )

    catch_phrase_words = (
        (
            'Abilità', 'Access', 'Adattatore', 'Algoritmo', 'Alleanza', 'Analizzatore', 'Applicazione', 'Approccio',
            'Architettura', 'Archivio', 'Intelligenza artificiale', 'Array', 'Attitudine', 'Benchmark', 'Capacità',
            'Sfida', 'Circuito', 'Collaborazione', 'Complessità', 'Concetto', 'Conglomerato', 'Contingenza', 'Core',
            'Database', 'Data-warehouse', 'Definizione', 'Emulazione', 'Codifica', 'Criptazione', 'Firmware',
            'Flessibilità', 'Previsione', 'Frame', 'framework', 'Funzione', 'Funzionalità', 'Interfaccia grafica',
            'Hardware', 'Help-desk', 'Gerarchia', 'Hub', 'Implementazione', 'Infrastruttura', 'Iniziativa',
            'Installazione', 'Set di istruzioni', 'Interfaccia', 'Soluzione internet', 'Intranet', 'Conoscenza base',
            'Matrici', 'Matrice', 'Metodologia', 'Middleware', 'Migrazione', 'Modello', 'Moderazione', 'Monitoraggio',
            'Moratoria', 'Rete', 'Architettura aperta', 'Sistema aperto', 'Orchestrazione', 'Paradigma', 'Parallelismo',
            'Policy', 'Portale', 'Struttura di prezzo', 'Prodotto', 'Produttività', 'Progetto', 'Proiezione',
            'Protocollo', 'Servizio clienti', 'Software', 'Soluzione', 'Standardizzazione', 'Strategia', 'Struttura',
            'Successo', 'Sovrastruttura', 'Supporto', 'Sinergia', 'Task-force', 'Finestra temporale', 'Strumenti',
            'Utilizzazione', 'Sito web', 'Forza lavoro'
        ),
        (
            'adattiva', 'avanzata', 'migliorata', 'assimilata', 'automatizzata', 'bilanciata', 'centralizzata',
            'compatibile', 'configurabile', 'cross-platform', 'decentralizzata', 'digitalizzata', 'distribuita',
            'piccola', 'ergonomica', 'esclusiva', 'espansa', 'estesa', 'configurabile', 'fondamentale', 'orizzontale',
            'implementata', 'innovativa', 'integrata', 'intuitiva', 'inversa', 'gestita', 'obbligatoria', 'monitorata',
            'multi-canale', 'multi-laterale', 'open-source', 'operativa', 'ottimizzata', 'organica', 'persistente',
            'polarizzata', 'proattiva', 'programmabile', 'progressiva', 'reattiva', 'riallineata', 'ricontestualizzata',
            'ridotta', 'robusta', 'sicura', 'condivisibile', 'stand-alone', 'switchabile', 'sincronizzata', 'sinergica',
            'totale', 'universale', 'user-friendly', 'versatile', 'virtuale', 'visionaria'
        ),
        (
            '24 ore', '24/7', 'terza generazione', 'quarta generazione', 'quinta generazione', 'sesta generazione',
            'asimmetrica', 'asincrona', 'background', 'bi-direzionale', 'biforcata', 'bottom-line', 'coerente',
            'coesiva', 'composita', 'sensibile al contesto', 'basta sul contesto', 'basata sul contenuto', 'dedicata',
            'didattica', 'direzionale', 'discreta', 'dinamica', 'eco-centrica', 'esecutiva', 'esplicita', 'full-range',
            'globale', 'euristica', 'alto livello', 'olistica', 'omogenea', 'ibrida', 'impattante', 'incrementale',
            'intangibile', 'interattiva', 'intermediaria', 'locale', 'logistica', 'massimizzata', 'metodica',
            'mission-critical', 'mobile', 'modulare', 'motivazionale', 'multimedia', 'multi-tasking', 'nazionale',
            'neutrale', 'nextgeneration', 'non-volatile', 'object-oriented', 'ottima', 'ottimizzante', 'radicale',
            'real-time', 'reciproca', 'regionale', 'responsiva', 'scalabile', 'secondaria', 'stabile', 'statica',
            'sistematica', 'sistemica', 'tangibile', 'terziaria', 'uniforme', 'valore aggiunto'
        )
    )

    bsWords = (
        (
            'partnerships', 'comunità', 'ROI', 'soluzioni', 'e-services', 'nicchie', 'tecnologie', 'contenuti',
            'supply-chains', 'convergenze', 'relazioni', 'architetture', 'interfacce', 'mercati', 'e-commerce',
            'sistemi', 'modelli', 'schemi', 'reti', 'applicazioni', 'metriche', 'e-business', 'funzionalità',
            'esperienze', 'webservices', 'metodologie'
        ),
        (
            'implementate', 'utilizzo', 'integrate', 'ottimali', 'evolutive', 'abilitate', 'reinventate', 'aggregate',
            'migliorate', 'incentivate', 'monetizzate', 'sinergizzate', 'strategiche', 'deploy', 'marchi',
            'accrescitive', 'target', 'sintetizzate', 'spedizioni', 'massimizzate', 'innovazione', 'guida',
            'estensioni', 'generate', 'exploit', 'transizionali', 'matrici', 'ricontestualizzate'
        ),
        (
            'valore aggiunto', 'verticalizzate', 'proattive', 'forti', 'rivoluzionari', 'scalabili', 'innovativi',
            'intuitivi', 'strategici', 'e-business', 'mission-critical', '24/7', 'globali', 'B2B', 'B2C', 'granulari',
            'virtuali', 'virali', 'dinamiche', 'magnetiche', 'web', 'interattive', 'sexy', 'back-end', 'real-time',
            'efficienti', 'front-end', 'distributivi', 'estensibili', 'mondiali', 'open-source', 'cross-platform',
            'sinergiche', 'out-of-the-box', 'enterprise', 'integrate', 'di impatto', 'wireless', 'trasparenti',
            'next-generation', 'cutting-edge', 'visionari', 'plug-and-play', 'collaborative', 'olistiche', 'ricche'
        )
    )

    company_suffixes = ('SPA', 'e figli', 'Group', 's.r.l.')

    def catch_phrase(self):
        """
        :example 'Robust full-range hub'
        """
        result = []
        for word_list in self.catch_phrase_words:
            result.append(self.random_element(word_list))

        return " ".join(result)

    def bs(self):
        """
        :example 'integrate extensible convergence'
        """
        result = []
        for word_list in self.bsWords:
            result.append(self.random_element(word_list))

        return " ".join(result)
########NEW FILE########
__FILENAME__ = person
# coding=utf-8
from __future__ import unicode_literals
from ..person import Provider as PersonProvider


class Provider(PersonProvider):
    formats = (
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{prefix}} {{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{prefix}} {{first_name}} {{last_name}}'
    )

    first_names = (
        'Aaron', 'Akira', 'Alberto', 'Alessandro', 'Alighieri', 'Amedeo', 'Amos', 'Anselmo', 'Antonino', 'Arcibaldo',
        'Armando', 'Artes',
        'Audenico', 'Ausonio', 'Bacchisio', 'Battista', 'Bernardo', 'Boris', 'Caio', 'Carlo', 'Cecco', 'Cirino',
        'Cleros', 'Costantino',
        'Damiano', 'Danny', 'Davide', 'Demian', 'Dimitri', 'Domingo', 'Dylan', 'Edilio', 'Egidio', 'Elio', 'Emanuel',
        'Enrico', 'Ercole',
        'Ermes', 'Ethan', 'Eusebio', 'Evangelista', 'Fabiano', 'Ferdinando', 'Fiorentino', 'Flavio', 'Fulvio',
        'Gabriele', 'Gastone', 'Germano',
        'Giacinto', 'Gianantonio', 'Gianleonardo', 'Gianmarco', 'Gianriccardo', 'Gioacchino', 'Giordano', 'Giuliano',
        'Graziano', 'Guido', 'Harry',
        'Iacopo', 'Ilario', 'Ione', 'Italo', 'Jack', 'Jari', 'Joey', 'Joseph', 'Kai', 'Kociss', 'Laerte', 'Lauro',
        'Leonardo', 'Liborio', 'Lorenzo',
        'Ludovico', 'Maggiore', 'Manuele', 'Mariano', 'Marvin', 'Matteo', 'Mauro', 'Michael', 'Mirco', 'Modesto',
        'Muzio', 'Nabil', 'Nathan',
        'Nick', 'Noah', 'Odino', 'Olo', 'Oreste', 'Osea', 'Pablo', 'Patrizio', 'Piererminio', 'Pierfrancesco',
        'Piersilvio', 'Priamo', 'Quarto',
        'Quirino', 'Radames', 'Raniero', 'Renato', 'Rocco', 'Romeo', 'Rosalino', 'Rudy', 'Sabatino', 'Samuel', 'Santo',
        'Sebastian', 'Serse',
        'Silvano', 'Sirio', 'Tancredi', 'Terzo', 'Timoteo', 'Tolomeo', 'Trevis', 'Ubaldo', 'Ulrico', 'Valdo', 'Neri',
        'Vinicio', 'Walter', 'Xavier', 'Yago', 'Zaccaria', 'Abramo', 'Adriano', 'Alan', 'Albino', 'Alessio',
        'Alighiero',
        'Amerigo', 'Anastasio', 'Antimo', 'Antonio', 'Arduino', 'Aroldo', 'Arturo', 'Augusto', 'Avide', 'Baldassarre',
        'Bettino',
        'Bortolo', 'Caligola', 'Carmelo', 'Celeste', 'Ciro', 'Costanzo', 'Dante', 'Danthon', 'Davis', 'Demis', 'Dindo',
        'Domiziano', 'Edipo', 'Egisto', 'Eliziario', 'Emidio', 'Enzo', 'Eriberto', 'Erminio', 'Ettore', 'Eustachio',
        'Fabio', 'Fernando',
        'Fiorenzo', 'Folco', 'Furio', 'Gaetano', 'Gavino', 'Gerlando', 'Giacobbe', 'Giancarlo', 'Gianmaria', 'Giobbe',
        'Giorgio', 'Giulio',
        'Gregorio', 'Hector', 'Ian', 'Ippolito', 'Ivano', 'Jacopo', 'Jarno', 'Joannes', 'Joshua', 'Karim', 'Kris',
        'Lamberto',
        'Lazzaro', 'Leone', 'Lino', 'Loris', 'Luigi', 'Manfredi', 'Marco', 'Marino', 'Marzio', 'Mattia', 'Max',
        'Michele', 'Mirko', 'Moreno',
        'Nadir', 'Nazzareno', 'Nestore', 'Nico', 'Noel', 'Odone', 'Omar', 'Orfeo', 'Osvaldo', 'Pacifico', 'Pericle',
        'Pietro', 'Primo',
        'Quasimodo', 'Radio', 'Raoul', 'Renzo', 'Rodolfo', 'Romolo', 'Rosolino', 'Rufo', 'Sabino', 'Sandro', 'Sasha',
        'Secondo', 'Sesto',
        'Silverio', 'Siro', 'Tazio', 'Teseo', 'Timothy', 'Tommaso', 'Tristano', 'Umberto', 'Ariel', 'Artemide', 'Assia',
        'Azue', 'Benedetta',
        'Bibiana', 'Brigitta', 'Carmela', 'Cassiopea', 'Cesidia', 'Cira', 'Clea', 'Cleopatra', 'Clodovea', 'Concetta',
        'Cosetta', 'Cristyn',
        'Damiana', 'Danuta', 'Deborah', 'Demi', 'Diamante', 'Diana', 'Donatella', 'Doriana', 'Edvige', 'Elda', 'Elga',
        'Elsa', 'Emilia', 'Enrica',
        'Erminia', 'Eufemia', 'Evita', 'Fatima', 'Felicia', 'Filomena', 'Flaviana', 'Fortunata', 'Gelsomina',
        'Genziana', 'Giacinta', 'Gilda',
        'Giovanna', 'Giulietta', 'Grazia', 'Guendalina', 'Helga', 'Ileana', 'Ingrid', 'Irene', 'Isabel', 'Isira',
        'Ivonne', 'Jelena', 'Jole',
        'Claudia', 'Kayla', 'Kristel', 'Laura', 'Lucia', 'Lia', 'Lidia', 'Lisa', 'Loredana', 'Loretta', 'Luce',
        'Lucrezia', 'Luna', 'Maika',
        'Marcella', 'Maria', 'Mariagiulia', 'Marianita', 'Mariapia', 'Marieva', 'Marina', 'Maristella', 'Maruska',
        'Matilde', 'Mecren',
        'Mercedes', 'Mietta', 'Miriana', 'Miriam', 'Monia', 'Morgana', 'Naomi', 'Nayade', 'Nicoletta', 'Ninfa', 'Noemi',
        'Nunzia', 'Olimpia',
        'Oretta', 'Ortensia', 'Penelope', 'Piccarda', 'Prisca', 'Rebecca', 'Rita', 'Rosalba', 'Rosaria', 'Rosita',
        'Ruth', 'Samira',
        'Sarita', 'Selvaggia', 'Shaira', 'Sibilla', 'Soriana', 'Sue ellen', 'Thea', 'Tosca', 'Ursula', 'Vania', 'Vera',
        'Vienna', 'Violante', 'Vitalba', 'Zelida'
    )

    last_names = (
        'Rossi', 'Russo', 'Ferrari', 'Esposito', 'Bianchi', 'Romano', 'Colombo', 'Ricci', 'Marino', 'Greco', 'Bruno',
        'Gallo', 'Conti',
        'De luca', 'Mancini', 'Costa', 'Giordano', 'Rizzo', 'Lombardi', 'Moretti', 'Barbieri', 'Fontana', 'Santoro',
        'Mariani',
        'Rinaldi', 'Caruso', 'Ferrara', 'Galli', 'Martini', 'Leone', 'Longo', 'Gentile', 'Martinelli', 'Vitale',
        'Lombardo', 'Serra',
        'Coppola', 'De Santis', 'D\'angelo', 'Marchetti', 'Parisi', 'Villa', 'Conte', 'Ferraro', 'Ferri', 'Fabbri',
        'Bianco',
        'Marini', 'Grasso', 'Valentini', 'Messina', 'Sala', 'De Angelis', 'Gatti', 'Pellegrini', 'Palumbo', 'Sanna',
        'Farina',
        'Rizzi', 'Monti', 'Cattaneo', 'Morelli', 'Amato', 'Silvestri', 'Mazza', 'Testa', 'Grassi', 'Pellegrino',
        'Carbone',
        'Giuliani', 'Benedetti', 'Barone', 'Rossetti', 'Caputo', 'Montanari', 'Guerra', 'Palmieri', 'Bernardi',
        'Martino', 'Fiore',
        'De rosa', 'Ferretti', 'Bellini', 'Basile', 'Riva', 'Donati', 'Piras', 'Vitali', 'Battaglia', 'Sartori', 'Neri',
        'Costantini',
        'Milani', 'Pagano', 'Ruggiero', 'Sorrentino', 'D\'amico', 'Orlando', 'Damico', 'Negri'
    )

    prefixes = ('Sig.', 'Dott.', 'Sig.ra')

    @classmethod
    def prefix(cls):
        return cls.random_element(cls.prefixes)

########NEW FILE########
__FILENAME__ = phone_number
from __future__ import unicode_literals
from ..phone_number import Provider as PhoneNumberProvider


class Provider(PhoneNumberProvider):
    formats = (
        '+## ### ## ## ####',
        '+## ## #######',
        '+## ## ########',
        '+## ### #######',
        '+## ### ########',
        '+## #### #######',
        '+## #### ########'
    )
########NEW FILE########
__FILENAME__ = job
from . import BaseProvider
from .. import Generator


class Provider(BaseProvider):
	jobs=["Academic librarian",
"Accommodation manager",
"Accountant, chartered",
"Accountant, chartered certified",
"Accountant, chartered management",
"Accountant, chartered public finance",
"Accounting technician",
"Actor",
"Actuary",
"Acupuncturist",
"Administrator",
"Administrator, arts",
"Administrator, charities/voluntary organisations",
"Administrator, Civil Service",
"Administrator, education",
"Administrator, local government",
"Administrator, sports",
"Adult guidance worker",
"Adult nurse",
"Advertising account executive",
"Advertising account planner",
"Advertising art director",
"Advertising copywriter",
"Advice worker",
"Aeronautical engineer",
"Agricultural consultant",
"Agricultural engineer",
"Aid worker",
"Air broker",
"Air cabin crew",
"Air traffic controller",
"Airline pilot",
"Ambulance person",
"Amenity horticulturist",
"Analytical chemist",
"Animal nutritionist",
"Animal technologist",
"Animator",
"Applications developer",
"Arboriculturist",
"Archaeologist",
"Architect",
"Architectural technologist",
"Archivist",
"Armed forces logistics/support/administrative officer",
"Armed forces operational officer",
"Armed forces technical officer",
"Armed forces training and education officer",
"Art gallery manager",
"Art therapist",
"Artist",
"Arts administrator",
"Arts development officer",
"Astronomer",
"Audiological scientist",
"Automotive engineer",
"Banker",
"Barrister",
"Barrister's clerk",
"Best boy",
"Biochemist, clinical",
"Biomedical engineer",
"Biomedical scientist",
"Bonds trader",
"Bookseller",
"Brewing technologist",
"Broadcast engineer",
"Broadcast journalist",
"Broadcast presenter",
"Building control surveyor",
"Building services engineer",
"Building surveyor",
"Buyer, industrial",
"Buyer, retail",
"Cabin crew",
"Call centre manager",
"Camera operator",
"Careers adviser",
"Careers information officer",
"Cartographer",
"Catering manager",
"Ceramics designer",
"Charity fundraiser",
"Charity officer",
"Chartered accountant",
"Chartered certified accountant",
"Chartered legal executive (England and Wales)",
"Chartered loss adjuster",
"Chartered management accountant",
"Chartered public finance accountant",
"Chemical engineer",
"Chemist, analytical",
"Child psychotherapist",
"Chiropodist",
"Chiropractor",
"Civil engineer, consulting",
"Civil engineer, contracting",
"Civil Service administrator",
"Civil Service fast streamer",
"Claims inspector/assessor",
"Clinical biochemist",
"Clinical cytogeneticist",
"Clinical embryologist",
"Clinical molecular geneticist",
"Clinical psychologist",
"Clinical research associate",
"Clinical scientist, histocompatibility and immunogenetics",
"Clothing/textile technologist",
"Colour technologist",
"Commercial art gallery manager",
"Commercial horticulturist",
"Commercial/residential surveyor",
"Commissioning editor",
"Communications engineer",
"Community arts worker",
"Community development worker",
"Community education officer",
"Community pharmacist",
"Company secretary",
"Computer games developer",
"Conference centre manager",
"Conservation officer, historic buildings",
"Conservation officer, nature",
"Conservator, furniture",
"Conservator, museum/gallery",
"Consulting civil engineer",
"Contracting civil engineer",
"Control and instrumentation engineer",
"Copy",
"Copywriter, advertising",
"Corporate investment banker",
"Corporate treasurer",
"Counselling psychologist",
"Counsellor",
"Curator",
"Customer service manager",
"Cytogeneticist",
"Dance movement psychotherapist",
"Dancer",
"Data processing manager",
"Database administrator",
"Dealer",
"Dentist",
"Designer, blown glass/stained glass",
"Designer, ceramics/pottery",
"Designer, exhibition/display",
"Designer, fashion/clothing",
"Designer, furniture",
"Designer, graphic",
"Designer, industrial/product",
"Designer, interior/spatial",
"Designer, jewellery",
"Designer, multimedia",
"Designer, television/film set",
"Designer, textile",
"Development worker, community",
"Development worker, international aid",
"Diagnostic radiographer",
"Dietitian",
"Diplomatic Services operational officer",
"Dispensing optician",
"Doctor, general practice",
"Doctor, hospital",
"Dramatherapist",
"Drilling engineer",
"Early years teacher",
"Ecologist",
"Economist",
"Editor, commissioning",
"Editor, film/video",
"Editor, magazine features",
"Editorial assistant",
"Education administrator",
"Education officer, community",
"Education officer, environmental",
"Education officer, museum",
"Educational psychologist",
"Electrical engineer",
"Electronics engineer",
"Embryologist, clinical",
"Emergency planning/management officer",
"Energy engineer",
"Energy manager",
"Engineer, aeronautical",
"Engineer, agricultural",
"Engineer, automotive",
"Engineer, biomedical",
"Engineer, broadcasting (operations)",
"Engineer, building services",
"Engineer, chemical",
"Engineer, civil (consulting)",
"Engineer, civil (contracting)",
"Engineer, communications",
"Engineer, control and instrumentation",
"Engineer, drilling",
"Engineer, electrical",
"Engineer, electronics",
"Engineer, energy",
"Engineer, land",
"Engineer, maintenance",
"Engineer, maintenance (IT)",
"Engineer, manufacturing",
"Engineer, manufacturing systems",
"Engineer, materials",
"Engineer, mining",
"Engineer, petroleum",
"Engineer, production",
"Engineer, site",
"Engineer, structural",
"Engineer, technical sales",
"Engineer, water",
"Engineering geologist",
"English as a foreign language teacher",
"English as a second language teacher",
"Environmental consultant",
"Environmental education officer",
"Environmental health practitioner",
"Environmental manager",
"Equality and diversity officer",
"Equities trader",
"Ergonomist",
"Estate agent",
"Estate manager/land agent",
"Event organiser",
"Exercise physiologist",
"Exhibition designer",
"Exhibitions officer, museum/gallery",
"Facilities manager",
"Farm manager",
"Fashion designer",
"Fast food restaurant manager",
"Field seismologist",
"Field trials officer",
"Film/video editor",
"Financial adviser",
"Financial controller",
"Financial manager",
"Financial planner",
"Financial risk analyst",
"Financial trader",
"Fine artist",
"Firefighter",
"Fish farm manager",
"Fisheries officer",
"Fitness centre manager",
"Food technologist",
"Forensic psychologist",
"Forensic scientist",
"Forest/woodland manager",
"Freight forwarder",
"Furniture conservator/restorer",
"Furniture designer",
"Further education lecturer",
"Futures trader",
"Gaffer",
"Games developer",
"Garment/textile technologist",
"General practice doctor",
"Geneticist, molecular",
"Geochemist",
"Geographical information systems officer",
"Geologist, engineering",
"Geologist, wellsite",
"Geophysical data processor",
"Geophysicist/field seismologist",
"Geoscientist",
"Glass blower/designer",
"Government social research officer",
"Graphic designer",
"Haematologist",
"Health and safety adviser",
"Health and safety inspector",
"Health physicist",
"Health promotion specialist",
"Health service manager",
"Health visitor",
"Herbalist",
"Heritage manager",
"Higher education careers adviser",
"Higher education lecturer",
"Historic buildings inspector/conservation officer",
"Holiday representative",
"Homeopath",
"Horticultural consultant",
"Horticultural therapist",
"Horticulturist, amenity",
"Horticulturist, commercial",
"Hospital doctor",
"Hospital pharmacist",
"Hotel manager",
"Housing manager/officer",
"Human resources officer",
"Hydrogeologist",
"Hydrographic surveyor",
"Hydrologist",
"Illustrator",
"Immigration officer",
"Immunologist",
"Industrial buyer",
"Industrial/product designer",
"Information officer",
"Information systems manager",
"Insurance account manager",
"Insurance broker",
"Insurance claims handler",
"Insurance risk surveyor",
"Insurance underwriter",
"Intelligence analyst",
"Interior and spatial designer",
"International aid/development worker",
"Interpreter",
"Investment analyst",
"Investment banker, corporate",
"Investment banker, operational",
"IT consultant",
"IT sales professional",
"IT technical support officer",
"IT trainer",
"Jewellery designer",
"Journalist, broadcasting",
"Journalist, magazine",
"Journalist, newspaper",
"Land",
"Land/geomatics surveyor",
"Landscape architect",
"Lawyer",
"Lawyer",
"Learning disability nurse",
"Learning mentor",
"Lecturer, further education",
"Lecturer, higher education",
"Legal executive",
"Legal secretary",
"Leisure centre manager",
"Lexicographer",
"Librarian, academic",
"Librarian, public",
"Licensed conveyancer",
"Lighting technician, broadcasting/film/video",
"Lobbyist",
"Local government officer",
"Location manager",
"Logistics and distribution manager",
"Loss adjuster, chartered",
"Magazine features editor",
"Magazine journalist",
"Maintenance engineer",
"Make",
"Management consultant",
"Manufacturing engineer",
"Manufacturing systems engineer",
"Marine scientist",
"Market researcher",
"Marketing executive",
"Materials engineer",
"Mechanical engineer",
"Media buyer",
"Media planner",
"Medical illustrator",
"Medical laboratory scientific officer",
"Medical physicist",
"Medical sales representative",
"Medical secretary",
"Medical technical officer",
"Mental health nurse",
"Merchandiser, retail",
"Merchant navy officer",
"Metallurgist",
"Meteorologist",
"Microbiologist",
"Midwife",
"Minerals surveyor",
"Mining engineer",
"Mudlogger",
"Multimedia programmer",
"Multimedia specialist",
"Museum education officer",
"Museum/gallery conservator",
"Museum/gallery curator",
"Museum/gallery exhibitions officer",
"Music therapist",
"Music tutor",
"Musician",
"Nature conservation officer",
"Naval architect",
"Network engineer",
"Newspaper journalist",
"Nurse, adult",
"Nurse, children's",
"Nurse, learning disability",
"Nurse, mental health",
"Nutritional therapist",
"Occupational hygienist",
"Occupational psychologist",
"Occupational therapist",
"Oceanographer",
"Office manager",
"Oncologist",
"Operational investment banker",
"Operational researcher",
"Operations geologist",
"Ophthalmologist",
"Optician, dispensing",
"Optometrist",
"Orthoptist",
"Osteopath",
"Outdoor activities/education manager",
"Paediatric nurse",
"Paramedic",
"Passenger transport manager",
"Patent attorney",
"Patent examiner",
"Pathologist",
"Pension scheme manager",
"Pensions consultant",
"Personal assistant",
"Personnel officer",
"Petroleum engineer",
"Pharmacist, community",
"Pharmacist, hospital",
"Pharmacologist",
"Photographer",
"Physicist, medical",
"Physiological scientist",
"Physiotherapist",
"Phytotherapist",
"Pilot, airline",
"Planning and development surveyor",
"Plant breeder/geneticist",
"Podiatrist",
"Police officer",
"Politician's assistant",
"Presenter, broadcasting",
"Press photographer",
"Press sub",
"Primary school teacher",
"Print production planner",
"Printmaker",
"Prison officer",
"Private music teacher",
"Probation officer",
"Producer, radio",
"Producer, television/film/video",
"Product designer",
"Product/process development scientist",
"Production assistant, radio",
"Production assistant, television",
"Production designer, theatre/television/film",
"Production engineer",
"Production manager",
"Programme researcher, broadcasting/film/video",
"Programmer, applications",
"Programmer, multimedia",
"Programmer, systems",
"Proofreader",
"Psychiatric nurse",
"Psychiatrist",
"Psychologist, clinical",
"Psychologist, counselling",
"Psychologist, educational",
"Psychologist, forensic",
"Psychologist, occupational",
"Psychologist, prison and probation services",
"Psychologist, sport and exercise",
"Psychotherapist",
"Psychotherapist, child",
"Psychotherapist, dance movement",
"Public affairs consultant",
"Public house manager",
"Public librarian",
"Public relations account executive",
"Public relations officer",
"Publishing copy",
"Publishing rights manager",
"Purchasing manager",
"Quality manager",
"Quantity surveyor",
"Quarry manager",
"Race relations officer",
"Radiation protection practitioner",
"Radio broadcast assistant",
"Radio producer",
"Radiographer, diagnostic",
"Radiographer, therapeutic",
"Ranger/warden",
"Records manager",
"Recruitment consultant",
"Recycling officer",
"Regulatory affairs officer",
"Research officer, government",
"Research officer, political party",
"Research officer, trade union",
"Research scientist (life sciences)",
"Research scientist (maths)",
"Research scientist (medical)",
"Research scientist (physical sciences)",
"Restaurant manager",
"Restaurant manager, fast food",
"Retail banker",
"Retail buyer",
"Retail manager",
"Retail merchandiser",
"Risk analyst",
"Risk manager",
"Runner, broadcasting/film/video",
"Rural practice surveyor",
"Sales executive",
"Sales professional, IT",
"Sales promotion account executive",
"Science writer",
"Scientific laboratory technician",
"Scientist, audiological",
"Scientist, biomedical",
"Scientist, clinical (histocompatibility and immunogenetics)",
"Scientist, forensic",
"Scientist, marine",
"Scientist, physiological",
"Scientist, product/process development",
"Scientist, research (life sciences)",
"Scientist, research (maths)",
"Scientist, research (medical)",
"Scientist, research (physical sciences)",
"Scientist, water quality",
"Secondary school teacher",
"Secretary/administrator",
"Secretary, company",
"Seismic interpreter",
"Senior tax professional/tax inspector",
"Set designer",
"Ship broker",
"Site engineer",
"Social research officer, government",
"Social researcher",
"Social worker",
"Software engineer",
"Soil scientist",
"Solicitor",
"Solicitor, Scotland",
"Sound technician, broadcasting/film/video",
"Special educational needs teacher",
"Special effects artist",
"Speech and language therapist",
"Sport and exercise psychologist",
"Sports administrator",
"Sports coach",
"Sports development officer",
"Sports therapist",
"Stage manager",
"Statistician",
"Structural engineer",
"Sub",
"Surgeon",
"Surveyor, building",
"Surveyor, building control",
"Surveyor, commercial/residential",
"Surveyor, hydrographic",
"Surveyor, insurance",
"Surveyor, land/geomatics",
"Surveyor, minerals",
"Surveyor, mining",
"Surveyor, planning and development",
"Surveyor, quantity",
"Surveyor, rural practice",
"Systems analyst",
"Systems developer",
"Tax adviser",
"Tax inspector",
"Teacher, adult education",
"Teacher, early years/pre",
"Teacher, English as a foreign language",
"Teacher, music",
"Teacher, primary school",
"Teacher, secondary school",
"Teacher, special educational needs",
"Teaching laboratory technician",
"Technical author",
"Technical brewer",
"Technical sales engineer",
"TEFL teacher",
"Telecommunications researcher",
"Television camera operator",
"Television floor manager",
"Television production assistant",
"Television/film/video producer",
"Textile designer",
"Theatre director",
"Theatre manager",
"Theatre stage manager",
"Theme park manager",
"Therapeutic radiographer",
"Therapist, art",
"Therapist, drama",
"Therapist, horticultural",
"Therapist, music",
"Therapist, nutritional",
"Therapist, occupational",
"Therapist, speech and language",
"Therapist, sports",
"Tour manager",
"Tourism officer",
"Tourist information centre manager",
"Town planner",
"Toxicologist",
"Trade mark attorney",
"Trade union research officer",
"Trading standards officer",
"Training and development officer",
"Translator",
"Transport planner",
"Travel agency manager",
"Tree surgeon",
"Veterinary surgeon",
"Video editor",
"Visual merchandiser",
"Volunteer coordinator",
"Warden/ranger",
"Warehouse manager",
"Waste management officer",
"Water engineer",
"Water quality scientist",
"Web designer",
"Wellsite geologist",
"Writer",
"Youth worker"]
	@classmethod
	def job(cls):
		return cls.random_element(cls.jobs)

########NEW FILE########
__FILENAME__ = address
# coding=utf-8

from __future__ import unicode_literals
from ..address import Provider as AddressProvider

class Provider(AddressProvider):
    city_suffixes = ('마을', '시', '군', '구')
    building_number_formats = ('#', '####', '###')
    street_suffixes = ('동', '로', '거리')
    postcode_formats = ('###-###', '###-###')
    states = (
        '서울특별시', '부산광역시', '대구광역시', '인천광역시', '광주광역시', '대전광역시', '울산광역시',
        '세종특별자치시', '경기도', '강원도', '충청북도', '충청남도', '전라북도', '전라남도', '경상북도',
        '경상남도', '제주특별자치도')
    countries = ('가나', '가봉', '가이아나', '감비아', '과테말라', '그레나다', '그리스', '기니', '기니비사우',
                 '나미비아', '나우루', '나이지리아', '남수단', '남아프리카 공화국', '네덜란드 왕국', '네팔',
                 '노르웨이', '뉴질랜드', '니제르', '니카라과', '대한민국', '덴마크', '도미니카 공화국',
                 '도미니카 연방', '독일', '동티모르', '라오스', '라이베리아', '라트비아', '러시아', '레바논',
                 '레소토', '루마니아', '룩셈부르크', '르완다', '리비아', '리투아니아', '리히텐슈타인',
                 '마다가스카르', '마셜 제도', '마케도니아 공화국', '말라위', '말레이시아', '말리', '멕시코',
                 '모나코', '모로코', '모리셔스', '모리타니', '모잠비크', '몬테네그로', '몰도바', '몰디브',
                 '몰타', '몽골', '미국', '미얀마', '미크로네시아 연방', '바누아투', '바레인', '바베이도스',
                 '바하마', '방글라데시', '베냉', '베네수엘라', '베트남', '벨기에', '벨라루스', '벨리즈',
                 '보스니아 헤르체고비나', '보츠와나', '볼리비아', '부룬디', '부르키나파소', '부탄', '불가리아',
                 '브라질', '브루나이', '사모아', '사우디아라비아', '산마리노', '상투메 프린시페', '세네갈',
                 '세르비아', '세이셸', '세인트루시아', '세인트빈센트 그레나딘', '세인트키츠 네비스',
                 '소말리아', '솔로몬 제도', '수단', '수리남', '스리랑카', '스와질란드', '스웨덴', '스위스',
                 '스페인', '슬로바키아', '슬로베니아', '시리아', '시에라리온 공화국', '싱가포르',
                 '아랍에미리트', '아르메니아', '아르헨티나', '아이슬란드', '아이티', '아일랜드',
                 '아제르바이잔', '아프가니스탄', '안도라', '알바니아', '알제리', '앙골라', '앤티가 바부다',
                 '에리트레아', '에스토니아', '에콰도르', '에티오피아', '엘살바도르', '영국', '예멘', '오만',
                 '오스트레일리아', '오스트리아', '온두라스', '요르단', '우간다', '우루과이', '우즈베키스탄',
                 '우크라이나', '이라크', '이란', '이스라엘', '이집트', '이탈리아', '인도네시아', '일본',
                 '자메이카', '잠비아', '적도 기니', '조선민주주의인민공화국', '조지아', '중앙아프리카 공화국',
                 '중화인민공화국', '지부티', '짐바브웨', '차드', '체코', '칠레', '카메룬', '카보베르데',
                 '카자흐스탄', '카타르', '캄보디아', '캐나다', '케냐', '코모로', '코스타리카', '코트디부아르',
                 '콜롬비아', '콩고 공화국', '콩고 민주 공화국', '쿠바', '쿠웨이트', '크로아티아',
                 '키르기스스탄', '키리바시', '키프로스', '타이', '타지키스탄', '탄자니아', '터키',
                 '토고', '통가', '투르크메니스탄', '투발루', '튀니지', '트리니다드 토바고', '파나마',
                 '파라과이', '파키스탄', '파푸아 뉴기니', '팔라우', '페루', '포르투갈', '폴란드', '프랑스',
                 '피지', '핀란드', '필리핀', '헝가리'
    )

    city_formats = (
        '{{last_name}}{{last_name}}{{city_suffix}}',
        '{{first_name}}{{last_name}}{{last_name}}{{city_suffix}}'
    )
    street_name_formats = (
        '{{last_name}}{{last_name}}{{last_name}}{{city_suffix}}',
        '{{last_name}}{{last_name}}{{last_name}}{{street_suffix}}',
        '{{first_name}}{{last_name}}{{last_name}}{{street_suffix}}',
        '{{last_name}}{{last_name}}{{street_suffix}}'
    )
    street_address_formats = (
        '{{street_name}} {{building_number}}',
        '{{street_name}} {{building_number}} {{secondary_address}}'
    )
    address_formats = (
        "{{state}} {{city}} {{street_address}} ({{postcode}})",
        "{{state}} {{city}} \n {{street_address}} {{postcode}}"
    )
    secondary_address_formats = ('###동 ###호', '#-#', '###', '###-#', '##-#')

    @classmethod
    def state(cls):
        return cls.random_element(cls.states)

    @classmethod
    def secondary_address(cls):
        return cls.numerify(cls.random_element(cls.secondary_address_formats))
########NEW FILE########
__FILENAME__ = company
# coding=utf-8

from __future__ import unicode_literals
from ..company import Provider as CompanyProvider

class Provider(CompanyProvider):
    formats = (
        '{{company_suffix}} {{last_name}}{{last_name}}{{last_name}}',
        '{{company_suffix}} {{last_name}}',
        '{{last_name}}{{last_name}}',
        '{{last_name}}{{last_name}}{{last_name}}'
    )

    catch_phrase_words = (
        (
            '적응된', '숙련된', '자동화된', '안정적인', '비즈니스 중점적', '중심이', '복제된', '효율적인',
            '설정 가능한', '크로스 그룹', '크로스 플랫폼', '사용자 중심의', '조절 가능한', '디지털화된', '출판된',
            '다양한', '낮은', '강화된', '인체 공학적인', '특별한', '확장된', '확대된', '1:1', '최전방',
            '완벽히 설정된', '함수 기반의', '미래가 보장된', '관리된', '모니터링되는', '멀티 채널', '다중 주파수',
            '멀티 레이어', '조직화된', '객체 기반의', '공개 아키텍쳐', '오픈소스', '최적화된', '선택적', '유기농',
            '수익에 중점을 둔', '프로그래밍 가능한', '진보적인', '공개 키', '품질 중심의', '반동적인',
            '재정렬', '줄어든', '리버스 엔지니어링된', '올바른 사이즈의', '강력한', '원활한', '안전한',
            '자가 이용 가능한', '공유 가능한', '독보적인', '무결점의', '변경 가능한', '동기화', '융합력있는',
            '융합된', '단체 기반의', '총', '트리플 버퍼', '다용도', '더 커진', '업그레이드 가능한', '더 작아진',
            '유저 친화적', '가상', '비전 있는'
        ),
        (
            '24시간', '24/7', '3세대', '4세대', '5세대', '6세대', '작동',
            '분석중인', '비대칭', '비동기', '고도 기반', '백그라운드', '주파수 탐지 가능', '요약',
            '클라이언트 단', '클라이언트-서버', '밀착', '결합된', '합성물', '상황에 맞는',
            '문맥 기반', '컨텐츠 기반', '헌신적', '교훈적', '방향', '분리된', '다이나믹', '환경 친화적',
            '실행', '취약점', '스며든', '수요 중심', '장거리', '글로벌', '그리드 가능', '휴리스틱',
            '고단계', '분리형', '인간자원', '하이브리드', '선구적', '로컬', '물류', '최대화',
            '결정', '휴대형', '모듈형', '멀티미디어', '다중 상태', '멀티 태스킹', '국가적', '범국가적',
            '중립형', '다음 세대', '객체 지향적', '필수', '최적화된', '근본적', '실시간', '역수', '지역적',
            '확장', '보조', '해답 기반', '안정적', '정적', '가치추가', '웹 사용 가능', '잘 모듈화된', '무관리',
            '무해한', '무관용'
        ),
        (
            '능력', '접근', '어댑터', '알고리즘', '연합', '분석', '어플리케이션', '접근',
            '아키텍쳐', '아카이브', '인공지능', '배열', '태도', '벤치마크', '예산 관리', '환경', '생산 능력',
            '도전', '회로', '융합', '컨셉', '축적', '우연성', '코어', '고객 만족', '데이터베이스',
            '정의', '에뮬레이션', '인코딩', '암호화', '엑스트라넷', '펌웨어', '유연성',
            '예보', '프레임', '프레임워크', '함수', '그래픽 인터페이스', '그룹웨어', 'GUI', '하드웨어',
            '안내 창구', '계층', '허브', '미디어 정보', '환경', '설치과정', '인터페이스', '인트라넷',
            '지식 기반', 'LAN', '미들웨어', '마이그레이션', '모델', '관리자', '모니터링', '공개 시스템', '패러다임',
            '정책', '포탈', '제품', '프로젝트', '프로토콜', '서비스 창구', '소프트웨어', '솔루션', '보안구역',
            '전략', '구조체', '성공', '지원', '시너지', '엔진', '표준', '시간화', '공구', '웹 사이트'
        )
    )

    bsWords = (
        (
            '다용도의', '통합된', '간소화된', '최적화된', '진화된', '변화된', '포용적인', '사용 가능한',
            '웅장한', '재평가된', '재발명된', '구조적인', '강화된', '장려하는', '변화무쌍한',
            '자율적인', '선구적인', '화폐화된', '전략적인', '발전하는', '합성', '배송', '혼합된', '최대화된',
            '벤치마킹된', '신속한', '깨끗한', '시각적인', '창의적인', '큰', '폭발하는', '확장된',
            '엔지니어', '혁명적인', '제작된', '취약점의', '배열적인', '문화적인'
        ),
        (
            '온라인 쇼핑', '가치 상승', '선구적', '철벽', '혁명적', '가변', '창조적', '직감', '전략적',
            '전자 비즈니스', '끈끈한', '1:1', '24/7', '글로벌', 'B2B', 'B2C', '고운', '가상', '바이러스성',
            '다이나믹', '24/365', '고사양', '킬러', '자기장', '최첨단', '닷컴', '섹시', '백 엔드', '실시간',
            '효율적', '프론트 엔드', '무결점', '확장', '턴키', '세계급', '오픈 소스', '크로스 플랫폼',
            '크로스 미디어', '엔터프라이즈', '통합', '강렬한', '무선', '투명', '다음 세대', '날카로운',
            '창의적', '반투명', '유비쿼터스', '플러그 앤 플레이', '융합', '강력한', '강렬한', '부자'
        ),
        (
            '시너지', '패러다임', '마케팅', '파트너쉽', '인프라', '플랫폼', '채널', '커뮤니티', '솔루션',
            '전자 서비스', '포탈', '기술', '컨텐츠', '생산라인', '관계', '아키텍쳐', '인터페이스', '전자시장',
            '전자화폐', '시스템', '주파수', '모델', '어플리케이션', '사용자들', '스키마', '네트웍스', '앱',
            '매트릭스', '전자 비즈니스', '경험', '웹서비스', '방법론'
        )
    )

    company_suffixes = ('(주)', '주식회사', '(유)', '유한회사')

    def catch_phrase(self):
        """
        :example 'Robust full-range hub'
        """
        result = []
        for word_list in self.catch_phrase_words:
            result.append(self.random_element(word_list))

        return " ".join(result)

    def bs(self):
        """
        :example 'integrate extensible convergence'
        """
        result = []
        for word_list in self.bsWords:
            result.append(self.random_element(word_list))

        return " ".join(result)

########NEW FILE########
__FILENAME__ = person
# coding=utf-8

from __future__ import unicode_literals
from ..person import Provider as PersonProvider

class Provider(PersonProvider):
    formats = (
        '{{first_name}}{{last_name}}',
        '{{first_name}}{{last_name}}{{last_name}}'
    )

    first_names = (
        '김', '이', '최', '박', '정', '강', '조', '윤', '장', '임', '오', '한', '신', '서', '권', '황', '안',
        '송', '류', '홍', '전', '고', '문', '손', '양', '배', '조', '백', '허', '남', '심', '유', '노', '하',
        '전', '정', '곽', '성', '차', '유', '구', '우', '주', '임', '나', '신', '민', '진', '지', '엄', '원',
        '채', '천', '양', '공', '현', '방', '함', '염', '여', '추', '변', '도',' 석', '소', '선', '설', '방',
        '마', '길', '위', '연', '명', '기', '금', '왕',' 반', '옥', '육', '진', '인', '맹', '제', '탁', '모',
        '남궁', '어', '용', '편', '봉', '구', '예', '경', '사', '부', '황보', '가', '복', '계', '제갈', '사공',
        '선우', '팽', '견', '종', '승', '독고', '옹', '빙', '장', '추', '편', '아', '점', '흥', '낭', '해',
        '판', '초', '필', '궉', '근', '매', '동방', '호', '두', '미', '요', '야', '묵', '자', '만', '운',
        '환', '범', '창', '엽', '수', '애', '단', '순', '돈', '준', '묘', '담', '장곡', '어금', '강전', '삼',
        '저', '군', '교', '영', '후', '누', '소봉', '뇌', '망절', '원', '즙', '증'
    )

    last_names = (
        '재', '우', '지', '환', '현', '웅', '근', '철', '민', '정', '희', '성', '주', '다', '려', '빈', '영',
        '준', '진', '혁', '수', '대', '호', '향', '열', '순', '미', '연', '유', '리', '훈', '익', '혜', '은',
        '휘', '범', '두', '태', '황', '경', '통', '원', '하', '가', '람', '선', '관', '련', '보', '종', '소',
        '예', '석', '힘', '찬', '승', '상', '한', '별', '홍', '용', '아', '덕', '균', '의', '후', '구', '형',
        '규', '안', '강', '산', '명', '세', '효', '무', '협', '기', '억', '동', '완', '윤', '창', '도', '위',
        '엽', '온', '권', '병', '욱', '비', '화', '슬', '송', '광', '남', '인', '해', '양', '림', '란', '건',
        '솔', '금'
    )
########NEW FILE########
__FILENAME__ = phone_number
# coding=utf-8

from __future__ import unicode_literals
from ..phone_number import Provider as PhoneNumberProvider

class Provider(PhoneNumberProvider):
    formats = (
        '02-####-####',
        '031-###-####',
        '032-###-####',
        '033-###-####',
        '041-###-####',
        '042-###-####',
        '043-###-####',
        '044-###-####',
        '051-###-####',
        '052-###-####',
        '053-###-####',
        '054-###-####',
        '055-###-####',
        '061-###-####',
        '062-###-####',
        '063-###-####',
        '064-###-####',
        '010-####-####',
        '011-###-####',
        '016-###-####',
        '017-###-####',
        '018-###-####',
        '019-###-####',
        '070-####-####'
    )
########NEW FILE########
__FILENAME__ = lorem
from __future__ import unicode_literals
from . import BaseProvider


class Provider(BaseProvider):
    word_list = (
        'alias', 'consequatur', 'aut', 'perferendis', 'sit', 'voluptatem',
        'accusantium', 'doloremque', 'aperiam', 'eaque', 'ipsa', 'quae', 'ab',
        'illo', 'inventore', 'veritatis', 'et', 'quasi', 'architecto',
        'beatae', 'vitae', 'dicta', 'sunt', 'explicabo', 'aspernatur', 'aut',
        'odit', 'aut', 'fugit', 'sed', 'quia', 'consequuntur', 'magni',
        'dolores', 'eos', 'qui', 'ratione', 'voluptatem', 'sequi', 'nesciunt',
        'neque', 'dolorem', 'ipsum', 'quia', 'dolor', 'sit', 'amet',
        'consectetur', 'adipisci', 'velit', 'sed', 'quia', 'non', 'numquam',
        'eius', 'modi', 'tempora', 'incidunt', 'ut', 'labore', 'et', 'dolore',
        'magnam', 'aliquam', 'quaerat', 'voluptatem', 'ut', 'enim', 'ad',
        'minima', 'veniam', 'quis', 'nostrum', 'exercitationem', 'ullam',
        'corporis', 'nemo', 'enim', 'ipsam', 'voluptatem', 'quia', 'voluptas',
        'sit', 'suscipit', 'laboriosam', 'nisi', 'ut', 'aliquid', 'ex', 'ea',
        'commodi', 'consequatur', 'quis', 'autem', 'vel', 'eum', 'iure',
        'reprehenderit', 'qui', 'in', 'ea', 'voluptate', 'velit', 'esse',
        'quam', 'nihil', 'molestiae', 'et', 'iusto', 'odio', 'dignissimos',
        'ducimus', 'qui', 'blanditiis', 'praesentium', 'laudantium', 'totam',
        'rem', 'voluptatum', 'deleniti', 'atque', 'corrupti', 'quos',
        'dolores', 'et', 'quas', 'molestias', 'excepturi', 'sint',
        'occaecati', 'cupiditate', 'non', 'provident', 'sed', 'ut',
        'perspiciatis', 'unde', 'omnis', 'iste', 'natus', 'error',
        'similique', 'sunt', 'in', 'culpa', 'qui', 'officia', 'deserunt',
        'mollitia', 'animi', 'id', 'est', 'laborum', 'et', 'dolorum', 'fuga',
        'et', 'harum', 'quidem', 'rerum', 'facilis', 'est', 'et', 'expedita',
        'distinctio', 'nam', 'libero', 'tempore', 'cum', 'soluta', 'nobis',
        'est', 'eligendi', 'optio', 'cumque', 'nihil', 'impedit', 'quo',
        'porro', 'quisquam', 'est', 'qui', 'minus', 'id', 'quod', 'maxime',
        'placeat', 'facere', 'possimus', 'omnis', 'voluptas', 'assumenda',
        'est', 'omnis', 'dolor', 'repellendus', 'temporibus', 'autem',
        'quibusdam', 'et', 'aut', 'consequatur', 'vel', 'illum', 'qui',
        'dolorem', 'eum', 'fugiat', 'quo', 'voluptas', 'nulla', 'pariatur',
        'at', 'vero', 'eos', 'et', 'accusamus', 'officiis', 'debitis', 'aut',
        'rerum', 'necessitatibus', 'saepe', 'eveniet', 'ut', 'et',
        'voluptates', 'repudiandae', 'sint', 'et', 'molestiae', 'non',
        'recusandae', 'itaque', 'earum', 'rerum', 'hic', 'tenetur', 'a',
        'sapiente', 'delectus', 'ut', 'aut', 'reiciendis', 'voluptatibus',
        'maiores', 'doloribus', 'asperiores', 'repellat'
    )

    @classmethod
    def word(cls):
        """
        :example 'Lorem'
        """
        return cls.random_element(cls.word_list)

    @classmethod
    def words(cls, nb=3):
        """
        Generate an array of random words
        :example array('Lorem', 'ipsum', 'dolor')
        :param nb how many words to return
        """
        return [cls.word() for _ in range(0, nb)]

    @classmethod
    def sentence(cls, nb_words=6, variable_nb_words=True):
        """
        Generate a random sentence
        :example 'Lorem ipsum dolor sit amet.'
        :param nb_words around how many words the sentence should contain
        :param variable_nb_words set to false if you want exactly $nbWords returned,
            otherwise $nbWords may vary by +/-40% with a minimum of 1
        """
        if nb_words <= 0:
            return ''

        if variable_nb_words:
            nb_words = cls.randomize_nb_elements(nb_words)

        words = cls.words(nb_words)
        words[0] = words[0].title()

        return " ".join(words) + '.'

    @classmethod
    def sentences(cls, nb=3):
        """
        Generate an array of sentences
        :example array('Lorem ipsum dolor sit amet.', 'Consectetur adipisicing eli.')
        :param nb how many sentences to return
        :return list
        """
        return [cls.sentence() for _ in range(0, nb)]

    @classmethod
    def paragraph(cls, nb_sentences=3, variable_nb_sentences=True):
        """
        Generate a single paragraph
        :example 'Sapiente sunt omnis. Ut pariatur ad autem ducimus et. Voluptas rem voluptas sint modi dolorem amet.'
        :param nb_sentences around how many sentences the paragraph should contain
        :param variable_nb_sentences set to false if you want exactly $nbSentences returned,
            otherwise $nbSentences may vary by +/-40% with a minimum of 1
        :return string
        """
        if nb_sentences <= 0:
            return ''

        if variable_nb_sentences:
            nb_sentences = cls.randomize_nb_elements(nb_sentences)

        return " ".join(cls.sentences(nb_sentences))

    @classmethod
    def paragraphs(cls, nb=3):
        """
        Generate an array of paragraphs
        :example array($paragraph1, $paragraph2, $paragraph3)
        :param nb how many paragraphs to return
        :return array
        """
        return [cls.paragraph() for _ in range(0, nb)]

    @classmethod
    def text(cls, max_nb_chars=200):
        """
        Generate a text string.
        Depending on the $maxNbChars, returns a string made of words, sentences, or paragraphs.
        :example 'Sapiente sunt omnis. Ut pariatur ad autem ducimus et. Voluptas rem voluptas sint modi dolorem amet.'
        :param max_nb_chars Maximum number of characters the text should contain (minimum 5)
        :return string
        """
        text = []
        if max_nb_chars < 5:
            raise ValueError('text() can only generate text of at least 5 characters')

        if max_nb_chars < 25:
            # join words
            while not text:
                size = 0
                # determine how many words are needed to reach the $max_nb_chars once;
                while size < max_nb_chars:
                    word = (' ' if size else '') + cls.word()
                    text.append(word)
                    size += len(word)
                text.pop()
            text[0] = text[0][0].upper() + text[0][1:]
            last_index = len(text) - 1
            text[last_index] += '.'
        elif max_nb_chars < 100:
            # join sentences
            while not text:
                size = 0
                # determine how many sentences are needed to reach the $max_nb_chars once
                while size < max_nb_chars:
                    sentence = (' ' if size else '') + cls.sentence()
                    text.append(sentence)
                    size += len(sentence)
                text.pop()
        else:
            # join paragraphs
            while not text:
                size = 0
                # determine how many paragraphs are needed to reach the $max_nb_chars once
                while size < max_nb_chars:
                    paragraph = ('\n' if size else '') + cls.paragraph()
                    text.append(paragraph)
                    size += len(paragraph)
                text.pop()

        return "".join(text)

########NEW FILE########
__FILENAME__ = person
# -*- coding: utf-8 -*- 

from __future__ import unicode_literals
from ..person import Provider as PersonProvider

class Provider(PersonProvider):
    formats = (
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{last_name}}, {{first_name}}'
    )

    first_names = (
            'Tomas', 'Lukas', 'Mantas', 'Deividas', 'Arnas', 'Artūras',
            'Karolis', 'Dovydas', 'Dominykas', 'Darius', 'Edvinas', 'Jonas',
            'Martynas', 'Kajus', 'Donatas', 'Andrius', 'Matas', 'Rokas', 
            'Augustas', 'Danielius', 'Mindaugas', 'Paulius', 'Marius',
            'Armandas', 'Edgaras', 'Jokūbas', 'Nedas', 'Tadas', 'Nerijus',
            'Simonas', 'Vytautas', 'Artūras', 'Robertas', 'Eimantas', 'Arijus',
            'Nojus', 'Egidijus', 'Aurimas', 'Emilis', 'Laurynas', 'Edvardas',
            'Joris', 'Pijus', 'Erikas', 'Domas', 'Vilius', 'Evaldas', 'Justinas',
            'Aleksandras', 'Kristupas', 'Gabrielius', 'Benas', 'Gytis', 'Arminas',
            'Vakris', 'Tautvydas', 'Domantas', 'Justas', 'Markas', 'Antanas',
            'Arūnas', 'Ernestas', 'Aronas', 'Vaidas', 'Ąžuolas', 'Titas', 'Giedrius',
            'Ignas', 'Povilas', 'Saulius', 'Julius', 'Arvydas', 'Kęstutis', 'Rytis',
            'Aistis', 'Gediminas', 'Algirdas', 'Naglis', 'Irmantas', 'Rolandas',
            'Aivaras', 'Simas', 'Faustas', 'Ramūnas', 'Šarūnas', 'Gustas', 'Tajus',
            'Dainius', 'Arnoldas', 'Linas', 'Rojus', 'Adomas', 'Žygimantas',
            'Ričardas', 'Orestas', 'Kipras', 'Juozas', 'Audrius', 'Romualdas',
            'Petras', 'Eleonora', 'Raminta', 'Dovilė', 'Sandra', 'Dominyka', 'Ana',
            'Erika', 'Kristina', 'Gintarė', 'Rūta', 'Edita', 'Karina', 'Živilė',
            'Jolanta', 'Radvilė', 'Ramunė', 'Svetlana', 'Ugnė', 'Eglė', 'Viktorija',
            'Justina', 'Brigita', 'Rasa', 'Marija', 'Giedrė', 'Iveta', 'Sonata', 
            'Vitalija', 'Adrija', 'Goda', 'Paulina', 'Kornelija', 'Liepa', 'Vakarė',
            'Milda', 'Meda', 'Vaida', 'Izabelė', 'Jovita', 'Irma', 'Žemyna', 'Leila',
            'Rimantė', 'Mantė', 'Rytė', 'Perla', 'Greta', 'Monika', 'Ieva', 'Indrė',
            'Ema', 'Aurelija', 'Smiltė', 'Ingrida', 'Simona', 'Amelija', 'Sigita',
            'Olivija', 'Laurita', 'Jorūnė', 'Leticija', 'Vigilija', 'Medėja', 'Laura',
            'Agnė', 'Evelina', 'Kotryna', 'Lėja', 'Aušra', 'Neringa', 'Gerda',
            'Jurgita', 'Rusnė', 'Aušrinė', 'Rita', 'Elena', 'Ineta', 'Ligita',
            'Vasarė', 'Vėjūnė', 'Ignė', 'Gytė', 'Ariana', 'Arielė', 'Vytė', 'Eidvilė',
            'Karolina', 'Miglė', 'Viltė', 'Jolanta', 'Enrika', 'Aurėja', 'Vanesa',
            'Darija', 'Reda', 'Milana', 'Rugilė', 'Diana'
    )

    last_names = (
            'Kazlauskas', 'Jankauskas', 'Petrauskas', 'Pocius', 'Stankevičius',
            'Vsiliauskas', 'Žukauskas', 'Butkus', 'Paulauskas', 'Urbonas',
            'Kavaliauskas', 'Sakalauskas', 'Žukauskas', 'Akelis' ,'Ambrasas',
            'Kairys', 'Kalvaitis', 'Kalvelis', 'Kalvėnas', 'Kaupas', 'Kiška',
            'Gagys', 'Gailius', 'Gailys', 'Gaižauskas', 'Gaičiūnas', 'Galdikas',
            'Gintalas', 'Ginzburgas', 'Grinius', 'Gronskis', 'Nagys', 'Naujokas',
            'Narušis', 'Nausėda', 'Poška', 'Povilonis'
    )

########NEW FILE########
__FILENAME__ = phone_number
from __future__ import unicode_literals
from ..phone_number import Provider as PhoneNumberProvider


class Provider(PhoneNumberProvider):
    formats = (
        '+370 ########',
        '+(370) ########',
        '+370########'
    )

########NEW FILE########
__FILENAME__ = person
# -*- coding: utf-8 -*- 

from __future__ import unicode_literals
from ..person import Provider as PersonProvider

class Provider(PersonProvider):
    formats = (
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{last_name}}, {{first_name}}'
    )

    first_names = (
        'Ādams', 'Ādolfs', 'Agris', 'Aigars', 'Ainārs', 'Aivars', 'Alberts',
        'Aldis', 'Aleksandrs', 'Alfrēds', 'Andrejs', 'Andris', 'Andrešs', 'Ansis',
        'Antons', 'Armands', 'Arnis', 'Arnolds', 'Artis', 'Arturs', 'Artūrs', 'Arvīds',
        'Augusts', 'Bērends', 'Bērtulis', 'Brencis', 'Dainis', 'Daniels', 'Dāvis', 
        'Dzintars', 'Edgars', 'Edmunds', 'Eduards', 'Edvīns', 'Egils', 'Elmārs', 'Elvis',
        'Emīls', 'Ēriks', 'Ermanis', 'Ernests', 'Ēvalds', 'Fricis', 'Gatis', 'Gunārs',
        'Guntars', 'Guntis', 'Ģederts', 'Ģirts', 'Hanss', 'Harijs', 'Henriks', 'Hermanis',
        'Igors', 'Ilmārs', 'Imants', 'Indriķis', 'Ivars', 'Ivo', 'Jakobs', 'Janis', 'Jānis',
        'Jannis', 'Jāzeps', 'Jēkabs', 'Jēkaubs', 'Jezups', 'Johans', 'Jūlijs', 'Juris', 'Kārlis',
        'Kaspars', 'Konradus', 'Kristaps', 'Kristers', 'Krists', 'Krišjānis', 'Krišs', 'Laimonis',
        'Lauris', 'Leons', 'Macs', 'Mareks', 'Māris', 'Mārtiņš', 'Matīss', 'Mihels', 'Mikels',
        'Miķelis', 'Modris', 'Nikolajs', 'Niks', 'Normunds', 'Oļģerts', 'Oskars', 'Osvalds', 
        'Oto', 'Pauls', 'Pēteris', 'Raimonds', 'Raivis', 'Reinis', 'Ričards', 'Rihards', 'Roberts',
        'Rolands', 'Rūdolfs', 'Sandis', 'Staņislavs', 'Tenis', 'Teodors', 'Toms', 'Uldis', 'Valdis',
        'Viesturs', 'Viktors', 'Vilis', 'Vilnis', 'Viļums', 'Visvaldis', 'Vladislavs', 'Voldemārs',
        'Ziedonis', 'Žanis', 'Agnese', 'Aiga', 'Aija', 'Aina', 'Alīda', 'Alise', 'Alma', 'Alvīne',
        'Amālija', 'Anete', 'Anita', 'Anna', 'Annija', 'Antoņina', 'Antra', 'Ārija', 'Ausma', 'Austra',
        'Baba', 'Baiba', 'Berta', 'Biruta', 'Broņislava', 'Dace', 'Daiga', 'Daina', 'Dārta', 'Diāna', 
        'Doroteja', 'Dzidra', 'Dzintra', 'Eda', 'Edīte', 'Elīna', 'Elita', 'Elizabete', 'Elvīra', 'Elza',
        'Emīlija', 'Emma', 'Ērika', 'Erna', 'Eva', 'Evija', 'Evita', 'Gaida', 'Genovefa', 'Grēta', 'Grieta',
        'Gunita', 'Gunta', 'Helēna', 'Ieva', 'Ilga', 'Ilona', 'Ilze', 'Ina', 'Ināra', 'Indra', 'Inese', 'Ineta',
        'Inga', 'Ingrīda', 'Inguna', 'Inta', 'Irēna', 'Irma', 'Iveta', 'Jana', 'Janina', 'Jūle', 'Jūla',
        'Jūlija', 'Karina', 'Karlīna', 'Katarīna', 'Katrīna', 'Krista', 'Kristiāna', 'Laila', 'Laura', 
        'Lavīze', 'Leontīne', 'Lība', 'Lidija', 'Liene', 'Līga', 'Ligita', 'Lilija', 'Lilita', 'Līna', 
        'Linda', 'Līza', 'Lizete', 'Lūcija', 'Madara', 'Made', 'Maija', 'Māra', 'Mare', 'Margareta', 'Margrieta',
        'Marija', 'Mārīte', 'Marta', 'Maža', 'Milda', 'Minna', 'Mirdza', 'Monika', 'Natālija', 'Olga', 'Otīlija',
        'Paula', 'Paulīna', 'Rasma', 'Regīna', 'Rita', 'Rudīte', 'Ruta', 'Rute', 'Samanta', 'Sandra', 'Sanita',
        'Santa', 'Sapa', 'Sarmīte', 'Silvija', 'Sintija', 'Skaidrīte', 'Solvita', 'Tekla', 'Trīne', 'Valda',
        'Valentīna', 'Valija', 'Velta', 'Veneranda', 'Vera', 'Veronika', 'Vija', 'Vilma', 'Vineta', 'Vita', 'Zane',
        'Zelma', 'Zenta', 'Zigrīda'
    )

    last_names = (
        'Ābele', 'Āboliņš', 'Ābols', 'Alksnis', 'Apinis', 'Apsītis', 'Auniņš', 
        'Auziņš', 'Avotiņš', 'Balodis', 'Baltiņš', 'Bērziņš', 'Birznieks', 'Bite', 
        'Briedis', 'Caune', 'Celmiņš', 'Celms', 'Cīrulis', 'Dzenis', 'Dūmiņš', 'Eglītis',
        'Jaunzems', 'Kalējs', 'Kalniņš', 'Kaņeps', 'Kārkliņš', 'Kauliņš', 'Kļaviņš', 'Krastiņš', 
        'Krēsliņš', 'Krieviņš', 'Krievs', 'Krūmiņš', 'Krūze', 'Kundziņš', 'Lācis', 'Lagzdiņš', 
        'Lapsa', 'Līcis', 'Liepa', 'Liepiņš', 'Lukstiņš', 'Lūsis', 'Paegle', 'Pērkons', 'Podnieks', 
        'Polis', 'Priede', 'Priedītis', 'Puriņš', 'Purmals', 'Riekstiņš', 'Roze', 'Rozītis', 'Rubenis',
        'Rudzītis', 'Saulītis', 'Siliņš', 'Skuja', 'Skujiņš', 'Sproģis', 'Strazdiņš', 'Turiņš', 'Vanags', 'Vīksna',
        'Vilciņš', 'Vilks', 'Vītoliņš', 'Vītols', 'Zaķis', 'Zālītis', 'Zariņš', 'Zeltiņš', 'Ziemelis', 'Zirnis', 
        'Zvaigzne', 'Zvirbulis'
    )

########NEW FILE########
__FILENAME__ = phone_number
from __future__ import unicode_literals
from ..phone_number import Provider as PhoneNumberProvider


class Provider(PhoneNumberProvider):
    formats = (
        '+371 ########',
        '+(371) ########',
        '+371########'
    )

########NEW FILE########
__FILENAME__ = misc
from __future__ import unicode_literals
from . import BaseProvider
from . import date_time
import random
import hashlib
import string

class Provider(BaseProvider):
    language_codes = ('cn', 'de', 'el', 'en', 'es', 'fr', 'it', 'pt', 'ru')

    @classmethod
    def boolean(cls, chance_of_getting_true=50):
        return random.randint(1, 100) <= chance_of_getting_true

    @classmethod
    def null_boolean(cls):
        return {
            0: None,
            1: True,
            -1: False
        }[random.randint(-1, 1)]

    @classmethod
    def md5(cls, raw_output=False):
        """
        Calculates the md5 hash of a given string
        :example 'cfcd208495d565ef66e7dff9f98764da'
        """
        res = hashlib.md5(str(random.random()).encode('utf-8'))
        if raw_output:
            return res.digest()
        return res.hexdigest()

    @classmethod
    def sha1(cls, raw_output=False):
        """
        Calculates the sha1 hash of a given string
        :example 'b5d86317c2a144cd04d0d7c03b2b02666fafadf2'
        """
        res = hashlib.sha1(str(random.random()).encode('utf-8'))
        if raw_output:
            return res.digest()
        return res.hexdigest()

    @classmethod
    def sha256(cls, raw_output=False):
        """
        Calculates the sha256 hash of a given string
        :example '85086017559ccc40638fcde2fecaf295e0de7ca51b7517b6aebeaaf75b4d4654'
        """
        res = hashlib.sha256(str(random.random()).encode('utf-8'))
        if raw_output:
            return res.digest()
        return res.hexdigest()

    def locale(self):
        return self.language_code() + '_' + self.country_code()

    @classmethod
    def country_code(cls):
        return cls.random_element(date_time.Provider.countries)['code']

    @classmethod
    def language_code(cls):
        return cls.random_element(cls.language_codes)



    @classmethod
    def password(cls,length=10, special_chars=True, digits=True, upper_case=True, lower_case=True):
        """
        Generates a random password.
        @param length: Integer. Length of a password
        @param special_chars: Boolean. Whether to use special characters !@#$%^&*()_+
        @param digits: Boolean. Whether to use digits
        @param upper_case: Boolean. Whether to use upper letters
        @param lower_case: Boolean. Whether to use lower letters
        @return: String. Random password
        """
        chars = ""
        if special_chars:
            chars += "!@#$%^&*()_+"
        if digits:
            chars += string.digits
        if upper_case:
            chars += string.ascii_uppercase
        if lower_case:
            chars += string.ascii_lowercase
        return ''.join(random.choice(chars) for x in range(length))

########NEW FILE########
__FILENAME__ = miscelleneous
# module provided just for backward compatibility
from .misc import *

########NEW FILE########
__FILENAME__ = person
from __future__ import unicode_literals
from . import BaseProvider


class Provider(BaseProvider):
    formats = ['{{first_name}} {{last_name}}', ]

    first_names = ['John', 'Jane']

    last_names = ['Doe', ]

    def name(self):
        """
        :example 'John Doe'
        """
        pattern = self.random_element(self.formats)
        return self.generator.parse(pattern)

    @classmethod
    def first_name(cls):
        return cls.random_element(cls.first_names)

    @classmethod
    def last_name(cls):
        return cls.random_element(cls.last_names)

########NEW FILE########
__FILENAME__ = phone_number
from __future__ import unicode_literals
from . import BaseProvider


class Provider(BaseProvider):
    formats = ('###-###-###',)

    @classmethod
    def phone_number(cls):
        return cls.numerify(cls.random_element(cls.formats))
########NEW FILE########
__FILENAME__ = address
# coding=utf-8
from __future__ import unicode_literals
from ..address import Provider as AddressProvider


class Provider(AddressProvider):
    cities = (
        'Warszawa',
        'Kraków',
        'Łódź',
        'Wrocław',
        'Poznań',
        'Gdańsk',
        'Szczecin',
        'Bydgoszcz',
        'Lublin',
        'Katowice',
        'Białystok',
        'Gdynia',
        'Częstochowa',
        'Radom',
        'Sosnowiec',
        'Toruń',
        'Kielce',
        'Gliwice',
        'Rzeszów',
        'Zabrze',
        'Bytom',
        'Olsztyn',
        'Bielsko-Biała',
        'Ruda Śląska',
        'Rybnik',
        'Tychy',
        'Dąbrowa Górnicza',
        'Gorzów Wielkopolski',
        'Elbląg',
        'Płock',
        'Opole',
        'Wałbrzych',
        'Zielona Góra',
        'Włocławek',
        'Tarnów',
        'Chorzów',
        'Koszalin',
        'Kalisz',
        'Legnica',
        'Grudziądz',
        'Słupsk',
        'Jaworzno',
        'Jastrzębie-Zdrój',
        'Nowy Sącz',
        'Jelenia Góra',
        'Konin',
        'Piotrków Trybunalski',
        'Siedlce',
        'Inowrocław',
        'Mysłowice',
        'Piła',
        'Lubin',
        'Ostrów Wielkopolski',
        'Ostrowiec Świętokrzyski',
        'Gniezno',
        'Stargard Szczeciński',
        'Siemianowice Śląskie',
        'Suwałki',
        'Głogów',
        'Pabianice',
        'Chełm',
        'Zamość',
        'Tomaszów Mazowiecki',
        'Leszno',
        'Przemyśl',
        'Stalowa Wola',
        'Kędzierzyn-Koźle',
        'Łomża',
        'Żory',
        'Mielec',
        'Tarnowskie Góry',
        'Tczew',
        'Bełchatów',
        'Świdnica',
        'Ełk',
        'Pruszków',
        'Będzin',
        'Biała Podlaska',
        'Zgierz',
        'Piekary Śląskie',
        'Racibórz',
        'Legionowo',
        'Ostrołęka',
        'Świętochłowice',
        'Starachowice',
        'Zawiercie',
        'Wejherowo',
        'Puławy',
        'Wodzisław Śląski',
        'Starogard Gdański',
        'Skierniewice',
        'Tarnobrzeg',
        'Skarżysko-Kamienna',
        'Radomsko',
        'Krosno',
        'Rumia',
        'Dębica',
        'Kołobrzeg',
        'Kutno',
        'Nysa',
        'Ciechanów',
        'Otwock',
        'Piaseczno',
        'Zduńska Wola',
        'Sieradz',
        'Świnoujście',
        'Żyrardów',
        'Szczecinek',
        'Świdnik',
        'Chojnice',
        'Nowa Sól',
        'Oświęcim',
        'Bolesławiec',
        'Mińsk Mazowiecki',
        'Mikołów',
        'Jarosław',
        'Sanok',
        'Knurów',
        'Malbork',
        'Żary',
        'Kwidzyn',
        'Chrzanów',
        'Sopot',
        'Sochaczew',
        'Wołomin',
        'Oleśnica',
        'Brzeg',
        'Olkusz',
        'Jasło',
        'Cieszyn',
        'Kraśnik',
        'Lębork',
        'Czechowice-Dziedzice',
        'Dzierżoniów',
        'Ostróda',
        'Police',
        'Nowy Targ',
        'Iława',
        'Czeladź',
        'Myszków',
        'Żywiec',
        'Zgorzelec',
        'Oława',
        'Bielawa',
        'Swarzędz',
        'Mława',
        'Ząbki',
        'Łuków',
        'Augustów',
        'Śrem',
        'Bochnia',
        'Luboń',
        'Giżycko',
        'Grodzisk Mazowiecki',
        'Łowicz',
        'Krotoszyn',
        'Września',
        'Turek',
        'Pruszcz Gdański',
        'Brodnica',
        'Gorlice',
        'Czerwionka-Leszczyny',
        'Kłodzko',
        'Marki',
        'Nowy Dwór Mazowiecki',
        'Kętrzyn',
        'Zakopane',
        'Wyszków',
        'Biłgoraj',
        'Żagań',
        'Bielsk Podlaski',
        'Świecie',
        'Wałcz',
        'Jarocin',
        'Pszczyna',
        'Wągrowiec',
        'Szczytno',
        'Białogard',
        'Sandomierz',
        'Bartoszyce',
        'Kluczbork',
        'Lubliniec',
        'Skawina',
        'Jawor',
        'Kościan',
        'Wieluń',
        'Kościerzyna',
        'Nowa Ruda',
        'Świebodzice',
        'Koło',
        'Piastów',
        'Goleniów',
        'Ostrów Mazowiecka',
        'Polkowice',
        'Lubartów',
        'Zambrów',
        'Płońsk',
        'Reda',
        'Łaziska Górne',
        'Środa Wielkopolska'
    )

    streets = (
        'Polna',
        'Lesna',
        'Sloneczna',
        'Krótka',
        'Szkolna',
        'Ogrodowa',
        'Lipowa',
        'Brzozowa',
        'Lakowa',
        'Kwiatowa',
        'Sosnowa',
        'Koscielna',
        'Akacjowa',
        'Parkowa',
        'Zielona',
        'Kolejowa',
        'Sportowa',
        'Debowa',
        'Kosciuszki',
        'Maja',
        'Mickiewicza',
        'Cicha',
        'Spokojna',
        'Klonowa',
        'Spacerowa',
        'Swierkowa',
        'Kasztanowa',
        'Nowa',
        'Piaskowa',
        'Sienkiewicza',
        'Rózana',
        'Topolowa',
        'Wisniowa',
        'Dworcowa',
        'Wiejska',
        'Graniczna',
        'Slowackiego',
        'Dluga',
        'Wrzosowa',
        'Konopnickiej',
        'Boczna',
        'Waska',
        'Wierzbowa',
        'Jasminowa',
        'Wspólna',
        'Modrzewiowa',
        'Kopernika',
        'Jana Pawla II',
        'Poprzeczna',
        'Wesola',
        'Pogodna',
        'Zeromskiego',
        'Rynek',
        'Bukowa',
        'Wojska Polskiego',
        'Sadowa',
        'Górna',
        'Jodlowa',
        'Wolnosci',
        'Glówna',
        'Mlynska',
        'Strazacka',
        'Prusa',
        'Jesionowa',
        'Przemyslowa',
        'Osiedlowa',
        'Wiosenna',
        'Sikorskiego',
        'Chopina',
        'Poludniowa',
        'Malinowa',
        'Stawowa',
        'Reymonta',
        'Pilsudskiego',
        'Zacisze',
        'Cmentarna',
        'Okrezna',
        'Kochanowskiego',
        'Armii Krajowej',
        'Mila',
        'Jasna',
        'Wodna',
        'Zamkowa',
        'Witosa',
        'Reja',
        'Warszawska',
        'Miodowa',
        'Partyzantów',
        'Krzywa',
        'Kilinskiego',
        'Dolna',
        'Podgórna',
        'Kreta',
        'Jarzebinowa',
        'Moniuszki',
        'Targowa',
        'Prosta',
        'Orzeszkowej',
        'Spóldzielcza',
        'Jagodowa',
        'Dzialkowa',
        'Staszica',
        'Orzechowa',
        'Rzemieslnicza',
        'Rzeczna',
        'Boleslawa Chrobrego',
        'Fabryczna',
        'Teczowa',
        'Chabrowa',
        'Poziomkowa',
        'Konwaliowa',
        'Wyszynskiego',
        'Kalinowa',
        'Pólnocna',
        'Matejki',
        'Grunwaldzka',
        'Cisowa',
        'Nadrzeczna',
        'Pocztowa',
        'Zachodnia',
        'Dabrowskiego',
        'Grabowa',
        'Norwida',
        'Zródlana',
        'Asnyka',
        'Gajowa',
        'Paderewskiego',
        'Listopada',
        'Wyspianskiego',
        'Mostowa',
        'Broniewskiego',
        'Tuwima',
        'Wschodnia',
        'Jaworowa',
        'Poznanska',
        'Makowa',
        'Bema',
        'Jeziorna',
        'Piekna',
        'Czeresniowa',
        'Mala',
        'Krakowska',
        'Radosna',
        'Leszczynowa',
        'Traugutta',
        'Jadwigi',
        'Rolna',
        'Wyzwolenia',
        'Piastowska',
        'Grzybowa',
        'Krasickiego',
        'Podlesna',
        'Zytnia',
        'Zlota',
        'Bursztynowa',
        'Zwirowa',
        'Stycznia',
        'Widokowa',
        'Kazimierza Wielkiego',
        'Kamienna',
        'Jalowcowa',
        'Morelowa',
        'Mieszka I',
        'Mysliwska',
        'Laczna',
        'Szpitalna',
        'Wczasowa',
        'Zurawia',
        'Fiolkowa',
        'Glowackiego',
        'Rolnicza',
        'Tulipanowa',
        'Wladyslawa Jagielly',
        'Dworska',
        'Letnia',
        'Liliowa',
        'Owocowa',
        'Pulaskiego',
        'Stefana Batorego',
        'Harcerska',
        'Kollataja',
        'Strzelecka',
        'Kraszewskiego',
        'Wladyslawa Lokietka',
        'Zwirki i Wigury',
        'Wroclawska',
        'Gdanska',
        'Turystyczna',
        'Niepodleglosci',
        'Poniatowskiego',
        'Korczaka',
        'Rybacka',
        'Narutowicza',
        'Okrzei',
        'Krucza',
        'Jagiellonska',
        'Swierczewskiego',
        'Kasprowicza',
        'Szeroka',
        'Jana III Sobieskiego',
        'Mlynarska',
        'Olchowa',
        'Powstanców Slaskich',
        'Rumiankowa',
        'Stroma',
        'Starowiejska',
        'Mazowiecka',
        'Lawendowa',
        'Robotnicza',
        'Zbozowa',
        'Mokra',
        'Powstanców Wielkopolskich',
        'Towarowa',
        'Dobra',
        'Srodkowa',
        'Willowa',
        'Zielna',
        'Zdrojowa',
        'Opolska',
        'Agrestowa',
        'Ksiezycowa',
        'Zwyciestwa',
        'Fredry',
        'Letniskowa',
        'Andersa',
        'Baczynskiego',
        'Batalionów Chlopskich',
        'Dabrowskiej',
        'Orla',
        'Sklodowskiej-Curie',
        'Blekitna',
        'Rubinowa',
        'Brzoskwiniowa',
        'Urocza',
        'Galczynskiego',
        'Krasinskiego',
        'Pomorska',
        'Szymanowskiego',
        'Jezynowa',
        'Czarnieckiego',
        'Nalkowskiej',
        'Zaciszna',
        'Porzeczkowa',
        'Krancowa',
        'Jesienna',
        'Klasztorna',
        'Irysowa',
        'Niecala',
        'Wybickiego',
        'Nadbrzezna',
        'Szarych Szeregów',
        'Walowa',
        'Slowicza',
        'Strumykowa',
        'Drzymaly',
        'Golebia',
        'Torowa',
        'Cegielniana',
        'Cyprysowa',
        'Slowianska',
        'Diamentowa',
        'Warynskiego',
        'Czestochowska',
        'Dojazdowa',
        'Przechodnia',
        'Hallera',
        'Lubelska',
        'Plater',
        'Popieluszki',
        'Borówkowa',
        'Chelmonskiego',
        'Daszynskiego',
        'Plazowa',
        'Tartaczna',
        'Jabloniowa',
        'Kossaka',
        'Skargi',
        'Ludowa',
        'Sokola',
        'Azaliowa',
        'Szmaragdowa',
        'Lipca',
        'Staffa',
        'Tysiaclecia',
        'Brzechwy',
        'Jastrzebia',
        'Kusocinskiego',
        'Storczykowa',
        'Wilcza',
        'Górnicza',
        'Szafirowa',
        'Dlugosza',
        'Handlowa',
        'Krokusowa',
        'Skladowa',
        'Widok',
        'Perlowa',
        'Skosna',
        'Wypoczynkowa',
        'Chmielna',
        'Jaskólcza',
        'Nowowiejska',
        'Piwna',
        'Slaska',
        'Zaulek',
        'Glogowa',
        'Górska',
        'Truskawkowa',
        'Kaszubska',
        'Kosynierów',
        'Mazurska',
        'Srebrna',
        'Bociania',
        'Ptasia',
        'Cedrowa',
        'Rycerska',
        'Wieniawskiego',
        'Zabia',
        'Torunska',
        'Podmiejska',
        'Slonecznikowa',
        'Sowia',
        'Stolarska',
        'Powstanców',
        'Sucharskiego',
        'Boleslawa Krzywoustego',
        'Konarskiego',
        'Szczesliwa',
        'Lazurowa',
        'Miarki',
        'Narcyzowa',
        'Browarna',
        'Konstytucji 3 Maja',
        'Majowa',
        'Milosza',
        'Malczewskiego',
        'Orkana',
        'Skrajna',
        'Bankowa',
        'Bydgoska',
        'Piekarska',
        'Zeglarska',
        'Jana',
        'Turkusowa',
        'Tylna',
        'Wysoka',
        'Zakatek',
        'Maczka',
        'Morska',
        'Rataja',
        'Szewska',
        'Podwale',
        'Palacowa',
        'Magnoliowa',
        'Ceglana',
        'Sawickiej',
        'Sciegiennego',
        'Wiklinowa',
        'Zakole',
        'Borowa',
        'Kolorowa',
        'Lisia',
        'Lotnicza',
        'Sarnia',
        'Wiazowa',
        'Grottgera',
        'Kolonia',
        'Królewska',
        'Promienna',
        'Daleka',
        'Jana Sobieskiego',
        'Rejtana',
        'Wiatraczna',
        'Kaliska',
        'Lanowa',
        'Srednia',
        'Wislana',
        'Wróblewskiego',
        'Koralowa',
        'Kruczkowskiego',
        'Lelewela',
        'Makuszynskiego',
        'Sybiraków',
        'Kowalska',
        'Morcinka',
        'Odrzanska',
        'Okulickiego',
        'Solidarnosci',
        'Zapolskiej',
        'Labedzia',
        'Wojciecha',
        'Baltycka',
        'Lwowska',
        'Rajska',
        'Korfantego',
        'Pszenna',
        'Ciasna',
        'Floriana',
        'Hutnicza',
        'Kielecka'
    )

    postcode_formats = ('##-###',)

    @classmethod
    def street_name(cls):
        return cls.random_element(cls.streets)

    @classmethod
    def city(cls):
        return cls.random_element(cls.cities)
########NEW FILE########
__FILENAME__ = person
# coding=utf-8
from __future__ import unicode_literals
from ..person import Provider as PersonProvider
import random


class Provider(PersonProvider):
    formats = (
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{prefix}} {{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{prefix}} {{first_name}} {{last_name}}'
    )

    male_first_names = (
        'Jakub', 'Jan', 'Mateusz', 'Bartek', 'Kacper', 'Michał', 'Szymon', 'Antoni', 'Filip',
        'Piotr', 'Maciej', 'Aleksander', 'Franciszek', 'Mikołaj', 'Adam', 'Stanisław', 'Wiktor',
        'Krzysztof', 'Wojciech', 'Igor', 'Maksymilian', 'Karol', 'Dawid', 'Tomasz', 'Patryk',
        'Oskar', 'Paweł', 'Dominik', 'Kamil', 'Oliwier', 'Ignacy', 'Marcel', 'Hubert', 'Adrian',
        'Łukasz', 'Sebastian', 'Julian', 'Tymon', 'Krystian', 'Marcin', 'Damian', 'Miłosz', 'Leon',
        'Alan', 'Tymoteusz', 'Kajetan', 'Grzegorz', 'Daniel', 'Rafał', 'Eryk', 'Konrad', 'Ksawery',
        'Gabriel', 'Nikodem', 'Bruno', 'Przemysław', 'Borys', 'Artur', 'Olaf', 'Jerzy', 'Marek',
        'Tadeusz', 'Andrzej', 'Witold', 'Iwo', 'Juliusz', 'Robert', 'Błażej', 'Cezary', 'Jeremi',
        'Jacek', 'Konstanty', 'Ryszard', 'Stefan', 'Aleks', 'Gustaw', 'Radosław', 'Emil', 'Norbert',
        'Fabian', 'Jędrzej', 'Alex', 'Kazimierz', 'Arkadiusz', 'Kornel', 'Józef', 'Natan',
        'Cyprian', 'Mieszko', 'Nataniel', 'Maks', 'Maurycy', 'Olgierd', 'Dariusz', 'Leonard',
        'Mariusz', 'Albert', 'Fryderyk', 'Ernest', 'Tobiasz'
    )

    female_first_names = (
        'Kamila', 'Ewa', 'Blanka', 'Olga', 'Kalina', 'Klara', 'Urszula', 'Sandra', 'Kaja',
        'Marianna', 'Kornelia', 'Justyna', 'Monika', 'Sara', 'Adrianna', 'Aniela', 'Agnieszka',
        'Róża', 'Marcelina', 'Roksana', 'Natasza', 'Lidia', 'Malwina', 'Karina', 'Ada', 'Marika',
        'Anastazja', 'Sonia', 'Nela', 'Dorota', 'Apolonia', 'Ida', 'Eliza', 'Angelika',
        'Anna Maria', 'Liwia', 'Ewelina', 'Julita', 'Rozalia', 'Inga', 'Krystyna', 'Bianka',
        'Dagmara', 'Melania', 'Sylwia', 'Nicole', 'Anita', 'Aurelia',
        'Elżbieta', 'Janina', 'Julianna', 'Tola', 'Gaja')

    unisex_last_names = (
        'Wandzel', 'Pajda', 'Dzienis', 'Borysewicz', 'Szlaga', 'Krzysiek', 'Iwańczyk', 'Cierpisz',
        'Borczyk', 'Szymula', 'Pietrasiak', 'Minkiewicz', 'Hojka', 'Goral', 'Staś', 'Smoter',
        'Bosek', 'Bitner', 'Kondej', 'Furgał', 'Durlik', 'Kusa', 'Pacewicz', 'Masiak', 'Kucz',
        'Cichowlas', 'Anders', 'Wawszczak', 'Słupek', 'Pych', 'Piszcz', 'Opoka', 'Lorenz',
        'Grochowina', 'Wicha', 'Pawliczek', 'Kus', 'Zysk', 'Sroga', 'Rychel', 'Patora', 'Maciocha',
        'Rozmiarek', 'Pesta', 'Działak', 'Godyń', 'Chmara', 'Jakubaszek', 'Bałazy', 'Rykała',
        'Wika', 'Kotala', 'Fikus', 'Sus', 'Kunc', 'Mateusiak', 'Kusyk', 'Romańczyk', 'Makieła',
        'Lejman', 'Kołaczek', 'Kurzak', 'Bondyra', 'Podkowa', 'Paśnik', 'Oleszko', 'Marcol',
        'Szybiak', 'Ruszczak', 'Zbroja', 'Stosik', 'Gruchot', 'Boś', 'Wożniak', 'Gniewek', 'Buława',
        'Wiatrak', 'Talaśka', 'Patalas', 'Kwoka', 'Krzempek', 'Danilczuk', 'Ważny', 'Sidorczuk',
        'Legutko', 'Kobos', 'Tylek', 'Szkoda', 'Przerwa', 'Linek', 'Galik', 'Dulewicz', 'Drozda',
        'Nowek', 'Matulewicz', 'Karpeta', 'Jurczuk', 'Buśko', 'Słomian', 'Drywa', 'Rybus', 'Langa',
        'Kluczek', 'Orkisz', 'Ziemkiewicz', 'Siara', 'Para', 'Kwasek', 'Januszko', 'Hejduk',
        'Łuszczak', 'Sprawka', 'Kiełek', 'Jop', 'Faryna', 'Zimoń', 'Utrata', 'Mirga', 'Kozaczuk',
        'Wojtyna', 'Rzońca', 'Madejczyk', 'Glapiak', 'Dziadkowiec', 'Ochnio', 'Sieja', 'Malewicz',
        'Bachanek', 'Mirocha', 'Domżał', 'Tworzydło', 'Płaneta', 'Feret', 'Witas', 'Figat', 'Muc',
        'Kuciel', 'Kielan', 'Hałat', 'Tecław', 'Loba', 'Klucznik', 'Bielas', 'Rajczyk', 'Myszak',
        'Muniak', 'Michalczak', 'Kochanowicz', 'Szołtysik', 'Rychert', 'Pyda', 'Janowiak', 'Janiga',
        'Grądziel', 'Wdowczyk', 'Pytlarz', 'Kuzia', 'Dziewa', 'Bernatowicz', 'Ostapiuk', 'Rejniak',
        'Kotlarek', 'Gajownik', 'Brach', 'Tatarek', 'Szyc', 'Masny', 'Drop', 'Saternus',
        'Podsiadła', 'Patyna', 'Kargol', 'Truchan', 'Pietrusiak', 'Kolbusz', 'Kalota', 'Hołubowicz',
        'Andrzejuk', 'Zdziech', 'Szymonik', 'Sych', 'Strojna', 'Seta', 'Orman', 'Hermanowicz',
        'Denkiewicz', 'Bulanda', 'Szwaja', 'Jankowicz', 'Pochopień', 'Kobza', 'Karwot', 'Kałek',
        'Laszuk', 'Aleksiejuk', 'Witaszek', 'Wawryniuk', 'Jacak', 'Bugla', 'Wejman', 'Jaroch',
        'Janiszek', 'Gorzelańczyk', 'Zieja', 'Krochmal', 'Filas', 'Wawrzynowicz', 'Szałas',
        'Machoń', 'Labus', 'Irzyk', 'Gomuła', 'Wesoły', 'Solarek', 'Kośka', 'Myszk', 'Moryc',
        'Lizoń', 'Lesisz', 'Kiełbowicz', 'Serwa', 'Piórek', 'Majdak', 'Bruzda', 'Bakun', 'Subocz',
        'Stypuła', 'Gołek', 'Fik', 'Wołczyk', 'Waniek', 'Parzyszek', 'Oszust', 'Burza', 'Żbik',
        'Misztela', 'Kurant', 'Drygas', 'Łaciak', 'Franczuk', 'Rycerz', 'Żok', 'Zeman', 'Mejer',
        'Kanarek', 'Jędruch', 'Saj', 'Nieroda', 'Juśkiewicz', 'Surdyk', 'Paliga', 'Makaruk',
        'Hamera', 'Łukowicz', 'Barcz', 'Witos', 'Strzelczak', 'Siedlaczek', 'Pakosz', 'Burchardt',
        'Nurek', 'Morys', 'Korbel', 'Kokosza', 'Kijanka', 'Bobak', 'Samson', 'Jarosiewicz',
        'Szelest', 'Stanisławek', 'Perka', 'Ciepłuch', 'Bryja', 'Świątkiewicz', 'Samul', 'Rohde',
        'Prucnal', 'Miszkiewicz', 'Kuropatwa', 'Gajdzik', 'Mućka', 'Misiaszek', 'Fornalik',
        'Wiszowaty', 'Thiel', 'Osiadacz', 'Miśko', 'Mielcarz', 'Drózd', 'Oleksiuk', 'Matyka',
        'Łyczak', 'Cabała', 'Ośka', 'Bereś', 'Armatys', 'Szmajda', 'Młyńczak', 'Kupidura', 'Kijas',
        'Chomiuk', 'Gowin', 'Dybka', 'Bródka', 'Wziątek', 'Ślęczka', 'Koj', 'Drabczyk', 'Buczko',
        'Sawko', 'Kłysz', 'Karpiel', 'Jarczyk', 'Flaga', 'Fiedorczuk', 'Tomalak', 'Nałęcz',
        'Choroś', 'Brańka', 'Rajchel', 'Kiedrowicz', 'Gąbka', 'Fiołek', 'Drozdowicz', 'Stypa',
        'Kawala', 'Mazanek', 'Kwinta', 'Koczy', 'Hyży', 'Grzejszczak', 'Wywiał', 'Sacharczuk',
        'Jaroszuk', 'Golon', 'Chachuła', 'Malarczyk', 'Kawula', 'Bohdanowicz', 'Bartocha', 'Lewko',
        'Igras', 'Damps', 'Tlałka', 'Niechciał', 'Łyskawa', 'Goś', 'Więckiewicz', 'Leśko', 'Konsek',
        'Juszczuk', 'Szczudło', 'Poniedziałek', 'Palus', 'Bodziony', 'Śmieszek', 'Rej', 'Pietryga',
        'Mieszała', 'Malcher', 'Kopij', 'Kaczan', 'Janasik', 'Watras', 'Stojak', 'Strzyż',
        'Siemieniec', 'Kośnik', 'Kasperczak', 'Woszczyna', 'Wiech', 'Stefanik', 'Miara', 'Łodyga',
        'Walo', 'Oleksiewicz', 'Mainka', 'Baka', 'Trybuś', 'Samol', 'Jamroży', 'Gruszczyk',
        'Deluga', 'Trzos', 'Sinkiewicz', 'Lesik', 'Kroczak', 'Klamka', 'Grzelczyk', 'Dycha',
        'Ciesielczyk', 'Armata', 'Wawrzyczek', 'Prokopczyk', 'Hampel', 'Grzech', 'Rzucidło', 'Rawa',
        'Kręcisz', 'Karyś', 'Rodzeń', 'Karalus', 'Mikosz', 'Kazimierczuk', 'Hajda', 'Berg', 'Teper',
        'Słabosz', 'Dziechciarz', 'Dmoch', 'Śleziak', 'Pietrek', 'Martyka', 'Wołk', 'Smętek',
        'Kroll', 'Grab', 'Dziedzina', 'Noszczyk', 'Kazek', 'Jędrusiak', 'Cebo', 'Tokarek', 'Małota',
        'Hanc', 'Uliasz', 'Pysz', 'Piłka', 'Błaszyk', 'Wyrobek', 'Trybus', 'Szlęk', 'Pindor', 'Łuc',
        'Baszak', 'Majak', 'Łój', 'Szczypek', 'Łuczkiewicz', 'Łaszcz', 'Froń', 'Dybaś', 'Budner',
        'Ostasz', 'Siekierka', 'Pilipczuk', 'Kandzia', 'Gieroń', 'Drost', 'Chwała', 'Malesza',
        'Fiedler', 'Suszko', 'Kurnik', 'Bereda', 'Nalewajko', 'Duczmal', 'Sieradzan', 'Pietrasz',
        'Cecot', 'Tomaszkiewicz', 'Rabiej', 'Staniaszek', 'Mikusek', 'Kuryłowicz', 'Herda',
        'Brzykcy', 'Początek', 'Ochal', 'Koral', 'Kaźmierczyk', 'Kandziora', 'Sycz', 'Reich',
        'Lindner', 'Fulara', 'Przybycień', 'Hermann', 'Forysiak', 'Strzępek', 'Sondej', 'Pyć',
        'Piaścik', 'Grygo', 'Wita', 'Szynkiewicz', 'Piesik', 'Nasiadka', 'Murach', 'Kostro',
        'Hinca', 'Engler', 'Tułacz', 'Przewoźny', 'Pizoń', 'Łapacz', 'Hajduga', 'Bulczak', 'Bubel',
        'Smutek', 'Samoraj', 'Plaskota', 'Fraś', 'Becker', 'Baranowicz', 'Trznadel', 'Topa',
        'Stanisławczyk', 'Lato', 'Kołton', 'Uryga', 'Tomaszczyk', 'Szymanik', 'Stochmal',
        'Kiszczak', 'Dylong', 'Chruszcz', 'Byra', 'Friedrich', 'Cyganik', 'Pacocha', 'Jonczyk',
        'Szymańczyk', 'Radko', 'Meler', 'Kuran', 'Koman', 'Błądek', 'Banachowicz', 'Babiuch',
        'Kruszka', 'Fijoł', 'Zatoń', 'Włodarz', 'Trepka', 'Świerszcz', 'Strzała', 'Opioła', 'Kursa',
        'Dyś', 'Broś', 'Tyka', 'Syroka', 'Grys', 'Szczepaniuk', 'Marcińczyk', 'Leks', 'Kubina',
        'Janke', 'Dąbrowicz', 'Hulbój', 'Cieciura', 'Chochół', 'Szpila', 'Samiec', 'Rduch',
        'Nabiałek', 'Margol', 'Kopa', 'Engel', 'Czerepak', 'Rosłon', 'Pusz', 'Matla', 'Wołoch',
        'Pazik', 'Nazimek', 'Kuśka', 'Karczmarz', 'Gajzler', 'Sławik', 'Lalak', 'Grabias', 'Gągała',
        'Chwedoruk', 'Wasil', 'Pachołek', 'Wichłacz', 'Walentynowicz', 'Tylus', 'Kosz', 'Iwanow',
        'Garczarek', 'Dorociak', 'Boguta', 'Betka', 'Widuch', 'Wawrzynek', 'Szymajda', 'Stanaszek',
        'Klama', 'Goj', 'Dzierżak', 'Walasik', 'Skwira', 'Luks', 'Kujawiak', 'Dworczak', 'Tofil',
        'Rurarz', 'Pachla', 'Lenarcik', 'Kusztal', 'Chaber', 'Skała', 'Radzewicz', 'Kramer',
        'Kochel', 'Dukat', 'Naglik', 'Szurek', 'Litwiniuk', 'Halama', 'Grzela', 'Wojaczek',
        'Popielarczyk', 'Krysik', 'Dawidczyk', 'Barteczko', 'Balik', 'Warych', 'Miodek', 'Madera',
        'Leszczyk', 'Kolanek', 'Fijak', 'Furgała', 'Faruga', 'Poleszak', 'Kusek', 'Herok', 'Golda',
        'Rymarz', 'Pociask', 'Kowalak', 'Czupryna', 'Trzcionka', 'Sulik', 'Matulka', 'Herbut',
        'Stosio', 'Kurtyka', 'Ciuk', 'Szczerbiak', 'Snoch', 'Budniak', 'Boruc', 'Tylka', 'Kwak',
        'Garncarz', 'Szuta', 'Miśkowiec', 'Sykut', 'Jarosik', 'Golus', 'Chmielak', 'Abramczuk',
        'Skrobek', 'Patrzałek', 'Linkiewicz', 'Jereczek', 'Jarema', 'Flasza', 'Fiedoruk',
        'Budkiewicz', 'Świgoń', 'Przewoźnik', 'Parada', 'Heller', 'Gierak', 'Ferdyn', 'Sumera',
        'Bik', 'Kamela', 'Ciereszko', 'Świtaj', 'Pastuszko', 'Łobacz', 'Kuba', 'Krzywonos',
        'Granat', 'Szóstak', 'Płoskonka', 'Kumorek', 'Komuda', 'Klinkosz', 'Falba', 'Szczechowicz',
        'Rozum', 'Moroń', 'Matynia', 'Greszta', 'Łuczka', 'Dziewit', 'Mueller', 'Kapral',
        'Hrynkiewicz', 'Gonsior', 'Forma', 'Ciesiółka', 'Bors', 'Siwa', 'Niemczuk', 'Nazar',
        'Liśkiewicz', 'Jarczak', 'Felisiak', 'Fedorczyk', 'Wilusz', 'Pastor', 'Gierek', 'Romaniak',
        'Oleszczak', 'Juras', 'Zachwieja', 'Szmurło', 'Smektała', 'Przewoźna', 'Nikel', 'Chlebek',
        'Balas', 'Latuszek', 'Ambrozik', 'Janczura', 'Aleksandrzak', 'Wojtalik', 'Rok', 'Nagórka',
        'Latoszek', 'Kubowicz', 'Domian', 'Ciemięga', 'Soliwoda', 'Komsta', 'Filus', 'Wierzchoń',
        'Skotarczak', 'Cader', 'Trzmiel', 'Jagieło', 'Wawszczyk', 'Troć', 'Swatek', 'Bączkiewicz',
        'Ulewicz', 'Tutka', 'Pałac', 'Mydlarz', 'Molka', 'Janiuk', 'Guziak', 'Frycz', 'Drzał',
        'Zacharek', 'Wiencek', 'Szłapka', 'Kurach', 'Bareja', 'Pawlukiewicz', 'Moździerz', 'Mich',
        'Lisik', 'Kałwa', 'Dadej', 'Matela', 'Lenda', 'Wolff', 'Wojnicz', 'Sendor', 'Mrózek',
        'Łągiewka', 'Kulisz', 'Kolarz', 'Walus', 'Mikoda', 'Kral', 'Darul', 'Warczak', 'Kunysz',
        'Kidoń', 'Ciuła', 'Chomiak', 'Rzeźniczak', 'Przeniosło', 'Chomik', 'Zimoląg', 'Wojtyś',
        'Mędrala', 'Hennig', 'Handzel', 'Twardzik', 'Śmieja', 'Solarczyk', 'Mendak', 'Lemieszek',
        'Kiryluk', 'Wrześniak', 'Kwarciak', 'Gasik', 'Borysiewicz', 'Sierota', 'Mysiak',
        'Kraszkiewicz', 'Hyjek', 'Polaszek', 'Pazera', 'Kubisz', 'Kościukiewicz', 'Kopczyk',
        'Kliber', 'Kaczmar', 'Kaczka', 'Bicz', 'Augustynek', 'Straszak', 'Sajewicz', 'Glanc',
        'Bzymek', 'Zieniewicz', 'Pagacz', 'Gortat', 'Bubak', 'Warwas', 'Skoneczna', 'Nestorowicz',
        'Dziopa', 'Danisz', 'Bazydło', 'Garncarek', 'Albin', 'Szeszko', 'Naczk', 'Łukowiak',
        'Kopciuch', 'Jakoniuk', 'Węgrzynowicz', 'Walencik', 'Turlej', 'Leonowicz', 'Kierepka',
        'Hendzel', 'Fronczek', 'Zarzeczna', 'Zagrodnik', 'Wałęsa', 'Trzepizur', 'Tereszkiewicz',
        'Szczubełek', 'Magier', 'Działo', 'Drygała', 'Czesak', 'Majorek', 'Wlizło', 'Skutnik',
        'Radke', 'Piątkiewicz', 'Oślizło', 'Kansy', 'Szela', 'Mol', 'Kuświk', 'Karpik', 'Janczarek',
        'Hajdukiewicz', 'Mzyk', 'Kostera', 'Leszkiewicz', 'Hutnik', 'Glaza', 'Fydrych', 'Piegza',
        'Matusewicz', 'Matus', 'Kluczyk', 'Drobnik', 'Połom', 'Okraska', 'Neska', 'Kozłowicz',
        'Wołos', 'Wacławczyk', 'Ochnik', 'Maruszczak', 'Lesner', 'Kuncewicz', 'Kieszek', 'Betlej',
        'Wałdoch', 'Szarejko', 'Smalec', 'Łosiewicz', 'Lisak', 'Walkusz', 'Owsiak', 'Kowaluk',
        'Simon', 'Rup', 'Neubauer', 'Muskała', 'Kucharzyk', 'Gabryel', 'Zimniak', 'Warmuz', 'Opas',
        'Michniak', 'Cieloch', 'Wójcikiewicz', 'Świech', 'Powierża', 'Olko', 'Miękus', 'Kutnik',
        'Kustosz', 'Kochman', 'Trąbka', 'Szyja', 'Młynarz', 'Wojtak', 'Dzierwa', 'Zyguła', 'Taciak',
        'Koziatek', 'Koss', 'Walenciak', 'Twardosz', 'Pakos', 'Mamcarz', 'Burzawa', 'Lenik',
        'Franc', 'Sadza', 'Mądrzak', 'Mak', 'Bobel', 'Szajna', 'Proch', 'Kosela', 'Guźniczak',
        'Radziewicz', 'Olchawa', 'Morcinek', 'Bastek', 'Ragan', 'Podeszwa', 'Mitek', 'Janoszka',
        'Słaba', 'Rusnak', 'Płócienniczak', 'Hanke', 'Gosek', 'Wujek', 'Warchał', 'Starzak',
        'Prochownik', 'Molak', 'Duszkiewicz', 'Sztaba', 'Piwek', 'Nowotnik', 'Kiljan', 'Dubel',
        'Brodowicz', 'Tylec', 'Pik', 'Pastucha', 'Księżak', 'Gumieniak', 'Ufnal', 'Stawinoga',
        'Słoń', 'Kolarczyk', 'John', 'Fleszar', 'Lemke', 'Kurc', 'Kamieniarz', 'Jaskóła', 'Jaremko',
        'Gogacz', 'Dudała', 'Chlipała', 'Szłapa', 'Seidel', 'Kopyt', 'Karłowicz', 'Gębura',
        'Frączkiewicz', 'Frankowicz', 'Dybiec', 'Drobny', 'Brózda', 'Boruń', 'Pelka', 'Macias',
        'Ruszel', 'Pabis', 'Krefta', 'Ćwierz', 'Bieleń', 'Szyca', 'Pronobis', 'Dreszer', 'Bryzek',
        'Ambrożewicz', 'Słobodzian', 'Mrozowicz', 'Wojak', 'Szklarek', 'Paw', 'Kościelak',
        'Kalarus', 'Wylegała', 'Powązka', 'Młot', 'Krekora', 'Bilewicz', 'Pyszka', 'Niedźwiadek',
        'Lubera', 'Chodak', 'Breguła', 'Synak', 'Supeł', 'Suda', 'Roczniak', 'Matuszyk', 'Helak',
        'Gubernat', 'Wojtera', 'Wiszowata', 'Świętoń', 'Deryło', 'Szałaj', 'Rzeszutko', 'Matejczuk',
        'Żołądź', 'Suchta', 'Pokrzywa', 'Piguła', 'Litwińczuk', 'Kik', 'Gula', 'Geisler', 'Micał',
        'Maszota', 'Kurzyna', 'Feliksiak', 'Cybul', 'Wiaderek', 'Śnieg', 'Linka', 'Fidler',
        'Fabiszak', 'Cibor', 'Ryczko', 'Rudolf', 'Jędrzejek', 'Bekus', 'Bek', 'Wolan', 'Radzio',
        'Kuliberda', 'Kolanko', 'Szykuła', 'Skowyra', 'Porwoł', 'Kosiak', 'Kasica', 'Jakiel',
        'Piejko', 'Owczarczak', 'Michnik', 'Linke', 'Kutera', 'Bobryk', 'Szabla', 'Powała',
        'Marciniszyn', 'Gorgol', 'Czerwionka', 'Ledzion', 'Dykas', 'Zygmuntowicz', 'Listwan',
        'Bobrowicz', 'Żurawik', 'Migała', 'Merchel', 'Bogumił', 'Wojsa', 'Sadura', 'Łyjak', 'Giers',
        'Gałat', 'Parafiniuk', 'Kryszkiewicz', 'Wyrostek', 'Wałek', 'Rembisz', 'Paściak', 'Maksym',
        'Kusio', 'Kostek', 'Kalisiak', 'Bździuch', 'Szlufik', 'Pogorzelec', 'Pielech', 'Kafel',
        'Gmur', 'Glazer', 'Borysiuk', 'Białk', 'Adamaszek', 'Wiesiołek', 'Wakuła', 'Rogula',
        'Leszczuk', 'Kapciak', 'Gul', 'Buszka', 'Sklorz', 'Parda', 'Miszkiel', 'Latek', 'Kurzydło',
        'Kucharz', 'Giec', 'Wajdzik', 'Mazik', 'Klimko', 'Kleina', 'Dorawa', 'Perczak', 'Lang',
        'Grunt', 'Cywka', 'Batóg', 'Widłak', 'Miszta', 'Kość', 'Kosidło', 'Aleksander',
        'Marchlewicz', 'Korkosz', 'Beśka', 'Bak', 'Stoch', 'Makles', 'Hudzik', 'Hornik', 'Bujko',
        'Ziętal', 'Zawal', 'Sochaj', 'Podpora', 'Małyszek', 'Maćków', 'Latacz', 'Kozdra', 'Kosno',
        'Gogół', 'Fit', 'Bienia', 'Wendt', 'Szyda', 'Suchoń', 'Sobel', 'Lesiewicz', 'Koleśnik',
        'Kinder', 'Kasper', 'Jaszczyszyn', 'Weremczuk', 'Steinke', 'Sądej', 'Puła', 'Nowrot',
        'Nowotny', 'Majorczyk', 'Kunert', 'Jerzyk', 'Capała', 'Bartoś', 'Wojciech', 'Stelmasiak',
        'Portka', 'Pietrak', 'Łuksza', 'Kulma', 'Jeske', 'Góraj', 'Fyda', 'Siemion', 'Rusiniak',
        'Flisiak', 'Cherek', 'Bryndza', 'Zioła', 'Zapaśnik', 'Raszkiewicz', 'Pszczółka', 'Pałgan',
        'Kozar', 'Gumienny', 'Fedak', 'Erdmann', 'Matura', 'Kapera', 'Golan', 'Szczesiak',
        'Szambelan', 'Półchłopek', 'Łuszczyk', 'Szymocha', 'Pielka', 'Macioł', 'Brudny', 'Babij',
        'Zacharczuk', 'Pilarek', 'Owsianka', 'Harasimiuk', 'Durlak', 'Długajczyk', 'Wijata',
        'Szyndler', 'Morka', 'Mendyka', 'Kubiaczyk', 'Kij', 'Gaudyn', 'Bok', 'Posłuszny', 'Plich',
        'Pacyga', 'Miętus', 'Ficner', 'Świerkosz', 'Krzywoń', 'Kojder', 'Kiepura', 'Godzisz',
        'Ciuba', 'Bukowiec', 'Wlaźlak', 'Teterycz', 'Ścibisz', 'Sobkiewicz', 'Raczkiewicz',
        'Konrad', 'Kohut', 'Gonet', 'Frydel', 'Dyka', 'Siemek', 'Ośko', 'Gospodarek', 'Stryjek',
        'Labudda', 'Kosiec', 'Indyk', 'Franik', 'Fiołka', 'Strycharz', 'Ostapczuk', 'Laszczyk',
        'Lament', 'Korzekwa', 'Kędziorek', 'Dziuban', 'Biegała', 'Witoń', 'Szpara', 'Padło',
        'Otremba', 'Mierzwiak', 'Kordus', 'Bojczuk', 'Szmelter', 'Rudzik', 'Madzia', 'Grabara',
        'Górkiewicz', 'Bartel', 'Śliz', 'Sura', 'Skrzecz', 'Puto', 'Pułka', 'Piotrowiak', 'Mazan',
        'Kobryń', 'Klatka', 'Januchta', 'Grubba', 'Zaucha', 'Sularz', 'Siergiej', 'Pianka',
        'Jędruszczak', 'Groth', 'Sobisz', 'Siejak', 'Rećko', 'Lorens', 'Cegła', 'Wochnik', 'Kuryś',
        'Gregorowicz', 'Filek', 'Salawa', 'Piekarek', 'Pabisiak', 'Glonek', 'Butrym', 'Przewoźniak',
        'Macek', 'Konstanty', 'Kolber', 'Jędrasiak', 'Wężyk', 'Szaj', 'Malara', 'Kłoczko',
        'Karsznia', 'Golenia', 'Zajko', 'Wudarczyk', 'Stanuch', 'Niklewicz', 'Matejczyk', 'Kopyto',
        'Grygorowicz', 'Szajda', 'Stachelek', 'Słyk', 'Loska', 'Job', 'Dziadura', 'Dworniczak',
        'Skubis', 'Obst', 'Kazimierczyk', 'Cymer', 'Ciak', 'Chudoba', 'Achtelik', 'Tytko', 'Skupin',
        'Skierka', 'Panuś', 'Pabiś', 'Folta', 'Bogaczyk', 'Basa', 'Trzpil', 'Morek', 'Kloska',
        'Kapustka', 'Gzyl', 'Gołoś', 'Danel', 'Borkiewicz', 'Araszkiewicz', 'Miotke', 'Rezler',
        'Potyrała', 'Pacholak', 'Herba', 'Grzenia', 'Giezek', 'Gajowiak', 'Filak', 'Fechner',
        'Droździk', 'Cyman', 'Wieczerzak', 'Stróż', 'Staciwa', 'Ruchała', 'Rogal', 'Reszke',
        'Kurpisz', 'Gryga', 'Stempniak', 'Matraszek', 'Kózka', 'Elsner', 'Boba', 'Barłóg',
        'Kiliszek', 'Jessa', 'Ignatiuk', 'Gogola', 'Drobek', 'Lica', 'Larysz', 'Kalka', 'Dziczek',
        'Czupryn', 'Żołna', 'Pytko', 'Misiarz', 'Majnusz', 'Kaszkowiak', 'Jonak', 'Basista',
        'Potęga', 'Natanek', 'Matyszczak', 'Majerczyk', 'Łapaj', 'Korzonek', 'Jaśko', 'Futyma',
        'Duszczyk', 'Antończak', 'Wysota', 'Dela', 'Stawowczyk', 'Milczarczyk', 'Malisz',
        'Andrearczyk', 'Żynda', 'Swaczyna', 'Ryndak', 'Moskalik', 'Mitoraj', 'Łyś', 'Łepek',
        'Knieć', 'Janisz', 'Gorol', 'Ciężka', 'Żyrek', 'Zmarzły', 'Wojtaszczyk', 'Szyguła',
        'Szalast', 'Rząd', 'Nicewicz', 'Danieluk', 'Bulak', 'Wojtasiewicz', 'Pleskot', 'Materek',
        'Kurczak', 'Dytko', 'Świstek', 'Szafarz', 'Litwa', 'Kreczmer', 'Idec', 'Grabczak',
        'Goliszek', 'Flieger', 'Filiks', 'Dyszy', 'Błażejczak', 'Maksimowicz', 'Komisarczyk',
        'Jewuła', 'Hallmann', 'Gabara', 'Budzyń', 'Andruszko', 'Pałyga', 'Moj', 'Koterba', 'Gruza',
        'Gamoń', 'Pasierbek', 'Kuchciak', 'Kanik', 'Cis', 'Zegar', 'Sadlik', 'Paprotny', 'Nalazek',
        'Mikita', 'Kucab', 'Kranc', 'Godzik', 'Sip', 'Powałka', 'Penkala', 'Pachuta', 'Nagel',
        'Litwinowicz', 'Kukuczka', 'Knysak', 'Fojt', 'Brejnak', 'Tasarz', 'Zielke', 'Zaraś',
        'Zaranek', 'Waleczek', 'Rubaj', 'Bazylewicz', 'Banyś', 'Balawender', 'Zmuda', 'Wojcik',
        'Łabno', 'Gęsiarz', 'Frost', 'Bany', 'Żero', 'Rudowicz', 'Nyk', 'Milcarz', 'Lipowicz',
        'Kycia', 'Kościołek', 'Korda', 'Berus', 'Wiese', 'Olkowicz', 'Dzieża', 'Doroszkiewicz',
        'Cetera', 'Pazdan', 'Pacia', 'Kempka', 'Dydak', 'Ścibior', 'Szyjka', 'Pyziak', 'Pleśniak',
        'Maszczyk', 'Ludwiniak', 'Zadora', 'Strug', 'Mokwa', 'Łasak', 'Kulczak', 'Kruszona',
        'Zacharewicz', 'Miękina', 'Klaus', 'Glegoła', 'Wyderka', 'Maleszka', 'Malcherek', 'Lew',
        'Kulis', 'Bodzak', 'Błaziak', 'Bartłomiejczyk', 'Toś', 'Kubasiak', 'Dorobisz', 'Cukier',
        'Ciećko', 'Zapadka', 'Kłosowicz', 'Kasak', 'Czubaszek', 'Baumgart', 'Szemraj', 'Nogieć',
        'Burczak', 'Pietraś', 'Ostafin', 'Noculak', 'Kukieła', 'Fogel', 'Duczek', 'Cylwik',
        'Biernacik', 'Wydrych', 'Szajek', 'Siwczak', 'Majewicz', 'Łosiak', 'Karkut', 'Durys',
        'Chwalisz', 'Bembenek', 'Bartkowicz', 'Piskor', 'Mikus', 'Księżyk', 'Goss', 'Drewniok',
        'Bąkiewicz', 'Wódka', 'Wota', 'Prażmo', 'Kiwior', 'Bogdał', 'Rubacha', 'Hanus', 'Wasiewicz',
        'Trochimiuk', 'Szwiec', 'Suszka', 'Palak', 'Ziemann', 'Maćczak', 'Kruzel', 'Kołaczyk',
        'Kapka', 'Jodko', 'Jeszke', 'Gros', 'Gendek', 'Dubik', 'Ważna', 'Pierchała', 'Nieszporek',
        'Kandora', 'Janasz', 'Gryszkiewicz', 'Drobik', 'Ciołczyk', 'Wołkowicz', 'Tylman', 'Pituła',
        'Pioch', 'Pilich', 'Marach', 'Malon', 'Lepa', 'Kaliciak', 'Joszko', 'Hejna', 'Gryta',
        'Frelich', 'Bełz', 'Bakalarczyk', 'Nóżka', 'Holewa', 'Fierek', 'Żuchowicz', 'Wojtunik',
        'Trzop', 'Masłoń', 'Linda', 'Kurp', 'Gryka', 'Draus', 'Rezmer', 'Mizak', 'Makurat',
        'Kościk', 'Helman', 'Gendera', 'Dydo', 'Bondaruk', 'Bodek', 'Wujec', 'Sady', 'Przekwas',
        'Postawa', 'Polasik', 'Plebanek', 'Lejk', 'Kacperek', 'Gołofit', 'Tomys', 'Świadek',
        'Mizgała', 'Kubrak', 'Ernst', 'Wielgos', 'Martynowicz', 'Drela', 'Ziarnik', 'Stasica',
        'Semik', 'Mytych', 'Melka', 'Marat', 'Dąbrówka', 'Wyroba', 'Siudek', 'Senator',
        'Ryszkiewicz', 'Podsiedlik', 'Małys', 'Lepianka', 'Giersz', 'Zugaj', 'Procek', 'Makosz',
        'Kunda', 'Ziółko', 'Trzyna', 'Stroka', 'Rzeszut', 'Pyza', 'Krężołek', 'Kazior', 'Fidos',
        'Sołek', 'Gordon', 'Dubis', 'Ciochoń', 'Bieszke', 'Żołnierczyk', 'Sobstyl', 'Skalik',
        'Namysło', 'Litewka', 'Krzysztofek', 'Grycz', 'Feluś', 'Downar', 'Szram', 'Oleksik',
        'Milej', 'Kudela', 'Klaja', 'Giedrojć', 'Getka', 'Durma', 'Dudko', 'Dębosz', 'Browarczyk',
        'Sąsiadek', 'Picheta', 'Peciak', 'Niećko', 'Midura', 'Maciejko', 'Gregorek', 'Wąsiewicz',
        'Twardy', 'Szachniewicz', 'Sypek', 'Sojda', 'Saran', 'Mosiołek', 'Guściora', 'Golak',
        'Ellwart', 'Drewicz', 'Barszczak', 'Wójt', 'Strawa', 'Sereda', 'Rejmer', 'Prostak', 'Kołak',
        'Klekot', 'Gerlach', 'Ciepła', 'Barankiewicz', 'Welc', 'Skotarek', 'Sadłocha',
        'Roszkiewicz', 'Połetek', 'Ofiara', 'Kiełbus', 'Kałwak', 'Jas', 'Jarkiewicz', 'Jambor',
        'Hartman', 'Graś', 'Raźniak', 'Janc', 'Doroz', 'Baster', 'Banak', 'Spólnik', 'Poreda',
        'Orwat', 'Matyjas', 'Laskus', 'Bajak', 'Witko', 'Ślimak', 'Sapeta', 'Sadownik', 'Roszko',
        'Nazarewicz', 'Mrotek', 'Gnyp', 'Dziarmaga', 'Zaniewicz', 'Walusiak', 'Toborek', 'Szulim',
        'Pawliczak', 'Nikołajuk', 'Myszor', 'Mila', 'Liedtke', 'Korpal', 'Jaźwiec', 'Groborz',
        'Świerkot', 'Sabała', 'Kluj', 'Żach', 'Wawrzyńczyk', 'Szumiło', 'Sulich', 'Stępak',
        'Rutowicz', 'Krzyszczak', 'Kiełbik', 'Gogol', 'Buszkiewicz', 'Basaj', 'Bartuś', 'Samulak',
        'Ryfa', 'Potoczna', 'Panicz', 'Leśny', 'Lada', 'Kuska', 'Gleba', 'Folga', 'Barczuk',
        'Ślebioda', 'Olma', 'Kuśnierek', 'Krzan', 'Hubert', 'Grzebyk', 'Fras', 'Durlej', 'Pielach',
        'Klin', 'Jędrak', 'Frelek', 'Brząkała', 'Borysiak', 'Zagozda', 'Śliż', 'Szkopek', 'Raźny',
        'Olearczyk', 'Mirończuk', 'Chyb', 'Żybura', 'Żelazo', 'Kunka', 'Kosałka', 'Gosz', 'Dulas',
        'Żelazek', 'Terka', 'Sośniak', 'Pikor', 'Pezda', 'Hadam', 'Groń', 'Fal', 'Chalimoniuk',
        'Karnas', 'Uziębło', 'Grochola', 'Gawliczek', 'Freitag', 'Ćmiel', 'Wacław', 'Symonowicz',
        'Strzoda', 'Sterna', 'Spadło', 'Rajtar', 'Krzykała', 'Holc', 'Gronostaj', 'Barej',
        'Wasilewicz', 'Podgórny', 'Łapot', 'Lepak', 'Hojda', 'Dziuda', 'Klupś', 'Brzeźniak',
        'Bojarczuk', 'Tryka', 'Nalewajek', 'Kudłacik', 'Kubasiewicz', 'Bazyluk', 'Bartoszak',
        'Zbylut', 'Tołoczko', 'Szaruga', 'Obuchowicz', 'Gryska', 'Bociek', 'Wowra', 'Szramka',
        'Spychaj', 'Roj', 'Musiolik', 'Franas', 'Dłubak', 'Cholewka', 'Bobko', 'Białous', 'Osial',
        'Nieborak', 'Minta', 'Kozica', 'Kowara', 'Gwara', 'Tekieli', 'Pancerz', 'Mleczak', 'Celuch',
        'Zapiór', 'Graboś', 'Fidura', 'Cyrek', 'Bracha', 'Gradek', 'Noras', 'Mulawa', 'Moniuszko',
        'Kapcia', 'Gumienna', 'Graj', 'Gilewicz', 'Żółtek', 'Wojtalewicz', 'Szumny', 'Opyrchał',
        'Macha', 'Łuczyk', 'Hus', 'Czak', 'Borzym', 'Wojtczuk', 'Winnik', 'Kuk', 'Kubanek',
        'Dziełak', 'Dudziec', 'Cimoch', 'Ciapa', 'Buchalik', 'Zbróg', 'Węgrzyniak', 'Wawrzkiewicz',
        'Teodorowicz', 'Szkoła', 'Sutor', 'Kapuścik', 'Hajdas', 'Fołta', 'Burkiewicz', 'Aleksa',
        'Wajer', 'Siembab', 'Kozon', 'Wojewódka', 'Wenda', 'Majos', 'Huczek', 'Domoń', 'Zubel',
        'Szymaniuk', 'Salomon', 'Mikiciuk', 'Grodek', 'Wielądek', 'Szymańczak', 'Sommer', 'Saczuk',
        'Pastuszek', 'Mroczko', 'Łokaj', 'Deptuch', 'Wawak', 'Szczepaniec', 'Romejko', 'Rogacz',
        'Poczta', 'Nowotka', 'Jaszcz', 'Jany', 'Hewelt', 'Stachów', 'Smykla', 'Sędek', 'Niemira',
        'Młodzik', 'Łyczek', 'Kleban', 'Fura', 'Fudalej', 'Cyroń', 'Zagożdżon', 'Kenig',
        'Górnisiewicz', 'Wołoszyk', 'Szatanik', 'Sajda', 'Pyrkosz', 'Misiejuk', 'Mikołajewicz',
        'Kołsut', 'Glenc', 'Eckert', 'Dziadowicz', 'Waszczyk', 'Szyba', 'Steckiewicz', 'Kloch',
        'Kabala', 'Zamora', 'Tabiś', 'Sobków', 'Pupek', 'Neugebauer', 'Kołtuniak', 'Galek', 'Stój',
        'Rajda', 'Pruchnik', 'Kuza', 'Karaśkiewicz', 'Judek', 'Jędryczka', 'Grzegorzak', 'Drobniak',
        'Chowaniak', 'Wąsek', 'Smagacz', 'Pędzik', 'Klinger', 'Klęczar', 'Wochna', 'Rejek',
        'Krakowczyk', 'Kobak', 'Kawiak', 'Grosz', 'Czubaj', 'Chorążewicz', 'Zadka', 'Wietecha',
        'Sass', 'Męcik', 'Gustaw', 'Furga', 'Frącz', 'Dawiec', 'Wypchło', 'Tarasek', 'Szmaj',
        'Ornat', 'Huszcza', 'Dudczak', 'Ułanowicz', 'Rubin', 'Pich', 'Makoś', 'Krępa', 'Korek',
        'Jonik', 'Andrejczuk', 'Wiertel', 'Soroko', 'Składanek', 'Mortka', 'Małocha', 'Majsterek',
        'Lemanowicz', 'Lelito', 'Krystkowiak', 'Krasa', 'Kierat', 'Jędraszczyk', 'Handke',
        'Dymarczyk', 'Doruch', 'Beker', 'Peszko', 'Osik', 'Łyp', 'Karmelita', 'Herdzik', 'Brzęk',
        'Białczyk', 'Uss', 'Pitura', 'Łusiak', 'Knapek', 'Gumuła', 'Darłak', 'Znojek', 'Wilkos',
        'Rut', 'Przekop', 'Kręcichwost', 'Korab', 'Józwik', 'Jagiełka', 'Chylak', 'Zbiciak',
        'Wasążnik', 'Tłuczek', 'Syldatk', 'Parkitny', 'Juroszek', 'Wisz', 'Wiciak', 'Palonek',
        'Kusik', 'Kocurek', 'Kacperczyk', 'Bluszcz', 'Wydmuch', 'Wereda', 'Trybała', 'Sito',
        'Pietraszkiewicz', 'Nojek', 'Madziar', 'Kazana', 'Szulczyk', 'Rosołek', 'Roskosz', 'Proć',
        'Mazek', 'Koniecko', 'Horbacz', 'Zastawny', 'Orszulik', 'Mesjasz', 'Margas', 'Koźlak',
        'Dzidek', 'Damek', 'Zinkiewicz', 'Sznura', 'Sapała', 'Piaseczna', 'Osada', 'Koziarz',
        'Korta', 'Kłosiewicz', 'Klyszcz', 'Janoszek', 'Deszcz', 'Okła', 'Matacz', 'Hankiewicz',
        'Front', 'Daraż', 'Czura', 'Bylina', 'Bugiel', 'Anioła', 'Amanowicz', 'Zach', 'Starościak',
        'Kliszcz', 'Hadała', 'Czopik', 'Bytner', 'Wośko', 'Wawrzyn', 'Świt', 'Sanetra', 'Pyszczek',
        'Potaczek', 'Osman', 'Materka', 'Madura', 'Kniaź', 'Gryciuk', 'Fidor', 'Dunal', 'Dobroń',
        'Chlebda', 'Słupik', 'Osica', 'Oleksak', 'Maraszek', 'Kręgiel', 'Kopytko', 'Gomoła',
        'Droździel', 'Szott', 'Szkup', 'Posmyk', 'Młotek', 'Klejna', 'Jałowiec', 'Heinrich',
        'Haraburda', 'Grupa', 'Dziadkiewicz', 'Zaczyk', 'Rapa', 'Łodej', 'Lempart', 'Lamch',
        'Głuszko', 'Cudzich', 'Brojek', 'Ziemak', 'Tusk', 'Kieloch', 'Dziduch', 'Dudkowiak',
        'Czerner', 'Sommerfeld', 'Migoń', 'Macheta', 'Dusik', 'Ćwirko', 'Bilik', 'Sydor', 'Swiątek',
        'Sporek', 'Olesiejuk', 'Kutek', 'Jaszczur', 'Jarmuż', 'Gronkiewicz', 'Witan', 'Staniczek',
        'Rząca', 'Roter', 'Pracz', 'Hnat', 'Cydzik', 'Szatko', 'Styrna', 'Podleśna', 'Oleksa',
        'Nieścior', 'Matyjaszek', 'Łasica', 'Kwapień', 'Koronkiewicz', 'Hołota', 'Elert',
        'Czochara', 'Toczko', 'Święs', 'Słysz', 'Salach', 'Leśna', 'Głownia', 'Galica', 'Cieniuch',
        'Szulist', 'Pedrycz', 'Królczyk', 'Zyzik', 'Zaborek', 'Skałka', 'Sankiewicz', 'Pleban',
        'Martin', 'Lewek', 'Jędrys', 'Guzdek', 'Dumała', 'Wszoła', 'Rębiś', 'Pośnik', 'Porzucek',
        'Hawro', 'Dziób', 'Zwara', 'Wiraszka', 'Romankiewicz', 'Roch', 'Paleń', 'Ogonek', 'Makar',
        'Majdan', 'Kozdrój', 'Kozdroń', 'Jachna', 'Duniec', 'Dułak', 'Wojtanowicz', 'Waloch',
        'Ubysz', 'Stożek', 'Małycha', 'Kmak', 'Hass', 'Frydrychowicz', 'Domka', 'Żugaj', 'Zubowicz',
        'Wyrwał', 'Mordal', 'Kordys', 'Gozdur', 'Gabrych', 'Zbrożek', 'Zbroszczyk', 'Wojtoń',
        'Tórz', 'Torbus', 'Letkiewicz', 'Lampart', 'Superson', 'Sopata', 'Sobiło', 'Sapa', 'Salwin',
        'Pera', 'Organiściak', 'Matwiejczyk', 'Matejuk', 'Mały', 'Krüger', 'Dyszkiewicz', 'Basak',
        'Ankiewicz', 'Adamiuk', 'Sykała', 'Skonieczka', 'Pawełko', 'Nojman', 'Iskierka', 'Zięcik',
        'Trojanek', 'Sadlak', 'Nieradko', 'Behrendt', 'Wojewodzic', 'Polewka', 'Zasępa', 'Szczerek',
        'Szałata', 'Sot', 'Mleczek', 'Kukawka', 'Kaczmarkiewicz', 'Dorobek', 'Burchard', 'Blaut',
        'Witka', 'Sasak', 'Pasiak', 'Panasiewicz', 'Motak', 'Lizurej', 'Kuboń', 'Jędraszek',
        'Dylik', 'Cal', 'Buszko', 'Burnat', 'Wyskiel', 'Winek', 'Wiertelak', 'Wiak', 'Roś',
        'Orzeszek', 'Ochota', 'Mijas', 'Maculewicz', 'Kaja', 'Ciesielka', 'Bejm', 'Szmuc', 'Sygut',
        'Siarkiewicz', 'Ryznar', 'Patoka', 'Miszkurka', 'Kudełka', 'Krzyśko', 'Galon', 'Buczma',
        'Ziegler', 'Uroda', 'Turczyk', 'Tolak', 'Sypuła', 'Sadowy', 'Rasała', 'Kazubek', 'Han',
        'Wasiuk', 'Stempin', 'Stawczyk', 'Prokopiak', 'Pospiech', 'Polakiewicz', 'Olas',
        'Maruszczyk', 'Kapinos', 'Kabza', 'Szwałek', 'Smagała', 'Musiała', 'Miksza', 'Lampa',
        'Kulon', 'Koczara', 'Drynda', 'Szczypiór', 'Pawełkiewicz', 'Myk', 'Kuczak', 'Kołata',
        'Żywica', 'Tondera', 'Szmalec', 'Szczap', 'Sypień', 'Sołtysek', 'Mosur', 'Kościesza',
        'Kosowicz', 'Kolendo', 'Huber', 'Giel', 'Gałęza', 'Dyja', 'Cacko', 'Apanowicz', 'Wandas',
        'Siebert', 'Moneta', 'Ziajka', 'Sieg', 'Paluszak', 'Lichoń', 'Kastelik', 'Gwizdek', 'Drewa',
        'Andrys', 'Zbrzeźniak', 'Wlazły', 'Wittbrodt', 'Niksa', 'Habdas', 'Fryś', 'Doktór', 'Detka',
        'Cieplucha', 'Ciarka', 'Witkowicz', 'Wardzała', 'Stąpór', 'Pniak', 'Pierzak', 'Kryk',
        'Kożuszek', 'Kohnke', 'Kapałka', 'Domino', 'Czuj', 'Boksa', 'Wocial', 'Stuglik', 'Steciuk',
        'Smela', 'Plona', 'Piwowarek', 'Pernak', 'Minkina', 'Klos', 'Halik', 'Dzika', 'Dargacz',
        'Damian', 'Adrian', 'Węgrzynek', 'Tomal', 'Świerad', 'Szkatuła', 'Sajnóg', 'Kudlak',
        'Golczyk', 'Fronczyk', 'Czapiga', 'Błażejak', 'Bejma', 'Bartela', 'Tadeusiak', 'Nędzi',
        'Kurcz', 'Jasionek', 'Heleniak', 'Ziarek', 'Zera', 'Sarniak', 'Różak', 'Ligas', 'Kuzior',
        'Kuder', 'Korzeniak', 'Fac', 'Domowicz', 'Dębniak', 'Cieciora', 'Chaberek', 'Bogusiewicz',
        'Block', 'Wardziak', 'Prawdzik', 'Niebudek', 'Jeszka', 'Szpyrka', 'Szkaradek', 'Starek',
        'Pasich', 'Lademann', 'Jantos', 'Grzelec', 'Zapora', 'Wnuczek', 'Wąsala', 'Pompa', 'Małas',
        'Janka', 'Gałaj', 'Dybał', 'Chromy', 'Szpyt', 'Senger', 'Prygiel', 'Pawela', 'Łakota',
        'Jama', 'Graban', 'Fogt', 'Cebulak', 'Boryczko', 'Bojdo', 'Biesek', 'Arendarczyk',
        'Schubert', 'Namysł', 'Milewczyk', 'Hetmańczyk', 'Dyczko', 'Dankiewicz', 'Czerniec',
        'Staśko', 'Rochowiak', 'Misiuk', 'Markiel', 'Ksel', 'Krzyżostaniak', 'Elwart', 'Delekta',
        'Zębik', 'Siatka', 'Niewiara', 'Miozga', 'Mętel', 'Korgul', 'Karwan', 'Franków', 'Domek',
        'Ciepluch', 'Chojna', 'Surmiak', 'Strama', 'Stein', 'Siewiera', 'Robaszkiewicz', 'Piksa',
        'Kociemba', 'Klyta', 'Gromala', 'Gill', 'Broszkiewicz', 'Zontek', 'Stiller', 'Rosada',
        'Mieloch', 'Kornak', 'Goworek', 'Gadzała', 'Fitas', 'Uzar', 'Siedlarz', 'Rorat', 'Oskroba',
        'Mitera', 'Grygorcewicz', 'Gmurczyk', 'Dylak', 'Zybura', 'Wojtaszak', 'Wisła', 'Wasyluk',
        'Szałkiewicz', 'Krzysztoszek', 'Kościuszko', 'Kasiak', 'Wyrwich', 'Wołoszczuk', 'Śledzik',
        'Smorąg', 'Satora', 'Pochroń', 'Melaniuk', 'Jajko', 'Czajor', 'Bajko', 'Wojsław', 'Szumiec',
        'Nehring', 'Naumiuk', 'Luberda', 'Kęsek', 'Jaśkowiec', 'Foit', 'Fita', 'Fedyk', 'Działa',
        'Cygal', 'Zdancewicz', 'Walocha', 'Toma', 'Soczewka', 'Monkiewicz', 'Majtyka', 'Hynek',
        'Dynia', 'Czuryło', 'Bernatek', 'Apostel', 'Zawiasa', 'Piersa', 'Megger', 'Kukier', 'Jarka',
        'Glazik', 'Dyjas', 'Buś', 'Bona', 'Bandyk', 'Zięciak', 'Krajniak', 'Koperek', 'Kazberuk',
        'Dziewior', 'Chachaj', 'Sołoducha', 'Słomiany', 'Skolik', 'Pęksa', 'Mularz', 'Kosman',
        'Kolonko', 'Januszewicz', 'Gramza', 'Foremniak', 'Fijałek', 'Cierpka', 'Polnik', 'Drwięga',
        'Semenowicz', 'Pieszak', 'Narożna', 'Ładniak', 'Kontny', 'Klemens', 'Jancewicz', 'Fąferek',
        'Bisaga', 'Złotnik', 'Wosiek', 'Supernak', 'Kala', 'Giża', 'Bielat', 'Żyto', 'Rompa',
        'Kurpanik', 'Kołpak', 'Gołas', 'Długozima', 'Bacia', 'Wincenciak', 'Styn', 'Moczko',
        'Langier', 'Szrama', 'Szok', 'Suchenek', 'Pieczarka', 'Parus', 'Machul', 'Latko',
        'Krzyśków', 'Galos', 'Ekert', 'Dawidek', 'Czerkies', 'Bujas', 'Andryszczyk', 'Zuziak',
        'Węgrzyk', 'Stąpor', 'Pinda', 'Muzyk', 'Maligłówka', 'Łukasiuk', 'Kinal', 'Dobosiewicz',
        'Waraksa', 'Szywała', 'Nastały', 'Mordak', 'Ligenza', 'Leszczak', 'Krauz', 'Kopała',
        'Byzdra', 'Bartman', 'Wojtach', 'Wałaszek', 'Szara', 'Hapka', 'Wielgat', 'Węgier', 'Pokusa',
        'Małż', 'Kononowicz', 'Hawrylak', 'Grund', 'Druszcz', 'Dacko', 'Sprycha', 'Pryszcz',
        'Łachut', 'Dobrosz', 'Brygoła', 'Ryguła', 'Posłuszna', 'Mydlak', 'Bernard', 'Woroch',
        'Uliczka', 'Tomaszuk', 'Pastuła', 'Pachnik', 'Kudra', 'Kretek', 'Keler', 'Heczko', 'Beck',
        'Tekiela', 'Plizga', 'Piekacz', 'Ochab', 'Maziarczyk', 'Krzosek', 'Gabryelczyk', 'Stępka',
        'Rajch', 'Owsiany', 'Kossak', 'Kocaj', 'Gierach', 'Buza', 'Berendt', 'Tabak', 'Przewłoka',
        'Nytko', 'Kuban', 'Gebauer', 'Gajcy', 'Franaszek', 'Chwedczuk', 'Bochnak', 'Stachewicz',
        'Sosnówka', 'Słowiak', 'Mądro', 'Malcharek', 'Łukasz', 'Kornek', 'Hanusiak',
        'Furmankiewicz', 'Dzikiewicz', 'Duży', 'Delikat', 'Chojak', 'Zyga', 'Pyrz', 'Pietrusiewicz',
        'Olszyna', 'Olszowa', 'Ograbek', 'Molga', 'Maron', 'Jasica', 'Frymus', 'Buszta', 'Woszczak',
        'Woronko', 'Trawka', 'Rychcik', 'Przystupa', 'Oczko', 'Migda', 'Klebba', 'Jaje', 'Grabas',
        'Bugno', 'Bortkiewicz', 'Wesoła', 'Sudak', 'Puc', 'Przeklasa', 'Kocoł', 'Goik',
        'Błażejewicz', 'Tuzimek', 'Petrus', 'Pawlaczek', 'Pacholczak', 'Maciejewicz', 'Jakóbik',
        'Frania', 'Duszczak', 'Domurad', 'Bednarowicz', 'Thomas', 'Rakus', 'Przybyś', 'Pasiut',
        'Małyszka', 'Kurz', 'Kuczaj', 'Doktor', 'Tadla', 'Praczyk', 'Milka', 'Leszcz', 'Kryza',
        'Kryszczuk', 'Juraszczyk', 'Durczok', 'Boduch', 'Szeja', 'Pryk', 'Pitala', 'Molek',
        'Duchnik', 'Brachaczek', 'Wieja', 'Waloszek', 'Nawrotek', 'Nawój', 'Mironiuk', 'Matyjasek',
        'Łachacz', 'Kubów', 'Kidawa', 'Jaremek', 'Hasiak', 'Gierat', 'Gawłowicz', 'Wichary',
        'Sornat', 'Solich', 'Kurczab', 'Jasnoch', 'Famuła', 'Budrewicz', 'Pawliszyn', 'Kułach',
        'Kuffel', 'Konieczek', 'Koćwin', 'Imiołczyk', 'Dyda', 'Zander', 'Stochel', 'Osojca',
        'Mysior', 'Kuciak', 'Kłósek', 'Buchholz', 'Zegadło', 'Wiewiórka', 'Stochaj', 'Smolka',
        'Piotrak', 'Misior', 'Leoniak', 'Karwala', 'Jasina', 'Cięciwa', 'Ciastek', 'Chadaj',
        'Białach', 'Tabisz', 'Such', 'Sromek', 'Rysz', 'Puch', 'Plak', 'Palej', 'Och', 'Niedbał',
        'Mytnik', 'Morgała', 'Lukas', 'Lisoń', 'Królikiewicz', 'Kamieniak', 'Jachimczyk',
        'Grzywnowicz', 'Frukacz', 'Feliniak', 'Dzienisz', 'Drążyk', 'Żelasko', 'Waloszczyk',
        'Strójwąs', 'Smoczyk', 'Klorek', 'Kajdan', 'Kajak', 'Gral', 'Zawodnik', 'Ulfik',
        'Sobieszczyk', 'Skrobot', 'Ochał', 'Leżoń', 'Krywult', 'Iciek', 'Gasek', 'Czenczek',
        'Budzeń', 'Botor', 'Wikło', 'Tymczyszyn', 'Szpyra', 'Słonka', 'Prasek', 'Majczyna', 'Lula',
        'Jakubiuk', 'Hanzel', 'Głowiak', 'Calik', 'Zagrajek', 'Stefankiewicz', 'Serzysko',
        'Piechna', 'Myga', 'Maślankiewicz', 'Kuziora', 'Korniak', 'Indyka', 'Gałach', 'Gadzina',
        'Cyba', 'Bystrek', 'Bazela', 'Wabik', 'Ragus', 'Pitek', 'Mizia', 'Łaskawiec', 'Holeksa',
        'Hajdasz', 'Fugiel', 'Białasik', 'Woźniczko', 'Wilma', 'Rode', 'Preś', 'Komander', 'Klus',
        'Sarosiek', 'Sadoch', 'Osipowicz', 'Lelonek', 'Korbut', 'Jarmużek', 'Włodyka', 'Józefczak',
        'Jędra', 'Hamerla', 'Gęgotek', 'Domińczak', 'Wypiór', 'Sudnik', 'Słoboda', 'Pela', 'Kupś',
        'Kostorz', 'Kosak', 'Kopyść', 'Jarmuła', 'Daniec', 'Blank', 'Balcewicz', 'Starostka',
        'Siemieńczuk', 'Reiter', 'Mycek', 'Miętka', 'Łupina', 'Lipok', 'Knych', 'Drobisz', 'Cuch',
        'Wojtarowicz', 'Wojniak', 'Piechura', 'Meissner', 'Lemiesz', 'Klęk', 'Jargieło', 'Jamroz',
        'Huczko', 'Ceynowa', 'Trochim', 'Kremer', 'Janic', 'Gal', 'Cyrulik', 'Bejger', 'Bawoł',
        'Szczepan', 'Plewnia', 'Pędrak', 'Niedośpiał', 'Maras', 'Klepka', 'Kawulok', 'Katana',
        'Bronka', 'Bender', 'Bałdys', 'Wawrzonek', 'Taranek', 'Tadych', 'Szymała', 'Stebel', 'Skup',
        'Skubała', 'Pasieczna', 'Karkocha', 'Hak', 'Gąszczak', 'Pyś', 'Prażuch', 'Politowicz',
        'Piestrzeniewicz', 'Pajek', 'Nitek', 'Kozok', 'Kowala', 'Kalinka', 'Galuba', 'Buk', 'Breś',
        'Bodych', 'Bittner', 'Bakiera', 'Rembacz', 'Podgórna', 'Myrcik', 'Mojsa', 'Karpiak',
        'Kajdas', 'Gregorczuk', 'Dziurla', 'Dzienniak', 'Dyrek', 'Żołądkiewicz', 'Szumacher',
        'Sado', 'Pyszny', 'Narożny', 'Kuszyk', 'Jakimiak', 'Dynak', 'Dejneka', 'Wiekiera',
        'Tatarczuk', 'Rudyk', 'Nieścioruk', 'Laszkiewicz', 'Gołota', 'Golisz', 'Bąbel', 'Taczała',
        'Świć', 'Siciarz', 'Ropiak', 'Pacura', 'Makulec', 'Krauza', 'Grzesiek', 'Gemza', 'Dering',
        'Banek', 'Andziak', 'Wiza', 'Trojanowicz', 'Parkitna', 'Pacholik', 'Majtczak', 'Krenc',
        'Koniec', 'Wawrzeńczyk', 'Stupak', 'Roda', 'Maciejczuk', 'Irla', 'Husak', 'Fuławka',
        'Fabiańczyk', 'Bryda', 'Zackiewicz', 'Szoka', 'Melcer', 'Kempny', 'Dulemba', 'Duc',
        'Ziniewicz', 'Truchel', 'Szajner', 'Petryk', 'Peda', 'Obarzanek', 'Maszkiewicz', 'Łabaj',
        'Cymbała', 'Biesaga', 'Zdobylak', 'Wojtiuk', 'Ulrych', 'Szymków', 'Sporysz', 'Smardz',
        'Mandrysz', 'Kulus', 'Duras', 'Dumin', 'Borejko', 'Wyłupek', 'Ufniarz', 'Stypka',
        'Młyńczyk', 'Miros', 'Maciuk', 'Hrabia', 'Burzec', 'Buksa', 'Wygoda', 'Tomzik', 'Pindral',
        'Nijak', 'Mszyca', 'Maciejuk', 'Kudłacz', 'Dziwak', 'Chaba', 'Borkowicz', 'Berek',
        'Żakiewicz', 'Wykręt', 'Sztuba', 'Smykała', 'Pyc', 'Pęciak', 'Parzonka', 'Kyc', 'Klemczak',
        'Gąsienica', 'Gabryszak', 'Częścik', 'Cisoń', 'Zmyślony', 'Komisarek', 'Ficoń', 'Citko',
        'Bidas', 'Bas', 'Żabierek', 'Wyciszkiewicz', 'Tarach', 'Staniewicz', 'Reichel',
        'Panasewicz', 'Kucewicz', 'Kilar', 'Hein', 'Fronia', 'Derek', 'Bruś', 'Antoń', 'Pawlos',
        'Ochwat', 'Kurbiel', 'Gosik', 'Gierasimiuk', 'Doroba', 'Chłąd', 'Wrochna', 'Protasiuk',
        'Opalach', 'Mućko', 'Martyn', 'Drgas', 'Ceran', 'Bryczek', 'Ziarno', 'Wołodźko', 'Wac',
        'Szpala', 'Szlachcic', 'Rurka', 'Oczkowicz', 'Mik', 'Małysiak', 'Kubek', 'Imiela', 'Graboń',
        'Garbacik', 'Dolega', 'Broncel', 'Baum', 'Bancerz', 'Siedlik', 'Miąsko', 'Lenc', 'Konat',
        'Kaletka', 'Jenek', 'Honkisz', 'Droś', 'Suchojad', 'Ratka', 'Raba', 'Lulek', 'Komperda',
        'Kołodziejak', 'Koloch', 'Kolka', 'Joniak', 'Jezior', 'Faltyn', 'Dyjach', 'Czulak', 'Cop',
        'Wyroślak', 'Woda', 'Stranc', 'Solis', 'Skomra', 'Sierpień', 'Rzeźniczek', 'Pajdak',
        'Mostek', 'Machowiak', 'Janduła', 'Fitrzyk', 'Welenc', 'Tyczka', 'Skiepko', 'Potok',
        'Olewniczak', 'Nitkiewicz', 'Myrcha', 'Krata', 'Kara', 'Hołysz', 'Hałka', 'Florian',
        'Dziurdzia', 'Dryka', 'Sysło', 'Rolek', 'Młocek', 'Idzi', 'Haponiuk', 'Grębowiec', 'Gęca',
        'Bochnia', 'Ślipek', 'Sieczko', 'Pierz', 'Nyc', 'Łacina', 'Ludwisiak', 'Kujda', 'Hutyra',
        'Dziugieł', 'Białka', 'Zemanek', 'Zawartka', 'Smyl', 'Smolec', 'Słoka', 'Putek',
        'Pietrewicz', 'Lepka', 'Krzeszowiec', 'Kowalówka', 'Jośko', 'Hamrol', 'Gapys', 'Antoszczyk',
        'Turoń', 'Teter', 'Surdel', 'Pieczyrak', 'Mudlaff', 'Manista', 'Kolek', 'Kadela', 'Jeka',
        'Jamrożek', 'Goliasz', 'Dywan', 'Drewnik', 'Dąbroś', 'Ciaś', 'Obiała', 'Nocek', 'Marko',
        'Ładziak', 'Hadaś', 'Dulik', 'Dorynek', 'Wolańczyk', 'Stoltmann', 'Rozumek', 'Łudzik',
        'Łaś', 'Leoniuk', 'Krzyk', 'Karol', 'Kamyszek', 'Filusz', 'Czermak', 'Budych', 'Żółkiewicz',
        'Tatarczyk', 'Pietrus', 'Pachowicz', 'Niesporek', 'Kultys', 'Kornet', 'Kajstura',
        'Grześków', 'Dub', 'Drobot', 'Urynowicz', 'Swacha', 'Prokopczuk', 'Michnowicz', 'Malka',
        'Labocha', 'Capiga', 'Zawalich', 'Wizner', 'Startek', 'Smolorz', 'Rozynek', 'Pal',
        'Madajczyk', 'Ławniczek', 'Haremza', 'Bejnarowicz', 'Żuberek', 'Windak', 'Sobolak',
        'Sibiga', 'Rajczak', 'Pudełek', 'Michalkiewicz', 'Fularczyk', 'Broniarek', 'Żabka',
        'Towarek', 'Sugier', 'Pikula', 'Pawlonka', 'Marosz', 'Kut', 'Grymuza', 'Dąbkiewicz',
        'Ciechowicz', 'Brodawka', 'Borzych', 'Bela', 'Zaguła', 'Tyniec', 'Trepczyk', 'Stwora',
        'Paczos', 'Olbrych', 'Ogrodowicz', 'Michel', 'Mazepa', 'Lazarek', 'Krzystek', 'Jażdżyk',
        'Goska', 'Fraszczyk', 'Drożdżal', 'Cofała', 'Chołody', 'Wawrzyk', 'Prokurat', 'Policht',
        'Płodzień', 'Pasztaleniec', 'Osipiuk', 'Mateńko', 'Kiciak', 'Grotek', 'Członka', 'Żal',
        'Zimmer', 'Wosiak', 'Srokosz', 'Paździora', 'Patoła', 'Pałęga', 'Orawiec', 'Nastaj',
        'Mirgos', 'Merda', 'Machniak', 'Łokietek', 'Fogiel', 'Elias', 'Świergiel', 'Stempel',
        'Skocz', 'Potoczek', 'Penar', 'Miecznik', 'Kwapis', 'Jakóbiak', 'Gietka', 'Flisek',
        'Dudzicz', 'Cich', 'Broniek', 'Wiercigroch', 'Usarek', 'Tryc', 'Szylar', 'Szczot', 'Ptok',
        'Prystupa', 'Preuss', 'Piekara', 'Łaszczyk', 'Kurzaj', 'Kopiczko', 'Jachimczak', 'Hirsch',
        'Dytrych', 'Dorna', 'Bystroń', 'Worach', 'Tokaj', 'Szmagaj', 'Solnica', 'Rejmak', 'Reimann',
        'Pazoła', 'Nieradzik', 'Miechowicz', 'Langiewicz', 'Kruś', 'Kozień', 'Kielczyk', 'Jargiło',
        'Dąbal', 'Cichos', 'Sorbian', 'Ruman', 'Piotrkowicz', 'Oziębło', 'Henke', 'Czosnyka',
        'Choina', 'Chabior', 'Warzybok', 'Seweryniak', 'Pyzel', 'Niewola', 'Nesterowicz', 'Liss',
        'Kiepas', 'Kalista', 'Demiańczuk', 'Cłapa', 'Błasik', 'Berdzik', 'Bełza', 'Złotek',
        'Tonder', 'Szwaj', 'Szarzec', 'Suchora', 'Sarota', 'Palica', 'Matula', 'Malecha', 'Magryta',
        'Łuckiewicz', 'Kuster', 'Stoltman', 'Siewert', 'Serwach', 'Schwarz', 'Kuźnia', 'Kuśmider',
        'Kurzac', 'Klisz', 'Gwardiak', 'Gotfryd', 'Deneka', 'Ciuruś', 'Żmija', 'Tałaj', 'Sobuś',
        'Rajman', 'Perlik', 'Kurda', 'Kosznik', 'Kaluga', 'Jaracz', 'Hanas', 'Dzwonnik', 'Ziegert',
        'Szyma', 'Różewicz', 'Paszkowiak', 'Maślach', 'Lewicz', 'Heba', 'Godzwon', 'Drej', 'Borak',
        'Adamów', 'Tywoniuk', 'Ścieszka', 'Smal', 'Łabuś', 'Kominiak', 'Dietrich', 'Cąkała',
        'Budzich', 'Bąbol', 'Zgoła', 'Sładek', 'Sierżant', 'Misiurek', 'Miąsik', 'Mądrzyk',
        'Kretowicz', 'Kasznia', 'Jeżyna', 'Humeniuk', 'Fiutak', 'Czerniakiewicz', 'Bork', 'Żymełka',
        'Tomalik', 'Szarpak', 'Sołtan', 'Maciuszek', 'Krysta', 'Grzeszkowiak', 'Brachman', 'Zys',
        'Westfal', 'Waluk', 'Wacławiak', 'Sałuda', 'Sabak', 'Niedojadło', 'Nazarko', 'Murat',
        'Majzner', 'Ludwin', 'Kubaczyk', 'Kielich', 'Doliwa', 'Dej', 'Chuchla', 'Boguś', 'Bobik',
        'Zadworny', 'Wójs', 'Tyma', 'Sztuczka', 'Strządała', 'Sowała', 'Omiotek', 'Oleśkiewicz',
        'Morawiak', 'Kwapisiewicz', 'Krokosz', 'Hajder', 'Garczyk', 'Burdach', 'Związek', 'Wojczuk',
        'Stanclik', 'Piekart', 'Mielke', 'Machowicz', 'Kozieja', 'Kaziród', 'Gaś', 'Garbaciak',
        'Chatys', 'Bzdęga', 'Bartoszczyk', 'Zdonek', 'Więcławek', 'Wielgo', 'Steuer', 'Staręga',
        'Sakwa', 'Orpel', 'Kobel', 'Golonko', 'Stark', 'Soczówka', 'Nickel', 'Kupaj', 'Kolman',
        'Kieca', 'Kamyk', 'Jeżyk', 'Glica', 'Gasz', 'Gamrat', 'Franiak', 'Bacik', 'Andrukiewicz',
        'Troka', 'Siwka', 'Odrzywołek', 'Nurkiewicz', 'Kozubal', 'Kott', 'Głowienka', 'Doroszuk',
        'Cogiel', 'Cheba', 'Baś', 'Andreasik', 'Wenzel', 'Szumna', 'Rosłoń', 'Ogłaza',
        'Mikłaszewicz', 'Kubieniec', 'Jędral', 'Bieniak', 'Wons', 'Władyka', 'Rolak', 'Prejs',
        'Płocharczyk', 'Ostręga', 'Łęgowik', 'Ludwik', 'Kopik', 'Kleinschmidt', 'Karczmarek',
        'Gładka', 'Czylok', 'Wawrzynkiewicz'
    )
    male_last_names = (
        'Kowalski', 'Wiśniewski', 'Dąbrowski', 'Lewandowski', 'Wójcik', 'Kamiński', 'Kowalczyk',
        'Zieliński', 'Szymański', 'Woźniak', 'Kozłowski', 'Jankowski', 'Wojciechowski',
        'Kwiatkowski', 'Kaczmarek', 'Mazur', 'Krawczyk', 'Piotrowski', 'Grabowski', 'Nowakowski',
        'Pawłowski', 'Michalski', 'Nowicki', 'Adamczyk', 'Dudek', 'Zając', 'Wieczorek', 'Jabłoński',
        'Król', 'Majewski', 'Olszewski', 'Jaworski', 'Wróbel', 'Malinowski', 'Pawlak', 'Witkowski',
        'Walczak', 'Stępień', 'Górski', 'Rutkowski', 'Michalak', 'Sikora', 'Ostrowski', 'Baran',
        'Duda', 'Szewczyk', 'Tomaszewski', 'Pietrzak', 'Marciniak', 'Wróblewski', 'Zalewski',
        'Jakubowski', 'Jasiński', 'Zawadzki', 'Sadowski', 'Bąk', 'Chmielewski', 'Włodarczyk',
        'Borkowski', 'Czarnecki', 'Sawicki', 'Sokołowski', 'Urbański', 'Kubiak', 'Maciejewski',
        'Szczepański', 'Kucharski', 'Wilk', 'Kalinowski', 'Lis', 'Mazurek', 'Wysocki', 'Adamski',
        'Kaźmierczak', 'Wasilewski', 'Sobczak', 'Czerwiński', 'Andrzejewski', 'Cieślak', 'Głowacki',
        'Zakrzewski', 'Kołodziej', 'Sikorski', 'Krajewski', 'Gajewski', 'Szymczak', 'Szulc',
        'Baranowski', 'Laskowski', 'Brzeziński', 'Makowski', 'Ziółkowski', 'Przybylski', 'Domański',
        'Nowacki', 'Borowski', 'Błaszczyk', 'Chojnacki', 'Ciesielski', 'Mróz', 'Szczepaniak',
        'Wesołowski', 'Górecki', 'Krupa', 'Kaczmarczyk', 'Leszczyński', 'Lipiński', 'Kowalewski',
        'Urbaniak', 'Kozak', 'Kania', 'Mikołajczyk', 'Czajkowski', 'Mucha', 'Tomczak', 'Kozioł',
        'Markowski', 'Kowalik', 'Nawrocki', 'Brzozowski', 'Janik', 'Musiał', 'Wawrzyniak',
        'Markiewicz', 'Orłowski', 'Tomczyk', 'Jarosz', 'Kołodziejczyk', 'Kurek', 'Kopeć', 'Żak',
        'Wolski', 'Łuczak', 'Dziedzic', 'Kot', 'Stasiak', 'Stankiewicz', 'Piątek', 'Jóźwiak',
        'Urban', 'Dobrowolski', 'Pawlik', 'Kruk', 'Domagała', 'Piasecki', 'Wierzbicki', 'Karpiński',
        'Jastrzębski', 'Polak', 'Zięba', 'Janicki', 'Wójtowicz', 'Stefański', 'Sosnowski',
        'Bednarek', 'Majchrzak', 'Bielecki', 'Małecki', 'Maj', 'Sowa', 'Milewski', 'Gajda',
        'Klimek', 'Olejniczak', 'Ratajczak', 'Romanowski', 'Matuszewski', 'Śliwiński', 'Madej',
        'Kasprzak', 'Wilczyński', 'Grzelak', 'Socha', 'Czajka', 'Marek', 'Kowal', 'Bednarczyk',
        'Skiba', 'Wrona', 'Owczarek', 'Marcinkowski', 'Matusiak', 'Orzechowski', 'Sobolewski',
        'Kędzierski', 'Kurowski', 'Rogowski', 'Olejnik', 'Dębski', 'Barański', 'Skowroński',
        'Mazurkiewicz', 'Pająk', 'Czech', 'Janiszewski', 'Bednarski', 'Łukasik', 'Chrzanowski',
        'Bukowski', 'Leśniak',
    )

    prefixes = ('pan', 'pani')

    first_names = (female_first_names[:20] + male_first_names[:20]) + \
                  (female_first_names + male_first_names)

    @classmethod
    def last_name(cls):
        return cls.random_element(cls.unisex_last_names)

    @classmethod
    def prefix(cls):
        return cls.random_element(cls.prefixes)
########NEW FILE########
__FILENAME__ = phone_number
from __future__ import unicode_literals
from ..phone_number import Provider as PhoneNumberProvider


class Provider(PhoneNumberProvider):
    formats = (
        '+48 5## ### ###',
        '+48 6## ### ###',
        '+48 7## ### ###',
        '+48 8## ### ###',
        '+48 ## ### ## ##',
    )
########NEW FILE########
__FILENAME__ = profile
from . import BaseProvider
from .. import Generator
import itertools
class Provider(BaseProvider):
	"""
	This provider is a collection of functions to generate personal profiles and identities.

	"""

	def simple_profile(self):
		"""
		Generates a basic profile with personal informations
		"""

		return {"username":self.generator.user_name(),
			"name":self.generator.name(),
			"sex": self.random_element(["M","F"]),
			"address":self.generator.address(),
			"mail":self.generator.free_email(),

			#"password":self.generator.password()
			"birthdate":self.generator.date(),

		}


	def profile(self,fields=[]):
		"""
		Generates a complete profile.
		If "fields" is not empty, only the fields in the list will be returned
		"""
		d={
		"job":self.generator.job(),
		"company":self.generator.company(),
		"ssn":self.generator.ssn(),
		"residence":self.generator.address(),
		"current_location":(self.generator.latitude(),self.generator.longitude()),
		"blood_group":"".join(self.random_element(list(itertools.product(["A","B","AB","0"],["+","-"]))))
		}

		d["website"]=[self.generator.url() for i in range(1,self.random_int(2,5))]
		d= dict(d,**self.generator.simple_profile())
		#field selection
		if len(fields)>0:
			d=dict((k,v) for (k,v) in d.items() if k in fields)

		return d


########NEW FILE########
__FILENAME__ = address
# coding=utf-8
from __future__ import unicode_literals
from ..address import Provider as AddressProvider


class Provider(AddressProvider):
    city_suffixes = (
        'do Sul', 'do Norte', 'de Minas', 'do Campo', 'Grande', 'da Serra', 'do Oeste', 'de Goiás', 'Paulista',
        'da Mata', 'Alegre', 'da Praia', 'das Flores', 'das Pedras', 'dos Dourados',
        'do Amparo', 'do Galho', 'da Prata', 'Verde'
    )
    street_prefixes = ('Aeroporto', 'Alameda', 'Área', 'Avenida', 'Campo', 'Chácara', 'Colônia', 'Condomínio',
                       'Conjunto', 'Distrito', 'Esplanada', 'Estação', 'Estrada', 'Favela', 'Fazenda', 'Feira',
                       'Jardim', 'Ladeira', 'Lago', 'Lagoa', 'Largo', 'Loteamento', 'Morro', 'Núcleo', 'Parque',
                       'Passarela', 'Pátio', 'Praça', 'Quadra', 'Recanto', 'Residencial', 'Rodovia', 'Rua', 'Setor',
                       'Sítio', 'Travessa', 'Trecho', 'Trevo', 'Vale', 'Vereda', 'Via', 'Viaduto', 'Viela', 'Vila')
    city_formats = (
        '{{last_name}}',
        '{{last_name}}',
        '{{last_name}}',
        '{{last_name}}',
        '{{last_name}} {{city_suffix}}',
        '{{last_name}} {{city_suffix}}',
        '{{last_name}} {{city_suffix}}',
        '{{last_name}} de {{last_name}}',
    )
    street_name_formats = (
        '{{street_prefix}} {{last_name}}',
        '{{street_prefix}} {{first_name}} {{last_name}}',
        '{{street_prefix}} de {{last_name}}',
    )

    street_address_formats = (
        '{{street_name}}',
        '{{street_name}}, {{building_number}}',
        '{{street_name}}, {{building_number}}',
        '{{street_name}}, {{building_number}}',
        '{{street_name}}, {{building_number}}',
        '{{street_name}}, {{building_number}}',
        '{{street_name}}, {{building_number}}',
    )

    address_formats = (
        "{{street_address}}\n{{bairro}}\n{{postcode}} {{city}} / {{estado_sigla}}",
    )

    building_number_formats = ('%', '%#', '%#', '%#', '%##')

    postcode_formats = ('########', '#####-###')

    bairros = (
        'Aarão Reis', 'Acaba Mundo', 'Acaiaca', 'Ademar Maldonado', 'Aeroporto', 'Aguas Claras', 'Alípio De Melo',
        'Alpes',
        'Alta Tensão 1ª Seção', 'Alta Tensão 2ª Seção', 'Alto Caiçaras', 'Alto Das Antenas', 'Alto Dos Pinheiros',
        'Alto Vera Cruz',
        'Álvaro Camargos', 'Ambrosina', 'Andiroba', 'Antonio Ribeiro De Abreu 1ª Seção', 'Aparecida 7ª Seção', 'Ápia',
        'Apolonia', 'Araguaia', 'Atila De Paiva', 'Bacurau', 'Bairro Das Indústrias Ii', 'Baleia',
        'Barão Homem De Melo 1ª Seção', 'Barão Homem De Melo 2ª Seção', 'Barão Homem De Melo 3ª Seção',
        'Barreiro', 'Beija Flor', 'Beira Linha', 'Bela Vitoria', 'Belmonte', 'Bernadete', 'Betânia', 'Biquinhas',
        'Boa Esperança', 'Boa União 1ª Seção', 'Boa União 2ª Seção', 'Boa Viagem', 'Boa Vista', 'Bom Jesus', 'Bonfim',
        'Bonsucesso', 'Brasil Industrial', 'Braúnas', 'Buraco Quente', 'Cabana Do Pai Tomás',
        'Cachoeirinha', 'Caetano Furquim', 'Caiçara - Adelaide', 'Calafate', 'Califórnia', 'Camargos', 'Campo Alegre',
        'Camponesa 1ª Seção', 'Camponesa 2ª Seção', 'Canaa', 'Canadá', 'Candelaria', 'Capitão Eduardo', 'Cardoso',
        'Casa Branca', 'Castanheira', 'Cdi Jatoba', 'Cenaculo', 'Céu Azul', 'Chácara Leonina',
        'Cidade Jardim Taquaril', 'Cinquentenário', 'Colégio Batista', 'Comiteco', 'Concórdia',
        'Cônego Pinheiro 1ª Seção',
        'Cônego Pinheiro 2ª Seção', 'Confisco', 'Conjunto Bonsucesso', 'Conjunto Califórnia I',
        'Conjunto Califórnia Ii',
        'Conjunto Capitão Eduardo', 'Conjunto Celso Machado', 'Conjunto Floramar',
        'Conjunto Jardim Filadélfia', 'Conjunto Jatoba', 'Conjunto Lagoa', 'Conjunto Minas Caixa',
        'Conjunto Novo Dom Bosco', 'Conjunto Paulo Vi', 'Conjunto Providencia', 'Conjunto Santa Maria',
        'Conjunto São Francisco De Assis', 'Conjunto Serra Verde', 'Conjunto Taquaril', 'Copacabana', 'Coqueiros',
        'Corumbiara',
        'Custodinha', 'Das Industrias I', 'Delta', 'Diamante', 'Distrito Industrial Do Jatoba', 'Dom Bosco',
        'Dom Cabral',
        'Dom Joaquim', 'Dom Silverio', 'Dona Clara', 'Embaúbas', 'Engenho Nogueira', 'Ermelinda', 'Ernesto Nascimento',
        'Esperança', 'Estrela', 'Estrela Do Oriente', 'Etelvina Carneiro', 'Europa',
        'Eymard', 'Fazendinha', 'Flamengo', 'Flavio De Oliveira', 'Flavio Marques Lisboa', 'Floramar', 'Frei Leopoldo',
        'Gameleira', 'Garças', 'Glória', 'Goiania', 'Graça', 'Granja De Freitas', 'Granja Werneck', 'Grota', 'Grotinha',
        'Guarani', 'Guaratã', 'Havaí', 'Heliopolis', 'Horto Florestal', 'Inconfidência',
        'Indaiá', 'Independência', 'Ipe', 'Itapoa', 'Itatiaia', 'Jaqueline', 'Jaraguá', 'Jardim Alvorada',
        'Jardim Atlântico', 'Jardim Do Vale', 'Jardim Dos Comerciarios', 'Jardim Felicidade', 'Jardim Guanabara',
        'Jardim Leblon', 'Jardim Montanhês', 'Jardim São José', 'Jardim Vitoria', 'Jardinópolis', 'Jatobá',
        'João Alfredo', 'João Paulo Ii', 'Jonas Veiga', 'Juliana', 'Lagoa', 'Lagoinha', 'Lagoinha Leblon', 'Lajedo',
        'Laranjeiras', 'Leonina', 'Leticia', 'Liberdade', 'Lindéia', 'Lorena', 'Madre Gertrudes', 'Madri',
        'Mala E Cuia',
        'Manacas', 'Mangueiras', 'Mantiqueira', 'Marajó', 'Maravilha', 'Marçola', 'Maria Goretti',
        'Maria Helena', 'Maria Tereza', 'Maria Virgínia', 'Mariano De Abreu', 'Marieta 1ª Seção', 'Marieta 2ª Seção',
        'Marieta 3ª Seção', 'Marilandia', 'Mariquinhas', 'Marmiteiros', 'Milionario', 'Minas Brasil', 'Minas Caixa',
        'Minaslandia', 'Mineirão', 'Miramar', 'Mirante', 'Mirtes', 'Monsenhor Messias', 'Monte Azul',
        'Monte São José', 'Morro Dos Macacos', 'Nazare', 'Nossa Senhora Aparecida', 'Nossa Senhora Da Aparecida',
        'Nossa Senhora Da Conceição', 'Nossa Senhora De Fátima', 'Nossa Senhora Do Rosário', 'Nova America',
        'Nova Cachoeirinha', 'Nova Cintra', 'Nova Esperança', 'Nova Floresta', 'Nova Gameleira', 'Nova Pampulha',
        'Novo Aarão Reis', 'Novo Das Industrias', 'Novo Glória', 'Novo Santa Cecilia', 'Novo Tupi', 'Oeste', 'Olaria',
        "Olhos D'água", 'Ouro Minas', 'Pantanal', 'Paquetá', 'Paraíso', 'Parque São José', 'Parque São Pedro',
        'Paulo Vi',
        'Pedreira Padro Lopes', 'Penha', 'Petropolis', 'Pilar', 'Pindorama', 'Pindura Saia',
        'Piraja', 'Piratininga', 'Pirineus', 'Pompéia', 'Pongelupe', 'Pousada Santo Antonio', 'Primeiro De Maio',
        'Providencia', 'Ribeiro De Abreu', 'Rio Branco', 'Salgado Filho', 'Santa Amelia', 'Santa Branca',
        'Santa Cecilia',
        'Santa Cruz', 'Santa Helena', 'Santa Inês', 'Santa Isabel', 'Santa Margarida', 'Santa Maria',
        'Santa Rita', 'Santa Rita De Cássia', 'Santa Sofia', 'Santa Terezinha', 'Santana Do Cafezal', 'Santo André',
        'São Benedito', 'São Bernardo', 'São Cristóvão', 'São Damião', 'São Francisco', 'São Francisco Das Chagas',
        'São Gabriel', 'São Geraldo', 'São Gonçalo', 'São João', 'São João Batista', 'São Jorge 1ª Seção',
        'São Jorge 2ª Seção', 'São Jorge 3ª Seção', 'São José', 'São Marcos', 'São Paulo', 'São Salvador',
        'São Sebastião',
        'São Tomaz', 'São Vicente', 'Satelite', 'Saudade', 'Senhor Dos Passos', 'Serra Do Curral', 'Serra Verde',
        'Serrano',
        'Solar Do Barreiro', 'Solimoes', 'Sport Club', 'Suzana', 'Taquaril',
        'Teixeira Dias', 'Tiradentes', 'Tirol', 'Tres Marias', 'Trevo', 'Túnel De Ibirité', 'Tupi A', 'Tupi B', 'União',
        'Unidas', 'Universitário', 'Universo', 'Urca', 'Vale Do Jatoba', 'Varzea Da Palma', 'Venda Nova', 'Ventosa',
        'Vera Cruz', 'Vila Aeroporto', 'Vila Aeroporto Jaraguá', 'Vila Antena', 'Vila Antena Montanhês',
        'Vila Atila De Paiva', 'Vila Bandeirantes', 'Vila Barragem Santa Lúcia', 'Vila Batik', 'Vila Betânia',
        'Vila Boa Vista', 'Vila Calafate', 'Vila Califórnia', 'Vila Canto Do Sabiá', 'Vila Cemig', 'Vila Cloris',
        'Vila Copacabana', 'Vila Copasa', 'Vila Coqueiral', 'Vila Da Amizade', 'Vila Da Ária', 'Vila Da Luz',
        'Vila Da Paz', 'Vila Das Oliveiras', 'Vila Do Pombal', 'Vila Dos Anjos', 'Vila Ecológica',
        'Vila Engenho Nogueira',
        'Vila Esplanada', 'Vila Formosa', 'Vila Fumec', 'Vila Havaí', 'Vila Independencia 1ª Seção',
        'Vila Independencia 2ª Seção', 'Vila Independencia 3ª Seção', 'Vila Inestan', 'Vila Ipiranga',
        'Vila Jardim Alvorada', 'Vila Jardim Leblon', 'Vila Jardim São José', 'Vila Madre Gertrudes 1ª Seção',
        'Vila Madre Gertrudes 2ª Seção', 'Vila Madre Gertrudes 3ª Seção', 'Vila Madre Gertrudes 4ª Seção',
        'Vila Maloca',
        'Vila Mangueiras', 'Vila Mantiqueira', 'Vila Maria', 'Vila Minaslandia', 'Vila Nossa Senhora Do Rosário',
        'Vila Nova', 'Vila Nova Cachoeirinha 1ª Seção', 'Vila Nova Cachoeirinha 2ª Seção',
        'Vila Nova Cachoeirinha 3ª Seção', 'Vila Nova Dos Milionarios', 'Vila Nova Gameleira 1ª Seção',
        'Vila Nova Gameleira 2ª Seção', 'Vila Nova Gameleira 3ª Seção', 'Vila Nova Paraíso', 'Vila Novo São Lucas',
        'Vila Oeste', "Vila Olhos D'água",
        'Vila Ouro Minas', 'Vila Paquetá', 'Vila Paraíso', 'Vila Petropolis', 'Vila Pilar', 'Vila Pinho',
        'Vila Piratininga', 'Vila Piratininga Venda Nova', 'Vila Primeiro De Maio', 'Vila Puc', 'Vila Real 1ª Seção',
        'Vila Real 2ª Seção', 'Vila Rica', 'Vila Santa Monica 1ª Seção', 'Vila Santa Monica 2ª Seção',
        'Vila Santa Rosa',
        'Vila Santo Antônio', 'Vila Santo Antônio Barroquinha', 'Vila São Dimas', 'Vila São Francisco',
        'Vila São Gabriel',
        'Vila São Gabriel Jacui', 'Vila São Geraldo', 'Vila São João Batista', 'Vila São Paulo', 'Vila São Rafael',
        'Vila Satélite', 'Vila Sesc', 'Vila Sumaré', 'Vila Suzana Primeira Seção', 'Vila Suzana Segunda Seção',
        'Vila Tirol', 'Vila Trinta E Um De Março', 'Vila União', 'Vila Vista Alegre', 'Virgínia', 'Vista Alegre',
        'Vista Do Sol', 'Vitoria', 'Vitoria Da Conquista', 'Xangri-Lá', 'Xodo-Marize', 'Zilah Sposito', 'Outro',
        'Novo São Lucas', 'Esplanada', 'Estoril', 'Novo Ouro Preto', 'Ouro Preto', 'Padre Eustáquio', 'Palmares',
        'Palmeiras', 'Vila De Sá', 'Floresta', 'Anchieta', 'Aparecida', 'Grajaú', 'Planalto', 'Bandeirantes',
        'Gutierrez',
        'Jardim América', 'Renascença', 'Barro Preto', 'Barroca', 'Sagrada Família', 'Ipiranga', 'Belvedere',
        'Santa Efigênia', 'Santa Lúcia', 'Santa Monica', 'Vila Jardim Montanhes', 'Santa Rosa', 'Santa Tereza',
        'Buritis', 'Vila Paris', 'Santo Agostinho', 'Santo Antônio', 'Caiçaras', 'São Bento', 'Prado', 'Lourdes',
        'Fernão Dias', 'Carlos Prates', 'Carmo', 'Luxemburgo', 'São Lucas', 'São Luiz', 'Mangabeiras', 'São Pedro',
        'Horto',
        'Cidade Jardim', 'Castelo', 'Cidade Nova', 'Savassi', 'Serra', 'Silveira', 'Sion', 'Centro',
        'Alto Barroca', 'Nova Vista', 'Coração De Jesus', 'Coração Eucarístico', 'Funcionários', 'Cruzeiro',
        'João Pinheiro', 'Nova Granada', 'Nova Suíça', 'Itaipu'
    )
    countries = ('Afeganistão', 'África do Sul', 'Akrotiri', 'Albânia', 'Alemanha', 'Andorra', 'Angola', 'Anguila',
                 'Antártica', 'Antígua e Barbuda', 'Antilhas Holandesas', 'Arábia Saudita', 'Argélia', 'Argentina',
                 'Armênia', 'Aruba', 'Ashmore and Cartier Islands', 'Austrália', 'Áustria', 'Azerbaijão', 'Bahamas',
                 'Bangladesh', 'Barbados', 'Barein', 'Bélgica', 'Belize', 'Benim', 'Bermudas', 'Bielorrússia',
                 'Birmânia', 'Bolívia', 'Bósnia e Herzegovina', 'Botsuana', 'Brasil', 'Brunei', 'Bulgária',
                 'Burquina Faso', 'Burundi', 'Butão', 'Cabo Verde', 'Camarões', 'Camboja', 'Canadá', 'Catar',
                 'Cazaquistão', 'Chade', 'Chile', 'China', 'Chipre', 'Clipperton Island', 'Colômbia', 'Comores',
                 'Congo-Brazzaville', 'Congo-Kinshasa', 'Coral Sea Islands', 'Coreia do Norte', 'Coreia do Sul',
                 'Costa do Marfim', 'Costa Rica', 'Croácia', 'Cuba', 'Dhekelia', 'Dinamarca', 'Domínica', 'Egito',
                 'Costa do Marfim', 'Costa Rica', 'Croácia', 'Cuba', 'Dhekelia', 'Dinamarca', 'Domínica', 'Egito',
                 'Emirados Árabes Unidos', 'Equador', 'Eritreia', 'Eslováquia', 'Eslovênia', 'Espanha',
                 'Estados Unidos',
                 'Estônia', 'Etiópia', 'Faroé', 'Fiji', 'Filipinas', 'Finlândia', 'França', 'Gabão', 'Gâmbia', 'Gana',
                 'Geórgia', 'Geórgia do Sul e Sandwich do Sul', 'Gibraltar', 'Granada', 'Grécia', 'Gronelândia',
                 'Guam', 'Guatemala', 'Guernsey', 'Guiana', 'Guiné', 'Guiné Equatorial', 'Guiné-Bissau', 'Haiti',
                 'Honduras', 'Hong Kong', 'Hungria', 'Iêmen', 'Ilha Bouvet', 'Ilha do Natal', 'Ilha Norfolk',
                 'Ilhas Caiman', 'Ilhas Cook', 'Ilhas dos Cocos', 'Ilhas Falkland', 'Ilhas Heard e McDonald',
                 'Ilhas Marshall', 'Ilhas Salomão', 'Ilhas Turcas e Caicos', 'Ilhas Virgens Americanas',
                 'Ilhas Virgens Britânicas', 'Índia', 'Indonésia', 'Iran', 'Iraque', 'Irlanda', 'Islândia', 'Israel',
                 'Itália', 'Jamaica', 'Jan Mayen', 'Japão', 'Jersey', 'Jibuti', 'Jordânia', 'Kuwait', 'Laos', 'Lesoto',
                 'Letônia', 'Líbano', 'Libéria', 'Líbia', 'Liechtenstein', 'Lituânia', 'Luxemburgo', 'Macau',
                 'Macedônia',
                 'Madagáscar', 'Malásia', 'Malávi', 'Maldivas', 'Mali', 'Malta', 'Man, Isle of', 'Marianas do Norte',
                 'Marrocos', 'Maurícia', 'Mauritânia', 'Mayotte', 'México', 'Micronésia', 'Moçambique', 'Moldávia',
                 'Mônaco', 'Mongólia', 'Monserrate', 'Montenegro', 'Namíbia', 'Nauru', 'Navassa Island', 'Nepal',
                 'Nicarágua', 'Níger', 'Nigéria', 'Niue', 'Noruega', 'Nova Caledónia', 'Nova Zelândia', 'Omã',
                 'Países Baixos', 'Palau', 'Panamá', 'Papua-Nova Guiné', 'Paquistão', 'Paracel Islands', 'Paraguai',
                 'Peru', 'Pitcairn', 'Polinésia Francesa', 'Polônia', 'Porto Rico', 'Portugal', 'Quênia',
                 'Quirguizistão',
                 'Quiribáti', 'Reino Unido', 'República Centro-Africana', 'República Checa', 'República Dominicana',
                 'Roménia', 'Ruanda', 'Rússia', 'Salvador', 'Samoa', 'Samoa Americana', 'Santa Helena', 'Santa Lúcia',
                 'São Cristóvão e Neves', 'São Marinho', 'São Pedro e Miquelon', 'São Tomé e Príncipe',
                 'São Vicente e Granadinas', 'Sara Ocidental', 'Seicheles', 'Senegal', 'Serra Leoa', 'Sérvia',
                 'Singapura', 'Síria', 'Somália', 'Sri Lanka', 'Suazilândia', 'Sudão', 'Suécia', 'Suíça', 'Suriname',
                 'Svalbard e Jan Mayen', 'Tailândia', 'Taiwan', 'Tajiquistão', 'Tanzânia',
                 'Território Britânico do Oceano Índico',
                 'Territórios Austrais Franceses', 'Timor Leste', 'Togo', 'Tokelau', 'Tonga', 'Trindade e Tobago',
                 'Tunísia', 'Turquemenistão', 'Turquia', 'Tuvalu', 'Ucrânia', 'Uganda', 'União Europeia', 'Uruguai',
                 'Usbequistão', 'Vanuatu', 'Vaticano', 'Venezuela', 'Vietnam', 'Wake Island', 'Wallis e Futuna',
                 'Zâmbia', 'Zimbabué'
    )

    estados = (
        ('AC', 'Acre'), ('AL', 'Alagoas'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('BA', 'Bahia'),
        ('CE', 'Ceará'), ('DF', 'Distrito Federal'), ('ES', 'Espírito Santo'), ('GO', 'Goiás'), ('MA', 'Maranhão'),
        ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MG', 'Minas Gerais'), ('PA', 'Pará'), ('PB', 'Paraíba'),
        ('PR', 'Paraná'), ('PE', 'Pernambuco'), ('PI', 'Piauí'), ('RJ', 'Rio de Janeiro'),
        ('RN', 'Rio Grande do Norte'),
        ('RS', 'Rio Grande do Sul'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('SC', 'Santa Catarina'),
        ('SP', 'São Paulo'),
        ('SE', 'Sergipe'), ('TO', 'Tocantins')
    )

    @classmethod
    def street_prefix(cls):
        """
        :example 'rua'
        """
        return cls.random_element(cls.street_prefixes)

    @classmethod
    def estado(cls):
        """
        Randomly returns a Brazilian State  ('sigla' , 'nome').
        :example ('MG' . 'Minas Gerais')
        """
        return cls.random_element(cls.estados)

    @classmethod
    def estado_nome(cls):
        """
        Randomly returns a Brazilian State Name
        :example 'Minas Gerais'
        """
        return cls.estado()[1]

    @classmethod
    def estado_sigla(cls):
        """
        Randomly returns the abbreviation of a Brazilian State

        :example 'MG'
        """
        return cls.estado()[0]

    @classmethod
    def bairro(cls):
        """
        Randomly returns a bairro (neighborhood) name. The names were taken from the city of Belo Horizonte - Minas Gerais

        :example 'Serra'
        """
        return cls.random_element(cls.bairros)




########NEW FILE########
__FILENAME__ = company
# coding=utf-8
from __future__ import unicode_literals
from ..company import Provider as CompanyProvider


class Provider(CompanyProvider):
    formats = (
        '{{last_name}} {{company_suffix}}',
        '{{last_name}} {{last_name}} {{company_suffix}}',
        '{{last_name}}',
        '{{last_name}}',
    )

    catch_phrase_formats = (
        '{{catch_phrase_noun}} {{catch_phrase_verb}} {{catch_phrase_attribute}}',
    )

    nouns = (
        'a segurança', 'o prazer', 'o conforto', 'a simplicidade', 'a certeza', 'a arte', 'o poder', 'o direito',
        'a possibilidade', 'a vantagem', 'a liberdade'
    )

    verbs = (
        'de conseguir', 'de avançar', 'de evoluir', 'de mudar', 'de inovar', 'de ganhar', 'de atingir seus objetivos',
        'de concretizar seus projetos', 'de realizar seus sonhos'
    )

    attributes = (
        'de maneira eficaz', 'mais rapidamentet', 'mais facilmente', 'simplesmente', 'com toda a tranquilidade',
        'antes de tudo', 'naturellemente', 'sem preocupação', 'em estado puro', 'com força total',
        'direto da fonte', 'com confiança'
    )

    company_suffixes = ('S/A', 'S.A.', 'Ltda.', '- ME', '- EI', 'e Filhos')






########NEW FILE########
__FILENAME__ = internet
# coding=utf-8
from __future__ import unicode_literals
from ..internet import Provider as InternetProvider


class Provider(InternetProvider):
    safe_email_tlds = ('com', 'net', 'br', 'br')
    free_email_domains = ('gmail.com', 'hotmail.com', 'yahoo.com.br', 'uol.com.br', 'bol.com.br', 'ig.com.br')
    tlds = ('com', 'com', 'com', 'net', 'org', 'br', 'br', 'br')

    @staticmethod
    def _to_ascii(string):
        replacements = (
            ('à', 'a'), ('À', 'A'), ('ç', 'c'), ('Ç', 'c'), ('é', 'e'), ('É', 'E'), ('è', 'e'),
            ('È', 'E'), ('ë', 'e'), ('Ë', 'E'), ('ï', 'i'), ('Ï', 'I'), ('î', 'i'), ('Î', 'I'),
            ('ô', 'o'), ('Ô', 'O'), ('ù', ''), ('Ù', 'U'),
        )
        for search, replace in replacements:
            string = string.replace(search, replace)

        return string

    def user_name(self):
        return self._to_ascii(super(Provider, self).user_name())
########NEW FILE########
__FILENAME__ = person
# coding=utf-8
from __future__ import unicode_literals
from ..person import Provider as PersonProvider


class Provider(PersonProvider):
    formats = (
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{prefix}} {{last_name}}',
        '{{first_name}} {{last_name}}-{{last_name}}',
        '{{first_name}}-{{first_name}} {{last_name}}',
    )

    first_names = (
        'Sofia', 'Julia', 'Isabella', 'Alice', 'Manuela', 'Maria Eduarda', 'Giovanna', 'Laura', 'Luiza', 'Beatriz',
        'Mariana',
        'Ana Clara', 'Maria Clara', 'Maria Luiza', 'Yasmin', 'Rafaela', 'Gabriela', 'Isabelly', 'Ana Julia',
        'Valentina',
        'Letícia', 'Lara', 'Ana Luiza', 'Lorena', 'Helena', 'Nicole', 'Isadora', 'Lívia', 'Sarah', 'Marina',
        'Ana Beatriz',
        'Melissa', 'Heloísa', 'Vitória', 'Cecília', 'Emanuelly', 'Lavínia', 'Maria Fernanda', 'Amanda', 'Gabrielly',
        'Larissa', 'Bianca', 'Esther', 'Clara', 'Rebeca', 'Eduarda', 'Alícia', 'Carolina', 'Emilly', 'Maria Julia',
        'Fernanda',
        'Pietra', 'Milena', 'Ana Laura', 'Catarina', 'Maria Alice', 'Ana Carolina', 'Agatha', 'Natália', 'Laís',
        'Elisa',
        'Camila', 'Maria Vitória', 'Luana', 'Olivia', 'Mirella', 'Maria', 'Maria Cecília', 'Marcela', 'Ana Sophia',
        'Kamilly', 'Joana', 'Eloah', 'Stella', 'Sophie', 'Maria Sophia', 'Bruna', 'Juliana', 'Bárbara', 'Maitê',
        'Clarice',
        'Ana Vitória', 'Caroline', 'Ana', 'Ana Lívia', 'Evelyn', 'Luna', 'Stephany', 'Isabel', 'Alexia', 'Mariane',
        'Brenda',
        'Alana', 'Maysa', 'Raquel', 'Nina', 'Sabrina', 'Emanuella', 'Daniela', 'Miguel', 'Arthur', 'Davi', 'Gabriel',
        'Lucas', 'Matheus', 'Pedro', 'Guilherme', 'Enzo', 'Rafael', 'Bernardo', 'Gustavo', 'Nicolas', 'Felipe',
        'Pedro Henrique',
        'João Pedro', 'Henrique', 'Samuel', 'Cauã', 'Eduardo', 'Vitor', 'Heitor', 'Murilo', 'Daniel', 'Pietro',
        'João Vitor',
        'Vinicius', 'Leonardo', 'Caio', 'Lorenzo', 'Thiago', 'Lucca', 'Isaac', 'Theo', 'Enzo Gabriel', 'João',
        'João Gabriel',
        'Emanuel', 'Yuri', 'Bryan', 'Luiz Felipe', 'Ryan', 'Joaquim', 'Antonio', 'Carlos Eduardo', 'Bruno',
        'Davi Lucas',
        'João Guilherme', 'Erick', 'Calebe', 'Benjamin', 'Vitor Hugo', 'Rodrigo', 'Ian', 'Fernando', 'Otávio', 'Breno',
        'Igor', 'Francisco', 'Thomas', 'André', 'Juan', 'Luiz Gustavo', 'Augusto', 'Kaique', 'Nathan', 'João Miguel',
        'João Lucas',
        'Pedro Lucas', 'Raul', 'Luiz Miguel', 'Cauê', 'Luiz Henrique', 'Benício', 'Anthony', 'Vitor Gabriel', 'Yago',
        'Marcelo', 'Luiz Otávio', 'Renan', 'Alexandre', 'Levi', 'Danilo', 'Thales', 'Lucas Gabriel', 'Diogo',
        'Davi Lucca',
        'Paulo', 'Enrico', 'Diego', 'Vicente', 'Marcos Vinicius', 'Luiz Fernando', 'Pedro Miguel', 'Gustavo Henrique',
        'Leandro',
        'Noah', 'Kevin', 'João Felipe', 'Luigi',

    )

    last_names = (
        'Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costela', 'Carvalho', 'Almeida', 'Ferreira', 'Ribeiro',
        'Rodrigues',
        'Gomes', 'Lima', 'Martins', 'Rocha', 'Alves', 'Araújo', 'Pinto', 'Barbosa', 'Castro', 'Fernandes', 'Melo',
        'Azevedo',
        'Barros', 'Cardoso', 'Correia', 'Cunha', 'Dias'
    )

    prefixes = ('de', 'da', 'do')

    @classmethod
    def prefix(cls):
        return cls.random_element(cls.prefixes)
########NEW FILE########
__FILENAME__ = phone_number
from __future__ import unicode_literals
from ..phone_number import Provider as PhoneNumberProvider


class Provider(PhoneNumberProvider):
    formats = (
        '+55 (011) #### ####',
        '+55 (021) #### ####',
        '+55 (031) #### ####',
        '+55 (041) #### ####',
        '+55 (051) #### ####',
        '+55 (061) #### ####',
        '+55 (071) #### ####',
        '+55 (081) #### ####',
        '+55 11 #### ####',
        '+55 21 #### ####',
        '+55 31 #### ####',
        '+55 41 #### ####',
        '+55 51 ### ####',
        '+55 61 #### ####',
        '+55 71 #### ####',
        '+55 81 #### ####',
        '+55 (011) ####-####',
        '+55 (021) ####-####',
        '+55 (031) ####-####',
        '+55 (041) ####-####',
        '+55 (051) ####-####',
        '+55 (061) ####-####',
        '+55 (071) ####-####',
        '+55 (081) ####-####',
        '+55 11 ####-####',
        '+55 21 ####-####',
        '+55 31 ####-####',
        '+55 41 ####-####',
        '+55 51 ### ####',
        '+55 61 ####-####',
        '+55 71 ####-####',
        '+55 81 ####-####',
        '(011) #### ####',
        '(021) #### ####',
        '(031) #### ####',
        '(041) #### ####',
        '(051) #### ####',
        '(061) #### ####',
        '(071) #### ####',
        '(081) #### ####',
        '11 #### ####',
        '21 #### ####',
        '31 #### ####',
        '41 #### ####',
        '51 ### ####',
        '61 #### ####',
        '71 #### ####',
        '81 #### ####',
        '(011) ####-####',
        '(021) ####-####',
        '(031) ####-####',
        '(041) ####-####',
        '(051) ####-####',
        '(061) ####-####',
        '(071) ####-####',
        '(081) ####-####',
        '11 ####-####',
        '21 ####-####',
        '31 ####-####',
        '41 ####-####',
        '51 ### ####',
        '61 ####-####',
        '71 ####-####',
        '81 ####-####',
        '#### ####',
        '####-####',
    )
########NEW FILE########
__FILENAME__ = python
from __future__ import unicode_literals
from . import BaseProvider
from decimal import Decimal
from .lorem import Provider as Lorem
import sys


class Provider(BaseProvider):
    @classmethod
    def pybool(cls):
        return cls.random_int(0, 1) == 1

    @classmethod
    def pystr(cls, max_chars=20):
        return Lorem.text(max_chars)

    @classmethod
    def pyfloat(cls, left_digits=None, right_digits=None, positive=False):
        left_digits = left_digits or cls.random_int(1, sys.float_info.dig)
        right_digits = right_digits or cls.random_int(0, sys.float_info.dig - left_digits)
        sign = 1 if positive or cls.random_int(0, 1) else -1

        return float("{0}.{1}".format(
            sign * cls.random_number(left_digits), cls.random_number(right_digits)
        ))

    @classmethod
    def pyint(cls):
        return cls.random_int()

    @classmethod
    def pydecimal(cls, left_digits=None, right_digits=None, positive=False):
        return Decimal(str(cls.pyfloat(left_digits, right_digits, positive)))

    def pytuple(self, nb_elements=10, variable_nb_elements=True, *value_types):
        return tuple(self.pyset(nb_elements, variable_nb_elements, *value_types))

    def pyset(self, nb_elements=10, variable_nb_elements=True, *value_types):
        return set(self._pyiterable(nb_elements, variable_nb_elements, *value_types))

    def pylist(self, nb_elements=10, variable_nb_elements=True, *value_types):
        return list(self._pyiterable(nb_elements, variable_nb_elements, *value_types))

    def pyiterable(self, nb_elements=10, variable_nb_elements=True, *value_types):
        return self.random_element([self.pylist, self.pytuple, self.pyset])(nb_elements, variable_nb_elements, *value_types)

    def _random_type(self, type_list):
        value_type = self.random_element(type_list)

        method_name = "py{0}".format(value_type)
        if hasattr(self, method_name):
            value_type = method_name

        return self.generator.format(value_type)

    def _pyiterable(self, nb_elements=10, variable_nb_elements=True, *value_types):

        value_types = [t if isinstance(t, basestring) else getattr(t, '__name__', type(t).__name__).lower()
                      for t in value_types
                      # avoid recursion
                      if t not in ['iterable', 'list', 'tuple', 'dict', 'set']]
        if not value_types:
            value_types = ['str', 'str', 'str', 'str', 'float', 'int', 'int', 'decimal', 'date_time', 'uri', 'email']

        if variable_nb_elements:
            nb_elements = self.randomize_nb_elements(nb_elements)

        for f in range(nb_elements):
            yield self._random_type(value_types)


    def pydict(self, nb_elements=10, variable_nb_elements=True, *value_types):
        """
         Use this function to generate data, returns a touple containing
         a list, a dictionary and a nested dictionary.
         """
        if variable_nb_elements:
            nb_elements = self.randomize_nb_elements(nb_elements)

        return dict(zip(
            Lorem.words(nb_elements),
            self._pyiterable(nb_elements, False, *value_types)
        ))


    def pystruct(self, count=10, *value_types):

        value_types = [t if isinstance(t, basestring) else getattr(t, '__name__', type(t).__name__).lower()
                      for t in value_types
                      # avoid recursion
                      if t != 'struct']
        if not value_types:
            value_types = ['str', 'str', 'str', 'str', 'float', 'int', 'int', 'decimal', 'date_time', 'uri', 'email']

        l = []
        d = {}
        nd = {}
        for i in range(count):
            d[Lorem.word()] = self._random_type(value_types)
            l.append(self._random_type(value_types))
            nd[Lorem.word()] = {
                i: self._random_type(value_types),
                i + 1: [self._random_type(value_types), self._random_type(value_types), self._random_type(value_types)],
                i + 2: {
                    i: self._random_type(value_types),
                    i + 1: self._random_type(value_types),
                    i + 2: [
                        self._random_type(value_types),
                        self._random_type(value_types)
                    ]
                }
            }
        return l, d, nd

########NEW FILE########
__FILENAME__ = job
# coding=utf-8
from __future__ import unicode_literals
from .. import BaseProvider

# Russian jobs taken from the Wikipedia page
# https://ru.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_%D0%BF%D1%80%D0%BE%D1%84%D0%B5%D1%81%D1%81%D0%B8%D0%B9
class Provider(BaseProvider):
	jobs=["Авиадиспетчер",
"Авиатехник",
"Авиационный техник",
"Автогонщик",
"Автослесарь",
"Автоэлектрик",
"Агроном",
"Агроном по защите растений",
"Агроном-почвовед",
"Адвокат",
"Администратор базы данных",
"Аккумуляторщик",
"Актуарий",
"Актёр",
"Акушер",
"Аллерголог",
"Аналитик",
"Андролог",
"Антрополог",
"Артиллерист",
"Артист цирка",
"Археолог",
"Архивариус",
"Архитектор",
"Астроном",
"Астрофизик",
"Астрохимик",
"Бактериолог",
"Балерина",
"Балетмейстер",
"Банкир",
"Бармен",
"Баталер",
"Безработный",
"Библиотекарь",
"Библиотековед",
"Биоинженер",
"Биолог",
"Биофизик",
"Биохимик",
"Блоггер",
"Бондарь",
"Борт-инженер",
"Борт-механик",
"Борт-радист",
"Борт-стрелок",
"Бортинженер",
"Бортмеханик",
"Бортпроводник/стюард",
"Ботаник",
"Брейдер",
"Брокер",
"Булочник",
"Бульдозерист",
"Бухгалтер",
"Веб-интегратор",
"Веб-мастер",
"Веб-программист",
"Верстальщик",
"Ветеринар",
"Визажист",
"Виноградарь",
"Вирусолог",
"Водитель",
"Водолаз",
"Военно-полевой хирург",
"Военно-полевой хирург",
"Военнослужащий",
"Военный дознаватель",
"Военный консультант",
"Военный переводчик",
"Военный полицейский",
"Военный прокурор",
"Военный судья",
"Военный юрист",
"Воздухоплаватель",
"Вокалист",
"Воспитатель",
"Воспитатель",
"Востоковед",
"Врач МСЭК",
"Врач УЗ-диагностики",
"Врач скорой помощи",
"Врач функциональной диагностики",
"Выпускающий редактор",
"Гастроэнтеролог",
"Гематолог",
"Генетик",
"Генетик",
"Географ",
"Геодезист",
"Геолог",
"Гепатолог",
"Гидролог",
"Гинеколог",
"Гирудотерапевт",
"Гитарист",
"Гляциолог",
"Гомеопат",
"Горничная",
"Горнострелок",
"Горняк",
"Государственный исполнитель",
"Гранатомётчик",
"Грейдерист",
"Гренадер",
"Гример",
"Грузчик",
"Дворник",
"Декан",
"Декоратор",
"Дерматолог",
"Десантник",
"Детектив",
"Дефектолог",
"Диверсант",
"Диджей",
"Диетолог",
"Дизайнер",
"Дизайнер рекламы",
"Дизайнер-конструктор",
"Диктор",
"Дилер",
"Дипломат",
"Дипломат",
"Дипломатический работник",
"Дирижёр",
"Диспетчер",
"Дознаватель",
"Донкерман",
"Доула",
"Доярка",
"Драпировщик",
"Египтолог",
"Животновод",
"Жиловщик/Обвальщик",
"Журналист",
"Заряжающий",
"Заточник",
"Звукорежиссёр",
"Зенитчик",
"Златокузнец",
"Зоолог",
"Зоотехник",
"Издатель",
"Изобретатр",
"Иконописец",
"Иллюстратор",
"Имиджмейкер",
"Иммунолог",
"Инженер",
"Инженер",
"Инженер КИПиА",
"Инженер по Технике Безопасности",
"Инженер по механизации",
"Инженер-акустик",
"Инженер-взрывотехник",
"Инженер-гальваник",
"Инженер-гидравлик",
"Инженер-конструктор",
"Инженер-лаборант",
"Инженер-лесотехник",
"Инженер-механик",
"Инженер-системотехник",
"Инженер-строитель",
"Инженер-технолог",
"Инженер-физик",
"Инженер-химик",
"Инженер-электрик",
"Инженер-энергетик",
"Инкассатор",
"Интендант",
"Инфекционист",
"Искусствовед",
"Историк",
"Ихтиолог",
"Кабельщик",
"Кавалерист",
"Каменотёс",
"Канонир",
"Капитан судна",
"Каптенармус",
"Кардиолог",
"Кардиохирург",
"Каскадёр",
"Кассир",
"Квасник",
"Кинодраматург",
"Кинолог",
"Кинолог",
"Киномеханик",
"Кинооператор",
"Кинорежиссер",
"Кладовщик",
"Клинер",
"Кнопочник",
"Кодер",
"Кок",
"Командир",
"Комбайнер",
"Комендант",
"Коммерческий директор",
"Композитор",
"Конвоир",
"Кондитер",
"Кондитер",
"Кондуктор",
"Коневод",
"Контент-менеджер",
"Копирайтер",
"Корректировщик",
"Корректор",
"Косметолог",
"Космонавт",
"Крановщик",
"Кредитный консультант",
"Криптозоолог",
"Критик",
"Кровельщик",
"Кромкозакатчик",
"Крупье",
"Кузнец",
"Культуролог",
"Лаборант",
"Лекальщик",
"Лимфолог",
"Лингвист",
"Литейщик",
"Лифтёр",
"Логик",
"Логопед",
"Логопед",
"Лоцман",
"Лётчик",
"Лётчик",
"Маклер биржевой",
"Маляр",
"Маммолог",
"Манекенщица",
"Мануалист",
"Маркетолог",
"Маркитант",
"Маркшейдер",
"Массажист",
"Мастер маникюра",
"Мастер маникюра",
"Мастер педикюра",
"Математик",
"Машинист",
"Машинист локомотива",
"Машинистка",
"Медицинская сестра",
"Медник",
"Мелиоратор",
"Мельник",
"Менеджер",
"Менеджер по работе с клиентами",
"Мерчандайзер",
"Месильщик",
"Металлург",
"Метеоролог",
"Метранпаж",
"Метрдотель",
"Механизатор",
"Механик",
"Механик-Водитель",
"Миколог",
"Микробиолог",
"Министр",
"Модель",
"Модельер",
"Монтажник",
"Монтажник радиоэлектронной аппаратуры и приборов",
"Монтажник связи",
"Морской пехотинец",
"Моторист",
"Моторист",
"Мотострелок",
"Музыкант",
"Мусоропроводчик",
"Мусорщик",
"Мясник",
"Наводчик орудия",
"Налоговый инспектор",
"Нарколог",
"Начальник военного оркестра",
"Начальник гаупвахты",
"Начальник склада",
"Начальник службы",
"Начальник штаба",
"Невролог",
"Невропатолог",
"Нейрохирург",
"Неонатолог",
"Нефролог",
"Нотариус",
"Няня",
"Огнемётчик",
"Океанолог",
"Онколог",
"Оперативный работник",
"Оператор ПК",
"Оператор РЛС",
"Оператор вооружения",
"Оператор кино и телевидения",
"Оператор коллцентра",
"Оператор машинного доения",
"Операционист",
"Организатор свадеб",
"Орнитолог",
"Ортодонт",
"Ортопед",
"Особист",
"Оториноларинголог",
"Официант",
"Офтальмолог",
"Палеонтолог",
"Парикмахер",
"Парикмахер",
"Парфюмер",
"Пастух",
"Патологоанатом",
"Педагог",
"Педиатр",
"Пекарь",
"Переводчик",
"Переводчик",
"Переплётчик",
"Печатник",
"Писатель",
"Пластический хирург",
"Плиточник",
"Плотник",
"Повар",
"Повар",
"Пограничник",
"Подводник",
"Пожарный",
"Политолог",
"Полицейский",
"Портной",
"Портье",
"Постановщик трюков",
"Почтальон",
"Поэт",
"Правовед",
"Предприниматель",
"Преподаватель",
"Проводник",
"Программист",
"Программист",
"Продавец",
"Продавец",
"Продюсер",
"Прозектор",
"Проктолог",
"Прокурор",
"Промышленный альпинист",
"Промышленный альпинист",
"Проректор",
"Профпатолог",
"Проходчик",
"Психиатр",
"Психолог",
"Психоневропатолог",
"Психотерапевт",
"Пулемётчик",
"Пульмонолог",
"Пчеловод",
"Работник органов ЗАГСа",
"Радиолог",
"Радиомеханик",
"Радиотелефонист",
"Радист",
"Радист",
"Разведчик",
"Ракетчик",
"Распиловщик",
"Растениевод",
"Расточник",
"Реаниматолог",
"Ревматолог",
"Редактор",
"Режиссёр",
"Ректор",
"Релайтер",
"Религиовед",
"Рентгенолог",
"Реставратор",
"Рефлексотерапевт",
"Рихтовщик",
"Робототехник",
"Садовник",
"Садовод",
"Санитар",
"Сантехник",
"Сапожник",
"Сапёр",
"Сборщик",
"Сварщик",
"Связист",
"Священнослужитель",
"Секретчик",
"Сексолог",
"Сексопатолог",
"Семейный врач",
"Серпентолог",
"Сиделка",
"Системный администратор",
"Скорняк",
"Скотник",
"Скульптор",
"Следователь",
"Слесарь",
"Слесарь-механик",
"Сметчик",
"Снабженец",
"Снайпер",
"Сомелье",
"Сомнолог",
"Социолог",
"Специалист по клеточным технологиям",
"Специалист по стрижке овец",
"Спортивный врач",
"Сталевар",
"Старшина",
"Стилист",
"Столяр",
"Столяр-краснодеревщик",
"Стоматолог",
"Страховой агент",
"Стрелок",
"Стрелочник",
"Строитель",
"Судебный пристав",
"Судья",
"Сурдолог",
"Сурдопедагог",
"Сценарист",
"Сыровар",
"Табаковод",
"Табунщик",
"Таксист",
"Тальман",
"Таможенник",
"Танатолог",
"Танкист",
"Танцор",
"Татуировщик",
"Телеграфист",
"Тележурналист",
"Телемастер",
"Телефонист",
"Телохранитель",
"Теолог",
"Терапевт",
"Териолог",
"Тестировщик",
"Техник",
"Техник",
"Технолог",
"Типограф",
"Тифлопедагог",
"Товаровед",
"Токарь",
"Токарь-карусельщик",
"Токсиколог",
"Топограф",
"Торакальный хирург",
"Торговый представитель",
"Травматолог",
"Тракторист",
"Трансфузиолог",
"Трейдер",
"Тренд-вотчер",
"Тыловик",
"Тюремный надзиратель",
"Уборщик",
"Упаковщик",
"Уролог",
"Учитель",
"Учёный",
"Фальцовщик",
"Фармацевт",
"Фельдшер",
"Фельдшер",
"Фермер",
"Физик",
"Физиотерапевт",
"Филолог",
"Философ",
"Финансист",
"Финансист",
"Флеболог",
"Флорист",
"Флорист",
"Формовщик",
"Фортификатор",
"Фотограф",
"Фотомодель",
"Фрезеровщик",
"Фтизиатр",
"Фуражир",
"Футуролог",
"Химик",
"Химик",
"Химик-аналитик",
"Химик-контролер",
"Химик-технолог",
"Хирург",
"Хлебопёк",
"Хлебороб",
"Хлопокороб",
"Холодильщик",
"Хореограф",
"Художник",
"Художник по свету",
"Шахтёр",
"Швейцар",
"Швея",
"Шифровальщик",
"Шкипер",
"Шлифовщик",
"Шорник",
"Штукатур",
"Штурман",
"Эколог",
"Экономист",
"Экспедитор",
"Экспедитор на дальних поездках",
"Эксперт-криминалист",
"Электрик",
"Эндокринолог",
"Эндоскопист",
"Энтомолог",
"Эпидемиолог",
"Эфферентолог",
"Ювелир",
"Юрисконсульт",
"Юрист"]
	@classmethod
	def job(cls):
		return cls.random_element(cls.jobs)

########NEW FILE########
__FILENAME__ = lorem
# -*- coding: utf-8 -*-
from __future__ import unicode_literals
from ..lorem import Provider as LoremProvider


class Provider(LoremProvider):
    word_list = (
        'алььтыра', 'дэлььынётё', 'вэртырэм', 'вэрыар', 'ты', 'рэгяонэ',
        'црял', 'квюальизквюэ', 'квюоджё', 'зюаз', 'конгуы', 'антеопам',
        'прё', 'этёам', 'форынчйбюж', 'альиквуандо', 'зэнтынтиаэ', 'хёз',
        'адепйжкйнг', 'ыюм', 'льаборэж', 'вим', 'фабулаз', 'нэ', 'толлйт',
        'эож', 'ажжюм', 'лыгимуз', 'пэртинакёа', 'видишчы', 'рэпудёандаэ',
        'еюж', 'бонорюм', 'про', 'но', 'анкилльаы', 'доктюж', 'адипижкй',
        'зигнёфэрумквюы', 'дэлььиката', 'мютат', 'амэт', 'едквюэ', 'апыирёан',
        'мэя', 'латины', 'ед', 'дытракжйт', 'констятюам', 'ку', 'дольор',
        'игнота', 'льаорыыт', 'хэндрэрет', 'магна', 'мэль', 'дыфяниэбаж',
        'дэльэнйт', 'агам', 'эффикеэнди', 'дикунт', 'хабэо', 'ыт', 'ёужто',
        'долорэж', 'ипзум', 'аппэтырэ', 'ючю', 'брутэ', 'долорэм',
        'интылльэгэбат', 'вёжи', 'эвэртё', 'татион', 'зймюл', 'эи',
        'юрбанйтаж', 'кибо', 'прима', 'ад', 'попюльо', 'вирйз', 'незл',
        'тальэ', 'ан', 'жолюм', 'лебыр', 'эюрйпйдяч', 'вёртюты', 'зыд',
        'пауло', 'омныз', 'хонэзтатёз', 'тебиквюэ', 'шэа', 'оффекйяж', 'ат',
        'рыквюы', 'декат', 'торквюатоз', 'дюиж', 'номинатй', 'жкаывола',
        'ведят', 'аккузата', 'пхйложопхяа', 'аппарэат', 'порро', 'эю',
        'эрюдитя', 'адмодум', 'эррорибуз', 'чэнзэрет', 'мэльёуз', 'бландит',
        'молыжтйаы', 'пошжим', 'тамквюам', 'ажжынтиор', 'вяш', 'ывыртятюр',
        'эпикюре', 'квуёдам', 'граэкйж', 'конжтетуто', 'такематыш', 'мацим',
        'шынчебюз', 'витюпэраторебуз', 'дытыррюизщэт', 'граэко', 'граэки',
        'щуавятатэ', 'пырикульа', 'квюандо', 'факёльиси', 'дычэрунт', 'кюм',
        'аккюжамюз', 'омнэжквюы', 'экз', 'индоктум', 'рэктэквуэ', 'дектаж',
        'фюгит', 'хабымуч', 'фалля', 'нонумй', 'апэриам', 'июварыт', 'квуй',
        'мыис', 'дежпютатионй', 'мыдиокрым', 'ылоквюэнтиам', 'нюлльам', 'ут',
        'аугюэ', 'ыам', 'фырре', 'азжюывырит', 'квуым', 'йн', 'ножтро',
        'зючкёпит', 'конкыптам', 'майыжтатйж', 'дуо', 'ыт', 'элыктрам',
        'ёнэрмйщ', 'ыпикурэи', 'ыёюз', 'инимёкюж', 'шапэрэт', 'выро',
        'либриз', 'кевёбюж', 'эа', 'коммюны', 'лэгыры', 'рыпрэхэндунт',
        'дёзсэнтёаш', 'лаборамюз', 'элитр', 'чадипжкёнг', 'мёнём', 'нык',
        'мыа', 'тота', 'квюот', 'ратионебюж', 'пырфэкто', 'факэр', 'пэрчёус',
        'ёнанй', 'кончэтытюр', 'одео', 'зкрипторэм', 'чонэт', 'факилиз',
        'жэмпэр', 'атоморюм', 'эжт', 'дылыктуч', 'тинкидюнт', 'аэквюы',
        'глориатюр', 'пэркйпет', 'модо', 'жят', 'эзшэ', 'хаж', 'аюдирэ',
        'вокынт', 'векж', 'квюоджёныглэгэнтур', 'луптатум', 'мюндй',
        'опортэры', 'дэлььякатезшимя', 'квюиж', 'витюпырата', 'вэл',
        'ыльигэнди', 'янтэрэсщэт', 'оффэндйт', 'нихйл', 'квюаэчтио', 'пэр',
        'квюо', 'пырикюлёз', 'нам', 'атквюе'
    )

########NEW FILE########
__FILENAME__ = person
# coding=utf-8
from __future__ import unicode_literals
from ..person import Provider as PersonProvider


class Provider(PersonProvider):
    formats = (
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{prefix}} {{first_name}} {{last_name}}',
        '{{first_name}} {{last_name}}',
        '{{prefix}} {{first_name}} {{last_name}}'
    )

    first_names = (
        'Август', 'Авдей', 'Аверкий', 'Аверьян', 'Авксентий', 'Автоном',
        'Агап', 'Агафон', 'Аггей', 'Адам', 'Адриан', 'Азарий',
        'Аким', 'Александр', 'Алексей', 'Амвросий', 'Амос', 'Ананий',
        'Анатолий', 'Андрей', 'Андрон', 'Андроник', 'Аникей', 'Аникита',
        'Анисим', 'Антип', 'Антонин', 'Аполлинарий', 'Аполлон', 'Арефий',
        'Аристарх', 'Аркадий', 'Арсений', 'Артемий', 'Артем', 'Архип',
        'Аскольд', 'Афанасий', 'Афиноген', 'Бажен', 'Богдан', 'Болеслав',
        'Борис', 'Борислав', 'Боян', 'Бронислав', 'Будимир', 'Вадим',
        'Валентин', 'Валерий', 'Валерьян', 'Варлаам', 'Варфоломей', 'Василий',
        'Вацлав', 'Велимир', 'Венедикт', 'Вениамин', 'Викентий', 'Виктор',
        'Викторин', 'Виссарион', 'Виталий', 'Владилен', 'Владлен', 'Владимир',
        'Владислав', 'Влас', 'Всеволод', 'Всемил', 'Всеслав', 'Вышеслав',
        'Вячеслав', 'Гаврила', 'Галактион', 'Гедеон', 'Геннадий', 'Георгий',
        'Герасим', 'Герман', 'Глеб', 'Гордей', 'Гостомысл', 'Гремислав',
        'Григорий', 'Гурий', 'Давыд', 'Данила', 'Дементий', 'Демид',
        'Демьян', 'Денис', 'Дмитрий', 'Добромысл', 'Доброслав', 'Дорофей',
        'Евгений', 'Евграф', 'Евдоким', 'Евлампий', 'Евсей', 'Евстафий',
        'Евстигней', 'Егор', 'Елизар', 'Елисей', 'Емельян', 'Епифан',
        'Еремей', 'Ермил', 'Ермолай', 'Ерофей', 'Ефим', 'Ефрем',
        'Захар', 'Зиновий', 'Зосима', 'Иван', 'Игнатий', 'Игорь',
        'Измаил', 'Изот', 'Изяслав', 'Иларион', 'Илья', 'Иннокентий',
        'Иосиф', 'Ипат', 'Ипатий', 'Ипполит', 'Ираклий', 'Исай',
        'Исидор', 'Казимир', 'Каллистрат', 'Капитон', 'Карл', 'Карп',
        'Касьян', 'Ким', 'Кир', 'Кирилл', 'Клавдий', 'Климент',
        'Кондрат', 'Кондратий', 'Конон', 'Константин', 'Корнил', 'Кузьма',
        'Куприян', 'Лавр', 'Лаврентий', 'Ладимир', 'Ладислав', 'Лазарь',
        'Лев', 'Леон', 'Леонид', 'Леонтий', 'Лонгин', 'Лука',
        'Лукьян', 'Лучезар', 'Любим', 'Любомир', 'Любосмысл', 'Макар',
        'Максим', 'Максимильян', 'Мариан', 'Марк', 'Мартын', 'Мартьян',
        'Матвей', 'Мефодий', 'Мечислав', 'Милан', 'Милен', 'Милий',
        'Милован', 'Мина', 'Мир', 'Мирон', 'Мирослав', 'Митофан',
        'Михаил', 'Михей', 'Модест', 'Моисей', 'Мокей', 'Мстислав',
        'Назар', 'Наркис', 'Натан', 'Наум', 'Нестор', 'Никандр',
        'Никанор', 'Никита', 'Никифор', 'Никодим', 'Николай', 'Никон',
        'Нифонт', 'Олег', 'Олимпий', 'Онуфрий', 'Орест', 'Осип',
        'Остап', 'Остромир', 'Павел', 'Панкратий', 'Панкрат', 'Пантелеймон',
        'Панфил', 'Парамон', 'Парфен', 'Пахом', 'Петр', 'Пимен',
        'Платон', 'Поликарп', 'Порфирий', 'Потап', 'Пров', 'Прокл',
        'Прокофий', 'Прохор', 'Радим', 'Радислав', 'Радован', 'Ратибор',
        'Ратмир', 'Родион', 'Роман', 'Ростислав', 'Рубен', 'Руслан',
        'Рюрик', 'Савва', 'Савватий', 'Савелий', 'Самсон', 'Самуил',
        'Светозар', 'Святополк', 'Святослав', 'Севастьян', 'Селиван', 'Селиверст',
        'Семен', 'Серафим', 'Сергей', 'Сигизмунд', 'Сидор', 'Сила',
        'Силантий', 'Сильвестр', 'Симон', 'Сократ', 'Соломон', 'Софон',
        'Софрон', 'Спартак', 'Спиридон', 'Станимир', 'Станислав', 'Степан',
        'Стоян', 'Тарас', 'Твердислав', 'Творимир', 'Терентий', 'Тимофей',
        'Тимур', 'Тит', 'Тихон', 'Трифон', 'Трофим', 'Ульян',
        'Устин', 'Фадей', 'Федор', 'Федосий', 'Федот', 'Феликс',
        'Феоктист', 'Феофан', 'Ферапонт', 'Филарет', 'Филимон', 'Филипп',
        'Фирс', 'Флорентин', 'Фока', 'Фома', 'Фортунат', 'Фотий',
        'Фрол', 'Харитон', 'Харлампий', 'Христофор', 'Чеслав', 'Эдуард',
        'Эммануил', 'Эмиль', 'Эраст', 'Эрнест', 'Эрнст', 'Ювеналий',
        'Юлиан', 'Юлий', 'Юрий', 'Яков', 'Ян', 'Якуб',
        'Януарий', 'Ярополк', 'Ярослав'
    )

    last_names = (
        'Смирнов', 'Иванов', 'Кузнецов', 'Попов', 'Соколов',
        'Лебедев', 'Козлов', 'Новиков', 'Морозов', 'Петров',
        'Волков', 'Соловьев', 'Васильев', 'Зайцев', 'Павлов',
        'Семенов', 'Голубев', 'Виноградов', 'Богданов', 'Воробьев',
        'Федоров', 'Михайлов', 'Беляев', 'Тарасов', 'Белов',
        'Комаров', 'Орлов', 'Киселев', 'Макаров', 'Андреев',
        'Ковалев', 'Ильин', 'Гусев', 'Титов', 'Кузьмин',
        'Кудрявцев', 'Баранов', 'Куликов', 'Алексеев', 'Степанов',
        'Яковлев', 'Сорокин', 'Сергеев', 'Романов', 'Захаров',
        'Борисов', 'Королев', 'Герасимов', 'Пономарев', 'Григорьев',
        'Лазарев', 'Медведев', 'Ершов', 'Никитин', 'Соболев',
        'Рябов', 'Поляков', 'Цветков', 'Данилов', 'Жуков',
        'Фролов', 'Журавлев', 'Николаев', 'Крылов', 'Максимов',
        'Сидоров', 'Осипов', 'Белоусов', 'Федотов', 'Дорофеев',
        'Егоров', 'Матвеев', 'Бобров', 'Дмитриев', 'Калинин',
        'Анисимов', 'Петухов', 'Антонов', 'Тимофеев', 'Никифоров',
        'Веселов', 'Филиппов', 'Марков', 'Большаков', 'Суханов',
        'Миронов', 'Ширяев', 'Александров', 'Коновалов', 'Шестаков',
        'Казаков', 'Ефимов', 'Денисов', 'Громов', 'Фомин',
        'Давыдов', 'Мельников', 'Щербаков', 'Блинов', 'Колесников',
        'Карпов', 'Афанасьев', 'Власов', 'Маслов', 'Исаков',
        'Тихонов', 'Аксенов', 'Гаврилов', 'Родионов', 'Котов',
        'Горбунов', 'Кудряшов', 'Быков', 'Зуев', 'Третьяков',
        'Савельев', 'Панов', 'Рыбаков', 'Суворов', 'Абрамов',
        'Воронов', 'Мухин', 'Архипов', 'Трофимов', 'Мартынов',
        'Емельянов', 'Горшков', 'Чернов', 'Овчинников', 'Селезнев',
        'Панфилов', 'Копылов', 'Михеев', 'Галкин', 'Назаров',
        'Лобанов', 'Лукин', 'Беляков', 'Потапов', 'Некрасов',
        'Хохлов', 'Жданов', 'Наумов', 'Шилов', 'Воронцов',
        'Ермаков', 'Дроздов', 'Игнатьев', 'Савин', 'Логинов',
        'Сафонов', 'Капустин', 'Кириллов', 'Моисеев', 'Елисеев',
        'Кошелев', 'Костин', 'Горбачев', 'Орехов', 'Ефремов',
        'Исаев', 'Евдокимов', 'Калашников', 'Кабанов', 'Носков',
        'Юдин', 'Кулагин', 'Лапин', 'Прохоров', 'Нестеров',
        'Харитонов', 'Агафонов', 'Муравьев', 'Ларионов', 'Федосеев',
        'Зимин', 'Пахомов', 'Шубин', 'Игнатов', 'Филатов',
        'Крюков', 'Рогов', 'Кулаков', 'Терентьев', 'Молчанов',
        'Владимиров', 'Артемьев', 'Гурьев', 'Зиновьев', 'Гришин',
        'Кононов', 'Дементьев', 'Ситников', 'Симонов', 'Мишин',
        'Фадеев', 'Комиссаров', 'Мамонтов', 'Носов', 'Гуляев',
        'Шаров', 'Устинов', 'Вишняков', 'Евсеев', 'Лаврентьев',
        'Брагин', 'Константинов', 'Корнилов', 'Авдеев', 'Зыков',
        'Бирюков', 'Шарапов', 'Никонов', 'Щукин', 'Дьячков',
        'Одинцов', 'Сазонов', 'Якушев', 'Красильников', 'Гордеев',
        'Самойлов', 'Князев', 'Беспалов', 'Уваров', 'Шашков',
        'Бобылев', 'Доронин', 'Белозеров', 'Рожков', 'Самсонов',
        'Мясников', 'Лихачев', 'Буров', 'Сысоев', 'Фомичев',
        'Русаков', 'Стрелков', 'Гущин', 'Тетерин', 'Колобов',
        'Субботин', 'Фокин', 'Блохин', 'Селиверстов', 'Пестов',
        'Кондратьев', 'Силин', 'Меркушев', 'Лыткин', 'Туров'
    )

    prefixes = ('г-н.', 'тов.')

    @classmethod
    def prefix(cls):
        return cls.random_element(cls.prefixes)

########NEW FILE########
__FILENAME__ = phone_number
from __future__ import unicode_literals
from ..phone_number import Provider as PhoneNumberProvider


class Provider(PhoneNumberProvider):
    formats = (
        '+7 ### ### ####',
        '+7 ### ### ## ##',
        '+7 (###) ###-##-##',
        '+7 (###) ###-####'
    )

########NEW FILE########
__FILENAME__ = ssn
from __future__ import unicode_literals
from . import BaseProvider


class Provider(BaseProvider):
    ssn_formats = ("###-##-####",)
    
    @classmethod
    def ssn(cls):
        return cls.bothify(cls.random_element(cls.ssn_formats))
########NEW FILE########
__FILENAME__ = user_agent
from __future__ import unicode_literals
from . import BaseProvider
from . import date_time
from datetime import datetime
import random


class Provider(BaseProvider):
    user_agents = ('firefox', 'chrome', 'internet_explorer', 'opera', 'safari')

    windows_platform_tokens = (
        'Windows NT 6.2', 'Windows NT 6.1', 'Windows NT 6.0', 'Windows NT 5.2', 'Windows NT 5.1',
        'Windows NT 5.01', 'Windows NT 5.0', 'Windows NT 4.0', 'Windows 98; Win 9x 4.90',
        'Windows 98', 'Windows 95', 'Windows CE'
    )

    linux_processors = ('i686', 'x86_64',)

    mac_processors = ('Intel', 'PPC', 'U; Intel', 'U; PPC')

    langs = ('en-US', 'sl-SI', 'it-IT')

    @classmethod
    def mac_processor(cls):
        return cls.random_element(cls.mac_processors)

    @classmethod
    def linux_processor(cls):
        return cls.random_element(cls.linux_processors)

    @classmethod
    def user_agent(cls):
        name = cls.random_element(cls.user_agents)
        return getattr(cls, name)()

    @classmethod
    def chrome(cls):
        saf = str(random.randint(531, 536)) + str(random.randint(0, 2))

        platforms = (
            "({0}) AppleWebKit/{1} (KHTML, like Gecko) Chrome/{2}.0.{3}.0 Safari/{4}".format(
                cls.linux_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),
            "({0}) AppleWebKit/{1} (KHTML, like Gecko) Chrome/{2}.0.{3}.0 Safari/{4}".format(
                cls.windows_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),
            "({0}) AppleWebKit/{1} (KHTML, like Gecko) Chrome/{2}.0.{3}.0 Safari/{4}".format(
                cls.mac_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),
        )

        return 'Mozilla/5.0 ' + cls.random_element(platforms)

    @classmethod
    def firefox(cls):
        ver = (
            'Gecko/{0} Firefox/{1}.0'.format(
            date_time.Provider.date_time_between(datetime(2011, 1, 1)), random.randint(4, 15)),
            'Gecko/{0} Firefox/3.6.{1}'.format(
                date_time.Provider.date_time_between(datetime(2010, 1, 1)), random.randint(1, 20)),
            'Gecko/{0} Firefox/3.8'.format(date_time.Provider.date_time_between(datetime(2010, 1, 1)), ),
        )

        platforms = (
            "({0}; {1}; rv:1.9.{2}.20) {3}".format(
                cls.windows_platform_token(), cls.random_element(cls.langs), random.randint(0, 2), random.choice(ver)),
            "({0}; rv:1.9.{1}.20) {2}".format(cls.linux_platform_token(), random.randint(5, 7), random.choice(ver)),
            "({0}; rv:1.9.{1}.20) {2}".format(cls.mac_platform_token(), random.randint(2, 6), random.choice(ver)),
        )

        return 'Mozilla/5.0 ' + cls.random_element(platforms)

    @classmethod
    def safari(cls):
        saf = "{0}.{1}.{2}".format(random.randint(531, 535), random.randint(1, 50), random.randint(1, 7))
        if random.randint(0, 1) == 0:
            ver = "{0}.{1}".format(random.randint(4, 5), random.randint(0, 1))
        else:
            ver = "{0}.0.{1}".format(random.randint(4, 5), random.randint(1, 5))

        platforms = (
            '(Windows; U; {0}) AppleWebKit/{1} (KHTML, like Gecko) Version/{2} Safari/{3}'.format(
                cls.windows_platform_token(), saf, ver, saf),
            '({0} rv:{1}.0; {2}) AppleWebKit/{3} (KHTML, like Gecko) Version/{4} Safari/{5}'.format(
                cls.mac_platform_token(), random.randint(2, 6), cls.random_element(cls.langs), saf, ver, saf),
            '(iPod; U; CPU iPhone OS {0}_{1} like Mac OS X; {2}) AppleWebKit/{3} (KHTML, like Gecko) Version/{4}.0.5 Mobile/8B{5} Safari/6{6}'.format(
                random.randint(3, 4), random.randint(0, 3), cls.random_element(cls.langs), saf, random.randint(3, 4),
                random.randint(111, 119), saf
            )
        )

        return 'Mozilla/5.0 ' + cls.random_element(platforms)

    @classmethod
    def opera(cls):

        platforms = (
            '({0}; {1}) Presto/2.9.{2} Version/{3}.00'.format(
                cls.linux_platform_token(), cls.random_element(cls.langs), random.randint(160, 190),
                random.randint(10, 12)),
            '({0}; {1}) Presto/2.9.{2} Version/{3}.00'.format(
                cls.windows_platform_token(), cls.random_element(cls.langs), random.randint(160, 190),
                random.randint(10, 12)),
        )

        return 'Opera/{0}.{1}.{2}'.format(random.randint(8, 9), random.randint(10, 99), cls.random_element(platforms))

    @classmethod
    def internet_explorer(cls):
        return 'Mozilla/5.0 (compatible; MSIE {0}.0; {1}; Trident/{2}.{3})'.format(
            random.randint(5, 9),
            cls.windows_platform_token(),
            random.randint(3, 5),
            random.randint(0, 1)
        )

    @classmethod
    def windows_platform_token(cls):
        return cls.random_element(cls.windows_platform_tokens)

    @classmethod
    def linux_platform_token(cls):
        return 'X11; Linux {0}'.format(cls.random_element(cls.linux_processors))

    @classmethod
    def mac_platform_token(cls):
        return 'Macintosh; {0} Mac OS X 10_{1}_{2}'.format(
            cls.random_element(cls.mac_processors), random.randint(5, 8), random.randint(0, 9))


########NEW FILE########
__FILENAME__ = address
# -*- coding: utf-8 -*-
from __future__ import unicode_literals
from ..address import Provider as AddressProvider


class Provider(AddressProvider):
    city_suffixes = ["市", ]
    city_formats = ["{{first_name}}{{city_suffix}}", ]

    building_number_formats = ["?座", ]
    postcode_formats = ["%#####", ]

    street_suffixes = ["街", "路"]
    street_name_formats = ["{{last_name}}{{street_suffix}}", ]
    street_address_formats = ["{{street_name}}{{building_number}}", ]

    address_formats = ["{{city}}{{street_address}} {{postcode}}", ]

    states = ["西夏区", "永川区", "秀英区", "高港区", "清城区", "兴山区",
              "锡山区", "清河区", "龙潭区", "华龙区", "海陵区", "滨城区",
              "东丽区", "高坪区", "沙湾区", "平山区", "城北区", "海港区",
              "沙市区", "双滦区", "长寿区", "山亭区", "南湖区", "浔阳区",
              "南长区", "友好区", "安次区", "翔安区", "沈河区", "魏都区",
              "西峰区", "萧山区", "金平区", "沈北新区", "孝南区", "上街区",
              "城东区", "牧野区", "大东区", "白云区", "花溪区", "吉利区",
              "新城区", "怀柔区", "六枝特区", "涪城区", "清浦区", "南溪区",
              "淄川区", "高明区"]
    cities = ["北京", "上海", "天津", "重庆", "哈尔滨", "长春", "沈阳",
              "呼和浩特", "石家庄", "乌鲁木齐", "兰州", "西宁", "西安",
              "银川", "郑州", "济南", "太原", "合肥", "武汉", "长沙",
              "南京", "成都", "贵阳", "昆明", "南宁", "拉萨", "杭州",
              "南昌", "广州", "福州", "台北", "海口", "香港", "澳门"]
    countries = ["阿富汗", "阿拉斯加", "阿尔巴尼亚", "阿尔及利亚", "安道尔", "安哥拉", "安圭拉岛英", "安提瓜和巴布达",
                 "阿根廷", "亚美尼亚", "阿鲁巴岛", "阿森松", "澳大利亚", "奥地利", "阿塞拜疆", "巴林", "孟加拉国",
                 "巴巴多斯", "白俄罗斯", "比利时", "伯利兹", "贝宁", "百慕大群岛", "不丹", "玻利维亚", "波斯尼亚和黑塞哥维那",
                 "博茨瓦纳", "巴西", "保加利亚", "布基纳法索", "布隆迪", "喀麦隆", "加拿大", "加那利群岛", "佛得角",
                 "开曼群岛", "中非", "乍得", "智利", "圣诞岛", "科科斯岛", "哥伦比亚", "巴哈马国", "多米尼克国", "科摩罗",
                 "刚果", "科克群岛", "哥斯达黎加", "克罗地亚", "古巴", "塞浦路斯", "捷克", "丹麦", "迪戈加西亚岛", "吉布提",
                 "多米尼加共和国", "厄瓜多尔", "埃及", "萨尔瓦多", "赤道几内亚", "厄立特里亚", "爱沙尼亚", "埃塞俄比亚", "福克兰群岛",
                 "法罗群岛", "斐济", "芬兰", "法国", "法属圭亚那", "法属波里尼西亚", "加蓬", "冈比亚", "格鲁吉亚", "德国", "加纳",
                 "直布罗陀", "希腊", "格陵兰岛", "格林纳达", "瓜德罗普岛", "关岛", "危地马拉", "几内亚", "几内亚比绍", "圭亚那",
                 "海地", "夏威夷", "洪都拉斯", "匈牙利", "冰岛", "印度", "印度尼西亚", "伊郎", "伊拉克", "爱尔兰", "以色列",
                 "意大利", "科特迪瓦", "牙买加", "日本", "约旦", "柬埔塞", "哈萨克斯坦", "肯尼亚", "基里巴斯", "朝鲜", "韩国",
                 "科威特", "吉尔吉斯斯坦", "老挝", "拉脱维亚", "黎巴嫩", "莱索托", "利比里亚", "利比亚", "列支敦士登", "立陶宛",
                 "卢森堡", "马其顿", "马达加斯加", "马拉维", "马来西亚", "马尔代夫", "马里", "马耳他", "马里亚纳群岛", "马绍尔群岛",
                 "马提尼克", "毛里塔尼亚", "毛里求斯", "马约特岛", "墨西哥", "密克罗尼西亚", "中途岛", "摩尔多瓦", "摩纳哥", "蒙古",
                 "蒙特塞拉特岛", "摩洛哥", "莫桑比克", "缅甸", "纳米比亚", "瑙鲁", "尼泊尔", "荷兰", "荷属安的列斯群岛", "新喀里多尼亚群岛",
                 "新西兰", "尼加拉瓜", "尼日尔", "尼日利亚", "纽埃岛", "诺福克岛", "挪威", "阿曼", "帕劳", "巴拿马", "巴布亚新几内亚",
                 "巴拉圭", "秘鲁", "菲律宾", "波兰", "葡萄牙", "巴基斯坦", "波多黎各", "卡塔尔", "留尼汪岛", "罗马尼亚", "俄罗斯",
                 "卢旺达", "东萨摩亚", "西萨摩亚", "圣马力诺", "圣皮埃尔岛及密克隆岛", "圣多美和普林西比", "沙特阿拉伯", "塞内加尔",
                 "塞舌尔", "新加坡", "斯洛伐克", "斯洛文尼亚", "所罗门群岛", "索马里", "南非", "西班牙", "斯里兰卡", "圣克里斯托弗和尼维斯",
                 "圣赫勒拿", "圣卢西亚", "圣文森特岛", "苏丹", "苏里南", "斯威士兰", "瑞典", "瑞士", "叙利亚", "塔吉克斯坦", "坦桑尼亚",
                 "泰国", "阿拉伯联合酋长国", "多哥", "托克劳群岛", "汤加", "特立尼达和多巴哥", "突尼斯", "土耳其", "土库曼斯坦",
                 "特克斯和凯科斯群岛", "图瓦卢", "美国", "乌干达", "乌克兰", "英国", "乌拉圭", "乌兹别克斯坦", "瓦努阿图",
                 "梵蒂冈", "委内瑞拉", "越南", "维尔京群岛", "维尔京群岛和圣罗克伊", "威克岛", "瓦里斯和富士那群岛", "西撒哈拉",
                 "也门", "南斯拉夫", "扎伊尔", "赞比亚", "桑给巴尔", "津巴布韦", "中华人民共和国", "中国"]

    @classmethod
    def building_number(cls):
        return cls.lexify(cls.random_element(cls.building_number_formats))

    @classmethod
    def city_name(cls):
        return cls.random_element(cls.cities)

    @classmethod
    def state(cls):
        return cls.random_element(cls.states)

########NEW FILE########
__FILENAME__ = company
# -*- coding: utf-8 -*-
from __future__ import unicode_literals
from ..company import Provider as CompanyProvider


class Provider(CompanyProvider):
    formats = ["{{company_prefix}}{{company_suffix}}", ]

    company_prefixes = ["超艺", "和泰", "九方", "鑫博腾飞", "戴硕电子", "济南亿次元",
                        "海创", "创联世纪", "凌云", "泰麒麟", "彩虹", "兰金电子",
                        "晖来计算机", "天益", "恒聪百汇", "菊风公司", "惠派国际公司",
                        "创汇", "思优", "时空盒数字", "易动力", "飞海科技", "华泰通安",
                        "盟新", "商软冠联", "图龙信息", "易动力", "华远软件", "创亿",
                        "时刻", "开发区世创", "明腾", "良诺", "天开", "毕博诚", "快讯",
                        "凌颖信息", "黄石金承", "恩悌", "雨林木风计算机", "双敏电子",
                        "维旺明", "网新恒天", "数字100", "飞利信", "立信电子", "联通时科",
                        "中建创业", "新格林耐特", "新宇龙信息", "浙大万朋", "MBP软件",
                        "昂歌信息", "万迅电脑", "方正科技", "联软", "七喜", "南康", "银嘉",
                        "巨奥", "佳禾", "国讯", "信诚致远", "浦华众城", "迪摩", "太极",
                        "群英", "合联电子", "同兴万点", "襄樊地球村", "精芯", "艾提科信",
                        "昊嘉", "鸿睿思博", "四通", "富罳", "商软冠联", "诺依曼软件",
                        "东方峻景", "华成育卓", "趋势", "维涛", "通际名联"]
    company_suffixes = [n + "有限公司" for n in ["科技", "网络", "信息", "传媒"]]

    @classmethod
    def company_prefix(cls):
        return cls.random_element(cls.company_prefixes)

########NEW FILE########
__FILENAME__ = person
# -*- coding: utf-8 -*-
from __future__ import unicode_literals
from ..person import Provider as PersonProvider


class Provider(PersonProvider):
    formats = ["{{last_name}}{{first_name}}", ]
    first_names = ["伟", "芳", "娜", "敏", "静", "秀英", "丽", "强", "磊", "洋", "艳", "勇", "军", "杰", "娟",
                   "涛", "超", "明", "霞", "秀兰", "刚", "平", "燕", "辉", "玲", "桂英", "丹", "萍", "鹏", "华",
                   "红", "玉兰", "飞", "桂兰", "英", "梅", "鑫", "波", "斌", "莉", "宇", "浩", "凯", "秀珍", "健",
                   "俊", "帆", "雪", "帅", "慧", "旭", "宁", "婷", "玉梅", "龙", "林", "玉珍", "凤英", "晶", "欢",
                   "玉英", "颖", "红梅", "佳", "倩", "阳", "建华", "亮", "成", "琴", "兰英", "畅", "建", "云", "洁",
                   "峰", "建国", "建军", "柳", "淑珍", "春梅", "海燕", "晨", "冬梅", "秀荣", "瑞", "桂珍", "莹", "秀云",
                   "桂荣", "志强", "秀梅", "丽娟", "婷婷", "玉华", "兵", "雷", "东", "琳", "雪梅", "淑兰", "丽丽", "玉",
                   "秀芳", "欣", "淑英", "桂芳", "博", "丽华", "丹丹", "彬", "桂香", "坤", "想", "淑华", "荣", "秀华",
                   "桂芝", "岩", "杨", "小红", "金凤", "文", "利", "楠", "红霞", "建平", "瑜", "桂花", "璐", "凤兰"]

    last_names = ["赵", "钱", "孙", "李", "周", "吴", "郑", "王", "冯", "陈", "诸", "卫", "蒋", "沈", "韩", "杨",
                  "朱", "秦", "尤", "许", "何", "吕", "施", "张", "孔", "曹", "严", "华", "金", "魏", "陶", "姜",
                  "戚", "谢", "邹", "喻", "柏", "水", "窦", "章", "云", "苏", "潘", "葛", "奚", "范", "彭", "郎",
                  "鲁", "韦", "昌", "马", "苗", "凤", "花", "方", "俞", "任", "袁", "柳", "酆", "鲍", "史", "唐",
                  "费", "廉", "岑", "薛", "雷", "贺", "倪", "汤", "滕", "殷", "罗", "毕", "郝", "邬", "安", "常",
                  "乐", "于", "时", "傅", "皮", "卞", "齐", "康", "伍", "余", "元", "卜", "顾", "孟", "平", "黄",
                  "和", "穆", "萧", "尹", "姚", "邵", "湛", "汪", "祁", "毛", "禹", "狄", "米", "贝", "明", "臧",
                  "计", "伏", "成", "戴", "谈", "宋", "茅", "庞", "熊", "纪", "舒", "屈", "项", "祝", "董", "粱",
                  "杜", "阮", "蓝", "闵", "席", "季", "麻", "强", "贾", "路", "娄", "危", "江", "童", "颜", "郭",
                  "梅", "盛", "林", "刁", "钟", "徐", "邱", "骆", "高", "夏", "蔡", "田", "樊", "胡", "凌", "霍",
                  "虞", "万", "支", "柯", "咎", "管", "卢", "莫", "经", "房", "裘", "缪", "干", "解", "应", "宗",
                  "丁", "宣", "贲", "邓", "郁", "单", "杭", "洪", "包", "诸", "左", "石", "崔", "吉", "钮", "龚",
                  "程", "嵇", "邢", "滑", "裴", "陆", "荣", "翁", "荀", "羊", "於", "惠", "甄", "魏", "家", "封",
                  "芮", "羿", "储", "靳", "汲", "邴", "糜", "松", "井", "段", "富", "巫", "乌", "焦", "巴", "弓",
                  "牧", "隗", "山", "谷", "车", "侯", "宓", "蓬", "全", "郗", "班", "仰", "秋", "仲", "伊", "宫",
                  "宁", "仇", "栾", "暴", "甘", "钭", "厉", "戎", "祖", "武", "符", "刘", "景", "詹", "束", "龙",
                  "叶", "幸", "司", "韶", "郜", "黎", "蓟", "薄", "印", "宿", "白", "怀", "蒲", "邰", "从", "鄂",
                  "索", "咸", "籍", "赖", "卓", "蔺", "屠", "蒙", "池", "乔", "阴", "郁", "胥", "能", "苍", "双",
                  "闻", "莘", "党", "翟", "谭", "贡", "劳", "逄", "姬", "申", "扶", "堵", "冉", "宰", "郦", "雍",
                  "却", "璩", "桑", "桂", "濮", "牛", "寿", "通", "边", "扈", "燕", "冀", "郏", "浦", "尚", "农",
                  "温", "别", "庄", "晏", "柴", "翟", "阎", "充", "慕", "连", "茹", "习", "宦", "艾", "鱼", "容",
                  "向", "古", "易", "慎", "戈", "廖", "庚", "终", "暨", "居", "衡", "步", "都", "耿", "满", "弘",
                  "匡", "国", "文", "寇", "广", "禄", "阙", "东", "殴", "殳", "沃", "利", "蔚", "越", "夔", "隆",
                  "师", "巩", "厍", "聂", "晁", "勾", "敖", "融", "冷", "訾", "辛", "阚", "那", "简", "饶", "空",
                  "曾", "毋", "沙", "乜", "养", "鞠", "须", "丰", "巢", "关", "蒯", "相", "查", "后", "荆", "红",
                  "游", "竺", "权", "逯", "盖", "益", "桓", "公", "万", "俟", "司", "马", "上", "官", "欧", "阳",
                  "夏", "侯", "诸", "葛", "闻", "人", "东", "方", "赫", "连", "皇", "甫", "尉", "迟", "公", "羊",
                  "澹", "台", "公", "冶", "宗", "政", "濮", "阳", "淳", "于", "单", "于", "太", "叔", "申", "屠",
                  "公", "孙", "仲", "孙", "轩", "辕", "令", "狐", "钟", "离", "宇", "文", "长", "孙", "慕", "容",
                  "鲜", "于", "闾", "丘", "司", "徒", "司", "空", "亓", "官", "司", "寇", "仉", "督", "子", "车",
                  "颛", "孙", "端", "木", "巫", "马", "公", "西", "漆", "雕", "乐", "正", "壤", "驷", "公", "良",
                  "拓", "跋", "夹", "谷", "宰", "父", "谷", "粱", "晋", "楚", "闫", "法", "汝", "鄢", "涂", "钦",
                  "段", "干", "百", "里", "东", "郭", "南", "门", "呼", "延", "归", "海", "羊", "舌", "微", "生",
                  "岳", "帅", "缑", "亢", "况", "后", "有", "琴", "梁", "丘", "左", "丘", "东", "门", "西", "门",
                  "商", "牟", "佘", "佴", "伯", "赏", "南", "宫", "墨", "哈", "谯", "笪", "年", "爱", "阳", "佟"]

########NEW FILE########
__FILENAME__ = phone_number
# -*- coding: utf-8 -*-
from __future__ import unicode_literals
from ..phone_number import Provider as PhoneNumberProvider

class Provider(PhoneNumberProvider):
    phonenumber_prefixes = [134, 135, 136, 137, 138, 139, 147, 150,
                            151, 152, 157, 158, 159, 182, 187, 188,
                            130, 131, 132, 145, 155, 156, 185, 186,
                            145, 133, 153, 180, 181, 189]
    formats = [str(i) + "########" for i in phonenumber_prefixes]

    @classmethod
    def phonenumber_prefix(cls):
        return cls.random_element(cls.phonenumber_prefixes)

########NEW FILE########
__FILENAME__ = address
# -*- coding: utf-8 -*-
from __future__ import unicode_literals
from ..address import Provider as AddressProvider


class Provider(AddressProvider):
    city_formats = ("{{city_name}}", )

    building_number_formats = ("%號", "%#號", "%##號", )
    postcode_formats = ("%####", "%##", )

    street_name_formats = ("{{street_name}}", )
    street_address_formats = ("{{street_name}}{{building_number}}", )

    address_formats = ("{{postcode}} {{city}}{{street_address}}", )
    secondary_address_formats = ('#樓', '之#')

    street_names = ("中正路", "中山路", "民生路", "中華路", "和平路",
                    "中興路", "仁愛路", "復興路", "民族路", "民權路",
                    "忠孝路", "信義路", "成功路", "新興路", "忠孝街",
                    "和平街", "信義街", "仁愛街", "文化路", "大同路",
                    "三民路", "新生路", "光復路", "自強路", "光明路",
                    "公園路", "民生街", "文化街", "中興街", "建國路",
                    "民權街", "自強街", "中山路１段", "中山路２段", "光明街",
                    "成功街", "永安街", "四維路", "新興街", "民族街",
                    "福德街", "大同街", "文昌街", "復興街", "博愛街",
                    "博愛路", "光華街", "太平路", "水源路", "新生街",
                    "四維街", "大仁街", "中央路", "大智街", "林森路",
                    "八德路", "長春路", "南街", "福德路", "光華路",
                    "八德街", "中山路３段", "東興路", "勝利街", "文昌路",
                    "三民街", "大勇街", "民有街", "自由路", "長安街",
                    "明德路", "明德街", "光復街", "德街", "忠義路",
                    "中和路", "自由街", "中正路１段", "永和街", "延平路",
                    "正義路", "五福街", "華興街", "育英路", "平和路",
                    "福安街", "中正路２段", "勝利路", "育英街", "興街",
                    "自立街", "民享街", "大智路", "民治街", "民治路",
                    "學府路", "中華街", "忠義街", "和街", "民富街",)

    cities = ("基隆市", "台北市", "新北市", "桃園縣", "新竹市",
              "新竹縣", "苗栗縣", "台中市", "彰化縣", "南投縣",
              "雲林縣", "嘉義市", "嘉義縣", "台南市", "高雄市",
              "屏東縣", "台東縣", "花蓮縣", "宜蘭縣", "澎湖縣",
              "金門縣", "連江縣")

    # from
    countries = ("阿爾巴尼亞", "剛果共和國", "阿爾及利亞", "丹麥",
                 "安哥拉", "多明尼加", "安圭拉", "多米尼克",
                 "阿根廷", "厄瓜多爾", "亞美尼亞", "埃及",
                 "阿路巴", "薩爾瓦多", "澳大利亞", "厄利垂亞",
                 "奧地利", "愛沙尼亞", "亞塞拜然", "衣索匹亞",
                 "巴哈馬", "斐濟", "巴林", "芬蘭", "孟加拉", "法屬玻里尼西亞",
                 "法國", "巴貝多", "加彭", "白俄羅斯", "喬治亞",
                 "比利時", "德國", "貝里斯", "迦納", "貝南", "直布羅陀",
                 "百慕達", "英國", "不丹", "希臘", "玻利維亞", "格瑞那達",
                 "波希尼亞及赫塞哥維那", "瓜地馬拉", "波札那", "幾內亞",
                 "巴西", "蓋亞那", "汶萊", "海地", "保加利亞", "宏都拉斯",
                 "布吉納法索", "香港", "蒲隆地", "匈牙利", "柬埔寨", "冰島",
                 "喀麥隆", "印度", "加拿大", "印尼", "維德角島", "依朗",
                 "開曼群島", "伊拉克", "中非共和國", "愛爾蘭", "查德", "以色列",
                 "智利", "義大利", "中國大陸", "牙買加", "哥倫比亞", "日本",
                 "剛果", "約旦", "科克群島", "肯亞", "哥斯大黎加", "韓國",
                 "象牙海岸", "科威特", "克羅埃西亞", "寮國", "塞浦路斯", "拉脫維亞",
                 "捷克", "賴索托", "盧森堡", "聖露西亞", "澳門", "聖文森及格瑞那丁",
                 "馬其頓", "聖多美及普林西比", "馬達加斯加", "沙烏地阿拉伯",
                 "馬拉威", "塞內加爾", "馬來西亞", "塞席爾", "馬爾地夫", "獅子山",
                 "馬利", "新加坡", "馬爾他", "斯洛伐克", "模里西斯", "斯洛維尼亞",
                 "茅利塔尼亞", "索羅門群島", "墨西哥", "索馬利亞",
                 "摩爾多瓦", "南非", "蒙古", "西班牙", "摩洛哥", "斯里蘭卡",
                 "緬甸", "蘇丹", "納米比亞", "蘇利南", "諾魯", "史瓦濟蘭",
                 "尼泊爾", "瑞典", "荷蘭", "瑞士", "新喀里多尼亞", "敘利亞",
                 "紐西蘭", "坦尚尼亞", "尼日", "泰國", "奈及利亞", "多哥",
                 "挪威", "千里達及托貝哥", "阿曼", "突尼西亞", "巴基斯坦", "土耳其",
                 "巴拿馬", "烏干達", "巴布亞紐幾內亞", "烏克蘭",
                 "巴拉圭", "阿拉伯聯合大公國", "秘魯", "美國", "菲律賓", "烏拉圭",
                 "波蘭", "委內瑞拉", "葡萄牙", "越南", "卡達", "西薩摩亞",
                 "羅馬尼亞", "葉門", "俄羅斯", "尚比亞", "盧安達", "辛巴威",
                 "聖克里斯多福及尼維斯")

    @classmethod
    def secondary_address(cls):
        return cls.numerify(cls.random_element(cls.secondary_address_formats))

    @classmethod
    def building_number(cls):
        return cls.numerify(cls.random_element(cls.building_number_formats))

    @classmethod
    def street_name(cls):
        return cls.random_element(cls.street_names)

    @classmethod
    def city_name(cls):
        return cls.random_element(cls.cities)

########NEW FILE########
__FILENAME__ = company
# -*- coding: utf-8 -*-
from __future__ import unicode_literals
from ..company import Provider as CompanyProvider


class Provider(CompanyProvider):
    formats = ("{{company_prefix}}{{company_suffix}}", )

    company_prefixes = (
        "品王餐飲", "一統企業", "品誠", "台灣電信",
        "Goagle", "一統星巴克", "台日積體電路", "榮長航空",
        "台灣印無品良", "華中航空", "台灣人銀行", "國中鋼鐵",
        "海鴻精密", "台灣鐵高", "家宜家居（KIEA）", "天上雜誌",
        "台灣力電", "碩華電腦", "雄豹旅遊", "光新三越百貨",
        "台灣軟微", "鐵台", "一統超商", "碁宏",
        "創群光電（奇原美電子）", "台灣酒菸", "美奧廣告", "AYHOO!摩奇",
        "台灣台油", "達宏國際電子", "華晶國際酒店", "秀威影城",
        "王鼎餐飲集團", "台灣五星電子", "遊戲葡萄數位科技", "橋子王生技",
        "大八電視", "台灣業糖", "都亞緻麗", "台灣來自水",
        "麥當當", "風微廣場", "見遠雜誌", "石金堂",
        "邦城文化事業", "華中郵政", "達友光電", "中台信託商業銀行",
        "台北登來喜大飯店", "全味食品工業", "遠西百貨", "旗花（台灣銀）行",
        "冠智科技", "丹味企業", "發聯科技", "台灣雅萊（Y'ORÉAL）",
        "古太可口可樂", "榮長海運", "達廣電腦", "華福大飯店",
        "立三電視", "星燦國際旅行社", "衣優庫（Nuiqlo）", "德汎",
        "台北眾大捷運", "共公電視", "明陽海運", "雄遠建設事業",
        "台灣迪奧汽車", "台灣地土銀行", "天中電視", "月日光半導體",
        "塑台石化", "樂可旅遊集團", "信永藥品", "輝燁企業",
        "興復航空運輸", "豐兆國際商業銀行", "平太洋崇光百貨", "神漢名店百貨",
        "台灣士賓", "賓國大飯店", "業商週刊", "台灣BIM",
        "湖劍山世界", "合作庫金商業銀行", "台北邦富商業銀行", "愛味之",
        "邦富人壽保險", "律理法律", "心安食品服務（斯摩漢堡）", "松黑",
        "台灣生資堂", "鮮爭", "達台電子", "聯燁鋼鐵", "華聯電子",
        "瑞輝大藥廠", "隆豐大飯店（北台君悅）", "資華粧業（生資堂）")

    company_suffixes = ("", "有限公司", "股份有限公司", "資訊有限公司")

    @classmethod
    def company_prefix(cls):
        return cls.random_element(cls.company_prefixes)

########NEW FILE########
__FILENAME__ = person
# -*- coding: utf-8 -*-
from __future__ import unicode_literals
from ..person import Provider as PersonProvider


class Provider(PersonProvider):
    formats = ("{{last_name}}{{first_name}}", )
    first_names = ('雅萍', '惠雯', '嘉玲', '宇軒', '雅文', '詩婷', '欣怡', '庭瑋',
                   '志偉', '怡萱', '美玲', '淑玲', '冠廷', '怡伶', '彥廷', '淑芬',
                   '哲瑋', '惠如', '佳樺', '思穎', '怡如', '筱涵', '雅琪', '怡安',
                   '佳玲', '心怡', '宜君', '志豪', '淑娟', '淑貞', '郁雯', '佩珊',
                   '威廷', '靜怡', '雅涵', '怡君', '靜宜', '俊賢', '雅玲', '依婷',
                   '志宏', '家豪', '詩涵', '佩君', '俊傑', '承翰', '婷婷', '淑惠',
                   '佳蓉', '俊宏', '瑋婷', '佳穎', '怡婷', '鈺婷', '雅筑', '馨儀',
                   '淑華', '柏翰', '信宏', '雅雯', '建宏', '冠宇', '佳慧', '雅慧',
                   '家瑋', '慧君', '雅惠', '婉婷', '家銘', '琬婷', '冠霖', '雅芳',
                   '郁婷', '宗翰', '淑慧', '雅婷', '宜庭', '家瑜', '惠婷',
                   '沖', '懿', '龍', '中山', '羽', '美琪', '飛', '傑克')

    last_names = ("趙", "錢", "孫", "李", "周", "吳", "鄭", "王",
                  "馮", "陳", "褚", "衛", "蔣", "沈", "韓", "楊",
                  "朱", "秦", "尤", "許", "何", "呂", "施", "張",
                  "孔", "曹", "嚴", "華", "金", "魏", "陶", "薑",
                  "戚", "謝", "鄒", "喻", "柏", "水", "竇", "章",
                  "雲", "蘇", "潘", "葛", "奚", "範", "彭", "郎",
                  "魯", "韋", "昌", "馬", "苗", "鳳", "花", "方",
                  "俞", "任", "袁", "柳", "酆", "鮑", "史", "唐",
                  "費", "廉", "岑", "薛", "雷", "賀", "倪", "湯",
                  "滕", "殷", "羅", "畢", "郝", "鄔", "安", "常",
                  "樂", "於", "時", "傅", "皮", "卞", "齊", "康",
                  "伍", "餘", "元", "蔔", "顧", "孟", "平", "黃",
                  "和", "穆", "蕭", "尹", "姚", "邵", "湛", "汪",
                  "祁", "毛", "禹", "狄", "米", "貝", "明", "臧",
                  "計", "伏", "成", "戴", "談", "宋", "茅", "龐",
                  "熊", "紀", "舒", "屈", "項", "祝", "董", "梁",
                  "杜", "阮", "藍", "閔", "席", "季", "麻", "強",
                  "賈", "路", "婁", "危", "江", "童", "顏", "郭",
                  "梅", "盛", "林", "刁", "鍾", "徐", "邱", "駱",
                  "高", "夏", "蔡", "田", "樊", "胡", "淩", "霍",
                  "虞", "萬", "支", "柯", "昝", "管", "盧", "莫",
                  "柯", "房", "裘", "繆", "幹", "解", "應", "宗",
                  "丁", "宣", "賁", "鄧", "鬱", "單", "杭", "洪",
                  "包", "諸", "左", "石", "崔", "吉", "鈕", "龔",
                  "程", "嵇", "邢", "滑", "裴", "陸", "榮", "翁",
                  "荀", "羊", "于", "惠", "甄", "曲", "封",
                  "芮", "羿", "儲", "靳", "汲", "邴", "糜", "松",
                  "井", "段", "富", "巫", "烏", "焦", "巴", "弓",
                  "牧", "隗", "山", "穀", "車", "侯", "宓", "蓬",
                  "全", "郗", "班", "仰", "秋", "仲", "伊", "宮",
                  "甯", "欒", "暴", "甘", "鈄", "曆", "戎",
                  "祖", "武", "符", "劉", "景", "詹", "束", "龍",
                  "葉", "幸", "司", "韶", "郜", "黎", "薊", "溥",
                  "印", "宿", "白", "懷", "蒲", "邰", "從", "鄂",
                  "索", "鹹", "籍", "賴", "卓", "藺", "蒙",
                  "池", "喬", "陽", "鬱", "胥", "能", "蒼", "雙",
                  "聞", "莘", "党", "翟", "譚", "貢", "勞", "逄",
                  "姬", "申", "扶", "堵", "冉", "宰", "酈", "雍",
                  "卻", "璩", "桑", "桂", "濮", "牛", "壽", "通",
                  "邊", "扈", "燕", "冀", "浦", "尚", "農",
                  "溫", "別", "莊", "晏", "柴", "瞿", "閻", "充",
                  "慕", "連", "茹", "習", "宦", "艾", "魚", "容",
                  "向", "古", "易", "慎", "戈", "廖", "庾", "終",
                  "暨", "居", "衡", "步", "都", "耿", "滿", "弘",
                  "匡", "國", "文", "寇", "廣", "祿", "闕", "東",
                  "歐", "殳", "沃", "利", "蔚", "越", "夔", "隆",
                  "師", "鞏", "厙", "聶", "晁", "勾", "敖", "融",
                  "冷", "訾", "辛", "闞", "那", "簡", "饒",
                  "曾", "毋", "沙", "養", "鞠", "須", "豐",
                  "巢", "關", "蒯", "相", "查", "後", "荊", "紅",
                  "游", "竺", "權", "逮", "盍", "益", "桓", "公",
                  "司馬", "上官", "歐陽", "東方", "公羊",
                  "公冶", "淳于", "公孫", "慕容", "司徒", "司空",)

########NEW FILE########
__FILENAME__ = phone_number
# -*- coding: utf-8 -*-
from __future__ import unicode_literals
from ..phone_number import Provider as PhoneNumberProvider


class Provider(PhoneNumberProvider):
    formats = ("(##) %#######",
               "##-%#######",
               "### %#######",
               "09########",
               "09##-######",
               "##-%######",
               "## %######")

########NEW FILE########
__FILENAME__ = ssn
# coding=utf-8
from __future__ import unicode_literals
from ..ssn import Provider as SsnProvider


class Provider(SsnProvider):
    ssn_formats = ("?#########",)

    @classmethod
    def ssn(cls):
        return cls.bothify(cls.random_element(cls.ssn_formats)).upper()

########NEW FILE########
__FILENAME__ = tests
from __future__ import unicode_literals
import unittest
from faker import Generator


class BarProvider(object):
    def foo_formatter(self):
        return 'barfoo'


class FooProvider(object):
    def foo_formatter(self):
        return 'foobar'

    def foo_formatter_with_arguments(self, param='', append=''):
        return 'baz' + param + append


class FactoryTestCase(unittest.TestCase):

    def setUp(self):
        self.generator = Generator()
        self.provider = FooProvider()
        self.generator.add_provider(self.provider)

    def test_add_provider_gives_priority_to_newly_added_provider(self):
        self.generator.add_provider(BarProvider())
        self.assertEqual('barfoo', self.generator.format('foo_formatter'))

    def test_get_formatter_returns_callable(self):
        formatter = self.generator.get_formatter('foo_formatter')
        self.assertTrue(hasattr(formatter, '__call__') or isinstance(formatter, (classmethod, staticmethod)))

    def test_get_formatter_returns_correct_formatter(self):
        self.assertEqual(self.provider.foo_formatter, self.generator.get_formatter('foo_formatter'))

    def test_get_formatter_throws_exception_on_incorrect_formatter(self):
        self.assertRaises(AttributeError, self.generator.get_formatter, 'barFormatter')

    def test_format_calls_formatter_on_provider(self):
        self.assertEqual('foobar', self.generator.format('foo_formatter'))

    def test_format_transfers_arguments_to_formatter(self):
        self.assertEqual('bazfoo!', self.generator.format('foo_formatter_with_arguments', 'foo', append='!'))

    def test_parse_returns_same_string_when_it_contains_no_curly_braces(self):
        self.assertEqual('fooBar#?', self.generator.parse('fooBar#?'))

    def test_parse_returns_string_with_tokens_replaced_by_formatters(self):
        self.assertEqual('This is foobar a text with " foobar "',
                         self.generator.parse('This is {{foo_formatter}} a text with "{{ foo_formatter }}"'))

    #def testParseReturnsStringWithTokensReplacedByFormattersWithArguments(self):
    #    self.assertEqual('This is foobar',
    #                     self.generator.parse('This is {{foo_formatter_with_arguments:bar}}'))

    def test_magic_call_calls_format(self):
        self.assertEqual('foobar', self.generator.foo_formatter())

    def test_magic_call_calls_format_with_arguments(self):
        self.assertEqual('bazfoo', self.generator.foo_formatter_with_arguments('foo'))

    def test_documentor(self):
        from faker.cli import print_doc
        print_doc()
        print_doc('address')
        print_doc('faker.providers.it_IT.person')
        self.assertRaises(AttributeError, self.generator.get_formatter, 'barFormatter')

    def test_command(self):
        from faker.cli import execute_from_command_line
        execute_from_command_line(['faker', 'address'])


if __name__ == '__main__':
    unittest.main()

########NEW FILE########
__FILENAME__ = datetime_safe
# From django.utils.datetime_safe

# Python's datetime strftime doesn't handle dates before 1900.
# These classes override date and datetime to support the formatting of a date
# through its full "proleptic Gregorian" date range.
#
# Based on code submitted to comp.lang.python by Andrew Dalke
#
# >>> datetime_safe.date(1850, 8, 2).strftime("%Y/%m/%d was a %A")
# '1850/08/02 was a Friday'
from __future__ import unicode_literals
from datetime import date as real_date, datetime as real_datetime
import re
import time


class date(real_date):
    def strftime(self, fmt):
        return strftime(self, fmt)


class datetime(real_datetime):
    def strftime(self, fmt):
        return strftime(self, fmt)

    def combine(self, date, time):
        return datetime(date.year, date.month, date.day, time.hour, time.minute, time.microsecond, time.tzinfo)

    def date(self):
        return date(self.year, self.month, self.day)


def new_date(d):
    """Generate a safe date from a datetime.date object."""
    return date(d.year, d.month, d.day)


def new_datetime(d):
    """
    Generate a safe datetime from a datetime.date or datetime.datetime object.
    """
    kw = [d.year, d.month, d.day]
    if isinstance(d, real_datetime):
        kw.extend([d.hour, d.minute, d.second, d.microsecond, d.tzinfo])
    return datetime(*kw)

# This library does not support strftime's "%s" or "%y" format strings.
# Allowed if there's an even number of "%"s because they are escaped.
_illegal_formatting = re.compile(r"((^|[^%])(%%)*%[sy])")


def _findall(text, substr):
    # Also finds overlaps
    sites = []
    i = 0
    while 1:
        j = text.find(substr, i)
        if j == -1:
            break
        sites.append(j)
        i = j + 1
    return sites


def strftime(dt, fmt):
    if dt.year >= 1900:
        return super(type(dt), dt).strftime(fmt)
    illegal_formatting = _illegal_formatting.search(fmt)
    if illegal_formatting:
        raise TypeError("strftime of dates before 1900 does not handle" + illegal_formatting.group(0))

    year = dt.year
    # For every non-leap year century, advance by
    # 6 years to get into the 28-year repeat cycle
    delta = 2000 - year
    off = 6 * (delta // 100 + delta // 400)
    year += off

    # Move to around the year 2000
    year += ((2000 - year) // 28) * 28
    timetuple = dt.timetuple()
    s1 = time.strftime(fmt, (year,) + timetuple[1:])
    sites1 = _findall(s1, str(year))

    s2 = time.strftime(fmt, (year + 28,) + timetuple[1:])
    sites2 = _findall(s2, str(year + 28))

    sites = []
    for site in sites1:
        if site in sites2:
            sites.append(site)

    s = s1
    syear = "%04d" % (dt.year,)
    for site in sites:
        s = s[:site] + syear + s[site + 4:]
    return s

########NEW FILE########
__FILENAME__ = __main__

if __name__ == "__main__":

    from faker.cli import execute_from_command_line
    execute_from_command_line()
########NEW FILE########
