__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# glue documentation build configuration file, created by
# sphinx-quickstart on Sun Jan  1 19:36:52 2012.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.todo']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'glue'
copyright = u'2013, Jorge Bastida'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.

import pkg_resources
try:
    release = pkg_resources.get_distribution('glue').version
except pkg_resources.DistributionNotFound:
    print 'To build the documentation, The distribution information of glue'
    print 'Has to be available.  Either install the package into your'
    print 'development environment or run "setup.py develop" to setup the'
    print 'metadata.  A virtualenv is recommended!'
    sys.exit(1)
del pkg_resources

version = '.'.join(release.split('.')[:2])

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'nature'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
#html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'gluedoc'


# -- Options for LaTeX output --------------------------------------------------

# The paper size ('letter' or 'a4').
#latex_paper_size = 'letter'

# The font size ('10pt', '11pt' or '12pt').
#latex_font_size = '10pt'

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'glue.tex', u'glue Documentation',
   u'Jorge Bastida', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Additional stuff for the LaTeX preamble.
#latex_preamble = ''

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'glue', u'glue Documentation',
     [u'Jorge Bastida'], 1)
]

########NEW FILE########
__FILENAME__ = diagonal
class DiagonalAlgorithm(object):

    def process(self, sprite):
        x = y = 0
        for image in sprite.images:
            image.x = x
            image.y = y
            x += image.absolute_width
            y += image.absolute_height

########NEW FILE########
__FILENAME__ = horizontal
class HorizontalAlgorithm(object):

    def process(self, sprite):
        x = 0
        for image in sprite.images:
            image.y = 0
            image.x = x
            x += image.absolute_width

########NEW FILE########
__FILENAME__ = horizontal_bottom
class HorizontalBottomAlgorithm(object):

    def process(self, sprite):
        max_height = max([i.height for i in sprite.images])
        x = 0
        for image in sprite.images:
            image.y = max_height - image.height
            image.x = x
            x += image.absolute_width

########NEW FILE########
__FILENAME__ = square
import copy


class SquareAlgorithmNode(object):

    def __init__(self, x=0, y=0, width=0, height=0, used=False,
                 down=None, right=None):
        """Node constructor.

        :param x: X coordinate.
        :param y: Y coordinate.
        :param width: Image width.
        :param height: Image height.
        :param used: Flag to determine if the node is used.
        :param down: Down :class:`~Node`.
        :param right Right :class:`~Node`.
        """
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.used = used
        self.right = right
        self.down = down

    def find(self, node, width, height):
        """Find a node to allocate this image size (width, height).

        :param node: Node to search in.
        :param width: Pixels to grow down (width).
        :param height: Pixels to grow down (height).
        """
        if node.used:
            return self.find(node.right, width, height) or self.find(node.down, width, height)
        elif node.width >= width and node.height >= height:
            return node
        return None

    def grow(self, width, height):
        """ Grow the canvas to the most appropriate direction.

        :param width: Pixels to grow down (width).
        :param height: Pixels to grow down (height).
        """
        can_grow_d = width <= self.width
        can_grow_r = height <= self.height

        should_grow_r = can_grow_r and self.height >= (self.width + width)
        should_grow_d = can_grow_d and self.width >= (self.height + height)

        if should_grow_r:
            return self.grow_right(width, height)
        elif should_grow_d:
            return self.grow_down(width, height)
        elif can_grow_r:
            return self.grow_right(width, height)
        elif can_grow_d:
            return self.grow_down(width, height)

        return None

    def grow_right(self, width, height):
        """Grow the canvas to the right.

        :param width: Pixels to grow down (width).
        :param height: Pixels to grow down (height).
        """
        old_self = copy.copy(self)
        self.used = True
        self.x = self.y = 0
        self.width += width
        self.down = old_self
        self.right = SquareAlgorithmNode(x=old_self.width,
                                         y=0,
                                         width=width,
                                         height=self.height)

        node = self.find(self, width, height)
        if node:
            return self.split(node, width, height)
        return None

    def grow_down(self, width, height):
        """Grow the canvas down.

        :param width: Pixels to grow down (width).
        :param height: Pixels to grow down (height).
        """
        old_self = copy.copy(self)
        self.used = True
        self.x = self.y = 0
        self.height += height
        self.right = old_self
        self.down = SquareAlgorithmNode(x=0,
                                        y=old_self.height,
                                        width=self.width,
                                        height=height)

        node = self.find(self, width, height)
        if node:
            return self.split(node, width, height)
        return None

    def split(self, node, width, height):
        """Split the node to allocate a new one of this size.

        :param node: Node to be splitted.
        :param width: New node width.
        :param height: New node height.
        """
        node.used = True
        node.down = SquareAlgorithmNode(x=node.x,
                                        y=node.y + height,
                                        width=node.width,
                                        height=node.height - height)
        node.right = SquareAlgorithmNode(x=node.x + width,
                                         y=node.y,
                                         width=node.width - width,
                                         height=height)
        return node


class SquareAlgorithm(object):

    def process(self, sprite):

        root = SquareAlgorithmNode(width=sprite.images[0].absolute_width,
                                   height=sprite.images[0].absolute_height)

        # Loot all over the images creating a binary tree
        for image in sprite.images:
            node = root.find(root, image.absolute_width, image.absolute_height)
            if node:  # Use this node
                node = root.split(node, image.absolute_width, image.absolute_height)
            else:  # Grow the canvas
                node = root.grow(image.absolute_width, image.absolute_height)

            image.x = node.x
            image.y = node.y

########NEW FILE########
__FILENAME__ = vertical
class VerticalAlgorithm(object):

    def process(self, sprite):
        y = 0
        for image in sprite.images:
            image.x = 0
            image.y = y
            y += image.absolute_height

########NEW FILE########
__FILENAME__ = vertical_right
class VerticalRightAlgorithm(object):

    def process(self, sprite):
        max_width = max([i.width for i in sprite.images])
        y = 0
        for image in sprite.images:
            image.x = max_width - image.width
            image.y = y
            y += image.absolute_height

########NEW FILE########
__FILENAME__ = bin
#!/usr/bin/env python
import os
import sys
import argparse

from PIL import Image as PImage

from glue.formats import formats
from glue.helpers import redirect_stdout
from glue import exceptions
from glue import managers
from glue import __version__


def main(argv=None):

    argv = (argv or sys.argv)[1:]

    parser = argparse.ArgumentParser(usage=("usage: %(prog)s [source | --source | -s] [output | --output | -o]"))

    parser.add_argument("--source", "-s",
                        dest="source",
                        type=unicode,
                        default=os.environ.get('GLUE_SOURCE', None),
                        help="Source path")

    parser.add_argument("--output", "-o",
                        dest="output",
                        type=unicode,
                        default=os.environ.get('GLUE_OUTPUT', None),
                        help="Output path")

    parser.add_argument("-q", "--quiet",
                        dest="quiet",
                        action='store_true',
                        default=os.environ.get('GLUE_QUIET', False),
                        help="Suppress all normal output")

    parser.add_argument("-r", "--recursive",
                        dest="recursive",
                        action='store_true',
                        default=os.environ.get('GLUE_RECURSIVE', False),
                        help=("Read directories recursively and add all "
                              "the images to the same sprite."))

    parser.add_argument("--follow-links",
                        dest="follow_links",
                        action='store_true',
                        default=os.environ.get('GLUE_FOLLOW_LINKS', False),
                        help="Follow symbolic links.")

    parser.add_argument("-f", "--force",
                        dest="force",
                        action='store_true',
                        default=os.environ.get('GLUE_FORCE', False),
                        help=("Force glue to create every sprite image and "
                              "metadata file even if they already exists in "
                              "the output directory."))

    parser.add_argument("-w", "--watch",
                        dest="watch",
                        action='store_true',
                        default=os.environ.get('GLUE_WATCH', False),
                        help=("Watch the source folder for changes and rebuild "
                              "when new files appear, disappear or change."))

    parser.add_argument("--project",
                        dest="project",
                        action="store_true",
                        default=os.environ.get('GLUE_PROJECT', False),
                        help="Generate sprites for multiple folders")

    parser.add_argument("-v", "--version",
                        action="version",
                        version='%(prog)s ' + __version__,
                        help="Show program's version number and exit")

    group = parser.add_argument_group("Algorithm options")

    group.add_argument("-a", "--algorithm",
                       dest="algorithm",
                       metavar='NAME',
                       type=unicode,
                       default=os.environ.get('GLUE_ALGORITHM', 'square'),
                       choices=['square', 'vertical', 'horizontal',
                                'vertical-right', 'horizontal-bottom',
                                'diagonal'],
                       help=("Allocation algorithm: square, vertical, "
                             "horizontal, vertical-right, horizontal-bottom, "
                             "diagonal. (default: square)"))

    group.add_argument("--ordering",
                       dest="algorithm_ordering",
                       metavar='NAME',
                       type=unicode,
                       default=os.environ.get('GLUE_ORDERING', 'maxside'),
                       choices=['maxside', 'width', 'height', 'area', 'filename',
                                '-maxside', '-width', '-height', '-area', '-filename'],
                       help=("Ordering criteria: maxside, width, height, area or "
                             "filename (default: maxside)"))

    # Populate the parser with options required by other formats
    for format in formats.itervalues():
        format.populate_argument_parser(parser)

    #
    # Handle deprecated arguments
    #

    group = parser.add_argument_group("Deprecated options")
    deprecated_arguments = {}

    def add_deprecated_argument(*args, **kwargs):
        group.add_argument(*args, **kwargs)
        deprecated_arguments[kwargs['dest']] = args[0]

    add_deprecated_argument("--global-template", dest="global_template")
    add_deprecated_argument("--each-template", dest="each_template")
    add_deprecated_argument("--ratio-template", dest="ratio_template")
    add_deprecated_argument("--ignore-filename-paddings", action='store_true',
                            dest="ignore_filename_paddings")
    add_deprecated_argument("--optipng", dest="optipng", action='store_true')
    add_deprecated_argument("--optipngpath", dest="optipngpath")
    add_deprecated_argument("--debug", action='store_true', dest="debug")
    add_deprecated_argument("--imagemagick", dest="imagemagick",
                            action='store_true')
    add_deprecated_argument("--imagemagickpath", dest="imagemagickpath")

    # Parse input
    options, args = parser.parse_known_args(argv)


    # Get the list of enabled formats
    options.enabled_formats = [f for f in formats if getattr(options, '{0}_dir'.format(f), False)]

    # If there is only one enabled format (img) or if there are two (img, html)
    # this means glue is been executed without any specific main format.
    # In order to keep the legacy API we need to enable css.
    # As consequence there is no way to make glue only generate the sprite
    # image and the html file without generating the css file too.
    if set(options.enabled_formats) in (set(['img']), set(['img', 'html'])) and options.generate_css:
        options.enabled_formats.append('css')
        setattr(options, "css_dir", True)

    if not options.generate_image:
        options.enabled_formats.remove('img')

    # Fail if any of the deprecated arguments is used
    for argument in deprecated_arguments.iterkeys():
        if getattr(options, argument, None):
            parser.error(("{0} argument is deprectated "
                          "since v0.3").format(deprecated_arguments[argument]))

    extra = 0
    # Get the source from the source option or the first positional argument
    if not options.source and args:
        options.source = args[0]
        extra += 1

    # Get the output from the output option or the second positional argument
    if not options.output and args[extra:]:
        options.output = args[extra]

    # Check if source is available
    if options.source is None:
        parser.error(("You must provide the folder containing the sprites "
                      "using the first positional argument or --source."))

    # Make absolute both source and output if present
    if not os.path.isdir(options.source):
        parser.error("Directory not found: '{0}'".format(options.source))

    options.source = os.path.abspath(options.source)
    if options.output:
        options.output = os.path.abspath(options.output)

    # Check that both the source and the output are present. Output "enough"
    # information can be tricky as you can choose different outputs for each
    # of the available formats. If it is present make it absolute.
    if not options.source:
        parser.error(("Source required. Please specify a source using "
                      "--source or the first positional argument."))

    if options.output:
        for format in options.enabled_formats:
            format_option = '{0}_dir'.format(format)
            path = getattr(options, format_option)

            if isinstance(path, bool) and path:
                setattr(options, format_option, options.output)
    else:
        if options.generate_image and not options.img_dir:
            parser.error(("Output required. Please specify an output for "
                          "the sprite image using --output, the second "
                          "positional argument or --img=<DIR>"))

        for format in options.enabled_formats:
            format_option = '{0}_dir'.format(format)
            path = getattr(options, format_option)

            if isinstance(path, bool) or not path:
                parser.error(("{0} output required. Please specify an output "
                              "for {0} using --output, the second "
                              "positional argument or --{0}=<DIR>".format(format)))
            else:
                setattr(options, format_option, os.path.abspath(path))

    # If the img format is not enabled, we still need to know where the sprites
    # were generated. As img is not an enabled format img_dir would be empty
    # if --img was not userd. If this is the case we need to use whatever is
    # the output value.
    if not options.generate_image and isinstance(options.img_dir, bool):
        options.img_dir = options.output

    # Apply formats constraints
    for format in options.enabled_formats:
        formats[format].apply_parser_contraints(parser, options)

    if options.project:
        manager_cls = managers.ProjectManager
    else:
        manager_cls = managers.SimpleManager

    # Generate manager or defer the creation to a WatchManager
    if options.watch:
        manager = managers.WatchManager(manager_cls, vars(options))
    else:
        manager = manager_cls(**vars(options))

    try:
        if options.quiet:
            with redirect_stdout():
                manager.process()
        else:
            manager.process()
    except exceptions.ValidationError, e:
        sys.stderr.write(e.args[0])
        return e.error_code
    except exceptions.SourceImagesNotFoundError, e:
        sys.stderr.write("Error: No images found in %s.\n" % e.args[0])
        return e.error_code
    except exceptions.NoSpritesFoldersFoundError, e:
        sys.stderr.write("Error: No sprites folders found in %s.\n" % e.args[0])
        return e.error_code
    except exceptions.PILUnavailableError, e:
        sys.stderr.write(("Error: PIL {0} decoder is unavailable"
                          "Please read the documentation and "
                          "install it before spriting this kind of "
                          "images.\n").format(e.args[0]))
        return e.error_code
    except Exception:
        import platform
        import traceback
        sys.stderr.write("\n")
        sys.stderr.write("=" * 80)
        sys.stderr.write("\nYou've found a bug! Please, raise an issue attaching the following traceback\n")
        sys.stderr.write("https://github.com/jorgebastida/glue/issues/new\n")
        sys.stderr.write("-" * 80)
        sys.stderr.write("\n")
        sys.stderr.write("Version: {0}\n".format(__version__))
        sys.stderr.write("Python: {0}\n".format(sys.version))
        sys.stderr.write("PIL version: {0}\n".format(PImage.VERSION))
        sys.stderr.write("Platform: {0}\n".format(platform.platform()))
        sys.stderr.write("Config: {0}\n".format(vars(options)))
        sys.stderr.write("Args: {0}\n\n".format(sys.argv))
        sys.stderr.write(traceback.format_exc())
        sys.stderr.write("=" * 80)
        sys.stderr.write("\n")
        return 1

    return 0

if __name__ == "__main__":
    sys.exit(main())

########NEW FILE########
__FILENAME__ = core
import re
import os
import sys
import copy
import hashlib
import StringIO
import ConfigParser

from PIL import Image as PILImage

from glue.algorithms import algorithms
from glue.helpers import cached_property, round_up
from glue.formats import ImageFormat
from glue.exceptions import SourceImagesNotFoundError, PILUnavailableError


class ConfigurableFromFile(object):

    def _get_config_from_file(self, filename, section):
        """Return, as a dictionary, all the available configuration inside the
        sprite configuration file on this sprite path."""

        def clean(value):
            return {'true': True, 'false': False}.get(value.lower(), value)

        config = ConfigParser.RawConfigParser()
        config.read(os.path.join(self.config_path, filename))
        try:
            keys = config.options(section)
        except ConfigParser.NoSectionError:
            return {}
        return dict([[k, clean(config.get(section, k))] for k in keys])


class Image(ConfigurableFromFile):

    def __init__(self, path, config):
        self.path = path
        self.filename = os.path.basename(path)
        self.dirname = self.config_path = os.path.dirname(path)

        self.config = copy.deepcopy(config)
        self.config.update(self._get_config_from_file('sprite.conf', self.filename))

        self.x = self.y = None
        self.original_width = self.original_height = 0

        with open(self.path, "rb") as img:
            self._image_data = img.read()

        print "\t{0} added to sprite".format(self.filename)

    @cached_property
    def image(self):
        """Return a Pil representation of this image """

        if sys.version < '3':
            imageio = StringIO.StringIO(self._image_data)
        else:
            imageio = StringIO.BytesIO(self._image_data)

        try:
            source_image = PILImage.open(imageio)
            img = PILImage.new('RGBA', source_image.size, (0, 0, 0, 0))

            if source_image.mode == 'L':
                alpha = source_image.split()[0]
                transparency = source_image.info.get('transparency')
                mask = PILImage.eval(alpha, lambda a: 0 if a == transparency else 255)
                img.paste(source_image, (0, 0), mask=mask)
            else:
                img.paste(source_image, (0, 0))
        except IOError, e:
            raise PILUnavailableError(e.args[0].split()[1])
        finally:
            imageio.close()

        self.original_width, self.original_height = img.size

        # Crop the image searching for the smallest possible bounding box
        # without losing any non-transparent pixel.
        # This crop is only used if the crop flag is set in the config.
        if self.config['crop']:
            img = img.crop(img.split()[-1].getbbox())
        return img

    @property
    def width(self):
        """Return Image width"""
        return self.image.size[0]

    @property
    def height(self):
        """Return Image height"""
        return self.image.size[1]

    @property
    def padding(self):
        """Return a 4-elements list with the desired padding."""
        return self._generate_spacing_info(self.config['padding'])

    @property
    def margin(self):
        """Return a 4-elements list with the desired marging."""
        return self._generate_spacing_info(self.config['margin'])

    def _generate_spacing_info(self, data):

        data = data.split(',' if ',' in data else ' ')

        if len(data) == 4:
            data = data
        elif len(data) == 3:
            data = data + [data[1]]
        elif len(data) == 2:
            data = data * 2
        elif len(data) == 1:
            data = data * 4
        else:
            data = [0] * 4

        return map(int, data)

    @cached_property
    def horizontal_spacing(self):
        """Return the horizontal padding and margin for this image."""
        return self.padding[1] + self.padding[3] + self.margin[1] + self.margin[3]

    @cached_property
    def vertical_spacing(self):
        """Return the vertical padding and margin for this image."""
        return self.padding[0] + self.padding[2] + self.margin[0] + self.margin[2]

    @property
    def absolute_width(self):
        """Return the total width of the image taking count of the margin,
        padding and ratio."""
        return round_up(self.width + self.horizontal_spacing * max(self.config['ratios']))

    @property
    def absolute_height(self):
        """Return the total height of the image taking count of the margin,
        padding and ratio.
        """
        return round_up(self.height + self.vertical_spacing * max(self.config['ratios']))

    def __lt__(self, img):
        """Use maxside, width, hecight or area as ordering algorithm.

        :param img: Another :class:`~Image`."""
        ordering = self.config['algorithm_ordering']
        ordering = ordering[1:] if ordering.startswith('-') else ordering

        if ordering == "filename":
            return sorted([self.filename, img.filename])[0] == img.filename
        if ordering == 'width':
            return self.absolute_width <= img.absolute_width
        elif ordering == 'height':
            return self.absolute_height <= img.absolute_height
        elif ordering == 'area':
            return self.absolute_width * self.absolute_height <= img.absolute_width * img.absolute_height
        else:
            return max(self.absolute_width, self.absolute_height) <= max(img.absolute_width, img.absolute_height)


class Sprite(ConfigurableFromFile):

    config_filename = 'sprite.conf'
    config_section = 'sprite'
    valid_extensions = ['png', 'jpg', 'jpeg', 'gif']

    def __init__(self, path, config, name=None):
        self.path = self.config_path = path
        self.config = copy.deepcopy(config)
        self.config.update(self._get_config_from_file('sprite.conf', 'sprite'))
        self.name = name or self.config.get('name', os.path.basename(path))

        # Setup ratios
        ratios = self.config['ratios'].split(',')
        ratios = set([float(r.strip()) for r in ratios if r.strip()])

        # Always add 1.0 as a required ratio
        ratios.add(1.0)

        # Create a sorted list of ratios
        self.ratios = sorted(ratios)
        self.max_ratio = max(self.ratios)
        self.config['ratios'] = self.ratios

        # Discover images inside this sprite
        self.images = self._locate_images()

        img_format = ImageFormat(sprite=self)
        for ratio in ratios:
            ratio_output_key = 'ratio_{0}_output'.format(ratio)
            if ratio_output_key not in self.config:
                self.config[ratio_output_key] = img_format.output_path(ratio)

        print "Processing '{0}':".format(self.name)

        # Generate sprite map
        self.process()

    def process(self):
        algorithm_cls = algorithms[self.config['algorithm']]
        algorithm = algorithm_cls()
        algorithm.process(self)

    def validate(self):
        pass

    @cached_property
    def hash(self):
        """ Return a hash of this sprite. In order to detect any change on
        the source images  it use the data, order and path of each image.
        In the same way it use this sprite settings as part of the hash.
        """
        hash_list = []
        for image in self.images:
            hash_list.append(os.path.relpath(image.path))
            hash_list.append(image._image_data)

        for key, value in self.config.iteritems():
            hash_list.append(key)
            hash_list.append(value)

        if sys.version < '3':
            return hashlib.sha1(''.join(map(str, hash_list))).hexdigest()[:10]
        return hashlib.sha1(''.join(map(str, hash_list)).encode('utf-8')).hexdigest()[:10]

    @cached_property
    def canvas_size(self):
        """Return the width and height for this sprite canvas"""
        width = height = 0
        for image in self.images:
            x = image.x + image.absolute_width
            y = image.y + image.absolute_height
            if width < x:
                width = x
            if height < y:
                height = y
        return round_up(width), round_up(height)

    def sprite_path(self, ratio=1.0):
        return self.config['ratio_{0}_output'.format(ratio)]

    def _locate_images(self):
        """Return all valid images within a folder.

        All files with a extension not included in
        (png, jpg, jpeg and gif) or beginning with '.' will be ignored.

        If the folder doesn't contain any valid image it will raise
        :class:`~SourceImagesNotFoundError`

        The list of images will be ordered using the desired ordering
        algorithm. The default is 'maxside'.
        """
        extensions = '|'.join(self.valid_extensions)
        extension_re = re.compile('.+\.(%s)$' % extensions, re.IGNORECASE)
        files = sorted(os.listdir(self.path))

        images = []
        for root, dirs, files in os.walk(self.path, followlinks=self.config['follow_links']):
            for filename in sorted(files):
                if not filename.startswith('.') and extension_re.match(filename):
                    images.append(Image(path=os.path.join(root, filename), config=self.config))
            if not self.config['recursive']:
                break

        if not images:
            raise SourceImagesNotFoundError(self.path)

        images = sorted(images, reverse=self.config['algorithm_ordering'][0] != '-')

        return images

########NEW FILE########
__FILENAME__ = exceptions
class GlueError(Exception):
    """Base Exception class for glue Errors."""
    error_code = 999


class PILUnavailableError(GlueError):
    """Raised if some PIL decoder isn't available."""
    error_code = 2


class ValidationError(GlueError):
    """Raised by formats or sprites while ."""
    error_code = 3


class SourceImagesNotFoundError(GlueError):
    """Raised if a folder doesn't contain any valid image."""
    error_code = 4


class NoSpritesFoldersFoundError(GlueError):
    """Raised if no sprites folders could be found."""
    error_code = 5

########NEW FILE########
__FILENAME__ = base
import os
import sys
import json
import codecs
import plistlib
import textwrap

from jinja2 import Template

from glue.helpers import round_up, nearest_fration
from glue import __version__


class BaseFormat(object):

    extension = None
    build_per_ratio = False

    def __init__(self, sprite):
        self.sprite = sprite

    def output_dir(self, *args, **kwargs):
        return self.sprite.config['{0}_dir'.format(self.format_label)]

    def output_filename(self, ratio=None, *args, **kwargs):
        if self.build_per_ratio:
            if ratio is None:
                raise AttributeError("Format {0} output_filename requires a ratio.".format(self.__class__))
            ratio_suffix = '@%.1fx' % ratio if int(ratio) != ratio else '@%ix' % ratio
            if ratio_suffix == '@1x':
                ratio_suffix = ''
            return '{0}{1}'.format(self.sprite.name, ratio_suffix)
        return self.sprite.name

    def output_path(self, *args, **kwargs):
        return os.path.join(self.output_dir(*args, **kwargs), '{0}.{1}'.format(self.output_filename(*args, **kwargs), self.extension))

    def build(self):
        if self.build_per_ratio:
            for ratio in self.sprite.config['ratios']:
                self.save(ratio=ratio)
        else:
            self.save()

    def save(self, *args, **kwargs):
        raise NotImplementedError

    def needs_rebuild(self):
        return True

    def validate(self):
        pass

    @property
    def format_label(self):
        from glue.formats import formats
        return dict((v,k) for k, v in formats.iteritems())[self.__class__]

    @classmethod
    def populate_argument_parser(cls, parser):
        pass

    @classmethod
    def apply_parser_contraints(cls, parser, options):
        pass

    def fix_windows_path(self, path):
        if os.name == 'nt':
            path = path.replace('\\', '/')
        return path


class BaseTextFormat(BaseFormat):

    def get_context(self, *args, **kwargs):
        sprite_path = os.path.relpath(self.sprite.sprite_path(), self.output_dir())
        sprite_path = self.fix_windows_path(sprite_path)
        context = {'version': __version__,
                   'hash': self.sprite.hash,
                   'name': self.sprite.name,
                   'sprite_path': sprite_path,
                   'sprite_filename': os.path.basename(sprite_path),
                   'width': round_up(self.sprite.canvas_size[0] / self.sprite.max_ratio),
                   'height': round_up(self.sprite.canvas_size[1] / self.sprite.max_ratio),
                   'images': [],
                   'ratios': {}}

        for i, img in enumerate(self.sprite.images):
            base_x = img.x * -1 - img.margin[3] * self.sprite.max_ratio
            base_y = img.y * -1 - img.margin[0] * self.sprite.max_ratio
            base_abs_x = img.x + img.margin[3] * self.sprite.max_ratio
            base_abs_y = img.y + img.margin[0] * self.sprite.max_ratio

            image = dict(filename=img.filename,
                         last=i == len(self.sprite.images) - 1,
                         x=round_up(base_x / self.sprite.max_ratio),
                         y=round_up(base_y / self.sprite.max_ratio),
                         abs_x=round_up(base_abs_x / self.sprite.max_ratio),
                         abs_y=round_up(base_abs_y / self.sprite.max_ratio),
                         height=round_up((img.height / self.sprite.max_ratio) + img.padding[0] + img.padding[2]),
                         width=round_up((img.width / self.sprite.max_ratio) + img.padding[1] + img.padding[3]),
                         original_width=img.original_width,
                         original_height=img.original_height,
                         ratios={})

            for r in self.sprite.ratios:
                image['ratios'][r] = dict(filename=img.filename,
                                          last=i == len(self.sprite.images) - 1,
                                          x=round_up(base_x / self.sprite.max_ratio * r),
                                          y=round_up(base_y / self.sprite.max_ratio * r),
                                          abs_x=round_up(base_abs_x / self.sprite.max_ratio * r),
                                          abs_y=round_up(base_abs_y / self.sprite.max_ratio * r),
                                          height=round_up((img.height + img.padding[0] + img.padding[2]) / self.sprite.max_ratio * r),
                                          width=round_up((img.width + img.padding[1] + img.padding[3]) / self.sprite.max_ratio * r))

            context['images'].append(image)

        # Ratios
        for r in self.sprite.ratios:
            ratio_sprite_path = os.path.relpath(self.sprite.sprite_path(ratio=r), self.output_dir())
            ratio_sprite_path = self.fix_windows_path(ratio_sprite_path)
            context['ratios'][r] = dict(ratio=r,
                                        fraction=nearest_fration(r),
                                        sprite_path=ratio_sprite_path,
                                        sprite_filename=os.path.basename(ratio_sprite_path),
                                        width=round_up(self.sprite.canvas_size[0] / self.sprite.max_ratio * r),
                                        height=round_up(self.sprite.canvas_size[1] / self.sprite.max_ratio * r))

        return context

    def render(self, *args, **kwargs):
        raise NotImplementedError

    def save(self, *args, **kwargs):
        # Create the destination directory if required
        if not os.path.exists(self.output_dir(*args, **kwargs)):
            os.makedirs(self.output_dir(*args, **kwargs))

        with codecs.open(self.output_path(*args, **kwargs), 'w', 'utf-8-sig') as f:
            f.write(self.render(*args, **kwargs))


class BaseJSONFormat(BaseTextFormat):

    meta_key = 'meta'

    def needs_rebuild(self):
        for ratio in self.sprite.config['ratios']:
            json_path = self.output_path(ratio)
            if os.path.exists(json_path):
                with codecs.open(json_path, 'r', 'utf-8-sig') as f:
                    try:
                        data = json.loads(f.read())
                        assert data[self.meta_key]['hash'] == self.sprite.hash
                    except Exception:
                        continue
            return True
        return False

    def render(self, *args, **kwargs):
        return json.dumps(self.get_context(*args, **kwargs))


class BasePlistFormat(BaseTextFormat):

    meta_key = 'metadata'

    def render(self, *args, **kwargs):
        context = self.get_context(*args, **kwargs)
        if sys.version < '3':
            return plistlib.writePlistToString(context)
        return plistlib.writePlistToBytes(context).decode('unicode_escape')

    def needs_rebuild(self):
        for ratio in self.sprite.config['ratios']:
            cocos2d_path = self.output_path(ratio)
            if os.path.exists(cocos2d_path):
                try:
                    data = plistlib.readPlist(cocos2d_path)
                    assert data[self.meta_key]['hash'] == self.sprite.hash
                except Exception:
                    continue
            return True
        return False


class JinjaTextFormat(BaseTextFormat):

    template = ''

    def render(self, *args, **kwargs):
        context = self.get_context(*args, **kwargs)
        template = self.template
        custom_template_config = '{0}_template'.format(self.format_label)
        if self.sprite.config.get(custom_template_config):
            with open(self.sprite.config[custom_template_config]) as f:
                template = f.read()
        return Template(textwrap.dedent(template).strip()).render(**context)

########NEW FILE########
__FILENAME__ = caat
import os

from base import BaseJSONFormat


class CAATFormat(BaseJSONFormat):

    extension = 'json'
    build_per_ratio = True

    @classmethod
    def populate_argument_parser(cls, parser):
        group = parser.add_argument_group("JSON format options")

        group.add_argument("--caat",
                           dest="caat_dir",
                           nargs='?',
                           const=True,
                           default=os.environ.get('GLUE_CAAT', False),
                           metavar='DIR',
                           help="Generate CAAT files and optionally where")

    def get_context(self, *args, **kwargs):
        context = super(CAATFormat, self).get_context(*args, **kwargs)

        data = dict(sprites={}, meta={'version': context['version'],
                                      'hash': context['hash'],
                                      'sprite_filename': context['sprite_filename'],
                                      'width': context['width'],
                                      'height': context['height']})
        for i in context['images']:
            data['sprites'][i['filename']] = {"x" : i['abs_x'],
                                              "y" : i['abs_y'],
                                              "width" : i['width'],
                                              "height" : i['height']}
        return data

########NEW FILE########
__FILENAME__ = cocos2d
import os

from base import BasePlistFormat


class Cocos2dFormat(BasePlistFormat):

    extension = 'plist'
    build_per_ratio = True

    @classmethod
    def populate_argument_parser(cls, parser):
        group = parser.add_argument_group("Cocos2d format options")

        group.add_argument("--cocos2d",
                           dest="cocos2d_dir",
                           nargs='?',
                           const=True,
                           default=os.environ.get('GLUE_COCOS2D', False),
                           metavar='DIR',
                           help="Generate Cocos2d files and optionally where")

    def get_context(self, ratio, *args, **kwargs):
        context = super(Cocos2dFormat, self).get_context(ratio, *args, **kwargs)
        ratio_context = context['ratios'][ratio]

        data = {'frames': {},
                'metadata': {'version': context['version'],
                             'hash': context['hash'],
                             'size':'{{{width}, {height}}}'.format(**context['ratios'][ratio]),
                             'name': context['name'],
                             'format': 2,
                             'realTextureFileName': ratio_context['sprite_filename'],
                             'textureFileName': ratio_context['sprite_filename']
                }
        }
        for i in context['images']:
            image_context = i['ratios'][ratio]
            rect = '{{{{{abs_x}, {abs_y}}}, {{{width}, {height}}}}}'.format(**image_context)
            data['frames'][i['filename']] = {'frame': rect,
                                             'offset': '{0,0}',
                                             'rotated': False,
                                             'sourceColorRect': rect,
                                             'sourceSize': '{{{width}, {height}}}'.format(**image_context)}
        return data

########NEW FILE########
__FILENAME__ = css
import re
import os
import codecs

from glue import __version__
from base import JinjaTextFormat

from ..exceptions import ValidationError


class CssFormat(JinjaTextFormat):

    extension = 'css'
    camelcase_separator = 'camelcase'
    css_pseudo_classes = set(['link', 'visited', 'active', 'hover', 'focus',
                              'first-letter', 'first-line', 'first-child',
                              'before', 'after'])

    template = u"""
        /* glue: {{ version }} hash: {{ hash }} */
        {% for image in images %}.{{ image.label }}{{ image.pseudo }}{%- if not image.last %},{{"\n"}}{%- endif %}{%- endfor %} {
            background-image: url('{{ sprite_path }}');
            background-repeat: no-repeat;
        }
        {% for image in images %}
        .{{ image.label }}{{ image.pseudo }} {
            background-position: {{ image.x ~ ('px' if image.x) }} {{ image.y ~ ('px' if image.y) }};
            width: {{ image.width }}px;
            height: {{ image.height }}px;
        }
        {% endfor %}{% for r, ratio in ratios.items() %}
        @media screen and (-webkit-min-device-pixel-ratio: {{ ratio.ratio }}), screen and (min--moz-device-pixel-ratio: {{ ratio.ratio }}), screen and (-o-min-device-pixel-ratio: {{ ratio.fraction }}), screen and (min-device-pixel-ratio: {{ ratio.ratio }}), screen and (min-resolution: {{ ratio.ratio }}dppx) {
            {% for image in images %}.{{ image.label }}{{ image.pseudo }}{% if not image.last %},{{"\n"}}    {% endif %}{% endfor %} {
                background-image: url('{{ ratio.sprite_path }}');
                -webkit-background-size: {{ width }}px {{ height }}px;
                -moz-background-size: {{ width }}px {{ height }}px;
                background-size: {{ width }}px {{ height }}px;
            }
        }
        {% endfor %}
        """

    @classmethod
    def populate_argument_parser(cls, parser):
        group = parser.add_argument_group("CSS format options")

        group.add_argument("--css",
                           dest="css_dir",
                           nargs='?',
                           const=True,
                           default=os.environ.get('GLUE_CSS', False),
                           metavar='DIR',
                           help="Generate CSS files and optionally where")

        group.add_argument("--namespace",
                           dest="css_namespace",
                           type=unicode,
                           default=os.environ.get('GLUE_CSS_NAMESPACE', 'sprite'),
                           help="Namespace for all css classes (default: sprite)")

        group.add_argument("--sprite-namespace",
                           dest="css_sprite_namespace",
                           type=unicode,
                           default=os.environ.get('GLUE_CSS_SPRITE_NAMESPACE',
                                                  '{sprite_name}'),
                           help="Namespace for all sprites (default: {sprite_name})")

        group.add_argument("-u", "--url",
                           dest="css_url",
                           type=unicode,
                           default=os.environ.get('GLUE_CSS_URL', ''),
                           help="Prepend this string to the sprites path")

        group.add_argument("--cachebuster",
                           dest="css_cachebuster",
                           default=os.environ.get('GLUE_CSS_CACHEBUSTER', False),
                           action='store_true',
                           help=("Use the sprite's sha1 first 6 characters as a "
                                 "queryarg everytime that file is referred "
                                 "from the css"))

        group.add_argument("--cachebuster-filename",
                           dest="css_cachebuster_filename",
                           default=os.environ.get('GLUE_CSS_CACHEBUSTER', False),
                           action='store_true',
                           help=("Append the sprite's sha first 6 characters "
                                 "to the output filename"))

        group.add_argument("--cachebuster-filename-only-sprites",
                           dest="css_cachebuster_only_sprites",
                           default=os.environ.get('GLUE_CSS_CACHEBUSTER_ONLY_SPRITES', False),
                           action='store_true',
                           help=("Only apply cachebuster to sprite images."))

        group.add_argument("--separator",
                           dest="css_separator",
                           type=unicode,
                           default=os.environ.get('GLUE_CSS_SEPARATOR', '-'),
                           metavar='SEPARATOR',
                           help=("Customize the separator used to join CSS class "
                                 "names. If you want to use camelCase use "
                                 "'camelcase' as separator."))

        group.add_argument("--pseudo-class-separator",
                           dest="css_pseudo_class_separator",
                           type=unicode,
                           default=os.environ.get('GLUE_CSS_PSEUDO_CLASS_SEPARATOR', '__'),
                           metavar='SEPARATOR',
                           help=("Customize the separator glue will use in order "
                                 "to determine the pseudo classes included into "
                                 "filenames."))

        group.add_argument("--css-template",
                           dest="css_template",
                           default=os.environ.get('GLUE_CSS_TEMPLATE', None),
                           metavar='DIR',
                           help="Template to use to generate the CSS output.")

        group.add_argument("--no-css",
                           dest="generate_css",
                           action="store_false",
                           default=os.environ.get('GLUE_GENERATE_CSS', True),
                           help="Don't genereate CSS files.")

    @classmethod
    def apply_parser_contraints(cls, parser, options):
        cachebusters = (options.css_cachebuster, options.css_cachebuster_filename, options.css_cachebuster_only_sprites)
        if sum(cachebusters) > 1:
            parser.error("You can't use --cachebuster, --cachebuster-filename or --cachebuster-filename-only-sprites at the same time.")

    def needs_rebuild(self):
        hash_line = '/* glue: %s hash: %s */\n' % (__version__, self.sprite.hash)
        try:
            with codecs.open(self.output_path(), 'r', 'utf-8-sig') as existing_css:
                first_line = existing_css.readline()
                assert first_line == hash_line
        except Exception:
            return True
        return False

    def validate(self):
        class_names = [':'.join(self.generate_css_name(i.filename)) for i in self.sprite.images]
        if len(set(class_names)) != len(self.sprite.images):
            dup = [i for i in self.sprite.images if class_names.count(':'.join(self.generate_css_name(i.filename))) > 1]
            duptext = '\n'.join(['\t{0} => .{1}'.format(os.path.relpath(d.path), ':'.join(self.generate_css_name(d.filename))) for d in dup])
            raise ValidationError("Error: Some images will have the same class name:\n{0}".format(duptext))
        return True

    def output_filename(self, *args, **kwargs):
        filename = super(CssFormat, self).output_filename(*args, **kwargs)
        if self.sprite.config['css_cachebuster_filename']:
            return '{0}_{1}'.format(filename, self.sprite.hash)
        return filename

    def get_context(self, *args, **kwargs):

        context = super(CssFormat, self).get_context(*args, **kwargs)

        # Generate css labels
        for image in context['images']:
            image['label'], image['pseudo'] = self.generate_css_name(image['filename'])

        if self.sprite.config['css_url']:
            context['sprite_path'] = '{0}{1}'.format(self.sprite.config['css_url'], context['sprite_filename'])

            for r, ratio in context['ratios'].iteritems():
                ratio['sprite_path'] = '{0}{1}'.format(self.sprite.config['css_url'], ratio['sprite_filename'])

        # Add cachebuster if required
        if self.sprite.config['css_cachebuster']:

            def apply_cachebuster(path):
                return "%s?%s" % (path, self.sprite.hash)

            context['sprite_path'] = apply_cachebuster(context['sprite_path'])

            for r, ratio in context['ratios'].iteritems():
                ratio['sprite_path'] = apply_cachebuster(ratio['sprite_path'])

        return context

    def generate_css_name(self, filename):
        filename = filename.rsplit('.', 1)[0]
        separator = self.sprite.config['css_separator']
        namespace = [re.sub(r'[^\w\-_]', '', filename)]

        # Add sprite namespace if required
        if self.sprite.config['css_sprite_namespace']:
            sprite_name = re.sub(r'[^\w\-_]', '', self.sprite.name)
            sprite_namespace = self.sprite.config['css_sprite_namespace']

            # Support legacy 0.4 format
            sprite_namespace = sprite_namespace.replace("%(sprite)s", "{sprite_name}")
            namespace.insert(0, sprite_namespace.format(sprite_name=sprite_name))

        # Add global namespace if required
        if self.sprite.config['css_namespace']:
            namespace.insert(0, self.sprite.config['css_namespace'])

        # Handle CamelCase separator
        if self.sprite.config['css_separator'] == self.camelcase_separator:
            namespace = [n[:1].title() + n[1:] if i > 0 else n for i, n in enumerate(namespace)]
            separator = ''

        label = separator.join(namespace)
        pseudo = ''

        css_pseudo_class_separator = self.sprite.config['css_pseudo_class_separator']
        if css_pseudo_class_separator in filename:
            pseudo_classes = [p for p in filename.split(css_pseudo_class_separator) if p in self.css_pseudo_classes]

            # If present add this pseudo class as pseudo an remove it from the label
            if pseudo_classes:
                for p in pseudo_classes:
                    label = label.replace('{0}{1}'.format(css_pseudo_class_separator, p), "")
                pseudo = ''.join(map(lambda x: ':{0}'.format(x), pseudo_classes))

        return label, pseudo

########NEW FILE########
__FILENAME__ = html
import os

from .css import CssFormat

class HtmlFormat(CssFormat):

    extension = 'html'
    template = u"""
        <html>
            <head><title>Glue Sprite Test Html</title>
            <link rel="stylesheet" type="text/css" href="{{ css_path }}"></head>
            <body>
            <style type="text/css">
                tr div:hover{ border:1px solid #ccc;}
                tr div{ border:1px solid white;}
            </style>

            <h1>CSS Classes</h1>
            <table>
            <tr>
                <th>CSS Class</th>
                <th>Result</th>
            </tr>

            {% for image in images %}
            <tr><td>.{{ image.label }}</td><td><div class="{{ image.label }}"></div></td></tr>
            {% endfor %}

            </table>
            <p><em>Generated using <a href="http://gluecss.com"/>Glue v{{ version }}</a></em></p>
            </body>
        </html>"""

    @classmethod
    def populate_argument_parser(cls, parser):
        group = parser.add_argument_group("Html format options")

        group.add_argument("--html",
                           dest="html_dir",
                           nargs='?',
                           const=True,
                           default=os.environ.get('GLUE_HTML', False),
                           metavar='DIR',
                           help="Generate html files and optionally where")

    @classmethod
    def apply_parser_contraints(cls, parser, options):
        if 'html' in options.enabled_formats and 'css' not in options.enabled_formats:
            parser.error("You can't use --html without --css.")

    def get_context(self, *args, **kwargs):
        context = super(HtmlFormat, self).get_context(*args, **kwargs)
        context['css_path'] = os.path.relpath(os.path.join(self.sprite.config['css_dir'], '{0}.css'.format(self.sprite.name)), self.output_dir())
        return context

    def needs_rebuild(self):
        return True

    def validate(self):
        return True

########NEW FILE########
__FILENAME__ = img
import os

from PIL import Image as PILImage
from PIL import PngImagePlugin

from glue import __version__
from glue.helpers import round_up, cached_property
from .base import BaseFormat


class ImageFormat(BaseFormat):

    build_per_ratio = True
    extension = 'png'

    @classmethod
    def populate_argument_parser(cls, parser):
        group = parser.add_argument_group("Sprite image options")

        group.add_argument("--img",
                           dest="img_dir",
                           type=unicode,
                           default=os.environ.get('GLUE_IMG', True),
                           metavar='DIR',
                           help="Output directory for img files")

        group.add_argument("--no-img",
                           dest="generate_image",
                           action="store_false",
                           default=os.environ.get('GLUE_GENERATE_IMG', True),
                           help="Don't genereate IMG files.")

        group.add_argument("-c", "--crop",
                           dest="crop",
                           action='store_true',
                           default=os.environ.get('GLUE_CROP', False),
                           help="Crop images removing unnecessary transparent margins")

        group.add_argument("-p", "--padding",
                           dest="padding",
                           type=unicode,
                           default=os.environ.get('GLUE_PADDING', '0'),
                           help="Force this padding in all images")

        group.add_argument("--margin",
                           dest="margin",
                           type=unicode,
                           default=os.environ.get('GLUE_MARGIN', '0'),
                           help="Force this margin in all images")

        group.add_argument("--png8",
                           action="store_true",
                           dest="png8",
                           default=os.environ.get('GLUE_PNG8', False),
                           help=("The output image format will be png8 "
                                 "instead of png32"))

        group.add_argument("--ratios",
                           dest="ratios",
                           type=unicode,
                           default=os.environ.get('GLUE_RATIOS', '1'),
                           help="Create sprites based on these ratios")

        group.add_argument("--retina",
                           dest="ratios",
                           default=os.environ.get('GLUE_RETINA', False),
                           action='store_const',
                           const='2,1',
                           help="Shortcut for --ratios=2,1")

    def output_filename(self, *args, **kwargs):
        filename = super(ImageFormat, self).output_filename(*args, **kwargs)
        if self.sprite.config['css_cachebuster_filename'] or self.sprite.config['css_cachebuster_only_sprites']:
            return '{0}_{1}'.format(filename, self.sprite.hash)
        return filename

    def needs_rebuild(self):
        for ratio in self.sprite.config['ratios']:
            image_path = self.output_path(ratio)
            try:
                existing = PILImage.open(image_path)
                assert existing.info['Software'] == 'glue-%s' % __version__
                assert existing.info['Comment'] == self.sprite.hash
                continue
            except Exception:
                return True
        return False

    @cached_property
    def _raw_canvas(self):
        # Create the sprite canvas
        width, height = self.sprite.canvas_size
        canvas = PILImage.new('RGBA', (width, height), (0, 0, 0, 0))

        # Paste the images inside the canvas
        for image in self.sprite.images:
            canvas.paste(image.image,
                (round_up(image.x + (image.padding[3] + image.margin[3]) * self.sprite.max_ratio),
                 round_up(image.y + (image.padding[0] + image.margin[0]) * self.sprite.max_ratio)))

        meta = PngImagePlugin.PngInfo()
        meta.add_text('Software', 'glue-%s' % __version__)
        meta.add_text('Comment', self.sprite.hash)

        # Customize how the png is going to be saved
        kwargs = dict(optimize=False, pnginfo=meta)

        if self.sprite.config['png8']:
            # Get the alpha band
            alpha = canvas.split()[-1]
            canvas = canvas.convert('RGB'
                        ).convert('P',
                                  palette=PILImage.ADAPTIVE,
                                  colors=255)

            # Set all pixel values below 128 to 255, and the rest to 0
            mask = PILImage.eval(alpha, lambda a: 255 if a <= 128 else 0)

            # Paste the color of index 255 and use alpha as a mask
            canvas.paste(255, mask)
            kwargs.update({'transparency': 255})
        return canvas, kwargs

    def save(self, ratio):
        width, height = self.sprite.canvas_size
        canvas, kwargs = self._raw_canvas

        # Loop all over the ratios and save one image for each one
        for ratio in self.sprite.config['ratios']:

            # Create the destination directory if required
            if not os.path.exists(self.output_dir(ratio=ratio)):
                os.makedirs(self.output_dir(ratio=ratio))

            image_path = self.output_path(ratio=ratio)

            # If this canvas isn't the biggest one scale it using the ratio
            if self.sprite.max_ratio != ratio:

                reduced_canvas = canvas.resize(
                                    (round_up((width / self.sprite.max_ratio) * ratio),
                                     round_up((height / self.sprite.max_ratio) * ratio)),
                                     PILImage.ANTIALIAS)
                reduced_canvas.save(image_path, **kwargs)
                # TODO: Use Imagemagick if it's available
            else:
                canvas.save(image_path, **kwargs)

########NEW FILE########
__FILENAME__ = jsonformat
import os
import json
import codecs

from base import BaseJSONFormat


class JSONFormat(BaseJSONFormat):

    extension = 'json'
    build_per_ratio = True

    @classmethod
    def populate_argument_parser(cls, parser):
        group = parser.add_argument_group("JSON format options")

        group.add_argument("--json",
                           dest="json_dir",
                           nargs='?',
                           const=True,
                           default=os.environ.get('GLUE_JSON', False),
                           metavar='DIR',
                           help="Generate JSON files and optionally where")

        group.add_argument("--json-format",
                           dest="json_format",
                           metavar='NAME',
                           type=unicode,
                           default=os.environ.get('GLUE_JSON_FORMAT', 'array'),
                           choices=['array', 'hash'],
                           help=("JSON structure format (array, hash)"))

    def get_context(self, *args, **kwargs):
        context = super(JSONFormat, self).get_context(*args, **kwargs)

        frames = dict([[i['filename'], {'filename': i['filename'],
                                        'frame': {'x': i['x'],
                                                  'y': i['y'],
                                                  'w': i['width'],
                                                  'h': i['height']},
                                        'rotated': False,
                                        'trimmed': False,
                                        'spriteSourceSize': {'x': i['x'],
                                                             'y': i['y'],
                                                             'w': i['width'],
                                                             'h': i['height']},
                                        'sourceSize': {'w': i['original_width'],
                                                       'h': i['original_height']}}] for i in context['images']])

        data = dict(frames=None, meta={'version': context['version'],
                                       'hash': context['hash'],
                                       'name': context['name'],
                                       'sprite_path': context['sprite_path'],
                                       'sprite_filename': context['sprite_filename'],
                                       'width': context['width'],
                                       'height': context['height']})

        if self.sprite.config['json_format'] == 'array':
            data['frames'] = frames.values()
        else:
            data['frames'] = frames

        return data

########NEW FILE########
__FILENAME__ = less
import os

from css import CssFormat


class LessFormat(CssFormat):

    extension = 'less'
    template = u"""
        /* glue: {{ version }} hash: {{ hash }} */
        {% for image in images %}.{{ image.label }}{{ image.pseudo }}{%- if not image.last %}, {%- endif %}{%- endfor %}{
            background-image:url('{{ sprite_path }}');
            background-repeat:no-repeat;
            -webkit-background-size: {{ width }}px {{ height }}px;
            -moz-background-size: {{ width }}px {{ height }}px;
            background-size: {{ width }}px {{ height }}px;
            {% for r, ratio in ratios.items() %}
            @media screen and (-webkit-min-device-pixel-ratio: {{ ratio.ratio }}), screen and (min--moz-device-pixel-ratio: {{ ratio.ratio }}),screen and (-o-min-device-pixel-ratio: {{ ratio.fraction }}),screen and (min-device-pixel-ratio: {{ ratio.ratio }}),screen and (min-resolution: {{ ratio.ratio }}dppx){
                background-image:url('{{ ratio.sprite_path }}');
            }
            {% endfor %}
        }
        {% for image in images %}
        .{{ image.label }}{{ image.pseudo }}{
            background-position:{{ image.x ~ ('px' if image.x) }} {{ image.y ~ ('px' if image.y) }};
            width:{{ image.width }}px;
            height:{{ image.height }}px;
        }
        {% endfor %}
        """

    @classmethod
    def populate_argument_parser(cls, parser):
        group = parser.add_argument_group("CSS format options")

        group.add_argument("--less",
                           dest="less_dir",
                           nargs='?',
                           const=True,
                           default=os.environ.get('GLUE_LESS', False),
                           metavar='DIR',
                           help="Generate LESS files and optionally where")

        group.add_argument("--less-template",
                           dest="less_template",
                           default=os.environ.get('GLUE_LESS_TEMPLATE', None),
                           metavar='DIR',
                           help="Template to use to generate the LESS output.")

########NEW FILE########
__FILENAME__ = scss
import os

from css import CssFormat


class ScssFormat(CssFormat):

    extension = 'scss'

    @classmethod
    def populate_argument_parser(cls, parser):
        group = parser.add_argument_group("SCSS format options")

        group.add_argument("--scss",
                           dest="scss_dir",
                           nargs='?',
                           const=True,
                           default=os.environ.get('GLUE_SCSS', False),
                           metavar='DIR',
                           help="Generate SCSS files and optionally where")

        group.add_argument("--scss-template",
                           dest="scss_template",
                           default=os.environ.get('GLUE_SCSS_TEMPLATE', None),
                           metavar='DIR',
                           help="Template to use to generate the SCSS output.")

########NEW FILE########
__FILENAME__ = helpers
import os
import sys
import contextlib
from StringIO import StringIO


def round_up(value):
    int_value = int(value)
    diff = 1 if value > 0 else -1
    return int_value + diff if value != int_value else int_value


def nearest_fration(value):
    """
    Return the nearest fraction.
    If fraction.Fraction is not available, return a fraction.

    Note: used for Opera CSS pixel-ratio media queries.
    """
    try:
        from fraction import Fraction
        return str(Fraction(value))
    except ImportError:
        return '%i/100' % int(float(value) * 100)


class _Missing(object):
    """ Missing object necessary for cached_property"""
    def __repr__(self):
        return 'no value'

    def __reduce__(self):
        return '_missing'

_missing = _Missing()


class cached_property(object):
    """
    Decorator inspired/copied from mitsuhiko/werkzeug.

    A decorator that converts a function into a lazy property.  The
    function wrapped is called the first time to retrieve the result
    and then that calculated result is used the next time you access
    the value"""

    def __init__(self, func, name=None, doc=None):
        self.__name__ = name or func.__name__
        self.__module__ = func.__module__
        self.__doc__ = doc or func.__doc__
        self.func = func

    def __get__(self, obj, type=None):
        if obj is None:
            return self
        value = obj.__dict__.get(self.__name__, _missing)
        if value is _missing:
            value = self.func(obj)
            obj.__dict__[self.__name__] = value
        return value


@contextlib.contextmanager
def redirect_stdout(stream=None):
    stream = stream or StringIO()
    sys.stdout = stream
    yield
    sys.stdout = sys.__stdout__

########NEW FILE########
__FILENAME__ = base
from glue.core import Sprite
from glue.formats import formats


class BaseManager(object):

    def __init__(self, *args, **kwargs):
        self.config = kwargs
        self.sprites = []

    def process(self):
        self.find_sprites()
        self.validate()
        self.save()

    def add_sprite(self, path):
        """Create a new Sprite using this path and name and append it to the
        sprites list.

        :param path: Sprite path.
        :param name: Sprite name.
        """
        sprite = Sprite(path=path, config=self.config)
        self.sprites.append(sprite)

    def find_sprites(self):
        raise NotImplementedError

    def validate(self):
        """Validate all sprites inside this manager."""

        for sprite in self.sprites:
            sprite.validate()

    def save(self):
        """Save all sprites inside this manager."""

        for format_name in self.config['enabled_formats']:
            format_cls = formats[format_name]
            for sprite in self.sprites:
                format = format_cls(sprite=sprite)
                format.validate()
                if format.needs_rebuild() or sprite.config['force']:
                    print "Format '{0}' for sprite '{1}' needs rebuild...".format(format_name, sprite.name)
                    format.build()
                else:
                    print "Format '{0}'' for sprite '{1}' already exists...".format(format_name, sprite.name)

########NEW FILE########
__FILENAME__ = project
import os

from glue.exceptions import NoSpritesFoldersFoundError
from .base import BaseManager
from glue.core import ConfigurableFromFile


class ProjectManager(BaseManager, ConfigurableFromFile):
    """Process a path searching for folders that contain images.
       Every folder will be a new sprite with all the images inside.
       This is not the default manager. It is only used if you use
       the ``--project`` argument."""

    def __init__(self, *args, **kwargs):
        super(ProjectManager, self).__init__(*args, **kwargs)
        self.config_path = self.config['source']
        self.config.update(self._get_config_from_file('sprite.conf', 'sprite'))

    def find_sprites(self):

        for filename in sorted(os.listdir(self.config['source'])):

            # Only process folders
            path = os.path.join(self.config['source'], filename)

            # Ignore filenames starting with '.'
            if filename.startswith('.'):
                continue

            # Ignore symlinks if necessary.
            if not os.path.isdir(path) and not (os.path.islink(path) and self.config['follow_links']):
                continue

            self.add_sprite(path=path)

        if not self.sprites:
            raise NoSpritesFoldersFoundError(self.config['source'])

########NEW FILE########
__FILENAME__ = simple
from .base import BaseManager


class SimpleManager(BaseManager):
    """Process a single folder and create one sprite. It works the
    same way as :class:`~ProjectSpriteManager`, but only for one folder.

    This is the default manager.
    """

    def find_sprites(self):
        self.add_sprite(path=self.config['source'])


########NEW FILE########
__FILENAME__ = watch
import os
import sys
import time
import signal
import hashlib


class WatchManager(object):

    def __init__(self, manager_cls, options):
        self.manager_cls = manager_cls
        self.options = options
        self.last_hash = self.manager = None
        signal.signal(signal.SIGINT, self.signal_handler)

    def process(self):
        while True:
            current_hash = self.generate_hash()
            if self.last_hash != current_hash:
                self.manager = self.manager_cls(**self.options)
                self.manager.process()
            self.last_hash = current_hash
            time.sleep(0.2)

    def generate_hash(self):
        """ Return a hash of files and modification times to determine if a
        change has occourred."""

        hash_list = []
        for root, dirs, files in os.walk(self.options['source']):
            for f in sorted([f for f in files if not f.startswith('.')]):
                hash_list.append(os.path.join(root, f))
                hash_list.append(str(os.path.getmtime(os.path.join(root, f))))
        hash_list = ''.join(hash_list)

        if sys.version < '3':
            return hashlib.sha1(hash_list).hexdigest()
        return hashlib.sha1(hash_list.encode('utf-8')).hexdigest()

    def signal_handler(self, signal, frame):
        """ Gracefully close the app if Ctrl+C is pressed."""
        print 'You pressed Ctrl+C!'
        sys.exit(0)

########NEW FILE########
__FILENAME__ = tests
import os
import sys
import json
import codecs
import shutil
import unittest
import logging

try:
    from StringIO import StringIO
except ImportError:
    from io import StringIO

from plistlib import readPlist

from PIL import Image as PILImage
import cssutils

try:
    from mock import patch, Mock
except ImportError:
    from unittest.mock import patch, Mock

from glue.bin import main
from glue.core import Image
from glue.helpers import redirect_stdout


RED = (255, 0, 0, 255)
CYAN = (0, 255, 255, 255)
PINK = (255, 0, 255, 255)
BLUE = (0, 0, 255, 255)
GREEN = (0, 255, 0, 255)
YELLOW = (255, 255, 0, 255)
TRANSPARENT = (0, 0, 0, 0)

COLORS = {RED: 'RED',
          CYAN: 'CYAN',
          PINK: 'PINK',
          BLUE: 'BLUE',
          GREEN: 'GREEN',
          YELLOW: 'YELLOW',
          TRANSPARENT: 'TRANSPARENT'}


class TestGlue(unittest.TestCase):

    TEST_PATH = 'tests_tmp/'

    def setUp(self):
        cssutils.log.setLevel(logging.ERROR)
        self.base_path = os.path.dirname(os.path.abspath(__file__))
        self.output_path = os.path.join(self.base_path, self.TEST_PATH)
        shutil.rmtree(self.output_path, True)
        os.makedirs(self.output_path)
        self.pwd = os.getcwd()
        os.chdir(self.output_path)
        sys.stdout = StringIO()
        sys.stderr = StringIO()

    def tearDown(self):
        os.chdir(self.pwd)
        shutil.rmtree(self.output_path, True)
        sys.stdout = sys.__stdout__
        sys.stderr = sys.__stderr__

    def _exists(self, path):
        return os.path.exists(path)

    def assertExists(self, path):
        assert self._exists(path), "{0} doesn't exists".format(path)

    def assertDoesNotExists(self, path):
        assert not self._exists(path), "{0} exists".format(path)

    def assertColor(self, path, color, points, tolerance=0):
        image = PILImage.open(path)
        for point in points:
            image_color = image.getpixel(point)
            if tolerance:
                diffs = [abs(x - y) for x, y in zip(color, image_color)]
                match = max(diffs) < 255 / tolerance
            else:
                match = image_color == color

            if not match:
                assert False, "{0} {1} should be {2} but is {3}".format(path, point, COLORS.get(color, color), COLORS.get(image_color, image_color))

    def assertCSS(self, path, class_name, properties, ratio=None):
        stylesheet = cssutils.parseFile(path, validate=False)

        file_properties = {}
        for rule in stylesheet.cssRules:
            if isinstance(rule, cssutils.css.CSSStyleRule):
                if class_name in [c.selectorText for c in rule.selectorList]:
                    for declaration in rule.style.getProperties():
                        file_properties[declaration.name] = declaration.value
            elif isinstance(rule, cssutils.css.CSSMediaRule) and ratio:
                if 'min-resolution: {0}'.format(ratio) in rule.media.mediaText:
                    for media_rule in rule.cssRules:
                        if class_name in [c.selectorText for c in media_rule.selectorList]:
                            for declaration in media_rule.style.getProperties():
                                file_properties[declaration.name] = declaration.value
        self.assertEqual(file_properties, properties)

    def create_image(self, path, color=RED, size=(64, 64), margin=0, margin_color=TRANSPARENT):
        dirname = os.path.dirname(path)
        if not os.path.isdir(dirname):
            os.makedirs(dirname)
        image = PILImage.new('RGB', size, color)
        if margin:
            background = PILImage.new('RGBA', list(map(lambda x: x + margin, size)), margin_color)
            background.paste(image, tuple(map(int, (margin / 2, margin / 2))))
            background.save(path)
        else:
            image.save(path)
        return os.path.abspath(path)

    def call(self, options, capture=False):
        out = StringIO()
        with redirect_stdout(out):
            code = main(options.split())
        output = out.getvalue()
        out.close()
        if capture:
            return code, output
        return code

    def test_simple(self):
        os.mkdir('simple')
        code = self.call("glue simple output")
        self.assertEqual(code, 4)

        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", BLUE, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_source(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue --source=simple output")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", BLUE, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_output(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple --output=output")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", BLUE, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_quiet(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code, out = self.call("glue simple output --quiet", capture=True)
        self.assertEqual(code, 0)
        self.assertEqual(out, "")

    def test_recursive(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        self.create_image("simple/sub/green.png", GREEN)
        code = self.call("glue simple output --recursive")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", GREEN, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", RED, ((64, 0), (127, 63)))
        self.assertColor("output/simple.png", BLUE, ((0, 64), (63, 127)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 -64px',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-green',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_project(self):
        # Empty project
        os.mkdir("sprites")
        code = self.call("glue sprites output --project")
        self.assertEqual(code, 5)

        self.create_image("sprites/icons/red.png", RED)
        self.create_image("sprites/icons/blue.png", BLUE)
        self.create_image("sprites/menu/green.png", GREEN)
        self.create_image("sprites/menu/yellow.png", YELLOW)
        self.create_image("sprites/.ignore/pink.png", PINK)
        code = self.call("glue sprites output --project")
        self.assertEqual(code, 0)

        self.assertExists("output/icons.png")
        self.assertExists("output/icons.css")
        self.assertExists("output/menu.png")
        self.assertExists("output/menu.css")
        self.assertDoesNotExists("output/ignore.png")
        self.assertDoesNotExists("output/ignore.css")

        self.assertColor("output/icons.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/icons.png", BLUE, ((64, 0), (127, 63)))
        self.assertColor("output/menu.png", YELLOW, ((0, 0), (63, 63)))
        self.assertColor("output/menu.png", GREEN, ((64, 0), (127, 63)))

        self.assertCSS(u"output/icons.css", u'.sprite-icons-red',
                       {u'background-image': u"url(icons.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/icons.css", u'.sprite-icons-blue',
                       {u'background-image': u"url(icons.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/menu.css", u'.sprite-menu-yellow',
                       {u'background-image': u"url(menu.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/menu.css", u'.sprite-menu-green',
                       {u'background-image': u"url(menu.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_project_config_file(self):

        os.mkdir("sprites")

        with open('sprites/sprite.conf', 'w') as f:
            f.write("[sprite]\ncss_dir=css\n")

        self.create_image("sprites/icons/red.png", RED)
        self.create_image("sprites/icons/blue.png", BLUE)
        self.create_image("sprites/menu/green.png", GREEN)
        self.create_image("sprites/menu/yellow.png", YELLOW)
        self.create_image("sprites/.ignore/pink.png", PINK)
        code = self.call("glue sprites output --project")
        self.assertEqual(code, 0)

        self.assertExists("output/icons.png")
        self.assertExists("css/icons.css")
        self.assertExists("output/menu.png")
        self.assertExists("css/menu.css")
        self.assertDoesNotExists("output/ignore.png")
        self.assertDoesNotExists("output/ignore.css")
        self.assertDoesNotExists("css/ignore.css")

    def test_algorithm_diagonal(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        self.create_image("simple/yellow.png", YELLOW)
        code = self.call("glue simple output --algorithm=diagonal")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", YELLOW, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", RED, ((64, 64), (127, 127)))
        self.assertColor("output/simple.png", BLUE, ((128, 128), (191, 191)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-yellow',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px -64px',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-128px -128px',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_algorithm_horizontal(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        self.create_image("simple/yellow.png", YELLOW)
        code = self.call("glue simple output --algorithm=horizontal")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", YELLOW, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", RED, ((64, 0), (127, 63)))
        self.assertColor("output/simple.png", BLUE, ((128, 0), (129, 63)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-yellow',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-128px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_algorithm_horizontal_bottom(self):
        self.create_image("simple/red.png", RED, (64, 64))
        self.create_image("simple/blue.png", BLUE, (32, 32))
        self.create_image("simple/yellow.png", YELLOW, (16, 16))
        code = self.call("glue simple output --algorithm=horizontal-bottom")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", BLUE, ((64, 32), (95, 63)))
        self.assertColor("output/simple.png", YELLOW, ((96, 48), (111, 63)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px -32px',
                        u'width': u'32px',
                        u'height': u'32px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-yellow',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-96px -48px',
                        u'width': u'16px',
                        u'height': u'16px'})

    def test_algorithm_vertical(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        self.create_image("simple/yellow.png", YELLOW)
        code = self.call("glue simple output --algorithm=vertical")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", YELLOW, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", RED, ((0, 64), (63, 127)))
        self.assertColor("output/simple.png", BLUE, ((0, 128), (63, 188)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-yellow',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 -64px',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 -128px',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_algorithm_vertical_right(self):
        self.create_image("simple/red.png", RED, (64, 64))
        self.create_image("simple/blue.png", BLUE, (32, 32))
        self.create_image("simple/yellow.png", YELLOW, (16, 16))
        code = self.call("glue simple output --algorithm=vertical-right")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", BLUE, ((32, 64), (63, 95)))
        self.assertColor("output/simple.png", YELLOW, ((48, 96), (63, 111)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-32px -64px',
                        u'width': u'32px',
                        u'height': u'32px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-yellow',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-48px -96px',
                        u'width': u'16px',
                        u'height': u'16px'})

    def test_no_img_with_img(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --no-img --img=folder")
        self.assertEqual(code, 0)

        self.assertDoesNotExists("output/simple.png")
        self.assertExists("output/simple.css")

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(../folder/simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(../folder/simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_ordering(self):
        settings = {'crop': False, 'padding': '0', 'margin': '0', 'ratios': [1]}
        red_path = self.create_image("simple/red.png", RED, (64, 64))
        blue_path = self.create_image("simple/blue.png", BLUE, (32, 32))
        alpha_path = self.create_image("simple/alpha.png", YELLOW, (32, 32))

        # maxside
        settings['algorithm_ordering'] = 'maxside'
        red = Image(red_path, settings)
        blue = Image(blue_path, settings)
        assert red > blue

        # width
        settings['algorithm_ordering'] = 'width'
        red = Image(red_path, settings)
        blue = Image(blue_path, settings)
        assert red > blue

        # height
        settings['algorithm_ordering'] = 'height'
        red = Image(red_path, settings)
        blue = Image(blue_path, settings)
        assert red > blue

        # area
        settings['algorithm_ordering'] = 'area'
        red = Image(red_path, settings)
        blue = Image(blue_path, settings)
        assert red > blue

        # filename
        settings['algorithm_ordering'] = 'filename'
        red = Image(red_path, settings)
        blue = Image(blue_path, settings)
        alpha_path = Image(alpha_path, settings)
        assert red < blue
        assert blue < alpha_path

    def test_css(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --css=styles")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("styles/simple.css")
        self.assertColor("output/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", BLUE, ((64, 0), (127, 63)))

        self.assertCSS(u"styles/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(../output/simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"styles/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(../output/simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_css_validation(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/sub/red.png", RED)
        code = self.call("glue simple output --recursive")
        self.assertEqual(code, 3)

    def test_less(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --less")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.less")
        self.assertDoesNotExists("output/simple.css")
        self.assertColor("output/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", BLUE, ((64, 0), (127, 63)))

        # In the future we should use less in order to validate
        # this output less files.

    def test_scss(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --scss")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.scss")
        self.assertDoesNotExists("output/simple.css")
        self.assertColor("output/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", BLUE, ((64, 0), (127, 63)))

        # In the future we should use scss in order to validate
        # this output scss files.

    def test_namespace(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --namespace=style")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", BLUE, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple.css", u'.style-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.style-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_empty_namespace(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --namespace=")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", BLUE, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple.css", u'.simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_sprite_namespace(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --sprite-namespace=custom")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", BLUE, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple.css", u'.sprite-custom-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-custom-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_sprite_namespace_with_var(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --sprite-namespace=custom-{sprite_name}")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", BLUE, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple.css", u'.sprite-custom-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-custom-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_empty_sprite_namespace(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --sprite-namespace=")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", BLUE, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple.css", u'.sprite-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_empty_namespaces(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --sprite-namespace= --namespace=")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", BLUE, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple.css", u'.red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_url(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --url=http://static.domain.com/")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", BLUE, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(http://static.domain.com/simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(http://static.domain.com/simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        code = self.call("glue simple output --url=/static/")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", BLUE, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(/static/simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(/static/simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        code = self.call("glue simple --url=/custom/ --css=a/b/c --img=d/e/f")
        self.assertEqual(code, 0)

        self.assertExists("d/e/f/simple.png")
        self.assertExists("a/b/c/simple.css")
        self.assertColor("d/e/f/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("d/e/f/simple.png", BLUE, ((64, 0), (127, 63)))

        self.assertCSS(u"a/b/c/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(/custom/simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"a/b/c/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(/custom/simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    @patch('glue.core.Sprite.hash')
    def test_cachebuster(self, mocked_hash):
        mocked_hash.__get__ = Mock(return_value="12345")
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --cachebuster")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", BLUE, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png?12345)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png?12345)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    @patch('glue.core.Sprite.hash')
    def test_cachebuster_filename(self, mocked_hash):
        mocked_hash.__get__ = Mock(return_value="12345")
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --cachebuster-filename")
        self.assertEqual(code, 0)

        self.assertExists("output/simple_12345.png")
        self.assertExists("output/simple_12345.css")
        self.assertColor("output/simple_12345.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple_12345.png", BLUE, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple_12345.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple_12345.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple_12345.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple_12345.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    @patch('glue.core.Sprite.hash')
    def test_cachebuster_filename_only_sprites(self, mocked_hash):
        mocked_hash.__get__ = Mock(return_value="12345")
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --cachebuster-filename-only-sprites")
        self.assertEqual(code, 0)

        self.assertExists("output/simple_12345.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple_12345.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple_12345.png", BLUE, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple_12345.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple_12345.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_separator_simple(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --separator=-")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", BLUE, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_separator_camelcase(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --separator=camelcase")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", BLUE, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple.css", u'.spriteSimpleRed',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.spriteSimpleBlue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    @patch('glue.core.Sprite.hash')
    def test_css_template(self, mocked_hash):
        mocked_hash.__get__ = Mock(return_value="12345")
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        with open('template.jinja', 'w') as f:
            f.write("custom css template for {{ hash }}")

        code = self.call("glue simple output --css-template=template.jinja")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", BLUE, ((64, 0), (127, 63)))

        with codecs.open('output/simple.css', 'r', 'utf-8-sig') as f:
            content = f.read()
            self.assertEqual(content, u"custom css template for {0}".format(12345))

    @patch('glue.core.Sprite.hash')
    def test_less_template(self, mocked_hash):
        mocked_hash.__get__ = Mock(return_value="12345")
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        with open('template.jinja', 'w') as f:
            f.write("custom less template for {{ hash }}")

        code = self.call("glue simple output --less --less-template=template.jinja")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.less")
        self.assertColor("output/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", BLUE, ((64, 0), (127, 63)))

        with codecs.open('output/simple.less', 'r', 'utf-8-sig') as f:
            content = f.read()
            self.assertEqual(content, u"custom less template for {0}".format(12345))

    @patch('glue.core.Sprite.hash')
    def test_scss_template(self, mocked_hash):
        mocked_hash.__get__ = Mock(return_value="12345")
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        with open('template.jinja', 'w') as f:
            f.write("custom scss template for {{ hash }}")

        code = self.call("glue simple output --scss --scss-template=template.jinja")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.scss")
        self.assertColor("output/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", BLUE, ((64, 0), (127, 63)))

        with codecs.open('output/simple.scss', 'r', 'utf-8-sig') as f:
            content = f.read()
            self.assertEqual(content, u"custom scss template for {0}".format(12345))

    def test_html(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --html")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertExists("output/simple.html")

    def test_json(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --json")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.json")
        with codecs.open('output/simple.json', 'r', 'utf-8-sig') as f:
            data = json.loads(f.read())
            assert isinstance(data['frames'], list)

        # Rebuild in order to test the ``needs_rebuild`` method
        code = self.call("glue simple output --json")
        self.assertEqual(code, 0)

    def test_json_ratios(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --json --retina")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.json")
        self.assertExists("output/simple@2x.png")
        self.assertExists("output/simple@2x.json")

        with codecs.open('output/simple.json', 'r', 'utf-8-sig') as f:
            data = json.loads(f.read())
            assert isinstance(data['frames'], list)

        with codecs.open('output/simple@2x.json', 'r', 'utf-8-sig') as f:
            data = json.loads(f.read())
            assert isinstance(data['frames'], list)

    def test_json_hash(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --json --json-format=hash")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.json")
        with codecs.open('output/simple.json', 'r', 'utf-8-sig') as f:
            data = json.loads(f.read())
            assert isinstance(data['frames'], dict)

    def test_img(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --img=images")
        self.assertEqual(code, 0)

        self.assertExists("images/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("images/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("images/simple.png", BLUE, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(../images/simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(../images/simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_no_img(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --no-img")
        self.assertEqual(code, 0)

        self.assertDoesNotExists("output/simple.png")
        self.assertExists("output/simple.css")

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_crop(self):
        self.create_image("simple/red.png", RED, margin=4)
        self.create_image("simple/blue.png", BLUE, margin=4)
        code = self.call("glue simple output --crop")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", BLUE, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_crop_dirty_transparent_images(self):
        WHITE_TRANSPARENT = (255, 255, 255, 0)
        self.create_image("simple/red.png", margin=4, margin_color=WHITE_TRANSPARENT)
        self.create_image("simple/blue.png", BLUE, margin=4, margin_color=WHITE_TRANSPARENT)
        code = self.call("glue simple output --crop")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", BLUE, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_padding(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)

        # Simple padding
        code = self.call("glue simple output --padding=4")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", RED, ((4, 4), (67, 67)))
        self.assertColor("output/simple.png", BLUE, ((76, 4), (139, 67)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'72px',
                        u'height': u'72px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-72px 0',
                        u'width': u'72px',
                        u'height': u'72px'})

        # Double padding
        code = self.call("glue simple output --padding=2,4")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")

        self.assertColor("output/simple.png", RED, ((4, 2), (67, 65)))
        self.assertColor("output/simple.png", BLUE, ((76, 2), (139, 65)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'72px',
                        u'height': u'68px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-72px 0',
                        u'width': u'72px',
                        u'height': u'68px'})

        # Triple padding
        code = self.call("glue simple output --padding=2,4,6")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")

        self.assertColor("output/simple.png", RED, ((4, 2), (67, 65)))
        self.assertColor("output/simple.png", BLUE, ((76, 2), (139, 65)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'72px',
                        u'height': u'72px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-72px 0',
                        u'width': u'72px',
                        u'height': u'72px'})

        # Full padding
        code = self.call("glue simple output --padding=2,4,6,8")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")

        self.assertColor("output/simple.png", RED, ((8, 2), (67, 65)))
        self.assertColor("output/simple.png", BLUE, ((84, 2), (147, 65)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'76px',
                        u'height': u'72px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-76px 0',
                        u'width': u'76px',
                        u'height': u'72px'})

    def test_margin(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)

        # Simple margin
        code = self.call("glue simple output --margin=4")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", RED, ((4, 4), (67, 67)))
        self.assertColor("output/simple.png", BLUE, ((76, 4), (139, 67)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-4px -4px',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-76px -4px',
                        u'width': u'64px',
                        u'height': u'64px'})

        # Double margin
        code = self.call("glue simple output --margin=2,4")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")

        self.assertColor("output/simple.png", RED, ((4, 2), (67, 65)))
        self.assertColor("output/simple.png", BLUE, ((76, 2), (139, 65)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-4px -2px',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-76px -2px',
                        u'width': u'64px',
                        u'height': u'64px'})

        # Triple margin
        code = self.call("glue simple output --margin=2,4,6")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")

        self.assertColor("output/simple.png", RED, ((4, 2), (67, 65)))
        self.assertColor("output/simple.png", BLUE, ((76, 2), (139, 65)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-4px -2px',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-76px -2px',
                        u'width': u'64px',
                        u'height': u'64px'})

        # Full margin
        code = self.call("glue simple output --margin=2,4,6,8")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")

        self.assertColor("output/simple.png", RED, ((8, 2), (67, 65)))
        self.assertColor("output/simple.png", BLUE, ((84, 2), (147, 65)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-8px -2px',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-84px -2px',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_png8(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --png8")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")

        image = PILImage.open("output/simple.png")
        self.assertEqual(image.mode, 'P')
        self.assertEqual(image.getpixel((0, 0)), 0)
        self.assertEqual(image.getpixel((63, 63)), 0)
        self.assertEqual(image.getpixel((64, 0)), 1)
        self.assertEqual(image.getpixel((127, 63)), 1)

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_retina(self):

        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --retina")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple@2x.png")
        self.assertExists("output/simple.css")

        self.assertColor("output/simple.png", RED, ((0, 0), (31, 31)), .1)
        self.assertColor("output/simple.png", BLUE, ((31, 0), (63, 31)), .1)
        self.assertColor("output/simple@2x.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple@2x.png", BLUE, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'32px',
                        u'height': u'32px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-32px 0',
                        u'width': u'32px',
                        u'height': u'32px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple@2x.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'background-size': u'64px 32px',
                        u'-webkit-background-size': u'64px 32px',
                        u'-moz-background-size': u'64px 32px',
                        u'width': u'32px',
                        u'height': u'32px'}, ratio=2)

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple@2x.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-32px 0',
                        u'background-size': u'64px 32px',
                        u'-webkit-background-size': u'64px 32px',
                        u'-moz-background-size': u'64px 32px',
                        u'width': u'32px',
                        u'height': u'32px'}, ratio=2)

    def test_retina_url(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --retina --url=http://static.domain.com/")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple@2x.png")
        self.assertExists("output/simple.css")

        self.assertColor("output/simple.png", RED, ((0, 0), (31, 31)), .1)
        self.assertColor("output/simple.png", BLUE, ((31, 0), (63, 31)), .1)
        self.assertColor("output/simple@2x.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple@2x.png", BLUE, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(http://static.domain.com/simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'32px',
                        u'height': u'32px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(http://static.domain.com/simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-32px 0',
                        u'width': u'32px',
                        u'height': u'32px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(http://static.domain.com/simple@2x.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'background-size': u'64px 32px',
                        u'-webkit-background-size': u'64px 32px',
                        u'-moz-background-size': u'64px 32px',
                        u'width': u'32px',
                        u'height': u'32px'}, ratio=2)

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(http://static.domain.com/simple@2x.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-32px 0',
                        u'background-size': u'64px 32px',
                        u'-webkit-background-size': u'64px 32px',
                        u'-moz-background-size': u'64px 32px',
                        u'width': u'32px',
                        u'height': u'32px'}, ratio=2)

    @patch('glue.core.Sprite.hash')
    def test_retina_cachebuster(self, mocked_hash):
        mocked_hash.__get__ = Mock(return_value="12345")

        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --retina --cachebuster")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple@2x.png")
        self.assertExists("output/simple.css")

        self.assertColor("output/simple.png", RED, ((0, 0), (31, 31)), .1)
        self.assertColor("output/simple.png", BLUE, ((31, 0), (63, 31)), .1)
        self.assertColor("output/simple@2x.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple@2x.png", BLUE, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png?12345)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'32px',
                        u'height': u'32px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png?12345)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-32px 0',
                        u'width': u'32px',
                        u'height': u'32px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple@2x.png?12345)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'background-size': u'64px 32px',
                        u'-webkit-background-size': u'64px 32px',
                        u'-moz-background-size': u'64px 32px',
                        u'width': u'32px',
                        u'height': u'32px'}, ratio=2)

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple@2x.png?12345)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-32px 0',
                        u'background-size': u'64px 32px',
                        u'-webkit-background-size': u'64px 32px',
                        u'-moz-background-size': u'64px 32px',
                        u'width': u'32px',
                        u'height': u'32px'}, ratio=2)

    def test_cocos2d(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --cocos2d")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.plist")
        self.assertColor("output/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", BLUE, ((64, 0), (127, 63)))

        meta = readPlist("output/simple.plist")
        self.assertEqual(set(meta.keys()), set(['frames', 'metadata']))
        self.assertEqual(set(meta['frames'].keys()), set(['blue.png', 'red.png']))

        code = self.call("glue simple output --cocos2d")
        self.assertEqual(code, 0)

    @patch('glue.managers.simple.SimpleManager.process')
    def test_debug(self, mock_process):
        mock_process.side_effect = Exception("Error!")
        os.mkdir('simple')
        code, output = self.call("glue simple output", capture=True)
        self.assertEqual(code, 1)

    def test_custom_paths(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple --css=output --img=output")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", RED, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", BLUE, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_sprite_config_files(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/sub/blue.png", BLUE)
        with open('simple/sprite.conf', 'w') as f:
            f.write("[sprite]\nrecursive=true\n")

        code = self.call("glue simple output")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", BLUE, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", RED, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_image_config_files(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)

        with open('simple/sprite.conf', 'w') as f:
            f.write("[blue.png]\nmargin=4\n")

        code = self.call("glue simple output")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", BLUE, ((4, 4), (67, 67)))
        self.assertColor("output/simple.png", RED, ((72, 0), (135, 63)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-blue',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-4px -4px',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-red',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-72px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_pseudo_class(self):
        self.create_image("simple/button.png", RED)
        self.create_image("simple/button__hover.png", BLUE)
        code = self.call("glue simple output")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", BLUE, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", RED, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-button',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-button:hover',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_multiple_pseudo_class(self):
        self.create_image("simple/button.png", RED)
        self.create_image("simple/button__hover__before.png", BLUE)
        code = self.call("glue simple output")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", BLUE, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", RED, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-button',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-button:hover:before',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_custom_pseudo_class_separator(self):
        self.create_image("simple/button.png", RED)
        self.create_image("simple/button_hover.png", BLUE)
        code = self.call("glue simple output --pseudo-class-separator=_")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.css")
        self.assertColor("output/simple.png", BLUE, ((0, 0), (63, 63)))
        self.assertColor("output/simple.png", RED, ((64, 0), (127, 63)))

        self.assertCSS(u"output/simple.css", u'.sprite-simple-button',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'-64px 0',
                        u'width': u'64px',
                        u'height': u'64px'})

        self.assertCSS(u"output/simple.css", u'.sprite-simple-button:hover',
                       {u'background-image': u"url(simple.png)",
                        u'background-repeat': u'no-repeat',
                        u'background-position': u'0 0',
                        u'width': u'64px',
                        u'height': u'64px'})

    def test_no_css(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --no-css")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertDoesNotExists("output/simple.css")

    def test_no_css_with_css(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --no-css --css=folder")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertDoesNotExists("output/folder/simple.css")

    def test_no_css_validation(self):
        """Test that CSS validations does not run if --no-css is present."""
        self.create_image("simple/red.png", RED)
        self.create_image("simple/red|.png", RED)
        code = self.call("glue simple output --no-css")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertDoesNotExists("output/simple.css")

    def test_caat(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --caat")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.json")
        with codecs.open('output/simple.json', 'r', 'utf-8-sig') as f:
            data = json.loads(f.read())
            assert isinstance(data['sprites'], dict)

    def test_caat_ratios(self):
        self.create_image("simple/red.png", RED)
        self.create_image("simple/blue.png", BLUE)
        code = self.call("glue simple output --caat --retina")
        self.assertEqual(code, 0)

        self.assertExists("output/simple.png")
        self.assertExists("output/simple.json")
        self.assertExists("output/simple@2x.png")
        self.assertExists("output/simple@2x.json")

        with codecs.open('output/simple.json', 'r', 'utf-8-sig') as f:
            data = json.loads(f.read())
            assert isinstance(data['sprites'], dict)

        with codecs.open('output/simple@2x.json', 'r', 'utf-8-sig') as f:
            data = json.loads(f.read())
            assert isinstance(data['sprites'], dict)

if __name__ == '__main__':
    unittest.main()

########NEW FILE########
