
# Setup

This follow setup allows a linux computer to appear as a GoPro remote to the GoPro cameras. To do this, we will set up an access point and DHCP server. In order to appear as a GoPro remote, the MAC address of the access point interface must use GoPro's OUI which is D8:96:85. So something like D8:96:85:00:00:00 will do. The access point SSID also must be in a special form - "HERO-RC-#####" where the hashes are the last 6 characters of the AP's mac address. From there, we use DHCP to hand the camera an IP, and then it is on our network!

I used http://www.cyberciti.biz/faq/debian-ubuntu-linux-setting-wireless-access-point/ and http://ubuntuforums.org/showthread.php?t=1488953 to help me develop some of these snippits.

## Wifi adapter

You'll need a wifi adapter that can support master mode to set up an access point. I'm using a ALFA USB WiFi AWUS036NHA with the well-supported Atheros AR9271 chipset.

On that is installed, we need to change its mac address to one from the GoPro's OUI (D8:96:85) so that the cameras will recognize it. We can do that like so:

    sudo ifconfig wlan0 down
    sudo ifconfig wlan0 hw ether D8:96:85:00:00:00 # was originally 00:c0:ca:71:ca:4f
    sudo ifconfig wlan0 up
    ifconfig

## Set up access point

Install the host AP deamon like so:

    sudo apt-get install hostapd

Edit '/etc/default/hostapd' to point to a hostapd config file by setting the DAEMON_CONF variable:

    DAEMON_CONF="/etc/hostapd/hostapd.conf"

Then set up the hostapd config file! It should look something like this:

    interface=wlan0
    driver=nl80211
    country_code=US
    ssid=HERO-RC-000000
    hw_mode=b
    channel=6

Start the server using:

    sudo service hostapd start

## Set up DHCP server

This portion is optional if you decide to bridge your access point network with an already-established LAN. Find details on bridging networking interfaces on the web.

    sudo apt-get install dhcp3-server

Tell the DHCP server to service our wireless interface by editing '/etc/default/isc-dhcp-server':

   INTERFACES="wlan0"

Set up the DHCP config file '/etc/dhcp/dhcpd.conf'. Mine looks like this:

    default-lease-time 86400;
    max-lease-time 86400;
    option subnet-mask 255.255.255.0;
    option broadcast-address 192.168.1.255;
    option routers 192.168.1.254;
    option domain-name-servers 192.168.1.1, 192.168.1.2;
    option domain-name "mydomain.example";
    
    subnet 192.168.1.0 netmask 255.255.255.0 {
    range 192.168.1.10 192.168.1.200;
    }

You can that start the DHCP server:

    sudo service isc-dhcp-server start

## Install Scapy

    sudo apt-get install python-scapy

# Usage

    sudo python remote.py









sudo ifconfig wlan0 192.168.0.254 netmask 255.255.255.0

log-facility local7;
ddns-update-style none;
default-lease-time 43200;
max-lease-time 86400;

subnet 192.168.0.0 netmask 255.255.255.0 {
  interface wlan0;
  range 192.168.0.10 192.168.0.20;
  option subnet-mask 255.255.255.0;
  option broadcast-address 192.168.0.255;
}

# GoProController

A lightweight Python class for interfacing with multiple GoPros.

## Description

This class can interfaces with GoPro cameras in their wifi ad-hoc mode (aka GoPro iOS App mode.) When used with multiple cameras, the class will automatically jump between networks. GoProController can also take snapshots from the camera's live stream. OpenCV is used to open the stream and save a single frame.

## Background

My use case for this code is to remotely configure and check the status of about ten GoPro cameras from afar. I've built a tiny BeagleBone PC running Ubuntu that runs this script and [GoProApp](https://github.com/joshvillbrandt/GoProApp) via Apache. The PC has a wifi adapter to communicate with the GoPros and talks back to the primary network over wired Ethernet.

During the development of this script, we discovered that the GoPro can work in entirely two different Wifi scnearios. This script takes advantage of the camera's ability to connect to an iOS app. In this scenario, the camera creates an ad-hoc network that a client can connect to. The cameras can also be configured to jump on to an infrastructure network. The intended scenario here is for use with GoPro's remote to control multiple cameras simultaneously. From my limited testing, it seems that the remote-to-camera communication is much more limited. The obvious advantage though is that one doesn't have to jump on different wifi networks to talk to multiple cameras.

At the moment, I am not pursueing additional research into the infrastructure mode of the cameras. However, if someone can provide me an example code controlling two cameras without jumping networks, then I'm happy to change this code around. Check out my [Infrastructure Wifi Research](Infrastructure Wifi Research.md) from last September for a good starting point on this approach.

## Installation

GoProController is developed and tested on Ubuntu. To install the prerequisites, run the following:

```bash
sudo apt-get install python-numpy python-opencv git
```

Then clone the repo:

```bash
git clone https://github.com/joshvillbrandt/GoProController.git
```

You can use this module in your own code by using something like this:

```python
from GoProController import GoProController
c = GoProController()
c.test()
```

## Todo List

* hack the infrastructure network that the GoPro Remote makes and learn how to have GoPros on only one network
* look into the wifi_networks list that in the settings.in file that is present when updating GoPro firmware
* revamp crappy wifi connect code
* respond better to keyboard interrupts
* still some information in the status byte streams i haven't translated... I don't really need the rest though
* openCV functions can get a segfault if the wifi connection is spotty - that stucks
* GoPro 3 wifi sometimes shuts off when charging via USB even though the wifi LED is still flashing
* "charging" indicator might not be accurate with an extra battery pack.

## Contributions

Pull requests are welcomed!

