__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# Zeta library documentation build configuration file, created by
# sphinx-quickstart on Wed Feb 16 19:26:51 2011.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from zetalibrary import VERSION, AUTHOR


# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.viewcode']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Zeta library'
copyright = AUTHOR

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = VERSION
# The full version, including alpha/beta/rc tags.
release = VERSION

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'sphinxdoc'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'Zetalibrarydoc'


# -- Options for LaTeX output --------------------------------------------------

# The paper size ('letter' or 'a4').
#latex_paper_size = 'letter'

# The font size ('10pt', '11pt' or '12pt').
#latex_font_size = '10pt'

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'Zetalibrary.tex', u'Zeta library Documentation',
   u'Kirill Klenov', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Additional stuff for the LaTeX preamble.
#latex_preamble = ''

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'zetalibrary', u'Zeta library Documentation',
     [u'Kirill Klenov'], 1)
]

########NEW FILE########
__FILENAME__ = base
from os import path as op


BASEDIR = op.dirname(__file__)


class FakeArgs():
    def __init__(self, format=None, prefix='_', compress=False, directory=None, output=None):
        self.format = format
        self.prefix = prefix
        self.compress = compress
        self.directory = directory
        self.output = output

########NEW FILE########
__FILENAME__ = common
import unittest
from os import path as op

from .base import FakeArgs, BASEDIR
from zetalibrary.packer import Packer
from zetalibrary.utils import gen_files, gen_frameworks


class TestPacker(unittest.TestCase):
    folder = op.join(BASEDIR, 'common')

    def test_route(self):
        css_file = op.join(self.folder, 'main.css')
        js_file = op.join(self.folder, 'main.js')
        result = list(gen_files(self.folder))
        self.assertTrue(css_file in result)
        self.assertTrue(js_file in result)

    def test_getframework(self):
        frameworks = list(gen_frameworks())
        self.assertTrue(len(frameworks))

    def test_custom_libs(self):
        js_file = op.join(BASEDIR, 'custom', 'custom.js')
        Packer(js_file, FakeArgs(
            directory=op.join(BASEDIR, 'custom'),
        )).pack()
        self.assertTrue(
            'fake' in open(op.join(BASEDIR, 'custom', '_custom.js')).read())

    def test_pack(self):
        css_file = op.join(self.folder, 'main.css')
        Packer(css_file, FakeArgs(
            output=op.join(BASEDIR, 'common', 'output'),
            compress=True)).pack()
        orig = open(op.join(self.folder, '_main.css.orig')).read()
        test = open(op.join(self.folder, 'output/_main.css')).read()
        self.assertEqual(test, orig)

        js_file = op.join(self.folder, 'main.js')
        Packer(js_file, FakeArgs(
            output=op.join(BASEDIR, 'common', 'output'),
            compress=True)).pack()
        orig = open(op.join(self.folder, '_main.js.orig')).read()
        test = open(op.join(self.folder, 'output/_main.js')).read()
        self.assertEqual(test, orig)

########NEW FILE########
__FILENAME__ = libs
from os import path as op
import unittest

from .base import BASEDIR, FakeArgs
from zetalibrary.packer import Packer


class LibsTest(unittest.TestCase):
    folder = op.join(BASEDIR, 'libs')

    def test_jquery(self):
        Packer(op.join(self.folder, 'jquery.js'),
               FakeArgs()).pack()
        self.assertEqual(
            open(op.join(self.folder, '_jquery.js')).read(),
            open(op.join(self.folder, '_jquery.js.orig')).read()
        )

    def test_underscore(self):
        Packer(op.join(self.folder, 'underscore.js'),
               FakeArgs()).pack()
        self.assertEqual(
            open(op.join(self.folder, '_underscore.js')).read(),
            open(op.join(self.folder, '_underscore.js.orig')).read()
        )

    def test_blueprint(self):
        Packer(op.join(self.folder, 'blueprint.css'),
               FakeArgs()).pack()
        self.assertEqual(
            open(op.join(self.folder, '_blueprint.css')).read(),
            open(op.join(self.folder, '_blueprint.css.orig')).read()
        )

    def test_boilerplate(self):
        Packer(op.join(self.folder, 'boilerplate.css'),
               FakeArgs()).pack()
        self.assertEqual(
            open(op.join(self.folder, '_boilerplate.css')).read(),
            open(op.join(self.folder, '_boilerplate.css.orig')).read()
        )

    def test_compass(self):
        Packer(op.join(self.folder, 'compass.scss'),
               FakeArgs()).pack()
        self.assertEqual(
            open(op.join(self.folder, '_compass.scss')).read(),
            open(op.join(self.folder, '_compass.scss.orig')).read()
        )

########NEW FILE########
__FILENAME__ = zeta
import unittest
from os import path as op

from .base import BASEDIR, FakeArgs
from zetalibrary.packer import Packer


class TestZeta(unittest.TestCase):
    folder = op.join(BASEDIR, 'zeta')

    def test_zeta(self):
        css_file = op.join(self.folder, 'main.css')
        packer = Packer(css_file, FakeArgs())
        packer.pack()
        orig = open(op.join(self.folder, '_main.css.orig')).read()
        test = open(op.join(self.folder, '_main.css')).read()
        self.assertEqual(test, orig)

        js_file = op.join(self.folder, 'main.js')
        packer = Packer(js_file, FakeArgs())
        packer.pack()
        orig = open(op.join(self.folder, '_main.js.orig')).read()
        test = open(op.join(self.folder, '_main.js')).read()
        self.assertEqual(test, orig)

########NEW FILE########
__FILENAME__ = main
import time
import sys
from os import path as op

from argh import ArghParser, command, arg, wrap_errors
from watchdog.observers import Observer

from zetalibrary.settings import BASEDIR, VERSION, CUSTOMDIR
from zetalibrary.utils import ZetaTrick, pack as zeta_pack, gen_frameworks


@command
def shell():
    " A helper command to be used for shell integration "
    print
    print "# Zeta integration "
    print "# ==================== "
    print "source %s" % op.join(BASEDIR, 'shell.sh')
    print


@command
def libs():
    " Show zeta libs "
    for name, description, version, url in gen_frameworks():
        print name
        print ''.join('-' for _ in xrange(len(name)))
        print description.strip('/*\n ')
        print version.strip('/*\n ')
        print url.strip('/*\n ')
        print


@arg('source')
@arg('-p', '--prefix', default="_", help="Save packed files with prefix. Default is '_'")
@arg('-f', '--format', help="Force format (css, js, ...). By default format parse from file extension")
@arg('-c', '--compress', default=False, help="Compress packed sources")
@arg('-d', '--directory', default=CUSTOMDIR, help="Add custom directory for search with prefix: 'zeta://' By default $ZETA_LIBDIR")
@arg('-o', '--output', help="Set output directory path.")
@arg('-s', '--setup-file', help="Configuration ini file")
@wrap_errors(Exception)
def watch(args):
    " Watch directory for changes and auto pack sources "
    assert op.isdir(args.source), "Watch mode allowed only for directories."
    print 'Zeta-library v. %s watch mode' % VERSION
    print '================================'
    print 'Ctrl+C for exit\n'
    observer = Observer()
    handler = ZetaTrick(args=args)
    observer.schedule(handler, args.source, recursive=True)
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
        print "\nWatch mode stoped."
    observer.join()


@arg('source')
@arg('-p', '--prefix', default="_", help="Save packed files with prefix. Default is '_'")
@arg('-f', '--format', help="Force format (css, js, ...). By default format parse from file extension")
@arg('-c', '--compress', default=False, help="Compress packed sources")
@arg('-d', '--directory', default=CUSTOMDIR, help="Add custom directory for search with prefix: 'zeta://' By default $ZETA_LIBDIR")
@arg('-o', '--output', help="Set output directory path")
@arg('-s', '--setup-file', help="Configuration ini file")
@wrap_errors(Exception)
def pack(args):
    " Parse file or dir, import css, js code and save with prefix "
    assert op.exists(args.source), "Does not exists: %s" % args.source
    zeta_pack(args)


def main():
    commands = pack, watch, shell, libs
    names = [f.__name__ for f in commands] + ['help']

    parser = ArghParser()
    parser.add_argument('-v', '--version', action='version',
                        version=VERSION, help='Show zeta version')
    parser.add_commands(commands)
    argv = sys.argv[1:]
    if argv and not argv[0] in names and not argv[0] in ['-v', '--version']:
        argv.insert(0, 'pack')
    parser.dispatch(argv)


if __name__ == "__main__":
    main()

########NEW FILE########
__FILENAME__ = packer
from os import path as op
from sys import stderr, stdout

from zetalibrary.parser import CSSParser, SCSSParser, JSParser
from zetalibrary.settings import LIBDIR
from zetalibrary.utils import color_msg, ZetaError


class Packer(object):

    def __init__(self, path, args):
        self.path = path.rstrip(op.sep)
        self.basedir = op.abspath(op.dirname(path))
        self.args = args
        self.imports = set()
        self.parsers = dict(
            css=CSSParser(self.basedir, compress=self.args.compress),
            scss=SCSSParser(self.basedir, compress=self.args.compress),
            js=JSParser(self.basedir, compress=self.args.compress),
        )

    def pack(self):
        " Pack and save file "
        pack_name = self.args.prefix + op.basename(self.path)
        pack_path = op.join(self.args.output or self.basedir, pack_name)

        self.out("Packing: %s" % self.path)
        self.out("Output: %s" % pack_path)

        if self.args.format:
            ext = self.get_ext(self.path)
            self.parsers[ext] = self.args.format

        out = "".join(self.merge(self.parse(self.path)))
        try:
            open(pack_path, 'w').write(out)
            self.out("Linked file saved as: '%s'." % pack_path)
        except IOError, ex:
            raise ZetaError(ex)

    @staticmethod
    def get_ext(path):
        _, ext = op.splitext(path)
        return ext.lstrip('.').lower()

    def get_parser(self, path):
        return self.parsers.get(self.get_ext(path))

    def parse(self, path, parent=None):
        self.imports.add(path)
        parser = self.get_parser(path)
        curdir = op.dirname(path)
        result = []
        try:
            src, imports = parser.parse_path(path)
            for f in filter(lambda x: not x in self.imports,
                            map(
                            lambda x: op.abspath(
                                op.relpath(op.join(curdir, x))),
                            map(lambda x: self.parse_path(x, curdir), imports))):
                result = result + self.parse(f, parent=path)

            result.append((path, parent, parser, src))
        except IOError, e:
            self.out(str(e), error=True)

        self.out(" * %s" % path)
        return result

    def merge(self, tree):
        for path, parent, parser, src in tree:
            src = parser.parse_src(src, path)
            if not src:
                continue

            if not self.args.compress:
                yield parser.comment_template % ("=" * 10)
                if parent:
                    from_path = parent.replace(LIBDIR, 'zeta:/') if parent.startswith(
                        LIBDIR) else op.relpath(parent, self.path)
                    yield parser.comment_template % "From: '%s'" % from_path
                target_path = path.replace(LIBDIR, 'zeta:/') if path.startswith(
                    LIBDIR) else op.relpath(path, self.path)
                yield parser.comment_template % "Zeta import: '%s'" % target_path
                yield src
                yield '\n\n'
            else:
                yield src

        yield '\n'

    def parse_path(self, path, curdir):
        " Normilize path. "
        if path.startswith('http://'):
            return path

        elif path.startswith('zeta://'):
            zpath = op.join(LIBDIR, path[len('zeta://'):])
            if self.args.directory and not op.exists(zpath):
                return op.join(self.args.directory, path[len('zeta://'):])
            return zpath

        return op.abspath(op.normpath(op.join(curdir, path)))

    @staticmethod
    def out(msg, error=False):
        " Send message to shell "
        pipe = stdout
        if error:
            pipe = stderr
            msg = color_msg(msg, "warning")

        pipe.write("%s\n" % msg)

########NEW FILE########
__FILENAME__ = parser
import re
import urllib2
from os import path as op

from zetalibrary import scss
from cssmin import cssmin
from jsmin import jsmin

from zetalibrary.settings import LIBDIR


scss.LOAD_PATHS = LIBDIR


class Parser(object):

    import_re = None
    comment_re = None

    def __init__(self, basedir, compress=False):
        self.compress = compress
        self.basedir = basedir

    @staticmethod
    def read(path, savedir):
        " Read file from path "
        if path.startswith('http://'):
            name = op.basename(path)
            save_path = op.join(savedir, name)
            if not op.exists(save_path):
                src = urllib2.urlopen(path).read()
                try:
                    open(save_path, 'w').write(src)
                except IOError:
                    return src
            path = save_path
        return open(path, 'r').read()

    def parse_path(self, path, parent=None):
        curdir = op.dirname(parent) if parent else self.basedir
        return self.parse_imports(self.read(path, curdir))

    def parse_imports(self, src):
        " Parse imports from source. "
        result = []

        def child(obj):
            result.append(obj.group(1))
        src = self.import_re.sub(child, src)
        return src, result

    def parse_src(self, src, path=None):
        if self.compress:
            src = self.comment_re.sub('', src)
        return src.strip()


class CSSParser(Parser):
    import_re = re.compile(r'^\s*@import +url\(\s*["\']?([^\)\'\"]+)["\']?\s*\)\s*;?\s*$', re.MULTILINE)
    comment_re = re.compile(r'/\*(?:[^*]|\*+[^*/])*\*+/')
    comment_template = '/* %s */\n'
    link_re = re.compile(r'url\(\s*["\']?([^\)\'\"]+)["\']?\)')

    def parse_src(self, src, path=None):
        src = super(CSSParser, self).parse_src(src)

        def links(obj):
            link_path = obj.group(1)
            for ignore in ('data:image', 'http://', 'https://'):
                if link_path.startswith(ignore):
                    return "url(%s)" % link_path
            try:
                url = "url(%s)" % op.relpath(
                    op.join(op.dirname(path), link_path), self.basedir)
                url = url.replace("\\", "/")
                return url
            except (OSError, AttributeError):
                return "url(%s)" % link_path

        src = self.link_re.sub(links, src)
        if self.compress:
            src = cssmin(src)
        return src


class SCSSParser(CSSParser):

    def __init__(self, *args, **kwargs):
        super(SCSSParser, self).__init__(*args, **kwargs)
        self.parser = scss.Scss(scss_opts=dict(compress=self.compress))

    def parse_src(self, codesrc, path=None):
        codesrc = super(SCSSParser, self).parse_src(codesrc, path=path)

        codesrc = self.parser.load_string(codesrc.strip(), path)
        self.parser._scss_files[path] = str
        self.parser.children.append(
            scss.spawn_rule(
                fileid=path,
                codestr=codesrc,
                context=self.parser._scss_vars,
                options=self.parser._scss_opts,
                index=self.parser._scss_index
            ))
        self.parser.parse_children()
        self.parser.parse_extends()
        self.parser.manage_order()
        self.parser.parse_properties()
        codesrc = self.parser.create_css(path)
        codesrc = self.parser.post_process(codesrc)

        return codesrc.strip()


class JSParser(Parser):
    import_re = re.compile(
        r'^(?:require|include)\(\s*[\'\"]([^\'\"]+)[\'\"]\s*\)\s*;?\s*$', re.MULTILINE)
    comment_re = re.compile(r'/\*(?:[^*]|\*+[^*/])*\*+/')
    comment_template = '// %s\n'

    def parse_src(self, src, path=None):
        src = super(JSParser, self).parse_src(src)
        if self.compress:
            src = jsmin(src)
        return src

########NEW FILE########
__FILENAME__ = scss_meta
#!/usr/bin/env python
#-*- coding: utf-8 -*-
"""
pyScss, a Scss compiler for Python

@author     German M. Bravo (Kronuz) <german.mb@gmail.com>
@version    1.0
@see        https://github.com/Kronuz/pyScss
@copyright  (c) 2011 German M. Bravo (Kronuz)
@license    MIT License
            http://www.opensource.org/licenses/mit-license.php

pyScss compiles Scss, a superset of CSS that is more powerful, elegant and
easier to maintain than plain-vanilla CSS. The library acts as a CSS source code
preprocesor which allows you to use variables, nested rules, mixins, andhave
inheritance of rules, all with a CSS-compatible syntax which the preprocessor
then compiles to standard CSS.

Scss, as an extension of CSS, helps keep large stylesheets well-organized. It
borrows concepts and functionality from projects such as OOCSS and other similar
frameworks like as Sass. It's build on top of the original PHP xCSS codebase
structure but it's been completely rewritten, many bugs have been fixed and it
has been extensively extended to support almost the full range of Sass' Scss
syntax and functionality.

Bits of code in pyScss come from various projects:
Compass:
    (c) 2009 Christopher M. Eppstein
    http://compass-style.org/
Sass:
    (c) 2006-2009 Hampton Catlin and Nathan Weizenbaum
    http://sass-lang.com/
xCSS:
    (c) 2010 Anton Pawlik
    http://xcss.antpaw.org/docs/

    This file defines Meta data, according to PEP314
    (http://www.python.org/dev/peps/pep-0314/) which is common to both pyScss
    and setup.py distutils.

    We create this here so this information can be compatible with BOTH
    Python 2.x and Python 3.x so setup.py can use it when building pyScss
    for both Py3.x and Py2.x

"""

VERSION_INFO = (1, 0, 8)
DATE_INFO = (2011, 5, 13)  # YEAR, MONTH, DAY
VERSION = '.'.join(str(i) for i in VERSION_INFO)
REVISION = '%04d%02d%02d' % DATE_INFO
BUILD_INFO = "pyScss v" + VERSION + " (" + REVISION + ")"
AUTHOR = "German M. Bravo (Kronuz)"
AUTHOR_EMAIL = 'german.mb@gmail.com'
URL = 'http://github.com/Kronuz/pyScss'
DOWNLOAD_URL = 'http://github.com/Kronuz/pyScss/tarball/v1.0'
LICENSE = "MIT"
PROJECT = "pyScss"

if __name__ == "__main__":
    print('VERSION      = ' + VERSION)
    print('REVISION     = ' + REVISION)
    print('BUILD_INFO   = ' + BUILD_INFO)
    print('AUTHOR       = ' + AUTHOR)
    print('AUTHOR_EMAIL = ' + AUTHOR_EMAIL)
    print('URL          = ' + URL)
    print('LICENSE      = ' + LICENSE)
    print('PROJECT      = ' + PROJECT)

########NEW FILE########
__FILENAME__ = settings
from os import path as op, environ, getcwd


VERSION = '0.5.93'
BASEDIR = op.abspath(op.dirname(__file__))
LIBDIR = op.join(BASEDIR, 'libs')
CUSTOMDIR = environ.get('ZETA_LIBDIR', None)
FORMATS = ['css', 'scss', 'js']
CURRENT_CONFIG = op.join(getcwd(), "zeta.ini")
HOME_CONFIG = op.join(environ.get('HOME', ''), "zeta.ini")
COLORS = dict(
    okgreen='\033[92m',
    warning='\033[93m',
    fail='\033[91m',
    endc='\033[0m',
)

########NEW FILE########
__FILENAME__ = utils
from os import path as op, listdir

from watchdog.tricks import Trick

from zetalibrary.settings import COLORS, FORMATS, LIBDIR, CURRENT_CONFIG, HOME_CONFIG
from ConfigParser import ConfigParser


def color_msg(msg, color):
    " Return colored message "
    return ''.join((COLORS.get(color, COLORS['endc']), msg, COLORS['endc']))


def is_parsed_file(path, prefix="_"):
    name, ext = op.splitext(op.basename(path))
    return op.isfile(path) and not name.startswith(prefix) and ext[1:].lower() in FORMATS


def gen_files(path, prefix="_"):
    " Return file generator "

    if op.isdir(path):
        for name in listdir(path):
            fpath = op.join(path, name)
            if is_parsed_file(fpath):
                yield op.abspath(fpath)

    elif is_parsed_file(path):
        yield op.abspath(path)


def gen_frameworks():
    for fname in sorted(listdir(LIBDIR)):
        name, ext = op.splitext(fname)
        fpath = op.join(LIBDIR, fname)
        if not name.startswith('_') and op.isfile(fpath) and ext.strip('.') in ['css', 'js', 'scss']:
            description, url, version = open(fpath).readlines()[0:3]
            yield (fname, description, version, url)


def pack(args):
    " Pack files. "
    from zetalibrary.packer import Packer

    args = parse_config(args)
    for path in gen_files(args.source, prefix=args.prefix):
        Packer(path, args).pack()


def parse_config(args):
    parser = ConfigParser()
    parser.add_section('Zeta')
    parser.read([CURRENT_CONFIG, HOME_CONFIG, args.setup_file or ''])
    for k, v in parser._sections['Zeta'].iteritems():
        if getattr(args, k, None) is None:
            setattr(args, k, v)
    return args


class ZetaTrick(Trick):
    " Zeta directory event handler "

    def __init__(self, args=None):
        self.args = args
        self.formats = ['css', 'js', 'scss', args.format]
        super(ZetaTrick, self).__init__()

    def dispatch(self, event):
        name = op.basename(event.src_path)
        _, ext = op.splitext(name)
        if (not name.startswith(self.args.prefix)
                and not event.is_directory
                and ext.lstrip('.').lower() in self.formats):
            super(ZetaTrick, self).dispatch(event)

    def on_any_event(self, event):
        print "\nChanges found: %s" % event.src_path
        pack(self.args)


class ZetaError(Exception):
    " Zeta-library error "
    pass

########NEW FILE########
