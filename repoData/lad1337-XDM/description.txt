![XDM](http://xdm.lad1337.de/wp-content/uploads/2013/05/xdm-logo.h100.png "XDM")

XDM: eXtendable Download Manager. Plugin based media collection manager.

XDM is in BETA
Current official site [http://xdm.lad1337.de](http://xdm.lad1337.de)<br/>
Official main plugin repository at [https://github.com/lad1337/XDM-main-plugin-repo/](https://github.com/lad1337/XDM-main-plugin-repo/)

[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/lad1337/xdm/trend.png)](https://bitdeli.com/free "Bitdeli Badge")
[![Gitter chat](https://badges.gitter.im/lad1337/XDM.png)](https://gitter.im/lad1337/XDM)


[![tip for next commit](http://tip4commit.com/projects/534.svg)](http://tip4commit.com/projects/534)
[![Gittip](http://img.shields.io/gittip/lad1337.png)](https://www.gittip.com/lad1337/)


## Requirements

- python 2.7.x

optional but recomended when running on source

- git 1.8.x 

## Known support for Mediatypes

- Movies: Movies and find and Postprocess
- Music: Albums and find and Postprocess (only for Mac OSX adding to iTunes)
- Games: PC, Xbox360, PS3 and Wii Games and find and Postprocess
- Books: Books
- TV: TV shows
- Anime: Animes

For more info on available first party plugins see the main repository at [https://github.com/lad1337/XDM-main-plugin-repo/](https://github.com/lad1337/XDM-main-plugin-repo/).

Note: At some point in the future all MediaTypeManagers and corresponding plugins will be moved into the repository and out of the core.

### Documentation
is available online at [https://xdm.readthedocs.org](https://xdm.readthedocs.org)<br>
or in the source and can be build using [sphinx](http://sphinx-doc.org/)

Libraries in use
----------------

### Backend

- [CherryPy](http://www.cherrypy.org/): A Minimalist Python Web Framework
- [Requests](http://docs.python-requests.org/en/latest/): HTTP for Humans
- [pyDes](http://twhiteman.netfirms.com/des.html): This is a pure python implementation of the DES encryption algorithm.
- [profilehooks](http://mg.pov.lt/blog/profilehooks-1.0.html): Profiling/tracing wrapper
- [peewee](http://peewee.readthedocs.org/en/latest/): a small, expressive orm
- [Jinja2](http://jinja.pocoo.org/docs/): Jinja2 is a full featured template engine for Python.
- [pylint](http://www.logilab.org/project/pylint): analyzes Python source code looking for bugs and signs of poor quality
- [astng](https://pypi.python.org/pypi/logilab-astng): common base representation of python source code for projects such as pychecker, pyreverse, pylint
- [guessit](https://pypi.python.org/pypi/guessit): a library for guessing information from video files.
- [JSONRPClib](https://github.com/joshmarshall/jsonrpclib): A Python JSON-RPC over HTTP that mirrors xmlrpclib syntax.
- [pbs](https://pypi.python.org/pypi/pbs): Python subprocess wrapper (fallback for windows, see sh).
- [sh](http://amoffat.github.io/sh/): sh (previously pbs) is a full-fledged subprocess interface for Python that allows you to call any program as if it were a function.

### Frontend

- [Bootstrap](http://twitter.github.io/bootstrap/index.html): Sleek, intuitive, and powerful front-end framework for faster and easier web development.
- [Font Awesome](http://fortawesome.github.io/Font-Awesome/): The iconic font designed for Bootstrap.
- [jQuery](http://jquery.com/): is a fast, small, and feature-rich JavaScript library.
- [jQuery UI](http://jqueryui.com/): is a curated set of user interface interactions, effects, widgets, and themes built on top of the jQuery JavaScript Library.
- [modernizr](http://modernizr.com/): is a JavaScript library that detects HTML5 and CSS3 features in the user’s browser.
- [fancyBox](fancyapps.com): fancyBox is a tool that offers a nice and elegant way to add zooming functionality for images, html content and multi-media on your webpages.
- [Raphaël](http://raphaeljs.com/): JavaScript Vector Library
- [noty](http://needim.github.io/noty/): jquery notification plugin
- [jQuery resize event](http://benalman.com/projects/jquery-resize-plugin/): With jQuery resize event, you can now bind resize event handlers to elements other than window.
- [JQuery Countdown Timer](http://jaspreetchahal.org/a-simple-jquery-countdown-timer-with-callback/): A simple jQuery Countdown Timer with callback
- [jQuery YouTube Popup Player](http://lab.abhinayrathore.com/jquery_youtube/): A simple and light weight plugin to display YouTube videos in a jQuery dialog box.
- [pjax](ttps://github.com/defunkt/jquery-pjax): pushState + ajax = pjax http://pjax.heroku.com
- [TouchSwipe](https://github.com/mattbryson/TouchSwipe-Jquery-Plugin): A jquery plugin to be used on touch devices such as iPad, iPhone, android etc

(Plugins may use more libraries)

Screenshots
-----------

[More screenshots](http://xdm.lad1337.de)


Movie plugin with some movies
![Movie plugin](http://xdm.lad1337.de/img/webshot-1.jpg "Movie plugin")

Music plugin with some albums
![Music plugin](http://xdm.lad1337.de/img/webshot-2.jpg "Music plugin")

Games
![Games plugin](http://xdm.lad1337.de/img/webshot-3.jpg "Games plugin")

Books
![Books plugin](http://xdm.lad1337.de/img/webshot-4.jpg "Books plugin")

Plugin and reposetory managment
![Plugins](http://xdm.lad1337.de/img/webshot-6.jpg "Plugin and reposetory managment")


Usage
-----
<pre>
usage: XDM [-h] [-d] [-v] [-D] [-p PIDFILE] [-P PORT] [-n] [-b DATADIR]
           [--config_db CONFIG_DB] [--data_db DATA_DB]
           [--history_db HISTORY_DB] [--dev] [--noApi] [--apiPort APIPORT]
           [--noWebServer] [--pluginImportDebug]
           [--profile [PROFILE [PROFILE ...]]]

optional arguments:
  -h, --help            show this help message and exit
  -d, --daemonize       Run the server as a daemon.
  -v, --version         Print Version and exit.
  -D, --debug           Print debug log to screen.
  -p PIDFILE, --pidfile PIDFILE
                        Store the process id in the given file.
  -P PORT, --port PORT  Force webinterface to listen on this port.
  -n, --nolaunch        Don't start the browser.
  -b DATADIR, --datadir DATADIR
                        Set the directory for created data.
  --config_db CONFIG_DB
                        Path to config database
  --data_db DATA_DB     Path to data database
  --history_db HISTORY_DB
                        Path to history database
  --dev                 Developer mode. Disables the censoring during log and
                        the plugin manager follows symlinks
  --noApi               Disable the api
  --apiPort APIPORT     Port the api runs on
  --noWebServer         Don't start the webserver
  --pluginImportDebug   Extra verbosy debug during plugin import is printed.
  --profile [PROFILE [PROFILE ...]]
                        Wrap a decorated(!) function in a profiler. By default
                        all decorated functions are profiled. Decorate your
                        function with @profileMeMaybe
</pre>


i18n
----

You will need an instlled version of babel

    Build message catalog       $ pybabel extract -F babel.cfg -o ./i18n/messages.pot .
    Create language po          $ pybabel init -i ./i18n/messages.pot -d i18n -l ``language name``
    Update language po          $ pybabel update -i ./i18n/messages.pot -d i18n
    Compile mo files            $ pybabel compile -d i18n -f


License
=======
XDM: Xtentable Download Manager. Plugin based media collection manager.<br>
Copyright (C) 2013  Dennis Lutter

This program is free software: you can redistribute it and/or modify<br>
it under the terms of the GNU General Public License as published by<br>
the Free Software Foundation, either version 3 of the License, or<br>
(at your option) any later version.

This program is distributed in the hope that it will be useful,<br>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the<br>
GNU General Public License for more details.<br>

You should have received a copy of the GNU General Public License<br>
along with this program.  If not, see http://www.gnu.org/licenses/.



CherryPy Tutorials
------------------------------------------------------------------------

This is a series of tutorials explaining how to develop dynamic web
applications using CherryPy. A couple of notes:

  - Each of these tutorials builds on the ones before it. If you're
    new to CherryPy, we recommend you start with 01_helloworld.py and
    work your way upwards. :)

  - In most of these tutorials, you will notice that all output is done
    by returning normal Python strings, often using simple Python
    variable substitution. In most real-world applications, you will
    probably want to use a separate template package (like Cheetah,
    CherryTemplate or XML/XSL).


ASTNG
=====

What's this ?
-------------

The aim of this module is to provide a common base representation of
python source code for projects such as pychecker, pyreverse,
pylint... Well, actually the development of this library is essentially
governed by pylint's needs.

It provides a compatible representation which comes from the `_ast` module.
It rebuilds the tree generated by the builtin _ast module by recursively
walking down the AST and building an extended ast (let's call it astng ;). The
new node classes have additional methods and attributes for different usages.
They include some support for static inference and local name scopes.
Furthermore, astng builds partial trees by inspecting living objects.

Main modules are:

* `bases`, `node_classses` and `scoped_nodes` contain the classes for the
  different type of nodes of the tree.

* the `manager` contains a high level object to get astng trees from
  source files and living objects. It maintains a cache of previously
  constructed tree for quick access


Installation
------------

Extract the tarball, jump into the created directory and run ::

	python setup.py install

For installation options, see ::

	python setup.py install --help


If you have any questions, please mail the
python-project@lists.logilab.org mailing list for support. See
http://lists.logilab.org/mailman/listinfo/python-projects for
subscription information and archives.

Test
----

Tests are in the 'test' subdirectory. To launch the whole tests suite
at once, you may use the 'pytest' utility from logilab-common (simply
type 'pytest' from within this directory) or if you're running python
>= 2.7, using discover, for instance::

  python -m unittest discover -p "unittest*.py"

Python3
=======

Approach
--------

We maintain a Python 2 base and use 2to3 to generate Python 3 code.

2to3 is integrated into the distutils installation process and will be run as a
build step when invoked by the python3 interpreter::

  python3 setup.py install --no-compile


Debian
------

For the Debian packaging, you can use the debian.py3k/ content against
the debian/ folder::

  cp debian.py3k/* debian/


Resources
---------
http://wiki.python.org/moin/PortingPythonToPy3k

Logilab's common library
========================

What's this ?
-------------

This package contains some modules used by differents Logilab's projects.

It is released under the GNU Lesser General Public License.

There is no documentation available yet but the source code should be clean and
well documented.

Designed to ease:

* handling command line options and configuration files
* writing interactive command line tools
* manipulation of files and character strings
* manipulation of common structures such as graph, tree, and pattern such as visitor
* generating text and HTML reports
* accessing some external libraries such as OmniORB_, Pyro_...
* more...


Installation
------------

Extract the tarball, jump into the created directory and run ::

	python setup.py install

For installation options, see ::

	python setup.py install --help


Provided modules
----------------

Here is a brief description of the available modules.

Modules providing high-level features
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* `cache`, a cache implementation with a least recently used algorithm.

* `changelog`, a tiny library to manipulate our simplified ChangeLog file format.

* `clcommands`, high-level classes to define command line programs handling
  different subcommands. It is based on `configuration` to get easy command line
  / configuration file handling.

* `cli`, a base class for interactive programs using the command line.

* `configuration`, some classes to handle unified configuration from both
  command line (using optparse) and configuration file (using ConfigParser).

* `dbf`, read Visual Fox Pro DBF files.

* `proc`, interface to Linux /proc.

* `umessage`, unicode email support.

* `ureports`, micro-reports, a way to create simple reports using python objects
  without care of the final formatting. ReST and html formatters are provided.


Modules providing low-level functions and structures
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* `compat`, provides a transparent compatibility layer between different python
  versions.

* `date`, a set of date manipulation functions.

* `daemon`, a daemon function and mix-in class to properly start an Unix daemon
  process.

* `decorators`, function decorators such as cached, timed...

* `deprecation`, decorator, metaclass & all to mark functions / classes as
  deprecated or moved

* `fileutils`, some file / file path manipulation utilities.

* `graph`, graph manipulations functions such as cycle detection, bases for dot
  file generation.

* `modutils`, python module manipulation functions.

* `shellutils`, some powerful shell like functions to replace shell scripts with
  python scripts.

* `tasksqueue`, a prioritized tasks queue implementation.

* `textutils`, some text manipulation functions (ansi colorization, line wrapping,
  rest support...).

* `tree`, base class to represent tree structure, and some others to make it
  works with the visitor implementation (see below).

* `visitor`, a generic visitor pattern implementation.


Modules extending some standard modules
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* `debugger`,  `pdb` customization.

* `logging_ext`, extensions to `logging` module such as a colorized formatter
  and an easier initialization function.

* `optik_ext`, defines some new option types (regexp, csv, color, date, etc.)
  for `optik` / `optparse`

* `xmlrpcutils`, auth support for XML-RPC


Modules extending some external modules
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* `corbautils`, useful functions for use with the OmniORB_ CORBA library.

* `hg`, some Mercurial_ utility functions.

* `pdf_ext`, pdf and fdf file manipulations, with pdftk.

* `pyro_ext`, some Pyro_ utility functions.

* `sphinx_ext`, Sphinx_ plugin defining a `autodocstring` directive.

* `vcgutils` , utilities functions to generate file readable with Georg Sander's
  vcg tool (Visualization of Compiler Graphs).


To be deprecated modules
~~~~~~~~~~~~~~~~~~~~~~~~

Those `logilab.common` modules will much probably be deprecated in future
versions:

* `testlib`: use `unittest2`_ instead
* `pytest`: use `discover`_ instead
* `interface`: use `zope.interface`_ if you really want this
* `table`, `xmlutils`: is that used?
* `sphinxutils`: we won't go that way imo (i == syt)


Deprecated modules
~~~~~~~~~~~~~~~~~~

Those `logilab.common` modules are only there for backward compatibility. They
can go away at anytime.

* `optparser`: use `clcommands` instead

* `adbh`, `db`, `sqlgen`: see `logilab.database`_ instead

* `contexts`: content move to `shellutils`

* `html`: deprecated without replacement


Comments, support, bug reports
------------------------------

Project page http://www.logilab.org/project/logilab-common

Use the python-projects@lists.logilab.org mailing list. Since we do not have
publicly available bug tracker yet, bug reports should be emailed
there too.

You can subscribe to this mailing list at
http://lists.logilab.org/mailman/listinfo/python-projects

Archives are available at
http://lists.logilab.org/pipermail/python-projects/


.. _Pyro: http://pyro.sourceforge.net/
.. _OmniORB: http://omniorb.sourceforge.net/
.. _Mercurial: http://mercurial.selenic.com
.. _Sphinx: http://sphinx.pocoo.org/
.. _`logilab.database`: http://www.logilab.org/project/logilab-database/
.. _`unittest2`: http://pypi.python.org/pypi/unittest2
.. _`discover`: http://pypi.python.org/pypi/discover
.. _`zope.interface`: http://pypi.python.org/pypi/zope.interface

Python3
=======

Approach
--------

We maintain a Python 2 base and use 2to3 to generate Python 3 code.

2to3 is integrated into the distutils installation process and will be run as a
build step when invoked by the python3 interpreter::

  python3 setup.py install

Tests
-----

Set your PYTHONPATH and run pytest3 against the test directory.

Debian
------

For the Debian packaging of python3-logilab-common, you can use the debian.sid/
content against the debian/ folder::

  cp debian.sid/* debian/

Resources
---------
http://wiki.python.org/moin/PortingPythonToPy3k

thank you

thank you

thank you

thank you

thank you

README for Pylint (http://www.pylint.org)
=========================================

Pylint is a Python source code analyzer which looks for programming errors,
helps enforcing a coding standard and sniffs for some code smells (as defined in
Martin Fowler's Refactoring book).

Pylint has many rules enabled by default, way too much to silent them all on a
minimally sized program. It's highly configurable and handle pragmas to control
it from within your code. Additionally, it is possible to write plugins to add
your own checks.

It's a free software distributed under the GNU Public Licence.

Development is hosted on bitbucket: https://bitbucket.org/logilab/pylint/ .

You can use the python-projects@logilab.org mailing list to discuss about
Pylint. Subscribe at http://lists.logilab.org/mailman/listinfo/python-projects
or read the archives at http://lists.logilab.org/pipermail/python-projects/


Install
-------

Pylint requires the astng (the later the better) and logilab-common (version >=
0.53) packages.

*  https://bitbucket.org/logilab/astng
* http://www.logilab.org/projects/common

From the source distribution, extract the tarball and run ::

    python setup.py install

You'll have to install dependencies in a similar way. For debian and
rpm packages, use your usual tools according to your Linux distribution.

More information about installation and available distribution format
may be found in the user manual in the *doc* subdirectory.


Documentation
-------------

Look in the doc/ subdirectory or at http://docs.pylint.org

Pylint is shipped with following additional commands:

* pyreverse: an UML diagram generator
* symilar: an independent similarities checker
* epylint: Emacs and Flymake compatible Pylint
* pylint-gui: a graphical interface


Contributors
------------

order doesn't matter...

* Sylvain Thenault: main author / maintainer
* Alexandre Fayolle: TkInter gui, documentation, debian support
* Emile Anclin: used to maintain, py3k support
* Mads Kiilerich: various patches
* Torsten Marek, various patches
* Boris Feld, various patches
* Brian van den Broek: windows installation documentation
* Amaury Forgeot d'Arc: patch to check names imported from a module
  exists in the module
* Benjamin Niemann: patch to allow block level enabling/disabling of messages
* Nathaniel Manista: suspicious lambda checking
* Wolfgang Grafen, Axel Muller, Fabio Zadrozny, Pierre Rouleau,
  Maarten ter Huurne, Mirko Friedenhagen (among others):
  bug reports, feedback, feature requests...
* Martin Pool (Google): warnings for anomalous backslashes, symbolic names
  for messages (like 'unused')
* All the Logilab's team: daily use, bug reports, feature requests
* Other people have contributed by their feedback, if I've forgotten
  you, send me a note !

Python3
=======

Compatibility
-------------

Please, consider python3 >= 3.2 only.


Approach
--------

We maintain a Python 2 base and use 2to3 to generate Python 3 code.

2to3 is integrated into the distutils installation process and will be run as a
build step when invoked by the python3 interpreter::

  NO_SETUPTOOLS=1 python3 setup.py install --no-compile

In order to run pylint locally, you have to install the dependencies::

  easy_install-3.2 logilab-common
  easy_install-3.2 logilab-astng


Debian
------

For the Debian packaging, you can use the debian.py3k/ content against
the debian/ folder::

  cp debian.py3k/* debian/


Resources
---------
http://wiki.python.org/moin/PortingPythonToPy3k

