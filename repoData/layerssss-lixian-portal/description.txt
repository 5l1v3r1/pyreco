# Contributing to Bootstrap

Looking to contribute something to Bootstrap? **Here's how you can help.**



## Reporting issues

We only accept issues that are bug reports or feature requests. Bugs must be isolated and reproducible problems that we can fix within the Bootstrap core. Please read the following guidelines before opening any issue.

1. **Search for existing issues.** We get a lot of duplicate issues, and you'd help us out a lot by first checking if someone else has reported the same issue. Moreover, the issue may have already been resolved with a fix available.
2. **Create an isolated and reproducible test case.** Be sure the problem exists in Bootstrap's code with a [reduced test case](http://css-tricks.com/reduced-test-cases/) that should be included in each bug report.
3. **Include a live example.** Make use of jsFiddle or jsBin to share your isolated test cases.
4. **Share as much information as possible.** Include operating system and version, browser and version, version of Bootstrap, customized or vanilla build, etc. where appropriate. Also include steps to reproduce the bug.



## Key branches

- `master` is the latest, deployed version.
- `gh-pages` is the hosted docs (not to be used for pull requests).
- `*-wip` is the official work in progress branch for the next release.



## Pull requests

- Try to submit pull requests against the latest `*-wip` branch for easier merging
- CSS changes must be done in .less files first, never just the compiled files
- If modifying the .less files, always recompile and commit the compiled files bootstrap.css and bootstrap.min.css
- Try not to pollute your pull request with unintended changes--keep them simple and small
- Try to share which browsers your code has been tested in before submitting a pull request



## Coding standards

### HTML

- Two spaces for indentation, never tabs
- Double quotes only, never single quotes
- Always use proper indentation
- Use tags and elements appropriate for an HTML5 doctype (e.g., self-closing tags)

### CSS

- Adhere to the [Recess CSS property order](http://markdotto.com/2011/11/29/css-property-order/)
- Multiple-line approach (one property and value per line)
- Always a space after a property's colon (.e.g, `display: block;` and not `display:block;`)
- End all lines with a semi-colon
- For multiple, comma-separated selectors, place each selector on its own line
- Attribute selectors, like `input[type="text"]` should always wrap the attribute's value in double quotes, for consistency and safety (see this [blog post on unquoted attribute values](http://mathiasbynens.be/notes/unquoted-attribute-values) that can lead to XSS attacks).

### JS

- No semicolons
- Comma first
- 2 spaces (no tabs)
- strict mode
- "Attractive"



## License

By contributing your code, you agree to license your contribution under the terms of the APLv2: https://github.com/twbs/bootstrap/blob/master/LICENSE

# [Bootstrap v3.0.0](http://getbootstrap.com) [![Build Status](https://secure.travis-ci.org/twbs/bootstrap.png)](http://travis-ci.org/twbs/bootstrap)

Bootstrap is a sleek, intuitive, and powerful front-end framework for faster and easier web development, created and maintained by [Mark Otto](http://twitter.com/mdo) and [Jacob Thornton](http://twitter.com/fat).

To get started, check out [http://getbootstrap.com](http://getbootstrap.com)!



## Quick start

Three quick start options are available:

* [Download the latest release](https://github.com/twbs/bootstrap/zipball/3.0.0-wip).
* Clone the repo: `git clone git://github.com/twbs/bootstrap.git`.
* Install with [Bower](http://bower.io): `bower install bootstrap`.

Read the [Getting Started page](http://getbootstrap.com/getting-started/) for information on the framework contents, templates and examples, and more.



## Bugs and feature requests

Have a bug or a feature request? [Please open a new issue](https://github.com/twbs/bootstrap/issues). Before opening any issue, please search for existing issues and read the [Issue Guidelines](https://github.com/necolas/issue-guidelines), written by [Nicolas Gallagher](https://github.com/necolas/).

You may use [this JS Bin](http://jsbin.com/aKiCIDO/1/edit) as a template for your bug reports.



## Documentation

Bootstrap's documentation, included in this repo in the root directory, is built with [Jekyll](http://jekyllrb.com) and publicly hosted on GitHub Pages at [http://getbootstrap.com](http://getbootstrap.com). The docs may also be run locally.

### Running documentation locally

1. If necessary, [install Jekyll](http://jekyllrb.com/docs/installation) (requires v1.x).
2. From the root `/bootstrap` directory, run `jekyll serve` in the command line.
  - **Windows users:** run `chcp 65001` first to change the command prompt's character encoding ([code page](http://en.wikipedia.org/wiki/Windows_code_page)) to UTF-8 so Jekyll runs without errors.
3. Open [http://localhost:9001](http://localhost:9001) in your browser, and voil√†.

Learn more about using Jekyll by reading their [documentation](http://jekyllrb.com/docs/home/).

### Documentation for previous releases

Documentation for v2.3.2 has been made available for the time being at [http://getbootstrap.com/2.3.2/](http://getbootstrap.com/2.3.2/) while folks transition to Bootstrap 3.

[Previous releases](https://github.com/twbs/bootstrap/releases) and their documentation are also available for download.



## Compiling CSS and JavaScript

Bootstrap uses [Grunt](http://gruntjs.com/) with convenient methods for working with the framework. It's how we compile our code, run tests, and more. To use it, install the required dependencies as directed and then run some Grunt commands.

### Install Grunt

From the command line:

1. Install `grunt-cli` globally with `npm install -g grunt-cli`.
2. Install the [necessary local dependencies](package.json) via `npm install`

When completed, you'll be able to run the various Grunt commands provided from the command line.

**Unfamiliar with `npm`? Don't have node installed?** That's a-okay. npm stands for [node packaged modules](http://npmjs.org/) and is a way to manage development dependencies through node.js. [Download and install node.js](http://nodejs.org/download/) before proceeding.

### Available Grunt commands

#### Build - `grunt`
Run `grunt` to run tests locally and compile the CSS and JavaScript into `/dist`. **Requires [recess](https://github.com/twitter/recess) and [uglify-js](https://github.com/mishoo/UglifyJS).**

#### Only compile CSS and JavaScript - `grunt dist`
`grunt dist` creates the `/dist` directory with compiled files. **Requires [recess](https://github.com/twitter/recess) and [uglify-js](https://github.com/mishoo/UglifyJS).**

#### Tests - `grunt test`
Runs jshint and qunit tests headlessly in [phantomjs](https://github.com/ariya/phantomjs/) (used for CI). **Requires [phantomjs](https://github.com/ariya/phantomjs/).**

#### Watch - `grunt watch`
This is a convenience method for watching just Less files and automatically building them whenever you save.

### Troubleshooting dependencies

Should you encounter problems with installing dependencies or running Grunt commands, uninstall all previous dependency versions (global and local). Then, rerun `npm install`.



## Contributing

Please read through our guidelines for contributing to Bootstrap. Included are directions for opening issues, coding standards, and notes on development.

More over, if your pull request contains JavaScript patches or features, you must include relevant unit tests. All HTML and CSS should conform to the [Code Guide](http://github.com/mdo/code-guide), maintained by [Mark Otto](http://github.com/mdo).

Editor preferences are available in the [editor config](.editorconfig) for easy use in common text editors. Read more and download plugins at [http://editorconfig.org](http://editorconfig.org).



## Community

Keep track of development and community news.

* Follow [@twbootstrap on Twitter](http://twitter.com/twbootstrap).
* Read and subscribe to the [The Official Bootstrap Blog](http://blog.getbootstrap.com).
* Have a question that's not a feature request or bug report? [Ask on the mailing list.](http://groups.google.com/group/twitter-bootstrap)
* Chat with fellow Bootstrappers in IRC. On the `irc.freenode.net` server, in the `##twitter-bootstrap` channel.




## Versioning

For transparency and insight into our release cycle, and for striving to maintain backward compatibility, Bootstrap will be maintained under the Semantic Versioning guidelines as much as possible.

Releases will be numbered with the following format:

`<major>.<minor>.<patch>`

And constructed with the following guidelines:

* Breaking backward compatibility bumps the major (and resets the minor and patch)
* New additions without breaking backward compatibility bumps the minor (and resets the patch)
* Bug fixes and misc changes bumps the patch

For more information on SemVer, please visit [http://semver.org/](http://semver.org/).



## Authors

**Mark Otto**

+ [http://twitter.com/mdo](http://twitter.com/mdo)
+ [http://github.com/mdo](http://github.com/mdo)

**Jacob Thornton**

+ [http://twitter.com/fat](http://twitter.com/fat)
+ [http://github.com/fat](http://github.com/fat)



## Copyright and license

Copyright 2012 Twitter, Inc under [the Apache 2.0 license](LICENSE).

## 2.3.2 re-release (July 26, 2013)

Patch to update jQuery in Bower and bump Recess to 1.1.9.

## 2.3.2 (May 17, 2013)

Fix dropdown for firefox (middleclick) and mobile.

## 2.3.1 (February 28, 2013)

Patch release for @fat's n00bery

- fix missing event type in dropdown
- fix delegated data-attrs for popover/tooltip
- make carousel actually pause when you click cycle
- fix jshint ref in makefile
- fix trying to remove backdrop when no backdrop

## 2.3.0 (February 7, 2013)

Minor release to add carousel indicators, improve tooltips, improve dev setup, and fix hella bugs.

- **Repository changes:**
  - **Local instead of global dependencies** for our makefile and install process. Now getting started is way easier‚Äîjust run `npm install`.
  - Upgraded to jQuery 1.9. No changes were needed, but we did upgrade the included jQuery file to the latest release.
  - Moved changelog to be within the repo instead of as a wiki page.
- **New and improved features:**
  - **Added carousel indicators!** Add the HTML and it automagically works.
  - **Added `container` option to tooltips.** The default option is still `insertAfter`, but now you may specify where to insert tooltips (and by extension, popovers) with the optional container parameter.
  - Improved popovers now utilize `max-width` instead of `width`, have been widened from 240px to 280px, and will automatically hide the title if one has not been set via CSS `:empty` selector.
  - Improved tooltip alignment on edges with [#6713](https://github.com/twbs/bootstrap/pull/6713).
  - **Improved accessibility for links in all components.** After merging [#6441](https://github.com/twbs/bootstrap/pull/6441), link hover states now apply to the `:focus` state as well. This goes for basic `<a>` tags, as well as buttons, navs, dropdowns, and more.
  - Added print utility classes to show and hide content between `screen` and `print` via CSS.
  - Updated input groups to make them behave more like default form controls. Added `display: inline-block;`, increased `margin-bottom`, and added `vertical-align: middle;`  to match `<input>` styles.
  - Added `.horizontal-three-colors()` gradient mixin (with example in the CSS tests file).
  - Added `.text-left`, `.text-center`, and `.text-right` utility classes for easy typographic alignment.
  - Added `@ms-viewport` so IE10 can use responsive CSS when in split-screen mode.
- **Docs changes:**
  - Added [new justified navigation example](https://f.cloud.github.com/assets/98681/25869/5e2f812c-4afa-11e2-9293-501cd689232d.png).
  - Added sticky footer with fixed navbar example.

See more on the [2.3.0 pull request](https://github.com/twbs/bootstrap/pull/6346).


## 2.2.2 (December 8, 2012)

Bugfix release addressing docs, CSS, and some JavaScript issues. Key changes include:

- **Docs:**
  - Assets (illustrations and examples) are now retina-ready.
  - Replaced [Placehold.it](http://placehold.it) with [Holder.js](http://imsky.github.com/holder/), a client-side and retina-ready placeholder image tool.
- **Dropdowns:** Temporary fix added for dropdowns on mobile to prevent them from closing early.
- **Popovers:**
  - No longer inherits `font-size: 0;` when placed in button groups.
  - Arrows refactored to work in IE8, and use less code.
  - Plugin no longer inserts popover content into a `<p>`, but rather directly into `.popover-content`.
- **Labels and badges:** Now [automatically collapse](https://github.com/twbs/bootstrap/commit/ead5dbeba5cd7acfa560bfb353f5e7c4f4a19256) if they have no content.
- **Tables:** Nesting support with `.table-bordered` and `.table-striped` greatly improved.
- **Typeahead:**
  - Now [inserts dropdown menu after the input](https://github.com/twbs/bootstrap/commit/1747caf19d59cad7fdc90ae56a00e0e2849f95f4) instead of at the close of the document.
  - Hitting escape will place focus back on the `<input>`.
- Print styles, from HTML5 Boilerplate, have been added.

See more on the [2.2.2 milestone](https://github.com/twbs/bootstrap/issues?milestone=17&state=closed).


## 2.2.1 (October 30, 2012)

Hotfix release to address the carousel bug reports.


## 2.2.0 (October 29, 2012)

### tl;dr

2.1.2 is now 2.2.0: four new example templates, added media component, new typographic scale, fixed that box-shadow mixin bug, fixed z-index issues, and [more](https://github.com/twbs/bootstrap/issues?milestone=15&page=1&state=closed).

### Highlights

- **Added four new example templates** to the docs, including a narrow marketing page, sign in form, sticky footer, and a fancy carousel (created for an upcoming .net magazine article).
- **Added the media component**, to create larger common components like comments, Tweets, etc.
- **New variable-driven typographic scale** based on `@baseFontSize` and `@baseLineHeight`.
- Revamped mini, small, and large padding via new variables for inputs and buttons so everything is the same size.
- Reverted 2.1.1's `.box-shadow();` mixin change that caused compiler errors.
- Improved dropdown submenus to support dropups and left-aligned submenus.
- Fixed z-index issues with tooltips and popovers in modals.
- Hero unit now sets basic type styles for the entire component, rather than on `.hero-unit p { ... }`.
- Updated JavaScript plugins and docs to jQuery 1.8.1.
- Added Contributing.md file.
- Added support for installing Bootstrap via [Bower](http://twitter.github.com/bower).
- Miscellaneous variable improvements across the board.
- Miscellaneous documentation typos fixed.

For the full list of issues included in this release, visit the [2.2.0 milestone on GitHub](https://github.com/twbs/bootstrap/issues?milestone=15&page=1&state=closed)



## 2.1.1 (September 4, 2012)

* New feature: alert text. We documented these new classes, like `.text-success`, at the bottom of the [Typography section](http://twbs.github.com/bootstrap/base-css.html#typography) along with the long undocumented `.muted`.
* Fixed a lot of typos in the docs. Spelling is hard.
* Made the `.box-shadow()` mixin more durable. It no longer requires escaping for multiple shadows, meaning you can easily use variables and functions in them once again.
* Widened `.dl-horizontal dt` and `.horizontal-form .control-group` to better handle the increased font-size.
* Dropdown submenus improved: now you only see the next level, not all levels, on hover of the submenu toggle.
* Clarified jQuery and Bootstrap template requirements in Getting Started section.
* `select` now utilizes `@inputBorder`.
* `.lead` now scales up from `@baseFontSize` instead of being a fixed font-size and line-height.
* Fixed the vertical three color gradient in latest Firefox.
* Reordered some variables that caused errors in certain Less compilers.

View all closed issues on the [2.1.1 milestone](https://github.com/twbs/bootstrap/issues?milestone=14&state=closed).


## 2.1.0 (August 20, 2012)

### Key changes

* Submenu support on dropdowns
* Affix JavaScript plugin
* Block level buttons
* State classes on table rows
* Improved disabled states on navs and dropdowns
* The navbar component is now white by default, with an optional class to darken it
* Improved prepended and appended inputs
* New base font-size and line-height
* Added variable for navbar collapse trigger point
* Fluid grid offsets
* Fluid grid system variables are no longer fixed percentages
* Removed LESS docs page

For full set of changes, see the completed milestone: https://github.com/twbs/bootstrap/issues?milestone=7&page=1&state=closed

## 2.0.4 (June 1, 2012)


### Docs

- Added `type="button"` to all dismiss buttons in alerts and modals  to avoid a bug in which they prevent their parent's `form` from properly submitting.
- Added simple documentation to Base CSS for `.lead`.
- Added new CSS test to illustrate how the navbar, static and fixed, behaves.
- Clarified grid sizing copy to include mention of responsive variations.
- Reformatted the LESS docs page to prevent terrible table displays at smaller grid sizes.
- Miscellaneous typos and tweaks.

### CSS

- Refactored forms.less to make our selectors more specific for fewer overrides and less code. Instead of a generic `input` selector and various resets, we target each type of input like `input[type="text"]`, `input[type="password"]`, etc.
- Form field state (e.g., success or error) now applies to checkbox and radio labels.
- Removed redundant CSS on `<p>` for `font-family`, `font-size`, and `line-height`.
- Removed redundant `color` declaration from the `<label>` element.
- Added variables for dropdown dividers border colors.
- `legend` and `.form-actions` share the same `border-color`, `#e5e5e5`.
- Fixed some responsive issues with input-prepend and -append, notably with the fluid grid.
- Added special CSS to prevent `max-width: 100%;` on images from messing up Google Maps rendering.
- Scope opened dropdowns to only immediate children to avoid unintended cascade.
- Similarly, scope floated-right dropdowns to immediate children with `.pull-right > .dropdown-menu`.
- Updated `.placeholder()` mixin to use `&` operator in Less for proper output when compiling.
- Added `-ms-input-placeholder` to `.placeholder()` mixin.
- Added CSS3 hyphens mixin.
- Fixed a bug in IE7/8 where certain form controls would not show text if the parent had a filter opacity set.


## 2.0.3 (April 24, 2012)

Running makefile now require JSHint and Recess.

### HTML and CSS

- Overhauled the responsive utility classes to simplify required CSS, add `!important` to all declarations, and use `display: inherit` in place of `display: block` to account for different types of elements.
- Removed `>` from fluid grid column selectors, meaning every element with a `.span*` class within a `.row-fluid` will use percentage widths instead of fixed-pixels.
- Fixed regression in responsive images support as of 2.0.1. We've re-added `max-width: 100%;` to images by default. We removed it in our last release since we had folks complaining about Google Maps integration and other projects, but we're taking a different stance now on these things and will require developers to make these tweaks on their end.
- Added variable `@navbarBrandColor` for the brand element in navbars, which defaults to `@navbarLinkColor`.
- Font-family mixins now use variables for their stacks.
- Fixed an unescaped `filter` on the `.reset-filter()` mixin that was causing some errors depending on your compiler.
- Fixed regression in `.form-actions` background, which was too dark, by adding a new variable `@formActionsBackground` and changing the color to `#f5f5f5` instead of `#eee`.
- Fixed an issue on button group dropdowns where the background color was not using the button's darker color when the dropdown is open.
- Generalized and simplified the open dropdown classes while adding smarter defaults. Instead of `.dropdown.open`, we now use just `.open`. On the defaults side, all dropdown menus now have rounded corners to start.
- Improved active `.dropdown-toggle` styles (for dropdown buttons) by darkening the background and sharpening the inset shadow to match the active state of buttons.
- Direction of animation on progress bars reversed.
- Fixed input-prepend/append issue with uneditable inputs: `.uneditable-input` was being floated and a missing comma meant its `border-radius` for the append option wasn't being applied properly.
- Removed `height: auto;` from `img` since it was overriding dimensions set via HTML attributes.
- Fixed an issue of double borders on the top of tables with captions or colgroups.
- Fixed issue with anchor buttons in the `.navbar-text`. Instead of a general styling on all anchors within an element with that class, we now have a new class to specifically apply appropriate link color.
- Added support for `@navbarHeight` on the brand/project name and nav links for complete navbar height customization.
- Fixed the black borders on buttons problem in IE7 by removing the border, increasing the line-height, and providing darker background colors.
- Removed excess padding on `.search-query` inputs in IE7 since it doesn't have border-radius.
- Updated alert messages in Components to use `button` elements as close icons instead of `a`. Both can be used, but an `a` will require `href="#"` for dismissal on iOS devices.
- Fixed an issue with prepended/appended inputs in Firefox where `select` elements required two clicks to toggle the dropdown. Resolved by moving the `position: relative` to the `select` by default instead of on `:focus`.
- Added a new mixin, `.backface-visibility`, to help refine CSS 3D tranforms. Examples and explanation of usage can be found on [CSS Tricks](http://css-tricks.com/almanac/properties/b/backface-visibility/).
- Changed specificity of grid classes in responsive layouts under 767px to accurately target `input`, `select`, and `textarea` elements that use `.span*` classes.
- Horizontal description lists, `.dl-horizontal`, now truncate terms that are too long to fit in their fixed-width column. In the < 767px responsive layout, they change to their default stacked layout.
- Changed tabbable tabs to prevent issues in left and right aligned tabs. `.tab-content` would not growing to its parent's full width due to `display: table`. We removed that and the `width: 100%` and instead just set `overflow: auto` to clear the left and right aligned tabs.
- Updated thumbnails to support fluid grid column sizing.
- Added `>` to most of the button group selectors
- Added new variable, `@inputBorderRadius`, to all form controls that previously made use of the static `3px` value everywhere.
- Changed the way we do `border-radius` for tables. Instead of the regular mixin that zeros out all other corners, we specify one corner only so they can be combined for use on single column table headers.
- Updated Glyphicons Halflings from 1.5 to 1.6, introducing 20 new icons.
- Added an `offset` paramater to the `.makeColumn`.
- Increased the specificity of all tabbable nav selectors to include `.nav-collapse` to appropriately scope the responsive navbar behavior.
- Fixed uneditable inputs: text now cuts off and does not wrap, making it behave just like a default `input`.
- Labels and badges are now `vertical-align: baseline;` so they line up with surrounding text.

### Javascript

- Add jshint support
- Add travis-ci support w/ headless phantom integration
- Replace UA sniffing in bootstrap-transitions.js
- Add MSTransitionEnd event to transition plugin
- Fix pause method in carousel (shouldn't restart when hovering over controls)
- Fix crazy opera bug #1776
- Don't open dropdown if target element is disabled
- Always select last item in scrollspy if you've reached the bottom of the document or element
- Typeahead should escape regexp special chars
- If interval is false on carousel, do not auto-cycle
- Add preventDefault support for all initial event types (show, close, hide, etc.)
- Fix collapse bug in ie7+ for initial collapse in
- Fix nested collapse bug
- If transitioning collapse, don't start new transition
- Try to autodetect when to use html/text method in tooltip/popovers to help prevent xss
- Add bootstrap + bootstrap.min.js to gh-pages for @remy and jsbin support

### Documentation and repo

- Combined badges and labels into a single LESS file, labels-badges.less, to reduce repeated CSS.
- Separated responsive features into multiple files. We now have a file for each grouping of media queries (tablets and down, tablets to desktops, and large desktops). Additionally, the visible/hidden utility classes and the responsive navbar are in their own files. The output is the same in the compiled CSS, but this should give folks a bit more flexibility.
- Added a new CSS Tests page in the docs (not in the top nav) for better testing of edge cases and extending the use of standard components.
- Removed the bootstrap.zip file from the repo and the make process for faster building and a lighter repo. From now on, the zip will only be in the documentation branch.
- Fixed incorrect use of class instead of ID for tabs example and added documentation for multiple ways of toggling tabs.
- Fixed required markup listed for the specialized navbar search field.
- Removed all mention of `@siteWidth`, a variable no longer in use.
- Removed mentions of unused `@buttonPrimaryBackground` variable, which is no longer in use.
- Updated LESS docs page to include all the new variables we added in previous releases.
- Removed broken "dropup" menus from tabs and pills examples (shouldn't have been there in the first place).
- Replaced `.badge-error` with `.badge-important`. The error option is not a valid class and was a typo in the docs.
- Fixed mention of how to add plain text to the navbar. Previously the docs stated you only needed a `p` tag, but the required HTML is any element with class `.navbar-text`.
- Clarified the use of `.tabbable` for tabs. The wrapping class is only required for left and right tabs to clear their floats. Also added mention of `.fade` to fade in tabs.
- Updated forms documentation:
  - Remove unnecessary duplicate help text in first example
  - Added mention of required `input` class, `.search-query`, for the search form variation
  - Removed incorrect mention of form fields being `display: block;` to start as fields are `inline-block` to start.
- Added mention of `data-target` attribute for the dropdowns javascript plugin to show how to keep custom URLs intact on links with `.dropdown-toggle` class.
- Updated the Kippt screenshot on the homepage to reflect their recent responsive redesign and upgrade to 2.0.2.


## 2.0.2 (March 12, 2012)

Overview of docs changes, bugfixes, and new features.

### Documentation updates

- All docs pages now have distinct titles, such as <em>Scaffolding &middot; Twitter Bootstrap</em>.
- Updated the Apple touch icons (now black on black instead of the blue grid) and fixed the links to them in the docs.
- Added new global styles docs section to the Scaffolding page.
  - Required use of HTML5 doctype
  - Overview of global typographic and links details
  - Mention of our embedded CSS reset via [Normalize.css](http://necolas.github.com/normalize.css/)
- Added version number to the download button on the docs homepage.
- Updated progress bars section to simplify how the classes stack and more clearly indicate the available optional classes and styles.
- Added a new example, [SoundReady.fm](http://soundready.fm), to the homepage
- Added various sizes to the docs for button groups

### Resolved bugs

- Removed all IE7 hacks and floats from `.input-prepend` and `.input-append`, however, this requires you to **ensure there is no whitespace in your code** between `.add-on` and the `input`.
- In `.input-prepend` and `.input-append`, added ability to use add-ons on both sides when you chain the selectors.
- Updated lingering `.btn-dark` reference to `.btn-inverse`.
- Fixed issue with content being cut off in `.tab-content` for tabbable sections.
- Updated `.navbar .container` to use `width: auto;` to start and then reset the fixed widths via the `#gridSystem` mixin (it's a little dirty, but required to avoid adding another class).
- Modal footer buttons are now aligned by their parent via `text-align: right;` instead of `float: right` on the button level. This was changed to allow the use of `.pull-left` and `.pull-right` to align buttons easily. Double check your button order with this change!
- Fixed problem where default striped progress bar was green instead of blue.
- Fixed CSS selector used for `input` and `textarea` grid sizes to properly apply the CSS (was `input > .span*` and now is `input.span*`).

### New features

- Horizontal dividers support added to nav lists
- Added basic version of badges
- Added visible/hidden classes for devices
- Added support for buttons in input-prepend/append component
- Added .navbar-fixed-bottom support
- Added .dropup support for dropdown menus to pop them upward instead of downward (this is automatically done for the newly added fixed bottom navbar).
- Added mixin for [new image replacement technique](http://www.zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement/)
- Added pause on hover for the carousel
- Added tons of new variables for typography, buttons, forms, dropdowns, navbar, and more for the LESS pros out there. These variables have also been reflected on the Customize page.
- Added new horizontal description list variation
- Added `.disabled` class support to the pager component (also added a mention of this to the docs)
- Added `.well-large` and `.well-small` classes for extending the well component

For a full issue-by-issue rundown of the release, check out the now closed [2.0.2 milestone on GitHub](https://github.com/twbs/bootstrap/issues?sort=created&direction=desc&state=closed&page=1&milestone=9)

## v2.0.1 (February 17, 2012)

Overview of changes:

- Previously the docs called for use of `.control-label` in the examples, but the CSS didn't make clear use of it. This class is required for horizontal forms and has been reflected in the CSS.
- We've tried our best to improve rendering of buttons and icons across all browsers. Some issues remain; Firefox throws an `!important`on `line-height` for inputs, so that's the big one.
- We refined the label component style to move away from uppercase.
- Added the black button option, `.btn-inverse`.
- Added a mini button class, `.btn-mini`.
- We had to re-add the protocol, `http:` to the HTML5 schim because IE7-8 wouldn't recognize it, dropping some HTML5 support for those browsers and introducing major performance issues.
- Resolved some issues with responsive layouts where media queries would overlap at 768px and 980px.
- Rearranged Scaffolding docs page to split fixed and fluid grid systems.
- Tons of docs updates for typos and language changes.

For full list of changes, see the now closed [v2.0.1 milestone](https://github.com/twbs/bootstrap/issues?milestone=8&state=closed).

## v2.0.0 (January 28, 2012)
Complete rewrite of the library. For full details, head to the upgrading doc at http://twbs.github.com/bootstrap/upgrading.html.

## v1.4.0
### Key bug fixes and changes
- **Updated tables** to make no border the default and add options for condensed and bordered versions
- **Updated form states** to expand on error styles and provide warning and success variations
- New javascript plugin for button states
- Switched to strict mode for Javascript plugins
- Added more data attribute controls to our plugins
- Full list of 25+ issues fixed: https://github.com/twbs/bootstrap/issues?milestone=6&state=closed

## v1.3.0
### New features
- **Javascript plugins** for modals, alerts, dropdowns, scrollspy, tabs, tooltips, and popovers that work with jQuery and Ender
- **Massively updated docs** for both the main page and for the new javascript plugins
- **Inline labels** for marking inline content with key visual flags
- Media thumbnails
- Breadcrumbs

### Updated docs
- Added complete javascript page with detailed documentation for how to use plugins
- Three complete example pages of using Bootstrap, linked from main docs page with thumbnails
- Added section for compiling Less, for guidelines on how to recompile Bootstrap with Less
- Added section for customizing grid variables in Less to roll your own grid system
- Added section for code for using pre and code tags
- Added section for form field sizes that match grid column sizes

### Key bug fixes and changes
  - Updated table styles to be just a tad bit more refined
  - Added new form input sizes based on the Bootstrap grid system (meaning now you can do `input.span5` for a 280px-wide input)
  - Removed `:focus` states from `:active` links in Firefox
  - Fixed unqualified `.clearfix` in forms.less that added bottom margin to all containers
  - Updated `.container()` mixing to be `.fixed-container()` to prevent conflicts when compiling
  - Added focus states (either `box-shadow` or `outline` on `:focus`) to all buttons, links, and inputs
  - No longer require `h3` in topbar, but still support for backwards compatibility

## v1.2.0
- **Dropdowns refactored** to be extensible (now work in ul.tabs)
- **Added HTML5 form support** by generalizing the form selectors (e.g., input instead of input[type=text|password])
- **Gradients back in IE**, but removed rounded corners in IE9 to prevent background bleed on buttons and alert messages
- **Simplified the grid CSS** by removing the static .span1-16 classes in favor of CSS-style regex for column styles in the grid
- **Added .one-third and .two-thirds columns** to the grid system
- Fixed bug in disabled buttons where they received :active styles
- Bug fixes

## v1.1.1
- **Redesigned alerts** to be more readable
- **Refactored buttons and alerts CSS** to be simpler
- Updated grid system to be more specific and not require .column or columns
- Improved on specificity of CSS selectors by removing unnecessary tag and parent selectors
- Miscellaneous updates to docs
- Bug fixes

## v1.1.0
- **Added support for IE7 and IE8**
- Added examples directory with first example usage of Bootstrap for a simple website
- Syntax fixes for gradients and color-stops
- Miscellaneous updates to docs
- Bug fixes

## v1.0.0
- **Initial release**
# Contributing to Bootstrap

Looking to contribute something to Bootstrap? **Here's how you can help.**



## Reporting issues

We only accept issues that are bug reports or feature requests. Bugs must be isolated and reproducible problems that we can fix within the Bootstrap core. Please read the following guidelines before opening any issue.

1. **Search for existing issues.** We get a lot of duplicate issues, and you'd help us out a lot by first checking if someone else has reported the same issue. Moreover, the issue may have already been resolved with a fix available.
2. **Create an isolated and reproducible test case.** Be sure the problem exists in Bootstrap's code with a [reduced test case](http://css-tricks.com/reduced-test-cases/) that should be included in each bug report.
3. **Include a live example.** Make use of jsFiddle or jsBin to share your isolated test cases.
4. **Share as much information as possible.** Include operating system and version, browser and version, version of Bootstrap, customized or vanilla build, etc. where appropriate. Also include steps to reproduce the bug.



## Key branches

- `master` is the latest, deployed version.
- `gh-pages` is the hosted docs (not to be used for pull requests).
- `*-wip` is the official work in progress branch for the next release.



## Notes on the repo

As of v2.0.0, Bootstrap's documentation is powered by Mustache templates and built via `make` before each commit and release. This was done to enable internationalization (translation) in a future release by uploading our strings to the [Twitter Translation Center](http://translate.twttr.com/). Any edits to the docs should be first done in the Mustache files and then recompiled into the HTML.



## Pull requests

- Try to submit pull requests against the latest `*-wip` branch for easier merging
- Any changes to the docs must be made to the Mustache templates, not just the compiled HTML pages
- CSS changes must be done in .less files first, never just the compiled files
- If modifying the .less files, always recompile and commit the compiled files bootstrap.css and bootstrap.min.css
- Try not to pollute your pull request with unintended changes--keep them simple and small
- Try to share which browsers your code has been tested in before submitting a pull request



## Coding standards: HTML

- Two spaces for indentation, never tabs
- Double quotes only, never single quotes
- Always use proper indentation
- Use tags and elements appropriate for an HTML5 doctype (e.g., self-closing tags)



## Coding standards: CSS

- Adhere to the [Recess CSS property order](http://markdotto.com/2011/11/29/css-property-order/)
- Multiple-line approach (one property and value per line)
- Always a space after a property's colon (.e.g, `display: block;` and not `display:block;`)
- End all lines with a semi-colon
- For multiple, comma-separated selectors, place each selector on it's own line
- Attribute selectors, like `input[type="text"]` should always wrap the attribute's value in double quotes, for consistency and safety (see this [blog post on unquoted attribute values](http://mathiasbynens.be/notes/unquoted-attribute-values) that can lead to XSS attacks).



## Coding standards: JS

- No semicolons
- Comma first
- 2 spaces (no tabs)
- strict mode
- "Attractive"



## License

By contributing your code, you agree to license your contribution under the terms of the APLv2: https://github.com/twbs/bootstrap/blob/master/LICENSE

âPNG

## 2.0 BOOTSTRAP JS PHILOSOPHY
These are the high-level design rules which guide the development of Bootstrap's plugin apis.

---

### DATA-ATTRIBUTE API

We believe you should be able to use all plugins provided by Bootstrap purely through the markup API without writing a single line of javascript.

We acknowledge that this isn't always the most performant and sometimes it may be desirable to turn this functionality off altogether. Therefore, as of 2.0 we provide the ability to disable the data attribute API by unbinding all events on the body namespaced with `'data-api'`. This looks like this:

    $('body').off('.data-api')

To target a specific plugin, just include the plugins name as a namespace along with the data-api namespace like this:

    $('body').off('.alert.data-api')

---

### PROGRAMMATIC API

We also believe you should be able to use all plugins provided by Bootstrap purely through the JS API.

All public APIs should be single, chainable methods, and return the collection acted upon.

    $(".btn.danger").button("toggle").addClass("fat")

All methods should accept an optional options object, a string which targets a particular method, or null which initiates the default behavior:

    $("#myModal").modal() // initialized with defaults
    $("#myModal").modal({ keyboard: false }) // initialized with now keyboard
    $("#myModal").modal('show') // initializes and invokes show immediately afterqwe2

---

### OPTIONS

Options should be sparse and add universal value. We should pick the right defaults.

All plugins should have a default object which can be modified to effect all instance's default options. The defaults object should be available via `$.fn.plugin.defaults`.

    $.fn.modal.defaults = { ‚Ä¶ }

An options definition should take the following form:

    *noun*: *adjective* - describes or modifies a quality of an instance

examples:

    backdrop: true
    keyboard: false
    placement: 'top'

---

### EVENTS

All events should have an infinitive and past participle form. The infinitive is fired just before an action takes place, the past participle on completion of the action.

    show | shown
    hide | hidden

---

### CONSTRUCTORS

Each plugin should expose it's raw constructor on a `Constructor` property -- accessed in the following way:


    $.fn.popover.Constructor

---

### DATA ACCESSOR

Each plugin stores a copy of the invoked class on an object. This class instance can be accessed directly through jQuery's data API like this:

    $('[rel=popover]').data('popover') instanceof $.fn.popover.Constructor

---

### DATA ATTRIBUTES

Data attributes should take the following form:

- data-{{verb}}={{plugin}} - defines main interaction
- data-target || href^=# - defined on "control" element (if element controls an element other than self)
- data-{{noun}} - defines class instance options

examples:

    // control other targets
    data-toggle="modal" data-target="#foo"
    data-toggle="collapse" data-target="#foo" data-parent="#bar"

    // defined on element they control
    data-spy="scroll"

    data-dismiss="modal"
    data-dismiss="alert"

    data-toggle="dropdown"

    data-toggle="button"
    data-toggle="buttons-checkbox"
    data-toggle="buttons-radio"
# [Bootstrap v2.3.2](http://twbs.github.com/bootstrap) [![Build Status](https://secure.travis-ci.org/twbs/bootstrap.png)](http://travis-ci.org/twbs/bootstrap)

Bootstrap is a sleek, intuitive, and powerful front-end framework for faster and easier web development, created and maintained by [Mark Otto](http://twitter.com/mdo) and [Jacob Thornton](http://twitter.com/fat).

To get started, checkout [http://getbootstrap.com](http://getbootstrap.com)!



## Quick start

Three quick start options are available:

* [Download the latest release](https://github.com/twbs/bootstrap/zipball/master).
* Clone the repo: `git clone git://github.com/twbs/bootstrap.git`.
* Install with Twitter's [Bower](http://bower.io): `bower install bootstrap`.



## Versioning

For transparency and insight into our release cycle, and for striving to maintain backward compatibility, Bootstrap will be maintained under the Semantic Versioning guidelines as much as possible.

Releases will be numbered with the following format:

`<major>.<minor>.<patch>`

And constructed with the following guidelines:

* Breaking backward compatibility bumps the major (and resets the minor and patch)
* New additions without breaking backward compatibility bumps the minor (and resets the patch)
* Bug fixes and misc changes bumps the patch

For more information on SemVer, please visit [http://semver.org/](http://semver.org/).



## Bug tracker

Have a bug or a feature request? [Please open a new issue](https://github.com/twbs/bootstrap/issues). Before opening any issue, please search for existing issues and read the [Issue Guidelines](https://github.com/necolas/issue-guidelines), written by [Nicolas Gallagher](https://github.com/necolas/).



## Community

Keep track of development and community news.

* Follow [@twbootstrap on Twitter](http://twitter.com/twbootstrap).
* Read and subscribe to the [The Official Twitter Bootstrap Blog](http://blog.getbootstrap.com).
* Have a question that's not a feature request or bug report? [Ask on the mailing list.](http://groups.google.com/group/twitter-bootstrap)
* Chat with fellow Bootstrappers in IRC. On the `irc.freenode.net` server, in the `##twitter-bootstrap` channel.



## Compiling CSS and JavaScript

Bootstrap includes a [makefile](Makefile) with convenient methods for working with the framework. Before getting started, be sure to install [the necessary local dependencies](package.json):

```
$ npm install
```

When completed, you'll be able to run the various make commands provided:

#### build - `make`
Runs the recess compiler to rebuild the `/less` files and compiles the docs. Requires recess and uglify-js.

#### test - `make test`
Runs jshint and qunit tests headlessly in [phantomjs](http://code.google.com/p/phantomjs/) (used for ci). Depends on having phantomjs installed.

#### watch - `make watch`
This is a convenience method for watching just Less files and automatically building them whenever you save. Requires the Watchr gem.

Should you encounter problems with installing dependencies or running the makefile commands, be sure to first uninstall any previous versions (global and local) you may have installed, and then rerun `npm install`.



## Contributing

Please submit all pull requests against *-wip branches. If your pull request contains JavaScript patches or features, you must include relevant unit tests. All HTML and CSS should conform to the [Code Guide](http://github.com/mdo/code-guide), maintained by [Mark Otto](http://github.com/mdo).

Thanks!



## Authors

**Mark Otto**

+ [http://twitter.com/mdo](http://twitter.com/mdo)
+ [http://github.com/mdo](http://github.com/mdo)

**Jacob Thornton**

+ [http://twitter.com/fat](http://twitter.com/fat)
+ [http://github.com/fat](http://github.com/fat)



## Copyright and license

Copyright 2012 Twitter, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this work except in compliance with the License.
You may obtain a copy of the License in the LICENSE file, or at:

  [http://www.apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

jQuery Component
================

Shim repository for the [jQuery](http://jquery.com).

Package Managers
----------------

* [Bower](http://bower.io/): `jquery`
* [Component](https://github.com/component/component): `components/jquery`
* [Composer](http://packagist.org/packages/components/jquery): `components/jquery`

Bootswatch
==========

Bootswatch is a collection of free themes for [Twitter Bootstrap](http://twitter.github.com/bootstrap/). Check it out at [bootswatch.com](http://bootswatch.com).

Usage
-----
Head over to [Bootswatch](http://bootswatch.com) and download the `bootstrap.min.css` file associated with a theme. Replace Bootstrap's stylesheet with this file.

The themes are also hosted on [BootstrapCDN](http://www.bootstrapcdn.com/).

For use with Rails, check out [bootswatch-rails](https://github.com/maxim/bootswatch-rails) (Sass) and [twitter-bootswatch-rails](https://github.com/scottvrosenthal/twitter-bootswatch-rails) (LESS). For use with a Yeoman app or with Bower check out [bootswatch-scss](https://github.com/nrub/bootswatch-scss).


Customization
------
Bootswatch is an open source project, and you‚Äôre welcome to modify the themes further. If you‚Äôre interested, fork or follow the GitHub repository. The files of interest are in the `gh-pages` branch.

Each raw theme consists of two LESS files. One is `variables.less`, which is included by default in Bootstrap and allows you to customize [these settings](http://twitter.github.io/bootstrap/customize.html#variables). The other is called `bootswatch.less` and introduces more extensive structural changes.

Check out the README in the [swatchmaker directory](https://github.com/thomaspark/bootswatch/tree/master/swatchmaker) for step-by-step instructions on building your own swatch.

API
-----

A simple API is available for integrating your platform with Bootswatch.

The swatch objects are housed in an array called `themes`, and each swatch has the following properties:  `name`, `description`, `preview`, `thumbnail`, `css`, `css-min`, `less`, and `less-variables`.

CORS and JSONP are supported. Send your request to `http://api.bootswatch.com`.

A simple demo, using mustache.js for templating: http://jsbin.com/asowud/1/edit

Feedback
------
Please send feedback to thomas@thomaspark.me. For more information, visit http://thomaspark.me/2012/02/introducing-bootswatch/.

Author
------
[Thomas Park](http://github.com/thomaspark)

+ http://thomaspark.me

Thanks
------
[Mark Otto](http://github.com/markdotto) and [Jacob Thornton](http://github.com/fat) for [Bootstrap](https://github.com/twitter/bootstrap).

[James Taylor](http://github.com/jostylr) for [cors-lite](https://github.com/jostylr/cors-lite).

[Zack Maril](http://github.com/zmaril) for [bootswatch/swatchmaker/watcher.rb](https://github.com/thomaspark/bootswatch/blob/master/swatchmaker/watcher.rb).

[Gerald Hiller](https://twitter.com/geraldhiller) for the favicon.


Copyright and License
----
Copyright 2012 Thomas Park

Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.

Create your own swatch
======================

1. Download Bootswatch
------
Download or clone [Bootswatch](https://github.com/thomaspark/bootswatch).


2. Install Bootstrap
------
In terminal, navigate to `/bootswatch/swatchmaker/` and run the command `make bootstrap` to download the latest version of Bootstrap.


3. Install Bootstrap Dependencies
------
If you haven't before, [install npm](https://npmjs.org/). Next, navigate to `/bootswatch/swatchmaker/bootstrap/` and type `npm install` to locally install Bootstrap dependencies (uglify-js, jshint, recess, connect, hogan.js).


4. Customize Bootstrap
------
Make your customizations to the two files found in `/bootswatch/swatchmaker/swatch/`: `variables.less` and `bootswatch.less`. You can also copy over the less files from an existing theme and modify them.


5. Build Customized Bootstrap
------
In `/bootswatch/swatchmaker/`, run `make bootswatch`. The compiled CSS files will be created in `/bootswatch/swatchmaker/swatch/`.

You can run the watcher to automatically build Bootstrap whenever changes are saved with `make watcher` (Requires `gem install directory_watcher`).


6. Reset Bootstrap
------
If you want to reset `variables.less` and `bootswatch.less` to defaults, run `make default`.
# Contributing to Bootstrap

Looking to contribute something to Bootstrap? **Here's how you can help.**



## Reporting issues

We only accept issues that are bug reports or feature requests. Bugs must be isolated and reproducible problems that we can fix within the Bootstrap core. Please read the following guidelines before opening any issue.

1. **Search for existing issues.** We get a lot of duplicate issues, and you'd help us out a lot by first checking if someone else has reported the same issue. Moreover, the issue may have already been resolved with a fix available.
2. **Create an isolated and reproducible test case.** Be sure the problem exists in Bootstrap's code with a [reduced test case](http://css-tricks.com/reduced-test-cases/) that should be included in each bug report.
3. **Include a live example.** Make use of jsFiddle or jsBin to share your isolated test cases.
4. **Share as much information as possible.** Include operating system and version, browser and version, version of Bootstrap, customized or vanilla build, etc. where appropriate. Also include steps to reproduce the bug.



## Key branches

- `master` is the latest, deployed version.
- `gh-pages` is the hosted docs (not to be used for pull requests).
- `*-wip` is the official work in progress branch for the next release.



## Pull requests

- Try to submit pull requests against the latest `*-wip` branch for easier merging
- CSS changes must be done in .less files first, never just the compiled files
- If modifying the .less files, always recompile and commit the compiled files bootstrap.css and bootstrap.min.css
- Try not to pollute your pull request with unintended changes--keep them simple and small
- Try to share which browsers your code has been tested in before submitting a pull request



## Coding standards

### HTML

- Two spaces for indentation, never tabs
- Double quotes only, never single quotes
- Always use proper indentation
- Use tags and elements appropriate for an HTML5 doctype (e.g., self-closing tags)

### CSS

- Adhere to the [Recess CSS property order](http://markdotto.com/2011/11/29/css-property-order/)
- Multiple-line approach (one property and value per line)
- Always a space after a property's colon (.e.g, `display: block;` and not `display:block;`)
- End all lines with a semi-colon
- For multiple, comma-separated selectors, place each selector on its own line
- Attribute selectors, like `input[type="text"]` should always wrap the attribute's value in double quotes, for consistency and safety (see this [blog post on unquoted attribute values](http://mathiasbynens.be/notes/unquoted-attribute-values) that can lead to XSS attacks).

### JS

- No semicolons
- Comma first
- 2 spaces (no tabs)
- strict mode
- "Attractive"



## License

By contributing your code, you agree to license your contribution under the terms of the APLv2: https://github.com/twbs/bootstrap/blob/master/LICENSE

# [Bootstrap v3.0.0](http://getbootstrap.com) [![Build Status](https://secure.travis-ci.org/twbs/bootstrap.png)](http://travis-ci.org/twbs/bootstrap)

Bootstrap is a sleek, intuitive, and powerful front-end framework for faster and easier web development, created and maintained by [Mark Otto](http://twitter.com/mdo) and [Jacob Thornton](http://twitter.com/fat).

To get started, check out [http://getbootstrap.com](http://getbootstrap.com)!



## Quick start

Three quick start options are available:

* [Download the latest release](https://github.com/twbs/bootstrap/zipball/3.0.0-wip).
* Clone the repo: `git clone git://github.com/twbs/bootstrap.git`.
* Install with [Bower](http://bower.io): `bower install bootstrap`.

Read the [Getting Started page](http://getbootstrap.com/getting-started/) for information on the framework contents, templates and examples, and more.



## Bugs and feature requests

Have a bug or a feature request? [Please open a new issue](https://github.com/twbs/bootstrap/issues). Before opening any issue, please search for existing issues and read the [Issue Guidelines](https://github.com/necolas/issue-guidelines), written by [Nicolas Gallagher](https://github.com/necolas/).

You may use [this JS Bin](http://jsbin.com/aKiCIDO/1/edit) as a template for your bug reports.



## Documentation

Bootstrap's documentation, included in this repo in the root directory, is built with [Jekyll](http://jekyllrb.com) and publicly hosted on GitHub Pages at [http://getbootstrap.com](http://getbootstrap.com). The docs may also be run locally.

### Running documentation locally

1. If necessary, [install Jekyll](http://jekyllrb.com/docs/installation) (requires v1.x).
2. From the root `/bootstrap` directory, run `jekyll serve` in the command line.
  - **Windows users:** run `chcp 65001` first to change the command prompt's character encoding ([code page](http://en.wikipedia.org/wiki/Windows_code_page)) to UTF-8 so Jekyll runs without errors.
3. Open [http://localhost:9001](http://localhost:9001) in your browser, and voil√†.

Learn more about using Jekyll by reading their [documentation](http://jekyllrb.com/docs/home/).

### Documentation for previous releases

Documentation for v2.3.2 has been made available for the time being at [http://getbootstrap.com/2.3.2/](http://getbootstrap.com/2.3.2/) while folks transition to Bootstrap 3.

[Previous releases](https://github.com/twbs/bootstrap/releases) and their documentation are also available for download.



## Compiling CSS and JavaScript

Bootstrap uses [Grunt](http://gruntjs.com/) with convenient methods for working with the framework. It's how we compile our code, run tests, and more. To use it, install the required dependencies as directed and then run some Grunt commands.

### Install Grunt

From the command line:

1. Install `grunt-cli` globally with `npm install -g grunt-cli`.
2. Install the [necessary local dependencies](package.json) via `npm install`

When completed, you'll be able to run the various Grunt commands provided from the command line.

**Unfamiliar with `npm`? Don't have node installed?** That's a-okay. npm stands for [node packaged modules](http://npmjs.org/) and is a way to manage development dependencies through node.js. [Download and install node.js](http://nodejs.org/download/) before proceeding.

### Available Grunt commands

#### Build - `grunt`
Run `grunt` to run tests locally and compile the CSS and JavaScript into `/dist`. **Requires [recess](https://github.com/twitter/recess) and [uglify-js](https://github.com/mishoo/UglifyJS).**

#### Only compile CSS and JavaScript - `grunt dist`
`grunt dist` creates the `/dist` directory with compiled files. **Requires [recess](https://github.com/twitter/recess) and [uglify-js](https://github.com/mishoo/UglifyJS).**

#### Tests - `grunt test`
Runs jshint and qunit tests headlessly in [phantomjs](https://github.com/ariya/phantomjs/) (used for CI). **Requires [phantomjs](https://github.com/ariya/phantomjs/).**

#### Watch - `grunt watch`
This is a convenience method for watching just Less files and automatically building them whenever you save.

### Troubleshooting dependencies

Should you encounter problems with installing dependencies or running Grunt commands, uninstall all previous dependency versions (global and local). Then, rerun `npm install`.



## Contributing

Please read through our guidelines for contributing to Bootstrap. Included are directions for opening issues, coding standards, and notes on development.

More over, if your pull request contains JavaScript patches or features, you must include relevant unit tests. All HTML and CSS should conform to the [Code Guide](http://github.com/mdo/code-guide), maintained by [Mark Otto](http://github.com/mdo).

Editor preferences are available in the [editor config](.editorconfig) for easy use in common text editors. Read more and download plugins at [http://editorconfig.org](http://editorconfig.org).



## Community

Keep track of development and community news.

* Follow [@twbootstrap on Twitter](http://twitter.com/twbootstrap).
* Read and subscribe to the [The Official Bootstrap Blog](http://blog.getbootstrap.com).
* Have a question that's not a feature request or bug report? [Ask on the mailing list.](http://groups.google.com/group/twitter-bootstrap)
* Chat with fellow Bootstrappers in IRC. On the `irc.freenode.net` server, in the `##twitter-bootstrap` channel.




## Versioning

For transparency and insight into our release cycle, and for striving to maintain backward compatibility, Bootstrap will be maintained under the Semantic Versioning guidelines as much as possible.

Releases will be numbered with the following format:

`<major>.<minor>.<patch>`

And constructed with the following guidelines:

* Breaking backward compatibility bumps the major (and resets the minor and patch)
* New additions without breaking backward compatibility bumps the minor (and resets the patch)
* Bug fixes and misc changes bumps the patch

For more information on SemVer, please visit [http://semver.org/](http://semver.org/).



## Authors

**Mark Otto**

+ [http://twitter.com/mdo](http://twitter.com/mdo)
+ [http://github.com/mdo](http://github.com/mdo)

**Jacob Thornton**

+ [http://twitter.com/fat](http://twitter.com/fat)
+ [http://github.com/fat](http://github.com/fat)



## Copyright and license

Copyright 2012 Twitter, Inc under [the Apache 2.0 license](LICENSE).

# Contributing to Font Awesome

Looking to contribute something to Font Awesome? **Here's how you can help.**



## Reporting issues

We only accept issues that are icon requests, bug reports, or feature requests. Bugs must be isolated and reproducible problems that we can fix within the Font Awesome core. Please read the following guidelines to ensure you are the paragon of bug reporting.

1. **Search for existing issues.** We get a lot of duplicate issues, and you'd help us out a lot by first checking if someone else has reported the same issue. Moreover, the issue may have already been resolved with a fix available.
2. **Create an isolated and reproducible test case.** Be sure the problem exists in Font Awesome's code with a [reduced test case](http://css-tricks.com/reduced-test-cases/) that should be included in each bug report.
3. **Include a live example.** Make use of jsFiddle, jsBin, or Codepen to share your isolated test cases.
4. **Share as much information as possible.** Include operating system and version, browser and version, version of Font Awesome, etc. where appropriate. Also include steps to reproduce the bug.



## Key branches

- `master` is the latest, deployed version (not to be used for pull requests)
- `gh-pages` is the hosted docs (not to be used for pull requests)
- `*-wip` branches are the official work in progress branches for the next releases. All pull requests should be submitted against the appropriate branch



## Notes on the repo

As of v3.2.0, Font Awesome's CSS, LESS, SCSS, and documentation are all powered by Jekyll templates and built before each commit and release.
- `_config.yml` - much of the site is driven off variables from this file, including Font Awesome and Bootstrap versions
- `src/` - All edits to documentation, LESS, SCSS, and CSS should be made to files and templates in this directory
- `src/icons.yml` - all LESS, SCSS, and CSS icon definitions are driven off this single file



## Pull requests

- Submit all pull requests against the appropriate `*-wip` branch for easier merging
- Any changes to the docs must be made to the Liquid templates in the `src` directory
- CSS changes must be done in .less and .scss files first, never the compiled files
- If modifying the .less and .scss files, always recompile and commit the compiled files
- Try not to pollute your pull request with unintended changes--keep them simple and small
- Try to share which browsers your code has been tested in before submitting a pull request



## Coding standards: HTML

- Two spaces for indentation, never tabs
- Double quotes only, never single quotes
- Always use proper indentation
- Use tags and elements appropriate for an HTML5 doctype (e.g., self-closing tags)



## Coding standards: CSS

- Adhere to the [Recess CSS property order](http://markdotto.com/2011/11/29/css-property-order/)
- Multiple-line approach (one property and value per line)
- Always a space after a property's colon (.e.g, `display: block;` and not `display:block;`)
- End all lines with a semi-colon
- For multiple, comma-separated selectors, place each selector on it's own line
- Attribute selectors, like `input[type="text"]` should always wrap the attribute's value in double quotes, for consistency and safety (see this [blog post on unquoted attribute values](http://mathiasbynens.be/notes/unquoted-attribute-values) that can lead to XSS attacks)



## License

By contributing your code, you agree to license your contribution under the terms of the MIT License:
- http://opensource.org/licenses/mit-license.html



## Thanks

Thanks to Bootstrap for their wonderful CONTRIBUTING.MD doc. It was modified to create this one.

#[Font Awesome v3.2.1](http://fontawesome.io)
###the iconic font designed for Bootstrap

Font Awesome is a full suite of 361 pictographic icons for easy scalable vector graphics on websites, created and
maintained by [Dave Gandy](http://twitter.com/byscuits). Stay up to date [@fontawesome](http://twitter.com/fontawesome).

Get started at http://fontawesome.io!

##License
- The Font Awesome font is licensed under the SIL OFL 1.1:
  - http://scripts.sil.org/OFL
- Font Awesome CSS, LESS, and SASS files are licensed under the MIT License:
  - http://opensource.org/licenses/mit-license.html
- The Font Awesome documentation is licensed under the CC BY 3.0 License:
  - http://creativecommons.org/licenses/by/3.0/
- Attribution is no longer required as of Font Awesome 3.0, but much appreciated:
  - `Font Awesome by Dave Gandy - http://fontawesome.io`
- Full details: http://fontawesome.io/license

##Changelog
- v3.0.0 - all icons redesigned from scratch, optimized for Bootstrap's 14px default
- v3.0.1 - much improved rendering in webkit, various bug fixes
- v3.0.2 - much improved rendering and alignment in IE7
- v3.1.0 - Added 54 icons, icon stacking styles, flipping and rotating icons, removed SASS support
- [v3.1.1 GitHub milestones](https://github.com/FortAwesome/Font-Awesome/issues?milestone=4&page=1&state=closed)
- [v3.2.0 GitHub milestones](https://github.com/FortAwesome/Font-Awesome/issues?milestone=3&page=1&state=closed)
- [v3.2.1 GitHub milestones](https://github.com/FortAwesome/Font-Awesome/issues?milestone=5&page=1&state=closed)

##Versioning

Font Awesome will be maintained under the Semantic Versioning guidelines as much as possible. Releases will be numbered with the following format:

`<major>.<minor>.<patch>`

And constructed with the following guidelines:

* Breaking backward compatibility bumps the major (and resets the minor and patch)
* New additions, including new icons, without breaking backward compatibility bumps the minor (and resets the patch)
* Bug fixes and misc changes bumps the patch

For more information on SemVer, please visit http://semver.org.

##Author
- Email: dave@fontawesome.io
- Twitter: http://twitter.com/byscuits
- GitHub: https://github.com/davegandy
- Work: Lead Product Designer @ http://kyru.us

## Hacking on Font Awesome

From the root of the repository, install the tools used to develop.

    $ bundle install
    $ npm install

Build the project and documentation:

    $ bundle exec jekyll build

Or serve it on a local server on http://localhost:7998/Font-Awesome/:

    $ bundle exec jekyll serve

jQuery Component
================

Shim repository for the [jQuery](http://jquery.com).

Package Managers
----------------

* [Bower](http://bower.io/): `jquery`
* [Component](https://github.com/component/component): `components/jquery`
* [Composer](http://packagist.org/packages/components/jquery): `components/jquery`

Bootswatch
==========

Bootswatch is a collection of free themes for [Twitter Bootstrap](http://twitter.github.com/bootstrap/). Check it out at [bootswatch.com](http://bootswatch.com).

Usage
-----
Head over to [Bootswatch](http://bootswatch.com) and download the `bootstrap.min.css` file associated with a theme. Replace Bootstrap's stylesheet with this file.

The themes are also hosted on [BootstrapCDN](http://www.bootstrapcdn.com/).

For use with Rails, check out [bootswatch-rails](https://github.com/maxim/bootswatch-rails) (Sass) and [twitter-bootswatch-rails](https://github.com/scottvrosenthal/twitter-bootswatch-rails) (LESS). For use with a Yeoman app or with Bower check out [bootswatch-scss](https://github.com/nrub/bootswatch-scss).


Customization
------
Bootswatch is an open source project, and you‚Äôre welcome to fork and modify the themes.

Each raw theme consists of two LESS files. One is `variables.less`, which is included by default in Bootstrap and allows you to customize [these settings](http://twitter.github.io/bootstrap/customize.html#variables). The other is called `bootswatch.less` and introduces more extensive structural changes.

Check out the [Help page](http://bootswatch.com/help/) for more details on building your own theme.

API
-----

A simple API is available for integrating your platform with Bootswatch.

The swatch objects are housed in an array called `themes`, and each swatch has the following properties:  `name`, `description`, `preview`, `thumbnail`, `css`, `cssMin`, `less`, and `lessVariables`.

CORS and JSONP are supported. Send your request to `http://api.bootswatch.com/3/`.

More info at http://bootswatch.com/help/#api

Author
------
[Thomas Park](http://github.com/thomaspark)

+ http://thomaspark.me

Thanks
------
[Mark Otto](http://github.com/markdotto) and [Jacob Thornton](http://github.com/fat) for [Bootstrap](https://github.com/twitter/bootstrap).

[James Taylor](http://github.com/jostylr) for [cors-lite](https://github.com/jostylr/cors-lite).

[Zack Maril](http://github.com/zmaril) for [bootswatch/swatchmaker/watcher.rb](https://github.com/thomaspark/bootswatch/blob/master/swatchmaker/watcher.rb).

[Gerald Hiller](https://twitter.com/geraldhiller) for the favicon.


Copyright and License
----
Copyright 2013 Thomas Park

Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.

# Contributing to Font Awesome

Looking to contribute something to Font Awesome? **Here's how you can help.**



## Reporting issues

We only accept issues that are icon requests, bug reports, or feature requests. Bugs must be isolated and reproducible problems that we can fix within the Font Awesome core. Please read the following guidelines to ensure you are the paragon of bug reporting.

1. **Search for existing issues.** We get a lot of duplicate issues, and you'd help us out a lot by first checking if someone else has reported the same issue. Moreover, the issue may have already been resolved with a fix available.
2. **Create an isolated and reproducible test case.** Be sure the problem exists in Font Awesome's code with a [reduced test case](http://css-tricks.com/reduced-test-cases/) that should be included in each bug report.
3. **Include a live example.** Make use of jsFiddle, jsBin, or Codepen to share your isolated test cases.
4. **Share as much information as possible.** Include operating system and version, browser and version, version of Font Awesome, etc. where appropriate. Also include steps to reproduce the bug.



## Key branches

- `master` is the latest, deployed version (not to be used for pull requests)
- `gh-pages` is the hosted docs (not to be used for pull requests)
- `*-wip` branches are the official work in progress branches for the next releases. All pull requests should be submitted against the appropriate branch



## Notes on the repo

As of v3.2.0, Font Awesome's CSS, LESS, SCSS, and documentation are all powered by Jekyll templates and built before each commit and release.
- `_config.yml` - much of the site is driven off variables from this file, including Font Awesome and Bootstrap versions
- `src/` - All edits to documentation, LESS, SCSS, and CSS should be made to files and templates in this directory
- `src/icons.yml` - all LESS, SCSS, and CSS icon definitions are driven off this single file



## Pull requests

- Submit all pull requests against the appropriate `*-wip` branch for easier merging
- Any changes to the docs must be made to the Liquid templates in the `src` directory
- CSS changes must be done in .less and .scss files first, never the compiled files
- If modifying the .less and .scss files, always recompile and commit the compiled files
- Try not to pollute your pull request with unintended changes--keep them simple and small
- Try to share which browsers your code has been tested in before submitting a pull request



## Coding standards: HTML

- Two spaces for indentation, never tabs
- Double quotes only, never single quotes
- Always use proper indentation
- Use tags and elements appropriate for an HTML5 doctype (e.g., self-closing tags)



## Coding standards: CSS

- Adhere to the [Recess CSS property order](http://markdotto.com/2011/11/29/css-property-order/)
- Multiple-line approach (one property and value per line)
- Always a space after a property's colon (.e.g, `display: block;` and not `display:block;`)
- End all lines with a semi-colon
- For multiple, comma-separated selectors, place each selector on it's own line
- Attribute selectors, like `input[type="text"]` should always wrap the attribute's value in double quotes, for consistency and safety (see this [blog post on unquoted attribute values](http://mathiasbynens.be/notes/unquoted-attribute-values) that can lead to XSS attacks)



## License

By contributing your code, you agree to license your contribution under the terms of the MIT License:
- http://opensource.org/licenses/mit-license.html



## Thanks

Thanks to Bootstrap for their wonderful CONTRIBUTING.MD doc. It was modified to create this one.

#[Font Awesome v3.2.1](http://fontawesome.io)
###the iconic font designed for Bootstrap

Font Awesome is a full suite of 361 pictographic icons for easy scalable vector graphics on websites, created and
maintained by [Dave Gandy](http://twitter.com/byscuits). Stay up to date [@fontawesome](http://twitter.com/fontawesome).

Get started at http://fontawesome.io!

##License
- The Font Awesome font is licensed under the SIL OFL 1.1:
  - http://scripts.sil.org/OFL
- Font Awesome CSS, LESS, and SASS files are licensed under the MIT License:
  - http://opensource.org/licenses/mit-license.html
- The Font Awesome documentation is licensed under the CC BY 3.0 License:
  - http://creativecommons.org/licenses/by/3.0/
- Attribution is no longer required as of Font Awesome 3.0, but much appreciated:
  - `Font Awesome by Dave Gandy - http://fontawesome.io`
- Full details: http://fontawesome.io/license

##Changelog
- v3.0.0 - all icons redesigned from scratch, optimized for Bootstrap's 14px default
- v3.0.1 - much improved rendering in webkit, various bug fixes
- v3.0.2 - much improved rendering and alignment in IE7
- v3.1.0 - Added 54 icons, icon stacking styles, flipping and rotating icons, removed SASS support
- [v3.1.1 GitHub milestones](https://github.com/FortAwesome/Font-Awesome/issues?milestone=4&page=1&state=closed)
- [v3.2.0 GitHub milestones](https://github.com/FortAwesome/Font-Awesome/issues?milestone=3&page=1&state=closed)
- [v3.2.1 GitHub milestones](https://github.com/FortAwesome/Font-Awesome/issues?milestone=5&page=1&state=closed)

##Versioning

Font Awesome will be maintained under the Semantic Versioning guidelines as much as possible. Releases will be numbered with the following format:

`<major>.<minor>.<patch>`

And constructed with the following guidelines:

* Breaking backward compatibility bumps the major (and resets the minor and patch)
* New additions, including new icons, without breaking backward compatibility bumps the minor (and resets the patch)
* Bug fixes and misc changes bumps the patch

For more information on SemVer, please visit http://semver.org.

##Author
- Email: dave@fontawesome.io
- Twitter: http://twitter.com/byscuits
- GitHub: https://github.com/davegandy
- Work: Lead Product Designer @ http://kyru.us

## Hacking on Font Awesome

From the root of the repository, install the tools used to develop.

    $ bundle install
    $ npm install

Build the project and documentation:

    $ bundle exec jekyll build

Or serve it on a local server on http://localhost:7998/Font-Awesome/:

    $ bundle exec jekyll serve

jQuery Component
================

Shim repository for the [jQuery](http://jquery.com).

Package Managers
----------------

* [Bower](http://bower.io/): `jquery`
* [Component](https://github.com/component/component): `components/jquery`
* [Composer](http://packagist.org/packages/components/jquery): `components/jquery`


3.1.2 / 2013-04-12 
==================

  * add support for custom Accept parameters
  * update cookie-signature

3.1.1 / 2013-04-01 
==================

  * add X-Forwarded-Host support to `req.host`
  * fix relative redirects  
  * update mkdirp 
  * update buffer-crc32
  * remove legacy app.configure() method from app template.

3.1.0 / 2013-01-25
==================

  * add support for leading "." in "view engine" setting
  * add array support to `res.set()`
  * add node 0.8.x to travis.yml
  * add "subdomain offset" setting for tweaking `req.subdomains`
  * add `res.location(url)` implementing `res.redirect()`-like setting of Location
  * use app.get() for x-powered-by setting for inheritance
  * fix colons in passwords for `req.auth`

3.0.6 / 2013-01-04
==================

  * add http verb methods to Router
  * update connect
  * fix mangling of the `res.cookie()` options object
  * fix jsonp whitespace escape. Closes #1132

3.0.5 / 2012-12-19
==================

  * add throwing when a non-function is passed to a route
  * fix: explicitly remove Transfer-Encoding header from 204 and 304 responses
  * revert "add 'etag' option"

3.0.4 / 2012-12-05
==================

  * add 'etag' option to disable `res.send()` Etags
  * add escaping of urls in text/plain in `res.redirect()`
    for old browsers interpreting as html
  * change crc32 module for a more liberal license
  * update connect

3.0.3 / 2012-11-13
==================

  * update connect
  * update cookie module
  * fix cookie max-age

3.0.2 / 2012-11-08
==================

  * add OPTIONS to cors example. Closes #1398
  * fix route chaining regression. Closes #1397

3.0.1 / 2012-11-01
==================

  * update connect

3.0.0 / 2012-10-23
==================

  * add `make clean`
  * add "Basic" check to req.auth
  * add `req.auth` test coverage
  * add cb && cb(payload) to `res.jsonp()`. Closes #1374
  * add backwards compat for `res.redirect()` status. Closes #1336
  * add support for `res.json()` to retain previously defined Content-Types. Closes #1349
  * update connect
  * change `res.redirect()` to utilize a pathname-relative Location again. Closes #1382
  * remove non-primitive string support for `res.send()`
  * fix view-locals example. Closes #1370
  * fix route-separation example

3.0.0rc5 / 2012-09-18
==================

  * update connect
  * add redis search example
  * add static-files example
  * add "x-powered-by" setting (`app.disable('x-powered-by')`)
  * add "application/octet-stream" redirect Accept test case. Closes #1317

3.0.0rc4 / 2012-08-30
==================

  * add `res.jsonp()`. Closes #1307
  * add "verbose errors" option to error-pages example
  * add another route example to express(1) so people are not so confused
  * add redis online user activity tracking example
  * update connect dep
  * fix etag quoting. Closes #1310
  * fix error-pages 404 status
  * fix jsonp callback char restrictions
  * remove old OPTIONS default response

3.0.0rc3 / 2012-08-13
==================

  * update connect dep
  * fix signed cookies to work with `connect.cookieParser()` ("s:" prefix was missing) [tnydwrds]
  * fix `res.render()` clobbering of "locals"

3.0.0rc2 / 2012-08-03
==================

  * add CORS example
  * update connect dep
  * deprecate `.createServer()` & remove old stale examples
  * fix: escape `res.redirect()` link
  * fix vhost example

3.0.0rc1 / 2012-07-24
==================

  * add more examples to view-locals
  * add scheme-relative redirects (`res.redirect("//foo.com")`) support
  * update cookie dep
  * update connect dep
  * update send dep
  * fix `express(1)` -h flag, use -H for hogan. Closes #1245
  * fix `res.sendfile()` socket error handling regression

3.0.0beta7 / 2012-07-16
==================

  * update connect dep for `send()` root normalization regression

3.0.0beta6 / 2012-07-13
==================

  * add `err.view` property for view errors. Closes #1226
  * add "jsonp callback name" setting
  * add support for "/foo/:bar*" non-greedy matches
  * change `res.sendfile()` to use `send()` module
  * change `res.send` to use "response-send" module
  * remove `app.locals.use` and `res.locals.use`, use regular middleware

3.0.0beta5 / 2012-07-03
==================

  * add "make check" support
  * add route-map example
  * add `res.json(obj, status)` support back for BC
  * add "methods" dep, remove internal methods module
  * update connect dep
  * update auth example to utilize cores pbkdf2
  * updated tests to use "supertest"

3.0.0beta4 / 2012-06-25
==================

  * Added `req.auth`
  * Added `req.range(size)`
  * Added `res.links(obj)`
  * Added `res.send(body, status)` support back for backwards compat
  * Added `.default()` support to `res.format()`
  * Added 2xx / 304 check to `req.fresh`
  * Revert "Added + support to the router"
  * Fixed `res.send()` freshness check, respect res.statusCode

3.0.0beta3 / 2012-06-15
==================

  * Added hogan `--hjs` to express(1) [nullfirm]
  * Added another example to content-negotiation
  * Added `fresh` dep
  * Changed: `res.send()` always checks freshness
  * Fixed: expose connects mime module. Cloases #1165

3.0.0beta2 / 2012-06-06
==================

  * Added `+` support to the router
  * Added `req.host`
  * Changed `req.param()` to check route first
  * Update connect dep

3.0.0beta1 / 2012-06-01
==================

  * Added `res.format()` callback to override default 406 behaviour
  * Fixed `res.redirect()` 406. Closes #1154

3.0.0alpha5 / 2012-05-30
==================

  * Added `req.ip`
  * Added `{ signed: true }` option to `res.cookie()`
  * Removed `res.signedCookie()`
  * Changed: dont reverse `req.ips`
  * Fixed "trust proxy" setting check for `req.ips`

3.0.0alpha4 / 2012-05-09
==================

  * Added: allow `[]` in jsonp callback. Closes #1128
  * Added `PORT` env var support in generated template. Closes #1118 [benatkin]
  * Updated: connect 2.2.2

3.0.0alpha3 / 2012-05-04
==================

  * Added public `app.routes`. Closes #887
  * Added _view-locals_ example
  * Added _mvc_ example
  * Added `res.locals.use()`. Closes #1120
  * Added conditional-GET support to `res.send()`
  * Added: coerce `res.set()` values to strings
  * Changed: moved `static()` in generated apps below router
  * Changed: `res.send()` only set ETag when not previously set
  * Changed connect 2.2.1 dep
  * Changed: `make test` now runs unit / acceptance tests
  * Fixed req/res proto inheritance

3.0.0alpha2 / 2012-04-26
==================

  * Added `make benchmark` back
  * Added `res.send()` support for `String` objects
  * Added client-side data exposing example
  * Added `res.header()` and `req.header()` aliases for BC
  * Added `express.createServer()` for BC
  * Perf: memoize parsed urls
  * Perf: connect 2.2.0 dep
  * Changed: make `expressInit()` middleware self-aware
  * Fixed: use app.get() for all core settings
  * Fixed redis session example
  * Fixed session example. Closes #1105
  * Fixed generated express dep. Closes #1078

3.0.0alpha1 / 2012-04-15
==================

  * Added `app.locals.use(callback)`
  * Added `app.locals` object
  * Added `app.locals(obj)`
  * Added `res.locals` object
  * Added `res.locals(obj)`
  * Added `res.format()` for content-negotiation
  * Added `app.engine()`
  * Added `res.cookie()` JSON cookie support
  * Added "trust proxy" setting
  * Added `req.subdomains`
  * Added `req.protocol`
  * Added `req.secure`
  * Added `req.path`
  * Added `req.ips`
  * Added `req.fresh`
  * Added `req.stale`
  * Added comma-delmited / array support for `req.accepts()`
  * Added debug instrumentation
  * Added `res.set(obj)`
  * Added `res.set(field, value)`
  * Added `res.get(field)`
  * Added `app.get(setting)`. Closes #842
  * Added `req.acceptsLanguage()`
  * Added `req.acceptsCharset()`
  * Added `req.accepted`
  * Added `req.acceptedLanguages`
  * Added `req.acceptedCharsets`
  * Added "json replacer" setting
  * Added "json spaces" setting
  * Added X-Forwarded-Proto support to `res.redirect()`. Closes #92
  * Added `--less` support to express(1)
  * Added `express.response` prototype
  * Added `express.request` prototype
  * Added `express.application` prototype
  * Added `app.path()`
  * Added `app.render()`
  * Added `res.type()` to replace `res.contentType()`
  * Changed: `res.redirect()` to add relative support
  * Changed: enable "jsonp callback" by default
  * Changed: renamed "case sensitive routes" to "case sensitive routing"
  * Rewrite of all tests with mocha
  * Removed "root" setting
  * Removed `res.redirect('home')` support
  * Removed `req.notify()`
  * Removed `app.register()`
  * Removed `app.redirect()`
  * Removed `app.is()`
  * Removed `app.helpers()`
  * Removed `app.dynamicHelpers()`
  * Fixed `res.sendfile()` with non-GET. Closes #723
  * Fixed express(1) public dir for windows. Closes #866

2.5.9/ 2012-04-02
==================

  * Added support for PURGE request method [pbuyle]
  * Fixed `express(1)` generated app `app.address()` before `listening` [mmalecki]

2.5.8 / 2012-02-08
==================

  * Update mkdirp dep. Closes #991

2.5.7 / 2012-02-06
==================

  * Fixed `app.all` duplicate DELETE requests [mscdex]

2.5.6 / 2012-01-13
==================

  * Updated hamljs dev dep. Closes #953

2.5.5 / 2012-01-08
==================

  * Fixed: set `filename` on cached templates [matthewleon]

2.5.4 / 2012-01-02
==================

  * Fixed `express(1)` eol on 0.4.x. Closes #947

2.5.3 / 2011-12-30
==================

  * Fixed `req.is()` when a charset is present

2.5.2 / 2011-12-10
==================

  * Fixed: express(1) LF -> CRLF for windows

2.5.1 / 2011-11-17
==================

  * Changed: updated connect to 1.8.x
  * Removed sass.js support from express(1)

2.5.0 / 2011-10-24
==================

  * Added ./routes dir for generated app by default
  * Added npm install reminder to express(1) app gen
  * Added 0.5.x support
  * Removed `make test-cov` since it wont work with node 0.5.x
  * Fixed express(1) public dir for windows. Closes #866

2.4.7 / 2011-10-05
==================

  * Added mkdirp to express(1). Closes #795
  * Added simple _json-config_ example
  * Added  shorthand for the parsed request's pathname via `req.path`
  * Changed connect dep to 1.7.x to fix npm issue...
  * Fixed `res.redirect()` __HEAD__ support. [reported by xerox]
  * Fixed `req.flash()`, only escape args
  * Fixed absolute path checking on windows. Closes #829 [reported by andrewpmckenzie]

2.4.6 / 2011-08-22
==================

  * Fixed multiple param callback regression. Closes #824 [reported by TroyGoode]

2.4.5 / 2011-08-19
==================

  * Added support for routes to handle errors. Closes #809
  * Added `app.routes.all()`. Closes #803
  * Added "basepath" setting to work in conjunction with reverse proxies etc.
  * Refactored `Route` to use a single array of callbacks
  * Added support for multiple callbacks for `app.param()`. Closes #801
Closes #805
  * Changed: removed .call(self) for route callbacks
  * Dependency: `qs >= 0.3.1`
  * Fixed `res.redirect()` on windows due to `join()` usage. Closes #808

2.4.4 / 2011-08-05
==================

  * Fixed `res.header()` intention of a set, even when `undefined`
  * Fixed `*`, value no longer required
  * Fixed `res.send(204)` support. Closes #771

2.4.3 / 2011-07-14
==================

  * Added docs for `status` option special-case. Closes #739
  * Fixed `options.filename`, exposing the view path to template engines

2.4.2. / 2011-07-06
==================

  * Revert "removed jsonp stripping" for XSS

2.4.1 / 2011-07-06
==================

  * Added `res.json()` JSONP support. Closes #737
  * Added _extending-templates_ example. Closes #730
  * Added "strict routing" setting for trailing slashes
  * Added support for multiple envs in `app.configure()` calls. Closes #735
  * Changed: `res.send()` using `res.json()`
  * Changed: when cookie `path === null` don't default it
  * Changed; default cookie path to "home" setting. Closes #731
  * Removed _pids/logs_ creation from express(1)

2.4.0 / 2011-06-28
==================

  * Added chainable `res.status(code)`
  * Added `res.json()`, an explicit version of `res.send(obj)`
  * Added simple web-service example

2.3.12 / 2011-06-22
==================

  * \#express is now on freenode! come join!
  * Added `req.get(field, param)`
  * Added links to Japanese documentation, thanks @hideyukisaito!
  * Added; the `express(1)` generated app outputs the env
  * Added `content-negotiation` example
  * Dependency: connect >= 1.5.1 < 2.0.0
  * Fixed view layout bug. Closes #720
  * Fixed; ignore body on 304. Closes #701

2.3.11 / 2011-06-04
==================

  * Added `npm test`
  * Removed generation of dummy test file from `express(1)`
  * Fixed; `express(1)` adds express as a dep
  * Fixed; prune on `prepublish`

2.3.10 / 2011-05-27
==================

  * Added `req.route`, exposing the current route
  * Added _package.json_ generation support to `express(1)`
  * Fixed call to `app.param()` function for optional params. Closes #682

2.3.9 / 2011-05-25
==================

  * Fixed bug-ish with `../' in `res.partial()` calls

2.3.8 / 2011-05-24
==================

  * Fixed `app.options()`

2.3.7 / 2011-05-23
==================

  * Added route `Collection`, ex: `app.get('/user/:id').remove();`
  * Added support for `app.param(fn)` to define param logic
  * Removed `app.param()` support for callback with return value
  * Removed module.parent check from express(1) generated app. Closes #670
  * Refactored router. Closes #639

2.3.6 / 2011-05-20
==================

  * Changed; using devDependencies instead of git submodules
  * Fixed redis session example
  * Fixed markdown example
  * Fixed view caching, should not be enabled in development

2.3.5 / 2011-05-20
==================

  * Added export `.view` as alias for `.View`

2.3.4 / 2011-05-08
==================

  * Added `./examples/say`
  * Fixed `res.sendfile()` bug preventing the transfer of files with spaces

2.3.3 / 2011-05-03
==================

  * Added "case sensitive routes" option.
  * Changed; split methods supported per rfc [slaskis]
  * Fixed route-specific middleware when using the same callback function several times

2.3.2 / 2011-04-27
==================

  * Fixed view hints

2.3.1 / 2011-04-26
==================

  * Added `app.match()` as `app.match.all()`
  * Added `app.lookup()` as `app.lookup.all()`
  * Added `app.remove()` for `app.remove.all()`
  * Added `app.remove.VERB()`
  * Fixed template caching collision issue. Closes #644
  * Moved router over from connect and started refactor

2.3.0 / 2011-04-25
==================

  * Added options support to `res.clearCookie()`
  * Added `res.helpers()` as alias of `res.locals()`
  * Added; json defaults to UTF-8 with `res.send()`. Closes #632. [Daniel   * Dependency `connect >= 1.4.0`
  * Changed; auto set Content-Type in res.attachement [Aaron Heckmann]
  * Renamed "cache views" to "view cache". Closes #628
  * Fixed caching of views when using several apps. Closes #637
  * Fixed gotcha invoking `app.param()` callbacks once per route middleware.
Closes #638
  * Fixed partial lookup precedence. Closes #631
Shaw]

2.2.2 / 2011-04-12
==================

  * Added second callback support for `res.download()` connection errors
  * Fixed `filename` option passing to template engine

2.2.1 / 2011-04-04
==================

  * Added `layout(path)` helper to change the layout within a view. Closes #610
  * Fixed `partial()` collection object support.
    Previously only anything with `.length` would work.
    When `.length` is present one must still be aware of holes,
    however now `{ collection: {foo: 'bar'}}` is valid, exposes
    `keyInCollection` and `keysInCollection`.

  * Performance improved with better view caching
  * Removed `request` and `response` locals
  * Changed; errorHandler page title is now `Express` instead of `Connect`

2.2.0 / 2011-03-30
==================

  * Added `app.lookup.VERB()`, ex `app.lookup.put('/user/:id')`. Closes #606
  * Added `app.match.VERB()`, ex `app.match.put('/user/12')`. Closes #606
  * Added `app.VERB(path)` as alias of `app.lookup.VERB()`.
  * Dependency `connect >= 1.2.0`

2.1.1 / 2011-03-29
==================

  * Added; expose `err.view` object when failing to locate a view
  * Fixed `res.partial()` call `next(err)` when no callback is given [reported by aheckmann]
  * Fixed; `res.send(undefined)` responds with 204 [aheckmann]

2.1.0 / 2011-03-24
==================

  * Added `<root>/_?<name>` partial lookup support. Closes #447
  * Added `request`, `response`, and `app` local variables
  * Added `settings` local variable, containing the app's settings
  * Added `req.flash()` exception if `req.session` is not available
  * Added `res.send(bool)` support (json response)
  * Fixed stylus example for latest version
  * Fixed; wrap try/catch around `res.render()`

2.0.0 / 2011-03-17
==================

  * Fixed up index view path alternative.
  * Changed; `res.locals()` without object returns the locals

2.0.0rc3 / 2011-03-17
==================

  * Added `res.locals(obj)` to compliment `res.local(key, val)`
  * Added `res.partial()` callback support
  * Fixed recursive error reporting issue in `res.render()`

2.0.0rc2 / 2011-03-17
==================

  * Changed; `partial()` "locals" are now optional
  * Fixed `SlowBuffer` support. Closes #584 [reported by tyrda01]
  * Fixed .filename view engine option [reported by drudge]
  * Fixed blog example
  * Fixed `{req,res}.app` reference when mounting [Ben Weaver]

2.0.0rc / 2011-03-14
==================

  * Fixed; expose `HTTPSServer` constructor
  * Fixed express(1) default test charset. Closes #579 [reported by secoif]
  * Fixed; default charset to utf-8 instead of utf8 for lame IE [reported by NickP]

2.0.0beta3 / 2011-03-09
==================

  * Added support for `res.contentType()` literal
    The original `res.contentType('.json')`,
    `res.contentType('application/json')`, and `res.contentType('json')`
    will work now.
  * Added `res.render()` status option support back
  * Added charset option for `res.render()`
  * Added `.charset` support (via connect 1.0.4)
  * Added view resolution hints when in development and a lookup fails
  * Added layout lookup support relative to the page view.
    For example while rendering `./views/user/index.jade` if you create
    `./views/user/layout.jade` it will be used in favour of the root layout.
  * Fixed `res.redirect()`. RFC states absolute url [reported by unlink]
  * Fixed; default `res.send()` string charset to utf8
  * Removed `Partial` constructor (not currently used)

2.0.0beta2 / 2011-03-07
==================

  * Added res.render() `.locals` support back to aid in migration process
  * Fixed flash example

2.0.0beta / 2011-03-03
==================

  * Added HTTPS support
  * Added `res.cookie()` maxAge support
  * Added `req.header()` _Referrer_ / _Referer_ special-case, either works
  * Added mount support for `res.redirect()`, now respects the mount-point
  * Added `union()` util, taking place of `merge(clone())` combo
  * Added stylus support to express(1) generated app
  * Added secret to session middleware used in examples and generated app
  * Added `res.local(name, val)` for progressive view locals
  * Added default param support to `req.param(name, default)`
  * Added `app.disabled()` and `app.enabled()`
  * Added `app.register()` support for omitting leading ".", either works
  * Added `res.partial()`, using the same interface as `partial()` within a view. Closes #539
  * Added `app.param()` to map route params to async/sync logic
  * Added; aliased `app.helpers()` as `app.locals()`. Closes #481
  * Added extname with no leading "." support to `res.contentType()`
  * Added `cache views` setting, defaulting to enabled in "production" env
  * Added index file partial resolution, eg: partial('user') may try _views/user/index.jade_.
  * Added `req.accepts()` support for extensions
  * Changed; `res.download()` and `res.sendfile()` now utilize Connect's
    static file server `connect.static.send()`.
  * Changed; replaced `connect.utils.mime()` with npm _mime_ module
  * Changed; allow `req.query` to be pre-defined (via middleware or other parent
  * Changed view partial resolution, now relative to parent view
  * Changed view engine signature. no longer `engine.render(str, options, callback)`, now `engine.compile(str, options) -> Function`, the returned function accepts `fn(locals)`.
  * Fixed `req.param()` bug returning Array.prototype methods. Closes #552
  * Fixed; using `Stream#pipe()` instead of `sys.pump()` in `res.sendfile()`
  * Fixed; using _qs_ module instead of _querystring_
  * Fixed; strip unsafe chars from jsonp callbacks
  * Removed "stream threshold" setting

1.0.8 / 2011-03-01
==================

  * Allow `req.query` to be pre-defined (via middleware or other parent app)
  * "connect": ">= 0.5.0 < 1.0.0". Closes #547
  * Removed the long deprecated __EXPRESS_ENV__ support

1.0.7 / 2011-02-07
==================

  * Fixed `render()` setting inheritance.
    Mounted apps would not inherit "view engine"

1.0.6 / 2011-02-07
==================

  * Fixed `view engine` setting bug when period is in dirname

1.0.5 / 2011-02-05
==================

  * Added secret to generated app `session()` call

1.0.4 / 2011-02-05
==================

  * Added `qs` dependency to _package.json_
  * Fixed namespaced `require()`s for latest connect support

1.0.3 / 2011-01-13
==================

  * Remove unsafe characters from JSONP callback names [Ryan Grove]

1.0.2 / 2011-01-10
==================

  * Removed nested require, using `connect.router`

1.0.1 / 2010-12-29
==================

  * Fixed for middleware stacked via `createServer()`
    previously the `foo` middleware passed to `createServer(foo)`
    would not have access to Express methods such as `res.send()`
    or props like `req.query` etc.

1.0.0 / 2010-11-16
==================

  * Added; deduce partial object names from the last segment.
    For example by default `partial('forum/post', postObject)` will
    give you the _post_ object, providing a meaningful default.
  * Added http status code string representation to `res.redirect()` body
  * Added; `res.redirect()` supporting _text/plain_ and _text/html_ via __Accept__.
  * Added `req.is()` to aid in content negotiation
  * Added partial local inheritance [suggested by masylum]. Closes #102
    providing access to parent template locals.
  * Added _-s, --session[s]_ flag to express(1) to add session related middleware
  * Added _--template_ flag to express(1) to specify the
    template engine to use.
  * Added _--css_ flag to express(1) to specify the
    stylesheet engine to use (or just plain css by default).
  * Added `app.all()` support [thanks aheckmann]
  * Added partial direct object support.
    You may now `partial('user', user)` providing the "user" local,
    vs previously `partial('user', { object: user })`.
  * Added _route-separation_ example since many people question ways
    to do this with CommonJS modules. Also view the _blog_ example for
    an alternative.
  * Performance; caching view path derived partial object names
  * Fixed partial local inheritance precedence. [reported by Nick Poulden] Closes #454
  * Fixed jsonp support; _text/javascript_ as per mailinglist discussion

1.0.0rc4 / 2010-10-14
==================

  * Added _NODE_ENV_ support, _EXPRESS_ENV_ is deprecated and will be removed in 1.0.0
  * Added route-middleware support (very helpful, see the [docs](http://expressjs.com/guide.html#Route-Middleware))
  * Added _jsonp callback_ setting to enable/disable jsonp autowrapping [Dav Glass]
  * Added callback query check on response.send to autowrap JSON objects for simple webservice implementations [Dav Glass]
  * Added `partial()` support for array-like collections. Closes #434
  * Added support for swappable querystring parsers
  * Added session usage docs. Closes #443
  * Added dynamic helper caching. Closes #439 [suggested by maritz]
  * Added authentication example
  * Added basic Range support to `res.sendfile()` (and `res.download()` etc)
  * Changed; `express(1)` generated app using 2 spaces instead of 4
  * Default env to "development" again [aheckmann]
  * Removed _context_ option is no more, use "scope"
  * Fixed; exposing _./support_ libs to examples so they can run without installs
  * Fixed mvc example

1.0.0rc3 / 2010-09-20
==================

  * Added confirmation for `express(1)` app generation. Closes #391
  * Added extending of flash formatters via `app.flashFormatters`
  * Added flash formatter support. Closes #411
  * Added streaming support to `res.sendfile()` using `sys.pump()` when >= "stream threshold"
  * Added _stream threshold_ setting for `res.sendfile()`
  * Added `res.send()` __HEAD__ support
  * Added `res.clearCookie()`
  * Added `res.cookie()`
  * Added `res.render()` headers option
  * Added `res.redirect()` response bodies
  * Added `res.render()` status option support. Closes #425 [thanks aheckmann]
  * Fixed `res.sendfile()` responding with 403 on malicious path
  * Fixed `res.download()` bug; when an error occurs remove _Content-Disposition_
  * Fixed; mounted apps settings now inherit from parent app [aheckmann]
  * Fixed; stripping Content-Length / Content-Type when 204
  * Fixed `res.send()` 204. Closes #419
  * Fixed multiple _Set-Cookie_ headers via `res.header()`. Closes #402
  * Fixed bug messing with error handlers when `listenFD()` is called instead of `listen()`. [thanks guillermo]


1.0.0rc2 / 2010-08-17
==================

  * Added `app.register()` for template engine mapping. Closes #390
  * Added `res.render()` callback support as second argument (no options)
  * Added callback support to `res.download()`
  * Added callback support for `res.sendfile()`
  * Added support for middleware access via `express.middlewareName()` vs `connect.middlewareName()`
  * Added "partials" setting to docs
  * Added default expresso tests to `express(1)` generated app. Closes #384
  * Fixed `res.sendfile()` error handling, defer via `next()`
  * Fixed `res.render()` callback when a layout is used [thanks guillermo]
  * Fixed; `make install` creating ~/.node_libraries when not present
  * Fixed issue preventing error handlers from being defined anywhere. Closes #387

1.0.0rc / 2010-07-28
==================

  * Added mounted hook. Closes #369
  * Added connect dependency to _package.json_

  * Removed "reload views" setting and support code
    development env never caches, production always caches.

  * Removed _param_ in route callbacks, signature is now
    simply (req, res, next), previously (req, res, params, next).
    Use _req.params_ for path captures, _req.query_ for GET params.

  * Fixed "home" setting
  * Fixed middleware/router precedence issue. Closes #366
  * Fixed; _configure()_ callbacks called immediately. Closes #368

1.0.0beta2 / 2010-07-23
==================

  * Added more examples
  * Added; exporting `Server` constructor
  * Added `Server#helpers()` for view locals
  * Added `Server#dynamicHelpers()` for dynamic view locals. Closes #349
  * Added support for absolute view paths
  * Added; _home_ setting defaults to `Server#route` for mounted apps. Closes #363
  * Added Guillermo Rauch to the contributor list
  * Added support for "as" for non-collection partials. Closes #341
  * Fixed _install.sh_, ensuring _~/.node_libraries_ exists. Closes #362 [thanks jf]
  * Fixed `res.render()` exceptions, now passed to `next()` when no callback is given [thanks guillermo]
  * Fixed instanceof `Array` checks, now `Array.isArray()`
  * Fixed express(1) expansion of public dirs. Closes #348
  * Fixed middleware precedence. Closes #345
  * Fixed view watcher, now async [thanks aheckmann]

1.0.0beta / 2010-07-15
==================

  * Re-write
    - much faster
    - much lighter
    - Check [ExpressJS.com](http://expressjs.com) for migration guide and updated docs

0.14.0 / 2010-06-15
==================

  * Utilize relative requires
  * Added Static bufferSize option [aheckmann]
  * Fixed caching of view and partial subdirectories [aheckmann]
  * Fixed mime.type() comments now that ".ext" is not supported
  * Updated haml submodule
  * Updated class submodule
  * Removed bin/express

0.13.0 / 2010-06-01
==================

  * Added node v0.1.97 compatibility
  * Added support for deleting cookies via Request#cookie('key', null)
  * Updated haml submodule
  * Fixed not-found page, now using using charset utf-8
  * Fixed show-exceptions page, now using using charset utf-8
  * Fixed view support due to fs.readFile Buffers
  * Changed; mime.type() no longer accepts ".type" due to node extname() changes

0.12.0 / 2010-05-22
==================

  * Added node v0.1.96 compatibility
  * Added view `helpers` export which act as additional local variables
  * Updated haml submodule
  * Changed ETag; removed inode, modified time only
  * Fixed LF to CRLF for setting multiple cookies
  * Fixed cookie complation; values are now urlencoded
  * Fixed cookies parsing; accepts quoted values and url escaped cookies

0.11.0 / 2010-05-06
==================

  * Added support for layouts using different engines
    - this.render('page.html.haml', { layout: 'super-cool-layout.html.ejs' })
    - this.render('page.html.haml', { layout: 'foo' }) // assumes 'foo.html.haml'
    - this.render('page.html.haml', { layout: false }) // no layout
  * Updated ext submodule
  * Updated haml submodule
  * Fixed EJS partial support by passing along the context. Issue #307

0.10.1 / 2010-05-03
==================

  * Fixed binary uploads.

0.10.0 / 2010-04-30
==================

  * Added charset support via Request#charset (automatically assigned to 'UTF-8' when respond()'s
    encoding is set to 'utf8' or 'utf-8'.
  * Added "encoding" option to Request#render(). Closes #299
  * Added "dump exceptions" setting, which is enabled by default.
  * Added simple ejs template engine support
  * Added error reponse support for text/plain, application/json. Closes #297
  * Added callback function param to Request#error()
  * Added Request#sendHead()
  * Added Request#stream()
  * Added support for Request#respond(304, null) for empty response bodies
  * Added ETag support to Request#sendfile()
  * Added options to Request#sendfile(), passed to fs.createReadStream()
  * Added filename arg to Request#download()
  * Performance enhanced due to pre-reversing plugins so that plugins.reverse() is not called on each request
  * Performance enhanced by preventing several calls to toLowerCase() in Router#match()
  * Changed; Request#sendfile() now streams
  * Changed; Renamed Request#halt() to Request#respond(). Closes #289
  * Changed; Using sys.inspect() instead of JSON.encode() for error output
  * Changed; run() returns the http.Server instance. Closes #298
  * Changed; Defaulting Server#host to null (INADDR_ANY)
  * Changed; Logger "common" format scale of 0.4f
  * Removed Logger "request" format
  * Fixed; Catching ENOENT in view caching, preventing error when "views/partials" is not found
  * Fixed several issues with http client
  * Fixed Logger Content-Length output
  * Fixed bug preventing Opera from retaining the generated session id. Closes #292

0.9.0 / 2010-04-14
==================

  * Added DSL level error() route support
  * Added DSL level notFound() route support
  * Added Request#error()
  * Added Request#notFound()
  * Added Request#render() callback function. Closes #258
  * Added "max upload size" setting
  * Added "magic" variables to collection partials (\_\_index\_\_, \_\_length\_\_, \_\_isFirst\_\_, \_\_isLast\_\_). Closes #254
  * Added [haml.js](http://github.com/visionmedia/haml.js) submodule; removed haml-js
  * Added callback function support to Request#halt() as 3rd/4th arg
  * Added preprocessing of route param wildcards using param(). Closes #251
  * Added view partial support (with collections etc)
  * Fixed bug preventing falsey params (such as ?page=0). Closes #286
  * Fixed setting of multiple cookies. Closes #199
  * Changed; view naming convention is now NAME.TYPE.ENGINE (for example page.html.haml)
  * Changed; session cookie is now httpOnly
  * Changed; Request is no longer global
  * Changed; Event is no longer global
  * Changed; "sys" module is no longer global
  * Changed; moved Request#download to Static plugin where it belongs
  * Changed; Request instance created before body parsing. Closes #262
  * Changed; Pre-caching views in memory when "cache view contents" is enabled. Closes #253
  * Changed; Pre-caching view partials in memory when "cache view partials" is enabled
  * Updated support to node --version 0.1.90
  * Updated dependencies
  * Removed set("session cookie") in favour of use(Session, { cookie: { ... }})
  * Removed utils.mixin(); use Object#mergeDeep()

0.8.0 / 2010-03-19
==================

  * Added coffeescript example app. Closes #242
  * Changed; cache api now async friendly. Closes #240
  * Removed deprecated 'express/static' support. Use 'express/plugins/static'

0.7.6 / 2010-03-19
==================

  * Added Request#isXHR. Closes #229
  * Added `make install` (for the executable)
  * Added `express` executable for setting up simple app templates
  * Added "GET /public/*" to Static plugin, defaulting to <root>/public
  * Added Static plugin
  * Fixed; Request#render() only calls cache.get() once
  * Fixed; Namespacing View caches with "view:"
  * Fixed; Namespacing Static caches with "static:"
  * Fixed; Both example apps now use the Static plugin
  * Fixed set("views"). Closes #239
  * Fixed missing space for combined log format
  * Deprecated Request#sendfile() and 'express/static'
  * Removed Server#running

0.7.5 / 2010-03-16
==================

  * Added Request#flash() support without args, now returns all flashes
  * Updated ext submodule

0.7.4 / 2010-03-16
==================

  * Fixed session reaper
  * Changed; class.js replacing js-oo Class implementation (quite a bit faster, no browser cruft)

0.7.3 / 2010-03-16
==================

  * Added package.json
  * Fixed requiring of haml / sass due to kiwi removal

0.7.2 / 2010-03-16
==================

  * Fixed GIT submodules (HAH!)

0.7.1 / 2010-03-16
==================

  * Changed; Express now using submodules again until a PM is adopted
  * Changed; chat example using millisecond conversions from ext

0.7.0 / 2010-03-15
==================

  * Added Request#pass() support (finds the next matching route, or the given path)
  * Added Logger plugin (default "common" format replaces CommonLogger)
  * Removed Profiler plugin
  * Removed CommonLogger plugin

0.6.0 / 2010-03-11
==================

  * Added seed.yml for kiwi package management support
  * Added HTTP client query string support when method is GET. Closes #205

  * Added support for arbitrary view engines.
    For example "foo.engine.html" will now require('engine'),
    the exports from this module are cached after the first require().

  * Added async plugin support

  * Removed usage of RESTful route funcs as http client
    get() etc, use http.get() and friends

  * Removed custom exceptions

0.5.0 / 2010-03-10
==================

  * Added ext dependency (library of js extensions)
  * Removed extname() / basename() utils. Use path module
  * Removed toArray() util. Use arguments.values
  * Removed escapeRegexp() util. Use RegExp.escape()
  * Removed process.mixin() dependency. Use utils.mixin()
  * Removed Collection
  * Removed ElementCollection
  * Shameless self promotion of ebook "Advanced JavaScript" (http://dev-mag.com)  ;)

0.4.0 / 2010-02-11
==================

  * Added flash() example to sample upload app
  * Added high level restful http client module (express/http)
  * Changed; RESTful route functions double as HTTP clients. Closes #69
  * Changed; throwing error when routes are added at runtime
  * Changed; defaulting render() context to the current Request. Closes #197
  * Updated haml submodule

0.3.0 / 2010-02-11
==================

  * Updated haml / sass submodules. Closes #200
  * Added flash message support. Closes #64
  * Added accepts() now allows multiple args. fixes #117
  * Added support for plugins to halt. Closes #189
  * Added alternate layout support. Closes #119
  * Removed Route#run(). Closes #188
  * Fixed broken specs due to use(Cookie) missing

0.2.1 / 2010-02-05
==================

  * Added "plot" format option for Profiler (for gnuplot processing)
  * Added request number to Profiler plugin
  * Fixed binary encoding for multi-part file uploads, was previously defaulting to UTF8
  * Fixed issue with routes not firing when not files are present. Closes #184
  * Fixed process.Promise -> events.Promise

0.2.0 / 2010-02-03
==================

  * Added parseParam() support for name[] etc. (allows for file inputs with "multiple" attr) Closes #180
  * Added Both Cache and Session option "reapInterval" may be "reapEvery". Closes #174
  * Added expiration support to cache api with reaper. Closes #133
  * Added cache Store.Memory#reap()
  * Added Cache; cache api now uses first class Cache instances
  * Added abstract session Store. Closes #172
  * Changed; cache Memory.Store#get() utilizing Collection
  * Renamed MemoryStore -> Store.Memory
  * Fixed use() of the same plugin several time will always use latest options. Closes #176

0.1.0 / 2010-02-03
==================

  * Changed; Hooks (before / after) pass request as arg as well as evaluated in their context
  * Updated node support to 0.1.27 Closes #169
  * Updated dirname(__filename) -> __dirname
  * Updated libxmljs support to v0.2.0
  * Added session support with memory store / reaping
  * Added quick uid() helper
  * Added multi-part upload support
  * Added Sass.js support / submodule
  * Added production env caching view contents and static files
  * Added static file caching. Closes #136
  * Added cache plugin with memory stores
  * Added support to StaticFile so that it works with non-textual files.
  * Removed dirname() helper
  * Removed several globals (now their modules must be required)

0.0.2 / 2010-01-10
==================

  * Added view benchmarks; currently haml vs ejs
  * Added Request#attachment() specs. Closes #116
  * Added use of node's parseQuery() util. Closes #123
  * Added `make init` for submodules
  * Updated Haml
  * Updated sample chat app to show messages on load
  * Updated libxmljs parseString -> parseHtmlString
  * Fixed `make init` to work with older versions of git
  * Fixed specs can now run independant specs for those who cant build deps. Closes #127
  * Fixed issues introduced by the node url module changes. Closes 126.
  * Fixed two assertions failing due to Collection#keys() returning strings
  * Fixed faulty Collection#toArray() spec due to keys() returning strings
  * Fixed `make test` now builds libxmljs.node before testing

0.0.1 / 2010-01-03
==================

  * Initial release

# buffer-crc32

[![Build Status](https://secure.travis-ci.org/brianloveswords/buffer-crc32.png?branch=master)](http://travis-ci.org/brianloveswords/buffer-crc32)

crc32 that works with binary data and fancy character sets, outputs
buffer, signed or unsigned data and has tests.

Derived from the sample CRC implementation in the PNG specification: http://www.w3.org/TR/PNG/#D-CRCAppendix

# install
```
npm install buffer-crc32
```

# example
```js
var crc32 = require('buffer-crc32');
// works with buffers
var buf = Buffer([0x00, 0x73, 0x75, 0x70, 0x20, 0x62, 0x72, 0x6f, 0x00])
crc32(buf) // -> <Buffer 94 5a ab 4a>

// has convenience methods for getting signed or unsigned ints
crc32.signed(buf) // -> -1805997238
crc32.unsigned(buf) // -> 2488970058

// will cast to buffer if given a string, so you can
// directly use foreign characters safely
crc32('Ëá™ÂãïË≤©Â£≤Ê©ü') // -> <Buffer cb 03 1a c5>

// and works in append mode too
var partialCrc = crc32('hey');
var partialCrc = crc32(' ', partialCrc);
var partialCrc = crc32('sup', partialCrc);
var partialCrc = crc32(' ', partialCrc);
var finalCrc = crc32('bros', partialCrc); // -> <Buffer 47 fa 55 70>
```

# tests
This was tested against the output of zlib's crc32 method. You can run
the tests with`npm test` (requires tap)

# see also
https://github.com/alexgorbatchev/node-crc, `crc.buffer.crc32` also
supports buffer inputs and return unsigned ints (thanks @tjholowaychuk).

# license
MIT/X11


0.6.1 / 2012-06-01 
==================

  * Added: append (yes or no) on confirmation
  * Added: allow node.js v0.7.x

0.6.0 / 2012-04-10 
==================

  * Added `.prompt(obj, callback)` support. Closes #49
  * Added default support to .choose(). Closes #41
  * Fixed the choice example

0.5.1 / 2011-12-20 
==================

  * Fixed `password()` for recent nodes. Closes #36

0.5.0 / 2011-12-04 
==================

  * Added sub-command option support [itay]

0.4.3 / 2011-12-04 
==================

  * Fixed custom help ordering. Closes #32

0.4.2 / 2011-11-24 
==================

  * Added travis support
  * Fixed: line-buffered input automatically trimmed. Closes #31

0.4.1 / 2011-11-18 
==================

  * Removed listening for "close" on --help

0.4.0 / 2011-11-15 
==================

  * Added support for `--`. Closes #24

0.3.3 / 2011-11-14 
==================

  * Fixed: wait for close event when writing help info [Jerry Hamlet]

0.3.2 / 2011-11-01 
==================

  * Fixed long flag definitions with values [felixge]

0.3.1 / 2011-10-31 
==================

  * Changed `--version` short flag to `-V` from `-v`
  * Changed `.version()` so it's configurable [felixge]

0.3.0 / 2011-10-31 
==================

  * Added support for long flags only. Closes #18

0.2.1 / 2011-10-24 
==================

  * "node": ">= 0.4.x < 0.7.0". Closes #20

0.2.0 / 2011-09-26 
==================

  * Allow for defaults that are not just boolean. Default peassignment only occurs for --no-*, optional, and required arguments. [Jim Isaacs]

0.1.0 / 2011-08-24 
==================

  * Added support for custom `--help` output

0.0.5 / 2011-08-18 
==================

  * Changed: when the user enters nothing prompt for password again
  * Fixed issue with passwords beginning with numbers [NuckChorris]

0.0.4 / 2011-08-15 
==================

  * Fixed `Commander#args`

0.0.3 / 2011-08-15 
==================

  * Added default option value support

0.0.2 / 2011-08-15 
==================

  * Added mask support to `Command#password(str[, mask], fn)`
  * Added `Command#password(str, fn)`

0.0.1 / 2010-01-03
==================

  * Initial release

# Commander.js

  The complete solution for [node.js](http://nodejs.org) command-line interfaces, inspired by Ruby's [commander](https://github.com/visionmedia/commander).

 [![Build Status](https://secure.travis-ci.org/visionmedia/commander.js.png)](http://travis-ci.org/visionmedia/commander.js)

## Installation

    $ npm install commander

## Option parsing

 Options with commander are defined with the `.option()` method, also serving as documentation for the options. The example below parses args and options from `process.argv`, leaving remaining args as the `program.args` array which were not consumed by options.

```js
#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander');

program
  .version('0.0.1')
  .option('-p, --peppers', 'Add peppers')
  .option('-P, --pineapple', 'Add pineapple')
  .option('-b, --bbq', 'Add bbq sauce')
  .option('-c, --cheese [type]', 'Add the specified type of cheese [marble]', 'marble')
  .parse(process.argv);

console.log('you ordered a pizza with:');
if (program.peppers) console.log('  - peppers');
if (program.pineapple) console.log('  - pineappe');
if (program.bbq) console.log('  - bbq');
console.log('  - %s cheese', program.cheese);
```

 Short flags may be passed as a single arg, for example `-abc` is equivalent to `-a -b -c`. Multi-word options such as "--template-engine" are camel-cased, becoming `program.templateEngine` etc.

## Automated --help

 The help information is auto-generated based on the information commander already knows about your program, so the following `--help` info is for free:

```  
 $ ./examples/pizza --help

   Usage: pizza [options]

   Options:

     -V, --version        output the version number
     -p, --peppers        Add peppers
     -P, --pineapple      Add pineappe
     -b, --bbq            Add bbq sauce
     -c, --cheese <type>  Add the specified type of cheese [marble]
     -h, --help           output usage information

```

## Coercion

```js
function range(val) {
  return val.split('..').map(Number);
}

function list(val) {
  return val.split(',');
}

program
  .version('0.0.1')
  .usage('[options] <file ...>')
  .option('-i, --integer <n>', 'An integer argument', parseInt)
  .option('-f, --float <n>', 'A float argument', parseFloat)
  .option('-r, --range <a>..<b>', 'A range', range)
  .option('-l, --list <items>', 'A list', list)
  .option('-o, --optional [value]', 'An optional value')
  .parse(process.argv);

console.log(' int: %j', program.integer);
console.log(' float: %j', program.float);
console.log(' optional: %j', program.optional);
program.range = program.range || [];
console.log(' range: %j..%j', program.range[0], program.range[1]);
console.log(' list: %j', program.list);
console.log(' args: %j', program.args);
```

## Custom help

 You can display arbitrary `-h, --help` information
 by listening for "--help". Commander will automatically
 exit once you are done so that the remainder of your program
 does not execute causing undesired behaviours, for example
 in the following executable "stuff" will not output when
 `--help` is used.

```js
#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('../');

function list(val) {
  return val.split(',').map(Number);
}

program
  .version('0.0.1')
  .option('-f, --foo', 'enable some foo')
  .option('-b, --bar', 'enable some bar')
  .option('-B, --baz', 'enable some baz');

// must be before .parse() since
// node's emit() is immediate

program.on('--help', function(){
  console.log('  Examples:');
  console.log('');
  console.log('    $ custom-help --help');
  console.log('    $ custom-help -h');
  console.log('');
});

program.parse(process.argv);

console.log('stuff');
```

yielding the following help output:

```

Usage: custom-help [options]

Options:

  -h, --help     output usage information
  -V, --version  output the version number
  -f, --foo      enable some foo
  -b, --bar      enable some bar
  -B, --baz      enable some baz

Examples:

  $ custom-help --help
  $ custom-help -h

```

## .prompt(msg, fn)

 Single-line prompt:

```js
program.prompt('name: ', function(name){
  console.log('hi %s', name);
});
```

 Multi-line prompt:

```js
program.prompt('description:', function(name){
  console.log('hi %s', name);
});
```

 Coercion:

```js
program.prompt('Age: ', Number, function(age){
  console.log('age: %j', age);
});
```

```js
program.prompt('Birthdate: ', Date, function(date){
  console.log('date: %s', date);
});
```

## .password(msg[, mask], fn)

Prompt for password without echoing:

```js
program.password('Password: ', function(pass){
  console.log('got "%s"', pass);
  process.stdin.destroy();
});
```

Prompt for password with mask char "*":

```js
program.password('Password: ', '*', function(pass){
  console.log('got "%s"', pass);
  process.stdin.destroy();
});
```

## .confirm(msg, fn)

 Confirm with the given `msg`:

```js
program.confirm('continue? ', function(ok){
  console.log(' got %j', ok);
});
```

## .choose(list, fn)

 Let the user choose from a `list`:

```js
var list = ['tobi', 'loki', 'jane', 'manny', 'luna'];

console.log('Choose the coolest pet:');
program.choose(list, function(i){
  console.log('you chose %d "%s"', i, list[i]);
});
```

## Links

 - [API documentation](http://visionmedia.github.com/commander.js/)
 - [ascii tables](https://github.com/LearnBoost/cli-table)
 - [progress bars](https://github.com/visionmedia/node-progress)
 - [more progress bars](https://github.com/substack/node-multimeter)
 - [examples](https://github.com/visionmedia/commander.js/tree/master/examples)

## License 

(The MIT License)

Copyright (c) 2011 TJ Holowaychuk &lt;tj@vision-media.ca&gt;

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# buffer-crc32

[![Build Status](https://secure.travis-ci.org/brianloveswords/buffer-crc32.png?branch=master)](http://travis-ci.org/brianloveswords/buffer-crc32)

crc32 that works with binary data and fancy character sets, outputs
buffer, signed or unsigned data and has tests.

Derived from the sample CRC implementation in the PNG specification: http://www.w3.org/TR/PNG/#D-CRCAppendix

# install
```
npm install buffer-crc32
```

# example
```js
var crc32 = require('buffer-crc32');
// works with buffers
var buf = Buffer([[0x00, 0x73, 0x75, 0x70, 0x20, 0x62, 0x72, 0x6f, 0x00])
crc32(buf) // -> <Buffer 94 5a ab 4a>

// has convenience methods for getting signed or unsigned ints
crc32.signed(buf) // -> -1805997238
crc32.unsigned(buf) // -> 2488970058

// will cast to buffer if given a string, so you can
// directly use foreign characters safely
crc32('Ëá™ÂãïË≤©Â£≤Ê©ü') // -> <Buffer cb 03 1a c5>
```

# tests
This was tested against the output of zlib's crc32 method. You can run
the tests with`npm test` (requires tap)


0.2.0 / 2012-10-28 
==================

  * bytes(200).should.eql('200b')

0.1.0 / 2012-07-04 
==================

  * add bytes to string conversion [yields]

# node-bytes

  Byte string parser / formatter.

## Example:

```js
bytes('1kb')
// => 1024

bytes('2mb')
// => 2097152

bytes('1gb')
// => 1073741824

bytes(1073741824)
// => 1gb
```

## Installation

```
$ npm install bytes
$ component install visionmedia/bytes.js
```

## License 

(The MIT License)

Copyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# Gently

## Purpose

A node.js module that helps with stubbing and behavior verification. It allows you to test the most remote and nested corners of your code while keeping being fully unobtrusive.

## Features

* Overwrite and stub individual object functions
* Verify that all expected calls have been made in the expected order
* Restore stubbed functions to their original behavior
* Detect object / class names from obj.constructor.name and obj.toString()
* Hijack any required module function or class constructor

## Installation

Via [npm](http://github.com/isaacs/npm):

    npm install gently@latest

## Example

Make sure your dog is working properly:

    function Dog() {}

    Dog.prototype.seeCat = function() {
      this.bark('whuf, whuf');
      this.run();
    }

    Dog.prototype.bark = function(bark) {
      require('sys').puts(bark);
    }

    var gently = new (require('gently'))
      , assert = require('assert')
      , dog = new Dog();

    gently.expect(dog, 'bark', function(bark) {
      assert.equal(bark, 'whuf, whuf');
    });
    gently.expect(dog, 'run');

    dog.seeCat();

You can also easily test event emitters with this, for example a simple sequence of 2 events emitted by `fs.WriteStream`:

    var gently = new (require('gently'))
      , stream = new (require('fs').WriteStream)('my_file.txt');

    gently.expect(stream, 'emit', function(event) {
      assert.equal(event, 'open');
    });

    gently.expect(stream, 'emit', function(event) {
      assert.equal(event, 'drain');
    });

For a full read world example, check out this test case: [test-incoming-form.js](http://github.com/felixge/node-formidable/blob/master/test/simple/test-incoming-form.js) (in [node-formdiable](http://github.com/felixge/node-formidable)).

## API

### Gently

#### new Gently()

Creates a new gently instance. It listens to the process `'exit'` event to make sure all expectations have been verified.

#### gently.expect(obj, method, [[count], stubFn])

Creates an expectation for an objects method to be called. You can optionally specify the call `count` you are expecting, as well as `stubFn` function that will run instead of the original function.

Returns a reference to the function that is getting overwritten.

#### gently.expect([count], stubFn)

Returns a function that is supposed to be executed `count` times, delegating any calls to the provided `stubFn` function. Naming your stubFn closure will help to properly diagnose errors that are being thrown:

    childProcess.exec('ls', gently.expect(function lsCallback(code) {
      assert.equal(0, code);
    }));

#### gently.restore(obj, method)

Restores an object method that has been previously overwritten using `gently.expect()`.

#### gently.hijack(realRequire)

Returns a new require functions that catches a reference to all required modules into `gently.hijacked`.

To use this function, include a line like this in your `'my-module.js'`.

    if (global.GENTLY) require = GENTLY.hijack(require);

    var sys = require('sys');
    exports.hello = function() {
      sys.log('world');
    };

Now you can write a test for the module above:

    var gently = global.GENTLY = new (require('gently'))
      , myModule = require('./my-module');

    gently.expect(gently.hijacked.sys, 'log', function(str) {
      assert.equal(str, 'world');
    });

    myModule.hello();

#### gently.stub(location, [exportsName])

Returns a stub class that will be used instead of the real class from the module at `location` with the given `exportsName`.

This allows to test an OOP version of the previous example, where `'my-module.js'`.

    if (global.GENTLY) require = GENTLY.hijack(require);

    var World = require('./world');

    exports.hello = function() {
      var world = new World();
      world.hello();
    }

And `world.js` looks like this:

    var sys = require('sys');

    function World() {

    }
    module.exports = World;

    World.prototype.hello = function() {
      sys.log('world');
    };

Testing `'my-module.js'` can now easily be accomplished:

    var gently = global.GENTLY = new (require('gently'))
      , WorldStub = gently.stub('./world')
      , myModule = require('./my-module')
      , WORLD;

    gently.expect(WorldStub, 'new', function() {
      WORLD = this;
    });

    gently.expect(WORLD, 'hello');

    myModule.hello();

#### gently.hijacked

An object that holds the references to all hijacked modules.

#### gently.verify([msg])

Verifies that all expectations of this gently instance have been satisfied. If not called manually, this method is called when the process `'exit'` event is fired.

If `msg` is given, it will appear in any error that might be thrown.

## License

Gently is licensed under the MIT license.
# Formidable

[![Build Status](https://secure.travis-ci.org/felixge/node-formidable.png?branch=master)](http://travis-ci.org/felixge/node-formidable)

## Purpose

A node.js module for parsing form data, especially file uploads.

## Current status

This module was developed for [Transloadit](http://transloadit.com/), a service focused on uploading
and encoding images and videos. It has been battle-tested against hundreds of GB of file uploads from
a large variety of clients and is considered production-ready.

## Features

* Fast (~500mb/sec), non-buffering multipart parser
* Automatically writing file uploads to disk
* Low memory footprint
* Graceful error handling
* Very high test coverage

## Changelog

### v1.0.9

* Emit progress when content length header parsed (Tim Kosch√ºtzki)
* Fix Readme syntax due to GitHub changes (goob)
* Replace references to old 'sys' module in Readme with 'util' (Peter Sugihara)

### v1.0.8

* Strip potentially unsafe characters when using `keepExtensions: true`.
* Switch to utest / urun for testing
* Add travis build

### v1.0.7

* Remove file from package that was causing problems when installing on windows. (#102)
* Fix typos in Readme (Jason Davies).

### v1.0.6

* Do not default to the default to the field name for file uploads where
  filename="".

### v1.0.5

* Support filename="" in multipart parts
* Explain unexpected end() errors in parser better

**Note:** Starting with this version, formidable emits 'file' events for empty
file input fields. Previously those were incorrectly emitted as regular file
input fields with value = "".

### v1.0.4

* Detect a good default tmp directory regardless of platform. (#88)

### v1.0.3

* Fix problems with utf8 characters (#84) / semicolons in filenames (#58)
* Small performance improvements
* New test suite and fixture system

### v1.0.2

* Exclude node\_modules folder from git
* Implement new `'aborted'` event
* Fix files in example folder to work with recent node versions
* Make gently a devDependency

[See Commits](https://github.com/felixge/node-formidable/compare/v1.0.1...v1.0.2)

### v1.0.1

* Fix package.json to refer to proper main directory. (#68, Dean Landolt)

[See Commits](https://github.com/felixge/node-formidable/compare/v1.0.0...v1.0.1)

### v1.0.0

* Add support for multipart boundaries that are quoted strings. (Jeff Craig)

This marks the beginning of development on version 2.0 which will include
several architectural improvements.

[See Commits](https://github.com/felixge/node-formidable/compare/v0.9.11...v1.0.0)

### v0.9.11

* Emit `'progress'` event when receiving data, regardless of parsing it. (Tim Kosch√ºtzki)
* Use [W3C FileAPI Draft](http://dev.w3.org/2006/webapi/FileAPI/) properties for File class

**Important:** The old property names of the File class will be removed in a
future release.

[See Commits](https://github.com/felixge/node-formidable/compare/v0.9.10...v0.9.11)

### Older releases

These releases were done before starting to maintain the above Changelog:

* [v0.9.10](https://github.com/felixge/node-formidable/compare/v0.9.9...v0.9.10)
* [v0.9.9](https://github.com/felixge/node-formidable/compare/v0.9.8...v0.9.9)
* [v0.9.8](https://github.com/felixge/node-formidable/compare/v0.9.7...v0.9.8)
* [v0.9.7](https://github.com/felixge/node-formidable/compare/v0.9.6...v0.9.7)
* [v0.9.6](https://github.com/felixge/node-formidable/compare/v0.9.5...v0.9.6)
* [v0.9.5](https://github.com/felixge/node-formidable/compare/v0.9.4...v0.9.5)
* [v0.9.4](https://github.com/felixge/node-formidable/compare/v0.9.3...v0.9.4)
* [v0.9.3](https://github.com/felixge/node-formidable/compare/v0.9.2...v0.9.3)
* [v0.9.2](https://github.com/felixge/node-formidable/compare/v0.9.1...v0.9.2)
* [v0.9.1](https://github.com/felixge/node-formidable/compare/v0.9.0...v0.9.1)
* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)
* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)
* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)
* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)
* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)
* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)
* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)
* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)
* [v0.1.0](https://github.com/felixge/node-formidable/commits/v0.1.0)

## Installation

Via [npm](http://github.com/isaacs/npm):

    npm install formidable@latest

Manually:

    git clone git://github.com/felixge/node-formidable.git formidable
    vim my.js
    # var formidable = require('./formidable');

Note: Formidable requires [gently](http://github.com/felixge/node-gently) to run the unit tests, but you won't need it for just using the library.

## Example

Parse an incoming file upload.

    var formidable = require('formidable'),
        http = require('http'),

        util = require('util');

    http.createServer(function(req, res) {
      if (req.url == '/upload' && req.method.toLowerCase() == 'post') {
        // parse a file upload
        var form = new formidable.IncomingForm();
        form.parse(req, function(err, fields, files) {
          res.writeHead(200, {'content-type': 'text/plain'});
          res.write('received upload:\n\n');
          res.end(util.inspect({fields: fields, files: files}));
        });
        return;
      }

      // show a file upload form
      res.writeHead(200, {'content-type': 'text/html'});
      res.end(
        '<form action="/upload" enctype="multipart/form-data" method="post">'+
        '<input type="text" name="title"><br>'+
        '<input type="file" name="upload" multiple="multiple"><br>'+
        '<input type="submit" value="Upload">'+
        '</form>'
      );
    }).listen(80);

## API

### formidable.IncomingForm

__new formidable.IncomingForm()__

Creates a new incoming form.

__incomingForm.encoding = 'utf-8'__

The encoding to use for incoming form fields.

__incomingForm.uploadDir = process.env.TMP || '/tmp' || process.cwd()__

The directory for placing file uploads in. You can move them later on using
`fs.rename()`. The default directory is picked at module load time depending on
the first existing directory from those listed above.

__incomingForm.keepExtensions = false__

If you want the files written to `incomingForm.uploadDir` to include the extensions of the original files, set this property to `true`.

__incomingForm.type__

Either 'multipart' or 'urlencoded' depending on the incoming request.

__incomingForm.maxFieldsSize = 2 * 1024 * 1024__

Limits the amount of memory a field (not file) can allocate in bytes.
If this value is exceeded, an `'error'` event is emitted. The default
size is 2MB.

__incomingForm.hash = false__

If you want checksums calculated for incoming files, set this to either `'sha1'` or `'md5'`.

__incomingForm.bytesReceived__

The amount of bytes received for this form so far.

__incomingForm.bytesExpected__

The expected number of bytes in this form.

__incomingForm.parse(request, [cb])__

Parses an incoming node.js `request` containing form data. If `cb` is provided, all fields an files are collected and passed to the callback:

    incomingForm.parse(req, function(err, fields, files) {
      // ...
    });

__incomingForm.onPart(part)__

You may overwrite this method if you are interested in directly accessing the multipart stream. Doing so will disable any `'field'` / `'file'` events  processing which would occur otherwise, making you fully responsible for handling the processing.

    incomingForm.onPart = function(part) {
      part.addListener('data', function() {
        // ...
      });
    }

If you want to use formidable to only handle certain parts for you, you can do so:

    incomingForm.onPart = function(part) {
      if (!part.filename) {
        // let formidable handle all non-file parts
        incomingForm.handlePart(part);
      }
    }

Check the code in this method for further inspiration.

__Event: 'progress' (bytesReceived, bytesExpected)__

Emitted after each incoming chunk of data that has been parsed. Can be used to roll your own progress bar.

__Event: 'field' (name, value)__

Emitted whenever a field / value pair has been received.

__Event: 'fileBegin' (name, file)__

Emitted whenever a new file is detected in the upload stream. Use this even if
you want to stream the file to somewhere else while buffering the upload on
the file system.

__Event: 'file' (name, file)__

Emitted whenever a field / file pair has been received. `file` is an instance of `File`.

__Event: 'error' (err)__

Emitted when there is an error processing the incoming form. A request that experiences an error is automatically paused, you will have to manually call `request.resume()` if you want the request to continue firing `'data'` events.

__Event: 'aborted'__

Emitted when the request was aborted by the user. Right now this can be due to a 'timeout' or 'close' event on the socket. In the future there will be a separate 'timeout' event (needs a change in the node core).

__Event: 'end' ()__

Emitted when the entire request has been received, and all contained files have finished flushing to disk. This is a great place for you to send your response.

### formidable.File

__file.size = 0__

The size of the uploaded file in bytes. If the file is still being uploaded (see `'fileBegin'` event), this property says how many bytes of the file have been written to disk yet.

__file.path = null__

The path this file is being written to. You can modify this in the `'fileBegin'` event in
case you are unhappy with the way formidable generates a temporary path for your files.

__file.name = null__

The name this file had according to the uploading client.

__file.type = null__

The mime type of this file, according to the uploading client.

__file.lastModifiedDate = null__

A date object (or `null`) containing the time this file was last written to. Mostly
here for compatibility with the [W3C File API Draft](http://dev.w3.org/2006/webapi/FileAPI/).

__file.hash = null__

If hash calculation was set, you can read the hex digest out of this var.

## License

Formidable is licensed under the MIT license.

## Ports

* [multipart-parser](http://github.com/FooBarWidget/multipart-parser): a C++ parser based on formidable

## Credits

* [Ryan Dahl](http://twitter.com/ryah) for his work on [http-parser](http://github.com/ry/http-parser) which heavily inspired multipart_parser.js

* Opera does not allow submitting this file, it shows a warning to the
  user that the file could not be found instead. Tested in 9.8, 11.51 on OSX.
  Reported to Opera on 08.09.2011 (tracking email DSK-346009@bugs.opera.com).


0.0.1 / 2010-01-03
==================

  * Initial release


# pause

  Pause streams...

## License 

(The MIT License)

Copyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

0.5.1 / 2012-09-18 
==================

  * fix encoded `=`. Closes #43

0.5.0 / 2012-05-04 
==================

  * Added component support

0.4.2 / 2012-02-08 
==================

  * Fixed: ensure objects are created when appropriate not arrays [aheckmann]

0.4.1 / 2012-01-26 
==================

  * Fixed stringify()ing numbers. Closes #23

0.4.0 / 2011-11-21 
==================

  * Allow parsing of an existing object (for `bodyParser()`) [jackyz]
  * Replaced expresso with mocha

0.3.2 / 2011-11-08 
==================

  * Fixed global variable leak

0.3.1 / 2011-08-17 
==================

  * Added `try/catch` around malformed uri components
  * Add test coverage for Array native method bleed-though

0.3.0 / 2011-07-19 
==================

  * Allow `array[index]` and `object[property]` syntaxes [Aria Stewart]

0.2.0 / 2011-06-29 
==================

  * Added `qs.stringify()` [Cory Forsyth]

0.1.0 / 2011-04-13 
==================

  * Added jQuery-ish array support

0.0.7 / 2011-03-13 
==================

  * Fixed; handle empty string and `== null` in `qs.parse()` [dmit]
    allows for convenient `qs.parse(url.parse(str).query)`

0.0.6 / 2011-02-14 
==================

  * Fixed; support for implicit arrays

0.0.4 / 2011-02-09 
==================

  * Fixed `+` as a space

0.0.3 / 2011-02-08 
==================

  * Fixed case when right-hand value contains "]"

0.0.2 / 2011-02-07 
==================

  * Fixed "=" presence in key

0.0.1 / 2011-02-07 
==================

  * Initial release
# node-querystring

  query string parser for node and the browser supporting nesting, as it was removed from `0.3.x`, so this library provides the previous and commonly desired behaviour (and twice as fast). Used by [express](http://expressjs.com), [connect](http://senchalabs.github.com/connect) and others.

## Installation

    $ npm install qs

## Examples

```js
var qs = require('qs');

qs.parse('user[name][first]=Tobi&user[email]=tobi@learnboost.com');
// => { user: { name: { first: 'Tobi' }, email: 'tobi@learnboost.com' } }

qs.stringify({ user: { name: 'Tobi', email: 'tobi@learnboost.com' }})
// => user[name]=Tobi&user[email]=tobi%40learnboost.com
```

## Testing

Install dev dependencies:

    $ npm install -d

and execute:

    $ make test

browser:

    $ open test/browser/index.html

## License 

(The MIT License)

Copyright (c) 2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
[![build status](https://secure.travis-ci.org/senchalabs/connect.png)](http://travis-ci.org/senchalabs/connect)
# Connect

  Connect is an extensible HTTP server framework for [node](http://nodejs.org), providing high performance "plugins" known as _middleware_.

 Connect is bundled with over _20_ commonly used middleware, including
 a logger, session support, cookie parser, and [more](http://senchalabs.github.com/connect). Be sure to view the 2.x [documentation](http://senchalabs.github.com/connect/).

```js
var connect = require('connect')
  , http = require('http');

var app = connect()
  .use(connect.favicon())
  .use(connect.logger('dev'))
  .use(connect.static('public'))
  .use(connect.directory('public'))
  .use(connect.cookieParser())
  .use(connect.session({ secret: 'my secret here' }))
  .use(function(req, res){
    res.end('Hello from Connect!\n');
  });

http.createServer(app).listen(3000);
```

## Middleware

  - [csrf](http://www.senchalabs.org/connect/csrf.html)
  - [basicAuth](http://www.senchalabs.org/connect/basicAuth.html)
  - [bodyParser](http://www.senchalabs.org/connect/bodyParser.html)
  - [json](http://www.senchalabs.org/connect/json.html)
  - [multipart](http://www.senchalabs.org/connect/multipart.html)
  - [urlencoded](http://www.senchalabs.org/connect/urlencoded.html)
  - [cookieParser](http://www.senchalabs.org/connect/cookieParser.html)
  - [directory](http://www.senchalabs.org/connect/directory.html)
  - [compress](http://www.senchalabs.org/connect/compress.html)
  - [errorHandler](http://www.senchalabs.org/connect/errorHandler.html)
  - [favicon](http://www.senchalabs.org/connect/favicon.html)
  - [limit](http://www.senchalabs.org/connect/limit.html)
  - [logger](http://www.senchalabs.org/connect/logger.html)
  - [methodOverride](http://www.senchalabs.org/connect/methodOverride.html)
  - [query](http://www.senchalabs.org/connect/query.html)
  - [responseTime](http://www.senchalabs.org/connect/responseTime.html)
  - [session](http://www.senchalabs.org/connect/session.html)
  - [static](http://www.senchalabs.org/connect/static.html)
  - [staticCache](http://www.senchalabs.org/connect/staticCache.html)
  - [vhost](http://www.senchalabs.org/connect/vhost.html)
  - [subdomains](http://www.senchalabs.org/connect/subdomains.html)
  - [cookieSession](http://www.senchalabs.org/connect/cookieSession.html)

## Running Tests

first:

    $ npm install -d

then:

    $ make test

## Authors

 Below is the output from [git-summary](http://github.com/visionmedia/git-extras).


     project: connect
     commits: 2033
     active : 301 days
     files  : 171
     authors: 
      1414	Tj Holowaychuk          69.6%
       298	visionmedia             14.7%
       191	Tim Caswell             9.4%
        51	TJ Holowaychuk          2.5%
        10	Ryan Olds               0.5%
         8	Astro                   0.4%
         5	Nathan Rajlich          0.2%
         5	Jakub Ne≈°et≈ôil          0.2%
         3	Daniel Dickison         0.1%
         3	David Rio Deiros        0.1%
         3	Alexander Simmerl       0.1%
         3	Andreas Lind Petersen   0.1%
         2	Aaron Heckmann          0.1%
         2	Jacques Crocker         0.1%
         2	Fabian Jakobs           0.1%
         2	Brian J Brennan         0.1%
         2	Adam Malcontenti-Wilson 0.1%
         2	Glen Mailer             0.1%
         2	James Campos            0.1%
         1	Trent Mick              0.0%
         1	Troy Kruthoff           0.0%
         1	Wei Zhu                 0.0%
         1	comerc                  0.0%
         1	darobin                 0.0%
         1	nateps                  0.0%
         1	Marco Sanson            0.0%
         1	Arthur Taylor           0.0%
         1	Aseem Kishore           0.0%
         1	Bart Teeuwisse          0.0%
         1	Cameron Howey           0.0%
         1	Chad Weider             0.0%
         1	Craig Barnes            0.0%
         1	Eran Hammer-Lahav       0.0%
         1	Gregory McWhirter       0.0%
         1	Guillermo Rauch         0.0%
         1	Jae Kwon                0.0%
         1	Jakub Nesetril          0.0%
         1	Joshua Peek             0.0%
         1	Jxck                    0.0%
         1	AJ ONeal                0.0%
         1	Michael Hemesath        0.0%
         1	Morten Siebuhr          0.0%
         1	Samori Gorse            0.0%
         1	Tom Jensen              0.0%

## Node Compatibility

  Connect `< 1.x` is compatible with node 0.2.x


  Connect `1.x` is compatible with node 0.4.x


  Connect (_master_) `2.x` is compatible with node 0.6.x

## CLA

 [http://sencha.com/cla](http://sencha.com/cla)

## License

View the [LICENSE](https://github.com/senchalabs/connect/blob/master/LICENSE) file. The [Silk](http://www.famfamfam.com/lab/icons/silk/) icons used by the `directory` middleware created by/copyright of [FAMFAMFAM](http://www.famfamfam.com/).

# cookie [![Build Status](https://secure.travis-ci.org/shtylman/node-cookie.png?branch=master)](http://travis-ci.org/shtylman/node-cookie) #

cookie is a basic cookie parser and serializer. It doesn't make assumptions about how you are going to deal with your cookies. It basically just provides a way to read and write the HTTP cookie headers.

See [RFC6265](http://tools.ietf.org/html/rfc6265) for details about the http header for cookies.

## how?

```
npm install cookie
```

```javascript
var cookie = require('cookie');

var hdr = cookie.serialize('foo', 'bar');
// hdr = 'foo=bar';

var cookies = cookie.parse('foo=bar; cat=meow; dog=ruff');
// cookies = { foo: 'bar', cat: 'meow', dog: 'ruff' };
```

## more

The serialize function takes a third parameter, an object, to set cookie options. See the RFC for valid values.

### path
> cookie path

### expires
> absolute expiration date for the cookie (Date object)

### maxAge
> relative max age of the cookie from when the client receives it (seconds)

### domain
> domain for the cookie

### secure
> true or false

### httpOnly
> true or false



0.0.1 / 2010-01-03
==================

  * Initial release


# cookie-signature

  Sign and unsign cookies.

## Example

```js
var cookie = require('cookie-signature');

var val = cookie.sign('hello', 'tobiiscool');
val.should.equal('hello.DGDUkGlIkCzPz+C0B064FNgHdEjox7ch8tOBGslZ5QI');

var val = cookie.sign('hello', 'tobiiscool');
cookie.unsign(val, 'tobiiscool').should.equal('hello');
cookie.unsign(val, 'luna').should.be.false;
```

## License 

(The MIT License)

Copyright (c) 2012 LearnBoost &lt;tj@learnboost.com&gt;

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

0.7.2 / 2013-02-06 
==================

  * fix package.json
  * fix: Mobile Safari (private mode) is broken with debug
  * fix: Use unicode to send escape character to shell instead of octal to work with strict mode javascript

0.7.1 / 2013-02-05 
==================

  * add repository URL to package.json
  * add DEBUG_COLORED to force colored output
  * add browserify support
  * fix component. Closes #24

0.7.0 / 2012-05-04 
==================

  * Added .component to package.json
  * Added debug.component.js build

0.6.0 / 2012-03-16 
==================

  * Added support for "-" prefix in DEBUG [Vinay Pulim]
  * Added `.enabled` flag to the node version [TooTallNate] 

0.5.0 / 2012-02-02 
==================

  * Added: humanize diffs. Closes #8
  * Added `debug.disable()` to the CS variant
  * Removed padding. Closes #10
  * Fixed: persist client-side variant again. Closes #9

0.4.0 / 2012-02-01 
==================

  * Added browser variant support for older browsers [TooTallNate]
  * Added `debug.enable('project:*')` to browser variant [TooTallNate]
  * Added padding to diff (moved it to the right)

0.3.0 / 2012-01-26 
==================

  * Added millisecond diff when isatty, otherwise UTC string

0.2.0 / 2012-01-22 
==================

  * Added wildcard support

0.1.0 / 2011-12-02 
==================

  * Added: remove colors unless stderr isatty [TooTallNate]

0.0.1 / 2010-01-03
==================

  * Initial release


# debug

  tiny node.js debugging utility modelled after node core's debugging technique.

## Installation

```
$ npm install debug
```

## Usage

 With `debug` you simply invoke the exported function to generate your debug function, passing it a name which will determine if a noop function is returned, or a decorated `console.error`, so all of the `console` format string goodies you're used to work fine. A unique color is selected per-function for visibility.
 
Example _app.js_:

```js
var debug = require('debug')('http')
  , http = require('http')
  , name = 'My App';

// fake app

debug('booting %s', name);

http.createServer(function(req, res){
  debug(req.method + ' ' + req.url);
  res.end('hello\n');
}).listen(3000, function(){
  debug('listening');
});

// fake worker of some kind

require('./worker');
```

Example _worker.js_:

```js
var debug = require('debug')('worker');

setInterval(function(){
  debug('doing some work');
}, 1000);
```

 The __DEBUG__ environment variable is then used to enable these based on space or comma-delimited names. Here are some examples:

  ![debug http and worker](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png)

  ![debug worker](http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png)

## Millisecond diff

  When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the "+NNNms" will show you how much time was spent between calls.

  ![](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png)

  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:
  
  ![](http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png)

## Conventions

 If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser". 

## Wildcards

  The "*" character may be used as a wildcard. Suppose for example your library has debuggers named "connect:bodyParser", "connect:compress", "connect:session", instead of listing all three with `DEBUG=connect:bodyParser,connect.compress,connect:session`, you may simply do `DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`.

  You can also exclude specific debuggers by prefixing them with a "-" character.  For example, `DEBUG=* -connect:*` would include all debuggers except those starting with "connect:".

## Browser support

 Debug works in the browser as well, currently persisted by `localStorage`. For example if you have `worker:a` and `worker:b` as shown below, and wish to debug both type `debug.enable('worker:*')` in the console and refresh the page, this will remain until you disable with `debug.disable()`. 

```js
a = debug('worker:a');
b = debug('worker:b');

setInterval(function(){
  a('doing some work');
}, 1000);

setInterval(function(){
  a('doing some work');
}, 1200);
```

## License 

(The MIT License)

Copyright (c) 2011 TJ Holowaychuk &lt;tj@vision-media.ca&gt;

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# node-fresh

  HTTP response freshness testing

## fresh(req, res)

 Check freshness of `req` and `res` headers.

 When the cache is "fresh" __true__ is returned,
 otherwise __false__ is returned to indicate that
 the cache is now stale.

## Example:

```js
var req = { 'if-none-match': 'tobi' };
var res = { 'etag': 'luna' };
fresh(req, res);
// => false

var req = { 'if-none-match': 'tobi' };
var res = { 'etag': 'tobi' };
fresh(req, res);
// => true
```

## Installation

```
$ npm install fresh
```
# mkdirp

Like `mkdir -p`, but in node.js!

[![build status](https://secure.travis-ci.org/substack/node-mkdirp.png)](http://travis-ci.org/substack/node-mkdirp)

# example

## pow.js

```js
var mkdirp = require('mkdirp');
    
mkdirp('/tmp/foo/bar/baz', function (err) {
    if (err) console.error(err)
    else console.log('pow!')
});
```

Output

```
pow!
```

And now /tmp/foo/bar/baz exists, huzzah!

# methods

```js
var mkdirp = require('mkdirp');
```

## mkdirp(dir, mode, cb)

Create a new directory and any necessary subdirectories at `dir` with octal
permission string `mode`.

If `mode` isn't specified, it defaults to `0777 & (~process.umask())`.

`cb(err, made)` fires with the error or the first directory `made`
that had to be created, if any.

## mkdirp.sync(dir, mode)

Synchronously create a new directory and any necessary subdirectories at `dir`
with octal permission string `mode`.

If `mode` isn't specified, it defaults to `0777 & (~process.umask())`.

Returns the first directory that had to be created, if any.

# install

With [npm](http://npmjs.org) do:

```
npm install mkdirp
```

# license

MIT


0.0.4 / 2012-06-17 
==================

  * changed: ret -1 for unsatisfiable and -2 when invalid

0.0.3 / 2012-06-17 
==================

  * fix last-byte-pos default to len - 1

0.0.2 / 2012-06-14 
==================

  * add `.type`


# node-range-parser

  Range header field parser.

## Example:

```js
assert(-1 == parse(200, 'bytes=500-20'));
assert(-2 == parse(200, 'bytes=malformed'));
parse(200, 'bytes=0-499').should.eql(arr('bytes', [{ start: 0, end: 199 }]));
parse(1000, 'bytes=0-499').should.eql(arr('bytes', [{ start: 0, end: 499 }]));
parse(1000, 'bytes=40-80').should.eql(arr('bytes', [{ start: 40, end: 80 }]));
parse(1000, 'bytes=-500').should.eql(arr('bytes', [{ start: 500, end: 999 }]));
parse(1000, 'bytes=-400').should.eql(arr('bytes', [{ start: 600, end: 999 }]));
parse(1000, 'bytes=500-').should.eql(arr('bytes', [{ start: 500, end: 999 }]));
parse(1000, 'bytes=400-').should.eql(arr('bytes', [{ start: 400, end: 999 }]));
parse(1000, 'bytes=0-0').should.eql(arr('bytes', [{ start: 0, end: 0 }]));
parse(1000, 'bytes=-1').should.eql(arr('bytes', [{ start: 999, end: 999 }]));
parse(1000, 'items=0-5').should.eql(arr('items', [{ start: 0, end: 5 }]));
parse(1000, 'bytes=40-80,-1').should.eql(arr('bytes', [{ start: 40, end: 80 }, { start: 999, end: 999 }]));
```

## Installation

```
$ npm install range-parser
```

0.1.0 / 2012-08-25 
==================

  * add options parameter to send() that is passed to fs.createReadStream() [kanongil]

0.0.4 / 2012-08-16 
==================

  * allow custom "Accept-Ranges" definition

0.0.3 / 2012-07-16 
==================

  * fix normalization of the root directory. Closes #3

0.0.2 / 2012-07-09 
==================

  * add passing of req explicitly for now (YUCK)

0.0.1 / 2010-01-03
==================

  * Initial release

# mime

Comprehensive MIME type mapping API. Includes all 600+ types and 800+ extensions defined by the Apache project, plus additional types submitted by the node.js community.

## Install

Install with [npm](http://github.com/isaacs/npm):

    npm install mime

## API - Queries

### mime.lookup(path)
Get the mime type associated with a file. Performs a case-insensitive lookup using the extension in `path` (the substring after the last '/' or '.').  E.g.

    var mime = require('mime');

    mime.lookup('/path/to/file.txt');         // => 'text/plain'
    mime.lookup('file.txt');                  // => 'text/plain'
    mime.lookup('.TXT');                      // => 'text/plain'
    mime.lookup('htm');                       // => 'text/html'

### mime.extension(type)
Get the default extension for `type`

    mime.extension('text/html');                 // => 'html'
    mime.extension('application/octet-stream');  // => 'bin'

### mime.charsets.lookup()

Map mime-type to charset

    mime.charsets.lookup('text/plain');        // => 'UTF-8'

(The logic for charset lookups is pretty rudimentary.  Feel free to suggest improvements.)

## API - Defining Custom Types

The following APIs allow you to add your own type mappings within your project.  If you feel a type should be included as part of node-mime, see [requesting new types](https://github.com/bentomas/node-mime/wiki/Requesting-New-Types).

### mime.define()

Add custom mime/extension mappings

    mime.define({
        'text/x-some-format': ['x-sf', 'x-sft', 'x-sfml'],
        'application/x-my-type': ['x-mt', 'x-mtt'],
        // etc ...
    });

    mime.lookup('x-sft');                 // => 'text/x-some-format'

The first entry in the extensions array is returned by `mime.extension()`. E.g.

    mime.extension('text/x-some-format'); // => 'x-sf'

### mime.load(filepath)

Load mappings from an Apache ".types" format file

    mime.load('./my_project.types');

The .types file format is simple -  See the `types` dir for examples.


# send

  Send is Connect's `static()` extracted for generalized use, a streaming static file
  server supporting partial responses (Ranges), conditional-GET negotiation, high test coverage, and granular events which may be leveraged to take appropriate actions in your application or framework.

## Installation

    $ npm install send

## Examples

  Small:

```js
var http = require('http');
var send = require('send');

var app = http.createServer(function(req, res){
  send(req, req.url).pipe(res);
});
```

  Serving from a root directory with custom error-handling:

```js
var http = require('http');
var send = require('send');

var app = http.createServer(function(req, res){
  // your custom error-handling logic:
  function error(err) {
    res.statusCode = err.status || 500;
    res.end(err.message);
  }

  // your custom directory handling logic:
  function redirect() {
    res.statusCode = 301;
    res.setHeader('Location', req.url + '/');
    res.end('Redirecting to ' + req.url + '/');
  }

  // transfer arbitrary files from within
  // /www/example.com/public/*
  send(req, url.parse(req.url).pathname)
  .root('/www/example.com/public')
  .on('error', error)
  .on('directory', redirect)
  .pipe(res);
});
```

## API

### Events

  - `error` an error occurred `(err)`
  - `directory` a directory was requested
  - `stream` file streaming has started `(stream)`
  - `end` streaming has completed

### .root(dir)

  Serve files relative to `path`. Aliased as `.from(dir)`.

### .index(path)

  By default send supports "index.html" files, to disable this
  invoke `.index(false)` or to supply a new index pass a string.

### .maxage(ms)

  Provide a max-age in milliseconds for http caching, defaults to 0.

## Error-handling

  By default when no `error` listeners are present an automatic response will be made, otherwise you have full control over the response, aka you may show a 5xx page etc.

## Caching

  It does _not_ perform internal caching, you should use a reverse proxy cache such
  as Varnish for this, or those fancy things called CDNs. If your application is small enough that it would benefit from single-node memory caching, it's small enough that it does not need caching at all ;).

## Debugging

 To enable `debug()` instrumentation output export __DEBUG__:

```
$ DEBUG=send node app
```

## Running tests

```
$ npm install
$ make test
```

## License 

(The MIT License)

Copyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
![express logo](http://f.cl.ly/items/0V2S1n0K1i3y1c122g04/Screen%20Shot%202012-04-11%20at%209.59.42%20AM.png)

  Fast, unopinionated, minimalist web framework for [node](http://nodejs.org). [![Build Status](https://secure.travis-ci.org/visionmedia/express.png)](http://travis-ci.org/visionmedia/express) [![Dependency Status](https://gemnasium.com/visionmedia/express.png)](https://gemnasium.com/visionmedia/express)

```js
var express = require('express');
var app = express();

app.get('/', function(req, res){
  res.send('Hello World');
});

app.listen(3000);
```

## Installation

    $ npm install -g express

## Quick Start

 The quickest way to get started with express is to utilize the executable `express(1)` to generate an application as shown below:

 Create the app:

    $ npm install -g express
    $ express /tmp/foo && cd /tmp/foo

 Install dependencies:

    $ npm install

 Start the server:

    $ node app

## Features

  * Built on [Connect](http://github.com/senchalabs/connect)
  * Robust routing
  * HTTP helpers (redirection, caching, etc)
  * View system supporting 14+ template engines
  * Content negotiation
  * Focus on high performance
  * Environment based configuration
  * Executable for generating applications quickly
  * High test coverage

## Philosophy

  The Express philosophy is to provide small, robust tooling for HTTP servers. Making
  it a great solution for single page applications, web sites, hybrids, or public
  HTTP APIs.

  Built on Connect you can use _only_ what you need, and nothing more, applications
  can be as big or as small as you like, even a single file. Express does
  not force you to use any specific ORM or template engine. With support for over
  14 template engines via [Consolidate.js](http://github.com/visionmedia/consolidate.js)
  you can quickly craft your perfect framework.

## More Information

  * Join #express on freenode
  * [Google Group](http://groups.google.com/group/express-js) for discussion
  * Follow [tjholowaychuk](http://twitter.com/tjholowaychuk) on twitter for updates
  * Visit the [Wiki](http://github.com/visionmedia/express/wiki)
  * [Êó•Êú¨Ë™û„Éâ„Ç≠„É•„É°„É≥„ÉÜ„Éº„Ç∑„Éß„É≥](http://hideyukisaito.com/doc/expressjs/) by [hideyukisaito](https://github.com/hideyukisaito)
  * [–†—É—Å—Å–∫–æ—è–∑—ã—á–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è](http://jsman.ru/express/)
  * Run express examples [online](https://runnable.com/express)

## Viewing Examples

Clone the Express repo, then install the dev dependencies to install all the example / test suite deps:

    $ git clone git://github.com/visionmedia/express.git --depth 1
    $ cd express
    $ npm install

then run whichever tests you want:

    $ node examples/content-negotiation

## Running Tests

To run the test suite first invoke the following command within the repo, installing the development dependencies:

    $ npm install

then run the tests:

    $ make test

## Contributors

```
project: express
commits: 3559
active : 468 days
files  : 237
authors:
 1891	Tj Holowaychuk          53.1%
 1285	visionmedia             36.1%
  182	TJ Holowaychuk          5.1%
   54	Aaron Heckmann          1.5%
   34	csausdev                1.0%
   26	ciaranj                 0.7%
   21	Robert Sk√∂ld            0.6%
    6	Guillermo Rauch         0.2%
    3	Dav Glass               0.1%
    3	Nick Poulden            0.1%
    2	Randy Merrill           0.1%
    2	Benny Wong              0.1%
    2	Hunter Loftis           0.1%
    2	Jake Gordon             0.1%
    2	Brian McKinney          0.1%
    2	Roman Shtylman          0.1%
    2	Ben Weaver              0.1%
    2	Dave Hoover             0.1%
    2	Eivind Fjeldstad        0.1%
    2	Daniel Shaw             0.1%
    1	Matt Colyer             0.0%
    1	Pau Ramon               0.0%
    1	Pero Pejovic            0.0%
    1	Peter Rekdal Sunde      0.0%
    1	Raynos                  0.0%
    1	Teng Siong Ong          0.0%
    1	Viktor Kelemen          0.0%
    1	ctide                   0.0%
    1	8bitDesigner            0.0%
    1	isaacs                  0.0%
    1	mgutz                   0.0%
    1	pikeas                  0.0%
    1	shuwatto                0.0%
    1	tstrimple               0.0%
    1	ewoudj                  0.0%
    1	Adam Sanderson          0.0%
    1	Andrii Kostenko         0.0%
    1	Andy Hiew               0.0%
    1	Arpad Borsos            0.0%
    1	Ashwin Purohit          0.0%
    1	Benjen                  0.0%
    1	Darren Torpey           0.0%
    1	Greg Ritter             0.0%
    1	Gregory Ritter          0.0%
    1	James Herdman           0.0%
    1	Jim Snodgrass           0.0%
    1	Joe McCann              0.0%
    1	Jonathan Dumaine        0.0%
    1	Jonathan Palardy        0.0%
    1	Jonathan Zacsh          0.0%
    1	Justin Lilly            0.0%
    1	Ken Sato                0.0%
    1	Maciej Ma≈Çecki          0.0%
    1	Masahiro Hayashi        0.0%
```

## License

(The MIT License)

Copyright (c) 2009-2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

## How to contribute to CoffeeScript

* Before you open a ticket or send a pull request, [search](https://github.com/jashkenas/coffee-script/issues) for previous discussions about the same feature or issue. Add to the earlier ticket if you find one.

* Before sending a pull request for a feature, be sure to have [tests](https://github.com/jashkenas/coffee-script/tree/master/test).

* Use the same coding style as the rest of the [codebase](https://github.com/jashkenas/coffee-script/tree/master/src). If you're just getting started with CoffeeScript, there's a nice [style guide](https://github.com/polarmobile/coffeescript-style-guide).

* In your pull request, do not add documentation to `index.html` or re-build the minified `coffee-script.js` file. We'll do those things before cutting a new release.
# What Is IcedCoffeeScript?

IcedCoffeeScript (ICS) is a system for handling callbacks in event-based code.
There were two existing implementations, one in [the sfslite library for
C++](https://github.com/maxtaco/sfslite), and another in the [tamejs translator
for JavaScript](https://github.com/maxtaco/tamejs).  This extension to
CoffeeScript is a third implementation. The code and translation techniques
are derived from experience with JS, but with some new Coffee-style
flavoring. 

This document first presents a "Iced" tutorial (adapted from the JavaScript
version), and then discusses the specifics of the CoffeeScript implementation.

# Installing and Running ICS

ICS is available as an npm package:

    npm install -g iced-coffee-script

You can alternatively checkout ICS and install from source:

    git clone https://github.com/maxtaco/coffee-script
    ./bin/cake install

This will give you libraries under `iced-coffee-script` and 
the binaries `iced` and `icake`, which are replacements
for `coffee` and `cake` respectively.  In almost all cases,
`iced` should serve as a drop-in replacement for `coffee`,
since the ICS language is a superset of CoffeeScript.

For more information about CS and ICS, you can also see
our <a href="http://maxtaco.github.com/coffee-script">brochure page</a>.

# Quick Tutorial and Examples

Here is a simple example that prints "hello" 10 times, with 100ms
delay slots in between:

```coffeescript
# A basic serial loop
for i in [0..10]
  await setTimeout(defer(), 100)
  console.log "hello"
```

There is one new language addition here, the `await ... ` block (or
expression), and also one new primitive function, `defer`.  The two of
them work in concert.  A function must "wait" at the close of a
`await` block until all `defer`rals made in that `await` block are
fulfilled.  The function `defer` returns a callback, and a callee in
an `await` block can fulfill a deferral by simply calling the callback
it was given.  In the code above, there is only one deferral produced
in each iteration of the loop, so after it's fulfilled by `setTimer`
in 100ms, control continues past the `await` block, onto the log line,
and back to the next iteration of the loop.  The code looks and feels
like threaded code, but is still in the asynchronous idiom (if you
look at the rewritten code output by the *coffee* compiler).

This next example does the same, while showcasing power of the
`await..` language addition.  In the example below, the two timers
are fired in parallel, and only when both have fulfilled their deferrals
(after 100ms), does progress continue...

```coffeescript
for i in [0..10]
  await 
    setTimeout defer(), 100
    setTimeout defer(), 10
  console.log ("hello");
```

Now for something more useful. Here is a parallel DNS resolver that
will exit as soon as the last of your resolutions completes:

```coffeescript
dns = require("dns");

do_one = (cb, host) ->
  await dns.resolve host, "A", defer(err, ip)
  msg = if err then "ERROR! #{err}" else "#{host} -> #{ip}"
  console.log msg
  cb()

do_all = (lst) ->
  await
    for h in lst
      do_one defer(), h

do_all process.argv[2...]
```

You can run this on the command line like so:

    iced examples/iced/dns.coffee yahoo.com google.com nytimes.com okcupid.com tinyurl.com

And you will get a response:

    yahoo.com -> 72.30.2.43,98.137.149.56,209.191.122.70,67.195.160.76,69.147.125.65
    google.com -> 74.125.93.105,74.125.93.99,74.125.93.104,74.125.93.147,74.125.93.106,74.125.93.103
    nytimes.com -> 199.239.136.200
    okcupid.com -> 66.59.66.6
    tinyurl.com -> 195.66.135.140,195.66.135.139

If you want to run these DNS resolutions in serial (rather than
parallel), then the change from above is trivial: just switch the
order of the `await` and `for` statements above:

```coffeescript  
do_all = (lst) ->
  for h in lst
    await
      do_one defer(), h
```

### Slightly More Advanced Example

We've shown parallel and serial work flows, what about something in
between?  For instance, we might want to make progress in parallel on
our DNS lookups, but not smash the server all at once. A compromise is
windowing, which can be achieved in IcedCoffeeScript conveniently in a
number of different ways.  The [2007 academic paper on
tame](http://pdos.csail.mit.edu/~max/docs/tame.pdf) suggests a
technique called a *rendezvous*.  A rendezvous is implemented in
CoffeeScript as a pure CS construct (no rewriting involved), which
allows a program to continue as soon as the first deferral is
fulfilled (rather than the last):

```coffeescript
do_all = (lst, windowsz) ->
  rv = new iced.Rendezvous
  nsent = 0
  nrecv = 0

  while nrecv < lst.length
    if nsent - nrecv < windowsz and  nsent < n
      do_one rv.id(nsent).defer(), lst[nsent]
      nsent++
    else
      await rv.wait defer evid
      console.log "got back lookup nsent=#{evid}"
      nrecv++
```

This code maintains two counters: the number of requests sent, and the
number received.  It keeps looping until the last lookup is received.
Inside the loop, if there is room in the window and there are more to
send, then send; otherwise, wait and harvest.  `Rendezvous.defer`
makes a deferral much like the `defer` primitive, but it can be
labeled with an identifier.  This way, the waiter can know which
deferral has fulfilled.  In this case we use the variable `nsent` as the
defer ID --- it's the ID of this deferral in launch order.  When we
harvest the deferral, `rv.wait` fires its callback with the ID of the
deferral that's harvested.  

Note that with windowing, the arrival order might not be the same as
the issue order. In this example, a slower DNS lookup might arrive
after faster ones, even if issued before them.

### Composing Serial And Parallel Patterns

In IcedCoffeeScript, arbitrary composition of serial and parallel control flows is
possible with just normal functional decomposition.  Therefore, we
don't allow direct `await` nesting.  With inline anonymous CoffeeScript
functions, you can concisely achieve interesting patterns.  The code
below launches 10 parallel computations, each of which must complete
two serial actions before finishing:

```coffeescript
f = (n,cb) ->
  await
    for i in [0..n]
      ((cb) ->
        await setTimeout defer(), 5 * Math.random()
        await setTimeout defer(), 4 * Math.random()
        cb()
      )(defer())
  cb()
```

### autocb

Most of the time, an iced function will call its callback and return
at the same time.  To get this behavior "for free", you can simply
name this callback `autocb` and it will fire whenever your iced function
returns.  For instance, the above example could be equivalently written as:

```coffeescript
f = (n,autocb) ->
  await
    for i in [0..n]
      ((autocb) ->
        setTimeout defer(), 5 * Math.random()
        setTimeout defer(), 4 * Math.random()
      )(defer())
```
In the first example, recall, you call `cb()` explicitly.  In this
example, because the callback is named `autocb`, it's fired
automatically when the iced function returns.

If your callback needs to fulfill with a value, then you can pass
that value via `return`.  Consider the following function, that waits
for a random number of seconds between 0 and 4. After waiting, it
then fulfills its callback `cb` with the amount of time it waited:

```coffeescript
rand_wait = (cb) ->
  time = Math.floor Math.random() * 5
  if time is 0
   cb(0)
   return
  await setTimeout defer(), time
  cb(time) # return here, implicitly.....
```

This function can written equivalently with `autocb` as:

```coffeescript
rand_wait = (autocb) ->
  time = Math.floor  Math.random() * 5 
  return 0 if time is 0
  await setTimeout defer(), time
  return time 
```

Implicitly, `return 0;` is mapped by the CoffeeScript compiler to `autocb(0); return`.

## Language Design Considerations

In sum, the iced additions to CoffeeScript consist of three new keywords:

* **await**, marking off a block or a single statement.
* **defer**, which is quite similar to a normal function call, but is compiled specially
to accommodate argument passing.

Finally, `autocb` isn't a bona-fide keyword, but the compiler searches
for it in parameters to CoffeeScript functions, and updates the
behavior of the `Code` block accordingly.

These keywords represent the potential for these iced additions to
break existing CoffeeScript code --- any preexisting use of these
keywords as regular function, variable or class names will cause
headaches.

### Debugging and Stack Traces -- Now Greatly Improved!

An oft-cited problem with async-style programming, with ICS or
hand-rolled, is that stack traces are often incomplete or
incomprehensible.  If an exception is caught in a Iced function, the
stack trace will only show the "bottom half" of the call stack, or all
of those functions that are descendents of the main event loop.  The
"top half" of the call stack, telling you "who _really_ called this
function," is probably long gone.

ICS has a workaround to this problem.  When an iced function is
entered, the runtime will find the first argument to the function that
was output by `defer()`.  Such callbacks are annotated to contain the
file, line and function where they were created.  They also are
annotated to hold a refernce to `defer()`-generated callback passed to
the function in which they were created.  This chaining creates an
implicit stack that can be walked when an exception is thrown.

Consider this example:

```coffeescript
iced.catchExceptions()

foo = (y) ->
  await setTimeout defer(), 10
  throw new Error "oh no!"
  y(10)

bar = (x) ->
  await foo defer()
  x()

baz = () ->
  await bar defer()

baz()
```

The function `iced.catchExceptions` sets the `uncaughtException`
handler in Node to print out the standard callstack, and also the Iced
"callstack", and then to exit.  The callback generated by `defer()`
in the function `bar` holds a reference to `x`.  Similarly, 
the callback generated in `foo` holds a reference to `y`.
Here's what happens when this program is run:

```
Error: oh no!
    at Deferrals.continuation (/Users/max/src/coffee-script/prog.iced:24:13)
    at Deferrals._call (/Users/max/src/coffee-script/lib/coffee-script/iced.js:86:19)
    at Deferrals._fulfill (/Users/max/src/coffee-script/lib/coffee-script/iced.js:97:23)
    at Object._onTimeout (/Users/max/src/coffee-script/lib/coffee-script/iced.js:53:18)
    at Timer.ontimeout (timers.js:84:39)
Iced 'stack' trace (w/ real line numbers):
   at foo (prog.iced:4)
   at bar (prog.iced:9)
   at baz (prog.iced:13)
```

The first stack trace is the standard Node stacktrace.  It is
inscrutable, since it mainly covers node internals, and has line
numbering relative to the translated file (I still haven't fixed this
bug, sorry). The second stack trace is much better.  It tells the
sequence of Iced calls the lead to this exception.  Line numbers are
relative to the original input file.

The relavant API is as follows:

#### iced.stackWalk cb

Start from the given `cb`, or use the currently active callback
if none was given, and walk up the Iced-generated stack. Return
a list of call site descriptions.  You can call this from your
own exception-handling code.

#### iced.catchExceptions()

Tell the runtime to catch uncaught exceptions, and to print
a Iced-aware stack dump as above.


### The Lowdown on defer

The implementation of `defer` is interesting --- it's trying to
emulate ``call by reference'' in languages like C++ or Java.  Here is an 
example that shows off the four different cases required to make this
happen:

```coffeescript
cb = defer x, obj.field, arr[i], rest...
```

And here is the output from the iced `coffee` compiler:

```javascript
cb = __iced_deferrals.defer({
    assign_fn: (function(__slot_1, __slot_2, __slot_3) {
      return function() {
        x = arguments[0];
        __slot_1.field = arguments[1];
        __slot_2[__slot_3] = arguments[2];
        return rest = __slice.call(arguments, 3);
      };
    })(obj, arr, i)
  });
```

The `__iced_deferrals` object is an internal object of type `Deferrals`
that's collecting all calls to `defer` in the current `await` block.
The one in question should fulfill with 3 or more values.  When it does,
it will call into the innermost anonymous function to perform the 
appropriate assignments in the original scope. The four cases are:

1. **Simple assignment** --- seen in `x = arguments[0]`.  Here, the
`x` variable is in the scope of the original `defer` call.

1. **Object slot assignment** --- seen in `__slot_1.field = arguments[1]`.
Here, the reference `obj` must be captured at the time of the `defer` call,
and `obj.field` is filled in later.

1. **Array cell assignment** --- seen in `__slot_2[__slot_3] = arguments[2]`.
This of course will work on an array or an object.  Here, the reference
to the array, and the value of the index must be captured when `defer`
is called, and the cell is assigned later.

1. **Splat assignment** --- seen in `res = __slice.call(arguments,3)`.
This is much like a simple assignment, but allows a ``splat'' meaning
assignment of multiple values at once, accessed as an array.

These specifics are also detailed in the code in the `Defer` class,
file `nodes.coffee`.

### Awaits No Longer Work as Expressions

The following do not work and will generate syntax errors at compile time:

```coffeescript
y = (await foo defer x)
```

```coffeescript
x = if true
  await foo defer y
  y
else 10
```

```coffescript
my_func 10, (
  await foo defer y
  y
)
```

That is, you can't treat `await` statements as expressions.
And recursively speaking, you can't treat  any blocks that
contain `await` statements as expressions. Previous versions of
IcedCoffeeScript supported this arcane feature, but it was extremely
difficult to implement properly, and unnecessarily obscured the
control flow of iced programs. 

## Translation Technique

The IcedCoffeeScript addition uses a similar continuation-passing translation
to *tamejs*, but it's been refined to generate cleaner code, and to translate
only when necessary.  Here are the general steps involved:

* **1** Run the standard CoffeeScript lexer, rewriter, and parser, with a 
few small additions (for `await` and `defer`), yielding
a standard CoffeeScript-style abstract syntax tree (AST).

* **2** Apply *iced annotations*:

   * **2.1** Find all `await` nodes in the AST.  Mark these nodes and their
   ancestors with an **A** flag.

   * **2.2** Find all `for`, `while`, `until`, or `loop` nodes marked with
   **A**.  Flood them and their descendants with an **L** flag. Stop
   flooding when the first loop without an **A** flag is hit.

   * **2.3** Find all `continue` or `break` nodes marked with an **L** flag.
   Mark them and their descendants with a **P** flag.

* **3** ``Rotate'' all those nodes marked with **A** or **P**:

   * **3.1** For each `Block` node _b_ in the `AST` marked **A** or **P**:

      * **3.1.1** Find _b_'s first child _c_ marked with **A** or **P**.

      * **3.1.2** Cut _b_'s list of expressions after _c_, and move those
      expressions on the right of the cut into a new block, called
      _d_.  This block is _c_'s continuation block and becomes _c_'s
      child in the AST.  This is the actual ``rotation.''

      * **3.1.3** Call the rotation recursively on the child block _d_.

      * **3.1.4** Add an additional code to _c_'s body, which is to call the
      continuation represented by _d_.  For `if` statements this means
      calling the continuation in both branches; for `switch`
      statements, this means calling the continuation from all
      branches; for loops, this means calling `continue` at the end of
      the loop body; for blocks, this means just calling the
      continuation as the last statement in the block.  See
      `callContinuation` in `nodes.coffee.`

* **4** Output preamble/boilerplate; for the case of JavaScript output to
browsers, inline the small class `Deferrals` needed during runtime;
for node-based server-side JavaScript, a `require` statement suffices
here.  Only do this if the source file has a `defer` statement
in it.

* **5** Compile as normal.  The effect of the above is to mutate the original
CoffeeScript AST into another valid CoffeeScript AST.  This AST is then
compiled with the normal rules.


Translation Example
------------------

For an example translation, consider the following block of code:

```coffeescript

while x1
  f1()

while x2
  if y
    f2() 
    continue
    f3()
  await 
    f4(defer())
  if z
    f5()
    break
    f6()

while x3
  f7()
```

* Here is schematic diagram for this AST:

   <img src="/media/rotate1.png" width=650 />

* After Step 2.1, nodes in blue are marked with **A**.  Recall, Step 2.1 traces
upwards from all `await` blocks.

   <img src="/media/rotate2.png" width=650 />

* After Step 2.2, nodes in purple are marked with **L**.  Recall, Step 2.2 floods
downwards from any any loops marked with **A**.

   <img src="/media/rotate3.png" width=650 />

* After Step 2.3, nodes in yellow are marked with **P**.  Recall, Step 2.3 
traces upwards from any jumps marked with **L**.

   <img src="/media/rotate4.png" width=650 />

* The green nodes are those marked with **A** or **P**.  They are "marked"
for rotations in the next step.

   <img src="/media/rotate5.png" width=650 />

* In Step 3, rotate all marked nodes AST nodes. This rotation
introduces the new orange `block` nodes in the graph, and attaches
them to pivot nodes as _continuation_ blocks.

   <img src="/media/post-rotate.png" width=650 />


* In translated code, the general format of a _pivot_ node is:

```javascript
(function (k) {
   // the body
   k();
})(function () {
   // the continuation block.
}
```

To see how pivots and continuations are output in our example, look
at this portion of the AST, introduced after Step 3:
   
   ![detail](/media/detail.png)

Here is the translated output (slightly hand-edited for clarity):

```javascript
(function() {
  // await block f4()
  (function(k) {
    var __deferrals = new iced.Deferrals(k);
    f4(__deferrals.defer({}));
    __deferrals._fulfill();
  })(function() {
    // The continuation block, starting at 'if z'
    (function(k) {
      if (z) {
        f5();
        (function(k) {
          // 'break' throws away the current continuation 'k'
          // and just calls _break()
          _break();
        })(function() {
          // A continuation block, after 'break', up to 'f6()'
          // This code will never be reached
          f6();
          return k();
        });
      } else {
        return k();
      }
    })(function() {
      // end of the loop, call _continue() to start at the top
      return _continue();
    });
  });
});
```

## API and Library Documentation

### iced.Rendezvous

The `Rendezvous` is a not a core feature, meaning it's written as a 
straight-ahead CoffeeScript library.  It's quite useful for more advanced
control flows, so we've included it in the main runtime library.

The `Rendezvous` is similar to a blocking condition variable (or a
"Hoare style monitor") in threaded programming.

#### iced.Rendezvous.id(i,[multi]).defer slots...

Associate a new deferral with the given Rendezvous, whose deferral ID
is `i`, and whose callbacks slots are supplied as `slots`.  Those
slots can take the two forms of `defer` return as above.  As with
standard `defer`, the return value of the `Rendezvous`'s `defer` is
fed to a function expecting a callback.  As soon as that callback
fires (and the deferral is fulfilled), the provided slots will be
filled with the arguments to that callback.

Also, note the optional boolean flag `multi`.  By default, a function
generated by `defer` can be called only once, and will generate an
error on subsequent calls.  Only with the `multi` flag set to `true`
(and only in the case of a `Rendezvous`), can this restriction be
relaxed.

#### iced.Rendezvous.defer slots...

You don't need to explicitly assign an ID to a deferral generated from a
Rendezvous.  If you don't, one will automatically be assigned, in
ascending order starting from `0`.

#### iced.Rendezvous.wait cb

Wait until the next deferral on this rendezvous is fulfilled.  When it
is, callback `cb` with the ID of the fulfilled deferral.  If an
unclaimed deferral fulfilled before `wait` was called, then `cb` is fired
immediately.

Though `wait` would work with any hand-rolled JS function expecting
a callback, it's meant to work particularly well with *tamejs*'s
`await` function.

#### Example

Here is an example that shows off the different inputs and 
outputs of a `Rendezvous`.  It does two parallel DNS lookups,
and reports only when the first returns:

```coffeescript
hosts = [ "okcupid.com", "google.com" ];
ips = errs = []
rv = new iced.Rendezvous
for h,i in hosts
    dns.resolve hosts[i], rv.id(i).defer errs[i], ips[i]

await rv.wait defer which
console.log "#{hosts[which]}  -> #{ips[which]}"
```

### connectors

A *connector* is a function that takes as input
a callback, and outputs another callback.   The best example 
is a `timeout`, given here:

#### iced.timeout(cb, time, res = [])

Timeout an arbitrary async operation.

Given a callback `cb`, a time to wait `time`, and an array to output a
result `res`, return another callback.  This connector will set up a
race between the callback returned to the caller, and the timer that
fires after `time` milliseconds.  If the callback returned to the
caller fires first, then fill `res[0] = true;`.  If the timer won
(i.e., if there was a timeout), then fill `res[0] = false;`.

In the following example, we timeout a DNS lookup after 100ms:

```coffeescript
{timeout} = require 'icedlib'
info = [];
host = "pirateWarezSite.ru";
await dns.lookup host, timeout(defer(err, ip), 100, info)
if not info[0]
    console.log "#{host}: timed out!"
else if (err)
    console.log "#{host}: error: #{err}"
else
    console.log "#{host} -> #{ip}"
```

### The Pipeliner library

There's another way to do the windowed DNS lookups we saw earlier ---
you can use the control flow library called `Pipeliner`, which 
manages the common pattern of having "m calls total, with only
n of them in flight at once, where m > n."

The Pipeliner class is available in the `icedlib` library:

```coffeescript
{Pipeliner} = require 'icedlib'
pipeliner = new Pipeliner w,s 
```

Using the pipeliner, we can rewrite our earlier windowed DNS lookups
as follows:

```coffescript
do_all = (lst, windowsz) ->
  pipeliner = new Pipeliner windowsz
  for x in list
    await pipeliner.waitInQueue defer()
    do_one pipeliner.defer(), x
  await pipeliner.flush defer()
```

The API is as follows:

#### new Pipeliner w, s

Create a new Pipeliner controller, with a window of at most `w` calls
out at once, and waiting `s` seconds before launching each call.  The
default values are `w = 10` and `s = 0`.

#### Pipeliner.waitInQueue c

Wait in a queue until there's room in the window to launch a new call.
The callback `c` will be fulfilled when there is room.

#### Pipeliner.defer args...

Create a new `defer`al for this pipeline, and pass it to whatever
function is doing the actual work.  When the work completes, fulfill
this `defer`al --- that will update the accounting in the pipeliner
class, allowing queued actions to proceed.

#### Pipeliner.flush c

Wait for the pipeline to clear out.  Fulfills the callback `c`
when the last action in the pipeline is done.

  
        
                                      ICED
        
                                       _____       __  __
                                      / ____|     / _|/ _|
     .- ----------- -.               | |     ___ | |_| |_ ___  ___
    (  (ice cubes)    )              | |    / _ \|  _|  _/ _ \/ _ \
    |`-..________ ..-'|              | |___| (_) | | | ||  __/  __/
    |                 |               \_____\___/|_| |_| \___|\___|
    |                 ;--.
    |                (__  \            _____           _       _
    |                 | )  )          / ____|         (_)     | |
    |                 |/  /          | (___   ___ _ __ _ _ __ | |_
    |                 (  /            \___ \ / __| '__| | '_ \| __|
    |                 |/              ____) | (__| |  | | |_) | |_
    |                 |              |_____/ \___|_|  |_| .__/ \__|
     `-.._________..-'                                  | |
                                                        |_|


  CoffeeScript is a little language that compiles into JavaScript.
  IcedCoffeeScript is a superset of CoffeeScript that adds two new 
  keywords: await and defer.

  Install Node.js, and then the CoffeeScript compiler:
  sudo bin/cake install

  Or, if you have the Node Package Manager installed:
  npm install -g iced-coffee-script
  (Leave off the -g if you don't wish to install globally.)

  Execute a script:
  iced /path/to/script.coffee

  Compile a script:
  iced -c /path/to/script.coffee

  For documentation, usage, and examples, see:
  http://maxtaco.github.com/coffee-script

  For iced-specific technical documentation, see:
  https://github.com/maxtaco/coffee-script/blob/iced/iced.md

  To suggest a feature, report a bug, or general discussion:
  https://github.com/maxtaco/coffee-script/issues/

  DM or tweet at me with questions: @maxtaco

  Or better yet, tweet about how much you love IcedCoffeeScript.

  The source repository:
  git://github.com/maxtaco/coffee-script.git

  All contributors are listed here:
  http://github.com/maxtaco/coffee-script/contributors

# How to Keep IcedCoffeeScript Up-to-Date with Mainline CoffeeScript

## Source

### Current Method: Fork/Merge

Here is the current system:

1. Add a remote upstream repo to pull in the mainline changes:
```sh
git remote add upstream git@github.com:jashkenas/coffee-script
```

1. Pull from the upstream into our master branch; push to our own origin/master while we are at it.
```sh
git checkout master
git pull upstream master
git push origin master
```

1. Make sure the local `iced2` branch is up-to-date:
```sh
git checkout iced2
git pull origin iced2
```

1. Then do the merge:
```sh
git merge master
```

1. Then, once the rebase has succeeded:
     a. Update the version number of `package.json`
     a. Update the version number in `src/coffee-script.coffee`

1. Then build a million different times:
```sh
./bin/cake build
./bin/cake build:parser
./bin/cake build
./bin/cake build
./bin/cake build:browser
./bin/cake test
```

1. You're good to push if it all looks good. First commit all the new changes post-rebase with:
```sh
git commit -a
```

1. Then do a push to the *<b>iced2</b>* branch.
```sh
git push origin iced2
```

1. Make and push a new tag (supplying whatever your new version is):
```
git tag -a -m vbump 1.6.2c
git push --tags
```

1. Finally, publish to npm.  It's usually worth cloning out a fresh
copy from github, and then running:
```sh
npm publish
```

## Documentation

The documentation system is totally separate.  Here is the general idea:

1. Make sure the *iced* branch is up-to-date:
```sh
git checkout iced2
git pull origin iced2
```

1. Checkout and update the *gh-pages* branch:
```sh
git checkout gh-pages
git pull origin gh-pages
```

1. Then do the merge:
```sh
git merge iced2
```

1. This will destroy you with conflicts, but most of them can be worked
through.  Basically, you want to call `theirs`, as below, on everything
*<b>but</b>* the `documentation/index.html.erb` file.

1. Edit `documentation/index.html.erb` by hand, changing the current version
number to whatever it is nowadays.

1. Rebuild the documentation like `index.html` and the
embedded examples.
```sh
rake doc
```

1. Run `docco` on the source files:
```sh
icake doc:source
```

1. Commit everything:
```sh
git commit -a
```

1. And push
```sh
git push origin gh-pages
```

1. Test that the `run` button still works on the front page, and that the
sandbox is still operational.

## How Do I Build Docs for the first time on a machine?

You are **fucked**!  But here is an attempt to guide you:

1. First of all, there's the original reference from CoffeeScript, which isn't great, but it's worth a look.  Find it [here](https://github.com/jashkenas/coffee-script/wiki/%5BHowto%5D-Hacking-on-the-CoffeeScript-Compiler)

1. Boiling it down, here's how I just did it on *Linux*.  Note that due to
ruby, it's going to be a bit different on MacOS X:

```sh
npm install -g docco            # jashkenas write docco as a node module, this is easy enough
sudo apt-get install libonig2   # the ruby stuff needs this as an external lib dependency
sudo gem install ultraviolet    # this installs some dependencies, etc
icake build:ultraviolet         # this is likely to fail due to hardcoded paths and hacks
rake doc                        # give it a shot, and now you're back to where we were above
```

There are several hard parts about dealing with this setup.  The first is
generating the appropriate `coffeescript.yaml` file  from Jeremy's TexMate
bundle.  That's failed on me before and plus we want to make a bunch of ICS
additions for `await` and `defer`. What I have in the `Cakefile` is my best
attempt to automate it, but it's likely to break.

The bigger problem is figuring out where to dump `coffeescript.yaml` (or
better yet the `ics.yaml` that I make from it) when it's ready to go. This
moves around depending on the latest shenanigans in the `ultraviolet` library.
The hardcoded paths in the `Cakefile` is what worked on 8 Sep 2013, but who
knows for the future.  The upshot is that these syntax files now reside in the
`textpow` library and not the `ultraviolet` library as they used to. And they
have new names --- `source.coffeescript.syntax`, for example.  Good luck!

#### To Accept Their Changes

I wrote a little shell script called `theirs`:

```bash
#!/bin/sh

git checkout --theirs $*
git add $* 
```

I run this on any *autogenerated* file that has a
conflict.  For instance, those files in `lib/coffee-script/` 
or `documentation/js`.  For conflicts in `package.json`, `Cakefile`
or `src/`, you probably need to do a hand-merge.




# Jade

  The jade template engine for node.js

## Synopsis

    jade [-h|--help] [-v|--version] [-o|--obj STR]
         [-O|--out DIR] [-p|--path PATH] [-P|--pretty]
         [-c|--client] [-D|--no-debug]

## Examples

  translate jade the templates dir

    $ jade templates

  create {foo,bar}.html

    $ jade {foo,bar}.jade

  jade over stdio

    $ jade < my.jade > my.html

  jade over s

    $ echo "h1 Jade!" | jade

  foo, bar dirs rendering to /tmp

    $ jade foo bar --out /tmp

  compile client-side templates without debugging
  instrumentation, making the output javascript
  very light-weight. This requires runtime.js
  in your projects.

     $ jade --client --no-debug < my.jade

## Tags

  Tags are simply nested via whitespace, closing
  tags defined for you. These indents are called "blocks".
  
    ul
      li
        a Foo
      li
        a Bar

  You may have several tags in one "block":
  
    ul
      li
        a Foo
        a Bar
        a Baz

## Self-closing Tags

  Some tags are flagged as self-closing by default, such
  as `meta`, `link`, and so on. To explicitly self-close
  a tag simply append the `/` character:

     foo/
     foo(bar='baz')/

  Would yield:
  
     <foo/>
     <foo bar="baz"/>

## Attributes

  Tag attributes look similar to HTML, however
  the values are regular JavaScript, here are
  some examples:
  
    a(href='google.com') Google
    a(class='button', href='google.com') Google

  As mentioned the attribute values are just JavaScript,
  this means ternary operations and other JavaScript expressions
  work just fine:
  
    body(class=user.authenticated ? 'authenticated' : 'anonymous')
    a(href=user.website || 'http://google.com')

  Multiple lines work too:

    input(type='checkbox',
      name='agreement',
      checked)

  Multiple lines without the comma work fine:

    input(type='checkbox'
      name='agreement'
      checked)

  Funky whitespace? fine:

    input(
      type='checkbox'
      name='agreement'
      checked)

## Boolean attributes

  Boolean attributes are mirrored by Jade, and accept
  bools, aka _true_ or _false_. When no value is specified
  _true_ is assumed. For example:
  
    input(type="checkbox", checked)
    // => "<input type="checkbox" checked="checked" />"

  For example if the checkbox was for an agreement, perhaps `user.agreed`
  was _true_ the following would also output 'checked="checked"':
  
     input(type="checkbox", checked=user.agreed)

## Class attributes

  The _class_ attribute accepts an array of classes,
  this can be handy when generated from a javascript
  function etc:
  
    classes = ['foo', 'bar', 'baz']
    a(class=classes)
    // => "<a class="foo bar baz"></a>"

## Class literal

  Classes may be defined using a ".CLASSNAME" syntax:
  
     .button
     // => "<div class="button"></div>"
  
  Or chained:
  
     .large.button
     // => "<div class="large button"></div>"

  The previous defaulted to divs, however you
  may also specify the tag type:
  
      h1.title My Title
      // => "<h1 class="title">My Title</h1>"

## Id literal

  Much like the class literal there's an id literal:
  
    #user-1
    // => "<div id="user-1"></div>"

  Again we may specify the tag as well:
  
    ul#menu
      li: a(href='/home') Home
      li: a(href='/store') Store
      li: a(href='/contact') Contact

  Finally all of these may be used in any combination,
  the following are all valid tags:
  
    a.button#contact(style: 'color: red') Contact
    a.button(style: 'color: red')#contact Contact
    a(style: 'color: red').button#contact Contact

## Block expansion

  Jade supports the concept of "block expansion", in which
  using a trailing ":" after a tag will inject a block:
  
    ul
      li: a Foo
      li: a Bar
      li: a Baz

## Text

   Arbitrary text may follow tags:
   
     p Welcome to my site
  
  yields:
  
     <p>Welcome to my site</p>

## Pipe text

  Another form of text is "pipe" text. Pipes act
  as the text margin for large bodies of text.

    p
      | This is a large
      | body of text for
      | this tag.
      | 
      | Nothing too
      | exciting.

  yields:
  
    <p>This is a large
    body of text for
    this tag.

    Nothing too
    exciting.
    </p>

  Using pipes we can also specify regular Jade tags
  within the text:
  
    p
      | Click to visit
      a(href='http://google.com') Google
      | if you want.

## Text only tags

  As an alternative to pipe text you may add
  a trailing "." to indicate that the block
  contains nothing but plain-text, no tags:

    p.
      This is a large
      body of text for
      this tag.

      Nothing too
      exciting.

  Some tags are text-only by default, for example
  _script_, _textarea_, and _style_ tags do not
  contain nested HTML so Jade implies the trailing ".":
  
    script
      if (foo) {
        bar();
      }

    style
      body {
        padding: 50px;
        font: 14px Helvetica;
      }

## Template script tags

  Sometimes it's useful to define HTML in script
  tags using Jade, typically for client-side templates.
  
  To do this simply give the _script_ tag an arbitrary
  _type_ attribute such as _text/x-template_:
  
    script(type='text/template')
      h1 Look!
      p Jade still works in here!

## Interpolation

  Both plain-text and piped-text support interpolation,
  which comes in two forms, escapes and non-escaped. The
  following will output the _user.name_ in the paragraph
  but HTML within it will be escaped to prevent XSS attacks:
  
    p Welcome #{user.name}

  The following syntax is identical however it will _not_ escape
  HTML, and should only be used with strings that you trust:
  
    p Welcome !{user.name}
  
## Inline HTML

  Sometimes constructing small inline snippets of HTML
  in Jade can be annoying, luckily we can add plain
  HTML as well:
  
    p Welcome <em>#{user.name}</em>

## Code

  To buffer output with Jade simply use _=_ at the beginning
  of a line or after a tag. This method escapes any HTML
  present in the string.
  
    p= user.description
    
  To buffer output unescaped use the _!=_ variant, but again
  be careful of XSS.
  
    p!= user.description
  
  The final way to mess with JavaScript code in Jade is the unbuffered
  _-_, which can be used for conditionals, defining variables etc:
  
    - var user = { description: 'foo bar baz' }
    #user
      - if (user.description) {
        h2 Description
        p.description= user.description
      - }

   When compiled blocks are wrapped in anonymous functions, so the
   following is also valid, without braces:
   
     - var user = { description: 'foo bar baz' }
     #user
       - if (user.description)
         h2 Description
         p.description= user.description

   If you really want you could even use `.forEach()` and others:
   
    - users.forEach(function(user){
      .user
        h2= user.name
        p User #{user.name} is #{user.age} years old
    - })

   Taking this further Jade provides some syntax for conditionals,
   iteration, switch statements etc. Let's look at those next!

## Assignment

  Jade's first-class assignment is simple, simply use the _=_
  operator and Jade will _var_ it for you. The following are equivalent:
  
    - var user = { name: 'tobi' }
    user = { name: 'tobi' }

## Conditionals

  Jade's first-class conditional syntax allows for optional
  parenthesis, and you may now omit the leading _-_ otherwise
  it's identical, still just regular javascript:
  
    user = { description: 'foo bar baz' }
    #user
      if user.description
        h2 Description
        p.description= user.description

  Jade provides the negated version, _unless_ as well, the following
  are equivalent:
  
    - if (!(user.isAnonymous))
      p You're logged in as #{user.name}

    unless user.isAnonymous
      p You're logged in as #{user.name}

## Iteration

  JavaScript's _for_ loops don't look very declarative, so Jade
  also provides its own _for_ loop construct, aliased as _each_:

    for user in users
      .user
        h2= user.name
        p user #{user.name} is #{user.age} year old

   As mentioned _each_ is identical:
   
     each user in users
       .user
         h2= user.name

   If necessary the index is available as well:
   
      for user, i in users
        .user(class='user-#{i}')
          h2= user.name

   Remember, it's just JavaScript:
   
      ul#letters
        for letter in ['a', 'b', 'c']
          li= letter

## Mixins

  Mixins provide a way to define jade "functions" which "mix in"
  their contents when called. This is useful for abstracting
  out large fragments of Jade.

  The simplest possible mixin which accepts no arguments might
  look like this:
  
      mixin hello
        p Hello

   You use a mixin by placing `+` before the name:

      +hello

   For something a little more dynamic, mixins can take
   arguments, the mixin itself is converted to a javascript
   function internally:
   
       mixin hello(user)
         p Hello #{user}

       +hello('Tobi')
  
   Yields:

       <p>Hello Tobi</p>

  Mixins may optionally take blocks, when a block is passed
  its contents becomes the implicit `block` argument. For
  example here is a mixin passed a block, and also invoked
  without passing a block:

      mixin article(title)
        .article
          .article-wrapper
            h1= title
            if block
              block
            else
              p No content provided
      
      +article('Hello world')
      
      +article('Hello world')
        p This is my
        p Amazing article

   yields:
   
       <div class="article">
         <div class="article-wrapper">
           <h1>Hello world</h1>
           <p>No content provided</p>
         </div>
       </div>

       <div class="article">
         <div class="article-wrapper">
           <h1>Hello world</h1>
           <p>This is my</p>
           <p>Amazing article</p>
         </div>
       </div>

  Mixins can even take attributes, just like a tag. When
  attributes are passed they become the implicit `attributes`
  argument. Individual attributes can be accessed just like
  normal object properties:
  
      mixin centered
        .centered(class=attributes.class)
          block
      
      +centered.bold Hello world
      
      +centered.red
        p This is my
        p Amazing article
  
   yields:
   
       <div class="centered bold">Hello world</div>
       <div class="centered red">
         <p>This is my</p>
         <p>Amazing article</p>
       </div>
  
   If you use `attributes` directly, *all* passed attributes
   get used:
   
      mixin link
        a.menu(attributes)
          block
      
      +link.highlight(href='#top') Top
      +link#sec1.plain(href='#section1') Section 1
      +link#sec2.plain(href='#section2') Section 2
  
   yields:
   
       <a href="#top" class="highlight menu">Top</a>
       <a id="sec1" href="#section1" class="plain menu">Section 1</a>
       <a id="sec2" href="#section2" class="plain menu">Section 2</a>
   
   If you pass arguments, they must directly follow the mixin:
   
      mixin list(arr)
        if block
          .title
            block
        ul(attributes)
          each item in arr
            li= item
      
      +list(['foo', 'bar', 'baz'])(id='myList', class='bold')
  
   yields:
   
       <ul id="myList" class="bold">
         <li>foo</li>
         <li>bar</li>
         <li>baz</li>
       </ul>


0.6.1 / 2012-06-01 
==================

  * Added: append (yes or no) on confirmation
  * Added: allow node.js v0.7.x

0.6.0 / 2012-04-10 
==================

  * Added `.prompt(obj, callback)` support. Closes #49
  * Added default support to .choose(). Closes #41
  * Fixed the choice example

0.5.1 / 2011-12-20 
==================

  * Fixed `password()` for recent nodes. Closes #36

0.5.0 / 2011-12-04 
==================

  * Added sub-command option support [itay]

0.4.3 / 2011-12-04 
==================

  * Fixed custom help ordering. Closes #32

0.4.2 / 2011-11-24 
==================

  * Added travis support
  * Fixed: line-buffered input automatically trimmed. Closes #31

0.4.1 / 2011-11-18 
==================

  * Removed listening for "close" on --help

0.4.0 / 2011-11-15 
==================

  * Added support for `--`. Closes #24

0.3.3 / 2011-11-14 
==================

  * Fixed: wait for close event when writing help info [Jerry Hamlet]

0.3.2 / 2011-11-01 
==================

  * Fixed long flag definitions with values [felixge]

0.3.1 / 2011-10-31 
==================

  * Changed `--version` short flag to `-V` from `-v`
  * Changed `.version()` so it's configurable [felixge]

0.3.0 / 2011-10-31 
==================

  * Added support for long flags only. Closes #18

0.2.1 / 2011-10-24 
==================

  * "node": ">= 0.4.x < 0.7.0". Closes #20

0.2.0 / 2011-09-26 
==================

  * Allow for defaults that are not just boolean. Default peassignment only occurs for --no-*, optional, and required arguments. [Jim Isaacs]

0.1.0 / 2011-08-24 
==================

  * Added support for custom `--help` output

0.0.5 / 2011-08-18 
==================

  * Changed: when the user enters nothing prompt for password again
  * Fixed issue with passwords beginning with numbers [NuckChorris]

0.0.4 / 2011-08-15 
==================

  * Fixed `Commander#args`

0.0.3 / 2011-08-15 
==================

  * Added default option value support

0.0.2 / 2011-08-15 
==================

  * Added mask support to `Command#password(str[, mask], fn)`
  * Added `Command#password(str, fn)`

0.0.1 / 2010-01-03
==================

  * Initial release

# Commander.js

  The complete solution for [node.js](http://nodejs.org) command-line interfaces, inspired by Ruby's [commander](https://github.com/visionmedia/commander).

 [![Build Status](https://secure.travis-ci.org/visionmedia/commander.js.png)](http://travis-ci.org/visionmedia/commander.js)

## Installation

    $ npm install commander

## Option parsing

 Options with commander are defined with the `.option()` method, also serving as documentation for the options. The example below parses args and options from `process.argv`, leaving remaining args as the `program.args` array which were not consumed by options.

```js
#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander');

program
  .version('0.0.1')
  .option('-p, --peppers', 'Add peppers')
  .option('-P, --pineapple', 'Add pineapple')
  .option('-b, --bbq', 'Add bbq sauce')
  .option('-c, --cheese [type]', 'Add the specified type of cheese [marble]', 'marble')
  .parse(process.argv);

console.log('you ordered a pizza with:');
if (program.peppers) console.log('  - peppers');
if (program.pineapple) console.log('  - pineappe');
if (program.bbq) console.log('  - bbq');
console.log('  - %s cheese', program.cheese);
```

 Short flags may be passed as a single arg, for example `-abc` is equivalent to `-a -b -c`. Multi-word options such as "--template-engine" are camel-cased, becoming `program.templateEngine` etc.

## Automated --help

 The help information is auto-generated based on the information commander already knows about your program, so the following `--help` info is for free:

```  
 $ ./examples/pizza --help

   Usage: pizza [options]

   Options:

     -V, --version        output the version number
     -p, --peppers        Add peppers
     -P, --pineapple      Add pineappe
     -b, --bbq            Add bbq sauce
     -c, --cheese <type>  Add the specified type of cheese [marble]
     -h, --help           output usage information

```

## Coercion

```js
function range(val) {
  return val.split('..').map(Number);
}

function list(val) {
  return val.split(',');
}

program
  .version('0.0.1')
  .usage('[options] <file ...>')
  .option('-i, --integer <n>', 'An integer argument', parseInt)
  .option('-f, --float <n>', 'A float argument', parseFloat)
  .option('-r, --range <a>..<b>', 'A range', range)
  .option('-l, --list <items>', 'A list', list)
  .option('-o, --optional [value]', 'An optional value')
  .parse(process.argv);

console.log(' int: %j', program.integer);
console.log(' float: %j', program.float);
console.log(' optional: %j', program.optional);
program.range = program.range || [];
console.log(' range: %j..%j', program.range[0], program.range[1]);
console.log(' list: %j', program.list);
console.log(' args: %j', program.args);
```

## Custom help

 You can display arbitrary `-h, --help` information
 by listening for "--help". Commander will automatically
 exit once you are done so that the remainder of your program
 does not execute causing undesired behaviours, for example
 in the following executable "stuff" will not output when
 `--help` is used.

```js
#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('../');

function list(val) {
  return val.split(',').map(Number);
}

program
  .version('0.0.1')
  .option('-f, --foo', 'enable some foo')
  .option('-b, --bar', 'enable some bar')
  .option('-B, --baz', 'enable some baz');

// must be before .parse() since
// node's emit() is immediate

program.on('--help', function(){
  console.log('  Examples:');
  console.log('');
  console.log('    $ custom-help --help');
  console.log('    $ custom-help -h');
  console.log('');
});

program.parse(process.argv);

console.log('stuff');
```

yielding the following help output:

```

Usage: custom-help [options]

Options:

  -h, --help     output usage information
  -V, --version  output the version number
  -f, --foo      enable some foo
  -b, --bar      enable some bar
  -B, --baz      enable some baz

Examples:

  $ custom-help --help
  $ custom-help -h

```

## .prompt(msg, fn)

 Single-line prompt:

```js
program.prompt('name: ', function(name){
  console.log('hi %s', name);
});
```

 Multi-line prompt:

```js
program.prompt('description:', function(name){
  console.log('hi %s', name);
});
```

 Coercion:

```js
program.prompt('Age: ', Number, function(age){
  console.log('age: %j', age);
});
```

```js
program.prompt('Birthdate: ', Date, function(date){
  console.log('date: %s', date);
});
```

## .password(msg[, mask], fn)

Prompt for password without echoing:

```js
program.password('Password: ', function(pass){
  console.log('got "%s"', pass);
  process.stdin.destroy();
});
```

Prompt for password with mask char "*":

```js
program.password('Password: ', '*', function(pass){
  console.log('got "%s"', pass);
  process.stdin.destroy();
});
```

## .confirm(msg, fn)

 Confirm with the given `msg`:

```js
program.confirm('continue? ', function(ok){
  console.log(' got %j', ok);
});
```

## .choose(list, fn)

 Let the user choose from a `list`:

```js
var list = ['tobi', 'loki', 'jane', 'manny', 'luna'];

console.log('Choose the coolest pet:');
program.choose(list, function(i){
  console.log('you chose %d "%s"', i, list[i]);
});
```

## Links

 - [API documentation](http://visionmedia.github.com/commander.js/)
 - [ascii tables](https://github.com/LearnBoost/cli-table)
 - [progress bars](https://github.com/visionmedia/node-progress)
 - [more progress bars](https://github.com/substack/node-multimeter)
 - [examples](https://github.com/visionmedia/commander.js/tree/master/examples)

## License 

(The MIT License)

Copyright (c) 2011 TJ Holowaychuk &lt;tj@vision-media.ca&gt;

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# mkdirp

Like `mkdir -p`, but in node.js!

[![build status](https://secure.travis-ci.org/substack/node-mkdirp.png)](http://travis-ci.org/substack/node-mkdirp)

# example

## pow.js

```js
var mkdirp = require('mkdirp');
    
mkdirp('/tmp/foo/bar/baz', function (err) {
    if (err) console.error(err)
    else console.log('pow!')
});
```

Output

```
pow!
```

And now /tmp/foo/bar/baz exists, huzzah!

# methods

```js
var mkdirp = require('mkdirp');
```

## mkdirp(dir, mode, cb)

Create a new directory and any necessary subdirectories at `dir` with octal
permission string `mode`.

If `mode` isn't specified, it defaults to `0777 & (~process.umask())`.

`cb(err, made)` fires with the error or the first directory `made`
that had to be created, if any.

## mkdirp.sync(dir, mode)

Synchronously create a new directory and any necessary subdirectories at `dir`
with octal permission string `mode`.

If `mode` isn't specified, it defaults to `0777 & (~process.umask())`.

Returns the first directory that had to be created, if any.

# install

With [npm](http://npmjs.org) do:

```
npm install mkdirp
```

# license

MIT

# Jade - template engine 
[![Build Status](https://secure.travis-ci.org/visionmedia/jade.png)](http://travis-ci.org/visionmedia/jade)
[![Dependency Status](https://gemnasium.com/visionmedia/jade.png)](https://gemnasium.com/visionmedia/jade)

 Jade is a high performance template engine heavily influenced by [Haml](http://haml-lang.com)
 and implemented with JavaScript for [node](http://nodejs.org). For discussion join the [Google Group](http://groups.google.com/group/jadejs).

## Test drive

  You can test drive Jade online [here](http://naltatis.github.com/jade-syntax-docs).

## README Contents

- [Features](#a1)
- [Implementations](#a2)
- [Installation](#a3)
- [Browser Support](#a4)
- [Public API](#a5)
- [Syntax](#a6)
    - [Line Endings](#a6-1)
    - [Tags](#a6-2)
    - [Tag Text](#a6-3)
    - [Comments](#a6-4)
    - [Block Comments](#a6-5)
    - [Nesting](#a6-6)
    - [Block Expansion](#a6-7)
    - [Case](#a6-8)
    - [Attributes](#a6-9)
    - [HTML](#a6-10)
    - [Doctypes](#a6-11)
- [Filters](#a7)
- [Code](#a8)
- [Iteration](#a9)
- [Conditionals](#a10)
- [Template inheritance](#a11)
- [Block append / prepend](#a12)
- [Includes](#a13)
- [Mixins](#a14)
- [Generated Output](#a15)
- [Example Makefile](#a16)
- [jade(1)](#a17)
- [Tutorials](#a18)
- [License](#a19)

<a name="a1"/>
## Features

  - client-side support
  - great readability
  - flexible indentation
  - block-expansion
  - mixins
  - static includes
  - attribute interpolation
  - code is escaped by default for security
  - contextual error reporting at compile &amp; run time
  - executable for compiling jade templates via the command line
  - html 5 mode (the default doctype)
  - optional memory caching
  - combine dynamic and static tag classes
  - parse tree manipulation via _filters_
  - template inheritance
  - block append / prepend
  - supports [Express JS](http://expressjs.com) out of the box
  - transparent iteration over objects, arrays, and even non-enumerables via `each`
  - block comments
  - no tag prefix
  - filters
    - :stylus must have [stylus](http://github.com/LearnBoost/stylus) installed
    - :less must have [less.js](http://github.com/cloudhead/less.js) installed
    - :markdown must have [markdown-js](http://github.com/evilstreak/markdown-js), [node-discount](http://github.com/visionmedia/node-discount), or [marked](http://github.com/chjj/marked) installed
    - :cdata
    - :coffeescript must have [coffee-script](http://jashkenas.github.com/coffee-script/) installed
  - [Emacs Mode](https://github.com/brianc/jade-mode)
  - [Vim Syntax](https://github.com/digitaltoad/vim-jade)
  - [TextMate Bundle](http://github.com/miksago/jade-tmbundle)
  - [Coda/SubEtha syntax Mode](https://github.com/aaronmccall/jade.mode)
  - [Screencasts](http://tjholowaychuk.com/post/1004255394/jade-screencast-template-engine-for-nodejs)
  - [html2jade](https://github.com/donpark/html2jade) converter

<a name="a2"/>
## Implementations

  - [php](http://github.com/everzet/jade.php)
  - [scala](http://scalate.fusesource.org/versions/snapshot/documentation/scaml-reference.html)
  - [ruby](http://github.com/stonean/slim)
  - [python](https://github.com/SyrusAkbary/pyjade)
  - [java](https://github.com/neuland/jade4j)

<a name="a3"/>
## Installation

via npm:

```bash
$ npm install jade
```

<a name="a4"/>
## Browser Support

 To compile jade to a single file compatible for client-side use simply execute:

```bash
$ make jade.js
```

 Alternatively, if uglifyjs is installed via npm (`npm install uglify-js`) you may execute the following which will create both files. However each release builds these for you.

```bash
$ make jade.min.js
```

  By default Jade instruments templates with line number statements such as `__.lineno = 3` for debugging purposes. When used in a browser it's useful to minimize this boiler plate, you can do so by passing the option `{ compileDebug: false }`. The following template

```jade
p Hello #{name}
```

 Can then be as small as the following generated function:

```js
function anonymous(locals, attrs, escape, rethrow) {
  var buf = [];
  with (locals || {}) {
    var interp;
    buf.push('\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\n</p>');
  }
  return buf.join("");
}
```

  Through the use of Jade's `./runtime.js` you may utilize these pre-compiled templates on the client-side _without_ Jade itself, all you need is the associated utility functions (in runtime.js), which are then available as `jade.attrs`, `jade.escape` etc. To enable this you should pass `{ client: true }` to `jade.compile()` to tell Jade to reference the helper functions
  via `jade.attrs`, `jade.escape` etc.

```js
function anonymous(locals, attrs, escape, rethrow) {
  var attrs = jade.attrs, escape = jade.escape, rethrow = jade.rethrow;
  var buf = [];
  with (locals || {}) {
    var interp;
    buf.push('\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\n</p>');
  }
  return buf.join("");
}
```

<a name="a5"/>
## Public API

```js
var jade = require('jade');

// Compile a function
var fn = jade.compile('string of jade', options);
fn(locals);
```

### Options

 - `self`      Use a `self` namespace to hold the locals _(false by default)_
 - `locals`    Local variable object
 - `filename`  Used in exceptions, and required when using includes
 - `debug`     Outputs tokens and function body generated
 - `compiler`  Compiler to replace jade's default
 - `compileDebug`  When `false` no debug instrumentation is compiled
 - `pretty`    Add pretty-indentation whitespace to output _(false by default)_

<a name="a6"/>
## Syntax

<a name="a6-1"/>
### Line Endings

**CRLF** and **CR** are converted to **LF** before parsing.

<a name="a6-2"/>
### Tags

A tag is simply a leading word:

```jade
html
```

for example is converted to `<html></html>`

tags can also have ids:

```jade
div#container
```

which would render `<div id="container"></div>`

how about some classes?

```jade
div.user-details
```

renders `<div class="user-details"></div>`

multiple classes? _and_ an id? sure:

```jade
div#foo.bar.baz
```

renders `<div id="foo" class="bar baz"></div>`

div div div sure is annoying, how about:

```jade
#foo
.bar
```

which is syntactic sugar for what we have already been doing, and outputs:

```html
<div id="foo"></div><div class="bar"></div>
```

<a name="a6-3"/>
### Tag Text

Simply place some content after the tag:

```jade
p wahoo!
```

renders `<p>wahoo!</p>`.

well cool, but how about large bodies of text:

```jade
p
  | foo bar baz
  | rawr rawr
  | super cool
  | go jade go
```

renders `<p>foo bar baz rawr.....</p>`

interpolation? yup! both types of text can utilize interpolation,
if we passed `{ name: 'tj', email: 'tj@vision-media.ca' }` to the compiled function we can do the following:

```jade
#user #{name} &lt;#{email}&gt;
```

outputs `<div id="user">tj &lt;tj@vision-media.ca&gt;</div>`

Actually want `#{}` for some reason? escape it!

```jade
p \#{something}
```

now we have `<p>#{something}</p>`

We can also utilize the unescaped variant `!{html}`, so the following
will result in a literal script tag:

```jade
- var html = "<script></script>"
| !{html}
```

Nested tags that also contain text can optionally use a text block:

```jade
label
  | Username:
  input(name='user[name]')
```

or immediate tag text:

```jade
label Username:
  input(name='user[name]')
```

Tags that accept _only_ text such as `script` and `style` do not
need the leading `|` character, for example:

```jade
html
  head
    title Example
    script
      if (foo) {
        bar();
      } else {
        baz();
      }
```

Once again as an alternative, we may use a trailing `.` to indicate a text block, for example:

```jade
p.
  foo asdf
  asdf
   asdfasdfaf
   asdf
  asd.
```

outputs:

```html
<p>foo asdf
asdf
  asdfasdfaf
  asdf
asd.
</p>
```

This however differs from a trailing `.` followed by a space, which although is ignored by the Jade parser, tells Jade that this period is a literal:

```jade
p .
```

outputs:

```html
<p>.</p>
```

It should be noted that text blocks should be doubled escaped.  For example if you desire the following output.

```html
<p>foo\bar</p>
```

use:

```jade
p.
  foo\\bar
```

<a name="a6-4"/>
### Comments

Single line comments currently look the same as JavaScript comments,
aka `//` and must be placed on their own line:

```jade
// just some paragraphs
p foo
p bar
```

would output

```html
<!-- just some paragraphs -->
<p>foo</p>
<p>bar</p>
```

Jade also supports unbuffered comments, by simply adding a hyphen:

```jade
//- will not output within markup
p foo
p bar
```

outputting

```html
<p>foo</p>
<p>bar</p>
```

<a name="a6-5"/>
### Block Comments

 A block comment is legal as well:

```jade
body
  //
    #content
      h1 Example
```

outputting

```html
<body>
  <!--
  <div id="content">
    <h1>Example</h1>
  </div>
  -->
</body>
```

Jade supports conditional-comments as well, for example:

```jade
head
  //if lt IE 8
    script(src='/ie-sucks.js')
```

outputs:

```html
<head>
  <!--[if lt IE 8]>
    <script src="/ie-sucks.js"></script>
  <![endif]-->
</head>
```

<a name="a6-6"/>
### Nesting

 Jade supports nesting to define the tags in a natural way:

```jade
ul
  li.first
    a(href='#') foo
  li
    a(href='#') bar
  li.last
    a(href='#') baz
```

<a name="a6-7"/>
### Block Expansion

 Block expansion allows you to create terse single-line nested tags,
 the following example is equivalent to the nesting example above.

```jade
ul
  li.first: a(href='#') foo
  li: a(href='#') bar
  li.last: a(href='#') baz
```

<a name="a6-8"/>
### Case

 The case statement takes the following form:

```jade
html
  body
    friends = 10
    case friends
      when 0
        p you have no friends
      when 1
        p you have a friend
      default
        p you have #{friends} friends
```

 Block expansion may also be used:

```jade
friends = 5

html
  body
    case friends
      when 0: p you have no friends
      when 1: p you have a friend
      default: p you have #{friends} friends
```

<a name="a6-9"/>
### Attributes

Jade currently supports `(` and `)` as attribute delimiters.

```jade
a(href='/login', title='View login page') Login
```

When a value is `undefined` or `null` the attribute is _not_ added,
so this is fine, it will not compile `something="null"`.

```jade
div(something=null)
```

Boolean attributes are also supported:

```jade
input(type="checkbox", checked)
```

Boolean attributes with code will only output the attribute when `true`:

```jade
input(type="checkbox", checked=someValue)
```

Multiple lines work too:

```jade
input(type='checkbox',
  name='agreement',
  checked)
```

Multiple lines without the comma work fine:

```jade
input(type='checkbox'
  name='agreement'
  checked)
```

Funky whitespace? fine:

```jade
input(
  type='checkbox'
  name='agreement'
  checked)
```

Colons work:

```jade
rss(xmlns:atom="atom")
```

Suppose we have the `user` local `{ id: 12, name: 'tobi' }`
and we wish to create an anchor tag with `href` pointing to "/user/12"
we could use regular javascript concatenation:

```jade
a(href='/user/' + user.id)= user.name
```

or we could use jade's interpolation, which I added because everyone
using Ruby or CoffeeScript seems to think this is legal js..:

```jade
a(href='/user/#{user.id}')= user.name
```

The `class` attribute is special-cased when an array is given,
allowing you to pass an array such as `bodyClasses = ['user', 'authenticated']` directly:

```jade
body(class=bodyClasses)
```

<a name="a6-10"/>
### HTML

 Inline html is fine, we can use the pipe syntax to
 write arbitrary text, in this case some html:

```jade
html
  body
    | <h1>Title</h1>
    | <p>foo bar baz</p>
```

 Or we can use the trailing `.` to indicate to Jade that we
 only want text in this block, allowing us to omit the pipes:

```jade
html
  body.
    <h1>Title</h1>
    <p>foo bar baz</p>
```

 Both of these examples yield the same result:

```html
<html><body><h1>Title</h1>
<p>foo bar baz</p>
</body></html>
```

 The same rule applies for anywhere you can have text
 in jade, raw html is fine:

```jade
html
  body
    h1 User <em>#{name}</em>
```

<a name="a6-11"/>
### Doctypes

To add a doctype simply use `!!!`, or `doctype` followed by an optional value:

```jade
!!!
```

or

```jade
doctype
```

Will output the _html 5_  doctype, however:

```jade
!!! transitional
```

Will output the _transitional_ doctype.

Doctypes are case-insensitive, so the following are equivalent:

```jade
doctype Basic
doctype basic
```

it's also possible to simply pass a doctype literal:

```jade
doctype html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN
```

yielding:

```html
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN>
```

Below are the doctypes defined by default, which can easily be extended:

```js
var doctypes = exports.doctypes = {
  '5': '<!DOCTYPE html>',
  'default': '<!DOCTYPE html>',
  'xml': '<?xml version="1.0" encoding="utf-8" ?>',
  'transitional': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">',
  'strict': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">',
  'frameset': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">',
  '1.1': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">',
  'basic': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN" "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd">',
  'mobile': '<!DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.2//EN" "http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd">'
};
```

To alter the default simply change:

```js
jade.doctypes.default = 'whatever you want';
```

<a name="a7"/>
## Filters

Filters are prefixed with `:`, for example `:markdown` and
pass the following block of text to an arbitrary function for processing. View the _features_
at the top of this document for available filters.

```jade
body
  :markdown
    Woah! jade _and_ markdown, very **cool**
    we can even link to [stuff](http://google.com)
```

Renders:

```html
<body><p>Woah! jade <em>and</em> markdown, very <strong>cool</strong> we can even link to <a href="http://google.com">stuff</a></p></body>
```

<a name="a8"/>
## Code

Jade currently supports three classifications of executable code. The first
is prefixed by `-`, and is not buffered:

```jade
- var foo = 'bar';
```

This can be used for conditionals, or iteration:

```jade
- for (var key in obj)
  p= obj[key]
```

Due to Jade's buffering techniques the following is valid as well:

```jade
- if (foo)
  ul
    li yay
    li foo
    li worked
- else
  p oh no! didnt work
```

Hell, even verbose iteration:

```jade
- if (items.length)
  ul
    - items.forEach(function(item){
      li= item
    - })
```

Anything you want!

Next up we have _escaped_ buffered code, which is used to
buffer a return value, which is prefixed by `=`:

```jade
- var foo = 'bar'
= foo
h1= foo
```

Which outputs `bar<h1>bar</h1>`. Code buffered by `=` is escaped
by default for security, however to output unescaped return values
you may use `!=`:

```jade
p!= aVarContainingMoreHTML
```

 Jade also has designer-friendly variants, making the literal JavaScript
 more expressive and declarative. For example the following assignments
 are equivalent, and the expression is still regular javascript:

```jade
- var foo = 'foo ' + 'bar'
foo = 'foo ' + 'bar'
```

  Likewise Jade has first-class `if`, `else if`, `else`, `until`, `while`, `unless` among others, however you must remember that the expressions are still regular javascript:

```jade
if foo == 'bar'
  ul
    li yay
    li foo
    li worked
else
  p oh no! didnt work
```

<a name="a9"/>
## Iteration

 Along with vanilla JavaScript Jade also supports a subset of
 constructs that allow you to create more designer-friendly templates,
 one of these constructs is `each`, taking the form:

```jade
each VAL[, KEY] in OBJ
```

An example iterating over an array:

```jade
- var items = ["one", "two", "three"]
each item in items
  li= item
```

outputs:

```html
<li>one</li>
<li>two</li>
<li>three</li>
```

iterating an array with index:

```jade
items = ["one", "two", "three"]
each item, i in items
  li #{item}: #{i}
```

outputs:

```html
<li>one: 0</li>
<li>two: 1</li>
<li>three: 2</li>
```

iterating an object's keys and values:

```jade
obj = { foo: 'bar' }
each val, key in obj
  li #{key}: #{val}
```

would output `<li>foo: bar</li>`

Internally Jade converts these statements to regular
JavaScript loops such as `users.forEach(function(user){`,
so lexical scope and nesting applies as it would with regular
JavaScript:

```jade
each user in users
  each role in user.roles
    li= role
```

 You may also use `for` if you prefer:

```jade
for user in users
  for role in user.roles
    li= role
```

<a name="a10"/>
## Conditionals

 Jade conditionals are equivalent to those using the code (`-`) prefix,
 however allow you to ditch parenthesis to become more designer friendly,
 however keep in mind the expression given is _regular_ JavaScript:

```jade
for user in users
  if user.role == 'admin'
    p #{user.name} is an admin
  else
    p= user.name
```

 is equivalent to the following using vanilla JavaScript literals:

```jade
for user in users
  - if (user.role == 'admin')
    p #{user.name} is an admin
  - else
    p= user.name
```

  Jade also provides `unless` which is equivalent to `if (!(expr))`:

```jade
for user in users
  unless user.isAnonymous
    p
      | Click to view
      a(href='/users/' + user.id)= user.name
```

<a name="a11"/>
## Template inheritance

  Jade supports template inheritance via the `block` and `extends` keywords. A block is simply a "block" of Jade that may be replaced within a child template, this process is recursive. To activate template inheritance in Express 2.x you must add: `app.set('view options', { layout: false });`.

  Jade blocks can provide default content if desired, however optional as shown below by `block scripts`, `block content`, and `block foot`.

```jade
html
  head
    h1 My Site - #{title}
    block scripts
      script(src='/jquery.js')
  body
    block content
    block foot
      #footer
        p some footer content
```

  Now to extend the layout, simply create a new file and use the `extends` directive as shown below, giving the path (with or without the .jade extension). You may now define one or more blocks that will override the parent block content, note that here the `foot` block is _not_ redefined and will output "some footer content".

```jade
extends layout

block scripts
  script(src='/jquery.js')
  script(src='/pets.js')

block content
  h1= title
  each pet in pets
    include pet
```

  It's also possible to override a block to provide additional blocks, as shown in the following example where `content` now exposes a `sidebar` and `primary` block for overriding, or the child template could override `content` all together.

```jade
extends regular-layout

block content
  .sidebar
    block sidebar
      p nothing
  .primary
    block primary
      p nothing
```

<a name="a12"/>
## Block append / prepend

 Jade allows you to _replace_ (default), _prepend_, or _append_ blocks. Suppose for example you have default scripts in a "head" block that you wish to utilize on _every_ page, you might do this:

```jade
html
  head
    block head
      script(src='/vendor/jquery.js')
      script(src='/vendor/caustic.js')
    body
      block content
```

 Now suppose you have a page of your application for a JavaScript game, you want some game related scripts as well as these defaults, you can simply `append` the block:

```jade
extends layout

block append head
  script(src='/vendor/three.js')
  script(src='/game.js')
```

  When using `block append` or `block prepend` the `block` is optional:

```jade
extends layout

append head
  script(src='/vendor/three.js')
  script(src='/game.js')
```

<a name="a13"/>
## Includes

 Includes allow you to statically include chunks of Jade,
 or other content like css, or html which lives in separate files. The classical example is including a header and footer. Suppose we have the following directory structure:

    ./layout.jade
    ./includes/
      ./head.jade
      ./foot.jade

and the following _layout.jade_:

```jade
html
  include includes/head
  body
    h1 My Site
    p Welcome to my super amazing site.
    include includes/foot
```

both includes _includes/head_ and _includes/foot_ are
read relative to the `filename` option given to _layout.jade_,
which should be an absolute path to this file, however Express does this for you. Include then parses these files, and injects the AST produced to render what you would expect:

```html
<html>
  <head>
    <title>My Site</title>
    <script src="/javascripts/jquery.js">
    </script><script src="/javascripts/app.js"></script>
  </head>
  <body>
    <h1>My Site</h1>
    <p>Welcome to my super lame site.</p>
    <div id="footer">
      <p>Copyright>(c) foobar</p>
    </div>
  </body>
</html>
```

 As mentioned `include` can be used to include other content
 such as html or css. By providing an extension Jade will not
 assume that the file is Jade source and will include it as
 a literal:

```jade
html
  body
    include content.html
```

  Include directives may also accept a block, in which case the
  the given block will be appended to the _last_ block defined
  in the file. For example if `head.jade` contains:

```jade
head
  script(src='/jquery.js')
```

 We may append values by providing a block to `include head`
 as shown below, adding the two scripts.

```jade
html
  include head
    script(src='/foo.js')
    script(src='/bar.js')
  body
    h1 test
```

 You may also `yield` within an included template, allowing you to explicitly mark where the block given to `include` will be placed. Suppose for example you wish to prepend scripts rather than append, you might do the following:

```jade
head
  yield
  script(src='/jquery.js')
  script(src='/jquery.ui.js')
```

 Since included Jade is parsed and literally merges the AST, lexically scoped variables function as if the included Jade was written right in the same file. This means `include` may be used as sort of partial, for example suppose we have `user.jade` which utilizes a `user` variable.

```jade
h1= user.name
p= user.occupation
```

We could then simply `include user` while iterating users, and since the `user` variable is already defined within the loop the included template will have access to it.

```jade
users = [{ name: 'Tobi', occupation: 'Ferret' }]

each user in users
  .user
    include user
```

yielding:

```html
<div class="user">
  <h1>Tobi</h1>
  <p>Ferret</p>
</div>
```

If we wanted to expose a different variable name as `user` since `user.jade` references that name, we could simply define a new variable as shown here with `user = person`:

```jade
each person in users
  .user
    user = person
    include user
```

<a name="a14"/>
## Mixins

 Mixins are converted to regular JavaScript functions in
 the compiled template that Jade constructs. Mixins may
 take arguments, though not required:

```jade
mixin list
  ul
    li foo
    li bar
    li baz
```

  Utilizing a mixin without args looks similar, just without a block:

```jade
h2 Groceries
mixin list
```

  Mixins may take one or more arguments as well, the arguments
  are regular javascripts expressions, so for example the following:

```jade
mixin pets(pets)
  ul.pets
    - each pet in pets
      li= pet

mixin profile(user)
  .user
    h2= user.name
    mixin pets(user.pets)
```

   Would yield something similar to the following html:

```html
<div class="user">
  <h2>tj</h2>
  <ul class="pets">
    <li>tobi</li>
    <li>loki</li>
    <li>jane</li>
    <li>manny</li>
  </ul>
</div>
```

<a name="a15"/>
## Generated Output

 Suppose we have the following Jade:

```jade
- var title = 'yay'
h1.title #{title}
p Just an example
```

 When the `compileDebug` option is not explicitly `false`, Jade
 will compile the function instrumented with `__.lineno = n;`, which
 in the event of an exception is passed to `rethrow()` which constructs
 a useful message relative to the initial Jade input.

```js
function anonymous(locals) {
  var __ = { lineno: 1, input: "- var title = 'yay'\nh1.title #{title}\np Just an example", filename: "testing/test.js" };
  var rethrow = jade.rethrow;
  try {
    var attrs = jade.attrs, escape = jade.escape;
    var buf = [];
    with (locals || {}) {
      var interp;
      __.lineno = 1;
       var title = 'yay'
      __.lineno = 2;
      buf.push('<h1');
      buf.push(attrs({ "class": ('title') }));
      buf.push('>');
      buf.push('' + escape((interp = title) == null ? '' : interp) + '');
      buf.push('</h1>');
      __.lineno = 3;
      buf.push('<p>');
      buf.push('Just an example');
      buf.push('</p>');
    }
    return buf.join("");
  } catch (err) {
    rethrow(err, __.input, __.filename, __.lineno);
  }
}
```

When the `compileDebug` option _is_ explicitly `false`, this instrumentation
is stripped, which is very helpful for light-weight client-side templates. Combining Jade's options with the `./runtime.js` file in this repo allows you
to toString() compiled templates and avoid running the entire Jade library on
the client, increasing performance, and decreasing the amount of JavaScript
required.

```js
function anonymous(locals) {
  var attrs = jade.attrs, escape = jade.escape;
  var buf = [];
  with (locals || {}) {
    var interp;
    var title = 'yay'
    buf.push('<h1');
    buf.push(attrs({ "class": ('title') }));
    buf.push('>');
    buf.push('' + escape((interp = title) == null ? '' : interp) + '');
    buf.push('</h1>');
    buf.push('<p>');
    buf.push('Just an example');
    buf.push('</p>');
  }
  return buf.join("");
}
```

<a name="a16"/>
## Example Makefile

  Below is an example Makefile used to compile _pages/*.jade_
  into _pages/*.html_ files by simply executing `make`.

_Note:_ If you try to run this snippet and `make` throws a `missing separator` error, you should make sure all indented lines use a tab for indentation instead of spaces. (For whatever reason, GitHub renders this code snippet with 4-space indentation although the actual README file uses tabs in this snippet.)

```make
JADE = $(shell find . -wholename './pages/*.jade')
HTML = $(JADE:.jade=.html)

all: $(HTML)

%.html: %.jade
	jade < $< --path $< > $@

clean:
	rm -f $(HTML)

.PHONY: clean
```

this can be combined with the `watch(1)` command to produce
a watcher-like behaviour:

```bash
$ watch make
```

<a name="a17"/>
## jade(1)

```

Usage: jade [options] [dir|file ...]

Options:

  -h, --help         output usage information
  -V, --version      output the version number
  -o, --obj <str>    javascript options object
  -O, --out <dir>    output the compiled html to <dir>
  -p, --path <path>  filename used to resolve includes
  -P, --pretty       compile pretty html output
  -c, --client       compile for client-side runtime.js
  -D, --no-debug     compile without debugging (smaller functions)

Examples:

  # translate jade the templates dir
  $ jade templates

  # create {foo,bar}.html
  $ jade {foo,bar}.jade

  # jade over stdio
  $ jade < my.jade > my.html

  # jade over stdio
  $ echo "h1 Jade!" | jade

  # foo, bar dirs rendering to /tmp
  $ jade foo bar --out /tmp

```

<a name="a18"/>
## Tutorials

  - cssdeck interactive [Jade syntax tutorial](http://cssdeck.com/labs/learning-the-jade-templating-engine-syntax)
  - cssdeck interactive [Jade logic tutorial](http://cssdeck.com/labs/jade-templating-tutorial-codecast-part-2)
  - in [Japanese](http://blog.craftgear.net/4f501e97c1347ec934000001/title/10%E5%88%86%E3%81%A7%E3%82%8F%E3%81%8B%E3%82%8Bjade%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3)

<a name="a19"/>
## License

(The MIT License)

Copyright (c) 2009-2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# Jade - Ê®°ÊùøÂºïÊìé

 Jade ÊòØ‰∏Ä‰∏™È´òÊÄßËÉΩÁöÑÊ®°ÊùøÂºïÊìéÔºåÂÆÉÊ∑±Âèó[Haml](http://haml-lang.com)ÂΩ±ÂìçÔºåÂÆÉÊòØÁî®javascriptÂÆûÁé∞ÁöÑ,Âπ∂‰∏îÂèØ‰ª•‰æõ[node](http://nodejs.org)‰ΩøÁî®.

 ÁøªËØë:[Ëçâ‰æùÂ±±](http://jser.me) &nbsp; [ÁøªËØëÂèçÈ¶à](http://weibo.com/1826461472/z9jriDdmB#pl_profile_nav) &nbsp;[Fork me](https://github.com/jserme/jade/)

## ÁâπÊÄß

  - ÂÆ¢Êà∑Á´ØÊîØÊåÅ
  - ‰ª£Á†ÅÈ´òÂèØËØª
  - ÁÅµÊ¥ªÁöÑÁº©Ëøõ
  - ÂùóÂ±ïÂºÄ
  - Ê∑∑Âêà
  - ÈùôÊÄÅÂåÖÂê´
  - Â±ûÊÄßÊîπÂÜô
  - ÂÆâÂÖ®ÔºåÈªòËÆ§‰ª£Á†ÅÊòØËΩ¨‰πâÁöÑ
  - ËøêË°åÊó∂ÂíåÁºñËØëÊó∂‰∏ä‰∏ãÊñáÈîôËØØÊä•Âëä 
  - ÂëΩ‰ª§Ë°å‰∏ãÁºñËØëjadeÊ®°Êùø
  - html 5 Ê®°Âºè (‰ΩøÁî® _!!! 5_ ÊñáÊ°£Á±ªÂûã)
  - Âú®ÂÜÖÂ≠ò‰∏≠ÁºìÂ≠ò(ÂèØÈÄâ)
  - ÂêàÂπ∂Âä®ÊÄÅÂíåÈùôÊÄÅÊ†áÁ≠æÁ±ª
  - ÂèØ‰ª•ÈÄöËøá _filters_ ‰øÆÊîπÊ†ë
  - Ê®°ÊùøÁªßÊâø
  - ÂéüÁîüÊîØÊåÅ [Express JS](http://expressjs.com) 
  - ÈÄöËøá `each` Êûö‰∏æÂØπË±°„ÄÅÊï∞ÁªÑÁîöËá≥ÊòØ‰∏çËÉΩÊûö‰∏æÁöÑÂØπË±°
  - ÂùóÊ≥®Èáä
  - Ê≤°ÊúâÂâçÁºÄÁöÑÊ†áÁ≠æ
  - AST filters
  - ËøáÊª§Âô®
    - :sass ÂøÖÈ°ªÂ∑≤ÁªèÂÆâË£Ö[sass.js](http://github.com/visionmedia/sass.js) 
    - :less ÂøÖÈ°ªÂ∑≤ÁªèÂÆâË£Ö[less.js](http://github.com/cloudhead/less.js) 
    - :markdown ÂøÖÈ°ªÂ∑≤ÁªèÂÆâË£Ö[markdown-js](http://github.com/evilstreak/markdown-js) ÊàñËÄÖ[node-discount](http://github.com/visionmedia/node-discount) 
    - :cdata
    - :coffeescript ÂøÖÈ°ªÂ∑≤ÁªèÂÆâË£Ö[coffee-script](http://jashkenas.github.com/coffee-script/) 
  - [Vim Syntax](https://github.com/digitaltoad/vim-jade)
  - [TextMate Bundle](http://github.com/miksago/jade-tmbundle)
  - [Screencasts](http://tjholowaychuk.com/post/1004255394/jade-screencast-template-engine-for-nodejs)
  - [html2jade](https://github.com/donpark/html2jade) ËΩ¨Êç¢Âô®

## ÂÖ∂ÂÆÉÂÆûÁé∞

  - [php](http://github.com/everzet/jade.php)
  - [scala](http://scalate.fusesource.org/versions/snapshot/documentation/scaml-reference.html)
  - [ruby](http://github.com/stonean/slim)

## ÂÆâË£Ö

ÈÄöËøá npm:

    npm install jade

## ÊµèËßàÂô®ÊîØÊåÅ

 ÊääjadeÁºñËØë‰∏∫‰∏Ä‰∏™ÂèØ‰æõÊµèËßàÂô®‰ΩøÁî®ÁöÑÂçïÊñá‰ª∂ÔºåÂè™ÈúÄË¶ÅÁÆÄÂçïÁöÑÊâßË°å:
 
    $ make jade.js

 Â¶ÇÊûú‰Ω†Â∑≤ÁªèÂÆâË£Ö‰∫Üuglifyjs (`npm install uglify-js`)Ôºå‰Ω†ÂèØ‰ª•ÊâßË°å‰∏ãÈù¢ÁöÑÂëΩ‰ª§ÂÆÉ‰ºöÁîüÊàêÊâÄÊúâÁöÑÊñá‰ª∂„ÄÇÂÖ∂ÂÆûÊØè‰∏Ä‰∏™Ê≠£ÂºèÁâàÊú¨ÈáåÈÉΩÂ∏Æ‰Ω†ÂÅö‰∫ÜËøô‰∫ã„ÄÇ 
 
    $ make jade.min.js

 ÈªòËÆ§ÊÉÖÂÜµ‰∏ãÔºå‰∏∫‰∫ÜÊñπ‰æøË∞ÉËØïJade‰ºöÊääÊ®°ÊùøÁªÑÁªáÊàêÂ∏¶ÊúâÂΩ¢Â¶Ç `__.lineno = 3` ÁöÑË°åÂè∑ÁöÑÂΩ¢Âºè„ÄÇ 
 Âú®ÊµèËßàÂô®Èáå‰ΩøÁî®ÁöÑÊó∂ÂÄôÔºå‰Ω†ÂèØ‰ª•ÈÄöËøá‰º†ÈÄí‰∏Ä‰∏™ÈÄâÈ°π`{ compileDebug: false }`Êù•ÂéªÊéâËøô‰∏™„ÄÇ
 ‰∏ãÈù¢ÁöÑÊ®°Êùø
  
    p Hello #{name}

  ‰ºöË¢´ÁøªËØëÊàê‰∏ãÈù¢ÁöÑÂáΩÊï∞Ôºö

```js
function anonymous(locals, attrs, escape, rethrow) {
  var buf = [];
  with (locals || {}) {
    var interp;
    buf.push('\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\n</p>');
  }
  return buf.join("");
}
```

  ÈÄöËøá‰ΩøÁî®JadeÁöÑ `./runtime.js`‰Ω†ÂèØ‰ª•Âú®ÊµèËßàÂô®‰ΩøÁî®Ëøô‰∫õÈ¢ÑÁºñËØëÁöÑÊ®°ÊùøËÄå‰∏çÈúÄË¶Å‰ΩøÁî®Jade, ‰Ω†Âè™ÈúÄË¶Å‰ΩøÁî®runtime.jsÈáåÁöÑÂ∑•ÂÖ∑ÂáΩÊï∞, ÂÆÉ‰ª¨‰ºöÊîæÂú®`jade.attrs`, `jade.escape` Ëøô‰∫õÈáå„ÄÇ ÊääÈÄâÈ°π `{ client: true }` ‰º†ÈÄíÁªô `jade.compile()`, Jade ‰ºöÊääËøô‰∫õÂ∏ÆÂä©ÂáΩÊï∞ÁöÑÂºïÁî®ÊîæÂú®`jade.attrs`, `jade.escape`.

```js
function anonymous(locals, attrs, escape, rethrow) {
  var attrs = jade.attrs, escape = jade.escape, rethrow = jade.rethrow;
  var buf = [];
  with (locals || {}) {
    var interp;
    buf.push('\n<p>Hello ' + escape((interp = name) == null ? '' : interp) + '\n</p>');
  }
  return buf.join("");
}
```

## ÂÖ¨ÂºÄAPI

```javascript
    var jade = require('jade');

    // Compile a function
    var fn = jade.compile('string of jade', options);
    fn(locals);
```

### ÈÄâÈ°π

 - `self`      ‰ΩøÁî®`self` ÂëΩÂêçÁ©∫Èó¥Êù•ÊåÅÊúâÊú¨Âú∞ÂèòÈáè. _ÈªòËÆ§‰∏∫false_
 - `locals`    Êú¨Âú∞ÂèòÈáèÂØπË±°
 - `filename`  ÂºÇÂ∏∏ÂèëÁîüÊó∂‰ΩøÁî®ÔºåincludesÊó∂ÂøÖÈúÄ
 - `debug`     ËæìÂá∫tokenÂíåÁøªËØëÂêéÁöÑÂáΩÊï∞‰Ωì
 - `compiler`  ÊõøÊç¢ÊéâjadeÈªòËÆ§ÁöÑÁºñËØëÂô®
 - `compileDebug`  `false`ÁöÑÊó∂ÂÄôË∞ÉËØïÁöÑÁªìÊûÑ‰∏ç‰ºöË¢´ËæìÂá∫

## ËØ≠Ê≥ï 

### Ë°åÁªìÊùüÊ†áÂøó

**CRLF** Âíå **CR** ‰ºöÂú®ÁºñËØë‰πãÂâçË¢´ËΩ¨Êç¢‰∏∫ **LF** 

### Ê†áÁ≠æ

Ê†áÁ≠æÂ∞±ÊòØ‰∏Ä‰∏™ÁÆÄÂçïÁöÑÂçïËØç:

    html

ÂÆÉ‰ºöË¢´ËΩ¨Êç¢‰∏∫ `<html></html>`

Ê†áÁ≠æ‰πüÊòØÂèØ‰ª•ÊúâidÁöÑ:

    div#container

ÂÆÉ‰ºöË¢´ËΩ¨Êç¢‰∏∫ `<div id="container"></div>`

ÊÄé‰πàÂä†Á±ªÂë¢Ôºü

    div.user-details

ËΩ¨Êç¢‰∏∫ `<div class="user-details"></div>`

Â§ö‰∏™Á±ª? Âíåid? ‰πüÊòØÂèØ‰ª•ÊêûÂÆöÁöÑ:

    div#foo.bar.baz

ËΩ¨Êç¢‰∏∫ `<div id="foo" class="bar baz"></div>`

‰∏çÂÅúÁöÑdiv div div ÂæàËÆ®ÂéåÂïä , ÂèØ‰ª•ËøôÊ†∑:

    #foo
    .bar

Ëøô‰∏™ÁÆóÊòØÊàë‰ª¨ÁöÑËØ≠Ê≥ïÁ≥ñÔºåÂÆÉÂ∑≤ÁªèË¢´ÂæàÂ•ΩÁöÑÊîØÊåÅ‰∫ÜÔºå‰∏äÈù¢ÁöÑ‰ºöËæìÂá∫Ôºö

    `<div id="foo"></div><div class="bar"></div>`

### Ê†áÁ≠æÊñáÊú¨ 

Âè™ÈúÄË¶ÅÁÆÄÂçïÁöÑÊääÂÜÖÂÆπÊîæÂú®Ê†áÁ≠æ‰πãÂêéÔºö

    p wahoo!

ÂÆÉ‰ºöË¢´Ê∏≤Êüì‰∏∫ `<p>wahoo!</p>`.

ÂæàÂ∏ÖÂêßÔºå‰ΩÜÊòØÂ§ßÊÆµÁöÑÊñáÊú¨ÊÄé‰πàÂäûÂë¢Ôºö

    p
      | foo bar baz
      | rawr rawr
      | super cool
      | go jade go

Ê∏≤Êüì‰∏∫ `<p>foo bar baz rawr.....</p>`

ÊÄé‰πàÂíåÊï∞ÊçÆÁªìÂêàËµ∑Êù•Ôºü ÊâÄÊúâÁ±ªÂûãÁöÑÊñáÊú¨Â±ïÁ§∫ÈÉΩÂèØ‰ª•ÂíåÊï∞ÊçÆÁªìÂêàËµ∑Êù•ÔºåÂ¶ÇÊûúÊàë‰ª¨Êää`{ name: 'tj', email: 'tj@vision-media.ca' }` ‰º†ÁªôÁºñËØëÂáΩÊï∞Ôºå‰∏ãÈù¢ÊòØÊ®°Êùø‰∏äÁöÑÂÜôÊ≥ï:

    #user #{name} &lt;#{email}&gt;

ÂÆÉ‰ºöË¢´Ê∏≤Êüì‰∏∫ `<div id="user">tj &lt;tj@vision-media.ca&gt;</div>`

ÂΩìÂ∞±ÊòØË¶ÅËæìÂá∫`#{}` ÁöÑÊó∂ÂÄôÊÄé‰πàÂäû? ËΩ¨‰πâ‰∏Ä‰∏ã!

    p \#{something}

ÂÆÉ‰ºöËæìÂá∫`<p>#{something}</p>`

ÂêåÊ†∑ÂèØ‰ª•‰ΩøÁî®ÈùûËΩ¨‰πâÁöÑÂèòÈáè`!{html}`, ‰∏ãÈù¢ÁöÑÊ®°ÊùøÂ∞ÜÁõ¥Êé•ËæìÂá∫‰∏Ä‰∏™scriptÊ†áÁ≠æ

    - var html = "<script></script>"
    | !{html}

ÂÜÖËÅîÊ†áÁ≠æÂêåÊ†∑ÂèØ‰ª•‰ΩøÁî®ÊñáÊú¨ÂùóÊù•ÂåÖÂê´ÊñáÊú¨Ôºö

    label
      | Username:
      input(name='user[name]')

ÊàñËÄÖÁõ¥Êé•‰ΩøÁî®Ê†áÁ≠æÊñáÊú¨:

    label Username:
      input(name='user[name]')

_Âè™_ÂåÖÂê´ÊñáÊú¨ÁöÑÊ†áÁ≠æÔºåÊØîÂ¶Ç`script`, `style`, Âíå `textarea` ‰∏çÈúÄË¶ÅÂâçÁºÄ`|` Â≠óÁ¨¶, ÊØîÂ¶Ç:

      html
        head
          title Example
          script
            if (foo) {
              bar();
            } else {
              baz();
            }

ËøôÈáåËøòÊúâ‰∏ÄÁßçÈÄâÊã©ÔºåÂèØ‰ª•‰ΩøÁî®'.' Êù•ÂºÄÂßã‰∏ÄÊÆµÊñáÊú¨ÂùóÔºåÊØîÂ¶ÇÔºö

      p.
        foo asdf
        asdf
         asdfasdfaf
         asdf
        asd.

‰ºöË¢´Ê∏≤Êüì‰∏∫:

        <p>foo asdf
        asdf
          asdfasdfaf
          asdf
        asd
        .
        </p>

ËøôÂíåÂ∏¶‰∏Ä‰∏™Á©∫Ê†ºÁöÑ '.' ÊòØ‰∏ç‰∏ÄÊ†∑ÁöÑ, Â∏¶Á©∫Ê†ºÁöÑ‰ºöË¢´JadeÁöÑËß£ÊûêÂô®ÂøΩÁï•ÔºåÂΩì‰Ωú‰∏Ä‰∏™ÊôÆÈÄöÁöÑÊñáÂ≠ó: 

    p .
    
Ê∏≤Êüì‰∏∫:

    <p>.</p>


ÈúÄË¶ÅÊ≥®ÊÑèÁöÑÊòØÂπøË•øÂùóÈúÄË¶Å‰∏§Ê¨°ËΩ¨‰πâ„ÄÇÊØîÂ¶ÇÊÉ≥Ë¶ÅËæìÂá∫‰∏ãÈù¢ÁöÑÊñáÊú¨Ôºö

    </p>foo\bar</p>

‰ΩøÁî®:

    p.
      foo\\bar

### Ê≥®Èáä

ÂçïË°åÊ≥®ÈáäÂíåJavaScriptÈáåÊòØ‰∏ÄÊ†∑ÁöÑÔºåÈÄöËøá"//"Êù•ÂºÄÂßãÔºåÂπ∂‰∏îÂøÖÈ°ªÂçïÁã¨‰∏ÄË°åÔºö

    // just some paragraphs
    p foo
    p bar

Ê∏≤Êüì‰∏∫Ôºö

    <!-- just some paragraphs -->
    <p>foo</p>
    <p>bar</p>

Jade ÂêåÊ†∑ÊîØÊåÅ‰∏çËæìÂá∫ÁöÑÊ≥®ÈáäÔºåÂä†‰∏Ä‰∏™Áü≠Ê®™Á∫øÂ∞±Ë°å‰∫ÜÔºö

    //- will not output within markup
    p foo
    p bar

Ê∏≤Êüì‰∏∫Ôºö

    <p>foo</p>
    <p>bar</p>

### ÂùóÊ≥®Èáä

 ÂùóÊ≥®Èáä‰πüÊòØÊîØÊåÅÁöÑÔºö

      body
        //
          #content
            h1 Example

Ê∏≤Êüì‰∏∫Ôºö

    <body>
      <!--
      <div id="content">
        <h1>Example</h1>
      </div>
      -->
    </body>

Jade ÂêåÊ†∑ÂæàÂ•ΩÁöÑÊîØÊåÅ‰∫ÜÊù°‰ª∂Ê≥®ÈáäÔºö

    body
      //if IE
        a(href='http://www.mozilla.com/en-US/firefox/') Get Firefox


Ê∏≤Êüì‰∏∫Ôºö
    <body>
      <!--[if IE]>
        <a href="http://www.mozilla.com/en-US/firefox/">Get Firefox</a>
      <![endif]-->
    </body>


### ÂÜÖËÅî

 Jade ÊîØÊåÅ‰ª•Ëá™ÁÑ∂ÁöÑÊñπÂºèÂÆö‰πâÊ†áÁ≠æÂµåÂ•ó:

    ul
      li.first
        a(href='#') foo
      li
        a(href='#') bar
      li.last
        a(href='#') baz

### ÂùóÂ±ïÂºÄ 

   ÂùóÂ±ïÂºÄÂèØ‰ª•Â∏ÆÂä©‰Ω†Âú®‰∏ÄË°åÂÜÖÂàõÂª∫ÂµåÂ•óÁöÑÊ†áÁ≠æÔºå‰∏ãÈù¢ÁöÑ‰æãÂ≠êÂíå‰∏äÈù¢ÁöÑÊòØ‰∏ÄÊ†∑ÁöÑÔºö

      ul
        li.first: a(href='#') foo
        li: a(href='#') bar
        li.last: a(href='#') baz


### Â±ûÊÄß

Jade Áé∞Âú®ÊîØÊåÅ‰ΩøÁî®'(' Âíå ')' ‰Ωú‰∏∫Â±ûÊÄßÂàÜÈöîÁ¨¶

    a(href='/login', title='View login page') Login

ÂΩì‰∏Ä‰∏™ÂÄºÊòØ `undefined` ÊàñËÄÖ `null` Â±ûÊÄß_‰∏ç_‰ºöË¢´Âä†‰∏ä,
ÊâÄ‰ª•Âë¢ÔºåÂÆÉ‰∏ç‰ºöÁºñËØëÂá∫ 'something="null"'.

    div(something=null)

Boolean Â±ûÊÄß‰πüÊòØÊîØÊåÅÁöÑ:

    input(type="checkbox", checked)

‰ΩøÁî®‰ª£Á†ÅÁöÑBoolean Â±ûÊÄßÂè™ÊúâÂΩìÂ±ûÊÄß‰∏∫`true`Êó∂Êâç‰ºöËæìÂá∫Ôºö

    input(type="checkbox", checked=someValue)
    
Â§öË°åÂêåÊ†∑‰πüÊòØÂèØÁî®ÁöÑÔºö

    input(type='checkbox',
      name='agreement',
      checked)

Â§öË°åÁöÑÊó∂ÂÄôÂèØ‰ª•‰∏çÂä†ÈÄóÂè∑Ôºö

    input(type='checkbox'
      name='agreement'
      checked)

Âä†ÁÇπÁ©∫Ê†ºÔºåÊ†ºÂºèÂ•ΩÁúã‰∏ÄÁÇπÔºüÂêåÊ†∑ÊîØÊåÅ

    input(
      type='checkbox'
      name='agreement'
      checked)

ÂÜíÂè∑‰πüÊòØÊîØÊåÅÁöÑ:

    rss(xmlns:atom="atom")

ÂÅáÂ¶ÇÊàëÊúâ‰∏Ä‰∏™`user` ÂØπË±° `{ id: 12, name: 'tobi' }`
Êàë‰ª¨Â∏åÊúõÂàõÂª∫‰∏Ä‰∏™ÊåáÂêë"/user/12"ÁöÑÈìæÊé• `href`, Êàë‰ª¨ÂèØ‰ª•‰ΩøÁî®ÊôÆÈÄöÁöÑjavascriptÂ≠óÁ¨¶‰∏≤ËøûÊé•ÔºåÂ¶Ç‰∏ã:

    a(href='/user/' + user.id)= user.name

ÊàñËÄÖÊàë‰ª¨‰ΩøÁî®jadeÁöÑ‰øÆÊîπÊñπÂºè,Ëøô‰∏™ÊàëÊÉ≥ÂæàÂ§ö‰ΩøÁî®RubyÊàñËÄÖ CoffeeScriptÁöÑ‰∫∫‰ºöÁúãËµ∑Êù•ÂÉèÊôÆÈÄöÁöÑjs..:

   a(href='/user/#{user.id}')= user.name

`class`Â±ûÊÄßÊòØ‰∏Ä‰∏™ÁâπÊÆäÁöÑÂ±ûÊÄßÔºå‰Ω†ÂèØ‰ª•Áõ¥Êé•‰º†ÈÄí‰∏Ä‰∏™Êï∞ÁªÑÔºåÊØîÂ¶Ç`bodyClasses = ['user', 'authenticated']` :

    body(class=bodyClasses)

### HTML

 ÂÜÖËÅîÁöÑhtmlÊòØÂèØ‰ª•ÁöÑÔºåÊàë‰ª¨ÂèØ‰ª•‰ΩøÁî®ÁÆ°ÈÅìÂÆö‰πâ‰∏ÄÊÆµÊñáÊú¨ :

```
html
  body
    | <h1>Title</h1>
    | <p>foo bar baz</p>
```

 ÊàñËÄÖÊàë‰ª¨ÂèØ‰ª•‰ΩøÁî®`.` Êù•ÂëäËØâJadeÊàë‰ª¨ÈúÄË¶Å‰∏ÄÊÆµÊñáÊú¨Ôºö

```
html
  body.
    <h1>Title</h1>
    <p>foo bar baz</p>
```

 ‰∏äÈù¢ÁöÑ‰∏§‰∏™‰æãÂ≠êÈÉΩ‰ºöÊ∏≤ÊüìÊàêÁõ∏ÂêåÁöÑÁªìÊûúÔºö

```
<html><body><h1>Title</h1>
<p>foo bar baz</p>
</body></html>
```

 ËøôÊù°ËßÑÂàôÈÄÇÂ∫î‰∫éÂú®jadeÈáåÁöÑ‰ªª‰ΩïÊñáÊú¨Ôºö

```
html
  body
    h1 User <em>#{name}</em>
```

### Doctypes

Ê∑ªÂä†ÊñáÊ°£Á±ªÂûãÂè™ÈúÄË¶ÅÁÆÄÂçïÁöÑ‰ΩøÁî® `!!!`, ÊàñËÄÖ `doctype` Ë∑ü‰∏ä‰∏ãÈù¢ÁöÑÂèØÈÄâÈ°π:

    !!!

‰ºöÊ∏≤ÊüìÂá∫ _transitional_ ÊñáÊ°£Á±ªÂûã, ÊàñËÄÖ:

    !!! 5

or

    !!! html

or

    doctype html

doctypes ÊòØÂ§ßÂ∞èÂÜô‰∏çÊïèÊÑüÁöÑ, ÊâÄ‰ª•‰∏ãÈù¢‰∏§‰∏™ÊòØ‰∏ÄÊ†∑ÁöÑ:

    doctype Basic
    doctype basic

ÂΩìÁÑ∂‰πüÊòØÂèØ‰ª•Áõ¥Êé•‰º†ÈÄí‰∏ÄÊÆµÊñáÊ°£Á±ªÂûãÁöÑÊñáÊú¨Ôºö

    doctype html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN

Ê∏≤ÊüìÂêé:

    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN>

‰ºöËæìÂá∫ _html 5_ ÊñáÊ°£Á±ªÂûã. ‰∏ãÈù¢ÁöÑÈªòËÆ§ÁöÑÊñáÊ°£Á±ªÂûãÔºåÂèØ‰ª•ÂæàÁÆÄÂçïÁöÑÊâ©Â±ïÔºö

```javascript
    var doctypes = exports.doctypes = {
	    '5': '<!DOCTYPE html>',
	    'xml': '<?xml version="1.0" encoding="utf-8" ?>',
	    'default': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">',
	    'transitional': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">',
	    'strict': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">',
	    'frameset': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">',
	    '1.1': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">',
	    'basic': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN" "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd">',
	    'mobile': '<!DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.2//EN" "http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd">'
	};
```

ÈÄöËøá‰∏ãÈù¢ÁöÑ‰ª£Á†ÅÂèØ‰ª•ÂæàÁÆÄÂçïÁöÑÊîπÂèòÈªòËÆ§ÁöÑÊñáÊ°£Á±ªÂûãÔºö

```javascript
    jade.doctypes.default = 'whatever you want';
```

## ËøáÊª§Âô®

ËøáÊª§Âô®ÂâçÁºÄ `:`, ÊØîÂ¶Ç `:markdown` ‰ºöÊää‰∏ãÈù¢ÂùóÈáåÁöÑÊñáÊú¨‰∫§Áªô‰∏ìÈó®ÁöÑÂáΩÊï∞ËøõË°åÂ§ÑÁêÜ„ÄÇÊü•ÁúãÈ°∂ÈÉ® _ÁâπÊÄß_ ÈáåÊúâÂì™‰∫õÂèØÁî®ÁöÑËøáÊª§Âô®„ÄÇ

    body
      :markdown
        Woah! jade _and_ markdown, very **cool**
        we can even link to [stuff](http://google.com)

Ê∏≤Êüì‰∏∫:

       <body><p>Woah! jade <em>and</em> markdown, very <strong>cool</strong> we can even link to <a href="http://google.com">stuff</a></p></body>

## ‰ª£Á†Å

JadeÁõÆÂâçÊîØÊåÅ‰∏âÁßçÁ±ªÂûãÁöÑÂèØÊâßË°å‰ª£Á†Å„ÄÇÁ¨¨‰∏ÄÁßçÊòØÂâçÁºÄ`-`Ôºå ËøôÊòØ‰∏ç‰ºöË¢´ËæìÂá∫ÁöÑÔºö

    - var foo = 'bar';

ËøôÂèØ‰ª•Áî®Âú®Êù°‰ª∂ËØ≠Âè•ÊàñËÄÖÂæ™ÁéØ‰∏≠Ôºö

    - for (var key in obj)
      p= obj[key]

Áî±‰∫éJadeÁöÑÁºìÂ≠òÊäÄÊúØÔºå‰∏ãÈù¢ÁöÑ‰ª£Á†Å‰πüÊòØÂèØ‰ª•ÁöÑÔºö

    - if (foo)
      ul
        li yay
        li foo
        li worked
    - else
      p oh no! didnt work

ÂìàÂìàÔºåÁîöËá≥ÊòØÂæàÈïøÁöÑÂæ™ÁéØ‰πüÊòØÂèØ‰ª•ÁöÑÔºö

    - if (items.length)
      ul
        - items.forEach(function(item){
          li= item
        - })

ÊâÄ‰ª•‰Ω†ÊÉ≥Ë¶ÅÁöÑÔºÅ

‰∏ã‰∏ÄÊ≠•Êàë‰ª¨Ë¶Å_ËΩ¨‰πâ_ËæìÂá∫ÁöÑ‰ª£Á†ÅÔºåÊØîÂ¶ÇÊàë‰ª¨ËøîÂõû‰∏Ä‰∏™ÂÄºÔºåÂè™Ë¶ÅÂâçÁºÄ‰∏Ä‰∏™`=`Ôºö   

    - var foo = 'bar'
    = foo
    h1= foo

ÂÆÉ‰ºöÊ∏≤Êüì‰∏∫`bar<h1>bar</h1>`. ‰∏∫‰∫ÜÂÆâÂÖ®Ëµ∑ËßÅÔºå‰ΩøÁî®`=`ËæìÂá∫ÁöÑ‰ª£Á†ÅÈªòËÆ§ÊòØËΩ¨‰πâÁöÑ,Â¶ÇÊûúÊÉ≥Áõ¥Êé•ËæìÂá∫‰∏çËΩ¨‰πâÁöÑÂÄºÂèØ‰ª•‰ΩøÁî®`!=`Ôºö

    p!= aVarContainingMoreHTML

Jade ÂêåÊ†∑ÊòØËÆæËÆ°Â∏àÂèãÂ•ΩÁöÑÔºåÂÆÉÂèØ‰ª•‰ΩøjavascriptÊõ¥Áõ¥Êé•Êõ¥ÂØåË°®Áé∞Âäõ„ÄÇÊØîÂ¶Ç‰∏ãÈù¢ÁöÑËµãÂÄºËØ≠Âè•ÊòØÁõ∏Á≠âÁöÑÔºåÂêåÊó∂Ë°®ËææÂºèËøòÊòØÈÄöÂ∏∏ÁöÑjavascriptÔºö
 
     - var foo = 'foo ' + 'bar'
     foo = 'foo ' + 'bar'

Jade‰ºöÊää `if`, `else if`, `else`, `until`, `while`, `unless`ÂêåÂà´ÁöÑ‰ºòÂÖàÂØπÂæÖ, ‰ΩÜÊòØ‰Ω†ÂæóËÆ∞‰ΩèÂÆÉ‰ª¨ËøòÊòØÊôÆÈÄöÁöÑjavascriptÔºö

     if foo == 'bar'
       ul
         li yay
         li foo
         li worked
     else
       p oh no! didnt work  

## Âæ™ÁéØ

Â∞ΩÁÆ°Â∑≤ÁªèÊîØÊåÅJavaScriptÂéüÁîü‰ª£Á†ÅÔºåJadeËøòÊòØÊîØÊåÅ‰∫Ü‰∏Ä‰∫õÁâπÊÆäÁöÑÊ†áÁ≠æÔºåÂÆÉ‰ª¨ÂèØ‰ª•ËÆ©Ê®°ÊùøÊõ¥Âä†Êòì‰∫éÁêÜËß£ÔºåÂÖ∂‰∏≠‰πã‰∏ÄÂ∞±ÊòØ`each`, ËøôÁßçÂΩ¢ÂºèÔºö

    each VAL[, KEY] in OBJ

‰∏Ä‰∏™ÈÅçÂéÜÊï∞ÁªÑÁöÑ‰æãÂ≠ê Ôºö

    - var items = ["one", "two", "three"]
    each item in items
      li= item

Ê∏≤Êüì‰∏∫:

    <li>one</li>
    <li>two</li>
    <li>three</li>

ÈÅçÂéÜ‰∏Ä‰∏™Êï∞ÁªÑÂêåÊó∂Â∏¶‰∏äÁ¥¢ÂºïÔºö

    items = ["one", "two", "three"]
    each item, i in items
      li #{item}: #{i}

Ê∏≤Êüì‰∏∫:

    <li>one: 0</li>
    <li>two: 1</li>
    <li>three: 2</li>

ÈÅçÂéÜ‰∏Ä‰∏™Êï∞ÁªÑÁöÑÈîÆÂÄºÔºö

    obj = { foo: 'bar' }
    each val, key in obj
      li #{key}: #{val}

Â∞Ü‰ºöÊ∏≤Êüì‰∏∫Ôºö`<li>foo: bar</li>`

JadeÂú®ÂÜÖÈÉ®‰ºöÊääËøô‰∫õËØ≠Âè•ËΩ¨Êç¢ÊàêÂéüÁîüÁöÑJavaScriptËØ≠Âè•ÔºåÂ∞±ÂÉè‰ΩøÁî® `users.forEach(function(user){`,
ËØçÊ≥ï‰ΩúÁî®ÂüüÂíåÂµåÂ•ó‰ºöÂÉèÂú®ÊôÆÈÄöÁöÑJavaScript‰∏≠‰∏ÄÊ†∑Ôºö

    each user in users
      each role in user.roles
        li= role

Â¶ÇÊûú‰Ω†ÂñúÊ¨¢Ôºå‰πüÂèØ‰ª•‰ΩøÁî®`for` Ôºö
 
    for user in users
      for role in user.roles
        li= role

## Êù°‰ª∂ËØ≠Âè•

Jade Êù°‰ª∂ËØ≠Âè•Âíå‰ΩøÁî®‰∫Ü(`-`) ÂâçÁºÄÁöÑJavaScriptËØ≠Âè•ÊòØ‰∏ÄËá¥ÁöÑ,ÁÑ∂ÂêéÂÆÉÂÖÅËÆ∏‰Ω†‰∏ç‰ΩøÁî®ÂúÜÊã¨Âè∑ÔºåËøôÊ†∑‰ºöÁúã‰∏äÂéªÂØπËÆæËÆ°Â∏àÊõ¥ÂèãÂ•Ω‰∏ÄÁÇπÔºå
ÂêåÊó∂Ë¶ÅÂú®ÂøÉÈáåËÆ∞‰ΩèËøô‰∏™Ë°®ËææÂºèÊ∏≤ÊüìÂá∫ÁöÑÊòØ_Â∏∏ËßÑ_JavascriptÔºö

    for user in users
      if user.role == 'admin'
        p #{user.name} is an admin
      else
        p= user.name

Âíå‰∏ãÈù¢ÁöÑ‰ΩøÁî®‰∫ÜÂ∏∏ËßÑJavaScriptÁöÑ‰ª£Á†ÅÊòØÁõ∏Á≠âÁöÑÔºö

     for user in users
       - if (user.role == 'admin')
         p #{user.name} is an admin
       - else
         p= user.name

Jade ÂêåÊó∂ÊîØÊåÅ`unless`, ËøôÂíå`if (!(expr))`ÊòØÁ≠â‰ª∑ÁöÑÔºö

     for user in users
       unless user.isAnonymous
         p
           | Click to view
           a(href='/users/' + user.id)= user.name 

## Ê®°ÊùøÁªßÊâø

  Jade ÊîØÊåÅÈÄöËøá `block` Âíå `extends` ÂÖ≥ÈîÆÂ≠óÊù•ÂÆûÁé∞Ê®°ÊùøÁªßÊâø„ÄÇ ‰∏Ä‰∏™ÂùóÂ∞±ÊòØ‰∏Ä‰∏™JadeÁöÑ"block" ÔºåÂÆÉÂ∞ÜÂú®Â≠êÊ®°Êùø‰∏≠ÂÆûÁé∞ÔºåÂêåÊó∂ÊòØÊîØÊåÅÈÄíÂΩíÁöÑ„ÄÇ
  
  Jade ÂùóÂ¶ÇÊûúÊ≤°ÊúâÂÜÖÂÆπÔºåJade‰ºöÊ∑ªÂä†ÈªòËÆ§ÂÜÖÂÆπÔºå‰∏ãÈù¢ÁöÑ‰ª£Á†ÅÈªòËÆ§‰ºöËæìÂá∫`block scripts`, `block content`, Âíå `block foot`.

```
html
  head
    h1 My Site - #{title}
    block scripts
      script(src='/jquery.js')
  body
    block content
    block foot
      #footer
        p some footer content
```

  Áé∞Âú®Êàë‰ª¨Êù•ÁªßÊâøËøô‰∏™Â∏ÉÂ±ÄÔºåÁÆÄÂçïÂàõÂª∫‰∏Ä‰∏™Êñ∞Êñá‰ª∂ÔºåÂÉè‰∏ãÈù¢ÈÇ£Ê†∑Áõ¥Êé•‰ΩøÁî®`extends`ÔºåÁªôÂÆöË∑ØÂæÑÔºàÂèØ‰ª•ÈÄâÊã©Â∏¶.jadeÊâ©Â±ïÂêçÊàñËÄÖ‰∏çÂ∏¶Ôºâ. ‰Ω†ÂèØ‰ª•ÂÆö‰πâ‰∏Ä‰∏™ÊàñËÄÖÊõ¥Â§öÁöÑÂùóÊù•Ë¶ÜÁõñÁà∂Á∫ßÂùóÂÜÖÂÆπ, Ê≥®ÊÑèÂà∞ËøôÈáåÁöÑ`foot`Âùó_Ê≤°Êúâ_ÂÆö‰πâÔºåÊâÄ‰ª•ÂÆÉËøò‰ºöËæìÂá∫Áà∂Á∫ßÁöÑ"some footer content"„ÄÇ

```
extends extend-layout

block scripts
  script(src='/jquery.js')
  script(src='/pets.js')

block content
  h1= title
  each pet in pets
    include pet
```

  ÂêåÊ†∑ÂèØ‰ª•Âú®‰∏Ä‰∏™Â≠êÂùóÈáåÊ∑ªÂä†ÂùóÔºåÂ∞±ÂÉè‰∏ãÈù¢ÂÆûÁé∞ÁöÑÂùó`content`ÈáåÂèàÂÆö‰πâ‰∫Ü‰∏§‰∏™ÂèØ‰ª•Ë¢´ÂÆûÁé∞ÁöÑÂùó`sidebar`Âíå`primary`ÔºåÊàñËÄÖÂ≠êÊ®°ÊùøÁõ¥Êé•ÂÆûÁé∞`content`„ÄÇ

```
extends regular-layout

block content
  .sidebar
    block sidebar
      p nothing
  .primary
    block primary
      p nothing
```

## ÂåÖÂê´

 Includes ÂÖÅËÆ∏‰Ω†ÈùôÊÄÅÂåÖÂê´‰∏ÄÊÆµJade, ÊàñËÄÖÂà´ÁöÑÂ≠òÊîæÂú®Âçï‰∏™Êñá‰ª∂‰∏≠ÁöÑ‰∏úË•øÊØîÂ¶Çcss, html„ÄÇ ÈùûÂ∏∏Â∏∏ËßÅÁöÑ‰æãÂ≠êÊòØÂåÖÂê´Â§¥ÈÉ®ÂíåÈ°µËÑö„ÄÇ ÂÅáËÆæÊàë‰ª¨Êúâ‰∏Ä‰∏™‰∏ãÈù¢ÁõÆÂΩïÁªìÊûÑÁöÑÊñá‰ª∂Â§πÔºö

     ./layout.jade
     ./includes/
       ./head.jade
       ./tail.jade

‰∏ãÈù¢ÊòØ _layout.jade_ ÁöÑÂÜÖÂÆπ:

      html
        include includes/head  
        body
          h1 My Site
          p Welcome to my super amazing site.
          include includes/foot

Ëøô‰∏§‰∏™ÂåÖÂê´ _includes/head_ Âíå _includes/foot_ ÈÉΩ‰ºöËØªÂèñÁõ∏ÂØπ‰∫éÁªô _layout.jade_  ÂèÇÊï∞`filename` ÁöÑË∑ØÂæÑÁöÑÊñá‰ª∂, ËøôÊòØ‰∏Ä‰∏™ÁªùÂØπË∑ØÂæÑÔºå‰∏çÁî®ÊãÖÂøÉExpressÂ∏Æ‰Ω†ÊêûÂÆöËøô‰∫õ‰∫Ü„ÄÇInclude ‰ºöËß£ÊûêËøô‰∫õÊñá‰ª∂ÔºåÂπ∂‰∏îÊèíÂÖ•Âà∞Â∑≤ÁªèÁîüÊàêÁöÑËØ≠Ê≥ïÊ†ë‰∏≠ÔºåÁÑ∂ÂêéÊ∏≤Êüì‰∏∫‰Ω†ÊúüÂæÖÁöÑÂÜÖÂÆπÔºö

```html
<html>
  <head>
    <title>My Site</title>
    <script src="/javascripts/jquery.js">
    </script><script src="/javascripts/app.js"></script>
  </head>
  <body>
    <h1>My Site</h1>
    <p>Welcome to my super lame site.</p>
    <div id="footer">
      <p>Copyright>(c) foobar</p>
    </div>
  </body>
</html>
```

 ÂâçÈù¢Â∑≤ÁªèÊèêÂà∞Ôºå`include` ÂèØ‰ª•ÂåÖÂê´ÊØîÂ¶ÇhtmlÊàñËÄÖcssËøôÊ†∑ÁöÑÂÜÖÂÆπ„ÄÇÁªôÂÆö‰∏Ä‰∏™Êâ©Â±ïÂêçÂêéÔºåJade‰∏ç‰ºöÊääËøô‰∏™Êñá‰ª∂ÂΩì‰Ωú‰∏Ä‰∏™JadeÊ∫ê‰ª£Á†ÅÔºåÂπ∂‰∏î‰ºöÊääÂÆÉÂΩì‰Ωú‰∏Ä‰∏™ÊôÆÈÄöÊñáÊú¨ÂåÖÂê´ËøõÊù•Ôºö

```
html
  body
    include content.html
```

  Include ‰πüÂèØ‰ª•Êé•ÂèóÂùóÂÜÖÂÆπÔºåÁªôÂÆöÁöÑÂùóÂ∞Ü‰ºöÈôÑÂä†Âà∞ÂåÖÂê´Êñá‰ª∂ _ÊúÄÂêé_ ÁöÑÂùóÈáå„ÄÇ ‰∏æ‰∏™‰æãÂ≠êÔºå`head.jade` ÂåÖÂê´‰∏ãÈù¢ÁöÑÂÜÖÂÆπÔºö

  
  ```
head
  script(src='/jquery.js')
```

 Êàë‰ª¨ÂèØ‰ª•ÂÉè‰∏ãÈù¢Áªô`include head`Ê∑ªÂä†ÂÜÖÂÆπ, ËøôÈáåÊòØÊ∑ªÂä†‰∏§‰∏™ËÑöÊú¨.

```
html
  include head
    script(src='/foo.js')
    script(src='/bar.js')
  body
    h1 test
```


## Mixins

 MixinsÂú®ÁºñËØëÁöÑÊ®°ÊùøÈáå‰ºöË¢´JadeËΩ¨Êç¢‰∏∫ÊôÆÈÄöÁöÑJavaScriptÂáΩÊï∞„ÄÇ Mixins ÂèØ‰ª•ËøòÂèÇÊï∞Ôºå‰ΩÜ‰∏çÊòØÂøÖÈúÄÁöÑÔºö

      mixin list
        ul
          li foo
          li bar
          li baz

  ‰ΩøÁî®‰∏çÂ∏¶ÂèÇÊï∞ÁöÑmixinÁúã‰∏äÂéªÈùûÂ∏∏ÁÆÄÂçïÔºåÂú®‰∏Ä‰∏™ÂùóÂ§ñÔºö
  
      h2 Groceries
      mixin list

  Mixins ‰πüÂèØ‰ª•Â∏¶‰∏Ä‰∏™ÊàñËÄÖÂ§ö‰∏™ÂèÇÊï∞ÔºåÂèÇÊï∞Â∞±ÊòØÊôÆÈÄöÁöÑjavascriptsË°®ËææÂºèÔºåÊØîÂ¶Ç‰∏ãÈù¢ÁöÑ‰æãÂ≠êÔºö

      mixin pets(pets)
        ul.pets
          - each pet in pets
            li= pet

      mixin profile(user)
        .user
          h2= user.name
          mixin pets(user.pets)

   ‰ºöËæìÂá∫ÂÉè‰∏ãÈù¢ÁöÑhtmlÔºö

```html
<div class="user">
  <h2>tj</h2>
  <ul class="pets">
    <li>tobi</li>
    <li>loki</li>
    <li>jane</li>
    <li>manny</li>
  </ul>
</div>
```

## ‰∫ßÁîüËæìÂá∫ 

 ÂÅáËÆæÊàë‰ª¨Êúâ‰∏ãÈù¢ÁöÑJadeÊ∫êÁ†ÅÔºö

```
- var title = 'yay'
h1.title #{title}
p Just an example
```

 ÂΩì `compileDebug` ÈÄâÈ°π‰∏çÊòØ`false`, Jade ‰ºöÁºñËØëÊó∂‰ºöÊääÂáΩÊï∞ÈáåÂä†‰∏ä `__.lineno = n;`, Ëøô‰∏™ÂèÇÊï∞‰ºöÂú®ÁºñËØëÂá∫ÈîôÊó∂‰º†ÈÄíÁªô`rethrow()`, ËÄåËøô‰∏™ÂáΩÊï∞‰ºöÂú®JadeÂàùÂßãËæìÂá∫Êó∂ÁªôÂá∫‰∏Ä‰∏™ÊúâÁî®ÁöÑÈîôËØØ‰ø°ÊÅØ„ÄÇ

```js
function anonymous(locals) {
  var __ = { lineno: 1, input: "- var title = 'yay'\nh1.title #{title}\np Just an example", filename: "testing/test.js" };
  var rethrow = jade.rethrow;
  try {
    var attrs = jade.attrs, escape = jade.escape;
    var buf = [];
    with (locals || {}) {
      var interp;
      __.lineno = 1;
       var title = 'yay'
      __.lineno = 2;
      buf.push('<h1');
      buf.push(attrs({ "class": ('title') }));
      buf.push('>');
      buf.push('' + escape((interp = title) == null ? '' : interp) + '');
      buf.push('</h1>');
      __.lineno = 3;
      buf.push('<p>');
      buf.push('Just an example');
      buf.push('</p>');
    }
    return buf.join("");
  } catch (err) {
    rethrow(err, __.input, __.filename, __.lineno);
  }
}
```

ÂΩì`compileDebug` ÂèÇÊï∞ÊòØ`false`, Ëøô‰∏™ÂèÇÊï∞‰ºöË¢´ÂéªÊéâÔºåËøôÊ†∑ÂØπ‰∫éËΩªÈáèÁ∫ßÁöÑÊµèËßàÂô®Á´ØÊ®°ÊùøÊòØÈùûÂ∏∏ÊúâÁî®ÁöÑ„ÄÇÁªìÂêàJadeÁöÑÂèÇÊï∞ÂíåÂΩìÂâçÊ∫êÁ†ÅÂ∫ìÈáåÁöÑ `./runtime.js` Êñá‰ª∂Ôºå‰Ω†ÂèØ‰ª•ÈÄöËøátoString()Êù•ÁºñËØëÊ®°ÊùøËÄå‰∏çÈúÄË¶ÅÂú®ÊµèËßàÂô®Á´ØËøêË°åÊï¥‰∏™JadeÂ∫ìÔºåËøôÊ†∑ÂèØ‰ª•ÊèêÈ´òÊÄßËÉΩÔºå‰πüÂèØ‰ª•ÂáèÂ∞ëËΩΩÂÖ•ÁöÑJavaScriptÊï∞Èáè„ÄÇ

```js
function anonymous(locals) {
  var attrs = jade.attrs, escape = jade.escape;
  var buf = [];
  with (locals || {}) {
    var interp;
    var title = 'yay'
    buf.push('<h1');
    buf.push(attrs({ "class": ('title') }));
    buf.push('>');
    buf.push('' + escape((interp = title) == null ? '' : interp) + '');
    buf.push('</h1>');
    buf.push('<p>');
    buf.push('Just an example');
    buf.push('</p>');
  }
  return buf.join("");
}
```

##  MakefileÁöÑ‰∏Ä‰∏™‰æãÂ≠ê

  ÈÄöËøáÊâßË°å`make`Ôºå ‰∏ãÈù¢ÁöÑMakefile‰æãÂ≠êÂèØ‰ª•Êää _pages/*.jade_ ÁºñËØë‰∏∫ _pages/*.html_ „ÄÇ 
 
```make
JADE = $(shell find pages/*.jade)
HTML = $(JADE:.jade=.html)

all: $(HTML)
	
%.html: %.jade
	jade < $< --path $< > $@

clean:
	rm -f $(HTML)

.PHONY: clean
```

Ëøô‰∏™ÂèØ‰ª•Âíå`watch(1)` ÂëΩ‰ª§Ëµ∑Êù•‰∫ßÁîüÂÉè‰∏ãÈù¢ÁöÑË°å‰∏∫Ôºö 

     $ watch make

## ÂëΩ‰ª§Ë°åÁöÑjade(1)

```

‰ΩøÁî®: jade [options] [dir|file ...]

ÈÄâÈ°π:

  -h, --help         ËæìÂá∫Â∏ÆÂä©‰ø°ÊÅØ
  -v, --version      ËæìÂá∫ÁâàÊú¨Âè∑
  -o, --obj <str>    javascriptÈÄâÈ°π
  -O, --out <dir>    ËæìÂá∫ÁºñËØëÂêéÁöÑhtmlÂà∞<dir>
  -p, --path <path>  Âú®Â§ÑÁêÜstdioÊó∂ÔºåÊü•ÊâæÂåÖÂê´Êñá‰ª∂Êó∂ÁöÑÊü•ÊâæË∑ØÂæÑ

Examples:

  # ÁºñËØëÊï¥‰∏™ÁõÆÂΩï
  $ jade templates

  # ÁîüÊàê {foo,bar}.html
  $ jade {foo,bar}.jade

  # Âú®Ê†áÂáÜIO‰∏ã‰ΩøÁî®jade 
  $ jade < my.jade > my.html

  # Âú®Ê†áÂáÜIO‰∏ã‰ΩøÁî®jade, ÂêåÊó∂ÊåáÂÆöÁî®‰∫éÊü•ÊâæÂåÖÂê´ÁöÑÊñá‰ª∂
  $ jade < my.jade -p my.jade > my.html

  # Âú®Ê†áÂáÜIO‰∏ã‰ΩøÁî®jade 
  $ echo "h1 Jade!" | jade

  # foo, bar ÁõÆÂΩïÊ∏≤ÊüìÂà∞ /tmp
  $ jade foo bar --out /tmp 

```

## License 

(The MIT License)

Copyright (c) 2009-2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Just a _test_ of some **markdown**:

  - foo
  - bar
  - baz

Lazy lists for node
===================


# Table of contents:

[Introduction](#Introduction)
  
[Documentation](#Documentation)

<a name="Introduction" />
# Introduction
Lazy comes really handy when you need to treat a stream of events like a list.
The best use case currently is returning a lazy list from an asynchronous
function, and having data pumped into it via events. In asynchronous
programming you can't just return a regular list because you don't yet have
data for it. The usual solution so far has been to provide a callback that gets
called when the data is available. But doing it this way you lose the power of
chaining functions and creating pipes, which leads to not that nice interfaces.
(See the 2nd example below to see how it improved the interface in one of my
modules.)

Check out this toy example, first you create a Lazy object:
```javascript
    var Lazy = require('lazy');

    var lazy = new Lazy;
    lazy
      .filter(function (item) {
        return item % 2 == 0
      })
      .take(5)
      .map(function (item) {
        return item*2;
      })
      .join(function (xs) {
        console.log(xs);
      });
```

This code says that 'lazy' is going to be a lazy list that filters even
numbers, takes first five of them, then multiplies all of them by 2, and then
calls the join function (think of join as in threads) on the final list.

And now you can emit 'data' events with data in them at some point later,
```javascript
    [0,1,2,3,4,5,6,7,8,9,10].forEach(function (x) {
      lazy.emit('data', x);
    });
```

The output will be produced by the 'join' function, which will output the
expected [0, 4, 8, 12, 16].

And here is a real-world example. Some time ago I wrote a hash database for
node.js called node-supermarket (think of key-value store except greater). Now
it had a similar interface as a list, you could .forEach on the stored
elements, .filter them, etc. But being asynchronous in nature it lead to the
following code, littered with callbacks and temporary lists:
```javascript
    var Store = require('supermarket');

    var db = new Store({ filename : 'users.db', json : true });

    var users_over_20 = [];
    db.filter(
      function (user, meta) {
        // predicate function
        return meta.age > 20;
      },
      function (err, user, meta) {
        // function that gets executed when predicate is true
        if (users_over_20.length < 5)
          users_over_20.push(meta);
      },
      function () {
        // done function, called when all records have been filtered

        // now do something with users_over_20
      }
    )
```
This code selects first five users who are over 20 years old and stores them
in users_over_20.

But now we changed the node-supermarket interface to return lazy lists, and
the code became:
```javascript
    var Store = require('supermarket');

    var db = new Store({ filename : 'users.db', json : true });

    db.filter(function (user, meta) {
        return meta.age > 20;
      })
      .take(5)
      .join(function (xs) {
        // xs contains the first 5 users who are over 20!
      });
```
This is so much nicer!

Here is the latest feature: .lines. Given a stream of data that has \n's in it,
.lines converts that into a list of lines.

Here is an example from node-iptables that I wrote the other week,
```javascript
    var Lazy = require('lazy');
    var spawn = require('child_process').spawn;
    var iptables = spawn('iptables', ['-L', '-n', '-v']);

    Lazy(iptables.stdout)
        .lines
        .map(String)
        .skip(2) // skips the two lines that are iptables header
        .map(function (line) {
            // packets, bytes, target, pro, opt, in, out, src, dst, opts
            var fields = line.trim().split(/\s+/, 9);
            return {
                parsed : {
                    packets : fields[0],
                    bytes : fields[1],
                    target : fields[2],
                    protocol : fields[3],
                    opt : fields[4],
                    in : fields[5],
                    out : fields[6],
                    src : fields[7],
                    dst : fields[8]
                },
                raw : line.trim()
            };
        });
```
This example takes the `iptables -L -n -v` command and uses .lines on its output.
Then it .skip's two lines from input and maps a function on all other lines that
creates a data structure from the output.

<a name="Documentation" />
# Documentation

Supports the following operations:

* lazy.filter(f)
* lazy.forEach(f)
* lazy.map(f)
* lazy.take(n)
* lazy.takeWhile(f)
* lazy.bucket(init, f)
* lazy.lines
* lazy.sum(f)
* lazy.product(f)
* lazy.foldr(op, i, f)
* lazy.skip(n)
* lazy.head(f)
* lazy.tail(f)
* lazy.join(f)

The Lazy object itself has a .range property for generating all the possible ranges.

Here are several examples:

* Lazy.range('10..') - infinite range starting from 10
* Lazy.range('(10..') - infinite range starting from 11
* Lazy.range(10) - range from 0 to 9
* Lazy.range(-10, 10) - range from -10 to 9 (-10, -9, ... 0, 1, ... 9)
* Lazy.range(-10, 10, 2) - range from -10 to 8, skipping every 2nd element (-10, -8, ... 0, 2, 4, 6, 8)
* Lazy.range(10, 0, 2) - reverse range from 10 to 1, skipping every 2nd element (10, 8, 6, 4, 2)
* Lazy.range(10, 0) - reverse range from 10 to 1
* Lazy.range('5..50') - range from 5 to 49
* Lazy.range('50..44') - range from 50 to 45
* Lazy.range('1,1.1..4') - range from 1 to 4 with increment of 0.1 (1, 1.1, 1.2, ... 3.9)
* Lazy.range('4,3.9..1') - reverse range from 4 to 1 with decerement of 0.1
* Lazy.range('[1..10]') - range from 1 to 10 (all inclusive)
* Lazy.range('[10..1]') - range from 10 to 1 (all inclusive)
* Lazy.range('[1..10)') - range grom 1 to 9
* Lazy.range('[10..1)') - range from 10 to 2
* Lazy.range('(1..10]') - range from 2 to 10
* Lazy.range('(10..1]') - range from 9 to 1
* Lazy.range('(1..10)') - range from 2 to 9
* Lazy.range('[5,10..50]') - range from 5 to 50 with a step of 5 (all inclusive)

Then you can use other lazy functions on these ranges.



lixian-portal
=============

Áªô`iambus/xunlei-lixian`ÂÅöÁöÑ‰∏Ä‰∏™ÁÆÄÊ¥ÅÂÆûÁî®ÁöÑwebui„ÄÇÔºà‰∏çÊòéÁúüÁõ∏ÁöÑÂêåÂ≠¶Ëµ∂Âø´ÂÖàÂéªËÜúÊãú‰∫Ü[iambus/xunlei-lixian](https://github.com/iambus/xunlei-lixian)‰∫ÜÂÜçÂõûÊù•Ôºâ

# ËøôÊòØÂï•

Êàë‰πü‰∏çÁü•ÈÅìËøôÊòØÂï•ÔºåËßÅ‰∏ã‰∏ÄÁ´†ËØ¥ÊòéÂêß

# ÂÖ∏Âûã‰ΩøÁî®Âú∫ÊôØ

1. ÂÆ∂ÈáåÊúâ‰∏™ËøûÁùÄÁßªÂä®Á°¨ÁõòÁöÑÊ†ëËéìÊ¥æ
2. ÊàëÂπ≥Â∏∏Âà∑ÂæÆÂçöÊó∂ÂèëÁé∞ÂÖàÂá†‰∏™Â•ΩÁúãÁöÑÁîµÂΩ±ÔºåÂíåÊÉ≥Áé©ÁöÑÊ∏∏ÊàèÔºåÁÑ∂ÂêéÂÜçxxx‰∏äÊâæÂà∞Ëøô‰∫õÁîµÂΩ±ÂíåÊ∏∏ÊàèÁöÑed2kÈìæÊé•ÔºåÁÑ∂ÂêéËæìÂÖ•ËøõÂéª
3. Âë®Êú´ÊàëÈÄöËøásmbÊñá‰ª∂ÂÖ±‰∫´ÊâìÂºÄÊ†ëËéìÊ¥æÈáåÂ∑≤Áªè‰∏ãÂ•ΩÁöÑÁîµÂΩ±ÂíåÊ∏∏ÊàèÔºåÁúã‰πã‰∏îÁé©‰πã
4. ÂÆ§Âèã‰πüÂèØ‰ª•ÁúãÔºàÂ¶ÇÊûúÊúâÂÆ§ÂèãÁöÑËØùÔºâ

# ÁïåÈù¢È¢ÑËßà

![http://ww3.sinaimg.cn/large/7a464815jw1e5klmtnyu6j20zk0m8my3.jpg](http://ww3.sinaimg.cn/large/7a464815jw1e5klmtnyu6j20zk0m8my3.jpg)

![http://ww3.sinaimg.cn/large/7a464815jw1e5kln13fotj20zk0m8myv.jpg](http://ww3.sinaimg.cn/large/7a464815jw1e5kln13fotj20zk0m8myv.jpg)

# ÁéØÂ¢É

* linux/osx ÔºàÂ¶ÇÊûú‰Ω†ÊÉ≥Áî®windowsÊù•ÂÅö‰∏ãËΩΩÊúçÂä°Âô®Ôºå‰Ω†ÂæóÂÖàÂú®windows‰∏äÂÆâË£ÖÂ•ΩwgetÔºâ
* python2
* nodejs

# ÂÆâË£ÖÊñπÊ≥ï

* ‰∏ãËΩΩ‰ª£Á†ÅÂπ∂Ëß£ÂéãÁº©
* ËøêË°åÂëΩ‰ª§ÂêØÂä®`node /path/to/lixian-portal` 
* ‰∏ãËΩΩÁöÑ‰ΩçÁΩÆ‰∏∫ÂêØÂä®Ëøô‰∏™Á®ãÂ∫èÁöÑÁõÆÂΩï(Current Working Directory)
* Â¶ÇÈúÄ‰∏ãËΩΩÂà∞ÂÖ∂‰ªñ‰ΩçÁΩÆÔºåÂèØ‰ª•ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè`LIXIAN_PORTAL_HOME`Ôºå‰æãÂ¶ÇÔºöÂèØ‰ª•ËøôÊ†∑ÂêØÂä®Á®ãÂ∫è`LIXIAN_PORTAL_HOME=/mnt/sdb1 node /path/to/lixan-portal`

# Tricks

* Â¶ÇÊûúÊÉ≥ËÆ©ÂÆÉ‰∏ÄÁõ¥Âú®ÂêéËøêË°åÔºåÂèØ‰ª•‰ΩøÁî®Ëøô‰∏™ÂëΩ‰ª§ÂêØÂä®`nohup node /path/to/lixian-portal &`
* `lixian-portal`ÂÖºÂÆπ`xunlei-lixian`ÁöÑËÆæÁΩÆÔºåÊåâËøôÊ†∑ÁöÑÂëΩ‰ª§Ê†ºÂºèËÆæÁΩÆÂç≥ÂèØ`HOME=/path/to/lixian-portal/Downloads lx config output-dir /mnt/Downloads`

xunlei-lixian
=============
ËøÖÈõ∑Á¶ªÁ∫ø‰∏ãËΩΩËÑöÊú¨„ÄÇÊ¨¢ËøéÁªßÁª≠ÂÖ≥Ê≥®[ÊµèËßàÂô®Á´ØÁöÑËøÖÈõ∑Á¶ªÁ∫øÂ∫îÁî®](https://github.com/iambus/xunlei-lixian-web)„ÄÇ

### Â£∞Êòé
ËøÖÈõ∑Á¶ªÁ∫ø‰∏ãËΩΩ‰∏∫‰ºöÂëòÂäüËÉΩ„ÄÇÈùû‰ºöÂëòÊó†Ê≥ï‰ΩøÁî®„ÄÇ

Quick start
-----------

	python lixian_cli.py login "Your Xunlei account" "Your password"
	python lixian_cli.py login "Your password"
	python lixian_cli.py login

	python lixian_cli.py config username "Your Xunlei account"
	python lixian_cli.py config password "Your password"

	python lixian_cli.py list
	python lixian_cli.py list --completed
	python lixian_cli.py list --completed --name --original-url --download-url --no-status --no-id
	python lixian_cli.py list --deleted
	python lixian_cli.py list --expired
	python lixian_cli.py list id1 id2
	python lixian_cli.py list zip rar
	python lixian_cli.py list 2012.04.04 2012.04.05

	python lixian_cli.py download task-id
	python lixian_cli.py download ed2k-url
	python lixian_cli.py download --tool=wget ed2k-url
	python lixian_cli.py download --tool=asyn ed2k-url
	python lixian_cli.py download ed2k-url --output "file to save"
	python lixian_cli.py download id1 id2 id3
	python lixian_cli.py download url1 url2 url3
	python lixian_cli.py download --input download-urls-file
	python lixian_cli.py download --input download-urls-file --delete
	python lixian_cli.py download --input download-urls-file --output-dir root-dir-to-save-files
	python lixian_cli.py download bt://torrent-info-hash
	python lixian_cli.py download 1.torrent
	python lixian_cli.py download torrent-info-hash
	python lixian_cli.py download --bt http://xxx/xxx.torrent
	python lixian_cli.py download bt-task-id/file-id
	python lixian_cli.py download --all
	python lixian_cli.py download mkv
	python lixian_cli.py download 2012.04.04
	python lixian_cli.py download 0 1 2
	python lixian_cli.py download 0-2

	python lixian_cli.py add url
	python lixian_cli.py add 1.torrent
	python lixian_cli.py add torrent-info-hash
	python lixian_cli.py add --bt http://xxx/xxx.torrent

	python lixian_cli.py delete task-id
	python lixian_cli.py delete url
	python lixian_cli.py delete file-name-on-cloud-to-delete

	python lixian_cli.py pause id

	python lixian_cli.py restart id

	python lixian_cli.py rename id name

	python lixian_cli.py logout

ÂÆâË£ÖÊåáÂçó
--------

1. ÂÆâË£ÖgitÔºàÈùûgithubÁî®Êà∑Â∫îËØ•Âè™ÈúÄË¶ÅÊâßË°åÁ¨¨‰∏ÄÊ≠•Download and Install GitÔºâ

      http://help.github.com/set-up-git-redirect

2. ‰∏ãËΩΩ‰ª£Á†ÅÔºàWindowsÁî®Êà∑ËØ∑Âú®git-bashÈáåÊâßË°åÔºâ

        git clone git://github.com/iambus/xunlei-lixian.git

3. ÂÆâË£ÖPython 2.xÔºàËØ∑‰∏ãËΩΩÊúÄÊñ∞ÁöÑ2.7ÁâàÊú¨„ÄÇ‰∏çÊîØÊåÅPython 3.x„ÄÇÔºâ

      http://www.python.org/getit/

4. Âú®ÂëΩ‰ª§Ë°åÈáåËøêË°å

        python lixian_cli.py

Ê≥®Ôºö‰∏çÊñπ‰æøÂÆâË£ÖgitÁöÑÁî®Êà∑ÂèØ‰ª•ÈÄâÊã©Ë∑≥ËøáÂâç‰∏§Ê≠•ÔºåÂú®githubÁΩëÈ°µ‰∏ä‰∏ãËΩΩÊúÄÊñ∞ÁöÑÊ∫ê‰ª£Á†ÅÂåÖÔºàÈÄâÊã©"Download as zip"ÊàñËÄÖ"Download as tar.gz"ÔºâÔºö

https://github.com/iambus/xunlei-lixian/downloads


‰∏Ä‰∫õÊèêÁ§∫
--------

1. ‰Ω†ÂèØ‰ª•‰∏∫python lixian_cli.pyÂàõÂª∫‰∏Ä‰∏™Âà´ÂêçÔºàÊØîÂ¶ÇlxÔºâÔºå‰ª•ÂáèÂ∞ëÊï≤ÈîÆÊ¨°Êï∞„ÄÇ

      Linux‰∏äÂèØ‰ª•‰ΩøÁî®Ôºö

        ln -s ‰Ω†ÁöÑlixian_cli.pyË∑ØÂæÑ ~/bin/lx

      Windows‰∏äÂèØ‰ª•ÂàõÂª∫‰∏Ä‰∏™lx.batËÑöÊú¨ÔºåÊîæÂú®‰Ω†ÁöÑPATH‰∏≠Ôºö

        @echo off
        python ÂÆåÊï¥ÁöÑlixian_cli.pyË∑ØÂæÑ %*

      Ê≥®Ôºö‰∏ãÊñá‰∏≠ÊèêÂà∞ÁöÑlxÈÉΩÊòØÊåápython lixian_cli.pyÁöÑÂà´Âêç„ÄÇ

2. ‰Ω†ÂèØ‰ª•‰ΩøÁî®lx config‰øùÂ≠ò‰∏Ä‰∫õÈÖçÁΩÆ„ÄÇËßÅ‚ÄúÂëΩ‰ª§ËØ¶Ëß£‚Äù‰∏ÄËäÇ„ÄÇ

        lx config delete
        lx config tool asyn
        lx config username your-id
        lx config password your-password

      Ê≥®ÔºöÂØÜÁ†Å‰øùÂ≠òÁöÑÊó∂ÂÄô‰ºöÂä†ÂØÜÔºàhashÔºâ

3. ÈÉ®ÂàÜÂëΩ‰ª§ÊúâÁü≠ÂêçÂ≠ó„ÄÇlx dÁõ∏ÂΩì‰∫élx downloadÔºålx aÁõ∏ÂΩì‰∫élx addÔºålx lÁõ∏ÂΩì‰∫élx listÔºålx xÁõ∏ÂΩì‰∫élx list„ÄÇ‰πüÂèØ‰ª•ÈÄöËøáplugin apiËá™Â∑±Ê∑ªÂä†alias„ÄÇ

4. ‰ΩøÁî®lx download‰∏ãËΩΩÁöÑÊñá‰ª∂‰ºöËá™Âä®È™åËØÅhash„ÄÇÂÖ∂‰∏≠ed2kÂíåbt‰ºöÂÅöÂÆåÊï¥ÁöÑhashÊ†°È™å„ÄÇhttp‰∏ãËΩΩÂè™ÂÅöÈÉ®ÂàÜÊ†°È™å„ÄÇ

      Ê≥®ÔºöÂåÖÂê´Â§ö‰∏™Êñá‰ª∂ÁöÑbtÁßçÂ≠êÔºåÂ¶ÇÊûúÊ≤°ÊúâÂÆåÊï¥‰∏ãËΩΩÊâÄÊúâÊñá‰ª∂ÔºåÂØπ‰∫éÂ∑≤‰∏ãËΩΩÁöÑÊñá‰ª∂ÔºåÂèØËÉΩÊúâÂ∞ëÈáèÁâáÊÆµÊó†Ê≥ïÈ™åËØÅ„ÄÇÂ¶ÇÊûúÂæàÈáçËßÜÊñá‰ª∂ÁöÑÊ≠£Á°ÆÊÄßËØ∑ÈÄâÊã©‰∏ãËΩΩbtÁßçÂ≠ê‰∏≠ÁöÑÊâÄÊúâÊñá‰ª∂„ÄÇÔºàÁõÆÂâçËøòÊ≤°ÊúâÂèëÁé∞Áî±‰∫éËΩØ‰ª∂ÈóÆÈ¢òËÄåÂØºËá¥hashÈ™åËØÅÂ§±Ë¥•ÁöÑÊÉÖÂÜµ„ÄÇÔºâ

5. Â¶ÇÊûúËßâÂæóÂ§ßÊñá‰ª∂ÁöÑhashÈÄüÂ∫¶Â§™ÊÖ¢ÔºåÂèØ‰ª•ÂÖ≥ÊéâÔºö

        lx download --no-hash ...

      ‰πüÂèØ‰ª•‰ΩøÁî®lx configÈªòËÆ§ÂÖ≥ÊéâÂÆÉÔºö

        lx config no-hash

6. lx hashÂëΩ‰ª§ÂèØ‰ª•Áî®‰∫éÊâãÂä®ËÆ°ÁÆóhash„ÄÇËßÅ‚ÄúÂÖ∂‰ªñÂ∑•ÂÖ∑‚Äù‰∏ÄËäÇ„ÄÇ


ÂëΩ‰ª§ËØ¶Ëß£
--------

Ê≥®Ôºö‰∏ãÊñá‰∏≠ÊèêÂà∞ÁöÑlxÈÉΩÊòØÊåápython lixian_cli.pyÁöÑÂà´Âêç„ÄÇ

Â∏∏Áî®ÂëΩ‰ª§Ôºö

* lx login
* lx download
* lx list
* lx add
* lx delete
* lx pause
* lx restart
* lx rename
* lx readd
* lx config
* lx info
* lx help

### lx login
ÁôªÂΩïÔºåËé∑Âæó‰∏Ä‰∏™ÊúâÊïàsessionÔºåÈªòËÆ§‰øùÂ≠òË∑ØÂæÑÊòØ~/.xunlei.lixian.cookies„ÄÇ‰∏ÄËà¨Êù•ËØ¥ÔºåÈô§ÈùûÊúçÂä°Âô®ÊïÖÈöúÊàñËÄÖÊâßË°å‰∫Ülx logoutÔºàÊàñËÄÖ‰Ω†ÊâãÂä®Âà†Èô§‰∫ÜcookiesÊñá‰ª∂ÔºâÔºåÂê¶ÂàôsessionÁöÑÊúâÊïàÊúüÊòØ‰∏ÄÂ§©Â∑¶Âè≥„ÄÇsessionËøáÊúü‰πãÂêéÈúÄË¶ÅÊâãÂä®ÈáçÊñ∞ÊâßË°ålogin„ÄÇ‰ΩÜÂ¶ÇÊûú‰ΩøÁî®lx config passwordÊääÂØÜÁ†Å‰øùÂ≠òÂà∞ÈÖçÁΩÆÊñá‰ª∂ÈáåÔºåÂàô‰ºöËá™Âä®ÈáçÊñ∞ÁôªÂΩï„ÄÇÂêéÊñá‰ºö‰ªãÁªç[lx config](#lx-config)„ÄÇ

lx loginÊé•Âèó‰∏§‰∏™ÂèÇÊï∞ÔºåÁî®Êà∑ÂêçÂíåÂØÜÁ†Å„ÄÇÁ¨¨‰∫åÊ¨°ÁôªÂΩïÂèØ‰ª•Âè™Â°´ÂØÜÁ†Å„ÄÇ

    lx login username password
    lx login password

Â¶ÇÊûú‰∏çÂ∏åÊúõÊòéÊñáÊòæÁ§∫ÂØÜÁ†ÅÔºå‰πüÂèØ‰ª•Áõ¥Êé•ËøêË°å

    lx login

ÊàñËÄÖ‰ΩøÁî®-‰ª£ÊõøÂØÜÁ†Å

    lx login username -

‰∏äÈù¢ÁöÑÂëΩ‰ª§‰ºöËøõÂÖ•‰∫§‰∫íÂºè‰∏çÂõûÊòæÁöÑÂØÜÁ†ÅËæìÂÖ•„ÄÇ

ÂèØ‰ª•Áî®--cookiesÊåáÂÆö‰øùÂ≠òÁöÑsessionÊñá‰ª∂Ë∑ØÂæÑ„ÄÇ-Ë°®Á§∫‰∏ç‰øùÂ≠òÔºàÂú®loginËøô‰∏™‰æãÂ≠êÈáåÔºåÊ≤°‰ªÄ‰πàÂÆûÈôÖÊÑè‰πâÔºâ„ÄÇ

    lx login username password --cookies some-path
    lx login username password --cookies -

Ê≥®ÊÑèÔºåÈô§‰∫Ülx loginÂ§ñÔºåÂ§ßÂ§öÊï∞lxÂëΩ‰ª§ÔºåÊØîÂ¶Çlx downloadÔºåÈÉΩÈúÄË¶ÅÂÖàÊâßË°åÁôªÂΩï„ÄÇËøô‰∫õÂëΩ‰ª§Â§ßÂ§öÊîØÊåÅ--usernameÂíå--passwordÔºå‰ª•Âèä--cookiesÂèÇÊï∞ÔºåÊ†πÊçÆ‰º†ÈÄíËøõÊù•ÁöÑÂèÇÊï∞ÔºåÊ£ÄÊü•Áî®Êà∑ÊòØÂê¶Â∑≤ÁªèÁôªÂΩïÔºåÂ¶ÇÊûúÂ∞öÊú™ÁôªÂΩïÂàôÂ∞ùËØïÁôªÂΩï„ÄÇ‰∏ÄËà¨Êù•ËØ¥‰∏çÂª∫ËÆÆÂú®ÂÖ∂‰ªñÂëΩ‰ª§Èáå‰ΩøÁî®Ëøô‰∫õÂèÇÊï∞ÔºàÂõ†‰∏∫È∫ªÁÉ¶ÔºâÔºåÈô§Èùû‰Ω†‰∏çÂ∏åÊúõ‰øùÂ≠òsession‰ø°ÊÅØÂà∞Á°¨Áõò„ÄÇ

### lx download
‰∏ãËΩΩ„ÄÇÁõÆÂâçÊîØÊåÅÊôÆÈÄöÁöÑhttp‰∏ãËΩΩÔºåed2k‰∏ãËΩΩÔºåÂíåbt‰∏ãËΩΩ„ÄÇÂèØ‰ª•‰ΩøÁî®thunder/flashget/qqÊóãÈ£éÁöÑËøûÊé•Ôºàbt‰ªªÂä°Èô§Â§ñÔºâ„ÄÇÂú®‰ø°ÊÅØË∂≥Â§üÁöÑÊÉÖÂÜµ‰∏ãÔºàËßÅ‚Äú‰∏Ä‰∫õÊèêÁ§∫‚Äù‰∏ÄËäÇÁöÑÁ¨¨3Êù°ÔºâÔºå‰∏ãËΩΩÁöÑÊñá‰ª∂‰ºöËá™Âä®È™åËØÅhashÔºåÂá∫Èîô‰∫Ü‰ºöÈáçÊñ∞‰∏ãËΩΩÔºàÊàë‰∏™‰∫∫ÁõÆÂâçËøòÊ≤°ÈÅáÂà∞Ëøá‰∏ãËΩΩÊñá‰ª∂ÊçüÂùèÁöÑÊÉÖÂÜµÔºâ„ÄÇËßÅ‚Äú‰∏Ä‰∫õÊèêÁ§∫‚Äù‰∏ÄËäÇÁöÑÁ¨¨3Êù°„ÄÇ

    lx download id
    lx download http://somewhere
    lx download ed2k://somefile
    lx download bt://info-hash
    lx download link1 link2 link3 ...
    lx download --all
    lx download keywords
    lx download date

ÂØπ‰∫ébt‰ªªÂä°ÔºåÂèØ‰ª•ÊåáÂÆöÊú¨Âú∞.torrentÊñá‰ª∂Ë∑ØÂæÑÔºåÊàñËÄÖtorrentÊñá‰ª∂ÁöÑinfo hash„ÄÇÔºàÂæàÂ§öÁΩëÁ´ô‰ΩøÁî®info hashÊù•Ê†áËØÜ‰∏Ä‰∏™btÁßçÂ≠êÊñá‰ª∂ÔºåËøôÁßçÊÉÖÂÜµ‰Ω†Â∞±‰∏çÈúÄË¶Å‰∏ãËΩΩÁßçÂ≠ê‰∫ÜÔºålx downloadÂèØ‰ª•Ëá™Âä®‰∏ãËΩΩÁßçÂ≠êÔºå‰∏çËøáÂâçÊèêÊòØ‰πãÂâçÂ∑≤ÁªèÊúâ‰∫∫‰ΩøÁî®ËøÖÈõ∑Á¶ªÁ∫ø‰∏ãËΩΩËøáÂêåÊ†∑ÁöÑÁßçÂ≠ê„ÄÇ[Â¶ÇÂêéÊâÄËø∞](#ÂÖ∂‰ªñÂ∑•ÂÖ∑)Ôºå‰Ω†‰πüÂèØ‰ª•‰ΩøÁî®lx hash --info-hashÊù•ÊâãÂä®ÁîüÊàêbtÁßçÂ≠êÁöÑinfo hash„ÄÇÔºâ

    lx download Community.S03E01.720p.HDTV.X264-DIMENSION.torrent
    lx download 61AAA3C6FBB8B71EBE2F5A2A3481296B51D882F6
    lx download bt://61AAA3C6FBB8B71EBE2F5A2A3481296B51D882F6

Â¶ÇÊûúurlÊú¨Ë∫´ÊåáÂêë‰∫ÜË¶ÅÊ∑ªÂä†‰ªªÂä°ÁöÑÁßçÂ≠êÊñá‰ª∂ÔºåÈúÄË¶ÅÂä†‰∏ä--btÂèÇÊï∞ÂëäËØâlxËÑöÊú¨ËøôÊòØ‰∏Ä‰∏™ÁßçÂ≠ê„ÄÇ

    lx download --bt http://tvu.org.ru/torrent.php?tid=64757

ÂèØ‰ª•ÊääÂ§ö‰∏™ËøûÊé•‰øùÂ≠òÂà∞Êñá‰ª∂ÈáåÔºå‰ΩøÁî®--inputÂèÇÊï∞ÊâπÈáè‰∏ãËΩΩÔºö

    lx download --input links.txt

Ê≥®ÊÑèÔºöÂú®Êñ≠ÁÇπÁª≠‰º†ÁöÑÊÉÖÂÜµ‰∏ãÔºåÂ¶ÇÊûúÊñá‰ª∂Â∑≤ÁªèÂ≠òÂú®ÔºåÂπ∂‰∏îÊñá‰ª∂Â§ßÂ∞èÁõ∏Á≠âÔºåÂπ∂‰∏î‰ΩøÁî®‰∫Ü--continueÔºåÈáçÊñ∞‰∏ãËΩΩÂπ∂‰∏çÂè™ÊòØÁÆÄÂçïÁöÑÂøΩÁï•Ëøô‰∏™Êñá‰ª∂ÔºåËÄåÊòØÂÖàÂÅöhashÊ†°È™åÔºåÂ¶ÇÊûúÊ†°È™åÈÄöËøáÊâçÂøΩÁï•„ÄÇÂ¶ÇÊûúÊñá‰ª∂ÊØîËæÉÂ§öÊàñËÄÖÊØîËæÉÂ§ßÔºåÂèØËÉΩÊØîËæÉËÄóÊó∂„ÄÇÂª∫ËÆÆÊâãÂä®‰ªé--inputÊñá‰ª∂ÈáåÂà†Èô§Â∑≤Áªè‰∏ãËΩΩËøáÁöÑÈìæÊé•„ÄÇ‰πüÂèØ‰ª•‰ΩøÁî®--mini-hashÂèÇÊï∞ÔºåÂ¶Ç‰∏ã„ÄÇ

Â¶ÇÊûúÊåáÂÆö‰∫Ü--mini-hashÂèÇÊï∞ÔºåÂØπ‰∫éÂ∑≤Áªè‰∏ãËΩΩËøáÁöÑÊñá‰ª∂ÔºåÂπ∂‰∏îÊñá‰ª∂Â§ßÂ∞èÊ≠£Á°ÆÔºà‰∏ÄËà¨ÊÑèÂë≥ÁùÄËøô‰∏™Êñá‰ª∂ÁöÑÊ≠£Á°ÆÊÄßÂ∑≤ÁªèÂú®Ââç‰∏ÄÊ¨°‰∏ãËΩΩ‰∏≠È™åËØÅËøá‰∫ÜÔºâÔºå‰ºöÂÅö‰∏Ä‰∏™ÊúÄÁÆÄÂçïÁöÑÊ†°È™å„ÄÇÂØπ‰∫éÂ∞öÊú™‰∏ãËΩΩÂÆåÊàêÁöÑ‰ªªÂä°ÔºåÂú®ÂÆåÊàê‰πãÂêéËøòÊòØ‰ºöÂÅöÂÆåÊï¥ÁöÑhash„ÄÇ

Â¶ÇÊûúÊåáÂÆö‰∫Ü--no-hashÂèÇÊï∞ÔºåÊ∞∏Ëøú‰∏ç‰ºöÂÅöÂÆåÊï¥ÁöÑhash„ÄÇ‰ΩÜËøòÊòØ‰ºöÂÅöÊñá‰ª∂Â§ßÂ∞èÊ£ÄÈ™åÂíåÂèñÊ†∑hashÔºàÂæàÂø´Ôºâ„ÄÇ

ÂèØ‰ª•‰ΩøÁî®--deleteÂèÇÊï∞Âú®‰∏ãËΩΩÂÆåÊàê‰πãÂêéÂà†Èô§‰ªªÂä°„ÄÇ

    lx download link --delete

Â¶ÇÊûú‰∏Ä‰∏™Êñá‰ª∂Â∑≤ÁªèÂ≠òÂú®Ôºå‰ΩøÁî®ÂèÇÊï∞--continueÊîØÊåÅÊñ≠ÁÇπÁª≠‰º†Ôºå‰ΩøÁî®--overwriteË¶ÜÁõñÂ∑≤Â≠òÂú®ÁöÑÊñá‰ª∂ÔºåÈáçÊñ∞‰∏ãËΩΩ„ÄÇ

‰Ω†ÂèØËÉΩÈúÄË¶ÅÁî®--toolÂèÇÊï∞Êù•ÊåáÂÆö‰∏ãËΩΩÂ∑•ÂÖ∑„ÄÇÈªòËÆ§ÁöÑ‰∏ãËΩΩÂ∑•ÂÖ∑ÊòØwgetÔºåÊúâ‰∫õÁéØÂ¢ÉÁöÑwgetÊòØÊúÄ‰ΩéÂäüËÉΩÁâàÊú¨Ôºå‰∏çÊîØÊåÅÊåáÂÆöcookieÊàñËÄÖÊñ≠ÁÇπÁª≠‰º†„ÄÇËøôÁßçÊÉÖÂÜµÂèØ‰ª•‰ΩøÁî®--tool=asyn„ÄÇËøôÂú®‚ÄúÊîØÊåÅÁöÑ‰∏ãËΩΩÂ∑•ÂÖ∑‚Äù‰∏ÄËäÇÊúâËØ¥Êòé„ÄÇ

    lx download --tool=wget link
    lx download --tool=asyn link

--outputÂíå--output-dirÂàÜÂà´Áî®Êù•ÊåáÂÆö‰øùÂ≠òÊñá‰ª∂ÁöÑË∑ØÂæÑÂíåÁõÆÂΩï„ÄÇ

Â¶ÇÊûúË¶Å‰∏ãËΩΩÁöÑÊñá‰ª∂Â∞öÊú™Âú®Á¶ªÁ∫ø‰ªªÂä°ÈáåÔºå‰ºöË¢´Ëá™Âä®Ê∑ªÂä†„ÄÇ

‰Ω†‰πüÂèØ‰ª•‰ΩøÁî®ÊåáÂÆöË¶Å‰∏ãËΩΩÁöÑ‰ªªÂä°idÔºàlx listÂëΩ‰ª§ÂèØ‰ª•Áî®Êù•Êü•Áúã‰ªªÂä°idÔºâÔºö

    lx download task-id

‰ΩÜÊòØË¶ÅÊ≥®ÊÑèÔºåÂ§ö‰ªªÂä°‰∏ãËΩΩÁöÑÊó∂ÂÄôÔºå‰∏çËÉΩÊ∑∑Áî®idÂíåurlÔºà‰ª•ÂêéÂèØËÉΩ‰ºöÊîØÊåÅÔºâ„ÄÇ

Á±ª‰ºº‰ªªÂä°idÔºå‰πüÂèØ‰ª•ÊåáÂÆö‰ªªÂä°ÁöÑÂ∫èÂàóÂè∑„ÄÇÂ∫èÂàóÂè∑‰ªé0ÂºÄÂßã„ÄÇÂèØ‰ª•‰ΩøÁî®lx list -nÊü•ÁúãÂ∫èÂàóÂè∑„ÄÇÂ¶ÇÊûúÂ∏åÊúõlx listÈªòËÆ§ÊòæÁ§∫Â∫èÂàóÂè∑ÔºåÂèØ‰ª•‰ΩøÁî®lx config n„ÄÇËã•Ë¶Å‰∏ãËΩΩ‰ªªÂä°ÂàóË°®‰∏≠ÁöÑÁ¨¨‰∏Ä‰∏™‰ªªÂä°Ôºö

    lx download 0

Ë¶Å‰∏ãËΩΩÂâç‰∏â‰∏™‰ªªÂä°Ôºö

    lx download 0-2

ÂØπ‰∫ébt‰ªªÂä°ÔºåÂ¶ÇÊûúÂè™ÊÉ≥‰∏ãËΩΩÈÉ®ÂàÜÊñá‰ª∂ÔºåÂèØ‰ª•Âú®task idÂêéÊåáÂÆöÊñá‰ª∂idÔºö

    lx download bt-task-id/file-id bt-task-id/file-id2

ÊàñËÄÖÔºö

    lx download bt-task-id/[1,3,5-7]

Ê≥®Ôºö‰∏äÈù¢ÁöÑÂëΩ‰ª§‰∏ãËΩΩÂØπÂ∫îbt‰ªªÂä°ÈáåÊñá‰ª∂id‰∏∫1Ôºå3Ôºå5Ôºå6Ôºå7ÁöÑ‰∫î‰∏™Êñá‰ª∂„ÄÇ

‰πüÂèØ‰ª•ÊåáÂÆöbtÂ≠êÊñá‰ª∂ÁöÑÊâ©Â±ïÂêçÔºö

    lx download bt-task-id/.mkv

ÊàñËÄÖÔºö

    lx download bt-task-id/[.mkv,.mp4]

Êõ¥Â§öÁöÑÁî®Ê≥ïÔºöTODO

ÂèØ‰ª•‰ΩøÁî®--allÂèÇÊï∞‰∏ãËΩΩÊâÄÊúâÁöÑ‰ªªÂä°ÔºàÂ¶ÇÊûúÂ∑≤ÁªèÂú®ÂèÇÊï∞‰∏≠ÊåáÂÆö‰∫ÜË¶Å‰∏ãËΩΩÁöÑÈìæÊé•ÊàñËÄÖ‰ªªÂä°idÔºå--allÂèÇÊï∞‰ºöË¢´ÂøΩÁï•ÔºâÔºö

    lx download --all

‰πüÂèØ‰ª•‰ΩøÁî®‰∏Ä‰∏™ÁÆÄÂçïÁöÑÂÖ≥ÈîÆÂ≠óÂåπÈÖçË¶Å‰∏ãËΩΩÁöÑÊñá‰ª∂ÂêçÔºö

    lx download mkv

‰πüÂèØ‰ª•ÊêúÁ¥¢Â§ö‰∏™ÂÖ≥ÈîÆÂ≠óÔºàÊª°Ë∂≥ÂÖ∂‰∏≠‰∏Ä‰∏™Â∞±ÁÆóÂåπÈÖçÔºâÔºö

    lx download mkv mp4

‰ªªÂä°ÁöÑÊ∑ªÂä†Êó•Êúü‰πüÂèØ‰ª•‰Ωú‰∏∫ÂÖ≥ÈîÆÂ≠óÔºö

    lx download 2012.04.04
    lx download 2012.04.04 2012.04.05

### lx list
ÂàóÂá∫Â∑≤Â≠òÂú®ÁöÑÁ¶ªÁ∫ø‰ªªÂä°„ÄÇÈªòËÆ§Âè™‰ºöÂàóÂá∫‰ªªÂä°idÔºå‰ªªÂä°ÂêçÔºå‰ª•ÂèäÁä∂ÊÄÅ„ÄÇÂèØ‰ª•‰ΩøÁî®--original-urlÂíå--download-urlÂèÇÊï∞Êù•ÂàóÂá∫ÂéüÂßãÈìæÊé•Âíå‰∏ãËΩΩÈìæÊé•„ÄÇ--completedÂèÇÊï∞Áî®‰∫éÂøΩÁï•Êú™ÂÆåÊàê‰ªªÂä°„ÄÇ

    lx list
    lx list --completed
    lx list --no-status --original-url --download-url

Â¶ÇÊûúË¶ÅÂàóÂá∫bt‰ªªÂä°ÁöÑÂ≠êÊñá‰ª∂ÔºåÂèØ‰ª•Âú®‰ªªÂä°idÂêéÈù¢Âä†‰∏ä/Ôºö

    lx list id/

ÂèØ‰ª•‰ΩøÁî®--deletedÊàñËÄÖ--expiredÂèÇÊï∞Êù•ÂàóÂá∫Â∑≤Âà†Èô§ÂíåÂ∑≤ËøáÊúüÁöÑ‰ªªÂä°„ÄÇ

ËØ¶ÁªÜÂèÇÊï∞ÂèØ‰ª•ÂèÇËÄÉlx help list„ÄÇ

### lx add
Ê∑ªÂä†‰ªªÂä°Âà∞ËøÖÈõ∑Á¶ªÁ∫øÊúçÂä°Âô®‰∏ä„ÄÇ

    lx add url1 url2 url3
    lx add --input links.txt
    lx add --bt torrent-file
    lx add --bt torrent-url
    lx add --bt info-hash

ÊèêÁ§∫Ôºölx download‰ºöËá™Âä®Ê∑ªÂä†‰ªªÂä°ÔºåËÄåÊó†ÈúÄÊâßË°ålx add„ÄÇ

### lx delete
‰ªéËøÖÈõ∑Á¶ªÁ∫øÊúçÂä°Âô®‰∏äÂà†Èô§‰ªªÂä°„ÄÇ

    lx delete id1 id2
    lx delete ed2k://...
    lx delete mkv
    lx delete --all mkv
    lx delete --all mkv mp4

### lx pause
ÊöÇÂÅú‰ªªÂä°„ÄÇ

    lx pause id1 id2
    lx pause --all mkv

### lx restart
ÈáçÊñ∞ÂºÄÂßã‰ªªÂä°„ÄÇ

    lx restart id1 id2
    lx restart --all mkv

### lx rename
ÈáçÂëΩÂêç‰ªªÂä°

	lx rename task-id task-name

### lx logout
‰∏çÊÉ≥‰øùÁïôsessionÂèØ‰ª•‰ΩøÁî®lx logoutÈÄÄÂá∫„ÄÇ‰∏ÄËà¨Áî®‰∏çÁùÄ„ÄÇ

     lx logout
     lx logout --cookies your-cookies-file

### lx readd
ÈáçÊñ∞Ê∑ªÂä†Â∑≤ËøáÊúüÊàñËÄÖÂ∑≤Âà†Èô§ÁöÑ‰ªªÂä°„ÄÇ

    lx readd --deleted task-id
    lx readd --expired task-name

ÊèêÁ§∫ÔºöÂèØ‰ª•Áî®lx list --deletedÊàñËÄÖlx list --expiredÂàóÂá∫Â∑≤Âà†Èô§ÂíåËøáÊúüÁöÑ‰ªªÂä°„ÄÇ

### lx config
‰øùÂ≠òÈÖçÁΩÆ„ÄÇÈÖçÁΩÆÊñá‰ª∂ÁöÑ‰øùÂ≠òË∑ØÂæÑÊòØ~/.xunlei.lixian.config„ÄÇËôΩÁÑ∂‰Ω†ÂèØ‰ª•Â∑Æ‰∏çÂ§öÂèØ‰ª•‰øùÂ≠ò‰ªª‰ΩïÂèÇÊï∞Ôºå‰ΩÜÊòØÁõÆÂâçÂè™Êúâ‰ª•‰∏ãÂá†‰∏™ÂèÇÊï∞‰ºöÁúüÊ≠£Ëµ∑‰ΩúÁî®Ôºö

* username
* password
* tool
* continue
* delete
* output-dir
* hash
* mini-hash
* id
* n
* size
* format-size
* colors
* wget-optsÔºàËßÅÁ®çÂêéÁöÑËØ¥ÊòéÔºâ
* aria2-optsÔºàËßÅÁ®çÂêéÁöÑËØ¥ÊòéÔºâÔºàËßÅÊîØÊåÅÁöÑ‰∏ãËΩΩÂ∑•ÂÖ∑‰∏ÄËäÇÔºâ
* axel-optsÔºàËßÅÁ®çÂêéÁöÑËØ¥ÊòéÔºâ
* watch-interval
* log-level
* log-path

ÔºàÂõ†‰∏∫Âè™ÊúâËøôÂá†‰∏™ÂèÇÊï∞ÊàëËßâÂæóÊòØÊØîËæÉÊúâÁî®ÁöÑ„ÄÇÂ¶ÇÊûú‰Ω†ËßâÂæóÂÖ∂‰ªñÁöÑÂèÇÊï∞ÊúâÁî®ÂèØ‰ª•Âèë‰ø°ÁªôÊàëÊàñËÄÖÁõ¥Êé•open‰∏Ä‰∏™issue„ÄÇÔºâ

‰∏çÂä†ÂèÇÊï∞‰ºöÊâìÂç∞ÂΩìÂâç‰øùÂ≠òÁöÑÊâÄÊúâÈÖçÁΩÆÔºö

    lx config

ÂèØ‰ª•‰ΩøÁî®--printÊâìÂç∞ÊåáÂÆöÁöÑÈÖçÁΩÆÔºö

	lx config --print password

Ê∑ªÂä†‰∏Ä‰∏™Êñ∞ÁöÑÂèÇÊï∞Ôºö

    lx config username your-username
    lx config password your-password
    lx config delete
    lx config no-delete

Âà†Èô§‰∏Ä‰∏™ÂèÇÊï∞Ôºö

    lx config --delete password

Ê≥®ÔºöÂØÜÁ†ÅÊòØhashËøáÁöÑÔºå‰∏çÊòØÊòéÊñá‰øùÂ≠ò„ÄÇ
Ê≥®ÔºöÂ¶ÇÊûú‰∏çÂ∏åÊúõÂú®ÂëΩ‰ª§Ë°åÂèÇÊï∞‰∏≠ÊòéÊñá‰øùÂ≠òÂØÜÁ†ÅÔºåÂèØ‰ª•ËøêË°ålx config passwordÔºåÊàñËÄÖlx config password -Ôºå‰ºöËøõÂÖ•‰∫§‰∫íÂºè‰∏çÂõûÊòæÂØÜÁ†ÅËæìÂÖ•ÔºàÂè™ÊîØÊåÅpasswordÈÖçÁΩÆÔºâ„ÄÇ

ÂÖ≥‰∫éwget-opts/aria2-opts/axel-optsÔºåÂõ†‰∏∫Ëøô‰∫õÂ∑•ÂÖ∑ÁöÑÂëΩ‰ª§Ë°åÂèÇÊï∞‰∏ÄËà¨ÈÉΩÂåÖÂê´-ÔºåÊâÄ‰ª•ÈúÄË¶ÅÁî®È¢ùÂ§ñÁöÑ--ËΩ¨‰πâ„ÄÇÂè¶Â§ñÂ§ö‰∏™ÂëΩ‰ª§Ë°åÂèÇÊï∞ÈúÄË¶ÅÁî®ÂºïÂè∑ÂêàÂπ∂Âà∞‰∏ÄËµ∑Ôºö

    lx config -- aria2-opts "-s10 -x10 -c"

### lx info
ÊâìÂç∞cookiesÊñá‰ª∂Èáå‰øùÂ≠òÁöÑËøÖÈõ∑ÂÜÖÈÉ®idÔºåÂåÖÊã¨ÁôªÂΩïÁöÑIDÔºå‰∏Ä‰∏™ÂÜÖÈÉ®‰ΩøÁî®ÁöÑIDÔºå‰ª•Âèägdriveid„ÄÇ

ÂÖ≥‰∫égdriveidÔºöÁêÜËÆ∫‰∏ägdriveidÊòØ‰∏ãËΩΩËøÖÈõ∑Á¶ªÁ∫øÈìæÊé•ÈúÄË¶ÅÁöÑÂîØ‰∏ÄcookieÔºå‰Ω†ÂèØ‰ª•Áî®lx list --download-urlËé∑Âèñ‰∏ãËΩΩÂú∞ÂùÄÔºåÁÑ∂ÂêéÁî®lx infoËé∑ÂèñgdriveidÔºåÁÑ∂ÂêéÊâãÂä®‰ΩøÁî®ÂÖ∂‰ªñÂ∑•ÂÖ∑‰∏ãËΩΩÔºåÊØîÂ¶Çwget "--header=Cookie: gdriveid=your-gdriveid" download-url„ÄÇ

-iÂèÇÊï∞ÂèØ‰ª•Âè™ÊâìÂç∞ÁôªÂΩïIDÔºö

    lx info -i

Â¶ÇÊûúÊÉ≥ÊääÁôªÂΩïidÂ§çÂà∂Âà∞Ââ™ÂàáÊùøÔºö

    lx info -i | clip

### lx help
ÊâìÂç∞Â∏ÆÂä©‰ø°ÊÅØ„ÄÇ

    lx help
    lx help examples
    lx help readme
    lx help download

ÊîØÊåÅÁöÑ‰∏ãËΩΩÂ∑•ÂÖ∑
--------------

* wgetÔºöÈªòËÆ§‰∏ãËΩΩÂ∑•ÂÖ∑„ÄÇÊ≥®ÊÑèÊúâ‰∫õLinuxÂèëË°åÁâàÔºàÊØîÂ¶ÇÊüê‰∫õËøêË°åÂú®Ë∑ØÁî±ËÆæÂ§á‰∏äÁöÑminiÁ≥ªÁªüÔºâËá™Â∏¶ÁöÑwgetÂèØËÉΩÊó†Ê≥ïÊª°Ë∂≥ÂäüËÉΩË¶ÅÊ±Ç„ÄÇÂèØ‰ª•Â∞ùËØï‰ΩøÁî®ÂÖ∂‰ªñÂ∑•ÂÖ∑„ÄÇ
* asynÔºöÂÜÖÁΩÆÁöÑ‰∏ãËΩΩÂ∑•ÂÖ∑„ÄÇÂú®ÂëΩ‰ª§Ë°å‰∏≠Âä†‰∏ä--tool=asynÂèØ‰ª•ÂêØÁî®„ÄÇÊ≥®ÊÑèÊ≠§Â∑•ÂÖ∑ÁöÑ‰∏ãËΩΩË°®Áé∞‰∏ÄËà¨ÔºåÂú®È´òÈÄü‰∏ãËΩΩÊàñËÄÖËÆæÂ§áÊÄßËÉΩ‰∏çÂ§™Â•ΩÁöÑÊÉÖÂÜµÔºàÊØîÂ¶ÇËøêË°åÂú®‰ΩéÁ´ØË∑ØÁî±‰∏äÔºâÔºåCPU‰ΩøÁî®ÂèØËÉΩÁ®çÈ´ò„ÄÇÂú®ÊàëÁöÑRT-N16‰∏äÔºå‰ª•250K/sÁöÑÈÄüÂ∫¶‰∏ãËΩΩÔºåCPU‰ΩøÁî®Â§ßÊ¶ÇÂú®10%~20%„ÄÇ
* urllib2ÔºöÂÜÖÁΩÆ‰∏ãËΩΩÂ∑•ÂÖ∑„ÄÇ‰∏çÊîØÊåÅÊñ≠ÁÇπÁª≠‰º†ÈîôËØØÈáçËøûÔºå‰∏çÂª∫ËÆÆ‰ΩøÁî®„ÄÇ
* curlÔºöÂ∞öÊú™ÊµãËØï„ÄÇ
* aria2ÔºöÊµãËØïÈÄöËøá„ÄÇÊ≥®ÊÑèÊüê‰∫õÁéØÂ¢ÉÈáåÁöÑaria2cÈúÄË¶ÅÂä†‰∏äÈ¢ùÂ§ñÁöÑÂèÇÊï∞ÊâçËÉΩËøêË°å„ÄÇÂèØ‰ª•‰ΩøÁî®lx configËøõË°åÈÖçÁΩÆÔºölx config -- aria2-opts --event-poll=select
* axel: ÊµãËØïÈÄöËøá„ÄÇÊ≥®ÊÑèÂÆòÊñπÁâàÊú¨ÁöÑaxelÊúâ‰∏Ä‰∏™URLÈáçÂÆöÂêëÈïøÂ∫¶Ë∂ÖËøá255Ë¢´Êà™Êñ≠ÁöÑbugÔºåÈúÄË¶ÅÊâãÂä®‰øÆÊîπÊ∫ê‰ª£Á†ÅÁºñËØë„ÄÇËßÅissue #44.
* ÂÖ∂‰ªñÂ∑•ÂÖ∑ÔºåÊØîÂ¶ÇProZillaÔºåÊöÇÊó∂ÈÉΩ‰∏çÊîØÊåÅ„ÄÇÊúâÈúÄË¶ÅËØ∑ÂèØ‰ª•ÊàëÔºåÊàñËÄÖÁõ¥Êé•Êèê‰∫§‰∏Ä‰∏™issue„ÄÇ


ÂÖ∂‰ªñÂ∑•ÂÖ∑
--------

* lx hashÂèØ‰ª•Áî®‰∫éÊâãÂä®ËÆ°ÁÆóhash„ÄÇ

        lx hash --ed2k filename
        lx hash --info-hash torrent-file
        lx hash --verify-sha1 filename sha1
        lx hash --verify-bt filename torrent-file

* lixian_batch.pyÊòØÊàëËá™Â∑±Áî®ÁöÑ‰∏Ä‰∏™ÁÆÄÂçïÁöÑ‚ÄúÂ§ö‰ªªÂä°‚Äù‰∏ãËΩΩËÑöÊú¨„ÄÇÂÖ∂ÂÆûÂ∞±ÊòØÂ§ö‰∏™--inputÊñá‰ª∂ÔºåÊØè‰∏™Êñá‰ª∂ÈáåÂÆö‰πâÁöÑÈìæÊé•‰∏ãËΩΩÂà∞Êñá‰ª∂ÊâÄÂú®ÁöÑÁõÆÂΩïÈáå„ÄÇ

        python lixian_batch.py folder1/links.txt folder2/links.txt ...

Êó¢Áü•ÈóÆÈ¢ò
--------

1. --tool=asynÁöÑÊÄßËÉΩ‰∏çÊòØÂæàÂ•Ω„ÄÇËßÅ‚ÄúÊîØÊåÅÁöÑ‰∏ãËΩΩÂ∑•ÂÖ∑‚Äù‰∏ÄËäÇÈáåÁöÑËØ¥Êòé„ÄÇ
2. Êúâ‰∫õÊó∂ÂÄô‰ªªÂä°Ê∑ªÂä†Âà∞ÊúçÂä°Âô®‰∏äÔºå‰ΩÜÊòØÈ©¨‰∏äÂà∑Êñ∞Êãø‰∏çÂà∞Ëøô‰∏™Êï∞ÊçÆ„ÄÇËøôÂ∫îËØ•ÊòØÊúçÂä°Âô®ÂêåÊ≠•ÁöÑÈóÆÈ¢ò„ÄÇÊäÄÊúØ‰∏äÂèØ‰ª•Ëá™Âä®ÈáçÂà∑‰∏ÄÈÅçÔºå‰ΩÜÊòØÊöÇÊó∂Ê≤°ÊúâÂÅö„ÄÇÁî®Êà∑ÂèØ‰ª•Ëá™Â∑±ÈáçËØï‰∏ã„ÄÇ
3. bt‰∏ãËΩΩÁöÑÊ†°È™åÂ¶ÇÊûúÂ§±Ë¥•ÔºåÂèØËÉΩÈúÄË¶ÅÈáçÊñ∞‰∏ãËΩΩÊâÄÊúâÊñá‰ª∂„ÄÇ‰ªéÊäÄÊúØ‰∏äÊù•ËÆ≤ËøôÊòØÊ≤°ÊúâÂøÖË¶ÅÁöÑ„ÄÇ‰ΩÜÊòØ‰∏ÄÊù•Èáç‰∏ãÂá∫ÈîôÁöÑÁâáÊÆµÊúâ‰∫õÁπÅÁêêÔºå‰∫åÊù•ÊàëËá™Â∑±ÈÉΩ‰ªéÊù•Ê≤°ÈÅáÂà∞ËøábtÊ†°È™åÂ§±Ë¥•ÈúÄË¶ÅÈáç‰∏ãÁöÑÊÉÖÂÜµÔºåÊâÄ‰ª•ÊöÇÊó∂‰∏çËÄÉËôëÊîØÊåÅÁâáÊÆµ‰øÆÂ§ç„ÄÇÊõ¥Êñ∞ÔºöbtÊ†°È™åÂ§±Ë¥•‰∏ç‰ºöÈáç‰∏ã„ÄÇ
4. ÊúâÊó∂ÂÄôÂõ†‰∏∫Â∏êÂè∑ÂºÇÂ∏∏ÔºåÁôªÂΩïÈúÄË¶ÅÈ™åËØÅÁ†Å„ÄÇÁõÆÂâçËøò‰∏çÊîØÊåÅÈ™åËØÅÁ†Å„ÄÇ

‰ª•Âêé
----

ÂÖ∂ÂÆû‰∏ÄÂºÄÂßãÊòØËÄÉËôëÂÅö‰∏Ä‰∏™ÂèØ‰ª•Âú®Ë∑ØÁî±Âô®‰∏äËøêË°åÁöÑÁΩëÈ°µÁâàÁ¶ªÁ∫ø‰∏ãËΩΩÁÆ°ÁêÜÂô®ÁöÑ„ÄÇ‰ΩÜÊòØËøô‰∏™Â∑•‰ΩúÈáèÊØîÂëΩ‰ª§Ë°åÁâàÁöÑÂ§ßÂæàÂ§öÔºà‰∏çÊòØ‰∏Ä‰∏™Êï∞ÈáèÁ∫ßÁöÑÔºâÔºåÂú®ËµÑÊ∫êÊ∂àËÄóÂíåÂá∫ÈîôÊ¶ÇÁéá‰∏ä‰πüÂ§ßÂæàÂ§öÔºåËÄå‰∏îÂèØËÉΩËøòË¶ÅÊúâÊõ¥Â§öÁöÑ‰æùËµñÂ∫ìÔºåÂÆâË£ÖËµ∑Êù•‰πü‰∏çÊñπ‰æø„ÄÇÂΩìÁÑ∂‰∏ªË¶ÅËøòÊòØÁ≤æÂäõÂíåÈúÄÊ±ÇÁöÑÂéüÂõ†„ÄÇÁé∞Âú®ÁöÑËøô‰∏™ÂëΩ‰ª§Ë°åÊú¨ÂØπÊàëÊù•ËØ¥Â∑≤ÁªèÂ§üÁî®‰∫ÜÔºå‰πüÊå∫ÁÆÄÂçïÔºåÁü≠ÊúüÂ∞±‰∏çËÄÉËôëÂ¢ûÂä†ÁΩëÈ°µÁâà‰∫Ü„ÄÇ

Áõ∏ÂÖ≥È°πÁõÆ
--------

* [layerssss/lixian-portal](http://micy.in/lixian-portal/): Áªôiambus/xunlei-lixianÂÅöÁöÑ‰∏Ä‰∏™ÁÆÄÊ¥ÅÂÆûÁî®ÁöÑwebui

ÁâπÂà´ÊÑüË∞¢
--------

[Áæ§ÊôñÂÖ¨Âè∏](http://www.synology.com/)Âú®ÈÉ®ÂàÜ‰∫ßÂìÅ‰∏≠ÁªëÂÆö‰∫ÜËøÖÈõ∑Á¶ªÁ∫øËÑöÊú¨ÔºåÂπ∂‰∏îÊçêËµ†‰∫Ü‰ΩúËÄÖ‰∏ÄÂè∞[DS213+](http://www.synology.com/products/product.php?product_name=DS213%2B)‰Ωú‰∏∫ÂèçÈ¶à„ÄÇÂÜçÊ≠§Ë°®Á§∫ÊÑüË∞¢ÔºÅ

ËÆ∏ÂèØÂçèËÆÆ
--------

xunlei-lixian‰ΩøÁî®MITËÆ∏ÂèØÂçèËÆÆ„ÄÇ

Ê≠§ÊñáÊ°£Êú™ÂÆåÊàê„ÄÇ
--------------


