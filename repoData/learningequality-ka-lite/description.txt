### Detailed results

Test commands are in TEST_RESULTS.md 

Returned dictionary strings will be recorded here.

#### Generate real data

{'comment': None, 'post_execute_info': {1: {'FacilityUser.objects.count': 20, 'UserLog.objects.count': 0, 'VideoLog.objects.count': 2319, 'Facility.objects.count': 1, 'FacilityGroup.objects.count': 2, 'ExerciseLog.objects.count': 1271}}, 'head': 'ab622ef more i/o benchmarks + tweak base class.', 'individual_elapsed': {1: 2365.028766155243}, 'iterations': 1, 'fixture': None, 'average_elapsed': 2365.028766155243, 'uname': ('Linux', 'pi4', '3.6.11+', '#474 PREEMPT Thu Jun 13 17:14:42 BST 2013', 'armv6l', ''), 'branch': 'benchmark_v2', 'class': 'Generate_real_data'}

{'comment': None, 'post_execute_info': {1: {'FacilityUser.objects.count': 20, 'UserLog.objects.count': 0, 'VideoLog.objects.count': 1752, 'Facility.objects.count': 1, 'FacilityGroup.objects.count': 2, 'ExerciseLog.objects.count': 983}}, 'head': 'ab622ef more i/o benchmarks + tweak base class.', 'individual_elapsed': {1: 1037.5836029052734}, 'iterations': 1, 'fixture': None, 'average_elapsed': 1037.5836029052734, 'uname': ('Linux', 'xubuntu', '3.2.0-35-generic', '#55-Ubuntu SMP Wed Dec 5 17:42:16 UTC 2012', 'x86_64', 'x86_64'), 'branch': 'benchmark_v2', 'class': 'Generate_real_data'}


#### One thousand random reads

{'comment': None, 'post_execute_info': {1: {'total_records_accessed': 1000}}, 'head': 'ab622ef more i/o benchmarks + tweak base class.', 'individual_elapsed': {1: 46.34690499305725}, 'iterations': 1, 'fixture': None, 'average_elapsed': 46.34690499305725, 'uname': ('Linux', 'pi4', '3.6.11+', '#474 PREEMPT Thu Jun 13 17:14:42 BST 2013', 'armv6l', ''), 'branch': 'benchmark_v2', 'class': 'One_thousand_random_reads'}

{'comment': None, 'post_execute_info': {1: {'total_records_accessed': 1000}}, 'head': 'ab622ef more i/o benchmarks + tweak base class.', 'individual_elapsed': {1: 2.4416251182556152}, 'iterations': 1, 'fixture': None, 'average_elapsed': 2.4416251182556152, 'uname': ('Linux', 'xubuntu', '3.2.0-35-generic', '#55-Ubuntu SMP Wed Dec 5 17:42:16 UTC 2012', 'x86_64', 'x86_64'), 'branch': 'benchmark_v2', 'class': 'One_thousand_random_reads'}


#### One hundred random log updates

{'comment': None, 'post_execute_info': {1: {'total_records_updated': 100}, 2: {'total_records_updated': 100}, 3: {'total_records_updated': 100}, 4: {'total_records_updated': 100}, 5: {'total_records_updated': 100}}, 'head': 'ab622ef more i/o benchmarks + tweak base class.', 'individual_elapsed': {1: 65.08287596702576, 2: 55.4726881980896, 3: 52.48413300514221, 4: 52.294827938079834, 5: 52.56275415420532}, 'iterations': 5, 'fixture': None, 'average_elapsed': 55.579455852508545, 'uname': ('Linux', 'pi4', '3.6.11+', '#474 PREEMPT Thu Jun 13 17:14:42 BST 2013', 'armv6l', ''), 'branch': 'benchmark_v2', 'class': 'One_hundred_random_log_updates'}

{'comment': None, 'post_execute_info': {1: {'total_records_updated': 100}, 2: {'total_records_updated': 100}, 3: {'total_records_updated': 100}, 4: {'total_records_updated': 100}, 5: {'total_records_updated': 100}}, 'head': 'ab622ef more i/o benchmarks + tweak base class.', 'individual_elapsed': {1: 33.15039777755737, 2: 36.549885988235474, 3: 34.0961799621582, 4: 36.21947693824768, 5: 34.84787893295288}, 'iterations': 5, 'fixture': None, 'average_elapsed': 34.97276391983032, 'uname': ('Linux', 'xubuntu', '3.2.0-35-generic', '#55-Ubuntu SMP Wed Dec 5 17:42:16 UTC 2012', 'x86_64', 'x86_64'), 'branch': 'benchmark_v2', 'class': 'One_hundred_random_log_updates'}

#### One hundred random log updates single transaction

{'comment': None, 'post_execute_info': {1: {'total_records_updated': 100}, 2: {'total_records_updated': 100}, 3: {'total_records_updated': 100}, 4: {'total_records_updated': 100}, 5: {'total_records_updated': 100}}, 'head': '455046f new benchmark 100 updates in a single transaction', 'individual_elapsed': {1: 66.66215491294861, 2: 47.01352500915527, 3: 47.47680187225342, 4: 48.43577980995178, 5: 45.99620699882507}, 'iterations': 5, 'fixture': None, 'average_elapsed': 51.116893720626834, 'uname': ('Linux', 'pi4', '3.6.11+', '#474 PREEMPT Thu Jun 13 17:14:42 BST 2013', 'armv6l', ''), 'branch': 'benchmark_v2', 'class': 'One_hundred_random_log_updates_commit_success'}

{'comment': None, 'post_execute_info': {1: {'total_records_updated': 100}, 2: {'total_records_updated': 100}, 3: {'total_records_updated': 100}}, 'head': 'ba04ed7 Update TEST_RESULTS.md', 'individual_elapsed': {1: 16.341366052627563, 2: 17.70698094367981, 3: 22.9561870098114}, 'iterations': 3, 'fixture': None, 'average_elapsed': 19.001511335372925, 'uname': ('Linux', 'xubuntu', '3.2.0-35-generic', '#55-Ubuntu SMP Wed Dec 5 17:42:16 UTC 2012', 'x86_64', 'x86_64'), 'branch': 'benchmark_v2', 'class': 'One_hundred_random_log_updates_commit_success'}


#### Login Logout

test run 0 - no other activity

{'comment': 'Test some real database access', 'post_execute_info': {1: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 2: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 3: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 4: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 5: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 6: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 7: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 8: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 9: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 10: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}}, 'head': None, 'individual_elapsed': {1: 3.9283790588378906, 2: 1.9816088676452637, 3: 1.9439129829406738, 4: 1.6407861709594727, 5: 1.6155309677124023, 6: 2.1579930782318115, 7: 1.8491449356079102, 8: 1.9337060451507568, 9: 1.7211840152740479, 10: 1.6820051670074463}, 'iterations': 10, 'fixture': None, 'average_elapsed': 2.0454251289367678, 'uname': ('Linux', 'falchion', '2.6.35-32-generic', '#67-Ubuntu SMP Mon Mar 5 19:39:49 UTC 2012', 'x86_64', ''), 'branch': None, 'class': 'LoginLogout'}

Test run 1 - 1 competing instance of script

{'comment': 'Test some real database access', 'post_execute_info': {1: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 2: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 3: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 4: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 5: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 6: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 7: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 8: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 9: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 10: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}}, 'head': None, 'individual_elapsed': {1: 2.3833138942718506, 2: 1.80908203125, 3: 2.4737Test run 1 - 1 competing instance of script179279327393, 4: 1.3908870220184326, 5: 1.7464520931243896, 6: 1.9191491603851318, 7: 2.0755879878997803, 8: 1.6263370513916016, 9: 2.7420530319213867, 10: 2.2371718883514404}, 'iterations': 10, 'fixture': None, 'average_elapsed': 2.0403752088546754, 'uname': ('Linux', 'falchion', '2.6.35-32-generic', '#67-Ubuntu SMP Mon Mar 5 19:39:49 UTC 2012', 'x86_64', ''), 'branch': None, 'class': 'LoginLogout'}

Test run 2 - 2 competing instances of script

{'comment': 'Test some real database access', 'post_execute_info': {1: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 2: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 3: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 4: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 5: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 6: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 7: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 8: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 9: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 10: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}}, 'head': None, 'individual_elapsed': {1: 3.1472129821777344, 2: 3.0159509181976318, 3: 1.968271017074585, 4: 2.2522900104522705, 5: 2.6301989555358887, 6: 2.0632741451263428, 7: 3.129986047744751, 8: 2.0408589839935303, 9: 2.1210529804229736, 10: 3.1418869495391846}, 'iterations': 10, 'fixture': None, 'average_elapsed': 2.5510982990264894, 'uname': ('Linux', 'falchion', '2.6.35-32-generic', '#67-Ubuntu SMP Mon Mar 5 19:39:49 UTC 2012', 'x86_64', ''), 'branch': None, 'class': 'LoginLogout'}

Test run 3 - 3 competing instances of script

{'comment': 'Test some real database access', 'post_execute_info': {1: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 2: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 3: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 4: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 5: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 6: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 7: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 8: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 9: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 10: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}}, 'head': None, 'individual_elapsed': {1: 3.3522720336914062, 2: 1.9302079677581787, 3: 3.5367331504821777, 4: 1.3948009014129639, 5: 1.768632173538208, 6: 1.6104989051818848, 7: 1.8285181522369385, 8: 2.7737710475921631, 9: 2.2748270034790039, 10: 2.4296329021453857}, 'iterations': 10, 'fixture': None, 'average_elapsed': 2.2899894237518312, 'uname': ('Linux', 'falchion', '2.6.35-32-generic', '#67-Ubuntu SMP Mon Mar 5 19:39:49 UTC 2012', 'x86_64', ''), 'branch': None, 'class': 'LoginLogout'}

Test run 4 - 4 competing instances of script

{'comment': 'Test some real database access', 'post_execute_info': {1: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 2: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 3: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 4: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 5: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 6: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 7: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 8: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 9: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 10: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}}, 'head': None, 'individual_elapsed': {1: 4.6757709980010986, 2: 3.7118079662322998, 3: 4.1636991500854492, 4: 3.9102659225463867, 5: 2.3376250267028809, 6: 4.4685778617858887, 7: 3.7475049495697021, 8: 3.1629638671875, 9: 3.5281519889831543, 10: 3.1824429035186768}, 'iterations': 10, 'fixture': None, 'average_elapsed': 3.6888810634613036, 'uname': ('Linux', 'falchion', '2.6.35-32-generic', '#67-Ubuntu SMP Mon Mar 5 19:39:49 UTC 2012', 'x86_64', ''), 'branch': None, 'class': 'LoginLogout'}

Test run 5 - 5 competing instances of script

{'comment': 'Test some real database access', 'post_execute_info': {1: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 2: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 3: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 4: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 5: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 6: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 7: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 8: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 9: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 10: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}}, 'head': None, 'individual_elapsed': {1: 8.4472489356994629, 2: 3.9398150444030762, 3: 3.9107458591461182, 4: 4.9866688251495361, 5: 3.909498929977417, 6: 3.0000090599060059, 7: 1.963263988494873, 8: 3.4002439975738525, 9: 2.8266029357910156, 10: 4.2424020767211914}, 'iterations': 10, 'fixture': None, 'average_elapsed': 4.0626499652862549, 'uname': ('Linux', 'falchion', '2.6.35-32-generic', '#67-Ubuntu SMP Mon Mar 5 19:39:49 UTC 2012', 'x86_64', ''), 'branch': None, 'class': 'LoginLogout'}

Test run 6 - 6 competing instances of script

{'comment': 'Test some real database access', 'post_execute_info': {1: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 2: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 3: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 4: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 5: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 6: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 7: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 8: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 9: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 10: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}}, 'head': None, 'individual_elapsed': {1: 7.8622350692749023, 2: 5.8305268287658691, 3: 5.1871647834777832, 4: 5.1469511985778809, 5: 5.0346460342407227, 6: 4.0691859722137451, 7: 5.0484788417816162, 8: 6.6726231575012207, 9: 6.3001329898834229, 10: 3.2287518978118896}, 'iterations': 10, 'fixture': None, 'average_elapsed': 5.4380696773529049, 'uname': ('Linux', 'falchion', '2.6.35-32-generic', '#67-Ubuntu SMP Mon Mar 5 19:39:49 UTC 2012', 'x86_64', ''), 'branch': None, 'class': 'LoginLogout'}

Test run 7 - 7 competing instances of script

{'comment': 'Test some real database access', 'post_execute_info': {1: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 2: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 3: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 4: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 5: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 6: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 7: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 8: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 9: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 10: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}}, 'head': None, 'individual_elapsed': {1: 7.7776288986206055, 2: 5.8861908912658691, 3: 8.2795109748840332, 4: 6.9197299480438232, 5: 5.3821620941162109, 6: 5.4506149291992188, 7: 6.1159849166870117, 8: 6.8932499885559082, 9: 5.8555128574371338, 10: 6.6211650371551514}, 'iterations': 10, 'fixture': None, 'average_elapsed': 6.5181750535964964, 'uname': ('Linux', 'falchion', '2.6.35-32-generic', '#67-Ubuntu SMP Mon Mar 5 19:39:49 UTC 2012', 'x86_64', ''), 'branch': None, 'class': 'LoginLogout'}

Test run 8 - 8 competing instances of script (Some reported crashes on competitors )

{'comment': 'Test some real database access', 'post_execute_info': {1: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 2: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 3: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 4: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 5: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 6: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 7: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 8: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 9: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 10: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}}, 'head': None, 'individual_elapsed': {1: 13.534646034240723, 2: 9.7456450462341309, 3: 8.5536699295043945, 4: 10.127279996871948, 5: 9.2767069339752197, 6: 8.6423840522766113, 7: 8.7605910301208496, 8: 6.4418971538543701, 9: 7.3972179889678955, 10: 10.205724000930786}, 'iterations': 10, 'fixture': None, 'average_elapsed': 9.2685762166976922, 'uname': ('Linux', 'falchion', '2.6.35-32-generic', '#67-Ubuntu SMP Mon Mar 5 19:39:49 UTC 2012', 'x86_64', ''), 'branch': None, 'class': 'LoginLogout'}

Test run 9 - 9 competing instances of script

{'comment': 'Test some real database access', 'post_execute_info': {1: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 2: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 3: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 4: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 5: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 6: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 7: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 8: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 9: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 10: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}}, 'head': None, 'individual_elapsed': {1: 11.601991891860962, 2: 10.201617956161499, 3: 10.836632013320923, 4: 10.158169031143188, 5: 10.454422950744629, 6: 12.805476188659668, 7: 11.536424875259399, 8: 11.441789150238037, 9: 9.4143059253692627, 10: 9.8865599632263184}, 'iterations': 10, 'fixture': None, 'average_elapsed': 10.833738994598388, 'uname': ('Linux', 'falchion', '2.6.35-32-generic', '#67-Ubuntu SMP Mon Mar 5 19:39:49 UTC 2012', 'x86_64', ''), 'branch': None, 'class': 'LoginLogout'}

Test run 10 - 14 competing instances of script (Some reported crashes on competitors )

{'comment': 'Test some real database access', 'post_execute_info': {1: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 2: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 3: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 4: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 5: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 6: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 7: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 8: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 9: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}, 10: {'url': 'http://192.168.1.24:8008', 'username': 'stevewall'}}, 'head': None, 'individual_elapsed': {1: 24.888746023178101, 2: 17.025134086608887, 3: 14.228573083877563, 4: 16.166324138641357, 5: 15.072280883789062, 6: 16.615615129470825, 7: 15.852154016494751, 8: 13.984436988830566, 9: 14.732208013534546, 10: 12.938493967056274}, 'iterations': 10, 'fixture': None, 'average_elapsed': 16.150396633148194, 'uname': ('Linux', 'falchion', '2.6.35-32-generic', '#67-Ubuntu SMP Mon Mar 5 19:39:49 UTC 2012', 'x86_64', ''), 'branch': None, 'class': 'LoginLogout'}



## Raspberry Pi performance tuning

*Initial version 1 by Gimick*

Performance of the Raspberry Pi server can be significantly improved with these configuration changes:


**Changes to local_settings.py**

```
echo "#NGINX is on port 8008 and expects ka-lite on port 7007" >> ~/ka-lite/kalite/local_settings.py
echo "PRODUCTION_PORT=7007" >> ~/ka-lite/kalite/local_settings.py
echo "" >> ~/ka-lite/kalite/local_settings.py
echo "#Persist ka-lite django page cache between reboots" >> ~/ka-lite/kalite/local_settings.py
echo "CACHE_LOCATION = '/var/tmp/kalite/cache'" >> ~/ka-lite/kalite/local_settings.py
echo "" >> ~/ka-lite/kalite/local_settings.py
echo "#Optimise cherrypy server for Raspberry Pi" >> ~/ka-lite/kalite/local_settings.py
echo "CHERRYPY_THREAD_COUNT = 20" >> ~/ka-lite/kalite/local_settings.py
echo "" >> ~/ka-lite/kalite/local_settings.py

```

**Use NGINX as a proxy for static files**

```

sudo apt-get install nginx
sudo rm /etc/nginx/sites-enabled/default
sudo touch /etc/nginx/sites-enabled/kalite
sudo sh -c 'ka-lite/kalite/manage.py nginxconfig > /etc/nginx/sites-enabled/kalite'
sudo rm /etc/nginx/nginx.conf
sudo nano /etc/nginx/nginx.conf 

```

paste this configuration into the nginx.conf file

```
user www-data;
pid /var/run/nginx.pid;

###
# we have 1 cpu so only need 1 worker process
worker_processes 1;

events {
	###
	# good overall speed on RPi with this setting
	worker_connections 1536;

	###
	# Activate the optimised polling for linux 
	use epoll;

	###
	# Keep multi_accept off - RPi+kalite is slowed if "on"
	multi_accept off;
}

http {
	###
	# RPi+kalite "off" is a faster with sendfile "off"
	sendfile off;
	tcp_nopush off;
	
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;
	
	###
	# Speed up landing page by caching open file descriptors
	open_file_cache max=2048;
        
	##
	# Logging Settings
	# don't log, we don't need to know normally
	access_log off;
	error_log off;

	##
	# Gzip Settings
	gzip on;
	gzip_disable "msie6";

	##
	# Virtual Host Configs
	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;
}

```

**Finally, reboot**

```
sudo reboot

```

## KA-LITE Raspberry Pi benchmark

*Initial version 2 by Gimick*

Provides initial benchmarks for KA-Lite with a Raspberry Pi which is acting as a distributed(Local) server.

Tests and Results are in [TEST_RESULTS.md](/kalite/benchmark/TEST_RESULTS.md)  
Raw data from testing is in [DETAILED_RESULTS.md](/kalite/benchmark/DETAILED_RESULTS.md)

**Hardware** 

* Raspberry Pi 512mb model B, UK board (blue audio jack)
* sandisk 16mb sd card class 4 (blue)
* Realtek RTL8188CUS wifi adaptor TP-LINK model TL-WN725N (this card is not ideal but it is all I have just now - wipi is the recommended adaptor)

**Software**
* Raspbian (debian) fully updated
* Python 2.7.3
* ka-lite (benchmark_v3 branch)


**System setup**

```
#initialise card
sudo dd bs=1M if=put_raspian_image_name-here.img of=/dev/my_sd_card_device_goes_here
```
**Do not** put the wifi adaptor into the Raspberry Pi yet

Raspberry Pi setup is done with a wired internet connection, using ssh to connect.

* Boot the Raspberry Pi

```
sudo raspi-config  --  choose the following options *[Expand Filesystem, Memory Split=16, Update, Hostname]*
```
* Reboot the Raspberry Pi

```
sudo apt-get update
sudo apt-get upgrade
sudo apt-get install python-m2crypto
sudo apt-get install git-core
sudo apt-get autoremove

sudo shutdown -h now
```

* Switch the computer power off
* put the wireless card in
* switch on

```
cd ~
git clone https://github.com/learningequality/ka-lite-pi-scripts.git
cd ka-lite-pi-scripts/
sudo ./configure.sh    #ignore the error "hostapdSegmentation fault"
sudo ./use_edimax.sh
sudo python ./configure_network_interfaces.py
#
sudo insserv hostapd  #needed to start hostapd correctly on reboot
```
To autostart the wireless network on reboot, edit /etc/network/interfaces and add this autostart command:
```
...
auto wlan0
iface wlan0 inet static
...
```
now shutdown

```
sudo shutdown -h now
```

* Switch power off
* wait 10 seconds
* and switch on again

**Install ka-lite**

```
cd ~
git clone https://github.com/gimick/ka-lite.git
cd ka-lite/
git checkout benchmark_v3

#Run the installer, remember to select autostart Y during the install process
./install.sh

sudo reboot
```

**Verify the installation**

* Using a wireless device, attempt to connect to network “kalite”
* From the browser, navigate to 1.1.1.1:8008
* KA-lite home page should be shown

NOTE: On the server, use "ifconfig" to confirm that the wireless device (wlan0) has an IP address.
If it does not have an IP address try adding an "auto wlan0" into /etc/network/interfaces.

**Optimize for performance**

Implement the Raspberry Pi optimizations [PERFORMANCE.md](/kalite/benchmark/PERFORMANCE.md)

## Benchmark tests and results

### I/O performance benchmarks

#### Generate real data

This benchmark empties the database and then runs generaterealdata.  This benchmark measures I/O insert performance, and, to a lesser extent computation power.

* RaspberryPi benchmark result: **1.5 records per second**
* Intel E5500/Sata/3gb ram comparison: **2.7 records per second**

```
./stop.sh
./kalite/manage.py shell
>>> import benchmark.benchmark_test_cases as btc
>>> btc.GenerateRealData().execute()
```

#### One thousand random reads

Using the database created by *Generate real data*, tests data reading speed from the VideoLog and ExerciseLog models.

This benchmark measures SELECT speed and will probably use cached reads if enough memory is available.

* RaspberryPi benchmark result: **21.6 records per second**
* Intel E5500/Sata/3gb ram comparison: **410 records per second**

```
$./stop.sh
$./kalite/manage.py shell
>>> import benchmark.benchmark_test_cases as btc
>>> btc.OneThousandRandomReads().execute()
```

#### One hundred random log updates

Using the database created by *Generate real data*, this benchmark tests updating the VideoLog and ExerciseLog models.

This benchmark principally measures UPDATE speed and will normally generate physical I/O

* RaspberryPi benchmark result: **1.8 records per second**
* Intel E5500/Sata/3gb ram comparison: **2.9 records per second**

```
$./stop.sh
$./kalite/manage.py shell
>>> import benchmark.benchmark_test_cases as btc
>>> btc.OneHundredRandomLogUpdates().execute(iterations=5)
```

#### One hundred random log updates commit success

Same as above, but all one hundred updates are done in a sigle transaction
and should be quicker 

* RaspberryPi benchmark result: **2.0 records per second**
* Intel E5500/Sata/3gb ram comparison: **5.3 records per second**

```
$./stop.sh
$./kalite/manage.py shell
>>> import benchmark.benchmark_test_cases as btc
>>> btc.OneHundredRandomLogUpdatesSingleTransaction().execute(iterations=5)


```

#### Login Logout

This benchmark tests the login performance of a raspberry pi as a distributed server.  The test measures time taken
for a student to get from the landing page, through login and to get to the home page.

Additional competing login tasks are added to measure how the server responds to increasing login requests.


This benchmark has high CPU usage - expect the Raspberry Pi to be 100% busy with more than 3 competing logins.

* RaspberryPi benchmark result: [number of competing logins, time taken to login]*

**0 competing  2.05 seconds**

**1 competing 	2.04 seconds**

**2 competing 	2.55 seconds**

**3 competing 	2.29 seconds**

**4 competing 	3.69 seconds**

**5 competing 	4.06 seconds**

**6 competing 	5.44 seconds**

**7 competing 	6.52 seconds**

**8 competing 	9.27 seconds**

**9 competing 	10.83 seconds**

...


**14 competing 	16.15 seconds**


The raspberry Pi is acting as distributed server; another desktop machine runs **only one** script to test the timings.
Several additional desktops run the same test continuously.  Each desktop can probably run 5 to 7 concurrent
scripts, but the scripts will become unstable if too much load is applied.  The test is re-run multiple times,
each time an additional script was started to progressively build up the load on the raspberry Pi server.

**Configuration:** 
Raspberry Pi distributed server with a student login created
Raspberry Pi wired into wireless router
3x desktops, wireless connected to router, and loaded with ka-lite (server NOT running on these machines)

**Test:** 
1x desktop begins by running the login/logout script.  This desktop will always run one instance of this script.

```
$ ./kalite/manage.py shell
>>> import benchmark.benchmark_test_cases as btc
>>> btc.LoginLogout(url="http://192.168.x.x:8008", username="foo", password="bar").execute(iterations=5)

```

On a separate desktop machine, startup a competing login (using the same script).  This time, set the iterations
to say 1000 so the process runs continuously.  Note: the Selenium script may give a timeout to the console once 
the desktop becomes stressed.  Just restart these failed processes.  It is important to monitor the competing 
processes because the benchmark will not be valid if some of the competing load has timed-out.


```
$ ./kalite/manage.py shell
>>> import benchmark.benchmark_test_cases as btc
>>> btc.LoginLogout(url="http://192.168.x.x:8008", username="foo", password="bar").execute(iterations=1000)

```

Expect a typical desktop to support about 5-10 competing logins, but with the occassional timeout.




___Setting up a Spanish-language demo___
* To the file `ka-lite/kalite/local_settings.py`, add the following lines:
    * `CENTRAL_SERVER_HOST = "kalite.learningequality.org:7007"`
    * `SECURESYNC_PROTOCOL = "http"`
    * `CACHE_TIME = 0`
* Run `scrape_videos -l es` to get all the dubbed videos
* Run `scrape_exercises -l es` to get all the localized exercises.
* Install the spanish language pack
    * Start the server
    * Log in as the admin user
    * Go to Updates, choose "Manage" language packs.
    * In the dropdown, select spanish, and click "get language pack"
* Select spanish as the default language

DONE!!!

___Want to have more language packs available?___

1. Log into the central server
2. In the `ka-lite-develop/kalite` folder, run `./manage.py update_language_packs -l [lang_code]
    * Useful language codes: de (German), ar (Arabic), zh-CN (simplified Chinese), pt-BR (brazilian portuguese), en (english)
3. Go back to your distributed server, and refresh--you'll find the language packs there.

___New commands___
* `scrape_videos -l es` - [run on distributed server] download all known dubbed videos in spanish, from youtube, and save as mp4
    * NOTE: Only the following languages are supported: `da`, `he`, `pt-BR`, `tr`, `es`
* `scrape_exercises -l es` - [run on distributed server] download all exercises in spanish, from khan academy, and put them in the proper place for use.


___Download Videos___

Using this to download: http://rg3.github.io/youtube-dl/index.html

This spreadsheet (or other list, wink-wink) to pick the videos: https://docs.google.com/a/learningequality.org/spreadsheet/ccc?key=0AhvqOn88FUVedEM5U3drY3E1MENfeWlLMVBnbnczT3c#gid=13

Sample command: youtube-dl --id -f mp4 www.youtube.com/watch?v=Pytw-oTpUNk
Downloaded:  حل المعادلات التربيعية بالتحليل إلى العوامل-Pytw-oTpUNk.mp4 for me :)
rename the Pytw-oTpUNk.mp4
DONE!

___Download Localized Exercises___

1. Download https://es.khanacademy.org/khan-exercises/exercises/vertical_angles.html?lang=es
2. Put into the `ka-lite/kalite/static/js/khan-exercises/exercises/` folder to replace the english version
3. Repeat for all files in the directory!

[note: this works!]

How to contribute
===

Firstly, thank you for being willing to offer your time to contribute to the KA Lite efforts! The project is run by volunteers dedicated to helping make educational materials more accessible to those in need, and every contribution makes a difference. Feel free to follow the instructions below to start playing with the codebase, but you'll probably want to [contact us](http://jamiealexandre.com/contact/) to figure out what would be good for you to work on.

### Getting started

1. Fork the main KA Lite repository (signing up for a GitHub account first, if needed).
2. Follow the [installation instructions](../INSTALL.md), except clone your own repo instead of the main repo:
(e.g. `git clone --recursive git@github.com:YOURACCOUNTNAME/ka-lite.git`)
3. Switch to the `develop` branch, which is where any commits you make should go: `git checkout develop` (we are roughly following the [successful git branching model](http://nvie.com/posts/a-successful-git-branching-model/) conventions)
4. In the `ka-lite/kalite` directory, add a file called `local_settings.py`, and put `DEBUG = True` in it.
5. Open two terminal/shell windows, in the `ka-lite/kalite` directory. In one, run `python manage.py runserver` (to start the Django development server), and in the other, run `python manage.py cronserver 5` (to run the background processing script, which does things like download requested videos).

Guidelines
===

### Priority on efficiency

KA Lite is designed to function reasonably well on low power devices (such as a Raspberry Pi), meaning we want to avoid doing anything computationally intensive. Also, for the cross-device syncing operations, connection bandwidth and speed are often expensive and slow, so we should always try to minimize the amount of data needing to be transferred.

### CSS

The file `khan-site.css` is from khan-exercises, and we don't want to modify it, in case we want to update it from there in the future. Instead, most CSS styling goes in khan-lite.css, and will override any styles defined in `khan-site.css`. For styles that will only ever be used on a single page, they can be defined in a `<style>` block inside `{% block headcss %}`. Avoid using inline (tag attribute) styles at all costs.

### Python dependencies

Because we want an extremely low friction cross-platform installation process, we do not want to depend on any Python libraries that are not pure Python. Then, the package itself can be fully included in the download package without worrying about what platform it was compiled for.

### Python

We roughly try to follow the [PEP8 conventions](http://www.python.org/dev/peps/pep-0008/), with a few exceptions/clarifications:

* Limit line length to 119 characters (PEP8 limits lines to 79 characters, but this can lead to a lot of wrapping)
* We're somewhat flexible in where we put empty lines; the goal is to use empty lines as punctuation to separate semantic units.

### Python 2.6 restrictions

KA Lite lists Python 2.6 or 2.7 as a dependency, and thus any code written needs to be backwards compatible with Python 2.6, meaning:

1. Do not use dictionary comprehensions (e.g. `{num, num**2 for num in range(100)}`).
2. Do not use the `OrderedDict` data structure.
3. Do not use the `argparse` module.
4. Do not use the `viewkeys()`, `viewvalues()`, and `viewitems()` methods of the dict class.
5. Do not define set literals using braces (e.g. `{4,5,6,7}`). Instead, use the set constructor (e.g. `set([4,5,6,7])`).

### Python package dependencies

We want to be able to include all required Python packages as part of the main repository, which means they must be pure Python (no compiled C modules, etc) and cross-platform (i.e., work on both Linux and Windows).

Tools
===

### JavaScript

You can analyse your JavaScript code with [JSHint](http://jshint.com/) using [Grunt](http://gruntjs.com/).

Make sure that you have installed [npm](https://www.npmjs.org/) (it is bundled with [Node.js](http://nodejs.org/)).

After [installing the Grunt CLI](http://gruntjs.com/getting-started#installing-the-cli) with `npm install -g grunt-cli` and the dependencies with `npm install` in the project root directory, you can run the jshint task with `grunt jshint`.


# Guide to front end development

## Our stack

The current stack uses bootstrap as a front end framework, LESS for the stylesheets (compiled to CSS with grunt.js). Don't worry, we'll explain everything down here.

### Bootstrap

[Bootstrap](http://getbootstrap.com/2.3.2/) is a front end framework that has a [grid system](http://getbootstrap.com/2.3.2/scaffolding.html) and multiple [CSS elements](http://getbootstrap.com/2.3.2/base-css.html)(buttons, forms...) and [advanced components](http://getbootstrap.com/2.3.2/components.html). We'll try to reuse these elements as much as possible. They have already been optimized to run on all the browsers.


### LESS

We're currently using [LESS](http://lesscss.org/) as a CSS preprocessor. LESS is a stylesheet languages that allows us to use variables, mixins (functions that process variables) and operations.
The [documentation](http://lesscss.org/) is short and gives really great examples on these different concepts.

The structure of the code is the following:

- `style.less` includes:
	- `fonts.less`: Font dependencies and declarations.
	- `mixins.less`: Functions in less to simplify the development (button generator...)
	- `variables.less`: Colors of the layout and other variables 
	- `style_with_bootstrap.less`: Stylesheet of the whole design (except landing page). It contains a lot of reusable parts like buttons, lists and tables.
	- `landing_page.less`: Stylesheet of the landing page


`style_with_bootstrap.less` is the page where you put your changes. `mixins.less` and `variables.less` are helpers to make the code cleaner and create reusable part(Don't Repeat Yourself).

## Workflow

### Development

Now that you understand all the individual components of the stack let's dive into the workflow.

1. The first things to do is to put the `local_settings.py` in debug mode (`DEBUG=True`). In this mode, the browser (client-side with less.js) will compile the LESS files into CSS. 

2. Edit the the HTML/LESS files. You can directly edit the less files. Indeed, I have added `less.watch();` in the base.html, the browser will reload the page each time you save your less files(Oh yeah!).

3. When you're happy with your changes, don't forget to check if existing colors (check the `variable.less` file) or parts (buttons, lists, tables...) exit. If you're using a method/variable more than 2 times, please add a variable or a mixin.

```
//variable.less

@pink: #ff69b4;
```
```
//mixins.less

.content-tree-background (@url) {
  margin-top: 2px;
  background: url(@url) no-repeat;
}
```

When you're using borders, transparency and gradients, look at `less/bootstrap/mixins.less` file. This is already coded to work with all the browsers.

```
//style_with_bootstrap.less

.round-border{
	.border-radius(10px);
}
```


### Production with Grunt.js

[Grunt.js](http://gruntjs.com/) is a tool to run tasks on the terminal. The current default task includes compiling the less files to css and compressing them. 

#### How to install

First, install the [Node.js package manager (npm)](http://nodejs.org/download/).


Then, you have to run these commands in the directory where package.json is.

```
npm install
npm install -g grunt-cli
```

#### Compile with grunt


```
grunt #Compiles everything
grunt less:compile #Compiles style.less
grunt less:bootstrap #Compiles bootstrap.less+responsive.less
```

The CSS is compiled in the `static/css` folder. If you want to make those changes available to production, you need to commit them.

# KA Lite i18n Documentation
## Everything you ever wanted to know about KA Lite internationalization 

In the sections below, you will find information on how to create po files, which are translation files that allow swapping one language with another. These files can be uploaded to the web, translated by volunteers, and then incorporated back into the KA Lite codebase. We currently host our translation project here: http://crowdin.net/project/ka-lite. 

### Testing Language Pack Support
Language pack support requires an interaction between the central server (which creates and caches the language packs) and the distributed server (which downloads them from the central server and installs them).

In order to test language pack support, you will need to install both a test central server and test distributed server (see the TESTBED.md documentation for setting them up).  After setting up each, the following steps are needed:

#### Central server:
1. Run the 	`update_language_packs` command.  Specify the `-l` option to update a single language (most efficient).  Good test languages include:
    * `./manage.py update_language_packs -l zh-CN` will create a Chinese language pack with many subtitles and some interface translations, and will test a fuller range of characters.
    * `./manage.py update_language_packs -l aa` will create an Afar language pack with 8 subtitles and no interface translations.
    * `./manage.py update_language_packs -l ur-PK` will create an Urdu language pack with no subtitles and some interface translations.

#### Distributed server
1. Run the `languagepackdownload` command.  Use the `-l` option to specify a language that you set up on your central server above.
2. Try downloading through the `update_languages` interface, accessible via the "Update" link, then clicking the "Install more languages" option.


### Wrapping Strings
#### Hot links: how to wrap strings in Django templates and views 
How to wrap strings in Django:
	
1. [templates](https://docs.djangoproject.com/en/1.0/topics/i18n/#in-template-code)

2. [view code](https://docs.djangoproject.com/en/1.0/topics/i18n/#how-to-specify-translation-strings)
	
3. [Javascript](https://docs.djangoproject.com/en/1.0/topics/i18n/#translations-and-javascript). We import the JavaScript translation dictionary into our base template, so no need to worry about importing. In your js code, simple wrap strings in a gettext function like the following example:
	`document.write(gettext('this is to be translated'));`

#### <a id="testing-i18n"></a>Creating and Testing Interface Translations
Note: many questions about i18n with Django can be answered via the [Django i18n Docs](https://docs.djangoproject.com/en/dev/topics/i18n/translation/). Also, check out the i18n management commands for shortcuts on following the steps below. 

1. First, make sure you have the [GNU gettext toolset](https://www.gnu.org/software/gettext/) installed. If you have any trouble, try Googling "[How to install GNU gettext toolset for [insert-operating-system-here]](http://lmgtfy.com/?q=how+do+I+install+GNU+gettext+toolset+on+Mac)"

2. Next, navigate to the project root directory (e.g. `[local-path-to-ka-lite]/ka-lite/`) note: `ka-lite` is the default if you don't specify a directory when you clone

3. Run the `makemessages` command to generate po files for the languages you want. Read the docs linked above for more info on how this process works. You'll want to ignore the bundled python packages, because they've already been translated and are *big*. It's also a good idea to add the `--no-obsolete` flag to remove outdated strings. Example command: `python kalite/manage.py makemessages -l en --ignore=python-packages/* --no-obsolete` to generate po files for English.  
	- If you follow the example, you should see `processing language en`. This will create a `django.po` file in the `locale/en/LC_MESSAGES` directory.
	- **get an error?**: check out the [common error messages and their solutions](#errors).

4. Run the `makemessages` command again to generate po files for javascript. It's a good idea to ignore any admin static files, as django has taken care of the i18n already. Example: `python kalite/manage.py makemessages -d djangojs -l en --ignore=kalite/static/admin/js/* --ignore=python-packages/* --no-obsolete`.
	- If you follow the example, you should see `processing language en`. This will create a `djangojs.po` file in the `locale/en/LC_MESSAGES` directory.
	- **get an error?**: check out the [common error messages and their solutions](#errors).

5. Inspect the two files you have generated. You should see a bunch of lines like:


	> `#: kalite/central/views.py:85`

	> `msgid "Account administration"`

	> `msgstr ""`


	> **Explanation**: each msgid string is a string in the KA Lite codebase. Each msgstr is where the translation for this language goes. Since this is an English po file and KA Lite is in English, no translation is necessary, but for testing, pick a string to translate into something else. 


6. Find `msgid "Admin"` and translate it to something fun: e.g. `msgstr "What does the fox say?"`

7. Now that we have updated our translations, we need to compile the po files into a mo file so that it can be rendered by Django. To do that, we use the `compilemessages` command. Example: `python kalite/manage.py compilemessages -l en`. 
	- You should see:
		- `processing file django.po in /Users/dylan/Hacking/leq-fork/ka-lite/locale/en/LC_MESSAGES`
		- `processing file djangojs.po in /Users/dylan/Hacking/leq-fork/ka-lite/locale/en/LC_MESSAGES`
	- This command compiles each po file in the `en` language directory and if you've been following along, should have created two new files: `django.mo` and `djangojs.mo`. 

8. Now, restart your local server (`python manage.py runserver`) and check out your translations! Note: Not seeing your translations? It *could* be a caching problem! Try opening in a different browser, clearing your cache, or turning caching off. 

##### <a id="errors"></a> Common Error Messages

- Error: This script should be run from the Django SVN tree or your project or app tree. If you did indeed run it from the SVN checkout or your project or application, maybe you are just missing the conf/locale (in the django tree) or locale (for project and application) directory? It is not created automatically, you have to create it by hand if you want to enable i18n for your project or application. 
	- **Solution**: You need to create an empty `locale` directory in the project root `path-to-kalite/ka-lite/locale/`. After creating, try running `makemessages` again. 

- python: can't open file 'manage.py': [Errno 2] No such file or directory. 
	- **Solution**: ensure that when you are running `manage.py` commands from the project root, you specify where to find `manage.py`, e.g. `python kalite/manage.py [command]`


#### <a id="finding-strings"></a>Finding unwrapped strings and wrapping them
*This should be done periodically. As the codebase changes, it is likely that user-facing strings will be added, and these will need to wrapped in the appropriate translation tags so that they can appear in our po template files and be translated.*

1. The easiest way to identify unwrapped strings in the codebase is to translate the interface into something wacky like asterisks, and see what's left in plain english. Then you just find that spot in the code, wrap it in translation tags, and move on with your day! Therefore, the first step in this process is following steps 1-5 in the above section [Creating and Testing Interface Translations](#testing-i18n)

2. Once you have fresh new po files, you basically just replace step 6 above with the following: translate every single string into something obviously non-English. For now you could just use a text editor to select all the msgstrs and fill them in with '\*\*\*\*\*'. 

3. Once some msgstrs have been filled in, follow steps 7-8 in the above section [Creating and Testing Interface Translations](#testing-i18n) to compile the translations and view them. 

4. Walk through all of the views in the interface. When you see something in English, you know that string needs to be wrapped. Follow the instructions in the [Django i18n Docs](https://docs.djangoproject.com/en/dev/topics/i18n/translation/) to wrap the offending string in the correct translation tags. You can use examples in other parts of the codebase as well for help. 

	**Important**: When running `compilemessages` you will probably run into the error: `a format specification for argument 'variable_name' doesn't exist in 'msgstr'`. Check out the line it specifies in the file. You'll probably see something like `'%(variable_name)s'` in msgid. This is how variables appear. You simply need to copy and paste this variable name (e.g. `'%(variable_name)s'`) into the asterisk filled msgstr. There shouldn't be too many, so doing it manually isn't a killer. E.g. `msgstr "***** '%(facility_name)s'"`. This is just how Django ensures that variables get carried over through the translation process. 


5. Once you think you've found everything, repeat the steps in this section. See if you find anything else. Rinse and repeat! 

6. Once you're done testing, be sure to delete the po and mo files you have created. Translations are not overwritten by creating running the makemessages command, so you will want clear the tests you created so that people using KA Lite in English won't just see a bunch of asterisks :). 


#### <a id="management"></a> How to use i18n Management Commands
[Django management command](https://docs.djangoproject.com/en/dev/howto/custom-management-commands/) are basically tools you can use from the command line to automate processes. We use them in our code for lots of things: handling video and subtitle downloads for instance. You've used management commands already if you've followed along in the previous sections. `makemessages` and `compilemessages` are built-in Django commands for i18n. You can also write custom management commands. For i18n we have two so far.

##### Command: `update_po`

- This command is useful for automating some of the processes described below, including generating po files and compiling translations. You can run `python manage.py update_po -h` to see available options.  

##### Command: `generate_dubbed_video_mappings`

- This command creates a dictionary that maps english videos to dubbed video ids, using the manually curated online Google Docs spreadsheet provided by Khan Academy's i18n team.

##### Command: `cache_translations`

- This command pulls down the latest translations from CrowdIn, obtains meta-data on them, and zips everything up into a language pack that can be downloaded by KA Lite installations around the world. 


#### <a id="resources"></a> i18n resources

Here are a few commonly requested resources, for judging overall KA Lite support for different languages.

- [Latest list of Khan Academy dubbed videos](https://docs.google.com/a/learningequality.org/spreadsheet/ccc?key=0AhvqOn88FUVedEM5U3drY3E1MENfeWlLMVBnbnczT3c#gid=13)
- [Latest status of KA Lite interface translations](http://crowdin.net/project/ka-lite)
- [Latest status of Khan Academy exercise translations](http://translate.khanacademy.org/)
- [Latest counts of video subtitles, per language](http://kalite.learningequality.org/api/subtitles/counts/) 


###### Help:
If anything is unclear, email Dylan Barth: dylan@learningequality.org with questions. He's happy to help. 


Optional: Install and configure Apache/mod_wsgi
===

KA Lite includes a web server implemented in pure Python for serving the website (see the [main installation docs for instructions](../INSTALL.md) on getting it set up), capable of handling hundreds of simultaneous users while using very little memory. However, if for some reason you wish to serve the website through Apache and mod_wsgi, here are some useful tips.

You will need to install:
* [Apache server](http://httpd.apache.org/) 2.0 or greater (1.3 may also work, but is not tested)
* The [mod_wsgi](http://code.google.com/p/modwsgi/) module for Apache

To get the recommended virtual host settings, run `python manage.py apacheconfig` and copy the output into your Apache config.

### Linux

Most versions of Linux should have Apache available for installation through their package management systems. In Ubuntu/Debian, you should be able to install Apache and mod_wsgi via:

`sudo apt-get install apache2 libapache2-mod-wsgi`

Otherwise, view instructions and installation packages [for other Linux distributions](http://code.google.com/p/modwsgi/wiki/InstallationOnLinux).

### Windows

Install and configure Apache 2.0, 2.2, or 2.4 by following the instructions [here](http://httpd.apache.org/docs/2.2/platform/windows.html).

To add the mod_wsgi plugin to Apache, download the appropriate mod_wsgi file from [here](http://www.lfd.uci.edu/~gohlke/pythonlibs/#mod_wsgi), and copy the file to your Apache modules folder as described [here](http://code.google.com/p/modwsgi/wiki/InstallationOnWindows).

Finally, add this line to httpd.conf file: `LoadModule wsgi_module modules/mod_wsgi.so`


# How to (hopefully) hack together a localized version of KA Lite 

#### We expect to have full i18n support by early 2014, but if you have a project that needs KA Lite i18n'd before that, here's some basic instructions on how you can try and make that happen.

*Please note that the KA Lite team regretfully does not have the bandwidth to support anything if it goes wrong for you. We are working as hard as we can to make this available for everyone as soon as possible!*

## Ordered Steps
### 1. Obtain Background Knowledge

1. Understand that KA Lite is a [Django Application](https://www.djangoproject.com/). If you are unfamiliar with Python and Django, all is not lost, but having a basic understanding will make things easier. 

2. Understand [Django's approach to internationalization](https://docs.djangoproject.com/en/dev/topics/i18n/translation/). Start with the KA Lite i18n Documentation (sibling to this document), and then read Django's Internationalization Docs. 

### 2. Understand the three parts to internationalization

1. User interface translations. This is what the i18n docs are all about. 

2. Subtitle support. (For your purposes, this already exists! You don't have to worry about it.)

3. Dubbed videos.

**So we need to focus on UI translations and dubbed video support.**

### 3. Getting KA Lite UI translations

*If these instructions don't make sense, please read the i18n documentation for KA Lite and the Django i18n docs again*

1. Encourage volunteer translators to complete the translations of [KA Lite's UI](http://crowdin.net/project/ka-lite) and of [Khan Academy's content](http://crowdin.net/project/khanacademy). Please be aware that not all KA content get's reused in KA Lite. Please ask your translators to focus on the content under the folder _high_priority_content. Everything in this section, with the exception of the _learn_math.applied-math.articles folder, are video titles, descriptions, and exercise content, which is shared by KA Lite.  

2. Download the po files from the CrowdIn links in (1). You should have two po files for KA Lite and quite a few for the content directory. Put all of these po files in the locale directory: `locale/<your_lang_code>/LC_MESSAGES/<put_po_files_here>`

3. Run `compilemessages` (re-read i18n docs if this isn't familiar)

4. In the `settings.py` folder, make sure you change LANGUAGE_CODE = "<your_lang_code>"

5. Run the server and keep your fingers crossed. :+1:


### 4. Adding in Dubbed Video Support

1. KA Lite loads in video content using the `content/` directory and the json file `kalite/static/data/topics.json`. Take a look at that json data.

2. Basically, what you have to do is put your videos inside of the content directory and update the json file to reflect your videos instead of Khan Academy's. It's not super simple, but it isn't that hard either. It's mostly a matter of working out which dubbed video corresponds to which KA video, replacing the metadata in the JSON with the metadata you have, and then trial and error. I will do my best to add more to this later, but with perserverance, hopefully I have given you enough to work with to accomplish your goal.
Caching is a way for the web server to be more efficient in its responses, by serving stored results computed while serving a previous request, rather than recomputing it.  The major challenge with caching is: when do you invalidate your cache items (and force the server to recompute the result)?

## Overview

KA Lite caches in two different ways:
* per thread: For each server thread, listening for HTTP requests, keep some data in memory.
* global: Store server responses and data to disk, or to the database.

For each, we cache different information:
* per thread: [[the topic tree]]
* global: content pages (e.g. Homepage, topic pages, video pages, exercise pages) and search resources (`flat_topic_tree`)

Because per-thread caching is covered in [[the topic tree]], the focus here is on global caching.

## Code

In Django, requested urls are forwarded to views, which generate some context, hand it off to a template, and return a HttpResponse that contains output HTML.  

[Django caching](https://docs.djangoproject.com/en/dev/topics/cache/) caches both the headers and response body of that HttpResponse

### Cache back-end

Items that are stored in the cache are put into specific back-ends.  We use a file-based back-end by default.

### Cache key

In order to look up an item in the cache, a cache key is computed.  We use Django's default key function.

Cache entries include the following in their cache key:
* Request language
* Other things I'm unaware of


### Adding cache items

Our caching code resides `shared/caching.py`, and is used in multiple locations.  Below we define each function in `shared/caching.py` by the functional use of the cache.

`main/views.py` - uses functions for caching content pages

`backend_cache_page` is decorator applied to each cachable view. It uses Django's cache framework to detect cache cache hits and set appropriate headers in the response object.

In our code, we use the Django caching framework.

### Detecting changes

`backend_cache_page` only adds cache entries; however, when new resources are added, we need to clear the cache.

Unfortunately, while we have central functions that clear items from the cache, we don't have a centralized place for checking if an item has been invalidated.  Instead, much of the code requires the coder to remember to explicitly check whether an action would lead to a resource change that requires any cache items to be invalidated.

There are a number of items that invalidate pages:

* videos - videos can change on disk, or video metadata can change in the database.  Each case is handled differently.

* new subtitles - Subtitles are displayed on the topic page that contains videos or exercises.  

* translated exercises - NYI

### Viewing cache items

### Clearing cache items


Firstly, thank you for being willing to offer your time to contribute to the KA Lite efforts! The project is run by volunteers dedicated to helping make educational materials more accessible to those in need, and every contribution makes a difference. Feel free to follow the instructions below to start playing with the codebase, but you may want to [contact us](http://jamiealexandre.com/contact/) to figure out what would be good for you to work on, or take a look at the [GitHub issues page](https://github.com/jamalex/ka-lite/issues), and jump right in!

### Getting started

1. Fork the main KA Lite repository ([signing up and configuring a GitHub account](https://help.github.com/categories/54/articles) first, if needed).
2. Clone your own repository (the one you forked), e.g., if you're using SSH authentication, it would be:
`git clone --recursive git@github.com:YOURACCOUNTNAME/ka-lite.git` (you can copy this url from your repository page)
3. After cloning, switch to the `develop` branch, which is where any commits you make should go (unless you want to make a feature branch): `git checkout develop` (we are roughly following the [successful git branching model](http://nvie.com/posts/a-successful-git-branching-model/) conventions, though we haven't moved to using release and hotfix branches yet)
4. In the `ka-lite/kalite` directory, add a file called `local_settings.py`, and put `DEBUG = True` in it.
5. Run the `install.sh` (Linux/OSX) or `install.bat` script (in the `ka-lite` directory) to initialize the database. (Take a look inside the file to get a sense of what it's doing).
6. Open two terminal/shell windows, in the `ka-lite/kalite` directory. In one, run `python manage.py runserver` (to start the Django development server), and in the other, run `python manage.py cronserver 5` (to run the background processing script, which does things like download requested videos).
7. Load http://127.0.0.1:8000/ to view the server running in development mode.
8. Make your changes, then commit and push them. Initiate a pull request targeting the `jamalex/ka-lite/develop` branch (by default it may have selected the `master` branch).

### Where does communication happen?

1. Any public, general development questions/announcements can go on the [KA Lite dev Google group](groups.google.com/forum/?fromgroups#!forum/ka-lite-dev). (Join it so you'll receive these messages, too.)
2. Feature requests/bug reports can go on the [GitHub issues page](https://github.com/jamalex/ka-lite/issues).
3. We use a [Trello board for internal dev team feature prioritization and assignment/claiming](https://trello.com/board/ka-lite-programming/507303596f46cc9a38c1c94f) (a communal checklist, essentially). [Join Trello](https://trello.com/signup) and [contact Jamie](http://jamiealexandre.com/contact/) if you'd like to be added to the board.
4. [Like the project on Facebook](https://www.facebook.com/kaliteproject) and [follow it on Twitter](https://twitter.com/ka_lite) to stay in the loop. Also, [subscribe for updates on the main project page](http://kalite.adhocsync.com/).

Guidelines
===

### Priority on efficiency

KA Lite is designed to function reasonably well on low power devices (such as a Raspberry Pi), meaning we want to avoid doing anything computationally intensive. Also, for the cross-device syncing operations, connection bandwidth and speed are often expensive and slow, so we should always try to minimize the amount of data needing to be transferred.

### Python dependencies

Because we want an extremely low friction cross-platform installation process, we only want to depend on Python libraries that are pure Python (no compiled C modules, etc) and cross-platform (i.e., work on both Linux, OSX and Windows). Then, the packages themselves can be fully included in the download codebase without worrying about what platform it was compiled for. Soft dependencies on a package with binaries is fine; e.g., for efficiency reasons, the project takes advantage of `python-m2crypto` if available, but falls back to `python-rsa` (a pure Python implementation) otherwise.

### Python

We roughly try to follow the [PEP8 conventions](http://www.python.org/dev/peps/pep-0008/), with a few exceptions/clarifications:

* Limit line length to 119 characters (PEP8 limits lines to 79 characters, but this can lead to a lot of wrapping)
* We're somewhat flexible in where we put empty lines; the goal is to use empty lines as punctuation to separate semantic units.

### Python 2.6 restrictions

KA Lite lists Python 2.6 or 2.7 as a dependency, and thus any code written needs to be backwards compatible with Python 2.6, meaning:

1. Do not use dictionary comprehensions (e.g. `{num, num**2 for num in range(100)}`).
2. Do not use the `OrderedDict` data structure.
3. Do not use the `argparse` module.
4. Do not use the `viewkeys()`, `viewvalues()`, and `viewitems()` methods of the dict class.
5. Do not define set literals using braces (e.g. `{4,5,6,7}`). Instead, use the set constructor (e.g. `set([4,5,6,7])`).

### CSS

The file `khan-site.css` is from khan-exercises, and we don't want to modify it, in case we want to update it from there in the future. Instead, most CSS styling goes in khan-lite.css, and will override any styles defined in `khan-site.css`. For styles that will only ever be used on a single page, they can be defined in a `<style>` block inside `{% block headcss %}`. Avoid using inline (tag attribute) styles at all costs.
Welcome to the ka-lite wiki!

### Dev team resources: ###
* Our [dev calendar](https://www.google.com/calendar/embed?src=bGVhcm5pbmdlcXVhbGl0eS5vcmdfdGU2cmpkdnBkMXJhbjNzamNtMnQ3dTd0YTRAZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ), defining (online) dev meetings, deliverable dates, and milestones along the way.
* Our [dev Google group](https://groups.google.com/a/learningequality.org/forum/#!forum/dev), where we send notifications and updates.
* Our [dev roster](KA-Lite-dev-roster), defining people, their areas of interest & expertise, and contact information.

### Software documentation: ###

* [Getting started](Getting-started)
* [Project structure](Project-structure)
* Some documentation about high-level design and code are off-site:
http://kalitewiki.learningequality.org/development



### Current deliverables ###

Currently, we have 4 releases planned (check the calendar for scheduled dates):
* [Release 0.11](https://github.com/learningequality/ka-lite/wiki/Release-0.11) - Internationalization (estimated ship date: Feb 19, 2014)
* [Release 0.12](https://github.com/learningequality/ka-lite/wiki/Release-0.12) - Community-building via refactoring, documentation, data mining, and internal tool development.
* [Release 0.13](https://github.com/learningequality/ka-lite/wiki/Release-0.13) - Installation & Registration streamlining

### Recent deliverables ###

You can get a sense of what we've completed by reviewing these.
* [Release 0.10.3](https://github.com/learningequality/ka-lite/wiki/Release-0.10.3) - iterative release

Please add your name, a photo, contact information, interests/skills, and a link to your github profile.


KA Lite is a medium-size project, so keeping a well-defined structure is essential to making it understandable.

Below is an outline of the directory structure for the project, as well as how apps are currently structured.


## Directories
The KA Lite project has the following subdirectories:

### Code
* [kalite](https://github.com/learningequality/ka-lite/tree/master/kalite) - Django apps we've created or downloaded and modified for the ka lite projects
* [python-packages](https://github.com/learningequality/ka-lite/tree/master/python-packages) - Django apps and Python package dependencies for apps within `kalite`
* [scripts](https://github.com/learningequality/ka-lite/tree/master/scripts) - OS-specific scripts for starting/stopping server (and other similar tasks)

### Resources
* [content](https://github.com/learningequality/ka-lite/tree/master/content) - contains video files and video preview images
* [data](https://github.com/learningequality/ka-lite/tree/develop/data) - private json data files the server uses
* [docs](https://github.com/learningequality/ka-lite/tree/master/docs) - .md files for developers and KA Lite users
* [locale](https://github.com/learningequality/ka-lite/tree/master/locale) - contains translations that are downloaded via language pack updates

## Apps

### KA Lite created / modified apps

Distributed server-specific - only used on the installable KA Lite server
* chronograph - Like UNIX `cron`: runs jobs (Django management commands), keeps logs
* config - generic app for setting server config options in the database
* django_cherrypy_wsgiserver - wrapper around cherrypy for use in Django
* khanload - code and commands for downloading Khan Academy's topic tree and user data
* updates - sister app of chronograph; updates job status from back-end management commands to the front-end UI

Shared - Shared between both technologies
* coachreports - graphical displays of student progress
* control_panel - summaries of all data (usage and syncing) 
* i18n - tools for implementing language packs, including interface translations, subtitles, and dubbed videos
* main - main website and student progress recording
* securesync - engine for syncing data, as well as defining users
* tests - framework for functional and performance testing
* utils - app-independent utilities (could be shared with the world!)

Central server-specific - only used on our online website and central data repository
* central - main KA Lite website
* contact - contact form
* faq - FAQ page
* registration - user registration and sign-in
* stats - summaries of data shared centrally.

### Library apps

These are located in the `python-packages` directory.

True libraries - usually get via `sudo apt-get`, but we download and ship for offline completeness
* cherrypy
* collections
* django
* httplib2
* pytz
* requests
* rsa
* selenium
* south

External helpers - Collected from around the web, we use this code without modification.
** NOTE **: many of these may belong to "true libraries" above.
* annoying
* dateutil
* debug_toolbar
* decorator
* django_extensions
* django_snippets
* git
* ifcfg
* iso8601
* khanacademy
* memory_profiler
* mplayer
* oauth
* pbkdf2
* polib
* postmark
* pyasn1
* werkzeug

Internal helpers - Other projects we authored, but that is used without modification here.
* playground


	
## App file structure

### Files
* Each app contains relevant standard Django files (`forms.py`, `models.py`, `views.py`, `urls.py`)
* Some apps have both HTML views as well as API/JSON views.  These are defined by `api_xxx.py` files, such as `api_views.py`, `api_urls.py`, etc.
* Any shared functions across the app/module with other apps should be defined within the `__init__.py` file
* Some apps have additional functionality, especially for central server - distributed server interactions (e.g. `api_client.py`).  This may get refactored...

### Release Status ###

_**Target release date**_: End of January, 2014

_**Status**_: central server has been released; distributed server has not. 

_**Outstanding issues**_: [found here](https://github.com/learningequality/ka-lite/issues?milestone=25&state=open)

### Goals ###

Improve server performance, iterative features, on top of the 0.11/0.13 code-base.

### High-level Plan ###

Not so much a plan, but what we're doing:
Implement 0.11 and 0.13, then disable features we don't feel are ready.
 
### Release criteria ###
* [**done**] Cross-version syncing (push and pull from/to 0.9.2, 0.10.0, 0.10.3)
* [**done**] Unit tests (central and distributed server) work in release mode.
* Language pack downloads/updates provide subtitles only.


### Release Status ###

_**Target release date**_: Mid-February, 2014 (Central server: January 31, 2014)

_**Status**_: In active development

_**Outstanding issues**_: [found here](https://github.com/learningequality/ka-lite/issues?milestone=8&state=open)

### Goals ###

Augment KA Lite with translations, dubbed videos, and other internationalization of the content.

### High-level Plan ###

* Implement "language packs", with special "language pack" updates
* Implement, a basic command-line tool for downloading dubbed videos.
* Implement the "language-switching toolbar", allowing single users to use a specific translation
* Implement methods for administrators to set device-wide translation.

### Release criteria ###

* Cross-version syncing (push and pull from/to 0.9.2, 0.10.0, 0.10.3, 0.11.1)
* Unit tests (central and distributed server) work in release mode.
* Language pack version changes work and trigger distributed server "update" links
* Language packs work for previous releases (0.10.3)
* Language pack updates reload the server
* Language pack updates invalidate the cache
* Language pack updates regenerate the relevant django javascript file
* [**done**] Language packs are composed of all appropriate parts, across providers
* Test performance with the current topic tree calculations and two language packs installed.
* Functional testing for language packs, language-switching toolbar
### Release Status ###

_**Target release date**_: End of April, 2014

_**Status**_: In active development

_**Outstanding issues**_: [found here](https://github.com/learningequality/ka-lite/issues?labels=&milestone=29&page=1&state=open)

### Goals ###

Prepare this project for community-building

### High-level Plan ###

Required:
* Add docstrings to all functions.
* Document code structure and high-level architecture and designs.  
* Refactor code and clean code structure and architecture.
* Identify, prioritize, and make automated tests a first class citizen in the development workflow.

Also needed:
* Add high-priority admin functions, to expose all admin features to user-base.
* Add central server-side analytic tools for data collection
* Add central server-side tools for deployment management and contact

### Release criteria and status ###

#### Documentation #####
* Team must have decided on the central repository for documentation. 
* All public functions (i.e. functions without a leading underscore) must have docstrings giving a description both for a high level and for each parameter (if any).
* Updated documentation on installation and contribution.
* Automated tests all pass 100%.
* Build server that runs all tests for each commit. (Aron: very essential for release hygiene, and confidence in code).
* Documentation and discussion on the release process.
  - Purpose of each branch (master, develop, release-*)
  - When and where to communicate development status (monthly dev reports, snapshots, betas/alphas, releases)
  - General release timeline template, with a clear demarcation between feature development and bugfixing.
### Target Release Date ###

End of March, 2014

### Goals ###

Increase our user-base and community support, and gather as much user data as possible.

### High-level Plan ###

Automate the registration process and simplify the installation process.
 
### Release criteria and status ###

## Setting up a test central server

As testers, we should virtually never test against our central server, to avoid exposing any unknown bugs that might corrupt data, and to avoid reporting incorrect statistics to partners.

Below are guidelines for what central server to use when, and how to set them up.

### Local (test) central server

### Development central server

```
CENTRAL_SERVER_HOST="kalite.learningequality.org:7007"
SECURESYNC_PROTOCOL="http"
```

Since we're so late in the release cycle, using the development central server is best (`kalite.learningequality.org:7007`).  

Later, after we ship 0.11.1 and begin 0.12, the development central server will point to 0.11.1, so you'll need to install your own local test central server to test.

The reason: the development central server needs to be up, running and essentially bug free, as people who are deploying with alpha version of new features are using it at their central server.  But it will always lead the *actual* central server in terms of when it gets updated with the latest release.

### True central server
The topic tree is a hierarchical tree of dictionaries, which define how different resources (videos and exercises) relate to each other.

Here's a snippet of the Khan Academy topic tree, as it appears in KA Lite:

![screen shot 2014-02-03 at 2 25 43 pm](https://f.cloud.github.com/assets/4072455/2070940/3584eddc-8d22-11e3-91d6-734f1b46e277.png)

## Overview

Topic tree data is stored in memory, so that any page requiring Khan Academy metadata can be generated quickly.  We also store details about the # of videos available, what their URLs are, and more!

Topic tree data would need to be reloaded when:
* # of videos change (on disk, or in the database)
* subtitles change (URLs need to be recomputed)

## Code

### Initial loading

The topic tree is loaded in `shared/topic_tools.py:get_topic_tree`.  
Additional properties are stamped on by:
    * `shared/videos.py:stamp_availability_on_topic` - stamps whether a topic is 'available'
    * `stamp_availability_on_video` - stamps on whether a video exists on disk (in any language).  Also optionally stamps on resource urls (video url, subtitle urls, thumbnail urls...)

### Reloading

When new videos are downloaded (or old ones deleted), the metadata within the topic tree needs to be reloaded.

The decorator `main/views.py:refresh_topic_cache` is the entry point in the code for a view to check on resources, to see if the topic tree data needs to be reloaded.  Each view that pulls data from the topic tree needs to add this decorator.

The main workhorse there is `main/views.py:refresh_topic_cache|refresh_topic_cache_wrapper_fn`, which examines a node (usually representing the requested page's position in the topic tree), and does all relevant checks for resource changes.

If the cache needs to be reloaded, then all relevant properties are deleted, and the function to compute those properties is called.


Setting up KA Lite testing servers
===

### Basic setup (one-time only)
1. Fork the `learningequality/ka-lite.git` repository into your own github.com account
2. Clone your github.com ka-lite.git (remote) repository to your local machine
3. Install the KA Lite server (from the `ka-lite` directory, run `install.sh` or `install.bat`)


### Testing a distributed server
1. From the `ka-lite/kalite` directory, run `python manage.py runserver 8008`
2. Browse your web browser to [http://localhost:8008/](http://localhost:8008/)


### Testing CENTRAL server
1. Create file `kalite/local_settings.py`
2. Add the following to local_settings.py:    
`DEBUG=True`  
`CENTRAL_SERVER=True`

3. Run `python kalite/manage.py syncdb --migrate` to set up the CENTRAL server database.
4. Run `python kalite/manage.py runserver 8001` to start the CENTRAL server.
5. Browse your web browser to [http://127.0.0.1:8001/](http://127.0.0.1:8001/)


### Testing Central Server Registration
0. Follow the steps above for "Testing Central Server" 
1. Enable viewing sent emails, either by outputting to the console, or by actually sending.
    * **Outputting to the console (emails not actually sent):** (preferred)
        1. Add the following line to kalite/local_settings.py    
`EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"`  
    * Actually sending (sending email via http): (used in special cases)
        1. Install httplib2 python module from (https://code.google.com/p/httplib2/downloads/list)
        2. Register for an account at (http://postmarkapp.com)
        3. At (http://postmarkapp.com), add a signature email for test email address (that you have control of)
        4. At (http://postmarkapp.com), go to servers->credentials and copy the API key
        5. Add the following line to kalite/local_settings.py  
        `POSTMARK_API_KEY = "[your api key]"`  
        6. Add the following lines to kalite/local_settings.py:    
`CENTRAL_FROM_EMAIL    = "[your 'signature' email address]"`  
`CENTRAL_ADMIN_EMAIL   = "[your 'signature' email address]"`  
`CENTRAL_CONTACT_EMAIL = "[your 'signature' email address]"`  

2. Run `python kalite/manage.py runserver 8001` to start the CENTRAL server.
3. Browse your web browser to [http://127.0.0.1:8001/accounts/register/](http://127.0.0.1:8001/accounts/register/)
4. When you register, all "emails" will be printed to the console, rather than sent to you.


### Testing securesync completely locally
1. Set up one clone running KA lite local server (default).  Call this "LOCAL" below.
2. Set up one clone running KA lite "central".  Call this "CENTRAL" below.
    1. Create second clone (git clone git@github.com/[etc...] central) in the "central" directory, and "install".
    2. Set up "Testing Central Server" (see above)
    3. Set up "Testing Central Server Registration" (see above)
3. On LOCAL, add the following to local_settings.py:

`CENTRAL_SERVER_DOMAIN = "127.0.0.1:8001"`  
`CENTRAL_SERVER_HOST   = "127.0.0.1:8001"`  
`SECURESYNC_PROTOCOL   = "http"`  

4. on LOCAL, run `python kalite/manage.py runserver 8008` to start the server.
5. Register the LOCAL server with the CENTRAL server
    1. Browse to LOCAL on url (http://localhost:8008/securesync/register/)
    2. Click the link to "log into the central server".  Either log in, or create an account and log in.
    3. Create an "organization" and "zone", if necessary (these are auto-created for all users except the central server admin)
    4. Click the link to "register this device in a zone".  
    5. Select your zone, and click the "register" button.
6. On LOCAL, run `python manage.py generaterealdata` to generate test data.
7. On LOCAL, run `python manage.py syncmodels` to begin the syncing process.  The output should confirm that syncing has occurred.

Installation overview
===

You will be completing the following steps:

1. Install Python version 2.6 or 2.7
2. Install git
3. Download the KA Lite codebase using git
4. Run the setup script to complete configuration
5. Run the server

Jump to below for [Windows installation instructions](#installing-on-windows) or [Mac OS X installation instructions](#installing-on-mac-os-x).

Installing on Linux
===

### 1. Install Python

Almost all popular versions of Linux come with Python already installed. To ensure that it is a usable version, run `python -V` from the command line, and ensure that the version number starts with 2.6, or 2.7.

If Python is not installed, install it by running `sudo apt-get install python` or the equivalent command in your distribution's package manager.

### 2. Install git

Install git by running `sudo apt-get install git-core` or the equivalent command in your distribution's package manager.

### 3. Download KA Lite

Clone the repository into a directory of your choice. Use `cd` to navigate into the target directory, and then run the command below (the files will be put into a subdirectory of your current directory named `ka-lite`):

`git clone --recursive https://github.com/jamalex/ka-lite.git`

(The `--recursive` is required because it includes [khan-exercises](https://github.com/Khan/khan-exercises) as a git submodule.)

### 4. Run the setup script

Inside the `ka-lite` directory (that you cloned above) you should find a script called `setup_linux.sh`. Use `cd ka-lite` to navigate into the directory, and run this script using `./setup_linux.sh` to initialize the server database.

### 5. Run the server

(If you're installing the server to test/develop, rather than deploy, follow the [development instructions](docs/DEVELOPMENT.md) instead.)

To start the server, run the `start.sh` script in the `ka-lite` directory.

You may want to have this script run automatically when you start the computer. If you are running Ubuntu or another Debian variant, the setup script should have given you the option of setting the server to run automatically in the background when the computer boots. If you skipped this step, you can do it later by running `sudo ./runatboot.sh` from inside the `ka-lite/kalite` directory.

The local KA Lite website should now be accessible at [http://127.0.0.1:8008/](http://127.0.0.1:8008/) (replace 127.0.0.1 with your computer's external ip address or domain to access it from another connected computer).


Installing on Windows
===

### 1. Install Python

Install Python (version 2.6 or 2.7), if not already installed ([download Python 2.7](http://www.python.org/download/releases/2.7.3/)). On 32-bit Windows, use the [x86 MSI Installer](http://www.python.org/ftp/python/2.7.3/python-2.7.3.msi), and on 64-bit Windows, use the [X86-64 MSI Installer](http://www.python.org/ftp/python/2.7.3/python-2.7.3.amd64.msi).

You will need Python to be on your system PATH, so that it can be run from the command prompt (cmd.exe); see this video about [adding Python to the PATH](http://www.youtube.com/watch?v=ndNlFy-5GKA&hd=1#t=243s) (note that this is for version 2.7; just adapt the paths for older versions). It may be good to add `;C:\Python27\;C:\Python27\Scripts` to your path, instead of just `;C:\Python27\` as recommended in the video.

### 2. Install git

Install the latest version of [git for Windows](http://code.google.com/p/msysgit/downloads/list?q=full+installer+official+git), using all the default options EXCEPT be sure to choose the "Run Git from the Windows Command Prompt" (middle) option on the "Adjusting your PATH environment" page (KA Lite needs to have git accessible on the PATH for updating purposes).

### 3. Download KA Lite

Clone the repository into a folder of your choice. Load `cmd.exe`, and use `cd` to navigate into the target folder (e.g. to put the files in a folder called `ka-lite` on your Desktop, type `cd Desktop`), and then run:

`git clone --recursive https://github.com/jamalex/ka-lite.git`

If you get the message `'git' is not recognized as an internal or external command, operable program or batch file.`, this means git was not added to your PATH. In this case, you can either uninstall git and then re-follow the [git installation instructions above](#2-install-git-1), or [add the git bin folder to your PATH](http://stackoverflow.com/a/4493004/527280) -- use `C:\Program Files\git\bin` (or maybe `C:\Program Files (x86)\git\bin`) as the path.

(The `--recursive` is required because it includes [khan-exercises](https://github.com/Khan/khan-exercises) as a git submodule.)

### 4. Run the setup script

Inside the `ka-lite` folder (that you cloned above) you should find a script called `setup_windows.bat`. Double-click this script to run it, which will initialize the server database.

### 5. Run the server

(If you're installing the server to test/develop, rather than deploy, follow the [development instructions](docs/DEVELOPMENT.md) instead.)

To start the server, double-click the `start.bat` script in the `ka-lite` folder.

You may want to have this script run automatically when you start the computer, by creating a shortcut to `start.bat` and [copying it to the Startup folder in the Start Menu](http://windows.microsoft.com/en-US/windows-vista/Run-a-program-automatically-when-Windows-starts) -- the installation script should also have given you the option of having this done automatically.

If at any point you see a "Windows Security Alert" [warning about Windows Firewall blocking Python](kalite/static/images/windows-python-network-permissions.png), be sure to check both checkboxes (as seen in the picture) and click "Allow access", to ensure that the server will be accessible.

The local KA Lite website should now be accessible at [http://127.0.0.1:8008/](http://127.0.0.1:8008/) (replace 127.0.0.1 with your computer's external ip address or domain to access it from another connected computer).


Installing on Mac OS X
===

### 1. Install Python

Python comes pre-installed on Mac OS X, but due to Apple's release cycle, it's often one or even two years old. To check that you have got a usable version, run `python -V` from the command line (in Terminal from Applications/Utilities), and ensure that the version number starts with 2.6, or 2.7. If it is not a usable version ([download Python 2.7](http://www.python.org/download/releases/2.7.3/)). On 32-bit or 64-bit non PPC Mac OS X 10.6 or higher, use the [64-bit/32-bit x86-64/i386 Installer](http://www.python.org/ftp/python/2.7.3/python-2.7.3-macosx10.6.dmg), and on PPC or 32-bit i386 Mac OS X 10.3-10.6, use the [32-bit i386/PPC Installer](http://www.python.org/ftp/python/2.7.3/python-2.7.3-macosx10.3.dmg).


### 2. Install git

Install the latest version of [Git for OS X](http://code.google.com/p/git-osx-installer/downloads/list?can=3&q=&sort=-uploaded).

### 3. Download KA Lite

Clone the repository into a directory of your choice. Use `cd` to navigate into the target directory (the files will be put into a subdirectory of your current directory named `ka-lite`), and then run:

`git clone --recursive https://github.com/jamalex/ka-lite.git`

(The `--recursive` is required because it includes [khan-exercises](https://github.com/Khan/khan-exercises) as a git submodule.)

### 4. Run the setup script

Inside the `ka-lite` directory (that you cloned above) you should find a script called `setup_mac.command`. Double-click that script to run it, which will initialize the server database.

### 5. Run the server

(If you're installing the server to test/develop, rather than deploy, follow the [development instructions](docs/DEVELOPMENT.md) instead.)

To start the server, double-click the `start.command` script in the `ka-lite` directory.

The local KA Lite website should now be accessible at [http://127.0.0.1:8008/](http://127.0.0.1:8008/) (replace 127.0.0.1 with your computer's external ip address or domain to access it from another connected computer).


Optional: Install and configure Apache/mod_wsgi
===

KA Lite includes a web server implemented in pure Python for serving the website, capable of handling hundreds of simultaneous users while using very little memory. However, if for some reason you wish to serve the website through Apache and mod_wsgi, here are some [useful Apache setup tips](docs/INSTALL-APACHE.md).


You can add custom icons for each topic's exercise completion badge.

Steps:

1) Add your custom icon in all appropriate sizes and statuses to /images/power-mode/badges.
    ...your filename should match the title of the target topic, and 
    it should be lowercased, alphanumeric, and use underscores instead of spaces.

    Examples for topic "Addition and subtraction":
        40x40px: /images/power-mode/badges/addition-and-subtraction-40x40.png
        60x60px: /images/power-mode/badges/addition-and-subtraction-60x60.png

        40x40px (completed): /images/power-mode/badges/addition-and-subtraction-completed-40x40.png
        60x60px (completed): /images/power-mode/badges/addition-and-subtraction-completed-60x60.png

2) Add the topic name (such as "Addition and subtraction") to the TOPICS_WITH_CUSTOM_ICONS
    list at the end of badges/topic_exercise_badges.py.

    TODO: come up w/ a nicer process for this.


The files in this folder are used for end to end tests of our exercise loading
code. They are not real exercise files.

See /exercises/file_experiment_tests.py in the main Khan Academy repo.

This directory holds files that are only needed for the 'local'
version of khan-exercises -- e.g. sandcastle.khanacademy.org.

These files are needed to view the exercises, but in production -- at
www.khanacademy.org -- are provided by the main khan academy website.
For instance, if you're viewing an exercise at
   https://www.khanacademy.org/math/arithmetic/addition-subtraction/basic_addition/e/number_line
then that page has loaded jquery.js from
webapp/javascript/shared-package/jquery.js.  (It needs jquery to
display the chrome/etc around the exercise.)  We don't need an
exercise-specific version of jquery.js as well.  However, if you're
viewing the same exercise at http://sandcastle.khanacademy.org/
there's no chrome loading jquery.js, so the exercise has to do it
itself.

The script
   update_local.sh
will update this directory from the webapp repository.

If you add a file here, also add it to
   ./update_local.sh
   ../khan-exercise.js:initScripts

# Khan Academy Exercises

Copyright (c) 2013 Khan Academy

The exercise framework is [MIT licensed](http://en.wikipedia.org/wiki/MIT_License).

The exercises are under a [Creative Commons by-nc-sa license](http://creativecommons.org/licenses/by-nc-sa/3.0/).

## Exercise Framework

Khan Academy has created a generic framework for building exercises. This framework, together with the exercises themselves, can be used completely independently of the Khan Academy application.

The framework exists in two components:

* An HTML markup for specifying exercises.
* A jQuery plugin for generating a usable, interactive, exercise from the HTML markup.


## Using the Framework Locally

You need to serve the files from some sort of a server. You can't just open the files directly in a browser. For example:

    cd khan-exercises
    python -m SimpleHTTPServer # or python3 -m http.server

Now if you open your browser to `http://localhost:8000` (or `http://127.0.0.1:8000/`) you should see the contents of the `khan-exercises` directory. Navigate to the `exercises` subfolder, and an HTML file under there to see an exercise.


## Writing Exercises

The process for writing exercises is rather well documented. More information about this process can be found in the [Khan Exercises wiki](https://github.com/Khan/khan-exercises/wiki). Specifically:

* [How to Get Involved](https://github.com/Khan/khan-exercises/wiki/Getting-Involved)
* [How to Write Exercises](https://github.com/Khan/khan-exercises/wiki/Writing-Exercises:-Home)
* [How to Test Exercises](https://github.com/Khan/khan-exercises/wiki/Testing-Exercises)

## More

If you're passionate about creating these exercises and want to apply to be a full-time exercise developer at the Khan Academy, [please do so](http://hire.jobvite.com/CompanyJobs/Careers.aspx?c=qd69Vfw7&page=Job%20Description&j=ohjSVfw7).

Video.js - [HTML5 Video Player](http://videojs.com)
==================================================
Version 3.0

---
Version 3 is almost a complete rewrite of the previous versions of Video.js. New features includes:

  - HTML/CSS Controls and API now work for both the HTML5 and Flash versions.
  - Custom Super-lightweight Flash Fallback
  - Embed Code is much simpler.
    - No more "vjs-box" div required, just use the video tag.
    - No more embedding of Flash fallback within the video tag HTML.

---

View [videojs.com](http://videojs.com) for a demo and overview.  

Video.js is an HTML5 video player that uses the HTML5 video tag built into modern browsers, and uses javascript to add custom controls, new functionality, and to fix cross browser bugs. For browsers that don't support HTML5, it will fallback to a Flash player.

View demo.html for an example of how to use it.

Originally based on [this tutorial](http://blog.steveheffernan.com/2010/04/how-to-build-an-html5-video-player/).

Contributors (Github Username)
------------------------------
heff, dz0ny, sentientbit, tvdeyen, brandonarbini, gordonbrander, Shraymonks, albertogasparin, sandaru1, nicholasbs, majornista, Fredust85, @wonderboymusic, ellis-, emirpprime, eirikb, mbrubeck


Getting Started
---------------

### Step 1: Include the Video.js Javascript and CSS files in the head of your page.
Change the file urls to point to the files on your server.

    <script src="video.js"></script>
    <link href="video-js.css" rel="stylesheet">


### Step 2: Add an HTML5 video tag to your page.
Use the video tag as normal, with a few extra pieces for Video.js:

  1. The 'data-setup' attribute tells Video.js to automatically set up the video when the page is ready, and read any options (in JSON format) from the attribute.
  2. The 'id' Attribute: Should be used and unique for every video on the same page.
  3. The 'class' attribute contains two classes:
    - 'video-js' applies styles that are required for Video.js functionality, like fullscreen and subtitles.
    - 'vjs-default-skin' applies the default skin to the HTML controls, and can be removed or overridden to create your own controls design.

Otherwise include/exclude attributes, settings, sources, and tracks exactly as you would for HTML5 video.

    <video id="example_video_1" class="video-js vjs-default-skin" controls preload="auto" width="640" height="264"
        poster="http://video-js.zencoder.com/oceans-clip.png"
        data-setup='{"example_option":true}'>
      <source src="http://video-js.zencoder.com/oceans-clip.mp4" type='video/mp4' />
      <source src="http://video-js.zencoder.com/oceans-clip.webm" type='video/webm' />
    </video>


### Step 3: Nada!
That's all it take to get started. See the [docs](http://videojs.com/docs/) for more advanced uses.


Changelog
---------
3.0

- Complete rewrite
- HTML/CSS Controls and API now work for both the HTML5 and Flash versions
- Custom Super-lightweight Flash Fallback
- Embed Code is much simpler.
  - No more "vjs-box" div required, just use the video tag.
  - No more embedding of Flash fallback within the video tag HTML.

2.0.3

- Feature: Made returning to the start at the end of the movie an option ("returnToStart").
- Feature: Added loop option to loop movie ("loop").
- Feature: Reorganized player API and listeners.
- Feature: Added option to disable controls. controlsEnabled: false
- Feature: Setup method now has a callback, so you can more easily work with the player after setup
- Feature: Added listeners for enter/exit full screen/window.
- Feature: Added a VideoJS.player(id) function for getting the player for a video ID
- Changes: setupAllWhenReady is now just setupAll (backward compatible)
- Fix: Check for Android browser now excludes firefox and opera

2.0.2 (2010-12-10)

- Feature: Rewrote and optimized subtitle code.
- Feature: Protecting against volume ranges outside of 1 and 0.
- Fix: Bug in Safari for Mac OS 10.5 (Leopard) that was breaking fullscreen.

2.0.1 (2010-11-22)

- Fix: Issue with big play button when multiple videos are on the page.
- Fix: Optimized play progress tracking.
- Fix: Optimized buffer progress checking.
- Fix: Firefox not showing Flash fallback object.

2.0.0 (2010-11-21)

- Feature: Created "behaviors" concept for adding behaviors to elements
- Feature: Switched back to divs for controls, for more portable styles
- Feature: Created playerFallbackOrder array option. ["html5", "flash", "links"]
- Feature: Created playerType concept, for initializing different platforms
- Feature: Added play button for Android
- Feature: Added spinner for iPad (non-fullscreen)
- Feature: Split into multiple files for easier development
- Feature: Combined VideoJS & _V_ into the same variable to reduce confusion
- Fix: Checking for m3u8 files (Apple HTTP Streaming)
- Fix: Catching error on localStorage full that safari seems to randomly throw
- Fix: Scrubbing to end doesn't trigger onEnded

1.1.5 (2010-11-09)

- Feature: Switched to track method for setting subtitles. Now works like spec.
- Feature: Created "players" concept for defining fallbacks and fallback order
- Fix: Android playback bug.
- Fix: Massive reorganization of code to make easier to navigate

1.1.4 (2010-11-06)

- Feature: Added loading spinner.
- Feature: Improved styles loaded checking.
- Feature: Added volume() function to get and set volume through the player.
- Fix: Fix issue where FF would loop video in background when ended.
- Fix: Bug in Chrome that shows poster & plays audio if you set currentTime too quickly.
- Fix: Bug in Safari where waiting is triggered and shows spinner when not needed
- Fix: Updated to show links if only unplayable sources and no Flash.
- Fix: Issue where if play button was loaded after play, it wouldn't hide.

1.1.3 (2010-10-19)

- Feature: Width/Height functions for resizing the player
- Feature: Made initial click & hold trigger new value on progress and volume
- Feature: Made controls not hide when hovering over them
- Feature: Added big play button as default starting control.
- Fix: Removed trailing comma that was breaking IE7
- Fix: Removed some vars from global scope
- Fix: Changed a document.onmousemove to an eventListener to prevent conflicts
- Fix: Added a unique ID to FlowPlayer demo object to fix a FlowPlayer bug. Thanks @emirpprime.
- Fix: Safari error on unloaded video

1.1.2 (2010-09-20)

- Added a fix for the poster bug in iPad/iPhone
- Added more specificity to styles

1.1.1 (2010-09-14)

- First Formally Versioned Release
  
1.0.0 (2010-05-18)

- First released

A simple package to deal with ISO 8601 date time formats.

ISO 8601 defines a neutral, unambiguous date string format, which also
has the property of sorting naturally.

e.g. YYYY-MM-DDTHH:MM:SSZ or 2007-01-25T12:00:00Z

Currently this covers only the most common date formats encountered, not
all of ISO 8601 is handled.

Currently the following formats are handled:

* 2006-01-01T00:00:00Z
* 2006-01-01T00:00:00[+-]00:00

I'll add more as I encounter them in my day to day life. Patches with 
new formats and tests will be gratefully accepted of course :)

References:

* http://www.cl.cam.ac.uk/~mgk25/iso-time.html - simple overview

* http://hydracen.com/dx/iso8601.htm - more detailed enumeration of
  valid formats.

See the LICENSE file for the license this package is released under.

playground
==========

Tools for automated test deployments

[Khan Academy](http://www.khanacademy.org/)'s core mission is to "provide a free world-class education for anyone anywhere", and as [70% of the world's population is without access to the internet](http://en.wikipedia.org/wiki/Global_Internet_usage), primarily in the developing world, providing an alternative delivery mechanism for Khan Academy content is key to fulfilling this mission.

[KA Lite](http://kalite.learningequality.org/) is a lightweight [Django](https://www.djangoproject.com/) web app for serving core Khan Academy content (videos and exercises) from a local server, with points and progress-tracking, without needing internet connectivity. 

#### Primary use cases include:
* For servers/**computer labs located in remote schools**, which could be slowly syncing with a central server over a cell/satellite network or via USB keys.
* In **correctional facilities** and other environments where providing educational materials is of value, but users cannot be given general internet access.
* **Mobile school "vans"**, which transport a server and multiple laptops/tablets between a number of schools (or orphanages, community centers, etc) in remote communities on a rotating basis, and syncing up with a central database (to download new content and upload analytics) when in an area with internet connectivity.

#### We would love for you to get involved!
* **Learn how you can contribute code on our [KA Lite GitHub Wiki](https://github.com/learningequality/ka-lite/wiki)** 
* **Report bugs by [creating issues](https://github.com/learningequality/ka-lite/wiki/Report-Bugs-by-Creating-Issues)**
* **Read more about the project's motivation** at ["Introducing KA Lite, an offline version of Khan Academy"](http://jamiealexandre.com/blog/2012/12/12/ka-lite-offline-khan-academy/).


Official website: http://kalite.learningequality.org/

---
#### License information:

The KA Lite sourcecode itself is open-source [MIT licensed](http://opensource.org/licenses/MIT), and the other included software and content is licensed as described in the [LICENSE](https://raw.github.com/learningequality/ka-lite/master/LICENSE) file. Please note that KA Lite is not officially affiliated with, nor maintained by, Khan Academy, but rather makes use of Khan Academy's open API and Creative Commons content, which may only be used for non-commercial purposes.

