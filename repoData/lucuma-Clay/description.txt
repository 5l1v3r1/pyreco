# Authors

Clay is written and maintained by the Lúcuma Team and various contributors.


Project Leader / Developer:

- Juan-Pablo Scaletti (jpscaletti / lucuma)


Contributors:

- przerull
- Muhammad Alkarouri (malkarouri)
- Alexander Zayats (z4y4ts)

# Clay Changelog


## Version 2.7

- The settings is now a python file for extra flexibility (thanks to @przerull)


## Version 2.6

- You can now create new projects from Git/Hg URLs or local folders.
    
    clay new myproject git@github.com:lucuma/demo.git

- Added Markdown support with automatic source code highlighting. 

- Fix bug with the Jinja IncludeWith extension and line breaks


## Version 2.5

- GET and POST values are automatically added to the context.


## Version 2.4

- Dropped the Werkzeug's server for the more robust CherryPy's Server (Cheroot).

- Added pattern matching (UNIX style) to the lists of FILTER and IGNORE.

- Many improvements to the `active` helper function:

    * You can now specify many url patterns as arguments without having to
      use a list. Eg:

        {{ active('/url1/', '/url2/', '/url3/', partial=True) }}

    * Added pattern matching

        {{ active('/foo/*') }}

    * Relative URLs now work as well. For example, if the current URL is
      `/foo/bar.html`, this will match:

        {{ active('bar.html') }}


## Version 2.3

- _index.txt lists all the pages that also would appear in _index.html.


## Version 2.1 - 2.2

- Several bugfixes


## Version 2.0

TDD rewrite. Most important new features:

- _index.html now is viewable in run mode.

- No need to filter non-html files. Only those ending in ".html" or ".tmpl" are processed as templates.

- Adaptative run port (if it is taken, Clay try to use the next one).

- The "not found" page now shows the real missing templates (for example, when an "imported" template is the one missing).


## Archivos estáticos
¿Que hacer con las imágenes, hojas de estilo, scripts, etc.?

Una buena idea es ponerlos dentro de una carpeta `static`, que es como están en el proyecto por defecto, pero es solo una forma de organizarlos: para Clay es lo mismo si están diréctamente en `source` o dentro de cualquier subcarpeta. La carpeta `static` no tiene nada de especial.

Si el nombre de un archivo no termina en `.html` o `.algo.tmpl`, 
no será interpretado como plantilla, sino que se mostrará directamente.

## Enlazando otros archivos
Si usas subcarpetas en tu proyecto y por ejemplo, tiene un árbol  de archivos como este:

podrias estar tentada de enlazar archivos estáticos u otras páginas desde `b.html` de esta manera:

	href="../a.html"
	src="../static/main.js"

No lo hagas. Aunque funcione, te traerá problemas cuando quieras mover `b.html` a otra carpeta o, más aún, si estás usando `{% include … %}`. En vez de eso, **siempre enlaza otros archivos usando su ruta desde la raíz**. Por ejemplo:

		href="/a.html"
		src="/static/main.js"

Esto funcionará en el servidor de desarrollo y cuando generes una versión estática del sitio, Clay automáticamente los convertirá a los enlaces relativos correctos.







[Esta página será de intro a lo Apple]

## Clay
Clay es una herramienta para ayudar a maquetar sitios web, usando lorem ipsum sdsd sdsd dsd wd sd 


## Cambios rápidos sin esfuerzo (adiós al copiar y pegar)
Un cambio rápido en la cabecera no tiene por que significar cambiar 100 archivos. Con el sistema de plantillas de Clay, lo haces en un solo lugar.

## Lo escribes, lo tienes… en todas tus pantallas.
El servidor integrado de Clay significa que puedes interactuar con el sitio a medida que lo vas creando, como si fuera una web de verdad. Rutas absolutas, AJAX, etc., todo funciona sin tener que instalar nada extra o "compilar" el sitio.
Incluso puedes verlo, en tiempo real, en otros dispositivos. ¡Que mejor manera de probar la versión movil que en un teléfono de verdad!

## Increíblemente potente.
No repitas diez veces el mismo código
El revolucionario sistema de plantillas de Clay significa que trabajas menos. No querrás regresar nunca más a la manera antigua de hacer las cosas.

## Listo para el cliente en un instante
Puedes tener una versión "compilada" del sitio en un instante: los HTMLs de toda la vida listos para enviárselos a un cliente o al equipo de desarrollo.

## Pensamos en todos los detalles
- Cuando compilas o mientras desarrolla, un "_index.html" también se genera con una lista de todas las páginas, inclusive esas a los que no puedes llegar navegando normalmente, como la 404.html. Así no tienes por que recordar los nombres de las páginas o listarlas en un email. ¡Práctico!
- ¿Simular la página activa en la navegación principal? Muy fácil.
- Los valores que pongas en tu `settings.yml` los podrás usar en todo el sitio.







## Macros

Muchas veces quieres repetir un bloque de código solo cambiando algunos detalles, por ejemplo, si en un listado de noticias quieres que sus títulos no sean iguales, aunque el resto del  HTML no cambie. Podrías crear varios archivos ligéramente diferentes e insertarlos con `{% include … %}`, pero hay una mejor forma: **macros**!

El concepto de un macro es sencillo: unas bloque de código, igual que un *include*, pero con uno o varios textos que puedes reemplazar por otros, al momento de insertarlo.

Por ejemplo, en vez de tener cinco archivos, casi idénticos, y hacer:

````jinja
{% include "noticia-1.html" %}
{% include "noticia-2.html" %}
{% include "noticia-3.html" %}
{% include "noticia-4.html" %}
{% include "noticia-5.html" %}
````

tienes un solo macro llamado `noticia` y, en cambio, escribes:

````jinja
{{ noticia('Lorem ipsum') }}
{{ noticia('Noticia muy interesante') }}
{{ noticia('Título que tiene cinco palabras') }}
{{ noticia('Lalala') }}
{{ noticia('abc defghi') }}
````

la ventaja es que, cuando quieras cambiar algo del código de la noticia, solo es un solo archivo que actualizar en vez de cinco.

### Escribiendo un macro

````jinja
{% macro noticia(titulo) %}
<article>
	<h1>{{ titulo }}</h1>
	<p>Lorem ipsum ad his scripta blandit partiendo, eum fastidii accumsan euripidis in, eum liber hendrerit an.</p>
</article>
{% endmacro %}
````

Puedes definir un macro donde quieras pues, hasta que lo llames, no se mostrará en el HTML, pero para poder llamarlo desde distintas páginas, escribámoslo en un archivo separado, llamado, por ejemplo "_macros.html_".

Para usarlo en una página, como el macro no está escrito en el mismo archivo, lo primero es "importar" _macros.html_ y darle un nombre.

````jinja
{% extend "base.html" %}
{% import "macros.html" as m %}

{% block content %}
  <h1>Noticias</h1>
  {{ m.noticia('Lorem ipsum') }}
  {{ m.noticia('Noticia muy interesante') }}
  {{ m.noticia('Título que tiene cinco palabras') }}
{% endblock %}
````

Nota que ahora llamamos al macro usando `m.noticia(…)`.

Nuestro macro puede tener más de un texto reemplazables (llamémoslos "parámetros"), por ejemplo, una fecha o un autor:

````jinja
{% macro noticia(titulo='Lorem ipsum', fecha='05/05/2013', autor='Admin') %}
<article>
	<h1>{{ titulo }}</h1>
	<h4>Publicado el {{ fecha }}</h4>
	<p>Lorem ipsum ad his scripta blandit partiendo, eum fastidii accumsan euripidis in, eum liber hendrerit an.</p>
</article>
{% endmacro %}
````

Aquí además hemos usado un **valor por defecto**, que son los que se usarán a menos que los sobreescribas, así que no es necesario llamar al macro pasándole todos los valores. De hecho,  usando los nombres de los parámetros, ni siquiera hay por que pasárselos en orden.

````jinja
{% extend "base.html" %}
{% import "macros.html" as m %}

{% block content %}
  <h1>Noticias</h1>
	{{ m.noticia('lalala', '24/12/2009') }}
  {{ m.noticia(autor='Anon', titulo='Lorem ipsum ad') }}
  {{ m.noticia(fecha='2/2/1989') }}
  {{ m.noticia() }}
{% endblock %}
````

### Por último
Otra diferencia con los include, es que un archivo puede contener más de un macro. Basta importar ese archivo una vez por página y llamar al macro que necesites.

# Clay

[![Build Status](https://travis-ci.org/lucuma/Clay.png)](https://travis-ci.org/lucuma/Clay)

**An amazing prototyping tool.**

http://lucuma.github.com/Clay

With Clay you can forget about making changes to dozens of HTML files just because you need to add a link in the footer.

You can also use it to prototype your AJAX-driven application or the responses of sending forms, because it acts like a real server.


## Instructions

Run the development server with

    $ clay run

or generate a static version of the site

    $ clay build


## Quickstart


    $ clay new myappname

will generate a new app container with the following structure::

    myappname
      ├── source/
      ├─────── static/
      ├── README.md
      └── settings.yml

Inside that folder, run the development server with:

    $ clay run

and your site'll be available at `http://localhost:8080/`.

Anything you put under `source` will be render as a page. For instance `source/page.html` will be visible at `http://localhost:8080/page.html`, and `source/foo/bar.json` at `http://localhost:8080/foo/bar.json`.

To generate a static version of your site, stop the server (with `Control + C`) and run:

    $ clay build

and all the templates will be processed and the result stored inside the `build` folder.


## How to install

Just run

    sudo pip install clay

and you're ready to go.


## Templates

The real power of Clay comes by using the Jinja2 template syntax. 

You can make a single file, (for instance, your header) and included it many times using:
    
    {% include "header.html "%}

You can also use a powerful feature called _template inheritance_: inside the `source` folder you'll find a file called `base.html`. This is a page skeleton shared among the rest of HTML templates. You put in there anything you want to be repeated in every page, like the doctype declaration or maybe navigation links and a footer. You change something there and the rest of the pages will be automatically updated. Much more easy than manually search and replace a bunch of files!

The rest of the files, like `index.html`, are composed of **blocks**, like

    {% block title %}Welcome to Clay{% endblock %}

Any content you put *inside* those blocks will be used to fill the same-named blocks in `base.html`. In this case to fill the `<title>` tag.

You can create new blocks for your templates. You can even create new base files, just change in your templates the base that they will use, by updating the line that says:

    {% extends "base.html" %}

You can use more than just HTML: JSON, csv, plain text, etc. Any text-based format will be ok.

Jinja2 templates are much more than just template inheritance. For more advaced features check the [official documentation] (http://jinja.pocoo.org/docs/templates/).


---------------------------------------
***Happy coding!***


---------------------------------------
© [Lúcuma] (http://lucumalabs.com).<br />
See `AUTHORS.md` for more details.<br />
License: [MIT License] (http://www.opensource.org/licenses/mit-license.php).

========
Clay
========

**A rapid prototyping tool.**

With Clay you can forget about making changes to dozens of HTML files
just because you need to add a link in the footer.
 
You can also use it to prototype your AJAX-driven application or the
responses of sending forms, because it acts like a real server.

Quickstart
----------

::

    $ clay new myappname

will generate a new app container with the following structure::

    myappname
      ├── source/
      ├─────── static/
      ├── README.md
      └── settings.yml

Inside that folder, run the development server with::

    $ clay run

and your site'll be available at ``http://0.0.0.0:8080/``.

Anything you put under ``source`` will be render as a page. For instance,
``source/page.html`` will be visible at::

    http://0.0.0.0:8080/page.html

and ``source/foo/bar.json`` at::

    http://0.0.0.0:8080/foo/bar.json


To generate a static version of your site, stop the server (with
``Control + C``) and run::

    $ clay build

and all the templates will be processed and the result stored inside the
``build`` folder.


How to install
--------------

Just run::

    sudo pip install clay

and you're ready to go.


Happy coding!

