__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# validator.py documentation build configuration file, created by
# sphinx-quickstart on Fri Jan 24 01:02:35 2014.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.coverage',
    'sphinx.ext.viewcode',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'validator.py'
copyright = u'2014, Samuel Lucidi'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '0.4.0'
# The full version, including alpha/beta/rc tags.
release = '0.4.0'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'validatorpydoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
  ('index', 'validatorpy.tex', u'validator.py Documentation',
   u'Samuel Lucidi', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'validatorpy', u'validator.py Documentation',
     [u'Samuel Lucidi'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'validatorpy', u'validator.py Documentation',
   u'Samuel Lucidi', 'validatorpy', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False

########NEW FILE########
__FILENAME__ = test_validator
# The MIT License (MIT)

# Copyright (c) 2014 Samuel Lucidi <sam@samlucidi.com>

# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

from validator import *
from validator.ext import *
import pytest

class BaseClass(object):
    pass

class SubClass(BaseClass):
    pass

class TestValidator(object):

    def test_argspec_validator(self):
        def truth_func(a, b, c):
            pass
        def false_func(c, b, a):
            pass
        def truth_kw_func(a, b, c, d=1):
            pass
        def false_kw_func(a, b, c, d=2):
            pass

        validator = {
            "truthiness": [ArgSpec('a', 'b', 'c')],
            "falsiness": [Not(ArgSpec('a', 'b', 'c'))],
            "wrongnum": [Not(ArgSpec('a', 'b', 'c', 'd'))]
        }
        kw_validator = {
            "truthiness": [ArgSpec('a', 'b', 'c', d=1)],
            "falsiness": [Not(ArgSpec('a', 'b', 'c', d=1))],
        }
        values = {
            "truthiness": truth_func,
            "falsiness": false_func,
            "wrongnum": truth_func
        }
        values_kw = {
            "truthiness": truth_kw_func,
            "falsiness": false_kw_func,
        }
        assert validate(validator, values)[0]
        assert validate(kw_validator, values_kw)[0]

    def test_truthy_validator(self):
        validator = {
            "truthiness": [Truthy()],
            "falsiness": [Not(Truthy())]
        }
        str_value = {
            "truthiness": "test",
            "falsiness": ""
        }
        int_value = {
            "truthiness": 1,
            "falsiness": 0
        }
        bool_value = {
            "truthiness": True,
            "falsiness": False
        }
        assert validate(validator, str_value)[0]
        assert validate(validator, int_value)[0]
        assert validate(validator, bool_value)[0]

    def test_required_validator(self):
        validator = {
            "truthiness": [Required],
            "falsiness": []
        }
        str_value = {
            "truthiness": "test"
        }
        int_value = {
            "truthiness": 1
        }
        bool_value = {
            "truthiness": True
        }
        missing_value = {}
        assert validate(validator, str_value)[0]
        assert validate(validator, int_value)[0]
        assert validate(validator, bool_value)[0]
        validity, errors = validate(validator, missing_value)
        assert errors['truthiness'] == "must be present"

    def test_blank_validator(self):
        validator = {
            "truthiness": [Blank()],
            "falsiness": [Not(Blank())]
        }
        str_value = {
            "truthiness": "",
            "falsiness": "not_blank"
        }
        int_value = {
            "truthiness": 1,
            "falsiness": 0
        }
        bool_value = {
            "truthiness": True,
            "falsiness": False
        }
        assert validate(validator, str_value)[0]
        assert not validate(validator, int_value)[0]
        assert not validate(validator, bool_value)[0]

    def test_in_validator(self):
        validator = {
            "truthiness": [Truthy()],
            "falsiness": [Not(Truthy())]
        }
        str_value = {
            "truthiness": "test",
            "falsiness": ""
        }
        int_value = {
            "truthiness": 1,
            "falsiness": 0
        }
        bool_value = {
            "truthiness": True,
            "falsiness": False
        }
        assert validate(validator, str_value)[0]
        assert validate(validator, int_value)[0]
        assert validate(validator, bool_value)[0]

    def test_equals_validator(self):
        validator = {
            "truthiness": [Truthy()],
            "falsiness": [Not(Truthy())]
        }
        str_value = {
            "truthiness": "test",
            "falsiness": ""
        }
        int_value = {
            "truthiness": 1,
            "falsiness": 0
        }
        bool_value = {
            "truthiness": True,
            "falsiness": False
        }
        assert validate(validator, str_value)[0]
        assert validate(validator, int_value)[0]
        assert validate(validator, bool_value)[0]

    def test_not_validator(self):
        validator = {
            "test_truthy":  [Not(Truthy())],
            "test_equals":  [Not(Equals("one"))],
            "test_not_not": [Not(Not(Truthy()))],
            "test_in":      [Not(In(['one', 'two']))],
            "test_range":   [Not(Range(1, 10))],
            "test_pattern": [Not(Pattern("\d\d\d"))]
        }
        test_case = {
            "test_truthy": False,
            "test_equals": "two",
            "test_not_not": True,
            "test_in": "three",
            "test_range": 11,
            "test_pattern": "abc"
        }
        assert validate(validator, test_case)[0]

    def test_range_validator(self):
        validator = {
            "in_range": [Range(1, 10)],
            "out_of_range": [Not(Range(1, 10))],
            "exclusive_in_range": [Range(1, 10, inclusive=False)],
            "exclusive_out_of_range": [Not(Range(1, 10, inclusive=False))]
        }
        test_case = {
            "in_range": 1,
            "out_of_range": 11,
            "exclusive_in_range": 2,
            "exclusive_out_of_range": 1
        }
        assert validate(validator, test_case)[0]

    def test_instanceof_validator(self):
        validator = {
            "classy": [Required, InstanceOf(SubClass)],
            "subclassy": [Required, InstanceOf(BaseClass)],
            "not_classy": [Required, Not(InstanceOf(SubClass))],
            "not_subclassy": [Required, Not(InstanceOf(BaseClass))]
        }
        test_case = {
            "classy": SubClass(),
            "subclassy": BaseClass(),
            "not_classy": object(),
            "not_subclassy": 3
        }
        assert validate(validator, test_case)[0]

    def test_subclassof_validator(self):
        validator = {
            "is_subclass": [Required, SubclassOf(BaseClass)],
            "not_subclass": [Required, Not(SubclassOf(BaseClass))],
        }
        test_case = {
            "is_subclass": SubClass,
            "not_subclass": int
        }
        assert validate(validator, test_case)[0]

    def test_pattern_validator(self):
        validator = {
            "match": [Required, Pattern('\d\d\%')],
            "no_match": [Required, Not(Pattern('\d\d\%'))]
        }
        test_case = {
            "match": "39%",
            "no_match": "ab%"
        }
        assert validate(validator, test_case)[0]

    def test_conditional_validator(self):
        passes = {
            "if_true_passes": [Required, If(Equals(1), Then({"dependent_passes": [Equals(1)]}))],
            "if_false_passes": [Required, If(Equals(1), Then({"dependent_fails": [Equals(1)]}))],
        }
        fails = {
            "if_true_fails": [Required, If(Equals(1), Then({"dependent_fails": [Equals(1)]}))]
        }
        test_case = {
            "if_true_passes": 1,
            "if_false_passes": 2,
            "if_true_fails": 1,
            "dependent_passes": 1,
            "dependent_fails": 2
        }
        assert validate(passes, test_case)[0]
        assert not validate(fails, test_case)[0]

    def test_nested_validations(self):
        passes = {
            "foo": [Required, Equals(1)],
            "bar": [
                Required,
                {
                    "baz": [Required, Equals(2)],
                    "qux": [Required, {
                        "quux": [Required, Equals(3)]
                    }]
                }
            ]
        }
        fails = {
            "foo": [Required, Equals(2)],
            "bar": [
                Required,
                {
                    "baz": [Required, Equals(3)],
                    "qux": [Required, {
                        "quux": [Required, Equals(4)]
                    }]
                }
            ]
        }
        test_case = {
            "foo": 1,
            "bar": {
                "baz": 2,
                "qux": {
                    "quux": 3
                }
            }
        }
        assert validate(passes, test_case)[0]
        assert not validate(fails, test_case)[0]

    def test_optional_validations(self):
        optional_validation = {
            "foo": [Equals(1)],
            "bar": [{
                "baz": [Equals(2)],
                "qux": [Equals(3)]
            }]
        }
        test_case = {
            "bar": {"baz":2}
        }
        assert validate(optional_validation, test_case)[0]

    def test_contains_validator(self):
        validation = {
            "foo": [Required, Contains("1")],
            "qux": [Required, Not(Contains("1"))]
        }
        test_case_list = {
            "foo": ["1", "2", "3"],
            "qux": ["2", "3", "4"]
        }
        test_case_dict = {
            "foo": {"1": "one", "2": "two"},
            "qux": {"2": "two", "3": "three"}
        }
        test_case_substring = {
            "foo": "test1case",
            "qux": "barbaz"
        }
        assert validate(validation, test_case_list)[0]
        assert validate(validation, test_case_dict)[0]
        assert validate(validation, test_case_substring)[0]

    def test_length_validator(self):
        with pytest.raises(ValueError):
            Length(-1)
        with pytest.raises(ValueError):
            Length(0)
        passes = {
            "foo": [Required, Length(5), Length(1, maximum=5)],
            "bar": [Required, Length(0, maximum=10)]
        }
        fails = {
            "foo": [Required, Length(8), Length(1, maximum=11)],
            "bar": [Required, Length(0, maximum=3)]
        }
        test_case = {
            "foo": "12345",
            "bar": [1, 2, 3, 4, 5],
        }
        assert validate(passes, test_case)[0]
        assert not validate(fails, test_case)[0]

    def test_validator_without_list(self):
        validation = {
            "foo": Equals(5),
            "bar": Required
        }
        test_case = {
            "foo": 5,
            "bar": "present"
        }
        assert validate(validation, test_case)[0]

########NEW FILE########
