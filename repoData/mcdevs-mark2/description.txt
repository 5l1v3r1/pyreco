# installation

## requirements

* UNIX-like operating system (Linux, Mac OS X, BSD)
* python 2.6/2.7 (+ dev package for psutil installation)
* psutil
* urwid 1.x
* twisted
* twisted-web
* twisted-words (for IRC support)
* feedparser (for RSS support)
* pyopenssl (for push notifications and IRC over SSL)

### debian/ubuntu

This should suffice:

    $ sudo apt-get install python-dev python-pip
    $ sudo pip install -r requirements.txt

### centos

CentOS and some other distros ship an older version of python. First check you have python 2.6 or 2.7:

    $ python2.6 -V
    $ python2.7 -V

If at least one of them works, you should be able to do:

    $ sudo yum install python-devel
    $ sudo easy_install pip
    $ sudo pip install -r requirements.txt

Otherwise, you need to install python 2.7. A decent guide for centos is
[located here](http://toomuchdata.com/2012/06/25/how-to-install-python-2-7-3-on-centos-6-2/). Be sure to follow the
instructions for installing distribute also.

Next, install twisted from the package on [their website](http://twistedmatrix.com/). Don't use easy_install - you
won't get the binaries that ship with twisted.

easy_install for python 2.7 is probably in `/usr/local/bin/easy_install-2.7`. You should use it to install the remaining
mark2 dependencies:

    $ sudo /usr/local/bin/easy_install-2.7 psutil urwid feedparser

## installation

mark2 doesn't need to be installed to a particular directory, but if you have no reasonable ideas `/usr/mark2` will be
okay. First, download mark2:

    $ git clone https://github.com/mcdevs/mark2.git

If you don't have git (and you probably should!) you could:

    $ wget https://github.com/mcdevs/mark2/archive/master.tar.gz
    $ tar zxvf master.tar.gz
    $ rm master.tar.gz
    $ mv mark2-master mark2

Next, symlink the `mark2` script into your executable path:

    $ sudo ln -s /usr/mark2/mark2 /usr/bin/mark2

If you run mark2 on a server where you expect multiple system users to start servers, you *need* to create a dedicated
user to run servers under.

    $ sudo adduser mcservers

To start a server, run `mark2 start` as `sudo -u mcservers mark2 start ...`

### tips

If your server has a strange name, you have a couple of options:

1. add it to `mark2.jar-path` in your mark2.properties
2. specify the full path to the jar in `mark2 start`

If your servers all reside in one directory, you may want to add a start
helper to your path:

    #!/bin/bash
    mark2 start /path/to/servers/$1

And run it like

    $ mcstart pvp

Likewise if `mark2 attach -n blah` becomes a little too much, you could always
`alias at='mark2 attach -n'`

# mark2 [![Build Status](https://travis-ci.org/mcdevs/mark2.png?branch=master)](https://travis-ci.org/mcdevs/mark2)

mark2 is a minecraft server wrapper, written in python and twisted. It aims to be *the* definitive wrapper, providing a
rich feature-set and a powerful plugin interface. It has no requirement on craftbukkit.

## features

* Your server runs in the background
* Multiple users can attach at once, with their own local prompt and command buffer
* Built in monitoring using cpu, memory, players and connectivity
* Rich screen/tmux-like client with built-in monitoring, tab-complete, command history, etc

## plugins

* Powerful scheduling plugin, with a cron-like syntax. You can hook onto events like `@serverstopped` to run a
  cartograph, or run `save` on an interval
* Automatically restart the server when it crashes, runs out of memory, or stops accepting connections
* Notifications via Prowl, Pushover, NotifyMyAndroid or email if something goes wrong.
* Relay in-game chat to IRC, and vice-versa
* MCBouncer ban support, even on a vanilla server.
* Read an RSS feed (such as a subreddit feed) and announce new entries in-game
* Back up your map and server log when the server stops
* Print a random message at an interval, e.g. '[SERVER] Lock your chests with /lock'
* Respond to user commands, e.g. '<Notch> !teamspeak' could `msg Notch Join our teamspeak server at xyz.com`

see INSTALL.md for requirements and installation instructions

see USAGE.md for details on how to use mark2

# usage

## config

On first start, mark2 will prompt you to edit the global config file, located at `config/mark2.properties`.

To set up a server with a different config, create a `mark2.properties` file in the same directory as the server jar.
mark2 will look for config values in this file first, and will check the global config if it can't find the key.

The following plugins also require config files in the server directory:

* script: `scripts.txt`: scriptable event handlers and recurring tasks
* alert: `alerts.txt`: e.g. "Lock your chests with /lock! ..."
* trigger: `triggers.txt`: e.g. "!teamspeak,Join our teamspeak server at xyz"

There are examples of these in the `samples/` directory

## start

To start a minecraft server:

    $ mark2 start /path/to/servers/server-name

If you're already in the right directory, you can omit the path.

mark2 now refers to your server by the name of the directory containing the server jar, in this case 'server-name'

If you're on a multi-user system, you'll need to create a dedicated user for running your servers. See INSTALL for
details.

## attach

To attach to a wrapped server:

    $ mark2 attach -n server-name

Swap out 'server-name' for whatever your server is actually called, for example 'pvp' or 'creative'.

If you omit the 'name' parameter, you'll just attach to the first server alphabetically. If you only run one server, you
may as well omit this param.

Much of the client is configurable. See `resources/mark2rc.default.properties` for the default settings, and drop a file
called `.mark2rc.properties` in your home directory to customize.

### controls

* Use command scrollback with the up and down arrow keys
* Scroll with pageup and pagedown
* Press tab to auto-complete a player name, or write 'say ' if you haven't entered any text
* Switch between servers with ctrl + left/right arrow key.
* Switch to the players list with ctrl + p
* Move back a menu level with backspace, or move straight to the first with esc
* Press either esc or backspace while on the player menu to focus the prompt
* Press f8 or ctrl-c to exit

Run `~help` to see what mark2 commands are available.

If you prefix a line with `#`, it acts as a comment that isn't interpretted. This is handy for talking to other attached
admins.

## send commands

You can send commands to the server from the command line, for example:

    $ mark2 send -n server-name kick Notch

## stopping/restarting

    $ mark2 stop -n server-name
    $ mark2 kill -n server-name

`stop` will attempt to gracefully shut down the server, and will kill it after a configurable timeout.

