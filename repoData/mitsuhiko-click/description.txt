Flask Sphinx Styles
===================

This repository contains sphinx styles for Flask and Flask related
projects.  To use this style in your Sphinx documentation, follow
this guide:

1. put this folder as _themes into your docs folder.  Alternatively
   you can also use git submodules to check out the contents there.
2. add this to your conf.py:

   sys.path.append(os.path.abspath('_themes'))
   html_theme_path = ['_themes']
   html_theme = 'flask'

The following themes exist:

- 'flask' - the standard flask documentation theme for large
  projects
- 'flask_small' - small one-page theme.  Intended to be used by
  very small addon libraries for flask.

The following options exist for the flask_small theme:

   [options]
   index_logo = ''              filename of a picture in _static
                                to be used as replacement for the
                                h1 in the index.rst file.
   index_logo_height = 120px    height of the index logo
   github_fork = ''             repository name on github for the
                                "fork me" badge

$ aliases_

  aliases is a fairly advanced example that shows how
  to implement command aliases with click.  It uses a
  subclass of the default group to customize how commands
  are located.

  It supports both aliases read from a config file as well
  as automatic abbreviations.

  The aliases from the config are read from the aliases.ini
  file.  Try `aliases st` and `aliases ci`!

Usage:

  $ pip install --editable .
  $ aliases --help

$ colors_

  colors is a simple example that shows how you can
  colorize text.

  For this to work on Windows, colorama is required.

Usage:

  $ pip install --editable .
  $ colors

$ complex_

  complex is an example of building very complex cli
  applications that load subcommands dynamically from
  a plugin folder and other things.

  All the commands are implemented as plugins in the
  `complex.commands` package.  If a python module is
  placed named "cmd_foo" it will show up as "foo"
  command and the `cli` object within it will be
  loaded as nested click command.

Usage:

  $ pip install --editable .
  $ complex --help

$ inout_

  inout is a simple example of an application that
  can read from files and write to files but also
  accept input from stdin or write to stdout.

Usage:

  $ pip install --editable .
  $ inout input_file.txt output_file.txt

$ naval_

  naval is a simple example of an application that
  is ported from the docopt example of the same name.

  Unlike the original this one also runs some code and
  prints messages and it's command line interface was
  changed slightly to make more sense with established
  POSIX semantics.

Usage:

  $ pip install --editable .
  $ naval --help

Click Examples

  This folder contains various click examples.  Note that
  all of these are not runnable by themselves but should be
  installed into a virtualenv.

  This is done this way so that scripts also properly work
  on Windows and in virtualenvs without accidentally executing
  through the wrong interpreter.

  For more information about this see the documentation:
    http://click.pocoo.org/setuptools/

$ repo_

  repo is a simple example of an application that looks
  and works similar to hg or git.

Usage:

  $ pip install --editable .
  $ repo --help

$ termui_

  termui showcases the different terminal UI helpers that
  click provides.

Usage:

  $ pip install --editable .
  $ termui --help

$ validation_

  validation is a simple example of an application that
  performs custom validation of parameters in different
  ways.

  This example requires Click 2.0 or higher.

Usage:

  $ pip install --editable .
  $ validation --help

$ click_

  click is a Python package for creating beautiful command line interfaces
  in a composable way with as little amount of code as necessary.  It's the
  "Command Line Interface Creation Kit".  It's highly configurable but comes
  with good defaults out of the box.

  It aims at making writing command line tools fun and quick without causing
  user frustration at not being able to implement an intended CLI API.

  Click in three points:
  
  -   arbitrary nesting of commands
  -   automatic help page generation
  -   supports lazy loading of subcommands at runtime  

  Read the docs at http://click.pocoo.org/

  This library is work in progress.  Please give feedback!

