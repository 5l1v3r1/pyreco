===
RED
===

This is RED, the Resource Expert Droid.

RED checks HTTP resources for feature support and common HTTP problems. For
more information, see <http://redbot.org/about/>.

.. image:: https://secure.travis-ci.org/mnot/redbot.png?branch=master
   :alt: build status
   :target: http://travis-ci.org/mnot/redbot


Requirements
------------

RED needs:

1. Python 2.6 or greater; see <http://python.org/>
2. The Thor HTTP library; see <http://github.com/mnot/thor/>
3. To use RED on the Web, you'll need a Web server that implements the CGI interface; e.g., Apache <http://httpd.apache.org/>.


Installing RED
--------------

Unpack the RED tarball. There are a number of interesting files:

- bin/webui.py - the Web CGI script for running RED
- bin/redbot - the command-line interface
- redbot/ - RED's Python library files
- share/ - RED's CSS stylesheet and JavaScript libraries

To install from source (e.g., if you clone from github):: 

  python setup.py install
  
installs RED's libraries as well as the command-line version as 'redbot'. 

Setting up your Web Server
--------------------------

To run RED from the Web, place webui.py where you wish it to be served from by
the Web server. For example, with Apache you can put it in a directory and add
these configuration directives (e.g., in .htaccess, if enabled)::

  AddHandler cgi-script .py
  DirectoryIndex webui.py
  
If the directory is the root directory for your server "example.com", 
this will configure RED to be at the URI "http://example.com/".

The contents of the share directory* also need to be made available on the
server; by default, they're in the 'static' subdirectory of the script's URI.
This can be changed using the 'html.static_root' configuration variable in
webui.py.

You should also create the directory referenced by the 'save_dir'
configuration variable in webui.py, and make sure that it's writable to the
Web server process. This is where RED stores state files, and you should
configure a cron job to regularly clean it. For example::

  0 * * * * find /var/state/redbot/ -mmin +360 -exec rm {} \;

If you don't want to allow users to store responses, set save_dir to 'None'.  

* Note that you really only need script.js and style.js, but it doesn't hurt to have the rest.

Running under mod_python
------------------------

It's also possible to run RED as a mod_python handler. For example::

  AddHandler mod_python .py
  PythonHandler webui::mod_python_handler

If you use mod_python, make sure your server has enough memory for the 
number of Apache children you configure; each child should use anywhere from
20M-35M of RAM.


Support, Reporting Issues and Contributing
------------------------------------------

See <http://REDbot.org/project> to give feedback, report issues, and
contribute to the project. You can also join the redbot-users mailing list
there.

Credits
-------

Icons by Momenticon <http://momenticon.com/>. REDbot also includes code
from jQuery <http://jquery.com/> and prettify.js 
<http://code.google.com/p/google-code-prettify/>.

License
-------

Copyright (c) 2008-2013 Mark Nottingham

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


Header Handlers
===============

This directory contains header handlers for REDbot. They are in charge of
taking the values values for each header, parsing it, setting any
header-specific notes that are appropriate, and then joining the values
together in a data structure that represents the header.

Note that not all tests are in these files; ones that require coordination 
between several headers' values, for example, belong in a separate type of 
test (as cache testing is done, in _cache\_check.py_). This is because headers 
can come in any order, so you can't be sure that another header's value will
be available when your header parser runs.


Adding New Headers
------------------

It's pretty easy to add support for new headers into REDbot. To start, fork
the source and add a new file into this directory, whose name corresponds to
the header's name, but in all lowercase, and with special characters (most
commonly, _-_) transposed to an underscore.

For example, if your header's name is `Foo-Example`, the appropriate filename
is `foo_example.py`.

If your header name doesn't work with this convention, please raise an issue
in [REDbot's tracker](https://github.com/mnot/redbot/issues).

### The _parse_ Function

Each header file should define a _parse_ function. This function must take
the following parameters:

 * `subject` - the subject ID of the test, for reference in notes.
 * `value` - a header field value; see below.
 * `msg` - the current HttpMessage object (either HttpRequest or HttpResponse).

A value is a header field value; by default, it corresponds to a header line.
For example:

    Cache-Control: foo, bar
    Cache-Control: baz
  
would be sent in as two calls to _parse_; one as "foo, bar" and one as "baz". 

The _parse_ function must return a data structure that's a suitable
representation of the header field; it could be a dictionary, a list, an
integer, a string, etc. Take a look at similar headers to see what data
structures they use.

_parse_ is where you set notes that are specific to a header field-value,
rather than all field-values for that header.

If parsing fails, it should return `None`.

### The _join_ function

Each header file also needs to define a _join_ function. This coalesces the
output of one or more calls to _parse_ to produce a single data structure
that represents that header's value for the HTTP message.

It takes the following parameters:

 * `subject` - the subject ID of the test, for reference in notes.
 * `values` - a list of values, returned from _parse_.
 * `msg` - the current HttpMessage object.
 
Use _join_ to set notes that need to have the entire field's composite
value, rather than just one portion. Usually, these are tests for the 
header's semantics.


### Decorators for _parse_

There are also some handy decorators in _\_\_init\_\_.py_ that help with
parsing, including:

 * `GenericHeaderSyntax` - Splits comma-separated list values, so that  
   `values` contains a value per item.
   
    For example, `Cache-Control: foo, bar` will get `["foo", "bar"]` if 
    _parse_ is decorated with `@GenericHeaderSyntax`.
    
    Note that this decorator can ONLY be used on headers whose syntax does
    not allow an unquoted comma to appear; for example, it cannot be used
    on the `Set-Cookie` syntax, because it allows a bare date that includes
    a comma.
 
 * `CheckFieldSyntax` - Checks the syntax of a field against a regex; if
   it does not match, a warning note will be set, and None will be
   forcibly returned; the code in _parse_ will not be run.
   
   This decorator takes two arguments; `expression`, containing a regex, and
   `reference`, which is a URI that's used to point people to more information
   about the syntax, if there's an error.
   
   `regex` is evaluated with `re.VERBOSE`, and already has start and end
   anchors, as well as whitespace trimming; see the code for details.
   
   See _message.http_syntax.py_ for some handy pre-defined regexen, based upon 
   the HTTP ABNF.

* `RequestHeader` assures that the header is only used in requests.

* `ResponseHeader` is just like `RequestHeader`, except that it assures that
  the header is only used in responses.


### Decorators for _join_

Likewise, the following decorators cqn be used for the _join_ function:

 * `SingleFieldValue` - For use on field values that expect only one value. 
   If more than one is present, it will set a warning note, and only send
   through the last value in `values`.   


### Setting Notes

_parse_ can and should set header-specific notes as appropriate. Notes
are collected in _speak.py_; see that file for details of the appropriate 
format. They are set by calling `add_note` on the `msg` object that's
passed to _parse_.

`add_note` expects the following parameters:

 * `name` - the header field name
 * `note` - a subclass of `redbot.speak.Note` (usually, one 
   you've added)
 * Optionally, any number of keyword arguments that are passed to the
   note's strings when they're formatted. See existing notes for 
   examples.

When writing new notes, it's important to keep in mind that the `text`
field is expected to contain valid HTML; any variables you pass to it will
be escaped for you before rendering.


### Writing Tests

You can test your _parse_ function by subclassing
`redbot.message.headers.HeaderTest`; it expects the following class
properties:

 * `name` - the header field-name
 * `inputs` - a list of header field-values, one item per line. 
   E.g., `["foo", "foo, bar"]`
 * `expected_out` - the data structure that _parse_ should return, given
   the inputs
 * `expected_err` - a list of `redbot.speak.Note` classes that are expected
   to be set with `add_note` when parsing the inputs
    
You can create any number of tests this way; they will be run automatically 
when _tests/test\_headers.py_ is run.

Icons courtesy Momenticon <http://momenticon.com/>. 
=========================
Unicorn Interface for RED
=========================

This is an adapter for running RED in Unicorn, the W3C's unified validator.
See <http://code.w3.org/unicorn> for more information.


