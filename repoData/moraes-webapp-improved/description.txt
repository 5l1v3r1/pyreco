This is the directory used for custom static files.

This is the directory used for custom templates.

Introduction
------------

In this project I am developing a new, experimental datastore
API for the Google App Engine Python runtime. I am doing this as a
Google employee but using an open source development style as I
believe this project will benefit from early user feedback.

Eventually, when the project is sufficiently mature, the code will
(hopefully) become a standard component of the App Engine Python SDK
and the Python runtime. Until then, however, the way to use this code
is to check it out from the repository and copy it into your
application.

Until the code is integrated into the SDK and runtime, I am not going
to worry about backwards compatibility between versions of this
experimental code. You are not required to check out the trunk,
however I do not plan to fix bugs in older branches.

See the file LICENSE for the open source licensing conditions (which
are the same as for the App Engine SDK).

--Guido van Rossum <guido@google.com>


Overview
--------

The code is structured into two subdirectories:

- ndb: This is the main code base.  Notable submodules are
  key.py, model.py, query.py, eventloop.py, tasklets.py, and context.py.
  For each module foo.py there's a corresponding foo_test.py which
  contains unit tests for that module.

- demo: This is where demo programs live.  There currently is only
  one, main.py, which implements a simple guestbook.

How To
------

You need to separately download and install the App Engine Python SDK,
version 1.5.1 or later.  NOTE: previous versions don't work!!!!!!!!!
(If you don't know where to find that you are not ready to play with
this code. :-) Assuming the SDK lives at /usr/local/google_appengine,
you need to add that directory to your $PYTHONPATH environment
variable.  You should then be able to run something like this:

  >>> from ndb import context

If this works your setup is correct.

To run the tests, use

  make test

To run the tests with coverage, install the coverag.py package from
http://nedbatchelder.com/code/coverage/ and then use

  make coverage

To run the demo app on localhost:8080, use

  make serve

See the Makefile for more details.  Sorry, Windows users.

Edgewall Documentation Utilities
================================

This repository contains distutils commands for generating offline documentation
from reStructuredText files and Python source code. These tools are shared among
a couple of different Edgewall projects to ensure common style and
functionality.

About Babel
===========

Babel is a Python library that provides an integrated collection of
utilities that assist with internationalizing and localizing Python
applications (in particular web-based applications.)

Details can be found in the HTML files in the `doc` folder.

For more information please visit the Babel web site:

  <http://babel.edgewall.org/>

Flask Sphinx Styles
===================

This repository contains sphinx styles for Flask and Flask related
projects.  To use this style in your Sphinx documentation, follow
this guide:

1. put this folder as _themes into your docs folder.  Alternatively
   you can also use git submodules to check out the contents there.
2. add this to your conf.py:

   sys.path.append(os.path.abspath('_themes'))
   html_theme_path = ['_themes']
   html_theme = 'flask'

The following themes exist:

- 'flask' - the standard flask documentation theme for large
  projects
- 'flask_small' - small one-page theme.  Intended to be used by
  very small addon libraries for flask.

The following options exist for the flask_small theme:

   [options]
   index_logo = ''              filename of a picture in _static
                                to be used as replacement for the
                                h1 in the index.rst file.
   index_logo_height = 120px    height of the index logo
   github_fork = ''             repository name on github for the
                                "fork me" badge

Mako is licensed under an MIT-style license (see LICENSE).
Other incorporated projects may be licensed under different licenses.
All licenses allow for non-commercial and commercial use.

To install:

    python setup.py install

SVN checkouts also inlcude setup.cfg file allowing setuptools to create 
an svn-tagged build. 

Documentation is available in HTML format in the ./doc/ directory.

Unit tests run via nose, and are available via setup.py:

    python setup.py test
 
Or direct nose usage:

    nosetests -v

For Python 3 information, see README.py3k.

good luck !


=================
PYTHON 3 SUPPORT
=================

Python 3 support in Mako is provided by the Python 2to3 script.

Installing Distribute
---------------------

Distribute should be installed with the Python3 installation.  The
distribute bootloader is included.

Running as a user with permission to modify the Python distribution,
install Distribute:

    python3 distribute_setup.py

Installing Mako in Python 3
---------------------------------

Once Distribute is installed, Mako can be installed directly. 
The 2to3 process will kick in which takes several minutes:

    python3 setup.py install

Converting Tests, Examples, Source to Python 3
----------------------------------------------

To convert all files in the source distribution, run 
the 2to3 script:

    2to3 -w mako test

If using 3.1's 2to3 tool, the --no-diffs flag might help 
with unicode issues:

    2to3-3.1 -w --no-diffs mako test
 
The above will rewrite all files in-place in Python 3 format.

Running Tests
-------------

To run the unit tests, ensure Distribute is installed as above,
and also that at least the ./mako/ and ./test/ directories have been converted
to Python 3 using the source tool above.   A Python 3 version of Nose
can be acquired from Bitbucket using Mercurial:

    hg clone http://bitbucket.org/jpellerin/nose3/
    cd nose3
    python3 setup.py install

The tests can then be run using the "nosetests3" script installed 
by the above (python3 setup.py test doesn't seem to be working with 
nose3).


webapp2
=======
webapp2 is a lightweight Python web framework compatible with Google App
Engine's webapp.

- Project page: http://code.google.com/p/webapp-improved/
- User guide: http://webapp-improved.appspot.com/

