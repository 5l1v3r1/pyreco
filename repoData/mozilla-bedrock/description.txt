# Info for Contributors

Hi there. Thanks so much for helping us out with mozilla.org! There are a few
things you should know. Most of the things are in the
[bedrock docs](http://bedrock.readthedocs.org/en/latest/contribute.html). These
docs have a lot of information about how to get your local environment setup
for development, as well as how to format your code and commit messages.
Following these guidelines will very much increase the chances of a pleasant
code-review experience.

bedrock
=======

*bedrock* is the code name of the new mozilla.org. It is bound to be as shiny,
awesome, and open sourcy as always. Perhaps even a little more.

Stay tuned.

Docs
----

bedrock is a [playdoh project][playdoh]. Check out the [playdoh docs][pd-docs]
for general technical documentation. In addition, there are project-specific
[bedrock docs][br-docs].

[playdoh]: https://github.com/mozilla/playdoh
[pd-docs]: http://playdoh.readthedocs.org/
[br-docs]: http://bedrock.readthedocs.org/

Contributing
------------

Patches are welcome! Feel free to fork and contribute to this project on
[github][gh-bedrock].

[gh-bedrock]: https://github.com/mozilla/bedrock


License
-------
This software is licensed under the [MPL/GPL/LGPL tri-license][MPL]. For more
information, read the file ``LICENSE``.

[MPL]: http://www.mozilla.org/MPL/



= Introduction =

  >>> from bs4 import BeautifulSoup
  >>> soup = BeautifulSoup("<p>Some<b>bad<i>HTML")
  >>> print soup.prettify()
  <html>
   <body>
    <p>
     Some
     <b>
      bad
      <i>
       HTML
      </i>
     </b>
    </p>
   </body>
  </html>
  >>> soup.find(text="bad")
  u'bad'

  >>> soup.i
  <i>HTML</i>

  >>> soup = BeautifulSoup("<tag1>Some<tag2/>bad<tag3>XML", "xml")
  >>> print soup.prettify()
  <?xml version="1.0" encoding="utf-8">
  <tag1>
   Some
   <tag2 />
   bad
   <tag3>
    XML
   </tag3>
  </tag1>

= Full documentation =

The bs4/doc/ directory contains full documentation in Sphinx
format. Run "make html" in that directory to create HTML
documentation.

= Running the unit tests =

Beautiful Soup supports unit test discovery from the project root directory:

 $ nosetests

 $ python -m unittest discover -s bs4 # Python 2.7 and up

If you checked out the source tree, you should see a script in the
home directory called test-all-versions. This script will run the unit
tests under Python 2.7, then create a temporary Python 3 conversion of
the source and run the unit tests again under Python 3.

= Links =

Homepage: http://www.crummy.com/software/BeautifulSoup/bs4/
Documentation: http://www.crummy.com/software/BeautifulSoup/bs4/doc/
               http://readthedocs.org/docs/beautiful-soup-4/
Discussion group: http://groups.google.com/group/beautifulsoup/
Development: https://code.launchpad.net/beautifulsoup/
Bug tracker: https://bugs.launchpad.net/beautifulsoup/

Certifi: Python SSL Certificates
================================

This package may or may not become a dependency of Requests. Mozilla's
CA bundle for SSL is MPL / GPL licensed. This will allow for that.
This software is a 100% Python interface to the memcached memory cache
daemon.  It is the client side software which allows storing values in one
or more, possibly remote, memcached servers.  Search google for memcached
for more information.

This package was originally written by Evan Martin of Danga.
Please do not contact Evan about maintenance.
Sean Reifschneider of tummy.com, ltd. has taken over maintenance of it.

Django reCAPTCHA
================
**Django reCAPTCHA form field/widget integration app.**

.. contents:: Contents
    :depth: 5

django-recaptcha uses a modified version of the `Python reCAPTCHA client <http://pypi.python.org/pypi/recaptcha-client>`_ which is included in the package as ``client.py``.


Installation
------------

#. Install or add ``django-recaptcha`` to your Python path.

#. Add ``captcha`` to your ``INSTALLED_APPS`` setting.

#. Add a ``RECAPTCHA_PUBLIC_KEY`` setting to the project's ``settings.py`` file. This is your public API key as provided by reCAPTCHA, i.e.::
    
    RECAPTCHA_PUBLIC_KEY = '76wtgdfsjhsydt7r5FFGFhgsdfytd656sad75fgh'
    
   This can be seperately specified at runtime by passing a ``public_key`` parameter when constructing the ``ReCaptchaField``, see field usage below.

#. Add a ``RECAPTCHA_PRIVATE_KEY`` setting to the project's ``settings.py`` file. This is your private API key as provided by reCAPTCHA, i.e.::
    
    RECAPTCHA_PRIVATE_KEY = '98dfg6df7g56df6gdfgdfg65JHJH656565GFGFGs'
   
   This can be seperately specified at runtime by passing a ``private_key`` parameter when constructing the ``ReCaptchaField``, see field usage below.

#. Optionally add a ``RECAPTCHA_USE_SSL`` setting to the project's ``settings.py`` file. This causes reCAPTCHA validation submits to be made over SSL, i.e.::
    
    RECAPTCHA_USE_SSL = True

   If you don't add this setting the default behaviour is to **NOT** use SSL.
   This can be seperately specified at runtime by passing a ``use_ssl`` parameter when constructing the ``ReCaptchaField``, see field usage below.

Usage
-----

Field
~~~~~
The quickest way to add reCAPTHCA to a form is to use the included ``ReCaptchaField`` field type. A ``ReCaptcha`` widget will be rendered with the field validating itself without any further action required from you. For example::

    from django import forms
    from captcha.fields import ReCaptchaField

    class FormWithCaptcha(forms.Form):
        captcha = ReCaptchaField()

To allow for runtime specification of keys and SSL usage you can optionally pass ``private_key``, ``public_key`` or ``use_ssl`` parameters to the constructor, i.e.::
    
    captcha = ReCaptchaField(
        public_key='76wtgdfsjhsydt7r5FFGFhgsdfytd656sad75fgh',
        private_key='98dfg6df7g56df6gdfgdfg65JHJH656565GFGFGs',
        use_ssl=True
    )

If specified these parameters will be used instead of your reCAPCTHA project settings.
        
The reCAPTCHA widget supports several `Javascript options variables <https://code.google.com/apis/recaptcha/docs/customization.html>`_ customizing the behaviour of the widget, such as ``theme`` and ``lang``. You can forward these options to the widget by passing an ``attr`` parameter containing a dictionary of options to ``ReCaptchaField``, i.e.::

    captcha = ReCaptchaField(attrs={'theme' : 'clean'})

The captcha client takes the key/value pairs and writes out the RecaptchaOptions value in JavaScript.


Unit Testing
~~~~~~~~~~~~
django-recaptcha detects for `DEBUG = True` in the settings.py to facilitate unit tests.
When `DEBUG = TRUE`, using `PASSED` as the `recaptcha_response_field` value.

Example:

    form_params = {'recaptcha_response_field': 'PASSED'}
    form = RegistrationForm(form_params) # assuming only one ReCaptchaField
    form.is_valid() # True

Passing any other values will cause django-recaptcha to continue normal processing and return a form error.


django-registration
~~~~~~~~~~~~~~~~~~~
django-recaptcha ships with a `django-registration <https://bitbucket.org/ubernostrum/django-registration>`_ backend extending the default backend to include a reCAPTCHA field. This is included mostly as an example of how you could intergrate a reCAPTCHA field with django-registration. I suggest you familiarize yourself with `the django-registration docs <http://docs.b-list.org/django-registration/0.8/index.html>`_ for more comprehensive documentation. 

.. note::

    This backend will only work with django-registration versions `0.8-alpha-1 <https://bitbucket.org/ubernostrum/django-registration/downloads/django-registration-0.8-alpha-1.tar.gz>`_ and up.

To use the reCAPTHCA backend complete these steps:

#. Add ``registration`` to your ``INSTALLED_APPS`` setting.

#. Add captcha registration backend url include to your project's ``urls.py`` file::

    (r'^accounts/', include('captcha.backends.default.urls')),

#. Add an ``ACCOUNT_ACTIVATION_DAYS`` setting to the project's ``settings.py`` file. This is the number of days users will have to activate their accounts after registering, as required by django-registration, i.e.::
    
    ACCOUNT_ACTIVATION_DAYS = 7

#. Implement the various `templates as required by django-registration <http://docs.b-list.org/django-registration/0.8/quickstart.html#required-templates>`_.

Once done you should be able to access `/accounts/register/ <http://localhost:8000/accounts/register/>`_ and see the reCAPTCHA field in action as part of the registration process.

Credits
-------
Inspired Marco Fucci's blogpost titled `Integrating reCAPTCHA with Django <http://www.marcofucci.com/tumblelog/26/jul/2009/integrating-recaptcha-with-django>`_


``client.py`` taken from `recaptcha-client <http://pypi.python.org/pypi/recaptcha-client>`_ licenced MIT/X11 by Mike Crawford.

reCAPTCHA copyright 2011 Google.


